{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"yiouejv \u7684\u535a\u5ba2\u8bb0\u5f55 \u00b6 Stay Hungry Stay Foolish. \u672c\u7535\u5b50\u4e66\u5236\u4f5c\u548c\u5199\u4f5c\u65b9\u5f0f \u00b6 \u4f7f\u7528 mkdocs \u548c markdown, mkdocs-material \u6784\u5efa\u3002 markdown \u8bed\u6cd5\u53c2\u8003\uff1a http://xianbai.me/learn-md/article/about/readme.html mkdocs-material \u5b98\u7f51: https://squidfunk.github.io/mkdocs-material/ \u5b89\u88c5\u4f9d\u8d56\uff1a # \u65b9\u5f0f1\uff1a pip install mkdocs # \u5236\u4f5c\u7535\u5b50\u4e66, http://markdown-docs-zh.readthedocs.io/zh_CN/latest/ # https://stackoverflow.com/questions/27882261/mkdocs-and-mathjax/31874157 pip install https://github.com/mitya57/python-markdown-math/archive/master.zip \u7f16\u5199\u5e76\u67e5\u770b\uff1a mkdocs serve # \u4fee\u6539\u81ea\u52a8\u66f4\u65b0\uff0c\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8000 \u8bbf\u95ee # \u6570\u5b66\u516c\u5f0f\u53c2\u8003 https://www.zybuluo.com/codeep/note/163962 mkdocs gh-deploy # \u90e8\u7f72\u5230\u81ea\u5df1\u7684 github pages, \u5982\u679c\u662f readthedocs \u4f1a\u81ea\u52a8\u89e6\u53d1\u6784\u5efa \u8bbf\u95ee \u00b6 http://yiouejv.com","title":"Home"},{"location":"#yiouejv","text":"Stay Hungry Stay Foolish.","title":"yiouejv \u7684\u535a\u5ba2\u8bb0\u5f55"},{"location":"#_1","text":"\u4f7f\u7528 mkdocs \u548c markdown, mkdocs-material \u6784\u5efa\u3002 markdown \u8bed\u6cd5\u53c2\u8003\uff1a http://xianbai.me/learn-md/article/about/readme.html mkdocs-material \u5b98\u7f51: https://squidfunk.github.io/mkdocs-material/ \u5b89\u88c5\u4f9d\u8d56\uff1a # \u65b9\u5f0f1\uff1a pip install mkdocs # \u5236\u4f5c\u7535\u5b50\u4e66, http://markdown-docs-zh.readthedocs.io/zh_CN/latest/ # https://stackoverflow.com/questions/27882261/mkdocs-and-mathjax/31874157 pip install https://github.com/mitya57/python-markdown-math/archive/master.zip \u7f16\u5199\u5e76\u67e5\u770b\uff1a mkdocs serve # \u4fee\u6539\u81ea\u52a8\u66f4\u65b0\uff0c\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8000 \u8bbf\u95ee # \u6570\u5b66\u516c\u5f0f\u53c2\u8003 https://www.zybuluo.com/codeep/note/163962 mkdocs gh-deploy # \u90e8\u7f72\u5230\u81ea\u5df1\u7684 github pages, \u5982\u679c\u662f readthedocs \u4f1a\u81ea\u52a8\u89e6\u53d1\u6784\u5efa","title":"\u672c\u7535\u5b50\u4e66\u5236\u4f5c\u548c\u5199\u4f5c\u65b9\u5f0f"},{"location":"#_2","text":"http://yiouejv.com","title":"\u8bbf\u95ee"},{"location":"etoro/","text":"bilibili \u00b6 \u4e70\u5165\u91d1\u989d \u4e70\u5165\u4ef7 \u5356\u51fa\u4ef7 \u624b\u7eed\u8d39 \u6536\u76ca \u72b6\u6001 $50 $31 $34 $0 \u7b49\u5f85\u4e2d $89 $32.75 $35 $0 \u7b49\u5f85\u4e2d $93.12 $32.7 $36.21 $0 \u7b49\u5f85\u4e2d $195.93 $33.82 $37.27 $0 \u7b49\u5f85\u4e2d","title":"Etoro"},{"location":"etoro/#bilibili","text":"\u4e70\u5165\u91d1\u989d \u4e70\u5165\u4ef7 \u5356\u51fa\u4ef7 \u624b\u7eed\u8d39 \u6536\u76ca \u72b6\u6001 $50 $31 $34 $0 \u7b49\u5f85\u4e2d $89 $32.75 $35 $0 \u7b49\u5f85\u4e2d $93.12 $32.7 $36.21 $0 \u7b49\u5f85\u4e2d $195.93 $33.82 $37.27 $0 \u7b49\u5f85\u4e2d","title":"bilibili"},{"location":"wait/","text":"\u5f53\u524d\u5b66\u4e60 \u00b6 \u6ef4\u6c34\u9006\u5411\u8bfe\u7a0b C++ STL skynet \u6e90\u7801\u5256\u6790 leetcode \u5237\u9898\u5957\u8def \u300a\u7f16\u7801\u7684\u5965\u79d8\u300b \u300a\u5f81\u670dC\u6307\u9488\u300b linux \u5b66\u4e60","title":"Wait"},{"location":"wait/#_1","text":"\u6ef4\u6c34\u9006\u5411\u8bfe\u7a0b C++ STL skynet \u6e90\u7801\u5256\u6790 leetcode \u5237\u9898\u5957\u8def \u300a\u7f16\u7801\u7684\u5965\u79d8\u300b \u300a\u5f81\u670dC\u6307\u9488\u300b linux \u5b66\u4e60","title":"\u5f53\u524d\u5b66\u4e60"},{"location":"%E7%94%B5%E5%AD%90%E4%B9%A6/","text":"\u300a\u7b97\u6cd5\u56fe\u89e3\u300b \u300a\u7b97\u6cd5\u5bfc\u8bba\uff08\u7b2c\u4e09\u7248\uff09\u300b \u300a\u5251\u6307OFFER__\u540d\u4f01\u9762\u8bd5\u5b98\u7cbe\u8bb2\u5178\u578b\u7f16\u7a0b\u9898__\u7b2c2\u7248\u300b \u300aSTL\u6e90\u7801\u5256\u6790\u7b80\u4f53\u4e2d\u6587\u5b8c\u6574\u7248\u300b \u300alua\u8d4f\u6790\u300b","title":"\u7535\u5b50\u4e66"},{"location":"Coding%20Interview%20University/readme/","text":"\u8ddf\u7740GitHub\u5927\u4f6c\u7684\u5b66\u4e60\u8db3\u8ff9\u5f00\u59cb\u8bad\u7ec3 \u00b6 https://github.com/yiouejv/coding-interview-university/blob/master/translations/README-cn.md","title":"Readme"},{"location":"Coding%20Interview%20University/readme/#github","text":"https://github.com/yiouejv/coding-interview-university/blob/master/translations/README-cn.md","title":"\u8ddf\u7740GitHub\u5927\u4f6c\u7684\u5b66\u4e60\u8db3\u8ff9\u5f00\u59cb\u8bad\u7ec3"},{"location":"Coding%20Interview%20University/%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/","text":"clang \u00b6 Clang\uff08\u53d1\u97f3\u4e3a/\u02c8kl\u00e6\u014b/\u7c7b\u4f3c\u82f1\u6587\u5355\u5b57clang[1]\uff09 \u662f\u4e00\u4e2aC\u3001C++\u3001Objective-C\u548cObjective-C++\u7f16\u7a0b\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u524d\u7aef\u3002\u5b83\u91c7\u7528\u4e86LLVM\u4f5c\u4e3a\u5176\u540e\u7aef\uff0c\u800c\u4e14\u7531LLVM2.6\u5f00\u59cb\uff0c\u4e00\u8d77\u53d1\u5e03\u65b0\u7248\u672c\u3002\u5b83\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u4e2aGNU\u7f16\u8bd1\u5668\u5957\u88c5\uff08GCC\uff09\u7684\u66ff\u4ee3\u54c1\uff0c\u652f\u6301\u4e86GNU\u7f16\u8bd1\u5668\u5927\u591a\u6570\u7684\u7f16\u8bd1\u8bbe\u7f6e\u4ee5\u53ca\u975e\u5b98\u65b9\u8bed\u8a00\u7684\u6269\u5c55\u3002\u4f5c\u8005\u662f\u514b\u91cc\u65af\u00b7\u62c9\u7279\u7eb3\uff08Chris Lattner\uff09\uff0c\u5728\u82f9\u679c\u516c\u53f8\u7684\u8d5e\u52a9\u652f\u6301\u4e0b\u8fdb\u884c\u5f00\u53d1\uff0c\u800c\u6e90\u4ee3\u7801\u8bb8\u53ef\u662f\u4f7f\u7528\u7c7bBSD\u7684\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u5384\u5df4\u7eb3-\u9999\u69df\u5206\u6821\u5f00\u6e90\u7801\u8bb8\u53ef\u3002 Clang\u9879\u76ee\u5305\u62ecClang\u524d\u7aef\u548cClang\u9759\u6001\u5206\u6790\u5668\u7b49\u3002 \u8fd9\u4e2a\u8f6f\u4ef6\u9879\u76ee\u57282005\u5e74\u7531\u82f9\u679c\u7535\u8111\u53d1\u8d77\uff0c\u662fLLVM\u7f16\u8bd1\u5668\u5de5\u5177\u96c6\u7684\u524d\u7aef\uff08front-end\uff09\uff0c\u76ee\u7684\u662f\u8f93\u51fa\u4ee3\u7801\u5bf9\u5e94\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff08Abstract Syntax Tree, AST\uff09\uff0c\u5e76\u5c06\u4ee3\u7801\u7f16\u8bd1\u6210LLVM Bitcode\u3002\u63a5\u7740\u5728\u540e\u7aef\uff08back-end\uff09\u4f7f\u7528LLVM\u7f16\u8bd1\u6210\u5e73\u53f0\u76f8\u5173\u7684\u673a\u5668\u8bed\u8a00 \u3002Clang\u652f\u6301C\u3001C++\u3001Objective C\u3002 \u5728Clang\u8bed\u8a00\u4e2d\uff0c\u4f7f\u7528Stmt\u6765\u4ee3\u8868statement\u3002Clang\u4ee3\u7801\u7684\u5355\u5143\uff08unit\uff09\u7686\u4e3a\u8bed\u53e5\uff08statement\uff09\uff0c\u8bed\u6cd5\u6811\u7684\u8282\u70b9\uff08node\uff09\u7c7b\u578b\u5c31\u662fStmt\u3002\u53e6\u5916Clang\u7684\u8868\u8fbe\u5f0f\uff08Expression\uff09\u4e5f\u662f\u8bed\u53e5\u7684\u4e00\u79cd\uff0cClang\u4f7f\u7528Expr\u6765\u4ee3\u8868Expression\uff0cExpr\u672c\u8eab\u7ee7\u627f\u81eaStmt\u3002\u8282\u70b9\u4e4b\u4e0b\u6709\u5b50\u8282\u70b9\u5217\u8868\uff08sub-node-list\uff09\u3002 Clang\u672c\u8eab\u6027\u80fd\u4f18\u5f02\uff0c\u5176\u751f\u6210\u7684AST\u6240\u8017\u7528\u6389\u7684\u5185\u5b58\u4ec5\u4ec5\u662fGCC\u768420%\u5de6\u53f3\u3002FreeBSD\u64cd\u4f5c\u7cfb\u7edf\u81ea2014\u5e741\u6708\u53d1\u884c\u768410.0\u7248\u672c\u5f00\u59cb\u5c06Clang/LLVM\u4f5c\u4e3a\u9ed8\u8ba4\u7f16\u8bd1\u5668 \u6d4b\u8bd5\u8bc1\u660eClang\u7f16\u8bd1Objective-C\u4ee3\u7801\u65f6\u901f\u5ea6\u4e3aGCC\u76843\u500d[4]\uff0c\u8fd8\u80fd\u9488\u5bf9\u7528\u6237\u53d1\u751f\u7684\u7f16\u8bd1\u9519\u8bef\u51c6\u786e\u5730\u7ed9\u51fa\u5efa\u8bae","title":"\u5fc5\u5907\u77e5\u8bc6"},{"location":"Coding%20Interview%20University/%E5%BF%85%E5%A4%87%E7%9F%A5%E8%AF%86/#clang","text":"Clang\uff08\u53d1\u97f3\u4e3a/\u02c8kl\u00e6\u014b/\u7c7b\u4f3c\u82f1\u6587\u5355\u5b57clang[1]\uff09 \u662f\u4e00\u4e2aC\u3001C++\u3001Objective-C\u548cObjective-C++\u7f16\u7a0b\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u524d\u7aef\u3002\u5b83\u91c7\u7528\u4e86LLVM\u4f5c\u4e3a\u5176\u540e\u7aef\uff0c\u800c\u4e14\u7531LLVM2.6\u5f00\u59cb\uff0c\u4e00\u8d77\u53d1\u5e03\u65b0\u7248\u672c\u3002\u5b83\u7684\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u4e2aGNU\u7f16\u8bd1\u5668\u5957\u88c5\uff08GCC\uff09\u7684\u66ff\u4ee3\u54c1\uff0c\u652f\u6301\u4e86GNU\u7f16\u8bd1\u5668\u5927\u591a\u6570\u7684\u7f16\u8bd1\u8bbe\u7f6e\u4ee5\u53ca\u975e\u5b98\u65b9\u8bed\u8a00\u7684\u6269\u5c55\u3002\u4f5c\u8005\u662f\u514b\u91cc\u65af\u00b7\u62c9\u7279\u7eb3\uff08Chris Lattner\uff09\uff0c\u5728\u82f9\u679c\u516c\u53f8\u7684\u8d5e\u52a9\u652f\u6301\u4e0b\u8fdb\u884c\u5f00\u53d1\uff0c\u800c\u6e90\u4ee3\u7801\u8bb8\u53ef\u662f\u4f7f\u7528\u7c7bBSD\u7684\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u5384\u5df4\u7eb3-\u9999\u69df\u5206\u6821\u5f00\u6e90\u7801\u8bb8\u53ef\u3002 Clang\u9879\u76ee\u5305\u62ecClang\u524d\u7aef\u548cClang\u9759\u6001\u5206\u6790\u5668\u7b49\u3002 \u8fd9\u4e2a\u8f6f\u4ef6\u9879\u76ee\u57282005\u5e74\u7531\u82f9\u679c\u7535\u8111\u53d1\u8d77\uff0c\u662fLLVM\u7f16\u8bd1\u5668\u5de5\u5177\u96c6\u7684\u524d\u7aef\uff08front-end\uff09\uff0c\u76ee\u7684\u662f\u8f93\u51fa\u4ee3\u7801\u5bf9\u5e94\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\uff08Abstract Syntax Tree, AST\uff09\uff0c\u5e76\u5c06\u4ee3\u7801\u7f16\u8bd1\u6210LLVM Bitcode\u3002\u63a5\u7740\u5728\u540e\u7aef\uff08back-end\uff09\u4f7f\u7528LLVM\u7f16\u8bd1\u6210\u5e73\u53f0\u76f8\u5173\u7684\u673a\u5668\u8bed\u8a00 \u3002Clang\u652f\u6301C\u3001C++\u3001Objective C\u3002 \u5728Clang\u8bed\u8a00\u4e2d\uff0c\u4f7f\u7528Stmt\u6765\u4ee3\u8868statement\u3002Clang\u4ee3\u7801\u7684\u5355\u5143\uff08unit\uff09\u7686\u4e3a\u8bed\u53e5\uff08statement\uff09\uff0c\u8bed\u6cd5\u6811\u7684\u8282\u70b9\uff08node\uff09\u7c7b\u578b\u5c31\u662fStmt\u3002\u53e6\u5916Clang\u7684\u8868\u8fbe\u5f0f\uff08Expression\uff09\u4e5f\u662f\u8bed\u53e5\u7684\u4e00\u79cd\uff0cClang\u4f7f\u7528Expr\u6765\u4ee3\u8868Expression\uff0cExpr\u672c\u8eab\u7ee7\u627f\u81eaStmt\u3002\u8282\u70b9\u4e4b\u4e0b\u6709\u5b50\u8282\u70b9\u5217\u8868\uff08sub-node-list\uff09\u3002 Clang\u672c\u8eab\u6027\u80fd\u4f18\u5f02\uff0c\u5176\u751f\u6210\u7684AST\u6240\u8017\u7528\u6389\u7684\u5185\u5b58\u4ec5\u4ec5\u662fGCC\u768420%\u5de6\u53f3\u3002FreeBSD\u64cd\u4f5c\u7cfb\u7edf\u81ea2014\u5e741\u6708\u53d1\u884c\u768410.0\u7248\u672c\u5f00\u59cb\u5c06Clang/LLVM\u4f5c\u4e3a\u9ed8\u8ba4\u7f16\u8bd1\u5668 \u6d4b\u8bd5\u8bc1\u660eClang\u7f16\u8bd1Objective-C\u4ee3\u7801\u65f6\u901f\u5ea6\u4e3aGCC\u76843\u500d[4]\uff0c\u8fd8\u80fd\u9488\u5bf9\u7528\u6237\u53d1\u751f\u7684\u7f16\u8bd1\u9519\u8bef\u51c6\u786e\u5730\u7ed9\u51fa\u5efa\u8bae","title":"clang"},{"location":"Coding%20Interview%20University/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%28IEEE%20754%E6%A0%87%E5%87%86%29/","text":"\u6d6e\u70b9\u6570\u662f\u6211\u4eec\u5728\u7a0b\u5e8f\u91cc\u5e38\u7528\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u5728\u5185\u5b58\u4e2d\u5230\u5e95\u662f\u600e\u4e48\u6837\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u662f\u6211\u4e86\u89e3\u4e4b\u524d\u662f\u89c9\u5f97\u597d\u795e\u5947\uff0c\u4ee5\u6b64\u8bb0\u5f55\uff0c\u4f5c\u4e3a\u5b66\u4e60\u7b14\u8bb0\u3002 \u73b0\u4ee3\u8ba1\u7b97\u673a\u4e2d\uff0c\u4e00\u822c\u90fd\u4ee5IEEE 754\u6807\u51c6\u5b58\u50a8\u6d6e\u70b9\u6570\uff0c\u8fd9\u4e2a\u6807\u51c6\u7684\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u5f62\u5f0f\u4e3a\uff1a \u5bf9\u4e8e\u4e0d\u540c\u957f\u5ea6\u7684\u6d6e\u70b9\u6570\uff0c\u9636\u7801\u4e0e\u5c0f\u6570\u4f4d\u5206\u914d\u7684\u6570\u91cf\u4e0d\u4e00\u6837\uff0c\u5982\u4e0b\uff1a \u5bf9\u4e8e32\u4f4d\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u6570\u7b26\u5206\u914d\u662f1\u4f4d\uff0c\u9636\u7801\u5206\u914d\u4e868\u4f4d\uff0c\u5c3e\u6570\u5206\u914d\u4e86\u662f23\u4f4d\u3002 \u6839\u636e\u8fd9\u4e2a\u6807\u51c6\uff0c\u6211\u4eec\u6765\u5c1d\u8bd5\u628a\u4e00\u4e2a\u5341\u8fdb\u5236\u7684\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3aIEEE754\u6807\u51c6\u8868\u793a\u3002 \u4f8b\u5982\uff1a178.125 \u5148\u628a\u6d6e\u70b9\u6570\u5206\u522b\u628a\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\u8f6c\u6362\u62102\u8fdb\u5236 \u6574\u6570\u90e8\u5206\u7528\u96642\u53d6\u4f59\u7684\u65b9\u6cd5\uff0c\u6c42\u5f97\uff1a10110010 \u5c0f\u6570\u90e8\u5206\u7528\u4e582\u53d6\u6574\u7684\u65b9\u6cd5\uff0c\u6c42\u5f97\uff1a001 \u5408\u8d77\u6765\u5373\u662f\uff1a10110010.001 \u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u7684\u6d6e\u70b9\u6570\uff0c\u5373\u628a\u5c0f\u6570\u70b9\u79fb\u52a8\u5230\u6574\u6570\u4f4d\u53ea\u67091\uff0c\u5373\u4e3a\uff1a1.0110010001 * 2^111\uff0c111\u662f\u4e8c\u8fdb\u5236\uff0c\u7531\u4e8e\u5de6\u79fb\u4e867\u4f4d\uff0c\u6240\u4ee5\u662f111 \u628a\u6d6e\u70b9\u6570\u8f6c\u6362\u4e8c\u8fdb\u5236\u540e\uff0c\u8fd9\u91cc\u57fa\u672c\u5df2\u7ecf\u53ef\u4ee5\u5f97\u51fa\u5bf9\u5e943\u90e8\u5206\u7684\u503c\u4e86 \u6570\u7b26\uff1a\u7531\u4e8e\u6d6e\u70b9\u6570\u662f\u6b63\u6570\uff0c\u6545\u4e3a0.(\u8d1f\u6570\u4e3a1) \u9636\u7801 : \u9636\u7801\u7684\u8ba1\u7b97\u516c\u5f0f\uff1a\u9636\u6570 + \u504f\u79fb\u91cf, \u9636\u7801\u662f\u9700\u8981\u4f5c\u79fb\u7801\u8fd0\u7b97\uff0c\u5728\u8f6c\u6362\u51fa\u6765\u7684\u4e8c\u8fdb\u5236\u6570\u91cc\uff0c\u9636\u6570\u662f111(\u5341\u8fdb\u5236\u4e3a7)\uff0c\u5bf9\u4e8e\u5355\u7cbe\u5ea6\u7684\u6d6e\u70b9\u6570\uff0c\u504f\u79fb\u503c\u4e3a01111111(127)[\u504f\u79fb\u91cf\u7684\u8ba1\u7b97\u662f\uff1a2^(e-1)-1, e\u4e3a\u9636\u7801\u7684\u4f4d\u6570\uff0c\u5373\u4e3a8\uff0c\u56e0\u6b64\u504f\u79fb\u503c\u662f127]\uff0c\u5373\uff1a111+01111111 = 10000110 \u5c3e\u6570\uff1a\u5c0f\u6570\u70b9\u540e\u9762\u7684\u6570\uff0c\u53730110010001 \u89c6\u9891\u8bb2\u89e3: https://www.youtube.com/watch?v=oyWHqJ3ZNJw","title":"\u6d6e\u70b9\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a(IEEE 754\u6807\u51c6)"},{"location":"cpp/STL%20%E7%AE%80%E4%BB%8B/","text":"STL (Standard Template Library) \u6807\u51c6\u6a21\u677f\u5e93 STL \u7684\u5730\u4f4d \u00b6 C++ \u542b\u4e49\uff1a C\u8bed\u8a00+\u7c7b+\u6a21\u677f STL \u6574\u4f53\u5185\u5bb9 \u00b6 STL \u76846\u5927\u7ec4\u4ef6 \u00b6 \u5bb9\u5668 \u8fed\u4ee3\u5668 \u7b97\u6cd5 \u9002\u914d\u5668 \u5206\u914d\u5668 \u4eff\u51fd\u6570 \u5bb9\u5668 container \u00b6 \u7cfb\u7edf\u5c01\u88c5\u597d\u7684\u6570\u636e\u7ed3\u6784 \u987a\u5e8f\u5bb9\u5668 string \u6570\u7ec4 array, vector (\u6570\u7ec4\uff0c\u5411\u91cf) \u94fe\u8868 list, forward_list (\u5355\u5411\u94fe\u8868\uff0c\u53cc\u5411\u94fe\u8868) \u6808 stack \u961f\u5217 deque \u6811 map, set hash\u8868 hash_map \u5173\u8054\u5bb9\u5668 \u6709\u5e8f\u5bb9\u5668 map \u952e\u503c\u4fdd\u5b58\uff0c\u9ad8\u6821\u8bbf\u95ee multimap set \u96c6\u5408 multiset \u65e0\u5e8f\u5bb9\u5668 unorder_map unorder_multimap unorder_set unorder_multiset \u6bcf\u79cd\u6570\u636e\u7ed3\u6784\u90fd\u80fd\u88c5\u4efb\u610f\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u601d\u60f3\uff0c\u4e5f\u662f\u6a21\u677f\u7684\u5e94\u7528 \u7b97\u6cd5 algorithm \u00b6 \u7cfb\u7edf\u5185\u7f6e\u7684\u5e38\u7528\u7b97\u6cd5\uff0c\u6392\u5e8f\uff0c\u4ea4\u6362\uff0c\u66ff\u6362\u7b49\u3002 \u4e00\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u9002\u7528\u591a\u4e2a\u5bb9\u5668\u3002 \u8fed\u4ee3\u5668 iterator \u00b6 \u94fe\u63a5\u5bb9\u5668\u548c\u7b97\u6cd5 STL \u7684\u4f18\u70b9 \u00b6 \u8282\u7701\u5f00\u53d1\u65f6\u95f4\uff0c\u63d0\u9ad8\u5f00\u53d1\u6548\u7387 \u9ad8\u79fb\u690d\u6027 STL \u662fc++\u6807\u51c6\u5e93\uff0c\u6240\u6709\u7684c++\u7f16\u8bd1\u5668\u90fd\u5fc5\u987b\u652f\u6301\u3002 \u9ad8\u6027\u80fd \u6bcf\u4e2a\u5bb9\u5668\u7684\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u90fd\u662f\u7ecf\u8fc7\u51e0\u4ee3\u5927\u5e08\u7684\u4fee\u6539\u3002","title":"STL \u7b80\u4ecb"},{"location":"cpp/STL%20%E7%AE%80%E4%BB%8B/#stl","text":"C++ \u542b\u4e49\uff1a C\u8bed\u8a00+\u7c7b+\u6a21\u677f","title":"STL \u7684\u5730\u4f4d"},{"location":"cpp/STL%20%E7%AE%80%E4%BB%8B/#stl_1","text":"","title":"STL \u6574\u4f53\u5185\u5bb9"},{"location":"cpp/STL%20%E7%AE%80%E4%BB%8B/#stl-6","text":"\u5bb9\u5668 \u8fed\u4ee3\u5668 \u7b97\u6cd5 \u9002\u914d\u5668 \u5206\u914d\u5668 \u4eff\u51fd\u6570","title":"STL \u76846\u5927\u7ec4\u4ef6"},{"location":"cpp/STL%20%E7%AE%80%E4%BB%8B/#container","text":"\u7cfb\u7edf\u5c01\u88c5\u597d\u7684\u6570\u636e\u7ed3\u6784 \u987a\u5e8f\u5bb9\u5668 string \u6570\u7ec4 array, vector (\u6570\u7ec4\uff0c\u5411\u91cf) \u94fe\u8868 list, forward_list (\u5355\u5411\u94fe\u8868\uff0c\u53cc\u5411\u94fe\u8868) \u6808 stack \u961f\u5217 deque \u6811 map, set hash\u8868 hash_map \u5173\u8054\u5bb9\u5668 \u6709\u5e8f\u5bb9\u5668 map \u952e\u503c\u4fdd\u5b58\uff0c\u9ad8\u6821\u8bbf\u95ee multimap set \u96c6\u5408 multiset \u65e0\u5e8f\u5bb9\u5668 unorder_map unorder_multimap unorder_set unorder_multiset \u6bcf\u79cd\u6570\u636e\u7ed3\u6784\u90fd\u80fd\u88c5\u4efb\u610f\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u601d\u60f3\uff0c\u4e5f\u662f\u6a21\u677f\u7684\u5e94\u7528","title":"\u5bb9\u5668 container"},{"location":"cpp/STL%20%E7%AE%80%E4%BB%8B/#algorithm","text":"\u7cfb\u7edf\u5185\u7f6e\u7684\u5e38\u7528\u7b97\u6cd5\uff0c\u6392\u5e8f\uff0c\u4ea4\u6362\uff0c\u66ff\u6362\u7b49\u3002 \u4e00\u4e2a\u7b97\u6cd5\u53ef\u4ee5\u9002\u7528\u591a\u4e2a\u5bb9\u5668\u3002","title":"\u7b97\u6cd5 algorithm"},{"location":"cpp/STL%20%E7%AE%80%E4%BB%8B/#iterator","text":"\u94fe\u63a5\u5bb9\u5668\u548c\u7b97\u6cd5","title":"\u8fed\u4ee3\u5668 iterator"},{"location":"cpp/STL%20%E7%AE%80%E4%BB%8B/#stl_2","text":"\u8282\u7701\u5f00\u53d1\u65f6\u95f4\uff0c\u63d0\u9ad8\u5f00\u53d1\u6548\u7387 \u9ad8\u79fb\u690d\u6027 STL \u662fc++\u6807\u51c6\u5e93\uff0c\u6240\u6709\u7684c++\u7f16\u8bd1\u5668\u90fd\u5fc5\u987b\u652f\u6301\u3002 \u9ad8\u6027\u80fd \u6bcf\u4e2a\u5bb9\u5668\u7684\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u7b97\u6cd5\u7684\u5b9e\u73b0\uff0c\u90fd\u662f\u7ecf\u8fc7\u51e0\u4ee3\u5927\u5e08\u7684\u4fee\u6539\u3002","title":"STL \u7684\u4f18\u70b9"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/","text":"string \u7684\u6784\u9020\u51fd\u6570 \u00b6 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ; cout << str << ' ' << str . empty () << endl ; // string(size_type length, char ch) // \u6e90\u7801: typedef size_t size_type; unsign int string str1 ( 5 , 'a' ); cout << str1 << ' ' << str1 . empty () << endl ; // string(const char* str) string str2 ( \"abcdefg\" ); cout << str2 << ' ' << str2 . empty () << endl ; // string(const char* str, size_type length) string str3 ( \"abcdefg\" , 2 ); cout << str3 << ' ' << str3 . empty () << endl ; // string(const char* str, size_type index, size_type length) string str4 ( \"abcdefg\" , 2 , 5 ); cout << str4 << ' ' << str4 . empty () << endl ; // sting(const sting& str) string str5 ( str4 ); cout << str5 << ' ' << str5 . empty () << endl ; return 0 ; } string \u5bf9\u8c61\u5c5e\u6027 \u00b6 \u5bb9\u91cf capacity() \u00b6 \u548c\u7f16\u8bd1\u5668\u6709\u5173\u7cfb \u5982\u679c\u58f0\u660e\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u5c11\u4e8e15\u4e2a\uff0c\u5219\u5bb9\u91cf\u4e3a15 \u6bcf\u6b21\u6ea2\u51fa\u5219\u591a\u7533\u8bf716\u4e2a\u5b57\u7b26\u7a7a\u95f4\u3002 \u4fee\u6539\u5bb9\u91cf reserve() \u00b6 \u53ea\u80fd\u4f7f\u5bb9\u91cf\u53d8\u5927\uff0c\u4e0d\u80fd\u53d8\u5c0f #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ; cout << str . capacity () << endl ; // 15 str . reserve ( 15 ); cout << str . capacity () << endl ; // 15 str . reserve ( 16 ); cout << str . capacity () << endl ; // 31 str . reserve ( 20 ); cout << str . capacity () << endl ; // 31 str . reserve ( 32 ); cout << str . capacity () << endl ; // 47 return 0 ; } \u5c0f\u4e8e\u7b49\u4e8e 15, \u5219\u4e0d\u53d8\uff0c\u591a\u4f5915\uff0c\u5219\u6309\u6ea2\u51fa\u5904\u7406 \u603b\u7ed3: \u8c03\u7528\u4e4b\u540e\uff0c15-31-47-63 ... \u957f\u5ea6 length(), \u5b57\u7b26\u4e2a\u6570 size() \u00b6 resize() \u00b6 \u91cd\u65b0\u8bbe\u7f6e\u5b57\u7b26\u4e2a\u6570 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); cout << \"str: \" << str << ' ' << \"length: \" << str . length () << ' ' << \"size: \" << str . size () << ' ' << \"capacity: \" << str . capacity () << endl ; str . resize ( 3 ); cout << \"str: \" << str << ' ' << \"length: \" << str . length () << ' ' << \"size: \" << str . size () << ' ' << \"capacity: \" << str . capacity () << endl ; return 0 ; } \u8f93\u51fa str: abcdefg length: 7 size: 7 capacity: 15 str: abc length: 3 size: 3 capacity: 15 string \u67e5\u8be2 \u00b6 \u8f93\u51fa\u6574\u4e2a\u5b57\u7b26\u4e32 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); cout << str << endl ; cout << str . c_str () << endl ; return 0 ; } \u8f93\u51fa\u5355\u4e2a\u5b57\u7b26 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); cout << str [ 0 ] << endl ; cout << str [ 1 ] << endl ; cout << str . at ( 2 ) << endl ; return 0 ; } string \u4fee\u6539 \u00b6 \u4fee\u6539\u6307\u5b9a\u5143\u7d20 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); str [ 0 ] = 's' ; cout << str << endl ; str . at ( 1 ) = 'm' ; cout << str << endl ; return 0 ; } insert() basic_string & insert ( size_type index , const basic_string & str ); // index \u4f4d\u7f6e\u63d2\u5165str basic_string & insert ( size_type index , const char * str ); // index \u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26\u4e32 basic_string & insert ( size_type index1 , const basic_string & str , size_type index2 , size_type num ); basic_string & insert ( size_type index , const char * str , size_type num ); // \u63d2\u5165\u524d\u51e0\u4e2a basic_string & insert ( size_type index , size_type num , charch ); // \u63d2\u5165n\u4e2ach append() basic_string & append ( const basic_string & str ); // \u5c3e\u5df4\u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u62fc\u63a5 basic_string & append ( const char * str ); // \u5c3e\u5df4\u901a\u8fc7\u4e00\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5 basic_string & append ( const basic_string & str , size_type index , size_type len ); // \u5c3e\u5df4\u901a\u8fc7\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u67d0\u4e00\u6bb5\u62fc\u63a5 basic_string & append ( const char * str , size_type num ); // \u62fc\u63a5\u5b57\u7b26\u4e32\u524d\u51e0\u4e2a basic_string & append ( size_type num , char ch ); // \u62fc\u63a5num\u4e2a\u5b57\u7b26 string \u91cd\u65b0\u8d4b\u503c \u00b6 = \u8d4b\u503c\uff0c string\u5bf9\u8c61\u6216\u5b57\u7b26\u4e32 >> \u8f93\u5165 assign() basic_string & assign ( const basic_string & str ); // \u4ee5str\u8d4b\u503c basic_string & assign ( const char * str ); // \u4ee5\u5b57\u7b26\u4e32\u8d4b\u503c basic_string & assign ( const basic_string & str , size_type index , size_type len ); // \u4ee5str\u8d4b\u503c basic_string & assign ( const char * str , size_type num ); // \u5b57\u7b26\u4e32\u524d\u51e0\u4e2a\u8d4b\u503c basic_string & assign ( size_type num , char ch ); // num\u4e2ach\u8d4b\u503c string \u5220\u9664 \u00b6 basic_string & erase ( size_type index = 0 , size_type num = npos ); // \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u6307\u5b9a\u4e2a\u6570 string \u6bd4\u8f83 \u00b6 a < b return 1 , a == b return 0 , a > b return -1 int compare ( const basic_string & str ); // \u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61 int compare ( const char * str ); // \u6bd4\u8f83\u4e00\u4e2a\u5bf9\u8c61\u548c\u5b57\u7b26\u4e32 int compare ( size_type index , size_type length , const basic_string & str ); // \u672c\u5bf9\u8c61\u7684\u4e00\u6bb5\uff0c\u8ddf\u53c2\u65703\u7684\u5bf9\u8c61\u8fdb\u884c\u6bd4\u8f83 int compare ( size_type index , size_type length , const basic_string & str , size_type index2 , size_type length2 ); string \u590d\u5236 \u00b6 size_type copy ( char * str , size_type num , size_type index ) // \u5c06\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e00\u6bb5\u590d\u5236\u8fdb\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u4e2d string \u67e5\u627e\u5b50\u4e32 \u00b6 size_type find ( const basic_string & str , size_type index ); // \u4ece\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u67e5\u627estr size_type find ( const char * str , size_type index ); // \u6307\u5b9a\u4f4d\u7f6e\u67e5\u627e\u5b57\u7b26\u4e32 size_type find ( const char * str , size_type index , size_type length ); // \u6307\u5b9a\u6bb5\u67e5\u627estr size_type find ( char ch , size_type index ); // \u6307\u5b9a\u4f4d\u7f6e\u67e5\u627e\u5b57\u7b26 string \u8fd4\u56de\u5b50\u4e32 \u00b6 substr ( size_type index , size_type num = npos ); // \u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b50\u4e32 string \u4ea4\u6362 \u00b6 swap ( basic_string & str ); // \u4ea4\u6362\u4e24\u4e2a\u5bf9\u8c61\u7684\u5185\u5bb9 string \u7684\u8fed\u4ee3\u5668 \u00b6 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); string :: iterator iter = str . begin (); // \u8fed\u4ee3\u5668\u8fed\u4ee3 for ( iter ; iter < str . end (); iter ++ ) { cout << * iter << ' ' ; } cout << endl ; // char * \u8fed\u4ee3 for ( size_t i = 0 ; i < str . length (); i ++ ) { cout << str [ i ] << ' ' ; } return 0 ; } \u8bf4\u660e\uff1a str.begin() \u8fd4\u56de\u5b57\u7b26\u4e32\u9996\u5730\u5740\u7684\u8fed\u4ee3\u5668 str.end() \u8fd4\u56de\u5b57\u7b26\u4e32\u5c3e\u5730\u5740\u7684\u8fed\u4ee3\u5668 Question \u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528\u8fed\u4ee3\u5668\uff0c\u800c\u4e0d\u76f4\u63a5\u7528char* \u6307\u9488\uff1f Answer \u8fed\u4ee3\u5668\u662f\u8981\u548c\u7b97\u6cd5\u8fdb\u884c\u94fe\u63a5\u7684\uff0c\u5b83\u9002\u7528\u4e8e\u6240\u6709\u7684\u8fed\u4ee3\u5668\uff0c\u5373\u4e00\u4e2a\u901a\u7528\u7c7b\u578b\u7684\u6307\u9488\uff0c\u6216\u8005\u662f\u667a\u80fd\u6307\u9488\u3002 \u8fed\u4ee3\u5668\u5931\u6548 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); string :: iterator iter = str . begin (); cout << iter [ 2 ] << endl ; str . append ( 18 , 'a' ); //cout << iter[2] << endl; // \u62a5\u9519\uff0c\u8fed\u4ee3\u5668\u5931\u6548 iter = str . begin (); cout << iter [ 2 ] << endl ; return 0 ; } string \u91cd\u65b0\u7533\u8bf7\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u8fed\u4ee3\u5668\u5c31\u4f1a\u5931\u6548\uff0c\u9700\u8981\u91cd\u65b0\u6307\u5b9a\u4e00\u4e0b for_each() \u00b6 #include <iostream> #include <string> #include <algorithm> using namespace std ; void func ( char c ) { cout << c << ' ' ; } int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); for_each ( str . begin (), str . end (), func ); return 0 ; } for_each \u51fd\u6570\u5c5e\u4e8eSTL\u7b97\u6cd5\u91cc\u7684\u51fd\u6570 sort() \u00b6 #include <iostream> #include <string> #include <algorithm> using namespace std ; void func ( char c ) { cout << c << ' ' ; } int main ( int argc , const char * argv []) { string str ( \"adaszxwesdfas\" ); sort ( str . begin (), str . end ()); for_each ( str . begin (), str . end (), func ); cout << endl ; sort ( str . begin (), str . end (), greater < char > ()); for_each ( str . begin (), str . end (), func ); return 0 ; } \u5176\u4e2d greater \u4e3a\u4eff\u51fd\u6570","title":"STL string\u5bb9\u5668"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string","text":"#include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ; cout << str << ' ' << str . empty () << endl ; // string(size_type length, char ch) // \u6e90\u7801: typedef size_t size_type; unsign int string str1 ( 5 , 'a' ); cout << str1 << ' ' << str1 . empty () << endl ; // string(const char* str) string str2 ( \"abcdefg\" ); cout << str2 << ' ' << str2 . empty () << endl ; // string(const char* str, size_type length) string str3 ( \"abcdefg\" , 2 ); cout << str3 << ' ' << str3 . empty () << endl ; // string(const char* str, size_type index, size_type length) string str4 ( \"abcdefg\" , 2 , 5 ); cout << str4 << ' ' << str4 . empty () << endl ; // sting(const sting& str) string str5 ( str4 ); cout << str5 << ' ' << str5 . empty () << endl ; return 0 ; }","title":"string \u7684\u6784\u9020\u51fd\u6570"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_1","text":"","title":"string \u5bf9\u8c61\u5c5e\u6027"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#capacity","text":"\u548c\u7f16\u8bd1\u5668\u6709\u5173\u7cfb \u5982\u679c\u58f0\u660e\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u5c11\u4e8e15\u4e2a\uff0c\u5219\u5bb9\u91cf\u4e3a15 \u6bcf\u6b21\u6ea2\u51fa\u5219\u591a\u7533\u8bf716\u4e2a\u5b57\u7b26\u7a7a\u95f4\u3002","title":"\u5bb9\u91cf capacity()"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#reserve","text":"\u53ea\u80fd\u4f7f\u5bb9\u91cf\u53d8\u5927\uff0c\u4e0d\u80fd\u53d8\u5c0f #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ; cout << str . capacity () << endl ; // 15 str . reserve ( 15 ); cout << str . capacity () << endl ; // 15 str . reserve ( 16 ); cout << str . capacity () << endl ; // 31 str . reserve ( 20 ); cout << str . capacity () << endl ; // 31 str . reserve ( 32 ); cout << str . capacity () << endl ; // 47 return 0 ; } \u5c0f\u4e8e\u7b49\u4e8e 15, \u5219\u4e0d\u53d8\uff0c\u591a\u4f5915\uff0c\u5219\u6309\u6ea2\u51fa\u5904\u7406 \u603b\u7ed3: \u8c03\u7528\u4e4b\u540e\uff0c15-31-47-63 ...","title":"\u4fee\u6539\u5bb9\u91cf reserve()"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#length-size","text":"","title":"\u957f\u5ea6 length(), \u5b57\u7b26\u4e2a\u6570 size()"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#resize","text":"\u91cd\u65b0\u8bbe\u7f6e\u5b57\u7b26\u4e2a\u6570 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); cout << \"str: \" << str << ' ' << \"length: \" << str . length () << ' ' << \"size: \" << str . size () << ' ' << \"capacity: \" << str . capacity () << endl ; str . resize ( 3 ); cout << \"str: \" << str << ' ' << \"length: \" << str . length () << ' ' << \"size: \" << str . size () << ' ' << \"capacity: \" << str . capacity () << endl ; return 0 ; } \u8f93\u51fa str: abcdefg length: 7 size: 7 capacity: 15 str: abc length: 3 size: 3 capacity: 15","title":"resize()"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_2","text":"\u8f93\u51fa\u6574\u4e2a\u5b57\u7b26\u4e32 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); cout << str << endl ; cout << str . c_str () << endl ; return 0 ; } \u8f93\u51fa\u5355\u4e2a\u5b57\u7b26 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); cout << str [ 0 ] << endl ; cout << str [ 1 ] << endl ; cout << str . at ( 2 ) << endl ; return 0 ; }","title":"string \u67e5\u8be2"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_3","text":"\u4fee\u6539\u6307\u5b9a\u5143\u7d20 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); str [ 0 ] = 's' ; cout << str << endl ; str . at ( 1 ) = 'm' ; cout << str << endl ; return 0 ; } insert() basic_string & insert ( size_type index , const basic_string & str ); // index \u4f4d\u7f6e\u63d2\u5165str basic_string & insert ( size_type index , const char * str ); // index \u4f4d\u7f6e\u63d2\u5165\u5b57\u7b26\u4e32 basic_string & insert ( size_type index1 , const basic_string & str , size_type index2 , size_type num ); basic_string & insert ( size_type index , const char * str , size_type num ); // \u63d2\u5165\u524d\u51e0\u4e2a basic_string & insert ( size_type index , size_type num , charch ); // \u63d2\u5165n\u4e2ach append() basic_string & append ( const basic_string & str ); // \u5c3e\u5df4\u901a\u8fc7\u4e00\u4e2a\u5bf9\u8c61\u62fc\u63a5 basic_string & append ( const char * str ); // \u5c3e\u5df4\u901a\u8fc7\u4e00\u4e2a\u5b57\u7b26\u4e32\u62fc\u63a5 basic_string & append ( const basic_string & str , size_type index , size_type len ); // \u5c3e\u5df4\u901a\u8fc7\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u67d0\u4e00\u6bb5\u62fc\u63a5 basic_string & append ( const char * str , size_type num ); // \u62fc\u63a5\u5b57\u7b26\u4e32\u524d\u51e0\u4e2a basic_string & append ( size_type num , char ch ); // \u62fc\u63a5num\u4e2a\u5b57\u7b26","title":"string \u4fee\u6539"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_4","text":"= \u8d4b\u503c\uff0c string\u5bf9\u8c61\u6216\u5b57\u7b26\u4e32 >> \u8f93\u5165 assign() basic_string & assign ( const basic_string & str ); // \u4ee5str\u8d4b\u503c basic_string & assign ( const char * str ); // \u4ee5\u5b57\u7b26\u4e32\u8d4b\u503c basic_string & assign ( const basic_string & str , size_type index , size_type len ); // \u4ee5str\u8d4b\u503c basic_string & assign ( const char * str , size_type num ); // \u5b57\u7b26\u4e32\u524d\u51e0\u4e2a\u8d4b\u503c basic_string & assign ( size_type num , char ch ); // num\u4e2ach\u8d4b\u503c","title":"string \u91cd\u65b0\u8d4b\u503c"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_5","text":"basic_string & erase ( size_type index = 0 , size_type num = npos ); // \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u6307\u5b9a\u4e2a\u6570","title":"string \u5220\u9664"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_6","text":"a < b return 1 , a == b return 0 , a > b return -1 int compare ( const basic_string & str ); // \u6bd4\u8f83\u4e24\u4e2a\u5bf9\u8c61 int compare ( const char * str ); // \u6bd4\u8f83\u4e00\u4e2a\u5bf9\u8c61\u548c\u5b57\u7b26\u4e32 int compare ( size_type index , size_type length , const basic_string & str ); // \u672c\u5bf9\u8c61\u7684\u4e00\u6bb5\uff0c\u8ddf\u53c2\u65703\u7684\u5bf9\u8c61\u8fdb\u884c\u6bd4\u8f83 int compare ( size_type index , size_type length , const basic_string & str , size_type index2 , size_type length2 );","title":"string \u6bd4\u8f83"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_7","text":"size_type copy ( char * str , size_type num , size_type index ) // \u5c06\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e00\u6bb5\u590d\u5236\u8fdb\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u4e2d","title":"string \u590d\u5236"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_8","text":"size_type find ( const basic_string & str , size_type index ); // \u4ece\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u67e5\u627estr size_type find ( const char * str , size_type index ); // \u6307\u5b9a\u4f4d\u7f6e\u67e5\u627e\u5b57\u7b26\u4e32 size_type find ( const char * str , size_type index , size_type length ); // \u6307\u5b9a\u6bb5\u67e5\u627estr size_type find ( char ch , size_type index ); // \u6307\u5b9a\u4f4d\u7f6e\u67e5\u627e\u5b57\u7b26","title":"string \u67e5\u627e\u5b50\u4e32"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_9","text":"substr ( size_type index , size_type num = npos ); // \u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b50\u4e32","title":"string \u8fd4\u56de\u5b50\u4e32"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_10","text":"swap ( basic_string & str ); // \u4ea4\u6362\u4e24\u4e2a\u5bf9\u8c61\u7684\u5185\u5bb9","title":"string \u4ea4\u6362"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#string_11","text":"#include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); string :: iterator iter = str . begin (); // \u8fed\u4ee3\u5668\u8fed\u4ee3 for ( iter ; iter < str . end (); iter ++ ) { cout << * iter << ' ' ; } cout << endl ; // char * \u8fed\u4ee3 for ( size_t i = 0 ; i < str . length (); i ++ ) { cout << str [ i ] << ' ' ; } return 0 ; } \u8bf4\u660e\uff1a str.begin() \u8fd4\u56de\u5b57\u7b26\u4e32\u9996\u5730\u5740\u7684\u8fed\u4ee3\u5668 str.end() \u8fd4\u56de\u5b57\u7b26\u4e32\u5c3e\u5730\u5740\u7684\u8fed\u4ee3\u5668 Question \u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528\u8fed\u4ee3\u5668\uff0c\u800c\u4e0d\u76f4\u63a5\u7528char* \u6307\u9488\uff1f Answer \u8fed\u4ee3\u5668\u662f\u8981\u548c\u7b97\u6cd5\u8fdb\u884c\u94fe\u63a5\u7684\uff0c\u5b83\u9002\u7528\u4e8e\u6240\u6709\u7684\u8fed\u4ee3\u5668\uff0c\u5373\u4e00\u4e2a\u901a\u7528\u7c7b\u578b\u7684\u6307\u9488\uff0c\u6216\u8005\u662f\u667a\u80fd\u6307\u9488\u3002 \u8fed\u4ee3\u5668\u5931\u6548 #include <iostream> #include <string> using namespace std ; int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); string :: iterator iter = str . begin (); cout << iter [ 2 ] << endl ; str . append ( 18 , 'a' ); //cout << iter[2] << endl; // \u62a5\u9519\uff0c\u8fed\u4ee3\u5668\u5931\u6548 iter = str . begin (); cout << iter [ 2 ] << endl ; return 0 ; } string \u91cd\u65b0\u7533\u8bf7\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u8fed\u4ee3\u5668\u5c31\u4f1a\u5931\u6548\uff0c\u9700\u8981\u91cd\u65b0\u6307\u5b9a\u4e00\u4e0b","title":"string \u7684\u8fed\u4ee3\u5668"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#for_each","text":"#include <iostream> #include <string> #include <algorithm> using namespace std ; void func ( char c ) { cout << c << ' ' ; } int main ( int argc , const char * argv []) { string str ( \"abcdefg\" ); for_each ( str . begin (), str . end (), func ); return 0 ; } for_each \u51fd\u6570\u5c5e\u4e8eSTL\u7b97\u6cd5\u91cc\u7684\u51fd\u6570","title":"for_each()"},{"location":"cpp/String%E5%AE%B9%E5%99%A8/#sort","text":"#include <iostream> #include <string> #include <algorithm> using namespace std ; void func ( char c ) { cout << c << ' ' ; } int main ( int argc , const char * argv []) { string str ( \"adaszxwesdfas\" ); sort ( str . begin (), str . end ()); for_each ( str . begin (), str . end (), func ); cout << endl ; sort ( str . begin (), str . end (), greater < char > ()); for_each ( str . begin (), str . end (), func ); return 0 ; } \u5176\u4e2d greater \u4e3a\u4eff\u51fd\u6570","title":"sort()"},{"location":"cpp/assert/","text":"1.\u7b2c\u4e00\u4e2a\u65ad\u8a00\u6848\u4f8b \u00b6 \u65ad\u8a00\uff0c \u662f\u5b8f\uff0c\u800c\u975e\u51fd\u6570 \u3002assert \u5b8f\u7684\u539f\u578b\u5b9a\u4e49\u5728 \uff08C\uff09\u3001\uff08C++\uff09\u4e2d\uff0c\u5176\u4f5c\u7528\u662f\u5982\u679c\u5b83\u7684\u6761\u4ef6\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u7ec8\u6b62\u7a0b\u5e8f\u6267\u884c\u3002\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49 NDEBUG \u6765\u5173\u95ed assert\uff0c\u4f46\u662f\u9700\u8981\u5728\u6e90\u4ee3\u7801\u7684\u5f00\u5934\uff0cinclude \u4e4b\u524d\u3002 void assert ( int expression ); #include <stdio.h> #include <assert.h> int main () { int x = 7 ; /* Some big code in between and let's say x is accidentally changed to 9 */ x = 9 ; // Programmer assumes x to be 7 in rest of the code assert ( x == 7 ); /* Rest of the code */ return 0 ; } \u8f93\u51fa\uff1a assert : assert . c : 13 : main : Assertion ` x == 7 ' failed . \u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u4f1a\u628a\u6e90\u7801\u6587\u4ef6\uff0c\u884c\u53f7\u9519\u8bef\u4f4d\u7f6e\uff0c\u63d0\u793a\u51fa\u6765\uff01 2.\u65ad\u8a00\u4e0e\u6b63\u5e38\u9519\u8bef\u5904\u7406 \u00b6 \u65ad\u8a00\u4e3b\u8981\u7528\u4e8e\u68c0\u67e5\u903b\u8f91\u4e0a\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u53ef\u7528\u4e8e\u68c0\u67e5\u4ee3\u7801\u5728\u5f00\u59cb\u8fd0\u884c\u4e4b\u524d\u6240\u671f\u671b\u7684\u72b6\u6001\uff0c\u6216\u8005\u5728\u8fd0\u884c\u5b8c\u6210\u540e\u68c0\u67e5\u72b6\u6001\u3002\u4e0e\u6b63\u5e38\u7684\u9519\u8bef\u5904\u7406\u4e0d\u540c\uff0c\u65ad\u8a00\u901a\u5e38\u5728\u8fd0\u884c\u65f6\u88ab\u7981\u7528\u3002 \u5ffd\u7565\u65ad\u8a00\uff1a \u5728\u4ee3\u7801\u5f00\u5934\u52a0\u4e0a\uff1a #define NDEBUG // \u52a0\u4e0a\u8fd9\u884c\uff0c\u5219 assert \u4e0d\u53ef\u7528 \u4ee3\u7801\u793a\u4f8b: # define NDEBUG // \u5ffd\u7565\u65ad\u8a00 #include <assert.h> int main (){ int x = 7 ; assert ( x == 5 ); return 0 ; }","title":"assert"},{"location":"cpp/assert/#1","text":"\u65ad\u8a00\uff0c \u662f\u5b8f\uff0c\u800c\u975e\u51fd\u6570 \u3002assert \u5b8f\u7684\u539f\u578b\u5b9a\u4e49\u5728 \uff08C\uff09\u3001\uff08C++\uff09\u4e2d\uff0c\u5176\u4f5c\u7528\u662f\u5982\u679c\u5b83\u7684\u6761\u4ef6\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u7ec8\u6b62\u7a0b\u5e8f\u6267\u884c\u3002\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49 NDEBUG \u6765\u5173\u95ed assert\uff0c\u4f46\u662f\u9700\u8981\u5728\u6e90\u4ee3\u7801\u7684\u5f00\u5934\uff0cinclude \u4e4b\u524d\u3002 void assert ( int expression ); #include <stdio.h> #include <assert.h> int main () { int x = 7 ; /* Some big code in between and let's say x is accidentally changed to 9 */ x = 9 ; // Programmer assumes x to be 7 in rest of the code assert ( x == 7 ); /* Rest of the code */ return 0 ; } \u8f93\u51fa\uff1a assert : assert . c : 13 : main : Assertion ` x == 7 ' failed . \u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u4f1a\u628a\u6e90\u7801\u6587\u4ef6\uff0c\u884c\u53f7\u9519\u8bef\u4f4d\u7f6e\uff0c\u63d0\u793a\u51fa\u6765\uff01","title":"1.\u7b2c\u4e00\u4e2a\u65ad\u8a00\u6848\u4f8b"},{"location":"cpp/assert/#2","text":"\u65ad\u8a00\u4e3b\u8981\u7528\u4e8e\u68c0\u67e5\u903b\u8f91\u4e0a\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u53ef\u7528\u4e8e\u68c0\u67e5\u4ee3\u7801\u5728\u5f00\u59cb\u8fd0\u884c\u4e4b\u524d\u6240\u671f\u671b\u7684\u72b6\u6001\uff0c\u6216\u8005\u5728\u8fd0\u884c\u5b8c\u6210\u540e\u68c0\u67e5\u72b6\u6001\u3002\u4e0e\u6b63\u5e38\u7684\u9519\u8bef\u5904\u7406\u4e0d\u540c\uff0c\u65ad\u8a00\u901a\u5e38\u5728\u8fd0\u884c\u65f6\u88ab\u7981\u7528\u3002 \u5ffd\u7565\u65ad\u8a00\uff1a \u5728\u4ee3\u7801\u5f00\u5934\u52a0\u4e0a\uff1a #define NDEBUG // \u52a0\u4e0a\u8fd9\u884c\uff0c\u5219 assert \u4e0d\u53ef\u7528 \u4ee3\u7801\u793a\u4f8b: # define NDEBUG // \u5ffd\u7565\u65ad\u8a00 #include <assert.h> int main (){ int x = 7 ; assert ( x == 5 ); return 0 ; }","title":"2.\u65ad\u8a00\u4e0e\u6b63\u5e38\u9519\u8bef\u5904\u7406"},{"location":"cpp/c%2B%2B_%E7%AE%80%E4%BB%8B/","text":"C++ \u662f\u4e00\u79cd\u9759\u6001\u7c7b\u578b\u7684\u3001\u7f16\u8bd1\u5f0f\u7684\u3001\u901a\u7528\u7684\u3001\u5927\u5c0f\u5199\u654f\u611f\u7684\u3001\u4e0d\u89c4\u5219\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u652f\u6301\u8fc7\u7a0b\u5316\u7f16\u7a0b\u3001\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u548c\u6cdb\u578b\u7f16\u7a0b\u3002 C++ \u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u4e2d\u7ea7\u8bed\u8a00\uff0c\u5b83\u7efc\u5408\u4e86\u9ad8\u7ea7\u8bed\u8a00\u548c\u4f4e\u7ea7\u8bed\u8a00\u7684\u7279\u70b9\u3002 C++ \u662f\u7531 Bjarne Stroustrup \u4e8e 1979 \u5e74\u5728\u65b0\u6cfd\u897f\u5dde\u7f8e\u5229\u5c71\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u5f00\u59cb\u8bbe\u8ba1\u5f00\u53d1\u7684\u3002C++ \u8fdb\u4e00\u6b65\u6269\u5145\u548c\u5b8c\u5584\u4e86 C \u8bed\u8a00\uff0c\u6700\u521d\u547d\u540d\u4e3a\u5e26\u7c7b\u7684C\uff0c\u540e\u6765\u5728 1983 \u5e74\u66f4\u540d\u4e3a C++\u3002 C++ \u662f C \u7684\u4e00\u4e2a\u8d85\u96c6\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u4efb\u4f55\u5408\u6cd5\u7684 C \u7a0b\u5e8f\u90fd\u662f\u5408\u6cd5\u7684 C++ \u7a0b\u5e8f\u3002 \u6ce8\u610f\uff1a\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u7684\u7f16\u7a0b\u8bed\u8a00\u662f\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u800c\u4e0d\u662f\u5728\u8fd0\u884c\u65f6\u6267\u884c\u7c7b\u578b\u68c0\u67e5\u3002 c++ \u7684\u7ec4\u6210 \u00b6 \u6838\u5fc3\u8bed\u8a00\uff0c\u63d0\u4f9b\u4e86\u6240\u6709\u6784\u4ef6\u5757\uff0c\u5305\u62ec\u53d8\u91cf\u3001\u6570\u636e\u7c7b\u578b\u548c\u5e38\u91cf\uff0c\u7b49\u7b49\u3002 C++ \u6807\u51c6\u5e93\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u64cd\u4f5c\u6587\u4ef6\u3001\u5b57\u7b26\u4e32\u7b49\u3002 \u6807\u51c6\u6a21\u677f\u5e93\uff08STL\uff09\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u64cd\u4f5c\u6570\u636e\u7ed3\u6784\u7b49\u3002 ANSI \u6807\u51c6 \u00b6 ANSI \u6807\u51c6\u662f\u4e3a\u4e86\u786e\u4fdd C++ \u7684\u4fbf\u643a\u6027 \u2014\u2014 \u60a8\u6240\u7f16\u5199\u7684\u4ee3\u7801\u5728 Mac\u3001UNIX\u3001Windows\u3001Alpha \u8ba1\u7b97\u673a\u4e0a\u90fd\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002 \u7531\u4e8e ANSI \u6807\u51c6\u5df2\u7a33\u5b9a\u4f7f\u7528\u4e86\u5f88\u957f\u7684\u65f6\u95f4\uff0c\u6240\u6709\u4e3b\u8981\u7684 C++ \u7f16\u8bd1\u5668\u7684\u5236\u9020\u5546\u90fd\u652f\u6301 ANSI \u6807\u51c6\u3002 \u5b66\u4e60 C++ \u00b6 \u5b66\u4e60 C++\uff0c\u5173\u952e\u662f\u8981\u7406\u89e3\u6982\u5ff5\uff0c\u800c\u4e0d\u5e94\u8fc7\u4e8e\u6df1\u7a76\u8bed\u8a00\u7684\u6280\u672f\u7ec6\u8282\u3002 C++ \u7684\u4f7f\u7528 \u00b6 \u57fa\u672c\u4e0a\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9886\u57df\u7684\u7a0b\u5e8f\u5458\u90fd\u6709\u4f7f\u7528 C++\u3002 C++ \u901a\u5e38\u7528\u4e8e\u7f16\u5199\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u548c\u5176\u4ed6\u8981\u6c42\u5b9e\u65f6\u6027\u7684\u76f4\u63a5\u64cd\u4f5c\u786c\u4ef6\u7684\u8f6f\u4ef6\u3002 C++ \u5e7f\u6cdb\u7528\u4e8e\u6559\u5b66\u548c\u7814\u7a76\u3002 \u4efb\u4f55\u4e00\u4e2a\u4f7f\u7528\u82f9\u679c\u7535\u8111\u6216 Windows PC \u673a\u7684\u7528\u6237\u90fd\u5728\u95f4\u63a5\u5730\u4f7f\u7528 C++\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7cfb\u7edf\u7684\u4e3b\u8981\u7528\u6237\u63a5\u53e3\u662f\u4f7f\u7528 C++ \u7f16\u5199\u7684\u3002","title":"C++ \u7b80\u4ecb"},{"location":"cpp/c%2B%2B_%E7%AE%80%E4%BB%8B/#c","text":"\u6838\u5fc3\u8bed\u8a00\uff0c\u63d0\u4f9b\u4e86\u6240\u6709\u6784\u4ef6\u5757\uff0c\u5305\u62ec\u53d8\u91cf\u3001\u6570\u636e\u7c7b\u578b\u548c\u5e38\u91cf\uff0c\u7b49\u7b49\u3002 C++ \u6807\u51c6\u5e93\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u64cd\u4f5c\u6587\u4ef6\u3001\u5b57\u7b26\u4e32\u7b49\u3002 \u6807\u51c6\u6a21\u677f\u5e93\uff08STL\uff09\uff0c\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u64cd\u4f5c\u6570\u636e\u7ed3\u6784\u7b49\u3002","title":"c++ \u7684\u7ec4\u6210"},{"location":"cpp/c%2B%2B_%E7%AE%80%E4%BB%8B/#ansi","text":"ANSI \u6807\u51c6\u662f\u4e3a\u4e86\u786e\u4fdd C++ \u7684\u4fbf\u643a\u6027 \u2014\u2014 \u60a8\u6240\u7f16\u5199\u7684\u4ee3\u7801\u5728 Mac\u3001UNIX\u3001Windows\u3001Alpha \u8ba1\u7b97\u673a\u4e0a\u90fd\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002 \u7531\u4e8e ANSI \u6807\u51c6\u5df2\u7a33\u5b9a\u4f7f\u7528\u4e86\u5f88\u957f\u7684\u65f6\u95f4\uff0c\u6240\u6709\u4e3b\u8981\u7684 C++ \u7f16\u8bd1\u5668\u7684\u5236\u9020\u5546\u90fd\u652f\u6301 ANSI \u6807\u51c6\u3002","title":"ANSI \u6807\u51c6"},{"location":"cpp/c%2B%2B_%E7%AE%80%E4%BB%8B/#c_1","text":"\u5b66\u4e60 C++\uff0c\u5173\u952e\u662f\u8981\u7406\u89e3\u6982\u5ff5\uff0c\u800c\u4e0d\u5e94\u8fc7\u4e8e\u6df1\u7a76\u8bed\u8a00\u7684\u6280\u672f\u7ec6\u8282\u3002","title":"\u5b66\u4e60 C++"},{"location":"cpp/c%2B%2B_%E7%AE%80%E4%BB%8B/#c_2","text":"\u57fa\u672c\u4e0a\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9886\u57df\u7684\u7a0b\u5e8f\u5458\u90fd\u6709\u4f7f\u7528 C++\u3002 C++ \u901a\u5e38\u7528\u4e8e\u7f16\u5199\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u548c\u5176\u4ed6\u8981\u6c42\u5b9e\u65f6\u6027\u7684\u76f4\u63a5\u64cd\u4f5c\u786c\u4ef6\u7684\u8f6f\u4ef6\u3002 C++ \u5e7f\u6cdb\u7528\u4e8e\u6559\u5b66\u548c\u7814\u7a76\u3002 \u4efb\u4f55\u4e00\u4e2a\u4f7f\u7528\u82f9\u679c\u7535\u8111\u6216 Windows PC \u673a\u7684\u7528\u6237\u90fd\u5728\u95f4\u63a5\u5730\u4f7f\u7528 C++\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u7cfb\u7edf\u7684\u4e3b\u8981\u7528\u6237\u63a5\u53e3\u662f\u4f7f\u7528 C++ \u7f16\u5199\u7684\u3002","title":"C++ \u7684\u4f7f\u7528"},{"location":"cpp/const/","text":"1.const\u542b\u4e49 \u00b6 \u5e38\u7c7b\u578b\u662f\u6307\u4f7f\u7528\u7c7b\u578b\u4fee\u9970\u7b26const\u8bf4\u660e\u7684\u7c7b\u578b\uff0c\u5e38\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u5bf9\u8c61\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u66f4\u65b0\u7684\u3002 2.const\u4f5c\u7528 \u00b6 \uff081\uff09\u53ef\u4ee5\u5b9a\u4e49\u5e38\u91cf const int a = 100 ; \uff082\uff09\u7c7b\u578b\u68c0\u67e5 const\u5e38\u91cf\u4e0e#define\u5b8f\u5b9a\u4e49\u5e38\u91cf\u7684\u533a\u522b\uff1a const\u5e38\u91cf\u5177\u6709\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u8fdb\u884c\u5b89\u5168\u68c0\u67e5\uff1b #define \u5b8f\u5b9a\u4e49\u6ca1\u6709\u6570\u636e\u7c7b\u578b\uff0c\u53ea\u662f\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u66ff\u6362\uff0c\u4e0d\u80fd\u8fdb\u884c\u5b89\u5168\u68c0\u67e5\u3002 const \u5b9a\u4e49\u7684\u53d8\u91cf\u53ea\u6709\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u679a\u4e3e\uff0c\u4e14\u4ee5\u5e38\u91cf\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u65f6\u624d\u80fd\u4f5c\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002\u5176\u4ed6\u60c5\u51b5\u4e0b\u5b83\u53ea\u662f\u4e00\u4e2a const \u9650\u5b9a\u7684\u53d8\u91cf\uff0c\u4e0d\u8981\u5c06\u4e0e\u5e38\u91cf\u6df7\u6dc6\u3002 \uff083\uff09\u9632\u6b62\u4fee\u6539\uff0c\u8d77\u4fdd\u62a4\u4f5c\u7528\uff0c\u589e\u52a0\u7a0b\u5e8f\u9c81\u68d2\u6027 void f ( const int i ){ i ++ ; //error! } \uff084\uff09\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5206\u914d const\u5b9a\u4e49\u5e38\u91cf\u4ece\u6c47\u7f16\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u53ea\u662f\u7ed9\u51fa\u4e86\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u4e0d\u662f\u50cf #define \u4e00\u6837\u7ed9\u51fa\u7684\u662f \u7acb\u5373\u6570 \uff0c\u6240\u4ee5\uff0cconst\u5b9a\u4e49\u7684\u5e38\u91cf\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ea\u6709\u4e00\u4efd\u62f7\u8d1d\uff0c\u800c #define \u5b9a\u4e49\u7684\u5e38\u91cf\u5728\u5185\u5b58\u4e2d\u6709\u82e5\u5e72\u4e2a\u62f7\u8d1d\u3002 3.const\u5bf9\u8c61\u9ed8\u8ba4\u4e3a\u6587\u4ef6\u5c40\u90e8\u53d8\u91cf \u00b6 \u6ce8\u610f\uff1a\u975econst\u53d8\u91cf\u9ed8\u8ba4\u4e3aextern\u3002\u8981\u4f7fconst\u53d8\u91cf\u80fd\u591f\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u8bbf\u95ee\uff0c\u5fc5\u987b\u5728\u6587\u4ef6\u4e2d\u663e\u5f0f\u5730\u6307\u5b9a\u5b83\u4e3aextern\u3002 \u672a\u88abconst\u4fee\u9970\u7684\u53d8\u91cf\u5728\u4e0d\u540c\u6587\u4ef6\u7684\u8bbf\u95ee \u00b6 // file1.cpp int ext // file2.cpp #include <iostream> extern int ext ; int main (){ std :: cout << ( ext + 10 ) << std :: endl ; } const\u5e38\u91cf\u5728\u4e0d\u540c\u6587\u4ef6\u7684\u8bbf\u95ee \u00b6 //extern_file1.cpp extern const int ext = 12 ; //extern_file2.cpp #include <iostream> extern const int ext ; int main (){ std :: cout << ext << std :: endl ; } \u5c0f\u7ed3\uff1a\u53ef\u4ee5\u53d1\u73b0\u672a\u88abconst\u4fee\u9970\u7684\u53d8\u91cf\u4e0d\u9700\u8981extern\u663e\u5f0f\u58f0\u660e\uff01\u800cconst\u5e38\u91cf\u9700\u8981\u663e\u5f0f\u58f0\u660eextern\uff0c\u5e76\u4e14\u9700\u8981\u505a\u521d\u59cb\u5316\uff01\u56e0\u4e3a\u5e38\u91cf\u5728\u5b9a\u4e49\u540e\u5c31\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5b9a\u4e49\u65f6\u5fc5\u987b\u521d\u59cb\u5316\u3002 4.\u5b9a\u4e49\u5e38\u91cf \u00b6 const int b = 10 ; b = 0 ; // error: assignment of read-only variable \u2018b\u2019 const string s = \"helloworld\" ; const int i , j = 0 ; // error: uninitialized const \u2018i\u2019 \u4e0a\u8ff0\u6709\u4e24\u4e2a\u9519\u8bef\uff0c\u7b2c\u4e00\uff1ab\u4e3a\u5e38\u91cf\uff0c\u4e0d\u53ef\u66f4\u6539\uff01\u7b2c\u4e8c\uff1ai\u4e3a\u5e38\u91cf\uff0c\u5fc5\u987b\u8fdb\u884c\u521d\u59cb\u5316\uff01(\u56e0\u4e3a\u5e38\u91cf\u5728\u5b9a\u4e49\u540e\u5c31\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5b9a\u4e49\u65f6\u5fc5\u987b\u521d\u59cb\u5316\u3002) 5.\u6307\u9488\u4e0econst \u00b6 \u4e0e\u6307\u9488\u76f8\u5173\u7684const\u6709\u56db\u79cd\uff1a const char * a ; //\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488\u6216\u8005\u8bf4\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\u3002 char const * a ; //\u540c\u4e0a char * const a ; //\u6307\u5411\u7c7b\u578b\u5bf9\u8c61\u7684const\u6307\u9488\u3002\u6216\u8005\u8bf4\u5e38\u6307\u9488\u3001const\u6307\u9488\u3002 const char * const a ; //\u6307\u5411const\u5bf9\u8c61\u7684const\u6307\u9488\u3002 \u5c0f\u7ed3\uff1a\u5982\u679cconst\u4f4d\u4e8e*\u7684\u5de6\u4fa7\uff0c\u5219const\u5c31\u662f\u7528\u6765\u4fee\u9970\u6307\u9488\u6240\u6307\u5411\u7684\u53d8\u91cf\uff0c\u5373\u6307\u9488\u6307\u5411\u4e3a\u5e38\u91cf\uff1b\u5982\u679cconst\u4f4d\u4e8e*\u7684\u53f3\u4fa7\uff0cconst\u5c31\u662f\u4fee\u9970\u6307\u9488\u672c\u8eab\uff0c\u5373\u6307\u9488\u672c\u8eab\u662f\u5e38\u91cf\u3002 \u5177\u4f53\u4f7f\u7528\u5982\u4e0b\uff1a \uff081\uff09\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488 const int * ptr ; * ptr = 10 ; //error ptr\u662f\u4e00\u4e2a\u6307\u5411int\u7c7b\u578bconst\u5bf9\u8c61\u7684\u6307\u9488\uff0cconst\u5b9a\u4e49\u7684\u662fint\u7c7b\u578b\uff0c\u4e5f\u5c31\u662fptr\u6240\u6307\u5411\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u800c\u4e0d\u662fptr\u672c\u8eab\uff0c\u6240\u4ee5ptr\u53ef\u4ee5\u4e0d\u7528\u8d4b\u521d\u59cb\u503c\u3002\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7ptr\u53bb\u4fee\u6539\u6240\u6307\u5bf9\u8c61\u7684\u503c\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u7528void*\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5fc5\u987b\u4f7f\u7528const void*\u7c7b\u578b\u7684\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\u3002 const int p = 10 ; const void * vp = & p ; void * vp = & p ; //error \u53e6\u5916\u4e00\u4e2a\u91cd\u70b9\u662f\uff1a \u5141\u8bb8\u628a\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u7ed9\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488 \u3002 \u5c06\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u7ed9const\u5bf9\u8c61\u7684\u6307\u9488: const int * ptr ; int val = 3 ; ptr = & val ; //ok \u6211\u4eec\u4e0d\u80fd\u901a\u8fc7ptr\u6307\u9488\u6765\u4fee\u6539val\u7684\u503c\uff0c\u5373\u4f7f\u5b83\u6307\u5411\u7684\u662f\u975econst\u5bf9\u8c61! \u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488\u4fee\u6539\u57fa\u7840\u5bf9\u8c61\uff0c\u7136\u800c\u5982\u679c\u8be5\u6307\u9488\u6307\u5411\u4e86\u975econst\u5bf9\u8c61\uff0c\u53ef\u7528\u5176\u4ed6\u65b9\u5f0f\u4fee\u6539\u5176\u6240\u6307\u7684\u5bf9\u8c61\u3002\u53ef\u4ee5\u4fee\u6539const\u6307\u9488\u6240\u6307\u5411\u7684\u503c\u7684\uff0c\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7const\u5bf9\u8c61\u6307\u9488\u6765\u8fdb\u884c\u800c\u5df2\uff01\u5982\u4e0b\u4fee\u6539\uff1a int * ptr1 = & val ; * ptr1 = 4 ; cout <<* ptr << endl ; \u5c0f\u7ed3\uff1a\u5bf9\u4e8e\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\uff0c\u4e0d\u80fd\u901a\u8fc7\u6307\u9488\u6765\u4fee\u6539\u5bf9\u8c61\u7684\u503c\u3002 \u4e5f\u4e0d\u80fd\u4f7f\u7528void * \u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5fc5\u987b\u4f7f\u7528const void * \u7c7b\u578b\u7684\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\u3002 \u5141\u8bb8\u628a\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u503c\u7ed9const\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u5982\u679c\u8981\u4fee\u6539\u6307\u9488\u6240\u6307\u5411\u7684\u5bf9\u8c61\u503c\uff0c\u5fc5\u987b\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u4fee\u6539\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7\u5f53\u524d\u6307\u9488\u76f4\u63a5\u4fee\u6539\u3002 \uff082\uff09\u5e38\u6307\u9488 const\u6307\u9488\u5fc5\u987b\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4e14const\u6307\u9488\u7684\u503c\u4e0d\u80fd\u4fee\u6539\u3002 #include <iostream> using namespace std ; int main (){ int num = 0 ; int * const ptr =& num ; //const\u6307\u9488\u5fc5\u987b\u521d\u59cb\u5316\uff01\u4e14const\u6307\u9488\u7684\u503c\u4e0d\u80fd\u4fee\u6539 int * t = & num ; * t = 1 ; cout <<* ptr << endl ; } \u4e0a\u8ff0\u4fee\u6539ptr\u6307\u9488\u6240\u6307\u5411\u7684\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u975econst\u6307\u9488\u6765\u4fee\u6539\u3002 \u6700\u540e\uff0c\u5f53\u628a\u4e00\u4e2aconst\u5e38\u91cf\u7684\u5730\u5740\u8d4b\u503c\u7ed9ptr\u65f6\u5019\uff0c\u7531\u4e8eptr\u6307\u5411\u7684\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u662fconst\u5e38\u91cf\uff0c\u6240\u4ee5\u4f1a\u62a5\u9519\uff0c\u51fa\u73b0\uff1aconst int* -> int *\u9519\u8bef\uff01 #include <iostream> using namespace std ; int main (){ const int num = 0 ; int * const ptr =& num ; //error! const int* -> int* cout <<* ptr << endl ; } \u4e0a\u8ff0\u82e5\u6539\u4e3a const int *ptr\u6216\u8005\u6539\u4e3aconst int *const ptr\uff0c\u90fd\u53ef\u4ee5\u6b63\u5e38\uff01 \uff083\uff09\u6307\u5411\u5e38\u91cf\u7684\u5e38\u6307\u9488 \u7406\u89e3\u5b8c\u524d\u4e24\u79cd\u60c5\u51b5\uff0c\u4e0b\u9762\u8fd9\u4e2a\u60c5\u51b5\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\uff1a const int p = 3 ; const int * const ptr = & p ; ptr\u662f\u4e00\u4e2aconst\u6307\u9488\uff0c\u7136\u540e\u6307\u5411\u4e86\u4e00\u4e2aint \u7c7b\u578b\u7684const\u5bf9\u8c61\u3002 6.\u51fd\u6570\u4e2d\u4f7f\u7528const \u00b6 const\u4fee\u9970\u51fd\u6570\u8fd4\u56de\u503c \u00b6 \u8fd9\u4e2a\u8ddfconst\u4fee\u9970\u666e\u901a\u53d8\u91cf\u4ee5\u53ca\u6307\u9488\u7684\u542b\u4e49\u57fa\u672c\u76f8\u540c\uff1a \uff081\uff09const int const int func1 (); \u8fd9\u4e2a\u672c\u8eab\u65e0\u610f\u4e49\uff0c\u56e0\u4e3a\u53c2\u6570\u8fd4\u56de\u672c\u8eab\u5c31\u662f\u8d4b\u503c\u7ed9\u5176\u4ed6\u7684\u53d8\u91cf\uff01 \uff082\uff09const int* const int * func2 (); \u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u4e0d\u53d8\u3002 \uff083\uff09int *const int * const func2 (); \u6307\u9488\u672c\u8eab\u4e0d\u53ef\u53d8\u3002 const\u4fee\u9970\u51fd\u6570\u53c2\u6570 \u00b6 \uff081\uff09\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\u53ca\u6307\u9488\u672c\u8eab\u5728\u51fd\u6570\u5185\u4e0d\u53ef\u53d8\uff0c\u65e0\u610f\u4e49\uff01 void func ( const int var ); // \u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\u4e0d\u53ef\u53d8 void func ( int * const var ); // \u6307\u9488\u672c\u8eab\u4e0d\u53ef\u53d8 \u8868\u660e\u53c2\u6570\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f46\u6b64\u5904\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0cvar\u672c\u8eab\u5c31\u662f\u5f62\u53c2\uff0c\u5728\u51fd\u6570\u5185\u4e0d\u4f1a\u6539\u53d8\u3002\u5305\u62ec\u4f20\u5165\u7684\u5f62\u53c2\u662f\u6307\u9488\u4e5f\u662f\u4e00\u6837\u3002 \u8f93\u5165\u53c2\u6570\u91c7\u7528\u201c\u503c\u4f20\u9012\u201d\uff0c\u7531\u4e8e\u51fd\u6570\u5c06\u81ea\u52a8\u4ea7\u751f\u4e34\u65f6\u53d8\u91cf\u7528\u4e8e\u590d\u5236\u8be5\u53c2\u6570\uff0c\u8be5\u8f93\u5165\u53c2\u6570\u672c\u6765\u5c31\u65e0\u9700\u4fdd\u62a4\uff0c\u6240\u4ee5\u4e0d\u8981\u52a0const \u4fee\u9970\u3002 \uff082\uff09\u53c2\u6570\u6307\u9488\u6240\u6307\u5185\u5bb9\u4e3a\u5e38\u91cf\u4e0d\u53ef\u53d8 void StringCopy ( char * dst , const char * src ); \u5176\u4e2dsrc \u662f\u8f93\u5165\u53c2\u6570\uff0cdst \u662f\u8f93\u51fa\u53c2\u6570\u3002\u7ed9src\u52a0\u4e0aconst\u4fee\u9970\u540e\uff0c\u5982\u679c\u51fd\u6570\u4f53\u5185\u7684\u8bed\u53e5\u8bd5\u56fe\u6539\u52a8src\u7684\u5185\u5bb9\uff0c\u7f16\u8bd1\u5668\u5c06\u6307\u51fa\u9519\u8bef\u3002\u8fd9\u5c31\u662f\u52a0\u4e86const\u7684\u4f5c\u7528\u4e4b\u4e00\u3002 \uff083\uff09\u53c2\u6570\u4e3a\u5f15\u7528\uff0c\u4e3a\u4e86\u589e\u52a0\u6548\u7387\u540c\u65f6\u9632\u6b62\u4fee\u6539\u3002 void func ( const A & a ) \u5bf9\u4e8e\u975e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u53c2\u6570\u800c\u8a00\uff0c\u8c61void func(A a) \u8fd9\u6837\u58f0\u660e\u7684\u51fd\u6570\u6ce8\u5b9a\u6548\u7387\u6bd4\u8f83\u4f4e\u3002\u56e0\u4e3a\u51fd\u6570\u4f53\u5185\u5c06\u4ea7\u751fA \u7c7b\u578b \u7684\u4e34\u65f6\u5bf9\u8c61\u7528\u4e8e\u590d\u5236\u53c2\u6570a\uff0c\u800c\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u3001\u590d\u5236\u3001\u6790\u6784\u8fc7\u7a0b\u90fd\u5c06\u6d88\u8017\u65f6\u95f4\u3002 \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u53ef\u4ee5\u5c06\u51fd\u6570\u58f0\u660e\u6539\u4e3avoid func(A &a)\uff0c\u56e0\u4e3a\u201c\u5f15\u7528\u4f20\u9012\u201d\u4ec5\u501f\u7528\u4e00\u4e0b\u53c2\u6570\u7684\u522b\u540d\u800c\u5df2\uff0c\u4e0d\u9700\u8981\u4ea7\u751f\u4e34 \u65f6\u5bf9\u8c61\u3002\u4f46\u662f\u51fd\u6570void func(A &a) \u5b58\u5728\u4e00\u4e2a\u7f3a\u70b9\uff1a \u201c\u5f15\u7528\u4f20\u9012\u201d\u6709\u53ef\u80fd\u6539\u53d8\u53c2\u6570a\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u671f\u671b\u7684\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u5bb9\u6613\uff0c\u52a0const\u4fee\u9970\u5373\u53ef\uff0c\u56e0\u6b64\u51fd\u6570\u6700\u7ec8\u6210\u4e3a void func(const A &a)\u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u662f\u5426\u5e94\u5c06void func(int x) \u6539\u5199\u4e3avoid func(const int &x)\uff0c\u4ee5\u4fbf\u63d0\u9ad8\u6548\u7387\uff1f\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u5185\u90e8\u6570 \u636e\u7c7b\u578b\u7684\u53c2\u6570\u4e0d\u5b58\u5728\u6784\u9020\u3001\u6790\u6784\u7684\u8fc7\u7a0b\uff0c\u800c\u590d\u5236\u4e5f\u975e\u5e38\u5feb\uff0c\u201c\u503c\u4f20\u9012\u201d\u548c\u201c\u5f15\u7528\u4f20\u9012\u201d\u7684\u6548\u7387\u51e0\u4e4e\u76f8\u5f53\u3002 \u5c0f\u7ed3\uff1a\u5bf9\u4e8e\u975e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u8f93\u5165\u53c2\u6570\uff0c\u5e94\u8be5\u5c06\u201c\u503c\u4f20\u9012\u201d\u7684\u65b9\u5f0f\u6539\u4e3a\u201cconst \u5f15\u7528\u4f20\u9012\u201d\uff0c\u76ee\u7684\u662f\u63d0\u9ad8\u6548\u7387\u3002\u4f8b\u5982\u5c06void func(A a) \u6539\u4e3avoid func(const A &a)\u3002 \u5bf9\u4e8e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u8f93\u5165\u53c2\u6570\uff0c\u4e0d\u8981\u5c06\u201c\u503c\u4f20\u9012\u201d\u7684\u65b9\u5f0f\u6539\u4e3a\u201cconst \u5f15\u7528\u4f20\u9012\u201d\u3002\u5426\u5219\u65e2\u8fbe\u4e0d\u5230\u63d0\u9ad8\u6548\u7387\u7684\u76ee\u7684\uff0c\u53c8\u964d\u4f4e\u4e86\u51fd\u6570\u7684\u53ef\u7406\u89e3\u6027\u3002\u4f8b\u5982void func(int x) \u4e0d\u5e94\u8be5\u6539\u4e3avoid func(const int &x)\u3002 \u4ee5\u4e0a\u89e3\u51b3\u4e86\u4e24\u4e2a\u9762\u8bd5\u95ee\u9898\uff1a \uff081\uff09\u5982\u679c\u51fd\u6570\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u6307\u9488\uff0c\u662f\u5426\u9700\u8981\u4e3a\u8be5\u6307\u9488\u52a0\u4e0aconst\uff0c\u628aconst\u52a0\u5728\u6307\u9488\u4e0d\u540c\u7684\u4f4d\u7f6e\u6709\u4ec0\u4e48\u533a\u522b\uff1b \uff082\uff09\u5982\u679c\u5199\u7684\u51fd\u6570\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u590d\u6742\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f20\u5165\u503c\u53c2\u6570\u6216\u8005\u5f15\u7528\u53c2\u6570\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u4e3a\u4f20\u5165\u7684\u5f15\u7528\u53c2\u6570\u52a0\u4e0aconst\u3002 7.\u7c7b\u4e2d\u4f7f\u7528const \u00b6 \u5728\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u4efb\u4f55\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u6210\u5458\u7684\u51fd\u6570\u90fd\u5e94\u8be5\u58f0\u660e\u4e3aconst\u7c7b\u578b\u3002\u5982\u679c\u5728\u7f16\u5199const\u6210\u5458\u51fd\u6570\u65f6\uff0c\u4e0d\u614e\u4fee\u6539\u6570\u636e\u6210\u5458\uff0c\u6216\u8005\u8c03\u7528\u4e86\u5176\u5b83\u975econst\u6210\u5458\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u6307\u51fa\u9519\u8bef\uff0c\u8fd9\u65e0\u7591\u4f1a\u63d0\u9ad8\u7a0b\u5e8f\u7684\u5065\u58ee\u6027\u3002\u4f7f\u7528const\u5173\u5b57\u8fdb\u884c\u8bf4\u660e\u7684\u6210\u5458\u51fd\u6570\uff0c\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002\u53ea\u6709\u5e38\u6210\u5458\u51fd\u6570\u624d\u6709\u8d44\u683c\u64cd\u4f5c\u5e38\u91cf\u6216\u5e38\u5bf9\u8c61\uff0c\u6ca1\u6709\u4f7f\u7528const\u5173\u952e\u5b57\u660e\u7684\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u7528\u6765\u64cd\u4f5c\u5e38\u5bf9\u8c61\u3002 \u5bf9\u4e8e\u7c7b\u4e2d\u7684const\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Apple { private : int people [ 100 ]; public : Apple ( int i ); const int apple_number ; }; Apple :: Apple ( int i ) : apple_number ( i ) { } const\u5bf9\u8c61\u53ea\u80fd\u8bbf\u95eeconst\u6210\u5458\u51fd\u6570,\u800c\u975econst\u5bf9\u8c61\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7684\u6210\u5458\u51fd\u6570,\u5305\u62ecconst\u6210\u5458\u51fd\u6570. \u4f8b\u5982\uff1a //apple.cpp class Apple { private : int people [ 100 ]; public : Apple ( int i ); const int apple_number ; void take ( int num ) const ; int add ( int num ); int add ( int num ) const ; int getCount () const ; }; //main.cpp #include <iostream> #include \"apple.cpp\" using namespace std ; Apple :: Apple ( int i ) : apple_number ( i ) { } int Apple :: add ( int num ){ take ( num ); } int Apple :: add ( int num ) const { take ( num ); } void Apple :: take ( int num ) const { cout << \"take func \" << num << endl ; } int Apple :: getCount () const { take ( 1 ); // add(); //error return apple_number ; } int main (){ Apple a ( 2 ); cout << a . getCount () << endl ; a . add ( 10 ); const Apple b ( 3 ); b . add ( 100 ); return 0 ; } //\u7f16\u8bd1\uff1a g++ -o main main.cpp apple.cpp //\u7ed3\u679c take func 1 2 take func 10 take func 100 \u4e0a\u9762getCount()\u65b9\u6cd5\u4e2d\u8c03\u7528\u4e86\u4e00\u4e2aadd\u65b9\u6cd5\uff0c\u800cadd\u65b9\u6cd5\u5e76\u975econst\u4fee\u9970\uff0c\u6240\u4ee5\u8fd0\u884c\u62a5\u9519\u3002\u4e5f\u5c31\u662f\u8bf4const\u5bf9\u8c61\u53ea\u80fd\u8bbf\u95eeconst\u6210\u5458\u51fd\u6570\u3002 \u800cadd\u65b9\u6cd5\u53c8\u8c03\u7528\u4e86const\u4fee\u9970\u7684take\u65b9\u6cd5\uff0c\u8bc1\u660e\u4e86\u975econst\u5bf9\u8c61\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7684\u6210\u5458\u51fd\u6570,\u5305\u62ecconst\u6210\u5458\u51fd\u6570\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u770b\u5230add\u7684\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\uff0c\u4e5f\u8f93\u51fa\u4e86\u4e24\u4e2a\u7ed3\u679c\uff0c\u8bf4\u660econst\u5bf9\u8c61\u9ed8\u8ba4\u8c03\u7528const\u6210\u5458\u51fd\u6570\u3002 \u6211\u4eec\u9664\u4e86\u4e0a\u8ff0\u7684\u521d\u59cb\u5316const\u5e38\u91cf\u7528\u521d\u59cb\u5316\u5217\u8868\u65b9\u5f0f\u5916\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\uff1a \u7b2c\u4e00\uff1a\u5c06\u5e38\u91cf\u5b9a\u4e49\u4e0estatic\u7ed3\u5408\uff0c\u4e5f\u5c31\u662f\uff1a static const int apple_number \u7b2c\u4e8c\uff1a\u5728\u5916\u9762\u521d\u59cb\u5316\uff1a const int Apple :: apple_number = 10 ; \u5f53\u7136\uff0c\u5982\u679c\u4f60\u4f7f\u7528c++11\u8fdb\u884c\u7f16\u8bd1\uff0c\u76f4\u63a5\u53ef\u4ee5\u5728\u5b9a\u4e49\u51fa\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u6210\uff1a static const int apple_number = 10 ; \u6216\u8005 const int apple_number = 10 ; \u8fd9\u4e24\u79cd\u90fd\u5728c++11\u4e2d\u652f\u6301\uff01 \u7f16\u8bd1\u7684\u65f6\u5019\u52a0\u4e0a-std=c++11\u5373\u53ef\uff01 \u8fd9\u91cc\u63d0\u5230\u4e86static\uff0c\u4e0b\u9762\u7b80\u5355\u7684\u8bf4\u4e00\u4e0b\uff1a \u5728C++\u4e2d\uff0cstatic\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u5728\u7c7b\u7684\u5185\u90e8\u521d\u59cb\u5316\u3002\u5728\u7c7b\u7684\u5185\u90e8\u53ea\u662f\u58f0\u660e\uff0c\u5b9a\u4e49\u5fc5\u987b\u5728\u7c7b\u5b9a\u4e49\u4f53\u7684\u5916\u90e8\uff0c\u901a\u5e38\u5728\u7c7b\u7684\u5b9e\u73b0\u6587\u4ef6\u4e2d\u521d\u59cb\u5316\u3002 \u5728\u7c7b\u4e2d\u58f0\u660e\uff1a static int ap ; \u5728\u7c7b\u5b9e\u73b0\u6587\u4ef6\u4e2d\u4f7f\u7528\uff1a int Apple :: ap = 666 \u5bf9\u4e8e\u6b64\u9879\uff0cc++11\u4e0d\u80fd\u8fdb\u884c\u58f0\u660e\u5e76\u521d\u59cb\u5316\uff0c\u4e5f\u5c31\u662f\u4e0a\u8ff0\u4f7f\u7528\u65b9\u6cd5\u3002 \u6587\u7ae0\u8f6c\u8f7d\u81ea: https://light-city.club/sc/basic_content/const/#6const","title":"const"},{"location":"cpp/const/#1const","text":"\u5e38\u7c7b\u578b\u662f\u6307\u4f7f\u7528\u7c7b\u578b\u4fee\u9970\u7b26const\u8bf4\u660e\u7684\u7c7b\u578b\uff0c\u5e38\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u5bf9\u8c61\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u66f4\u65b0\u7684\u3002","title":"1.const\u542b\u4e49"},{"location":"cpp/const/#2const","text":"\uff081\uff09\u53ef\u4ee5\u5b9a\u4e49\u5e38\u91cf const int a = 100 ; \uff082\uff09\u7c7b\u578b\u68c0\u67e5 const\u5e38\u91cf\u4e0e#define\u5b8f\u5b9a\u4e49\u5e38\u91cf\u7684\u533a\u522b\uff1a const\u5e38\u91cf\u5177\u6709\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u8fdb\u884c\u5b89\u5168\u68c0\u67e5\uff1b #define \u5b8f\u5b9a\u4e49\u6ca1\u6709\u6570\u636e\u7c7b\u578b\uff0c\u53ea\u662f\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u66ff\u6362\uff0c\u4e0d\u80fd\u8fdb\u884c\u5b89\u5168\u68c0\u67e5\u3002 const \u5b9a\u4e49\u7684\u53d8\u91cf\u53ea\u6709\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u679a\u4e3e\uff0c\u4e14\u4ee5\u5e38\u91cf\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u65f6\u624d\u80fd\u4f5c\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002\u5176\u4ed6\u60c5\u51b5\u4e0b\u5b83\u53ea\u662f\u4e00\u4e2a const \u9650\u5b9a\u7684\u53d8\u91cf\uff0c\u4e0d\u8981\u5c06\u4e0e\u5e38\u91cf\u6df7\u6dc6\u3002 \uff083\uff09\u9632\u6b62\u4fee\u6539\uff0c\u8d77\u4fdd\u62a4\u4f5c\u7528\uff0c\u589e\u52a0\u7a0b\u5e8f\u9c81\u68d2\u6027 void f ( const int i ){ i ++ ; //error! } \uff084\uff09\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5206\u914d const\u5b9a\u4e49\u5e38\u91cf\u4ece\u6c47\u7f16\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u53ea\u662f\u7ed9\u51fa\u4e86\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u4e0d\u662f\u50cf #define \u4e00\u6837\u7ed9\u51fa\u7684\u662f \u7acb\u5373\u6570 \uff0c\u6240\u4ee5\uff0cconst\u5b9a\u4e49\u7684\u5e38\u91cf\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ea\u6709\u4e00\u4efd\u62f7\u8d1d\uff0c\u800c #define \u5b9a\u4e49\u7684\u5e38\u91cf\u5728\u5185\u5b58\u4e2d\u6709\u82e5\u5e72\u4e2a\u62f7\u8d1d\u3002","title":"2.const\u4f5c\u7528"},{"location":"cpp/const/#3const","text":"\u6ce8\u610f\uff1a\u975econst\u53d8\u91cf\u9ed8\u8ba4\u4e3aextern\u3002\u8981\u4f7fconst\u53d8\u91cf\u80fd\u591f\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u8bbf\u95ee\uff0c\u5fc5\u987b\u5728\u6587\u4ef6\u4e2d\u663e\u5f0f\u5730\u6307\u5b9a\u5b83\u4e3aextern\u3002","title":"3.const\u5bf9\u8c61\u9ed8\u8ba4\u4e3a\u6587\u4ef6\u5c40\u90e8\u53d8\u91cf"},{"location":"cpp/const/#const","text":"// file1.cpp int ext // file2.cpp #include <iostream> extern int ext ; int main (){ std :: cout << ( ext + 10 ) << std :: endl ; }","title":"\u672a\u88abconst\u4fee\u9970\u7684\u53d8\u91cf\u5728\u4e0d\u540c\u6587\u4ef6\u7684\u8bbf\u95ee"},{"location":"cpp/const/#const_1","text":"//extern_file1.cpp extern const int ext = 12 ; //extern_file2.cpp #include <iostream> extern const int ext ; int main (){ std :: cout << ext << std :: endl ; } \u5c0f\u7ed3\uff1a\u53ef\u4ee5\u53d1\u73b0\u672a\u88abconst\u4fee\u9970\u7684\u53d8\u91cf\u4e0d\u9700\u8981extern\u663e\u5f0f\u58f0\u660e\uff01\u800cconst\u5e38\u91cf\u9700\u8981\u663e\u5f0f\u58f0\u660eextern\uff0c\u5e76\u4e14\u9700\u8981\u505a\u521d\u59cb\u5316\uff01\u56e0\u4e3a\u5e38\u91cf\u5728\u5b9a\u4e49\u540e\u5c31\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5b9a\u4e49\u65f6\u5fc5\u987b\u521d\u59cb\u5316\u3002","title":"const\u5e38\u91cf\u5728\u4e0d\u540c\u6587\u4ef6\u7684\u8bbf\u95ee"},{"location":"cpp/const/#4","text":"const int b = 10 ; b = 0 ; // error: assignment of read-only variable \u2018b\u2019 const string s = \"helloworld\" ; const int i , j = 0 ; // error: uninitialized const \u2018i\u2019 \u4e0a\u8ff0\u6709\u4e24\u4e2a\u9519\u8bef\uff0c\u7b2c\u4e00\uff1ab\u4e3a\u5e38\u91cf\uff0c\u4e0d\u53ef\u66f4\u6539\uff01\u7b2c\u4e8c\uff1ai\u4e3a\u5e38\u91cf\uff0c\u5fc5\u987b\u8fdb\u884c\u521d\u59cb\u5316\uff01(\u56e0\u4e3a\u5e38\u91cf\u5728\u5b9a\u4e49\u540e\u5c31\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5b9a\u4e49\u65f6\u5fc5\u987b\u521d\u59cb\u5316\u3002)","title":"4.\u5b9a\u4e49\u5e38\u91cf"},{"location":"cpp/const/#5const","text":"\u4e0e\u6307\u9488\u76f8\u5173\u7684const\u6709\u56db\u79cd\uff1a const char * a ; //\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488\u6216\u8005\u8bf4\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\u3002 char const * a ; //\u540c\u4e0a char * const a ; //\u6307\u5411\u7c7b\u578b\u5bf9\u8c61\u7684const\u6307\u9488\u3002\u6216\u8005\u8bf4\u5e38\u6307\u9488\u3001const\u6307\u9488\u3002 const char * const a ; //\u6307\u5411const\u5bf9\u8c61\u7684const\u6307\u9488\u3002 \u5c0f\u7ed3\uff1a\u5982\u679cconst\u4f4d\u4e8e*\u7684\u5de6\u4fa7\uff0c\u5219const\u5c31\u662f\u7528\u6765\u4fee\u9970\u6307\u9488\u6240\u6307\u5411\u7684\u53d8\u91cf\uff0c\u5373\u6307\u9488\u6307\u5411\u4e3a\u5e38\u91cf\uff1b\u5982\u679cconst\u4f4d\u4e8e*\u7684\u53f3\u4fa7\uff0cconst\u5c31\u662f\u4fee\u9970\u6307\u9488\u672c\u8eab\uff0c\u5373\u6307\u9488\u672c\u8eab\u662f\u5e38\u91cf\u3002 \u5177\u4f53\u4f7f\u7528\u5982\u4e0b\uff1a \uff081\uff09\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488 const int * ptr ; * ptr = 10 ; //error ptr\u662f\u4e00\u4e2a\u6307\u5411int\u7c7b\u578bconst\u5bf9\u8c61\u7684\u6307\u9488\uff0cconst\u5b9a\u4e49\u7684\u662fint\u7c7b\u578b\uff0c\u4e5f\u5c31\u662fptr\u6240\u6307\u5411\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u800c\u4e0d\u662fptr\u672c\u8eab\uff0c\u6240\u4ee5ptr\u53ef\u4ee5\u4e0d\u7528\u8d4b\u521d\u59cb\u503c\u3002\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7ptr\u53bb\u4fee\u6539\u6240\u6307\u5bf9\u8c61\u7684\u503c\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u7528void*\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5fc5\u987b\u4f7f\u7528const void*\u7c7b\u578b\u7684\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\u3002 const int p = 10 ; const void * vp = & p ; void * vp = & p ; //error \u53e6\u5916\u4e00\u4e2a\u91cd\u70b9\u662f\uff1a \u5141\u8bb8\u628a\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u7ed9\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488 \u3002 \u5c06\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u7ed9const\u5bf9\u8c61\u7684\u6307\u9488: const int * ptr ; int val = 3 ; ptr = & val ; //ok \u6211\u4eec\u4e0d\u80fd\u901a\u8fc7ptr\u6307\u9488\u6765\u4fee\u6539val\u7684\u503c\uff0c\u5373\u4f7f\u5b83\u6307\u5411\u7684\u662f\u975econst\u5bf9\u8c61! \u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488\u4fee\u6539\u57fa\u7840\u5bf9\u8c61\uff0c\u7136\u800c\u5982\u679c\u8be5\u6307\u9488\u6307\u5411\u4e86\u975econst\u5bf9\u8c61\uff0c\u53ef\u7528\u5176\u4ed6\u65b9\u5f0f\u4fee\u6539\u5176\u6240\u6307\u7684\u5bf9\u8c61\u3002\u53ef\u4ee5\u4fee\u6539const\u6307\u9488\u6240\u6307\u5411\u7684\u503c\u7684\uff0c\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7const\u5bf9\u8c61\u6307\u9488\u6765\u8fdb\u884c\u800c\u5df2\uff01\u5982\u4e0b\u4fee\u6539\uff1a int * ptr1 = & val ; * ptr1 = 4 ; cout <<* ptr << endl ; \u5c0f\u7ed3\uff1a\u5bf9\u4e8e\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\uff0c\u4e0d\u80fd\u901a\u8fc7\u6307\u9488\u6765\u4fee\u6539\u5bf9\u8c61\u7684\u503c\u3002 \u4e5f\u4e0d\u80fd\u4f7f\u7528void * \u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5fc5\u987b\u4f7f\u7528const void * \u7c7b\u578b\u7684\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\u3002 \u5141\u8bb8\u628a\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u503c\u7ed9const\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u5982\u679c\u8981\u4fee\u6539\u6307\u9488\u6240\u6307\u5411\u7684\u5bf9\u8c61\u503c\uff0c\u5fc5\u987b\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u4fee\u6539\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7\u5f53\u524d\u6307\u9488\u76f4\u63a5\u4fee\u6539\u3002 \uff082\uff09\u5e38\u6307\u9488 const\u6307\u9488\u5fc5\u987b\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4e14const\u6307\u9488\u7684\u503c\u4e0d\u80fd\u4fee\u6539\u3002 #include <iostream> using namespace std ; int main (){ int num = 0 ; int * const ptr =& num ; //const\u6307\u9488\u5fc5\u987b\u521d\u59cb\u5316\uff01\u4e14const\u6307\u9488\u7684\u503c\u4e0d\u80fd\u4fee\u6539 int * t = & num ; * t = 1 ; cout <<* ptr << endl ; } \u4e0a\u8ff0\u4fee\u6539ptr\u6307\u9488\u6240\u6307\u5411\u7684\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u975econst\u6307\u9488\u6765\u4fee\u6539\u3002 \u6700\u540e\uff0c\u5f53\u628a\u4e00\u4e2aconst\u5e38\u91cf\u7684\u5730\u5740\u8d4b\u503c\u7ed9ptr\u65f6\u5019\uff0c\u7531\u4e8eptr\u6307\u5411\u7684\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u662fconst\u5e38\u91cf\uff0c\u6240\u4ee5\u4f1a\u62a5\u9519\uff0c\u51fa\u73b0\uff1aconst int* -> int *\u9519\u8bef\uff01 #include <iostream> using namespace std ; int main (){ const int num = 0 ; int * const ptr =& num ; //error! const int* -> int* cout <<* ptr << endl ; } \u4e0a\u8ff0\u82e5\u6539\u4e3a const int *ptr\u6216\u8005\u6539\u4e3aconst int *const ptr\uff0c\u90fd\u53ef\u4ee5\u6b63\u5e38\uff01 \uff083\uff09\u6307\u5411\u5e38\u91cf\u7684\u5e38\u6307\u9488 \u7406\u89e3\u5b8c\u524d\u4e24\u79cd\u60c5\u51b5\uff0c\u4e0b\u9762\u8fd9\u4e2a\u60c5\u51b5\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\uff1a const int p = 3 ; const int * const ptr = & p ; ptr\u662f\u4e00\u4e2aconst\u6307\u9488\uff0c\u7136\u540e\u6307\u5411\u4e86\u4e00\u4e2aint \u7c7b\u578b\u7684const\u5bf9\u8c61\u3002","title":"5.\u6307\u9488\u4e0econst"},{"location":"cpp/const/#6const","text":"","title":"6.\u51fd\u6570\u4e2d\u4f7f\u7528const"},{"location":"cpp/const/#const_2","text":"\u8fd9\u4e2a\u8ddfconst\u4fee\u9970\u666e\u901a\u53d8\u91cf\u4ee5\u53ca\u6307\u9488\u7684\u542b\u4e49\u57fa\u672c\u76f8\u540c\uff1a \uff081\uff09const int const int func1 (); \u8fd9\u4e2a\u672c\u8eab\u65e0\u610f\u4e49\uff0c\u56e0\u4e3a\u53c2\u6570\u8fd4\u56de\u672c\u8eab\u5c31\u662f\u8d4b\u503c\u7ed9\u5176\u4ed6\u7684\u53d8\u91cf\uff01 \uff082\uff09const int* const int * func2 (); \u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u4e0d\u53d8\u3002 \uff083\uff09int *const int * const func2 (); \u6307\u9488\u672c\u8eab\u4e0d\u53ef\u53d8\u3002","title":"const\u4fee\u9970\u51fd\u6570\u8fd4\u56de\u503c"},{"location":"cpp/const/#const_3","text":"\uff081\uff09\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\u53ca\u6307\u9488\u672c\u8eab\u5728\u51fd\u6570\u5185\u4e0d\u53ef\u53d8\uff0c\u65e0\u610f\u4e49\uff01 void func ( const int var ); // \u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\u4e0d\u53ef\u53d8 void func ( int * const var ); // \u6307\u9488\u672c\u8eab\u4e0d\u53ef\u53d8 \u8868\u660e\u53c2\u6570\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f46\u6b64\u5904\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0cvar\u672c\u8eab\u5c31\u662f\u5f62\u53c2\uff0c\u5728\u51fd\u6570\u5185\u4e0d\u4f1a\u6539\u53d8\u3002\u5305\u62ec\u4f20\u5165\u7684\u5f62\u53c2\u662f\u6307\u9488\u4e5f\u662f\u4e00\u6837\u3002 \u8f93\u5165\u53c2\u6570\u91c7\u7528\u201c\u503c\u4f20\u9012\u201d\uff0c\u7531\u4e8e\u51fd\u6570\u5c06\u81ea\u52a8\u4ea7\u751f\u4e34\u65f6\u53d8\u91cf\u7528\u4e8e\u590d\u5236\u8be5\u53c2\u6570\uff0c\u8be5\u8f93\u5165\u53c2\u6570\u672c\u6765\u5c31\u65e0\u9700\u4fdd\u62a4\uff0c\u6240\u4ee5\u4e0d\u8981\u52a0const \u4fee\u9970\u3002 \uff082\uff09\u53c2\u6570\u6307\u9488\u6240\u6307\u5185\u5bb9\u4e3a\u5e38\u91cf\u4e0d\u53ef\u53d8 void StringCopy ( char * dst , const char * src ); \u5176\u4e2dsrc \u662f\u8f93\u5165\u53c2\u6570\uff0cdst \u662f\u8f93\u51fa\u53c2\u6570\u3002\u7ed9src\u52a0\u4e0aconst\u4fee\u9970\u540e\uff0c\u5982\u679c\u51fd\u6570\u4f53\u5185\u7684\u8bed\u53e5\u8bd5\u56fe\u6539\u52a8src\u7684\u5185\u5bb9\uff0c\u7f16\u8bd1\u5668\u5c06\u6307\u51fa\u9519\u8bef\u3002\u8fd9\u5c31\u662f\u52a0\u4e86const\u7684\u4f5c\u7528\u4e4b\u4e00\u3002 \uff083\uff09\u53c2\u6570\u4e3a\u5f15\u7528\uff0c\u4e3a\u4e86\u589e\u52a0\u6548\u7387\u540c\u65f6\u9632\u6b62\u4fee\u6539\u3002 void func ( const A & a ) \u5bf9\u4e8e\u975e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u53c2\u6570\u800c\u8a00\uff0c\u8c61void func(A a) \u8fd9\u6837\u58f0\u660e\u7684\u51fd\u6570\u6ce8\u5b9a\u6548\u7387\u6bd4\u8f83\u4f4e\u3002\u56e0\u4e3a\u51fd\u6570\u4f53\u5185\u5c06\u4ea7\u751fA \u7c7b\u578b \u7684\u4e34\u65f6\u5bf9\u8c61\u7528\u4e8e\u590d\u5236\u53c2\u6570a\uff0c\u800c\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u3001\u590d\u5236\u3001\u6790\u6784\u8fc7\u7a0b\u90fd\u5c06\u6d88\u8017\u65f6\u95f4\u3002 \u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u53ef\u4ee5\u5c06\u51fd\u6570\u58f0\u660e\u6539\u4e3avoid func(A &a)\uff0c\u56e0\u4e3a\u201c\u5f15\u7528\u4f20\u9012\u201d\u4ec5\u501f\u7528\u4e00\u4e0b\u53c2\u6570\u7684\u522b\u540d\u800c\u5df2\uff0c\u4e0d\u9700\u8981\u4ea7\u751f\u4e34 \u65f6\u5bf9\u8c61\u3002\u4f46\u662f\u51fd\u6570void func(A &a) \u5b58\u5728\u4e00\u4e2a\u7f3a\u70b9\uff1a \u201c\u5f15\u7528\u4f20\u9012\u201d\u6709\u53ef\u80fd\u6539\u53d8\u53c2\u6570a\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u671f\u671b\u7684\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u5bb9\u6613\uff0c\u52a0const\u4fee\u9970\u5373\u53ef\uff0c\u56e0\u6b64\u51fd\u6570\u6700\u7ec8\u6210\u4e3a void func(const A &a)\u3002 \u4ee5\u6b64\u7c7b\u63a8\uff0c\u662f\u5426\u5e94\u5c06void func(int x) \u6539\u5199\u4e3avoid func(const int &x)\uff0c\u4ee5\u4fbf\u63d0\u9ad8\u6548\u7387\uff1f\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u5185\u90e8\u6570 \u636e\u7c7b\u578b\u7684\u53c2\u6570\u4e0d\u5b58\u5728\u6784\u9020\u3001\u6790\u6784\u7684\u8fc7\u7a0b\uff0c\u800c\u590d\u5236\u4e5f\u975e\u5e38\u5feb\uff0c\u201c\u503c\u4f20\u9012\u201d\u548c\u201c\u5f15\u7528\u4f20\u9012\u201d\u7684\u6548\u7387\u51e0\u4e4e\u76f8\u5f53\u3002 \u5c0f\u7ed3\uff1a\u5bf9\u4e8e\u975e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u8f93\u5165\u53c2\u6570\uff0c\u5e94\u8be5\u5c06\u201c\u503c\u4f20\u9012\u201d\u7684\u65b9\u5f0f\u6539\u4e3a\u201cconst \u5f15\u7528\u4f20\u9012\u201d\uff0c\u76ee\u7684\u662f\u63d0\u9ad8\u6548\u7387\u3002\u4f8b\u5982\u5c06void func(A a) \u6539\u4e3avoid func(const A &a)\u3002 \u5bf9\u4e8e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u8f93\u5165\u53c2\u6570\uff0c\u4e0d\u8981\u5c06\u201c\u503c\u4f20\u9012\u201d\u7684\u65b9\u5f0f\u6539\u4e3a\u201cconst \u5f15\u7528\u4f20\u9012\u201d\u3002\u5426\u5219\u65e2\u8fbe\u4e0d\u5230\u63d0\u9ad8\u6548\u7387\u7684\u76ee\u7684\uff0c\u53c8\u964d\u4f4e\u4e86\u51fd\u6570\u7684\u53ef\u7406\u89e3\u6027\u3002\u4f8b\u5982void func(int x) \u4e0d\u5e94\u8be5\u6539\u4e3avoid func(const int &x)\u3002 \u4ee5\u4e0a\u89e3\u51b3\u4e86\u4e24\u4e2a\u9762\u8bd5\u95ee\u9898\uff1a \uff081\uff09\u5982\u679c\u51fd\u6570\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u6307\u9488\uff0c\u662f\u5426\u9700\u8981\u4e3a\u8be5\u6307\u9488\u52a0\u4e0aconst\uff0c\u628aconst\u52a0\u5728\u6307\u9488\u4e0d\u540c\u7684\u4f4d\u7f6e\u6709\u4ec0\u4e48\u533a\u522b\uff1b \uff082\uff09\u5982\u679c\u5199\u7684\u51fd\u6570\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u590d\u6742\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f20\u5165\u503c\u53c2\u6570\u6216\u8005\u5f15\u7528\u53c2\u6570\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u4e3a\u4f20\u5165\u7684\u5f15\u7528\u53c2\u6570\u52a0\u4e0aconst\u3002","title":"const\u4fee\u9970\u51fd\u6570\u53c2\u6570"},{"location":"cpp/const/#7const","text":"\u5728\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u4efb\u4f55\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u6210\u5458\u7684\u51fd\u6570\u90fd\u5e94\u8be5\u58f0\u660e\u4e3aconst\u7c7b\u578b\u3002\u5982\u679c\u5728\u7f16\u5199const\u6210\u5458\u51fd\u6570\u65f6\uff0c\u4e0d\u614e\u4fee\u6539\u6570\u636e\u6210\u5458\uff0c\u6216\u8005\u8c03\u7528\u4e86\u5176\u5b83\u975econst\u6210\u5458\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u6307\u51fa\u9519\u8bef\uff0c\u8fd9\u65e0\u7591\u4f1a\u63d0\u9ad8\u7a0b\u5e8f\u7684\u5065\u58ee\u6027\u3002\u4f7f\u7528const\u5173\u5b57\u8fdb\u884c\u8bf4\u660e\u7684\u6210\u5458\u51fd\u6570\uff0c\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002\u53ea\u6709\u5e38\u6210\u5458\u51fd\u6570\u624d\u6709\u8d44\u683c\u64cd\u4f5c\u5e38\u91cf\u6216\u5e38\u5bf9\u8c61\uff0c\u6ca1\u6709\u4f7f\u7528const\u5173\u952e\u5b57\u660e\u7684\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u7528\u6765\u64cd\u4f5c\u5e38\u5bf9\u8c61\u3002 \u5bf9\u4e8e\u7c7b\u4e2d\u7684const\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Apple { private : int people [ 100 ]; public : Apple ( int i ); const int apple_number ; }; Apple :: Apple ( int i ) : apple_number ( i ) { } const\u5bf9\u8c61\u53ea\u80fd\u8bbf\u95eeconst\u6210\u5458\u51fd\u6570,\u800c\u975econst\u5bf9\u8c61\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7684\u6210\u5458\u51fd\u6570,\u5305\u62ecconst\u6210\u5458\u51fd\u6570. \u4f8b\u5982\uff1a //apple.cpp class Apple { private : int people [ 100 ]; public : Apple ( int i ); const int apple_number ; void take ( int num ) const ; int add ( int num ); int add ( int num ) const ; int getCount () const ; }; //main.cpp #include <iostream> #include \"apple.cpp\" using namespace std ; Apple :: Apple ( int i ) : apple_number ( i ) { } int Apple :: add ( int num ){ take ( num ); } int Apple :: add ( int num ) const { take ( num ); } void Apple :: take ( int num ) const { cout << \"take func \" << num << endl ; } int Apple :: getCount () const { take ( 1 ); // add(); //error return apple_number ; } int main (){ Apple a ( 2 ); cout << a . getCount () << endl ; a . add ( 10 ); const Apple b ( 3 ); b . add ( 100 ); return 0 ; } //\u7f16\u8bd1\uff1a g++ -o main main.cpp apple.cpp //\u7ed3\u679c take func 1 2 take func 10 take func 100 \u4e0a\u9762getCount()\u65b9\u6cd5\u4e2d\u8c03\u7528\u4e86\u4e00\u4e2aadd\u65b9\u6cd5\uff0c\u800cadd\u65b9\u6cd5\u5e76\u975econst\u4fee\u9970\uff0c\u6240\u4ee5\u8fd0\u884c\u62a5\u9519\u3002\u4e5f\u5c31\u662f\u8bf4const\u5bf9\u8c61\u53ea\u80fd\u8bbf\u95eeconst\u6210\u5458\u51fd\u6570\u3002 \u800cadd\u65b9\u6cd5\u53c8\u8c03\u7528\u4e86const\u4fee\u9970\u7684take\u65b9\u6cd5\uff0c\u8bc1\u660e\u4e86\u975econst\u5bf9\u8c61\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7684\u6210\u5458\u51fd\u6570,\u5305\u62ecconst\u6210\u5458\u51fd\u6570\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u770b\u5230add\u7684\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\uff0c\u4e5f\u8f93\u51fa\u4e86\u4e24\u4e2a\u7ed3\u679c\uff0c\u8bf4\u660econst\u5bf9\u8c61\u9ed8\u8ba4\u8c03\u7528const\u6210\u5458\u51fd\u6570\u3002 \u6211\u4eec\u9664\u4e86\u4e0a\u8ff0\u7684\u521d\u59cb\u5316const\u5e38\u91cf\u7528\u521d\u59cb\u5316\u5217\u8868\u65b9\u5f0f\u5916\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\uff1a \u7b2c\u4e00\uff1a\u5c06\u5e38\u91cf\u5b9a\u4e49\u4e0estatic\u7ed3\u5408\uff0c\u4e5f\u5c31\u662f\uff1a static const int apple_number \u7b2c\u4e8c\uff1a\u5728\u5916\u9762\u521d\u59cb\u5316\uff1a const int Apple :: apple_number = 10 ; \u5f53\u7136\uff0c\u5982\u679c\u4f60\u4f7f\u7528c++11\u8fdb\u884c\u7f16\u8bd1\uff0c\u76f4\u63a5\u53ef\u4ee5\u5728\u5b9a\u4e49\u51fa\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u6210\uff1a static const int apple_number = 10 ; \u6216\u8005 const int apple_number = 10 ; \u8fd9\u4e24\u79cd\u90fd\u5728c++11\u4e2d\u652f\u6301\uff01 \u7f16\u8bd1\u7684\u65f6\u5019\u52a0\u4e0a-std=c++11\u5373\u53ef\uff01 \u8fd9\u91cc\u63d0\u5230\u4e86static\uff0c\u4e0b\u9762\u7b80\u5355\u7684\u8bf4\u4e00\u4e0b\uff1a \u5728C++\u4e2d\uff0cstatic\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u5728\u7c7b\u7684\u5185\u90e8\u521d\u59cb\u5316\u3002\u5728\u7c7b\u7684\u5185\u90e8\u53ea\u662f\u58f0\u660e\uff0c\u5b9a\u4e49\u5fc5\u987b\u5728\u7c7b\u5b9a\u4e49\u4f53\u7684\u5916\u90e8\uff0c\u901a\u5e38\u5728\u7c7b\u7684\u5b9e\u73b0\u6587\u4ef6\u4e2d\u521d\u59cb\u5316\u3002 \u5728\u7c7b\u4e2d\u58f0\u660e\uff1a static int ap ; \u5728\u7c7b\u5b9e\u73b0\u6587\u4ef6\u4e2d\u4f7f\u7528\uff1a int Apple :: ap = 666 \u5bf9\u4e8e\u6b64\u9879\uff0cc++11\u4e0d\u80fd\u8fdb\u884c\u58f0\u660e\u5e76\u521d\u59cb\u5316\uff0c\u4e5f\u5c31\u662f\u4e0a\u8ff0\u4f7f\u7528\u65b9\u6cd5\u3002 \u6587\u7ae0\u8f6c\u8f7d\u81ea: https://light-city.club/sc/basic_content/const/#6const","title":"7.\u7c7b\u4e2d\u4f7f\u7528const"},{"location":"cpp/deque%E5%AE%B9%E5%99%A8/","text":"\u5185\u5b58\u5206\u5e03","title":"STL deque\u5bb9\u5668"},{"location":"cpp/inline/","text":"1. \u7c7b\u4e2d\u5185\u8054 \u00b6 \u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u65b9\u6cd5 class A { public : void f1 ( int x ); /** * @brief \u7c7b\u4e2d\u5b9a\u4e49\u4e86\u7684\u51fd\u6570\u662f\u9690\u5f0f\u5185\u8054\u51fd\u6570,\u58f0\u660e\u8981\u60f3\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5fc5\u987b\u5728\u5b9e\u73b0\u5904(\u5b9a\u4e49\u5904)\u52a0inline\u5173\u952e\u5b57\u3002 * * @param x * @param y */ void Foo ( int x , int y ) ///< \u5b9a\u4e49\u5373\u9690\u5f0f\u5185\u8054\u51fd\u6570\uff01 { }; void f1 ( int x ); ///< \u58f0\u660e\u540e\uff0c\u8981\u60f3\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5fc5\u987b\u5728\u5b9a\u4e49\u5904\u52a0inline\u5173\u952e\u5b57\u3002 }; \u5b9e\u73b0\u6587\u4ef6\u4e2d\u5b9a\u4e49\u5185\u8054\u51fd\u6570\uff1a #include <iostream> #include \"inline.h\" using namespace std ; /** * @brief inline\u8981\u8d77\u4f5c\u7528,inline\u8981\u4e0e\u51fd\u6570\u5b9a\u4e49\u653e\u5728\u4e00\u8d77,inline\u662f\u4e00\u79cd\u201c\u7528\u4e8e\u5b9e\u73b0\u7684\u5173\u952e\u5b57,\u800c\u4e0d\u662f\u7528\u4e8e\u58f0\u660e\u7684\u5173\u952e\u5b57\u201d * * @param x * @param y * * @return */ int Foo ( int x , int y ); // \u51fd\u6570\u58f0\u660e inline int Foo ( int x , int y ) // \u51fd\u6570\u5b9a\u4e49 { return x + y ; } // \u5b9a\u4e49\u5904\u52a0inline\u5173\u952e\u5b57\uff0c\u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff01 inline void A :: f1 ( int x ){ } int main () { cout << Foo ( 1 , 2 ) << endl ; } /** * \u7f16\u8bd1\u5668\u5bf9 inline \u51fd\u6570\u7684\u5904\u7406\u6b65\u9aa4 * \u5c06 inline \u51fd\u6570\u4f53\u590d\u5236\u5230 inline \u51fd\u6570\u8c03\u7528\u70b9\u5904\uff1b * \u4e3a\u6240\u7528 inline \u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff1b * \u5c06 inline \u51fd\u6570\u7684\u7684\u8f93\u5165\u53c2\u6570\u548c\u8fd4\u56de\u503c\u6620\u5c04\u5230\u8c03\u7528\u65b9\u6cd5\u7684\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\u4e2d\uff1b * \u5982\u679c inline \u51fd\u6570\u6709\u591a\u4e2a\u8fd4\u56de\u70b9\uff0c\u5c06\u5176\u8f6c\u53d8\u4e3a inline \u51fd\u6570\u4ee3\u7801\u5757\u672b\u5c3e\u7684\u5206\u652f\uff08\u4f7f\u7528 GOTO\uff09\u3002 */ \u5185\u8054\u80fd\u63d0\u9ad8\u51fd\u6570\u6548\u7387\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u51fd\u6570\u90fd\u5b9a\u4e49\u6210\u5185\u8054\u51fd\u6570\uff01\u5185\u8054\u662f\u4ee5\u4ee3\u7801\u81a8\u80c0(\u590d\u5236)\u4e3a\u4ee3\u4ef7\uff0c\u4ec5\u4ec5\u7701\u53bb\u4e86\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\uff0c\u4ece\u800c\u63d0\u9ad8\u51fd\u6570\u7684\u6267\u884c\u6548\u7387\u3002 \u5982\u679c\u6267\u884c\u51fd\u6570\u4f53\u5185\u4ee3\u7801\u7684\u65f6\u95f4\u76f8\u6bd4\u4e8e\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u8f83\u5927\uff0c\u90a3\u4e48\u6548\u7387\u7684\u6536\u8d27\u4f1a\u66f4\u5c11\uff01 \u53e6\u4e00\u65b9\u9762\uff0c\u6bcf\u4e00\u5904\u5185\u8054\u51fd\u6570\u7684\u8c03\u7528\u90fd\u8981\u590d\u5236\u4ee3\u7801\uff0c\u5c06\u4f7f\u7a0b\u5e8f\u7684\u603b\u4ee3\u7801\u91cf\u589e\u5927\uff0c\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u4ee5\u4e0b\u60c5\u51b5\u4e0d\u5b9c\u7528\u5185\u8054\uff1a \uff081\uff09\u5982\u679c\u51fd\u6570\u4f53\u5185\u7684\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f7f\u5f97\u5185\u8054\u5c06\u5bfc\u81f4\u5185\u5b58\u6d88\u8017\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3002 \uff082\uff09\u5982\u679c\u51fd\u6570\u4f53\u5185\u51fa\u73b0\u5faa\u73af\uff0c\u90a3\u4e48\u6267\u884c\u51fd\u6570\u4f53\u5185\u4ee3\u7801\u7684\u65f6\u95f4\u8981\u6bd4\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u5927\u3002 2.\u865a\u51fd\u6570\uff08virtual\uff09\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff08inline\uff09\u5417\uff1f \u00b6 \u865a\u51fd\u6570\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff0c\u5185\u8054\u662f\u53ef\u4ee5\u4fee\u9970\u865a\u51fd\u6570\u7684\uff0c\u4f46\u662f\u5f53\u865a\u51fd\u6570\u8868\u73b0\u591a\u6001\u6027\u7684\u65f6\u5019\u4e0d\u80fd\u5185\u8054\u3002 \u5185\u8054\u662f\u5728\u7f16\u8bd1\u5668\u5efa\u8bae\u7f16\u8bd1\u5668\u5185\u8054\uff0c\u800c\u865a\u51fd\u6570\u7684\u591a\u6001\u6027\u5728\u8fd0\u884c\u671f\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u77e5\u9053\u8fd0\u884c\u671f\u8c03\u7528\u54ea\u4e2a\u4ee3\u7801\uff0c\u56e0\u6b64\u865a\u51fd\u6570\u8868\u73b0\u4e3a\u591a\u6001\u6027\u65f6\uff08\u8fd0\u884c\u671f\uff09\u4e0d\u53ef\u4ee5\u5185\u8054\u3002 inline virtual \u552f\u4e00\u53ef\u4ee5\u5185\u8054\u7684\u65f6\u5019\u662f\uff1a\u7f16\u8bd1\u5668\u77e5\u9053\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\uff08\u5982Base::who()\uff09\uff0c\u8fd9\u53ea\u6709\u5728\u7f16\u8bd1\u5668\u5177\u6709\u5b9e\u9645\u5bf9\u8c61\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u6307\u9488\u6216\u5f15\u7528\u65f6\u624d\u4f1a\u53d1\u751f\u3002 #include <iostream> using namespace std ; class Base { public : inline virtual void who () { cout << \"I am Base \\n \" ; } virtual ~ Base () {} }; class Derived : public Base { public : inline void who () // \u4e0d\u5199inline\u65f6\u9690\u5f0f\u5185\u8054 { cout << \"I am Derived \\n \" ; } }; int main () { // \u6b64\u5904\u7684\u865a\u51fd\u6570 who()\uff0c\u662f\u901a\u8fc7\u7c7b\uff08Base\uff09\u7684\u5177\u4f53\u5bf9\u8c61\uff08b\uff09\u6765\u8c03\u7528\u7684\uff0c\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u786e\u5b9a\u4e86\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u662f\u5185\u8054\u7684\uff0c\u4f46\u6700\u7ec8\u662f\u5426\u5185\u8054\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u3002 Base b ; b . who (); // \u6b64\u5904\u7684\u865a\u51fd\u6570\u662f\u901a\u8fc7\u6307\u9488\u8c03\u7528\u7684\uff0c\u5448\u73b0\u591a\u6001\u6027\uff0c\u9700\u8981\u5728\u8fd0\u884c\u65f6\u671f\u95f4\u624d\u80fd\u786e\u5b9a\uff0c\u6240\u4ee5\u4e0d\u80fd\u4e3a\u5185\u8054\u3002 Base * ptr = new Derived (); ptr -> who (); // \u56e0\u4e3aBase\u6709\u865a\u6790\u6784\u51fd\u6570\uff08virtual ~Base() {}\uff09\uff0c\u6240\u4ee5 delete \u65f6\uff0c\u4f1a\u5148\u8c03\u7528\u6d3e\u751f\u7c7b\uff08Derived\uff09\u6790\u6784\u51fd\u6570\uff0c\u518d\u8c03\u7528\u57fa\u7c7b\uff08Base\uff09\u6790\u6784\u51fd\u6570\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\u3002 delete ptr ; ptr = nullptr ; system ( \"pause\" ); return 0 ; }","title":"inline"},{"location":"cpp/inline/#1","text":"\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u65b9\u6cd5 class A { public : void f1 ( int x ); /** * @brief \u7c7b\u4e2d\u5b9a\u4e49\u4e86\u7684\u51fd\u6570\u662f\u9690\u5f0f\u5185\u8054\u51fd\u6570,\u58f0\u660e\u8981\u60f3\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5fc5\u987b\u5728\u5b9e\u73b0\u5904(\u5b9a\u4e49\u5904)\u52a0inline\u5173\u952e\u5b57\u3002 * * @param x * @param y */ void Foo ( int x , int y ) ///< \u5b9a\u4e49\u5373\u9690\u5f0f\u5185\u8054\u51fd\u6570\uff01 { }; void f1 ( int x ); ///< \u58f0\u660e\u540e\uff0c\u8981\u60f3\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5fc5\u987b\u5728\u5b9a\u4e49\u5904\u52a0inline\u5173\u952e\u5b57\u3002 }; \u5b9e\u73b0\u6587\u4ef6\u4e2d\u5b9a\u4e49\u5185\u8054\u51fd\u6570\uff1a #include <iostream> #include \"inline.h\" using namespace std ; /** * @brief inline\u8981\u8d77\u4f5c\u7528,inline\u8981\u4e0e\u51fd\u6570\u5b9a\u4e49\u653e\u5728\u4e00\u8d77,inline\u662f\u4e00\u79cd\u201c\u7528\u4e8e\u5b9e\u73b0\u7684\u5173\u952e\u5b57,\u800c\u4e0d\u662f\u7528\u4e8e\u58f0\u660e\u7684\u5173\u952e\u5b57\u201d * * @param x * @param y * * @return */ int Foo ( int x , int y ); // \u51fd\u6570\u58f0\u660e inline int Foo ( int x , int y ) // \u51fd\u6570\u5b9a\u4e49 { return x + y ; } // \u5b9a\u4e49\u5904\u52a0inline\u5173\u952e\u5b57\uff0c\u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff01 inline void A :: f1 ( int x ){ } int main () { cout << Foo ( 1 , 2 ) << endl ; } /** * \u7f16\u8bd1\u5668\u5bf9 inline \u51fd\u6570\u7684\u5904\u7406\u6b65\u9aa4 * \u5c06 inline \u51fd\u6570\u4f53\u590d\u5236\u5230 inline \u51fd\u6570\u8c03\u7528\u70b9\u5904\uff1b * \u4e3a\u6240\u7528 inline \u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff1b * \u5c06 inline \u51fd\u6570\u7684\u7684\u8f93\u5165\u53c2\u6570\u548c\u8fd4\u56de\u503c\u6620\u5c04\u5230\u8c03\u7528\u65b9\u6cd5\u7684\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\u4e2d\uff1b * \u5982\u679c inline \u51fd\u6570\u6709\u591a\u4e2a\u8fd4\u56de\u70b9\uff0c\u5c06\u5176\u8f6c\u53d8\u4e3a inline \u51fd\u6570\u4ee3\u7801\u5757\u672b\u5c3e\u7684\u5206\u652f\uff08\u4f7f\u7528 GOTO\uff09\u3002 */ \u5185\u8054\u80fd\u63d0\u9ad8\u51fd\u6570\u6548\u7387\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u51fd\u6570\u90fd\u5b9a\u4e49\u6210\u5185\u8054\u51fd\u6570\uff01\u5185\u8054\u662f\u4ee5\u4ee3\u7801\u81a8\u80c0(\u590d\u5236)\u4e3a\u4ee3\u4ef7\uff0c\u4ec5\u4ec5\u7701\u53bb\u4e86\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\uff0c\u4ece\u800c\u63d0\u9ad8\u51fd\u6570\u7684\u6267\u884c\u6548\u7387\u3002 \u5982\u679c\u6267\u884c\u51fd\u6570\u4f53\u5185\u4ee3\u7801\u7684\u65f6\u95f4\u76f8\u6bd4\u4e8e\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u8f83\u5927\uff0c\u90a3\u4e48\u6548\u7387\u7684\u6536\u8d27\u4f1a\u66f4\u5c11\uff01 \u53e6\u4e00\u65b9\u9762\uff0c\u6bcf\u4e00\u5904\u5185\u8054\u51fd\u6570\u7684\u8c03\u7528\u90fd\u8981\u590d\u5236\u4ee3\u7801\uff0c\u5c06\u4f7f\u7a0b\u5e8f\u7684\u603b\u4ee3\u7801\u91cf\u589e\u5927\uff0c\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u4ee5\u4e0b\u60c5\u51b5\u4e0d\u5b9c\u7528\u5185\u8054\uff1a \uff081\uff09\u5982\u679c\u51fd\u6570\u4f53\u5185\u7684\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f7f\u5f97\u5185\u8054\u5c06\u5bfc\u81f4\u5185\u5b58\u6d88\u8017\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3002 \uff082\uff09\u5982\u679c\u51fd\u6570\u4f53\u5185\u51fa\u73b0\u5faa\u73af\uff0c\u90a3\u4e48\u6267\u884c\u51fd\u6570\u4f53\u5185\u4ee3\u7801\u7684\u65f6\u95f4\u8981\u6bd4\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u5927\u3002","title":"1. \u7c7b\u4e2d\u5185\u8054"},{"location":"cpp/inline/#2virtualinline","text":"\u865a\u51fd\u6570\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff0c\u5185\u8054\u662f\u53ef\u4ee5\u4fee\u9970\u865a\u51fd\u6570\u7684\uff0c\u4f46\u662f\u5f53\u865a\u51fd\u6570\u8868\u73b0\u591a\u6001\u6027\u7684\u65f6\u5019\u4e0d\u80fd\u5185\u8054\u3002 \u5185\u8054\u662f\u5728\u7f16\u8bd1\u5668\u5efa\u8bae\u7f16\u8bd1\u5668\u5185\u8054\uff0c\u800c\u865a\u51fd\u6570\u7684\u591a\u6001\u6027\u5728\u8fd0\u884c\u671f\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u77e5\u9053\u8fd0\u884c\u671f\u8c03\u7528\u54ea\u4e2a\u4ee3\u7801\uff0c\u56e0\u6b64\u865a\u51fd\u6570\u8868\u73b0\u4e3a\u591a\u6001\u6027\u65f6\uff08\u8fd0\u884c\u671f\uff09\u4e0d\u53ef\u4ee5\u5185\u8054\u3002 inline virtual \u552f\u4e00\u53ef\u4ee5\u5185\u8054\u7684\u65f6\u5019\u662f\uff1a\u7f16\u8bd1\u5668\u77e5\u9053\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\uff08\u5982Base::who()\uff09\uff0c\u8fd9\u53ea\u6709\u5728\u7f16\u8bd1\u5668\u5177\u6709\u5b9e\u9645\u5bf9\u8c61\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u6307\u9488\u6216\u5f15\u7528\u65f6\u624d\u4f1a\u53d1\u751f\u3002 #include <iostream> using namespace std ; class Base { public : inline virtual void who () { cout << \"I am Base \\n \" ; } virtual ~ Base () {} }; class Derived : public Base { public : inline void who () // \u4e0d\u5199inline\u65f6\u9690\u5f0f\u5185\u8054 { cout << \"I am Derived \\n \" ; } }; int main () { // \u6b64\u5904\u7684\u865a\u51fd\u6570 who()\uff0c\u662f\u901a\u8fc7\u7c7b\uff08Base\uff09\u7684\u5177\u4f53\u5bf9\u8c61\uff08b\uff09\u6765\u8c03\u7528\u7684\uff0c\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u786e\u5b9a\u4e86\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u662f\u5185\u8054\u7684\uff0c\u4f46\u6700\u7ec8\u662f\u5426\u5185\u8054\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u3002 Base b ; b . who (); // \u6b64\u5904\u7684\u865a\u51fd\u6570\u662f\u901a\u8fc7\u6307\u9488\u8c03\u7528\u7684\uff0c\u5448\u73b0\u591a\u6001\u6027\uff0c\u9700\u8981\u5728\u8fd0\u884c\u65f6\u671f\u95f4\u624d\u80fd\u786e\u5b9a\uff0c\u6240\u4ee5\u4e0d\u80fd\u4e3a\u5185\u8054\u3002 Base * ptr = new Derived (); ptr -> who (); // \u56e0\u4e3aBase\u6709\u865a\u6790\u6784\u51fd\u6570\uff08virtual ~Base() {}\uff09\uff0c\u6240\u4ee5 delete \u65f6\uff0c\u4f1a\u5148\u8c03\u7528\u6d3e\u751f\u7c7b\uff08Derived\uff09\u6790\u6784\u51fd\u6570\uff0c\u518d\u8c03\u7528\u57fa\u7c7b\uff08Base\uff09\u6790\u6784\u51fd\u6570\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\u3002 delete ptr ; ptr = nullptr ; system ( \"pause\" ); return 0 ; }","title":"2.\u865a\u51fd\u6570\uff08virtual\uff09\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff08inline\uff09\u5417\uff1f"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/","text":"list \u5bb9\u5668\u7684\u672c\u8d28\u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 forward_list \u7684\u64cd\u4f5c\u90fd\u5728\u94fe\u8868\u5934\u3002 C++ 11 \u6807\u51c6\u624d\u652f\u6301 \u6784\u9020\u51fd\u6570 \u00b6 list() list(size_type _Count) count \u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0 list(size_type _Count, const Type& _Val) count \u4e2a\u6307\u5b9a\u7684\u503c list(const _list& _Right) \u7528\u4e00\u4e2alist\u521d\u59cb\u5316\u5f53\u524d\u7684list list(InputIterator _First, InputIterator _Last) \u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u95f4\u7684\u4e00\u6bb5 \u5934\u6dfb\u52a0\u5143\u7d20 \u00b6 push_front(const Type& Val); \u5c3e\u6dfb\u52a0\u5143\u7d20 \u00b6 push_back(const Type& Val); \u63d2\u5165\u5143\u7d20 \u00b6 iterator insert(iterator loc, const Type& Val); \u5728\u6307\u5b9a\u8fed\u4ee3\u5668\u7684\u4f4d\u7f6e\u52a0\u5165\u4e00\u4e2a\u6570\u636e void insert(iterator loc, size_type num, const Type& Val); \u5728\u67d0\u4e2a\u8fed\u4ee3\u5668\u540e\u52a0num\u4e2a\u503c\u4e3aValue\u7684\u5143\u7d20 void insert(iterator loc, input_iterator start, input_iterator end); \u5728\u67d0\u4e2a\u8fed\u4ee3\u5668\u540e\u52a0\u5165\u53e6\u4e00\u4e2a\u5411\u91cf\u7684\u4e2d\u95f4\u4e00\u6bb5 \u5220\u9664\u5143\u7d20 \u00b6 pop_front() \u00b6 \u5934\u5220\u9664 pop_back() \u00b6 \u5c3e\u5220\u9664 clear() \u00b6 \u6e05\u9664\u94fe\u8868\u5143\u7d20 erase() \u00b6 erase(const_iterator _Where) \u64e6\u9664\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20 erase(const_iterator _First, const_iterator _Last) \u64e6\u9664\u4eceFirst, \u5230 last \u4e4b\u95f4\u7684\u5143\u7d20 remove() \u00b6 remove(const _Type Val) \u79fb\u9664\u6240\u6709\u548cVal \u76f8\u540c\u7684\u5143\u7d20 unique() \u00b6 \u79fb\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20 \u5408\u5e76\u94fe\u8868 \u00b6 merge(_Type _Right) \u5408\u5e76\u4e24\u4e2a\u94fe\u8868 \u6392\u5e8f\u94fe\u8868 \u00b6 sort() \u5982\u679c\u94fe\u8868\u5143\u7d20\u662f\u7ed3\u6784\u4f53\uff0c\u5219\u9700\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26 < \u7ffb\u8f6c\u94fe\u8868 \u00b6 reverse() \u7ffb\u8f6c\u94fe\u8868, \u5982\u679c\u94fe\u8868\u5143\u7d20\u662f\u7ed3\u6784\u4f53\uff0c\u5219\u9700\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26 < \u67e5\u627e\u5143\u7d20 \u00b6 find(InputIterator _First, InputIterator _Last, _Type Val) \u4ece\u4e00\u6bb5\u8fed\u4ee3\u5668\u4e2d\u67e5\u627eVal\uff0c\u627e\u5230\u5219\u8fd4\u56de\u8fd9\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u53c2\u8003\u4ee3\u7801\uff1a test_list.cpp","title":"STL list\u5bb9\u5668"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_1","text":"list() list(size_type _Count) count \u4e2a\u5143\u7d20\u521d\u59cb\u5316\u4e3a0 list(size_type _Count, const Type& _Val) count \u4e2a\u6307\u5b9a\u7684\u503c list(const _list& _Right) \u7528\u4e00\u4e2alist\u521d\u59cb\u5316\u5f53\u524d\u7684list list(InputIterator _First, InputIterator _Last) \u53e6\u4e00\u4e2a\u5bf9\u8c61\u4e2d\u95f4\u7684\u4e00\u6bb5","title":"\u6784\u9020\u51fd\u6570"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_2","text":"push_front(const Type& Val);","title":"\u5934\u6dfb\u52a0\u5143\u7d20"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_3","text":"push_back(const Type& Val);","title":"\u5c3e\u6dfb\u52a0\u5143\u7d20"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_4","text":"iterator insert(iterator loc, const Type& Val); \u5728\u6307\u5b9a\u8fed\u4ee3\u5668\u7684\u4f4d\u7f6e\u52a0\u5165\u4e00\u4e2a\u6570\u636e void insert(iterator loc, size_type num, const Type& Val); \u5728\u67d0\u4e2a\u8fed\u4ee3\u5668\u540e\u52a0num\u4e2a\u503c\u4e3aValue\u7684\u5143\u7d20 void insert(iterator loc, input_iterator start, input_iterator end); \u5728\u67d0\u4e2a\u8fed\u4ee3\u5668\u540e\u52a0\u5165\u53e6\u4e00\u4e2a\u5411\u91cf\u7684\u4e2d\u95f4\u4e00\u6bb5","title":"\u63d2\u5165\u5143\u7d20"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_5","text":"","title":"\u5220\u9664\u5143\u7d20"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#pop_front","text":"\u5934\u5220\u9664","title":"pop_front()"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#pop_back","text":"\u5c3e\u5220\u9664","title":"pop_back()"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#clear","text":"\u6e05\u9664\u94fe\u8868\u5143\u7d20","title":"clear()"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#erase","text":"erase(const_iterator _Where) \u64e6\u9664\u67d0\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20 erase(const_iterator _First, const_iterator _Last) \u64e6\u9664\u4eceFirst, \u5230 last \u4e4b\u95f4\u7684\u5143\u7d20","title":"erase()"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#remove","text":"remove(const _Type Val) \u79fb\u9664\u6240\u6709\u548cVal \u76f8\u540c\u7684\u5143\u7d20","title":"remove()"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#unique","text":"\u79fb\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20","title":"unique()"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_6","text":"merge(_Type _Right) \u5408\u5e76\u4e24\u4e2a\u94fe\u8868","title":"\u5408\u5e76\u94fe\u8868"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_7","text":"sort() \u5982\u679c\u94fe\u8868\u5143\u7d20\u662f\u7ed3\u6784\u4f53\uff0c\u5219\u9700\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26 <","title":"\u6392\u5e8f\u94fe\u8868"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_8","text":"reverse() \u7ffb\u8f6c\u94fe\u8868, \u5982\u679c\u94fe\u8868\u5143\u7d20\u662f\u7ed3\u6784\u4f53\uff0c\u5219\u9700\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26 <","title":"\u7ffb\u8f6c\u94fe\u8868"},{"location":"cpp/list%E5%AE%B9%E5%99%A8/#_9","text":"find(InputIterator _First, InputIterator _Last, _Type Val) \u4ece\u4e00\u6bb5\u8fed\u4ee3\u5668\u4e2d\u67e5\u627eVal\uff0c\u627e\u5230\u5219\u8fd4\u56de\u8fd9\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u53c2\u8003\u4ee3\u7801\uff1a test_list.cpp","title":"\u67e5\u627e\u5143\u7d20"},{"location":"cpp/map%E5%AE%B9%E5%99%A8/","text":"\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u662f\u7ea2\u9ed1\u6811(\u5e73\u8861\u6392\u5e8f\u4e8c\u53c9\u6811)","title":"STL map\u5bb9\u5668"},{"location":"cpp/sizeof/","text":"\u7c7b\u5927\u5c0f\u8ba1\u7b97 \u9996\u5148\u6765\u4e2a\u603b\u7ed3\uff0c\u7136\u540e\u4e0b\u9762\u7ed9\u51fa\u5b9e\u9645\u4f8b\u5b50\uff0c\u5b9e\u6218\uff01 \u7a7a\u7c7b\u7684\u5927\u5c0f\u4e3a1\u5b57\u8282 \u00b6 #include <iostream> using namespace std ; class A {}; int main () { cout << sizeof ( A ) << endl ; return 0 ; } \u4e00\u4e2a\u7c7b\u4e2d\uff0c\u865a\u51fd\u6570\u672c\u8eab\u3001\u6210\u5458\u51fd\u6570\uff08\u5305\u62ec\u9759\u6001\u4e0e\u975e\u9759\u6001\uff09\u548c\u9759\u6001\u6570\u636e\u6210\u5458\u90fd\u662f\u4e0d\u5360\u7528\u7c7b\u5bf9\u8c61\u7684\u5b58\u50a8\u7a7a\u95f4\u3002 \u00b6 /** * \u9759\u6001\u6570\u636e\u6210\u5458\u88ab\u7f16\u8bd1\u5668\u653e\u5728\u7a0b\u5e8f\u7684\u4e00\u4e2aglobal data members\u4e2d\uff0c\u5b83\u662f\u7c7b\u7684\u4e00\u4e2a\u6570\u636e\u6210\u5458\uff0c\u4f46\u4e0d\u5f71\u54cd\u7c7b\u7684\u5927\u5c0f\u3002 \u4e0d\u7ba1\u8fd9\u4e2a\u7c7b\u4ea7\u751f\u4e86\u591a\u5c11\u4e2a\u5b9e\u4f8b\uff0c\u8fd8\u662f\u6d3e\u751f\u4e86\u591a\u5c11\u65b0\u7684\u7c7b\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u3002\u9759\u6001\u6570\u636e\u6210\u5458\uff0c\u4e00\u65e6\u88ab\u58f0\u660e\uff0c\u5c31\u5df2\u7ecf\u5b58\u5728\u3002 */ #include <iostream> using namespace std ; class A { public : char b ; virtual void fun () {}; static int c ; static int d ; static int f ; }; int main () { /** * @brief 16 \u5b57\u8282\u5bf9\u9f50\u3001\u9759\u6001\u53d8\u91cf\u4e0d\u5f71\u54cd\u7c7b\u7684\u5927\u5c0f\u3001vptr\u6307\u9488=8 */ cout << sizeof ( A ) << endl ; return 0 ; } \u5bf9\u4e8e\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a\u865a\u51fd\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u865a\u6307\u9488, vptr\u7684\u5927\u5c0f\u3002 \u00b6 /** * @brief \u5bf9\u4e8e\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a\u865a\u51fd\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u865a\u6307\u9488, vptr\u7684\u5927\u5c0f\u3002 */ #include <iostream> using namespace std ; class A { virtual void fun (); virtual void fun1 (); virtual void fun2 (); virtual void fun3 (); }; int main () { cout << sizeof ( A ) << endl ; // 8 return 0 ; } \u666e\u901a\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u6240\u6709\u57fa\u7c7b\u7684\u51fd\u6570\u4e0e\u6210\u5458\uff0c\u8981\u6309\u7167\u5b57\u8282\u5bf9\u9f50\u6765\u8ba1\u7b97\u5927\u5c0f \u00b6 /** * @brief 1.\u666e\u901a\u5355\u7ee7\u627f,\u7ee7\u627f\u5c31\u662f\u57fa\u7c7b+\u6d3e\u751f\u7c7b\u81ea\u8eab\u7684\u5927\u5c0f(\u6ce8\u610f\u5b57\u8282\u5bf9\u9f50) * \u6ce8\u610f\uff1a\u7c7b\u7684\u6570\u636e\u6210\u5458\u6309\u5176\u58f0\u660e\u987a\u5e8f\u52a0\u5165\u5185\u5b58\uff0c\u65e0\u8bbf\u95ee\u6743\u9650\u65e0\u5173\uff0c\u53ea\u770b\u58f0\u660e\u987a\u5e8f\u3002 */ #include <iostream> using namespace std ; class A { public : char a ; int b ; }; class B : A { public : short a ; long b ; }; class C { A a ; char c ; }; int main () { cout << sizeof ( A ) << endl ; cout << sizeof ( B ) << endl ; cout << sizeof ( C ) << endl ; return 0 ; } \u865a\u51fd\u6570\u7ee7\u627f\uff0c\u4e0d\u7ba1\u662f\u5355\u7ee7\u627f\u8fd8\u662f\u591a\u7ee7\u627f\uff0c\u90fd\u662f\u7ee7\u627f\u4e86\u57fa\u7c7b\u7684vptr\u3002 \u00b6 (32\u4f4d\u64cd\u4f5c\u7cfb\u7edf4\u5b57\u8282\uff0c64\u4f4d\u64cd\u4f5c\u7cfb\u7edf 8\u5b57\u8282)\uff01 /** * \u865a\u5355\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u7ee7\u627f\u57fa\u7c7bvptr */ #include <iostream> using namespace std ; class A1 { virtual void fun (){} }; class C1 : public A1 { }; int main () { /** * @brief \u5bf9\u4e8e\u865a\u5355\u51fd\u6570\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u4e5f\u7ee7\u627f\u4e86\u57fa\u7c7b\u7684vptr\uff0c\u6240\u4ee5\u662f8\u5b57\u8282 */ cout << sizeof ( C1 ) << endl ; return 0 ; } \u865a\u7ee7\u627f, \u7ee7\u627f\u57fa\u7c7b\u7684vptr\u3002 \u00b6 #include <iostream> using namespace std ; class A { virtual void fun () {} }; class B { virtual void fun2 () {} }; class C : virtual public A , virtual public B { public : virtual void fun3 () {} }; int main () { /** * @brief \u6d3e\u751f\u7c7b\u865a\u7ee7\u627f\u591a\u4e2a\u865a\u51fd\u6570\uff0c\u4f1a\u7ee7\u627f\u6240\u6709\u865a\u51fd\u6570\u7684vptr */ cout << sizeof ( A ) << \" \" << sizeof ( B ) << \" \" << sizeof ( C ); return 0 ; }","title":"sizeof"},{"location":"cpp/sizeof/#1","text":"#include <iostream> using namespace std ; class A {}; int main () { cout << sizeof ( A ) << endl ; return 0 ; }","title":"\u7a7a\u7c7b\u7684\u5927\u5c0f\u4e3a1\u5b57\u8282"},{"location":"cpp/sizeof/#_1","text":"/** * \u9759\u6001\u6570\u636e\u6210\u5458\u88ab\u7f16\u8bd1\u5668\u653e\u5728\u7a0b\u5e8f\u7684\u4e00\u4e2aglobal data members\u4e2d\uff0c\u5b83\u662f\u7c7b\u7684\u4e00\u4e2a\u6570\u636e\u6210\u5458\uff0c\u4f46\u4e0d\u5f71\u54cd\u7c7b\u7684\u5927\u5c0f\u3002 \u4e0d\u7ba1\u8fd9\u4e2a\u7c7b\u4ea7\u751f\u4e86\u591a\u5c11\u4e2a\u5b9e\u4f8b\uff0c\u8fd8\u662f\u6d3e\u751f\u4e86\u591a\u5c11\u65b0\u7684\u7c7b\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u3002\u9759\u6001\u6570\u636e\u6210\u5458\uff0c\u4e00\u65e6\u88ab\u58f0\u660e\uff0c\u5c31\u5df2\u7ecf\u5b58\u5728\u3002 */ #include <iostream> using namespace std ; class A { public : char b ; virtual void fun () {}; static int c ; static int d ; static int f ; }; int main () { /** * @brief 16 \u5b57\u8282\u5bf9\u9f50\u3001\u9759\u6001\u53d8\u91cf\u4e0d\u5f71\u54cd\u7c7b\u7684\u5927\u5c0f\u3001vptr\u6307\u9488=8 */ cout << sizeof ( A ) << endl ; return 0 ; }","title":"\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u865a\u51fd\u6570\u672c\u8eab\u3001\u6210\u5458\u51fd\u6570\uff08\u5305\u62ec\u9759\u6001\u4e0e\u975e\u9759\u6001\uff09\u548c\u9759\u6001\u6570\u636e\u6210\u5458\u90fd\u662f\u4e0d\u5360\u7528\u7c7b\u5bf9\u8c61\u7684\u5b58\u50a8\u7a7a\u95f4\u3002"},{"location":"cpp/sizeof/#vptr","text":"/** * @brief \u5bf9\u4e8e\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a\u865a\u51fd\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u865a\u6307\u9488, vptr\u7684\u5927\u5c0f\u3002 */ #include <iostream> using namespace std ; class A { virtual void fun (); virtual void fun1 (); virtual void fun2 (); virtual void fun3 (); }; int main () { cout << sizeof ( A ) << endl ; // 8 return 0 ; }","title":"\u5bf9\u4e8e\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a\u865a\u51fd\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u865a\u6307\u9488, vptr\u7684\u5927\u5c0f\u3002"},{"location":"cpp/sizeof/#_2","text":"/** * @brief 1.\u666e\u901a\u5355\u7ee7\u627f,\u7ee7\u627f\u5c31\u662f\u57fa\u7c7b+\u6d3e\u751f\u7c7b\u81ea\u8eab\u7684\u5927\u5c0f(\u6ce8\u610f\u5b57\u8282\u5bf9\u9f50) * \u6ce8\u610f\uff1a\u7c7b\u7684\u6570\u636e\u6210\u5458\u6309\u5176\u58f0\u660e\u987a\u5e8f\u52a0\u5165\u5185\u5b58\uff0c\u65e0\u8bbf\u95ee\u6743\u9650\u65e0\u5173\uff0c\u53ea\u770b\u58f0\u660e\u987a\u5e8f\u3002 */ #include <iostream> using namespace std ; class A { public : char a ; int b ; }; class B : A { public : short a ; long b ; }; class C { A a ; char c ; }; int main () { cout << sizeof ( A ) << endl ; cout << sizeof ( B ) << endl ; cout << sizeof ( C ) << endl ; return 0 ; }","title":"\u666e\u901a\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u6240\u6709\u57fa\u7c7b\u7684\u51fd\u6570\u4e0e\u6210\u5458\uff0c\u8981\u6309\u7167\u5b57\u8282\u5bf9\u9f50\u6765\u8ba1\u7b97\u5927\u5c0f"},{"location":"cpp/sizeof/#vptr_1","text":"(32\u4f4d\u64cd\u4f5c\u7cfb\u7edf4\u5b57\u8282\uff0c64\u4f4d\u64cd\u4f5c\u7cfb\u7edf 8\u5b57\u8282)\uff01 /** * \u865a\u5355\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u7ee7\u627f\u57fa\u7c7bvptr */ #include <iostream> using namespace std ; class A1 { virtual void fun (){} }; class C1 : public A1 { }; int main () { /** * @brief \u5bf9\u4e8e\u865a\u5355\u51fd\u6570\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u4e5f\u7ee7\u627f\u4e86\u57fa\u7c7b\u7684vptr\uff0c\u6240\u4ee5\u662f8\u5b57\u8282 */ cout << sizeof ( C1 ) << endl ; return 0 ; }","title":"\u865a\u51fd\u6570\u7ee7\u627f\uff0c\u4e0d\u7ba1\u662f\u5355\u7ee7\u627f\u8fd8\u662f\u591a\u7ee7\u627f\uff0c\u90fd\u662f\u7ee7\u627f\u4e86\u57fa\u7c7b\u7684vptr\u3002"},{"location":"cpp/sizeof/#vptr_2","text":"#include <iostream> using namespace std ; class A { virtual void fun () {} }; class B { virtual void fun2 () {} }; class C : virtual public A , virtual public B { public : virtual void fun3 () {} }; int main () { /** * @brief \u6d3e\u751f\u7c7b\u865a\u7ee7\u627f\u591a\u4e2a\u865a\u51fd\u6570\uff0c\u4f1a\u7ee7\u627f\u6240\u6709\u865a\u51fd\u6570\u7684vptr */ cout << sizeof ( A ) << \" \" << sizeof ( B ) << \" \" << sizeof ( C ); return 0 ; }","title":"\u865a\u7ee7\u627f, \u7ee7\u627f\u57fa\u7c7b\u7684vptr\u3002"},{"location":"cpp/static/","text":"\u5f53\u4e0e\u4e0d\u540c\u7c7b\u578b\u4e00\u8d77\u4f7f\u7528\u65f6\uff0cStatic\u5173\u952e\u5b57\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002 \u9759\u6001\u53d8\u91cf\uff1a \u51fd\u6570\u4e2d\u7684\u53d8\u91cf\uff0c\u7c7b\u4e2d\u7684\u53d8\u91cf \u9759\u6001\u7c7b\u7684\u6210\u5458\uff1a \u7c7b\u5bf9\u8c61\u548c\u7c7b\u4e2d\u7684\u51fd\u6570 \u9759\u6001\u53d8\u91cf \u00b6 \u51fd\u6570\u4e2d\u7684\u9759\u6001\u53d8\u91cf \u00b6 \u5f53\u53d8\u91cf\u58f0\u660e\u4e3astatic\u65f6\uff0c\u7a7a\u95f4**\u5c06\u5728\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u5185\u5206\u914d**\u3002 \u5373\u4f7f\u591a\u6b21\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u9759\u6001\u53d8\u91cf\u7684\u7a7a\u95f4\u4e5f**\u53ea\u5206\u914d\u4e00\u6b21**\uff0c\u524d\u4e00\u6b21\u8c03\u7528\u4e2d\u7684\u53d8\u91cf\u503c\u901a\u8fc7\u4e0b\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u4f20\u9012\u3002\u8fd9\u5bf9\u4e8e\u5728C / C ++\u6216\u9700\u8981\u5b58\u50a8\u5148\u524d\u51fd\u6570\u72b6\u6001\u7684\u4efb\u4f55\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u6709\u7528\u3002 #include <iostream> #include <string> using namespace std ; void demo () { // static variable static int count = 0 ; cout << count << \" \" ; // value is updated and // will be carried to next // function calls count ++ ; } int main () { for ( int i = 0 ; i < 5 ; i ++ ) demo (); return 0 ; } \u8f93\u51fa\uff1a 0 1 2 3 4 \u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\u770b\u5230\u53d8\u91cfcount\u88ab\u58f0\u660e\u4e3astatic\u3002\u56e0\u6b64\uff0c\u5b83\u7684\u503c\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u6765\u4f20\u9012\u3002\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u90fd\u4e0d\u4f1a\u5bf9\u53d8\u91cf\u8ba1\u6570\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf \u00b6 \u7531\u4e8e\u58f0\u660e\u4e3astatic\u7684\u53d8\u91cf\u53ea\u88ab\u521d\u59cb\u5316\u4e00\u6b21\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u5355\u72ec\u7684\u9759\u6001\u5b58\u50a8\u4e2d\u5206\u914d\u4e86\u7a7a\u95f4\uff0c\u56e0\u6b64\u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf\u7531**\u5bf9\u8c61\u5171\u4eab**\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u4e0d\u80fd\u6709\u76f8\u540c\u9759\u6001\u53d8\u91cf\u7684\u591a\u4e2a\u526f\u672c\u3002\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u9759\u6001\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u3002 #include <iostream> using namespace std ; class Apple { public : static int i ; Apple () { // Do nothing }; }; int main () { Apple obj1 ; Apple obj2 ; obj1 . i = 2 ; obj2 . i = 3 ; // prints value of i cout << obj1 . i << \" \" << obj2 . i ; } \u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\u770b\u5230\u6211\u4eec\u5df2\u7ecf\u5c1d\u8bd5\u4e3a\u591a\u4e2a\u5bf9\u8c61\u521b\u5efa\u9759\u6001\u53d8\u91cfi\u7684\u591a\u4e2a\u526f\u672c\u3002\u4f46\u8fd9\u5e76\u6ca1\u6709\u53d1\u751f\u3002\u56e0\u6b64\uff0c\u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf\u5e94\u7531\u7528\u6237\u4f7f\u7528\u7c7b\u5916\u7684\u7c7b\u540d\u548c\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26\u663e\u5f0f\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; class Apple { public : static int i ; Apple () { // Do nothing }; }; int Apple :: i = 1 ; int main () { Apple obj ; // prints value of i cout << obj . i ; } \u8f93\u51fa\uff1a 1 \u9759\u6001\u6210\u5458 \u00b6 \u7c7b\u5bf9\u8c61\u4e3a\u9759\u6001 \u00b6 \u5c31\u50cf\u53d8\u91cf\u4e00\u6837\uff0c\u5bf9\u8c61\u4e5f\u5728\u58f0\u660e\u4e3astatic\u65f6\u5177\u6709\u8303\u56f4\uff0c\u76f4\u5230\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u3002 \u8003\u8651\u4ee5\u4e0b\u7a0b\u5e8f\uff0c\u5176\u4e2d\u5bf9\u8c61\u662f\u975e\u9759\u6001\u7684\u3002 #include <iostream> using namespace std ; class Apple { int i ; public : Apple () { i = 0 ; cout << \"Inside Constructor \\n \" ; } ~ Apple () { cout << \"Inside Destructor \\n \" ; } }; int main () { int x = 0 ; if ( x == 0 ) { Apple obj ; } cout << \"End of main \\n \" ; } \u8f93\u51fa: Inside Constructor Inside Destructor End of main \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u5bf9\u8c61\u5728if\u5757\u5185\u58f0\u660e\u4e3a\u975e\u9759\u6001\u3002 \u56e0\u6b64\uff0c\u53d8\u91cf\u7684\u8303\u56f4\u4ec5\u5728if\u5757\u5185\u3002 \u56e0\u6b64\uff0c\u5f53\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u5c06\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4e14\u5728if\u5757\u7684\u63a7\u5236\u6743\u8d8a\u8fc7\u6790\u6784\u51fd\u6570\u7684\u540c\u65f6\u8c03\u7528\uff0c\u56e0\u4e3a\u5bf9\u8c61\u7684\u8303\u56f4\u4ec5\u5728\u58f0\u660e\u5b83\u7684if\u5757\u5185\u3002 \u5982\u679c\u6211\u4eec\u5c06\u5bf9\u8c61\u58f0\u660e\u4e3a\u9759\u6001\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u8f93\u51fa\u7684\u53d8\u5316\u3002 #include <iostream> using namespace std ; class Apple { int i ; public : Apple () { i = 0 ; cout << \"Inside Constructor \\n \" ; } ~ Apple () { cout << \"Inside Destructor \\n \" ; } }; int main () { int x = 0 ; if ( x == 0 ) { static Apple obj ; } cout << \"End of main \\n \" ; } \u8f93\u51fa\uff1a Inside Constructor End of main Inside Destructor \u60a8\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u8f93\u51fa\u7684\u53d8\u5316\u3002\u73b0\u5728\uff0c\u5728main\u7ed3\u675f\u540e\u8c03\u7528\u6790\u6784\u51fd\u6570\u3002\u8fd9\u662f\u56e0\u4e3a\u9759\u6001\u5bf9\u8c61\u7684\u8303\u56f4\u662f\u8d2f\u7a7f\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u3002 \u7c7b\u4e2d\u7684\u9759\u6001\u51fd\u6570 \u00b6 \u5c31\u50cf\u7c7b\u4e2d\u7684\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u9759\u6001\u53d8\u91cf\u4e00\u6837\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u4e5f\u4e0d\u4f9d\u8d56\u4e8e\u7c7b\u7684\u5bf9\u8c61\u3002\u6211\u4eec\u88ab\u5141\u8bb8\u4f7f\u7528\u5bf9\u8c61\u548c'.'\u6765\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002\u4f46\u5efa\u8bae\u4f7f\u7528\u7c7b\u540d\u548c\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26\u8c03\u7528\u9759\u6001\u6210\u5458\u3002 \u5141\u8bb8\u9759\u6001\u6210\u5458\u51fd\u6570\u4ec5\u8bbf\u95ee\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u5176\u4ed6\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u5b83\u4eec\u65e0\u6cd5\u8bbf\u95ee\u7c7b\u7684\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u6210\u5458\u51fd\u6570\u3002 #include <iostream> using namespace std ; class Apple { public : // static member function static void printMsg () { cout << \"Welcome to Apple!\" ; } }; // main function int main () { // invoking a static member function Apple :: printMsg (); } \u8f93\u51fa\uff1a Welcome to Apple! \u6587\u7ae0\u8f6c\u8f7d\u81ea: https://light-city.club/sc/basic_content/static/","title":"static"},{"location":"cpp/static/#_1","text":"","title":"\u9759\u6001\u53d8\u91cf"},{"location":"cpp/static/#_2","text":"\u5f53\u53d8\u91cf\u58f0\u660e\u4e3astatic\u65f6\uff0c\u7a7a\u95f4**\u5c06\u5728\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u5185\u5206\u914d**\u3002 \u5373\u4f7f\u591a\u6b21\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u9759\u6001\u53d8\u91cf\u7684\u7a7a\u95f4\u4e5f**\u53ea\u5206\u914d\u4e00\u6b21**\uff0c\u524d\u4e00\u6b21\u8c03\u7528\u4e2d\u7684\u53d8\u91cf\u503c\u901a\u8fc7\u4e0b\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u4f20\u9012\u3002\u8fd9\u5bf9\u4e8e\u5728C / C ++\u6216\u9700\u8981\u5b58\u50a8\u5148\u524d\u51fd\u6570\u72b6\u6001\u7684\u4efb\u4f55\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u6709\u7528\u3002 #include <iostream> #include <string> using namespace std ; void demo () { // static variable static int count = 0 ; cout << count << \" \" ; // value is updated and // will be carried to next // function calls count ++ ; } int main () { for ( int i = 0 ; i < 5 ; i ++ ) demo (); return 0 ; } \u8f93\u51fa\uff1a 0 1 2 3 4 \u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\u770b\u5230\u53d8\u91cfcount\u88ab\u58f0\u660e\u4e3astatic\u3002\u56e0\u6b64\uff0c\u5b83\u7684\u503c\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u6765\u4f20\u9012\u3002\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u90fd\u4e0d\u4f1a\u5bf9\u53d8\u91cf\u8ba1\u6570\u8fdb\u884c\u521d\u59cb\u5316\u3002","title":"\u51fd\u6570\u4e2d\u7684\u9759\u6001\u53d8\u91cf"},{"location":"cpp/static/#_3","text":"\u7531\u4e8e\u58f0\u660e\u4e3astatic\u7684\u53d8\u91cf\u53ea\u88ab\u521d\u59cb\u5316\u4e00\u6b21\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u5355\u72ec\u7684\u9759\u6001\u5b58\u50a8\u4e2d\u5206\u914d\u4e86\u7a7a\u95f4\uff0c\u56e0\u6b64\u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf\u7531**\u5bf9\u8c61\u5171\u4eab**\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u4e0d\u80fd\u6709\u76f8\u540c\u9759\u6001\u53d8\u91cf\u7684\u591a\u4e2a\u526f\u672c\u3002\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u9759\u6001\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u3002 #include <iostream> using namespace std ; class Apple { public : static int i ; Apple () { // Do nothing }; }; int main () { Apple obj1 ; Apple obj2 ; obj1 . i = 2 ; obj2 . i = 3 ; // prints value of i cout << obj1 . i << \" \" << obj2 . i ; } \u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\u770b\u5230\u6211\u4eec\u5df2\u7ecf\u5c1d\u8bd5\u4e3a\u591a\u4e2a\u5bf9\u8c61\u521b\u5efa\u9759\u6001\u53d8\u91cfi\u7684\u591a\u4e2a\u526f\u672c\u3002\u4f46\u8fd9\u5e76\u6ca1\u6709\u53d1\u751f\u3002\u56e0\u6b64\uff0c\u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf\u5e94\u7531\u7528\u6237\u4f7f\u7528\u7c7b\u5916\u7684\u7c7b\u540d\u548c\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26\u663e\u5f0f\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; class Apple { public : static int i ; Apple () { // Do nothing }; }; int Apple :: i = 1 ; int main () { Apple obj ; // prints value of i cout << obj . i ; } \u8f93\u51fa\uff1a 1","title":"\u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf"},{"location":"cpp/static/#_4","text":"","title":"\u9759\u6001\u6210\u5458"},{"location":"cpp/static/#_5","text":"\u5c31\u50cf\u53d8\u91cf\u4e00\u6837\uff0c\u5bf9\u8c61\u4e5f\u5728\u58f0\u660e\u4e3astatic\u65f6\u5177\u6709\u8303\u56f4\uff0c\u76f4\u5230\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u3002 \u8003\u8651\u4ee5\u4e0b\u7a0b\u5e8f\uff0c\u5176\u4e2d\u5bf9\u8c61\u662f\u975e\u9759\u6001\u7684\u3002 #include <iostream> using namespace std ; class Apple { int i ; public : Apple () { i = 0 ; cout << \"Inside Constructor \\n \" ; } ~ Apple () { cout << \"Inside Destructor \\n \" ; } }; int main () { int x = 0 ; if ( x == 0 ) { Apple obj ; } cout << \"End of main \\n \" ; } \u8f93\u51fa: Inside Constructor Inside Destructor End of main \u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u5bf9\u8c61\u5728if\u5757\u5185\u58f0\u660e\u4e3a\u975e\u9759\u6001\u3002 \u56e0\u6b64\uff0c\u53d8\u91cf\u7684\u8303\u56f4\u4ec5\u5728if\u5757\u5185\u3002 \u56e0\u6b64\uff0c\u5f53\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u5c06\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4e14\u5728if\u5757\u7684\u63a7\u5236\u6743\u8d8a\u8fc7\u6790\u6784\u51fd\u6570\u7684\u540c\u65f6\u8c03\u7528\uff0c\u56e0\u4e3a\u5bf9\u8c61\u7684\u8303\u56f4\u4ec5\u5728\u58f0\u660e\u5b83\u7684if\u5757\u5185\u3002 \u5982\u679c\u6211\u4eec\u5c06\u5bf9\u8c61\u58f0\u660e\u4e3a\u9759\u6001\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u8f93\u51fa\u7684\u53d8\u5316\u3002 #include <iostream> using namespace std ; class Apple { int i ; public : Apple () { i = 0 ; cout << \"Inside Constructor \\n \" ; } ~ Apple () { cout << \"Inside Destructor \\n \" ; } }; int main () { int x = 0 ; if ( x == 0 ) { static Apple obj ; } cout << \"End of main \\n \" ; } \u8f93\u51fa\uff1a Inside Constructor End of main Inside Destructor \u60a8\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u8f93\u51fa\u7684\u53d8\u5316\u3002\u73b0\u5728\uff0c\u5728main\u7ed3\u675f\u540e\u8c03\u7528\u6790\u6784\u51fd\u6570\u3002\u8fd9\u662f\u56e0\u4e3a\u9759\u6001\u5bf9\u8c61\u7684\u8303\u56f4\u662f\u8d2f\u7a7f\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u3002","title":"\u7c7b\u5bf9\u8c61\u4e3a\u9759\u6001"},{"location":"cpp/static/#_6","text":"\u5c31\u50cf\u7c7b\u4e2d\u7684\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u9759\u6001\u53d8\u91cf\u4e00\u6837\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u4e5f\u4e0d\u4f9d\u8d56\u4e8e\u7c7b\u7684\u5bf9\u8c61\u3002\u6211\u4eec\u88ab\u5141\u8bb8\u4f7f\u7528\u5bf9\u8c61\u548c'.'\u6765\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002\u4f46\u5efa\u8bae\u4f7f\u7528\u7c7b\u540d\u548c\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26\u8c03\u7528\u9759\u6001\u6210\u5458\u3002 \u5141\u8bb8\u9759\u6001\u6210\u5458\u51fd\u6570\u4ec5\u8bbf\u95ee\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u5176\u4ed6\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u5b83\u4eec\u65e0\u6cd5\u8bbf\u95ee\u7c7b\u7684\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u6210\u5458\u51fd\u6570\u3002 #include <iostream> using namespace std ; class Apple { public : // static member function static void printMsg () { cout << \"Welcome to Apple!\" ; } }; // main function int main () { // invoking a static member function Apple :: printMsg (); } \u8f93\u51fa\uff1a Welcome to Apple! \u6587\u7ae0\u8f6c\u8f7d\u81ea: https://light-city.club/sc/basic_content/static/","title":"\u7c7b\u4e2d\u7684\u9759\u6001\u51fd\u6570"},{"location":"cpp/this/","text":"\u76f8\u4fe1\u5728\u5750\u7684\u5f88\u591a\u4eba\uff0c\u90fd\u5728\u5b66Python\uff0c\u5bf9\u4e8ePython\u6765\u8bf4\u6709self\uff0c\u7c7b\u6bd4\u5230C++\u4e2d\u5c31\u662fthis\u6307\u9488\uff0c\u90a3\u4e48\u4e0b\u9762\u4e00\u8d77\u6765\u6df1\u5165\u5206\u6790this\u6307\u9488\u5728\u7c7b\u4e2d\u7684\u4f7f\u7528\uff01 \u9996\u5148\u6765\u8c08\u8c08this\u6307\u9488\u7684\u7528\u5904\uff1a \uff081\uff09\u4e00\u4e2a\u5bf9\u8c61\u7684this\u6307\u9488\u5e76\u4e0d\u662f\u5bf9\u8c61\u672c\u8eab\u7684\u4e00\u90e8\u5206\uff0c\u4e0d\u4f1a\u5f71\u54cdsizeof(\u5bf9\u8c61)\u7684\u7ed3\u679c\u3002 \uff082\uff09this\u4f5c\u7528\u57df\u662f\u5728\u7c7b\u5185\u90e8\uff0c\u5f53\u5728\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u4e2d\u8bbf\u95ee\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u5bf9\u8c61\u672c\u8eab\u7684\u5730\u5740\u4f5c\u4e3a\u4e00\u4e2a\u9690\u542b\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4f7f\u4f60\u6ca1\u6709\u5199\u4e0athis\u6307\u9488\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u4e5f\u662f\u52a0\u4e0athis\u7684\uff0c\u5b83\u4f5c\u4e3a\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u9690\u542b\u5f62\u53c2\uff0c\u5bf9\u5404\u6210\u5458\u7684\u8bbf\u95ee\u5747\u901a\u8fc7this\u8fdb\u884c\u3002 \u5176\u6b21\uff0cthis\u6307\u9488\u7684\u4f7f\u7528\uff1a \uff081\uff09\u5728\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u4e2d\u8fd4\u56de\u7c7b\u5bf9\u8c61\u672c\u8eab\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4f7f\u7528 return *this\u3002 \uff082\uff09\u5f53\u53c2\u6570\u4e0e\u6210\u5458\u53d8\u91cf\u540d\u76f8\u540c\u65f6\uff0c\u5982this->n = n \uff08\u4e0d\u80fd\u5199\u6210n = n)\u3002 \u53e6\u5916\uff0c\u5728\u7f51\u4e0a\u5927\u5bb6\u4f1a\u770b\u5230this\u4f1a\u88ab\u7f16\u8bd1\u5668\u89e3\u6790\u6210A *const\uff0cA const *\uff0c\u7a76\u7adf\u662f\u54ea\u4e00\u4e2a\u5462\uff1f\u4e0b\u9762\u901a\u8fc7\u65ad\u70b9\u8c03\u8bd5\u5206\u6790\uff1a \u73b0\u6709\u5982\u4e0b\u4f8b\u5b50\uff1a #include <iostream> #include <cstring> using namespace std ; class Person { public : typedef enum { BOY = 0 , GIRL } SexType ; Person ( char * n , int a , SexType s ){ name = new char [ strlen ( n ) + 1 ]; strcpy ( name , n ); age = a ; sex = s ; } int get_age () const { return this -> age ; } Person & add_age ( int a ){ age += a ; return * this ; } ~ Person (){ delete [] name ; } private : char * name ; int age ; SexType sex ; }; int main (){ Person p ( \"zhangsan\" , 20 , Person :: BOY ); cout << p . get_age () << endl ; cout << p . add_age ( 10 ). get_age () << endl ; return 0 ; } \u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u76f8\u4fe1\u5927\u5bb6\u6ca1\u5f97\u95ee\u9898\u5427\uff0c\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\uff0c\u7136\u540e\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570\uff0c\u5e76\u83b7\u53d6\u8fd9\u4e2a\u4eba\u7684\u5e74\u9f84\uff0c\u8bbe\u7f6e\u540e\uff0c\u518d\u83b7\u53d6\uff01 \u4e3a\u4e86\u9a8c\u8bc1this\u6307\u9488\u662f\u54ea\u4e00\u4e2a\uff0c\u73b0\u5728\u5728add_age\u5904\u6dfb\u52a0\u65ad\u70b9\uff0c\u8fd0\u884c\u540e\u5982\u4e0b\uff1a \u4f1a\u53d1\u73b0\u7f16\u8bd1\u5668\u81ea\u52a8\u4e3a\u6211\u4eec\u52a0\u4e0a A* const \uff0c\u800c\u4e0d\u662f A const *this \uff01 \u7d27\u63a5\u7740\uff0c\u4e0a\u8ff0\u8fd8\u6709\u4e2a\u5e38\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5bf9get_age\u6dfb\u52a0\u65ad\u70b9\uff0c\u5982\u4e0b\uff1a \u4f1a\u53d1\u73b0\u7f16\u8bd1\u5668\u628a\u4e0a\u8ff0\u7684this\uff0c\u53d8\u4e3a const A* const \uff0c\u8fd9\u4e2a\u5927\u5bb6\u4e5f\u80fd\u60f3\u5230\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u662fconst\u51fd\u6570\uff0c\u90a3\u4e48\u9488\u5bf9const\u51fd\u6570\uff0c\u5b83\u53ea\u80fd\u8bbf\u95eeconst\u53d8\u91cf\u4e0econst\u51fd\u6570\uff0c\u4e0d\u80fd\u4fee\u6539\u5176\u4ed6\u53d8\u91cf\u7684\u503c\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2athis\u6307\u5411\u4e0d\u80fd\u4fee\u6539\u7684\u53d8\u91cf\uff0c\u90a3\u5c31\u662f const A* ,\u53c8\u7531\u4e8e\u672c\u8eabthis\u662fconst\u6307\u9488\uff0c\u6240\u4ee5\u5c31\u4e3a const A* const ! \u603b\u7ed3\uff1a this\u5728\u6210\u5458\u51fd\u6570\u7684\u5f00\u59cb\u6267\u884c\u524d\u6784\u9020\uff0c\u5728\u6210\u5458\u7684\u6267\u884c\u7ed3\u675f\u540e\u6e05\u9664\u3002\u4e0a\u8ff0\u7684get_age\u51fd\u6570\u4f1a\u88ab\u89e3\u6790\u6210 get_age(const A * const this) ,add_age\u51fd\u6570\u4f1a\u88ab\u89e3\u6790\u6210 add_age(A* const this,int a) \u3002\u5728C++\u4e2d\u7c7b\u548c\u7ed3\u6784\u662f\u53ea\u6709\u4e00\u4e2a\u533a\u522b\u7684\uff1a\u7c7b\u7684\u6210\u5458\u9ed8\u8ba4\u662fprivate\uff0c\u800c\u7ed3\u6784\u662fpublic\u3002this\u662f\u7c7b\u7684\u6307\u9488\uff0c\u5982\u679c\u6362\u6210\u7ed3\u6784\uff0c\u90a3this\u5c31\u662f\u7ed3\u6784\u7684\u6307\u9488\u4e86\u3002","title":"this"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/","text":"vector\u5bf9\u8c61 \u00b6 \u5411\u91cf(\u52a8\u6001\u6570\u7ec4)\uff0c\u5185\u5b58\u5206\u914d\u539f\u7406\u548cstring\u4e00\u6837\uff0c\u662f\u8fde\u7eed\u7a7a\u95f4\uff0c\u7a7a\u95f4\u4e0d\u591f\u7528\uff0c\u4f1a\u7533\u8bf7\u4e00\u4e2a\u66f4\u5927\u7684\u7a7a\u95f4\uff0c\u8fed\u4ee3\u5668\u4f1a\u5931\u6548 #include <iostream> #include <vector> using namespace std ; int main ( int argc , const char argv []) { vector < int > vec ; return 0 ; } vector \u6784\u9020\u51fd\u6570 \u00b6 #include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ; vector < int > vec1 ( 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec1 [ i ] << ' ' ; } cout << endl ; vector < int > vec2 ( 5 , 2 ); // 5 \u4e2a2 for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec2 [ i ] << ' ' ; } cout << endl ; vector < int > vec3 ( vec2 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec3 [ i ] << ' ' ; } cout << endl ; vector < int > vec4 ( vec2 . begin (), vec2 . begin () + 3 ); for ( int i = 0 ; i < 3 ; ++ i ) { cout << vec4 [ i ] << ' ' ; } cout << endl ; return 0 ; } vector \u5bb9\u91cf \u00b6 #include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ( 0 ); cout << vec . capacity () << endl ; vector < int > vec1 ( 5 ); cout << vec1 . capacity () << endl ; return 0 ; } \u603b\u7ed3\uff1a vector\u7684\u521d\u59cb\u5bb9\u91cf\u548c\u521d\u59cb\u5316\u65f6\u7684\u5bb9\u91cf\u4e00\u81f4\u3002 #include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ( 3 ); cout << vec . capacity () << endl ; vec . push_back ( 1 ); // \u7a7a\u95f4\u589e\u52a0\uff1a 3 + 3 / 2 = 4; cout << vec . capacity () << endl ; vec . push_back ( 1 ); // \u7a7a\u95f4\u589e\u52a0\uff1a 4 + 4 / 2 = 6; vec . push_back ( 1 ); cout << vec . capacity () << endl ; vec . push_back ( 1 ); // \u7a7a\u95f4\u589e\u52a0\uff1a 6 + 6 / 2 = 9; vec . push_back ( 1 ); cout << vec . capacity () << endl ; return 0 ; } \u603b\u7ed3\uff1a vector\u7684\u5bb9\u91cf\u4e0d\u591f\u65f6\uff0c\u589e\u52a0\u539f\u5bb9\u91cf\u7684\u4e00\u534a\u3002 vector \u8bbe\u7f6e\u5bb9\u5668\u5927\u5c0f \u00b6 #include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ( 3 ); cout << vec . size () << endl ; cout << vec . capacity () << endl ; vec . reserve ( 20 ); // \u8bbe\u7f6e\u591a\u5927\u5c31\u662f\u591a\u5927\uff0c\u8981\u5927\u4e8e\u539f\u5bb9\u91cf cout << vec . size () << endl ; cout << vec . capacity () << endl ; return 0 ; } vector \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u6709\u5143\u7d20 \u00b6 #include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ( 3 ); cout << vec . empty () << endl ; vector < int > vec2 ; cout << vec2 . empty () << endl ; return 0 ; } \u589e\u5220\u6539\u67e5 \u00b6 #include <iostream> #include <vector> #include <algorithm> using namespace std ; int main ( int argc , char const argv []) { // \u7d22\u5f15\u8d4b\u503c vector < int > vec ; for ( int i = 0 ; i < 5 ; ++ i ) { vec . push_back ( i ); } for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec [ i ] << ' ' ; } cout << endl ; // at() \u8d4b\u503c for ( int i = 0 ; i < 5 ; ++ i ) { vec . at ( i ) = i ; } for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec . at ( i ) << ' ' ; } cout << endl ; // \u53d6\u6700\u540e\u4e00\u4e2a\u5143\u7d20 cout << vec . back () << endl ; // \u8fed\u4ee3\u5668\u904d\u5386 for ( vector < int >:: iterator i = vec . begin (); i != vec . end (); i ++ ) { cout << * i << ' ' ; } cout << endl ; // for_each() \u904d\u5386 for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); // \u533f\u540d\u51fd\u6570\uff1a[\u6355\u83b7\u5217\u8868](\u53c2\u6570\u5217\u8868){\u51fd\u6570\u4f53} cout << endl ; // \u63d2\u5165\u5143\u7d20 vec . insert ( vec . begin () + 2 , 12 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; vec . insert ( vec . begin () + 2 , 5 , 13 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; vector < int > vec1 ( 5 , 1 ); vec . insert ( vec . begin (), vec1 . begin (), vec1 . begin () + 2 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; // \u5c3e\u5220\u9664 vec . pop_back (); // \u5220\u9664\u6307\u5b9a\u5143\u7d20 vec . erase ( vec . begin () + 3 ); vec . erase ( vec . begin (), vec . begin () + 3 ); // \u6e05\u9664\u6240\u6709\u5143\u7d20 vec . clear (); return 0 ; } vector \u4ea4\u6362 \u00b6 #include <iostream> #include <vector> #include <algorithm> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ; vector < int > vec1 ( 5 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; for_each ( vec1 . begin (), vec1 . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; vec . swap ( vec1 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; for_each ( vec1 . begin (), vec1 . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; return 0 ; } vector \u6392\u5e8f \u00b6 #include <iostream> #include <vector> #include <algorithm> #include <functional> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ; vec . push_back ( 1 ); vec . push_back ( 3 ); vec . push_back ( 2 ); vec . push_back ( 8 ); vec . push_back ( 4 ); sort ( vec . begin (), vec . end ()); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; sort ( vec . begin (), vec . end (), greater < int > ()); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; return 0 ; } random_shuffle \u00b6 #include <iostream> #include <vector> #include <algorithm> #include <ctime> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ; vec . push_back ( 1 ); vec . push_back ( 2 ); vec . push_back ( 3 ); vec . push_back ( 4 ); vec . push_back ( 5 ); srand (( unsigned int ) time ( 0 )); random_shuffle ( vec . begin (), vec . end ()); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; return 0 ; }","title":"STL vector\u5bb9\u5668"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#vector","text":"\u5411\u91cf(\u52a8\u6001\u6570\u7ec4)\uff0c\u5185\u5b58\u5206\u914d\u539f\u7406\u548cstring\u4e00\u6837\uff0c\u662f\u8fde\u7eed\u7a7a\u95f4\uff0c\u7a7a\u95f4\u4e0d\u591f\u7528\uff0c\u4f1a\u7533\u8bf7\u4e00\u4e2a\u66f4\u5927\u7684\u7a7a\u95f4\uff0c\u8fed\u4ee3\u5668\u4f1a\u5931\u6548 #include <iostream> #include <vector> using namespace std ; int main ( int argc , const char argv []) { vector < int > vec ; return 0 ; }","title":"vector\u5bf9\u8c61"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#vector_1","text":"#include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ; vector < int > vec1 ( 5 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec1 [ i ] << ' ' ; } cout << endl ; vector < int > vec2 ( 5 , 2 ); // 5 \u4e2a2 for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec2 [ i ] << ' ' ; } cout << endl ; vector < int > vec3 ( vec2 ); for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec3 [ i ] << ' ' ; } cout << endl ; vector < int > vec4 ( vec2 . begin (), vec2 . begin () + 3 ); for ( int i = 0 ; i < 3 ; ++ i ) { cout << vec4 [ i ] << ' ' ; } cout << endl ; return 0 ; }","title":"vector \u6784\u9020\u51fd\u6570"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#vector_2","text":"#include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ( 0 ); cout << vec . capacity () << endl ; vector < int > vec1 ( 5 ); cout << vec1 . capacity () << endl ; return 0 ; } \u603b\u7ed3\uff1a vector\u7684\u521d\u59cb\u5bb9\u91cf\u548c\u521d\u59cb\u5316\u65f6\u7684\u5bb9\u91cf\u4e00\u81f4\u3002 #include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ( 3 ); cout << vec . capacity () << endl ; vec . push_back ( 1 ); // \u7a7a\u95f4\u589e\u52a0\uff1a 3 + 3 / 2 = 4; cout << vec . capacity () << endl ; vec . push_back ( 1 ); // \u7a7a\u95f4\u589e\u52a0\uff1a 4 + 4 / 2 = 6; vec . push_back ( 1 ); cout << vec . capacity () << endl ; vec . push_back ( 1 ); // \u7a7a\u95f4\u589e\u52a0\uff1a 6 + 6 / 2 = 9; vec . push_back ( 1 ); cout << vec . capacity () << endl ; return 0 ; } \u603b\u7ed3\uff1a vector\u7684\u5bb9\u91cf\u4e0d\u591f\u65f6\uff0c\u589e\u52a0\u539f\u5bb9\u91cf\u7684\u4e00\u534a\u3002","title":"vector \u5bb9\u91cf"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#vector_3","text":"#include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ( 3 ); cout << vec . size () << endl ; cout << vec . capacity () << endl ; vec . reserve ( 20 ); // \u8bbe\u7f6e\u591a\u5927\u5c31\u662f\u591a\u5927\uff0c\u8981\u5927\u4e8e\u539f\u5bb9\u91cf cout << vec . size () << endl ; cout << vec . capacity () << endl ; return 0 ; }","title":"vector \u8bbe\u7f6e\u5bb9\u5668\u5927\u5c0f"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#vector_4","text":"#include <iostream> #include <vector> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ( 3 ); cout << vec . empty () << endl ; vector < int > vec2 ; cout << vec2 . empty () << endl ; return 0 ; }","title":"vector \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u6709\u5143\u7d20"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#_1","text":"#include <iostream> #include <vector> #include <algorithm> using namespace std ; int main ( int argc , char const argv []) { // \u7d22\u5f15\u8d4b\u503c vector < int > vec ; for ( int i = 0 ; i < 5 ; ++ i ) { vec . push_back ( i ); } for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec [ i ] << ' ' ; } cout << endl ; // at() \u8d4b\u503c for ( int i = 0 ; i < 5 ; ++ i ) { vec . at ( i ) = i ; } for ( int i = 0 ; i < 5 ; ++ i ) { cout << vec . at ( i ) << ' ' ; } cout << endl ; // \u53d6\u6700\u540e\u4e00\u4e2a\u5143\u7d20 cout << vec . back () << endl ; // \u8fed\u4ee3\u5668\u904d\u5386 for ( vector < int >:: iterator i = vec . begin (); i != vec . end (); i ++ ) { cout << * i << ' ' ; } cout << endl ; // for_each() \u904d\u5386 for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); // \u533f\u540d\u51fd\u6570\uff1a[\u6355\u83b7\u5217\u8868](\u53c2\u6570\u5217\u8868){\u51fd\u6570\u4f53} cout << endl ; // \u63d2\u5165\u5143\u7d20 vec . insert ( vec . begin () + 2 , 12 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; vec . insert ( vec . begin () + 2 , 5 , 13 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; vector < int > vec1 ( 5 , 1 ); vec . insert ( vec . begin (), vec1 . begin (), vec1 . begin () + 2 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; // \u5c3e\u5220\u9664 vec . pop_back (); // \u5220\u9664\u6307\u5b9a\u5143\u7d20 vec . erase ( vec . begin () + 3 ); vec . erase ( vec . begin (), vec . begin () + 3 ); // \u6e05\u9664\u6240\u6709\u5143\u7d20 vec . clear (); return 0 ; }","title":"\u589e\u5220\u6539\u67e5"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#vector_5","text":"#include <iostream> #include <vector> #include <algorithm> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ; vector < int > vec1 ( 5 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; for_each ( vec1 . begin (), vec1 . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; vec . swap ( vec1 ); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; for_each ( vec1 . begin (), vec1 . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; return 0 ; }","title":"vector \u4ea4\u6362"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#vector_6","text":"#include <iostream> #include <vector> #include <algorithm> #include <functional> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ; vec . push_back ( 1 ); vec . push_back ( 3 ); vec . push_back ( 2 ); vec . push_back ( 8 ); vec . push_back ( 4 ); sort ( vec . begin (), vec . end ()); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; sort ( vec . begin (), vec . end (), greater < int > ()); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; return 0 ; }","title":"vector \u6392\u5e8f"},{"location":"cpp/vector%E5%AE%B9%E5%99%A8/#random_shuffle","text":"#include <iostream> #include <vector> #include <algorithm> #include <ctime> using namespace std ; int main ( int argc , char const argv []) { vector < int > vec ; vec . push_back ( 1 ); vec . push_back ( 2 ); vec . push_back ( 3 ); vec . push_back ( 4 ); vec . push_back ( 5 ); srand (( unsigned int ) time ( 0 )); random_shuffle ( vec . begin (), vec . end ()); for_each ( vec . begin (), vec . end (), []( int i ) { cout << i << ' ' ; }); cout << endl ; return 0 ; }","title":"random_shuffle"},{"location":"cpp/virtual/","text":"1. \u865a\u51fd\u6570\u4e0e\u8fd0\u884c\u591a\u6001 \u00b6 #include <iostream> using namespace std ; class Employee { public : virtual void raiseSalary () { cout << 0 << endl ; } virtual void promote () { /* common promote code */ } }; class Manager : public Employee { virtual void raiseSalary () { cout << 100 << endl ; } virtual void promote () { /* Manager specific promote */ } }; class Engineer : public Employee { virtual void raiseSalary () { cout << 200 << endl ; } virtual void promote () { /* Manager specific promote */ } }; // Similarly, there may be other types of employees // We need a very simple function to increment salary of all employees // Note that emp[] is an array of pointers and actual pointed objects can // be any type of employees. This function should ideally be in a class // like Organization, we have made it global to keep things simple void globalRaiseSalary ( Employee * emp [], int n ) { for ( int i = 0 ; i < n ; i ++ ) emp [ i ] -> raiseSalary (); // Polymorphic Call: Calls raiseSalary() // according to the actual object, not // according to the type of pointer } int main (){ Employee * emp [] = { new Manager (), new Engineer }; globalRaiseSalary ( emp , 2 ); return 0 ; } \u865a\u51fd\u6570\u7684\u8c03\u7528\u53d6\u51b3\u4e8e\u6307\u5411\u6216\u8005\u5f15\u7528\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u6307\u9488\u6216\u8005\u5f15\u7528\u81ea\u8eab\u7684\u7c7b\u578b\u3002 2. vptr\u4e0evtable \u00b6 vptr_vtable 3. \u865a\u51fd\u6570\u4e2d\u9ed8\u8ba4\u53c2\u6570 \u00b6 #include <iostream> using namespace std ; class Base { public : virtual void fun ( int x = 10 ) { cout << \"Base::fun(), x = \" << x << endl ; } }; class Derived : public Base { public : virtual void fun ( int x = 20 ) { cout << \"Derived::fun(), x = \" << x << endl ; } }; int main () { Derived d1 ; Base * bp = & d1 ; bp -> fun (); return 0 ; } \u9ed8\u8ba4\u53c2\u6570\u662f\u9759\u6001\u7ed1\u5b9a\u7684\uff0c\u865a\u51fd\u6570\u662f\u52a8\u6001\u7ed1\u5b9a\u7684\u3002 \u9ed8\u8ba4\u53c2\u6570\u7684\u4f7f\u7528\u9700\u8981\u770b\u6307\u9488\u6216\u8005\u5f15\u7528\u672c\u8eab\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 4. \u53ef\u4ee5\u4e0d\u53ef\u4ee5 \u00b6 \u9759\u6001\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u5417\uff1f \u00b6 \u9759\u6001\u51fd\u6570\u4e0d\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u88abconst \u548c volatile\u5173\u952e\u5b57\u4fee\u9970 static\u6210\u5458\u51fd\u6570\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u5bf9\u8c61\u6216\u7c7b\u5b9e\u4f8b\uff0c\u6240\u4ee5\u5373\u4f7f\u7ed9\u6b64\u51fd\u6570\u52a0\u4e0avirutal\u4e5f\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49 \u865a\u51fd\u6570\u4f9d\u9760vptr\u548cvtable\u6765\u5904\u7406\u3002vptr\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u521b\u5efa\u751f\u6210\uff0c\u5e76\u4e14\u53ea\u80fd\u7528this\u6307\u9488\u6765\u8bbf\u95ee\u5b83\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709this\u6307\u9488\uff0c\u6240\u4ee5\u65e0\u6cd5\u8bbf\u95eevptr\u3002 \u6784\u9020\u51fd\u6570\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u5417\uff1f \u00b6 \u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002\u540c\u65f6\u9664\u4e86inline|explicit\u4e4b\u5916\uff0c\u6784\u9020\u51fd\u6570\u4e0d\u5141\u8bb8\u4f7f\u7528\u5176\u5b83\u4efb\u4f55\u5173\u952e\u5b57\u3002 \u4e3a\u4ec0\u4e48\u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\uff1f \u5c3d\u7ba1**\u865a\u51fd\u6570\u8868vtable\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u5df2\u7ecf\u5efa\u7acb\u7684\uff0c\u4f46\u6307\u5411\u865a\u51fd\u6570\u8868\u7684\u6307\u9488vptr\u662f\u5728\u8fd0\u884c\u9636\u6bb5\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u624d\u4ea7\u751f\u7684**\u3002 \u5982\u679c\u7c7b\u542b\u6709\u865a\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u5728\u6784\u9020\u51fd\u6570\u4e2d\u6dfb\u52a0\u4ee3\u7801\u6765\u521b\u5efavptr\u3002 \u95ee\u9898\u6765\u4e86\uff0c\u5982\u679c\u6784\u9020\u51fd\u6570\u662f\u865a\u7684\uff0c\u90a3\u4e48\u5b83\u9700\u8981vptr\u6765\u8bbf\u95eevtable\uff0c\u53ef\u8fd9\u4e2a\u65f6\u5019vptr\u8fd8\u6ca1\u4ea7\u751f\u3002 \u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u3002 \u6211\u4eec\u4e4b\u6240\u4ee5\u4f7f\u7528\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u9700\u8981\u5728\u4fe1\u606f\u4e0d\u5168\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u591a\u6001\u8fd0\u884c\u3002\u800c\u6784\u9020\u51fd\u6570\u662f\u7528\u6765\u521d\u59cb\u5316\u5b9e\u4f8b\u7684\uff0c\u5b9e\u4f8b\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u660e\u786e\u7684\u3002 \u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u5fc5\u8981\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 #include <iostream> using namespace std ; class Base { public : }; class Derived : public Base { public : Derived () { cout << \"Derived created\" << endl ; } Derived ( const Derived & rhs ) { cout << \"Derived created by deep copy\" << endl ; } ~ Derived () { cout << \"Derived destroyed\" << endl ; } }; int main () { Derived s1 ; Derived s2 = s1 ; // Compiler invokes \"copy constructor\" // Type of s1 and s2 are concrete to compiler // How can we create Derived1 or Derived2 object // from pointer (reference) to Base class pointing Derived object? return 0 ; } #include <iostream> using namespace std ; //// LIBRARY SRART class Base { public : Base () { } virtual // Ensures to invoke actual object destructor ~ Base () { } virtual void ChangeAttributes () = 0 ; // The \"Virtual Constructor\" static Base * Create ( int id ); // The \"Virtual Copy Constructor\" virtual Base * Clone () = 0 ; }; class Derived1 : public Base { public : Derived1 () { cout << \"Derived1 created\" << endl ; } Derived1 ( const Derived1 & rhs ) { cout << \"Derived1 created by deep copy\" << endl ; } ~ Derived1 () { cout << \"~Derived1 destroyed\" << endl ; } void ChangeAttributes () { cout << \"Derived1 Attributes Changed\" << endl ; } Base * Clone () { return new Derived1 ( * this ); } }; class Derived2 : public Base { public : Derived2 () { cout << \"Derived2 created\" << endl ; } Derived2 ( const Derived2 & rhs ) { cout << \"Derived2 created by deep copy\" << endl ; } ~ Derived2 () { cout << \"~Derived2 destroyed\" << endl ; } void ChangeAttributes () { cout << \"Derived2 Attributes Changed\" << endl ; } Base * Clone () { return new Derived2 ( * this ); } }; class Derived3 : public Base { public : Derived3 () { cout << \"Derived3 created\" << endl ; } Derived3 ( const Derived3 & rhs ) { cout << \"Derived3 created by deep copy\" << endl ; } ~ Derived3 () { cout << \"~Derived3 destroyed\" << endl ; } void ChangeAttributes () { cout << \"Derived3 Attributes Changed\" << endl ; } Base * Clone () { return new Derived3 ( * this ); } }; // We can also declare \"Create\" outside Base. // But is more relevant to limit it's scope to Base Base * Base :: Create ( int id ) { // Just expand the if-else ladder, if new Derived class is created // User need not be recompiled to create newly added class objects if ( id == 1 ) { return new Derived1 ; } else if ( id == 2 ) { return new Derived2 ; } else { return new Derived3 ; } } //// LIBRARY END //// UTILITY SRART class User { public : User () : pBase ( 0 ) { // Creates any object of Base heirarchey at runtime int input ; cout << \"Enter ID (1, 2 or 3): \" ; cin >> input ; while ( ( input != 1 ) && ( input != 2 ) && ( input != 3 ) ) { cout << \"Enter ID (1, 2 or 3 only): \" ; cin >> input ; } // Create objects via the \"Virtual Constructor\" pBase = Base :: Create ( input ); } ~ User () { if ( pBase ) { delete pBase ; pBase = 0 ; } } void Action () { // Duplicate current object Base * pNewBase = pBase -> Clone (); // Change its attributes pNewBase -> ChangeAttributes (); // Dispose the created object delete pNewBase ; } private : Base * pBase ; }; //// UTILITY END //// Consumer of User (UTILITY) class int main () { User * user = new User (); user -> Action (); delete user ; } \u6790\u6784\u51fd\u6570\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u5417\uff1f \u00b6 \u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u5982\u679c\u6211\u4eec\u9700\u8981\u5220\u9664\u4e00\u4e2a\u6307\u5411\u6d3e\u751f\u7c7b\u7684\u57fa\u7c7b\u6307\u9488\u65f6\uff0c\u5e94\u8be5\u628a\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u53ea\u8981\u4e00\u4e2a\u7c7b\u6709\u53ef\u80fd\u4f1a\u88ab\u5176\u5b83\u7c7b\u6240\u7ee7\u627f\uff0c \u5c31\u5e94\u8be5\u58f0\u660e\u865a\u6790\u6784\u51fd\u6570(\u54ea\u6015\u8be5\u6790\u6784\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c)\u3002 #include <iostream> using namespace std ; class base { public : base () { cout << \"Constructing base \\n \" ; } virtual ~ base () { cout << \"Destructing base \\n \" ; } }; class derived : public base { public : derived () { cout << \"Constructing derived \\n \" ; } ~ derived () { cout << \"Destructing derived \\n \" ; } }; int main ( void ) { derived * d = new derived (); base * b = d ; delete b ; return 0 ; } #include <iostream> using namespace std ; class base { public : base () { cout << \"Constructing base \\n \" ; } ~ base () { cout << \"Destructing base \\n \" ; } }; class derived : public base { public : derived () { cout << \"Constructing derived \\n \" ; } ~ derived () { cout << \"Destructing derived \\n \" ; } }; int main ( void ) { derived * d = new derived (); base * b = d ; delete b ; return 0 ; } \u865a\u51fd\u6570\u53ef\u4ee5\u4e3a\u79c1\u6709\u51fd\u6570\u5417\uff1f \u00b6 \u57fa\u7c7b\u6307\u9488\u6307\u5411\u7ee7\u627f\u7c7b\u5bf9\u8c61\uff0c\u5219\u8c03\u7528\u7ee7\u627f\u7c7b\u5bf9\u8c61\u7684\u51fd\u6570\uff1b int main()\u5fc5\u987b\u58f0\u660e\u4e3aBase\u7c7b\u7684\u53cb\u5143\uff0c\u5426\u5219\u7f16\u8bd1\u5931\u8d25\u3002 \u7f16\u8bd1\u5668\u62a5\u9519\uff1a ptr\u65e0\u6cd5\u8bbf\u95ee\u79c1\u6709\u51fd\u6570\u3002 \u5f53\u7136\uff0c\u628a\u57fa\u7c7b\u58f0\u660e\u4e3apublic\uff0c \u7ee7\u627f\u7c7b\u4e3aprivate\uff0c\u8be5\u95ee\u9898\u5c31\u4e0d\u5b58\u5728\u4e86\u3002 #include <iostream> using namespace std ; class Derived ; class Base { private : virtual void fun () { cout << \"Base Fun\" ; } friend int main (); }; class Derived : public Base { public : void fun () { cout << \"Derived Fun\" ; } }; int main () { Base * ptr = new Derived ; ptr -> fun (); return 0 ; } #include <iostream> using namespace std ; class Derived ; class Base { public : virtual void fun () { cout << \"Base Fun\" ; } // friend int main(); }; class Derived : public Base { private : void fun () { cout << \"Derived Fun\" ; } }; int main () { Base * ptr = new Derived ; ptr -> fun (); return 0 ; } \u865a\u51fd\u6570\u53ef\u4ee5\u88ab\u5185\u8054\u5417\uff1f \u00b6 \u901a\u5e38\u7c7b\u6210\u5458\u51fd\u6570\u90fd\u4f1a\u88ab\u7f16\u8bd1\u5668\u8003\u8651\u662f\u5426\u8fdb\u884c\u5185\u8054\u3002 \u4f46\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u6216\u8005\u5f15\u7528\u8c03\u7528\u7684\u865a\u51fd\u6570\u5fc5\u5b9a\u4e0d\u80fd\u88ab\u5185\u8054\u3002 \u5f53\u7136\uff0c\u5b9e\u4f53\u5bf9\u8c61\u8c03\u7528\u865a\u51fd\u6570\u6216\u8005\u9759\u6001\u8c03\u7528\u65f6\u53ef\u4ee5\u88ab\u5185\u8054\uff0c\u865a\u6790\u6784\u51fd\u6570\u7684\u9759\u6001\u8c03\u7528\u4e5f\u4e00\u5b9a\u4f1a\u88ab\u5185\u8054\u5c55\u5f00\u3002 \u865a\u51fd\u6570\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff0c\u5185\u8054\u662f\u53ef\u4ee5\u4fee\u9970\u865a\u51fd\u6570\u7684\uff0c\u4f46\u662f\u5f53\u865a\u51fd\u6570\u8868\u73b0\u591a\u6001\u6027\u7684\u65f6\u5019\u4e0d\u80fd\u5185\u8054\u3002 \u5185\u8054\u662f\u5728\u5efa\u8bae\u7f16\u8bd1\u5668\u5185\u8054\uff0c\u800c\u865a\u51fd\u6570\u7684\u591a\u6001\u6027\u5728\u8fd0\u884c\u671f\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u77e5\u9053\u8fd0\u884c\u671f\u8c03\u7528\u54ea\u4e2a\u4ee3\u7801\uff0c\u56e0\u6b64\u865a\u51fd\u6570\u8868\u73b0\u4e3a\u591a\u6001\u6027\u65f6\uff08\u8fd0\u884c\u671f\uff09\u4e0d\u53ef\u4ee5\u5185\u8054\u3002 inline virtual \u552f\u4e00\u53ef\u4ee5\u5185\u8054\u7684\u65f6\u5019\u662f\uff1a\u7f16\u8bd1\u5668\u77e5\u9053\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\uff08\u5982 Base::who()\uff09\uff0c\u8fd9\u53ea\u6709\u5728\u7f16\u8bd1\u5668\u5177\u6709\u5b9e\u9645\u5bf9\u8c61\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u6307\u9488\u6216\u5f15\u7528\u65f6\u624d\u4f1a\u53d1\u751f\u3002 #include <iostream> using namespace std ; class Base { public : virtual void who () { cout << \"I am Base \\n \" ; } }; class Derived : public Base { public : void who () { cout << \"I am Derived \\n \" ; } }; int main () { // note here virtual function who() is called through // object of the class (it will be resolved at compile // time) so it can be inlined. Base b ; b . who (); // Here virtual function is called through pointer, // so it cannot be inlined Base * ptr = new Derived (); ptr -> who (); return 0 ; } #include <iostream> using namespace std ; class Base { public : inline virtual void who () { cout << \"I am Base \\n \" ; } virtual ~ Base () {} }; class Derived : public Base { public : inline void who () // \u4e0d\u5199inline\u65f6\u9690\u5f0f\u5185\u8054 { cout << \"I am Derived \\n \" ; } }; int main () { // \u6b64\u5904\u7684\u865a\u51fd\u6570 who()\uff0c\u662f\u901a\u8fc7\u7c7b\uff08Base\uff09\u7684\u5177\u4f53\u5bf9\u8c61\uff08b\uff09\u6765\u8c03\u7528\u7684\uff0c\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u786e\u5b9a\u4e86\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u662f\u5185\u8054\u7684\uff0c\u4f46\u6700\u7ec8\u662f\u5426\u5185\u8054\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u3002 Base b ; b . who (); // \u6b64\u5904\u7684\u865a\u51fd\u6570\u662f\u901a\u8fc7\u6307\u9488\u8c03\u7528\u7684\uff0c\u5448\u73b0\u591a\u6001\u6027\uff0c\u9700\u8981\u5728\u8fd0\u884c\u65f6\u671f\u95f4\u624d\u80fd\u786e\u5b9a\uff0c\u6240\u4ee5\u4e0d\u80fd\u4e3a\u5185\u8054\u3002 Base * ptr = new Derived (); ptr -> who (); // \u56e0\u4e3aBase\u6709\u865a\u6790\u6784\u51fd\u6570\uff08virtual ~Base() {}\uff09\uff0c\u6240\u4ee5 delete \u65f6\uff0c\u4f1a\u5148\u8c03\u7528\u6d3e\u751f\u7c7b\uff08Derived\uff09\u6790\u6784\u51fd\u6570\uff0c\u518d\u8c03\u7528\u57fa\u7c7b\uff08Base\uff09\u6790\u6784\u51fd\u6570\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\u3002 delete ptr ; return 0 ; } 5. RTTI\u4e0edynamic_cast \u00b6 RTTI\uff08Run-Time Type Identification)\uff0c\u901a\u8fc7\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f\u7a0b\u5e8f\u80fd\u591f\u4f7f\u7528\u57fa\u7c7b\u7684\u6307\u9488\u6216\u5f15\u7528\u6765\u68c0\u67e5\u8fd9\u4e9b\u6307\u9488\u6216\u5f15\u7528\u6240\u6307\u7684\u5bf9\u8c61\u7684\u5b9e\u9645\u6d3e\u751f\u7c7b\u578b\u3002 \u5728\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\uff0c\u6709\u65f6\u6211\u4eec\u9700\u8981\u5728\u8fd0\u884c\u65f6\u67e5\u8be2\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u80fd\u4f5c\u4e3a\u67d0\u79cd\u591a\u6001\u7c7b\u578b\u4f7f\u7528\u3002\u4e0eJava\u7684instanceof\uff0c\u4ee5\u53caC#\u7684as\u3001is\u8fd0\u7b97\u7b26\u7c7b\u4f3c\uff0cC++\u63d0\u4f9b\u4e86dynamic_cast\u51fd\u6570\u7528\u4e8e\u52a8\u6001\u8f6c\u578b\u3002\u76f8\u6bd4C\u98ce\u683c\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u548cC++ reinterpret_cast\uff0cdynamic_cast\u63d0\u4f9b\u4e86\u7c7b\u578b\u5b89\u5168\u68c0\u67e5\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u80fd\u529b\u67e5\u8be2(Capability Query)\u7684\u8f6c\u6362\uff0c\u6240\u4ee5\u5728\u591a\u6001\u7c7b\u578b\u95f4\u8fdb\u884c\u8f6c\u6362\u66f4\u63d0\u5021\u91c7\u7528dynamic_cast\u3002 #include <iostream> #include <typeinfo> using namespace std ; class B { virtual void fun () {} }; class D : public B { }; int main () { B * b = new D ; // \u5411\u4e0a\u8f6c\u578b B & obj = * b ; D * d = dynamic_cast < D *> ( b ); // \u5411\u4e0b\u8f6c\u578b if ( d != NULL ) cout << \"works\" << endl ; else cout << \"cannot cast B* to D*\" ; try { D & dobj = dynamic_cast < D &> ( obj ); cout << \"works\" << endl ; } catch ( bad_cast bc ) { // ERROR cout << bc . what () << endl ; } return 0 ; } // \u5728\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\uff1a\u88ab\u8f6c\u6362\u5bf9\u8c61obj\u7684\u7c7b\u578bT1\u5fc5\u987b\u662f\u591a\u6001\u7c7b\u578b\uff0c\u5373T1\u5fc5\u987b\u516c\u6709\u7ee7\u627f\u81ea\u5176\u5b83\u7c7b\uff0c\u6216\u8005T1\u62e5\u6709\u865a\u51fd\u6570\uff08\u7ee7\u627f\u6216\u81ea\u5b9a\u4e49\uff09\u3002\u82e5T1\u4e3a\u975e\u591a\u6001\u7c7b\u578b\uff0c\u4f7f\u7528dynamic_cast\u4f1a\u62a5\u7f16\u8bd1\u9519\u8bef\u3002 // A\u4e3a\u975e\u591a\u6001\u7c7b\u578b class A { }; //B\u4e3a\u591a\u6001\u7c7b\u578b class B { public : virtual ~ B (){} }; //D\u4e3a\u591a\u6001\u7c7b\u578b class D : public A { }; //E\u4e3a\u975e\u591a\u6001\u7c7b\u578b class E : private A { }; //F\u4e3a\u591a\u6001\u7c7b\u578b class F : private B { } 6. \u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b \u00b6 \u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b","title":"virtual"},{"location":"cpp/virtual/#1","text":"#include <iostream> using namespace std ; class Employee { public : virtual void raiseSalary () { cout << 0 << endl ; } virtual void promote () { /* common promote code */ } }; class Manager : public Employee { virtual void raiseSalary () { cout << 100 << endl ; } virtual void promote () { /* Manager specific promote */ } }; class Engineer : public Employee { virtual void raiseSalary () { cout << 200 << endl ; } virtual void promote () { /* Manager specific promote */ } }; // Similarly, there may be other types of employees // We need a very simple function to increment salary of all employees // Note that emp[] is an array of pointers and actual pointed objects can // be any type of employees. This function should ideally be in a class // like Organization, we have made it global to keep things simple void globalRaiseSalary ( Employee * emp [], int n ) { for ( int i = 0 ; i < n ; i ++ ) emp [ i ] -> raiseSalary (); // Polymorphic Call: Calls raiseSalary() // according to the actual object, not // according to the type of pointer } int main (){ Employee * emp [] = { new Manager (), new Engineer }; globalRaiseSalary ( emp , 2 ); return 0 ; } \u865a\u51fd\u6570\u7684\u8c03\u7528\u53d6\u51b3\u4e8e\u6307\u5411\u6216\u8005\u5f15\u7528\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u6307\u9488\u6216\u8005\u5f15\u7528\u81ea\u8eab\u7684\u7c7b\u578b\u3002","title":"1. \u865a\u51fd\u6570\u4e0e\u8fd0\u884c\u591a\u6001"},{"location":"cpp/virtual/#2-vptrvtable","text":"vptr_vtable","title":"2. vptr\u4e0evtable"},{"location":"cpp/virtual/#3","text":"#include <iostream> using namespace std ; class Base { public : virtual void fun ( int x = 10 ) { cout << \"Base::fun(), x = \" << x << endl ; } }; class Derived : public Base { public : virtual void fun ( int x = 20 ) { cout << \"Derived::fun(), x = \" << x << endl ; } }; int main () { Derived d1 ; Base * bp = & d1 ; bp -> fun (); return 0 ; } \u9ed8\u8ba4\u53c2\u6570\u662f\u9759\u6001\u7ed1\u5b9a\u7684\uff0c\u865a\u51fd\u6570\u662f\u52a8\u6001\u7ed1\u5b9a\u7684\u3002 \u9ed8\u8ba4\u53c2\u6570\u7684\u4f7f\u7528\u9700\u8981\u770b\u6307\u9488\u6216\u8005\u5f15\u7528\u672c\u8eab\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u7c7b\u578b\u3002","title":"3. \u865a\u51fd\u6570\u4e2d\u9ed8\u8ba4\u53c2\u6570"},{"location":"cpp/virtual/#4","text":"","title":"4. \u53ef\u4ee5\u4e0d\u53ef\u4ee5"},{"location":"cpp/virtual/#_1","text":"\u9759\u6001\u51fd\u6570\u4e0d\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u88abconst \u548c volatile\u5173\u952e\u5b57\u4fee\u9970 static\u6210\u5458\u51fd\u6570\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u5bf9\u8c61\u6216\u7c7b\u5b9e\u4f8b\uff0c\u6240\u4ee5\u5373\u4f7f\u7ed9\u6b64\u51fd\u6570\u52a0\u4e0avirutal\u4e5f\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49 \u865a\u51fd\u6570\u4f9d\u9760vptr\u548cvtable\u6765\u5904\u7406\u3002vptr\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u521b\u5efa\u751f\u6210\uff0c\u5e76\u4e14\u53ea\u80fd\u7528this\u6307\u9488\u6765\u8bbf\u95ee\u5b83\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709this\u6307\u9488\uff0c\u6240\u4ee5\u65e0\u6cd5\u8bbf\u95eevptr\u3002","title":"\u9759\u6001\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u5417\uff1f"},{"location":"cpp/virtual/#_2","text":"\u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002\u540c\u65f6\u9664\u4e86inline|explicit\u4e4b\u5916\uff0c\u6784\u9020\u51fd\u6570\u4e0d\u5141\u8bb8\u4f7f\u7528\u5176\u5b83\u4efb\u4f55\u5173\u952e\u5b57\u3002 \u4e3a\u4ec0\u4e48\u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\uff1f \u5c3d\u7ba1**\u865a\u51fd\u6570\u8868vtable\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u5df2\u7ecf\u5efa\u7acb\u7684\uff0c\u4f46\u6307\u5411\u865a\u51fd\u6570\u8868\u7684\u6307\u9488vptr\u662f\u5728\u8fd0\u884c\u9636\u6bb5\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u624d\u4ea7\u751f\u7684**\u3002 \u5982\u679c\u7c7b\u542b\u6709\u865a\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u5728\u6784\u9020\u51fd\u6570\u4e2d\u6dfb\u52a0\u4ee3\u7801\u6765\u521b\u5efavptr\u3002 \u95ee\u9898\u6765\u4e86\uff0c\u5982\u679c\u6784\u9020\u51fd\u6570\u662f\u865a\u7684\uff0c\u90a3\u4e48\u5b83\u9700\u8981vptr\u6765\u8bbf\u95eevtable\uff0c\u53ef\u8fd9\u4e2a\u65f6\u5019vptr\u8fd8\u6ca1\u4ea7\u751f\u3002 \u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u3002 \u6211\u4eec\u4e4b\u6240\u4ee5\u4f7f\u7528\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u9700\u8981\u5728\u4fe1\u606f\u4e0d\u5168\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u591a\u6001\u8fd0\u884c\u3002\u800c\u6784\u9020\u51fd\u6570\u662f\u7528\u6765\u521d\u59cb\u5316\u5b9e\u4f8b\u7684\uff0c\u5b9e\u4f8b\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u660e\u786e\u7684\u3002 \u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u5fc5\u8981\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 #include <iostream> using namespace std ; class Base { public : }; class Derived : public Base { public : Derived () { cout << \"Derived created\" << endl ; } Derived ( const Derived & rhs ) { cout << \"Derived created by deep copy\" << endl ; } ~ Derived () { cout << \"Derived destroyed\" << endl ; } }; int main () { Derived s1 ; Derived s2 = s1 ; // Compiler invokes \"copy constructor\" // Type of s1 and s2 are concrete to compiler // How can we create Derived1 or Derived2 object // from pointer (reference) to Base class pointing Derived object? return 0 ; } #include <iostream> using namespace std ; //// LIBRARY SRART class Base { public : Base () { } virtual // Ensures to invoke actual object destructor ~ Base () { } virtual void ChangeAttributes () = 0 ; // The \"Virtual Constructor\" static Base * Create ( int id ); // The \"Virtual Copy Constructor\" virtual Base * Clone () = 0 ; }; class Derived1 : public Base { public : Derived1 () { cout << \"Derived1 created\" << endl ; } Derived1 ( const Derived1 & rhs ) { cout << \"Derived1 created by deep copy\" << endl ; } ~ Derived1 () { cout << \"~Derived1 destroyed\" << endl ; } void ChangeAttributes () { cout << \"Derived1 Attributes Changed\" << endl ; } Base * Clone () { return new Derived1 ( * this ); } }; class Derived2 : public Base { public : Derived2 () { cout << \"Derived2 created\" << endl ; } Derived2 ( const Derived2 & rhs ) { cout << \"Derived2 created by deep copy\" << endl ; } ~ Derived2 () { cout << \"~Derived2 destroyed\" << endl ; } void ChangeAttributes () { cout << \"Derived2 Attributes Changed\" << endl ; } Base * Clone () { return new Derived2 ( * this ); } }; class Derived3 : public Base { public : Derived3 () { cout << \"Derived3 created\" << endl ; } Derived3 ( const Derived3 & rhs ) { cout << \"Derived3 created by deep copy\" << endl ; } ~ Derived3 () { cout << \"~Derived3 destroyed\" << endl ; } void ChangeAttributes () { cout << \"Derived3 Attributes Changed\" << endl ; } Base * Clone () { return new Derived3 ( * this ); } }; // We can also declare \"Create\" outside Base. // But is more relevant to limit it's scope to Base Base * Base :: Create ( int id ) { // Just expand the if-else ladder, if new Derived class is created // User need not be recompiled to create newly added class objects if ( id == 1 ) { return new Derived1 ; } else if ( id == 2 ) { return new Derived2 ; } else { return new Derived3 ; } } //// LIBRARY END //// UTILITY SRART class User { public : User () : pBase ( 0 ) { // Creates any object of Base heirarchey at runtime int input ; cout << \"Enter ID (1, 2 or 3): \" ; cin >> input ; while ( ( input != 1 ) && ( input != 2 ) && ( input != 3 ) ) { cout << \"Enter ID (1, 2 or 3 only): \" ; cin >> input ; } // Create objects via the \"Virtual Constructor\" pBase = Base :: Create ( input ); } ~ User () { if ( pBase ) { delete pBase ; pBase = 0 ; } } void Action () { // Duplicate current object Base * pNewBase = pBase -> Clone (); // Change its attributes pNewBase -> ChangeAttributes (); // Dispose the created object delete pNewBase ; } private : Base * pBase ; }; //// UTILITY END //// Consumer of User (UTILITY) class int main () { User * user = new User (); user -> Action (); delete user ; }","title":"\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u5417\uff1f"},{"location":"cpp/virtual/#_3","text":"\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u5982\u679c\u6211\u4eec\u9700\u8981\u5220\u9664\u4e00\u4e2a\u6307\u5411\u6d3e\u751f\u7c7b\u7684\u57fa\u7c7b\u6307\u9488\u65f6\uff0c\u5e94\u8be5\u628a\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u53ea\u8981\u4e00\u4e2a\u7c7b\u6709\u53ef\u80fd\u4f1a\u88ab\u5176\u5b83\u7c7b\u6240\u7ee7\u627f\uff0c \u5c31\u5e94\u8be5\u58f0\u660e\u865a\u6790\u6784\u51fd\u6570(\u54ea\u6015\u8be5\u6790\u6784\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c)\u3002 #include <iostream> using namespace std ; class base { public : base () { cout << \"Constructing base \\n \" ; } virtual ~ base () { cout << \"Destructing base \\n \" ; } }; class derived : public base { public : derived () { cout << \"Constructing derived \\n \" ; } ~ derived () { cout << \"Destructing derived \\n \" ; } }; int main ( void ) { derived * d = new derived (); base * b = d ; delete b ; return 0 ; } #include <iostream> using namespace std ; class base { public : base () { cout << \"Constructing base \\n \" ; } ~ base () { cout << \"Destructing base \\n \" ; } }; class derived : public base { public : derived () { cout << \"Constructing derived \\n \" ; } ~ derived () { cout << \"Destructing derived \\n \" ; } }; int main ( void ) { derived * d = new derived (); base * b = d ; delete b ; return 0 ; }","title":"\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u5417\uff1f"},{"location":"cpp/virtual/#_4","text":"\u57fa\u7c7b\u6307\u9488\u6307\u5411\u7ee7\u627f\u7c7b\u5bf9\u8c61\uff0c\u5219\u8c03\u7528\u7ee7\u627f\u7c7b\u5bf9\u8c61\u7684\u51fd\u6570\uff1b int main()\u5fc5\u987b\u58f0\u660e\u4e3aBase\u7c7b\u7684\u53cb\u5143\uff0c\u5426\u5219\u7f16\u8bd1\u5931\u8d25\u3002 \u7f16\u8bd1\u5668\u62a5\u9519\uff1a ptr\u65e0\u6cd5\u8bbf\u95ee\u79c1\u6709\u51fd\u6570\u3002 \u5f53\u7136\uff0c\u628a\u57fa\u7c7b\u58f0\u660e\u4e3apublic\uff0c \u7ee7\u627f\u7c7b\u4e3aprivate\uff0c\u8be5\u95ee\u9898\u5c31\u4e0d\u5b58\u5728\u4e86\u3002 #include <iostream> using namespace std ; class Derived ; class Base { private : virtual void fun () { cout << \"Base Fun\" ; } friend int main (); }; class Derived : public Base { public : void fun () { cout << \"Derived Fun\" ; } }; int main () { Base * ptr = new Derived ; ptr -> fun (); return 0 ; } #include <iostream> using namespace std ; class Derived ; class Base { public : virtual void fun () { cout << \"Base Fun\" ; } // friend int main(); }; class Derived : public Base { private : void fun () { cout << \"Derived Fun\" ; } }; int main () { Base * ptr = new Derived ; ptr -> fun (); return 0 ; }","title":"\u865a\u51fd\u6570\u53ef\u4ee5\u4e3a\u79c1\u6709\u51fd\u6570\u5417\uff1f"},{"location":"cpp/virtual/#_5","text":"\u901a\u5e38\u7c7b\u6210\u5458\u51fd\u6570\u90fd\u4f1a\u88ab\u7f16\u8bd1\u5668\u8003\u8651\u662f\u5426\u8fdb\u884c\u5185\u8054\u3002 \u4f46\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u6216\u8005\u5f15\u7528\u8c03\u7528\u7684\u865a\u51fd\u6570\u5fc5\u5b9a\u4e0d\u80fd\u88ab\u5185\u8054\u3002 \u5f53\u7136\uff0c\u5b9e\u4f53\u5bf9\u8c61\u8c03\u7528\u865a\u51fd\u6570\u6216\u8005\u9759\u6001\u8c03\u7528\u65f6\u53ef\u4ee5\u88ab\u5185\u8054\uff0c\u865a\u6790\u6784\u51fd\u6570\u7684\u9759\u6001\u8c03\u7528\u4e5f\u4e00\u5b9a\u4f1a\u88ab\u5185\u8054\u5c55\u5f00\u3002 \u865a\u51fd\u6570\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff0c\u5185\u8054\u662f\u53ef\u4ee5\u4fee\u9970\u865a\u51fd\u6570\u7684\uff0c\u4f46\u662f\u5f53\u865a\u51fd\u6570\u8868\u73b0\u591a\u6001\u6027\u7684\u65f6\u5019\u4e0d\u80fd\u5185\u8054\u3002 \u5185\u8054\u662f\u5728\u5efa\u8bae\u7f16\u8bd1\u5668\u5185\u8054\uff0c\u800c\u865a\u51fd\u6570\u7684\u591a\u6001\u6027\u5728\u8fd0\u884c\u671f\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u77e5\u9053\u8fd0\u884c\u671f\u8c03\u7528\u54ea\u4e2a\u4ee3\u7801\uff0c\u56e0\u6b64\u865a\u51fd\u6570\u8868\u73b0\u4e3a\u591a\u6001\u6027\u65f6\uff08\u8fd0\u884c\u671f\uff09\u4e0d\u53ef\u4ee5\u5185\u8054\u3002 inline virtual \u552f\u4e00\u53ef\u4ee5\u5185\u8054\u7684\u65f6\u5019\u662f\uff1a\u7f16\u8bd1\u5668\u77e5\u9053\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\uff08\u5982 Base::who()\uff09\uff0c\u8fd9\u53ea\u6709\u5728\u7f16\u8bd1\u5668\u5177\u6709\u5b9e\u9645\u5bf9\u8c61\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u6307\u9488\u6216\u5f15\u7528\u65f6\u624d\u4f1a\u53d1\u751f\u3002 #include <iostream> using namespace std ; class Base { public : virtual void who () { cout << \"I am Base \\n \" ; } }; class Derived : public Base { public : void who () { cout << \"I am Derived \\n \" ; } }; int main () { // note here virtual function who() is called through // object of the class (it will be resolved at compile // time) so it can be inlined. Base b ; b . who (); // Here virtual function is called through pointer, // so it cannot be inlined Base * ptr = new Derived (); ptr -> who (); return 0 ; } #include <iostream> using namespace std ; class Base { public : inline virtual void who () { cout << \"I am Base \\n \" ; } virtual ~ Base () {} }; class Derived : public Base { public : inline void who () // \u4e0d\u5199inline\u65f6\u9690\u5f0f\u5185\u8054 { cout << \"I am Derived \\n \" ; } }; int main () { // \u6b64\u5904\u7684\u865a\u51fd\u6570 who()\uff0c\u662f\u901a\u8fc7\u7c7b\uff08Base\uff09\u7684\u5177\u4f53\u5bf9\u8c61\uff08b\uff09\u6765\u8c03\u7528\u7684\uff0c\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u786e\u5b9a\u4e86\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u662f\u5185\u8054\u7684\uff0c\u4f46\u6700\u7ec8\u662f\u5426\u5185\u8054\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u3002 Base b ; b . who (); // \u6b64\u5904\u7684\u865a\u51fd\u6570\u662f\u901a\u8fc7\u6307\u9488\u8c03\u7528\u7684\uff0c\u5448\u73b0\u591a\u6001\u6027\uff0c\u9700\u8981\u5728\u8fd0\u884c\u65f6\u671f\u95f4\u624d\u80fd\u786e\u5b9a\uff0c\u6240\u4ee5\u4e0d\u80fd\u4e3a\u5185\u8054\u3002 Base * ptr = new Derived (); ptr -> who (); // \u56e0\u4e3aBase\u6709\u865a\u6790\u6784\u51fd\u6570\uff08virtual ~Base() {}\uff09\uff0c\u6240\u4ee5 delete \u65f6\uff0c\u4f1a\u5148\u8c03\u7528\u6d3e\u751f\u7c7b\uff08Derived\uff09\u6790\u6784\u51fd\u6570\uff0c\u518d\u8c03\u7528\u57fa\u7c7b\uff08Base\uff09\u6790\u6784\u51fd\u6570\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\u3002 delete ptr ; return 0 ; }","title":"\u865a\u51fd\u6570\u53ef\u4ee5\u88ab\u5185\u8054\u5417\uff1f"},{"location":"cpp/virtual/#5-rttidynamic_cast","text":"RTTI\uff08Run-Time Type Identification)\uff0c\u901a\u8fc7\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f\u7a0b\u5e8f\u80fd\u591f\u4f7f\u7528\u57fa\u7c7b\u7684\u6307\u9488\u6216\u5f15\u7528\u6765\u68c0\u67e5\u8fd9\u4e9b\u6307\u9488\u6216\u5f15\u7528\u6240\u6307\u7684\u5bf9\u8c61\u7684\u5b9e\u9645\u6d3e\u751f\u7c7b\u578b\u3002 \u5728\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\uff0c\u6709\u65f6\u6211\u4eec\u9700\u8981\u5728\u8fd0\u884c\u65f6\u67e5\u8be2\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u80fd\u4f5c\u4e3a\u67d0\u79cd\u591a\u6001\u7c7b\u578b\u4f7f\u7528\u3002\u4e0eJava\u7684instanceof\uff0c\u4ee5\u53caC#\u7684as\u3001is\u8fd0\u7b97\u7b26\u7c7b\u4f3c\uff0cC++\u63d0\u4f9b\u4e86dynamic_cast\u51fd\u6570\u7528\u4e8e\u52a8\u6001\u8f6c\u578b\u3002\u76f8\u6bd4C\u98ce\u683c\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u548cC++ reinterpret_cast\uff0cdynamic_cast\u63d0\u4f9b\u4e86\u7c7b\u578b\u5b89\u5168\u68c0\u67e5\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u80fd\u529b\u67e5\u8be2(Capability Query)\u7684\u8f6c\u6362\uff0c\u6240\u4ee5\u5728\u591a\u6001\u7c7b\u578b\u95f4\u8fdb\u884c\u8f6c\u6362\u66f4\u63d0\u5021\u91c7\u7528dynamic_cast\u3002 #include <iostream> #include <typeinfo> using namespace std ; class B { virtual void fun () {} }; class D : public B { }; int main () { B * b = new D ; // \u5411\u4e0a\u8f6c\u578b B & obj = * b ; D * d = dynamic_cast < D *> ( b ); // \u5411\u4e0b\u8f6c\u578b if ( d != NULL ) cout << \"works\" << endl ; else cout << \"cannot cast B* to D*\" ; try { D & dobj = dynamic_cast < D &> ( obj ); cout << \"works\" << endl ; } catch ( bad_cast bc ) { // ERROR cout << bc . what () << endl ; } return 0 ; } // \u5728\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\uff1a\u88ab\u8f6c\u6362\u5bf9\u8c61obj\u7684\u7c7b\u578bT1\u5fc5\u987b\u662f\u591a\u6001\u7c7b\u578b\uff0c\u5373T1\u5fc5\u987b\u516c\u6709\u7ee7\u627f\u81ea\u5176\u5b83\u7c7b\uff0c\u6216\u8005T1\u62e5\u6709\u865a\u51fd\u6570\uff08\u7ee7\u627f\u6216\u81ea\u5b9a\u4e49\uff09\u3002\u82e5T1\u4e3a\u975e\u591a\u6001\u7c7b\u578b\uff0c\u4f7f\u7528dynamic_cast\u4f1a\u62a5\u7f16\u8bd1\u9519\u8bef\u3002 // A\u4e3a\u975e\u591a\u6001\u7c7b\u578b class A { }; //B\u4e3a\u591a\u6001\u7c7b\u578b class B { public : virtual ~ B (){} }; //D\u4e3a\u591a\u6001\u7c7b\u578b class D : public A { }; //E\u4e3a\u975e\u591a\u6001\u7c7b\u578b class E : private A { }; //F\u4e3a\u591a\u6001\u7c7b\u578b class F : private B { }","title":"5. RTTI\u4e0edynamic_cast"},{"location":"cpp/virtual/#6","text":"\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b","title":"6. \u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b"},{"location":"cpp/volatile/","text":"1. volatile \u00b6 \u88ab volatile \u4fee\u9970\u7684\u53d8\u91cf\uff0c\u5728\u5bf9\u5176\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0c\u4f1a\u5f15\u53d1\u4e00\u4e9b\u53ef\u89c2\u6d4b\u7684\u526f\u4f5c\u7528\u3002\u800c\u8fd9\u4e9b\u53ef\u89c2\u6d4b\u7684\u526f\u4f5c\u7528\uff0c\u662f\u7531\u7a0b\u5e8f\u4e4b\u5916\u7684\u56e0\u7d20\u51b3\u5b9a\u7684\u3002 2. volatile\u5e94\u7528 \u00b6 (1)\u5e76\u884c\u8bbe\u5907\u7684\u786c\u4ef6\u5bc4\u5b58\u5668\uff08\u5982\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u3002 \u00b6 \u5047\u8bbe\u8981\u5bf9\u4e00\u4e2a\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6b64\u8bbe\u5907\u7684\u67d0\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e3a0xff800000\u3002 int * output = ( unsigned int * ) 0xff800000 ; //\u5b9a\u4e49\u4e00\u4e2aIO\u7aef\u53e3\uff1b int init ( void ) { int i ; for ( i = 0 ; i < 10 ; i ++ ) { * output = i ; } } \u7ecf\u8fc7\u7f16\u8bd1\u5668\u4f18\u5316\u540e\uff0c\u7f16\u8bd1\u5668\u8ba4\u4e3a\u524d\u9762\u5faa\u73af\u534a\u5929\u90fd\u662f\u5e9f\u8bdd\uff0c\u5bf9\u6700\u540e\u7684\u7ed3\u679c\u6beb\u65e0\u5f71\u54cd\uff0c\u56e0\u4e3a\u6700\u7ec8\u53ea\u662f\u5c06output\u8fd9\u4e2a\u6307\u9488\u8d4b\u503c\u4e3a 9\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u6700\u540e\u7ed9\u4f60\u7f16\u8bd1\u7f16\u8bd1\u7684\u4ee3\u7801\u7ed3\u679c\u76f8\u5f53\u4e8e\uff1a int init ( void ) { * output = 9 ; } \u5982\u679c\u4f60\u5bf9\u6b64\u5916\u90e8\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u662f\u5fc5\u987b\u662f\u50cf\u4e0a\u9762\u4ee3\u7801\u4e00\u6837\u987a\u5e8f\u7684\u5bf9\u5176\u8d4b\u503c\uff0c\u663e\u7136\u4f18\u5316\u8fc7\u7a0b\u5e76\u4e0d\u80fd\u8fbe\u5230\u76ee\u7684\u3002\u53cd\u4e4b\u5982\u679c\u4f60\u4e0d\u662f\u5bf9\u6b64\u7aef\u53e3\u53cd\u590d\u5199\u64cd\u4f5c\uff0c\u800c\u662f\u53cd\u590d\u8bfb\u64cd\u4f5c\uff0c\u5176\u7ed3\u679c\u662f\u4e00\u6837\u7684\uff0c\u7f16\u8bd1\u5668\u5728\u4f18\u5316\u540e\uff0c\u4e5f\u8bb8\u4f60\u7684\u4ee3\u7801\u5bf9\u6b64\u5730\u5740\u7684\u8bfb\u64cd\u4f5c\u53ea\u505a\u4e86\u4e00\u6b21\u3002\u7136\u800c\u4ece\u4ee3\u7801\u89d2\u5ea6\u770b\u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\u3002\u8fd9\u65f6\u5019\u5c31\u8be5\u4f7f\u7528volatile\u901a\u77e5\u7f16\u8bd1\u5668\u8fd9\u4e2a\u53d8\u91cf\u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\uff0c\u5728\u9047\u5230\u6b64\u53d8\u91cf\u65f6\u5019\u4e0d\u8981\u4f18\u5316\u3002 (2)\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8f\u4e2d\u8bbf\u95ee\u5230\u7684\u53d8\u91cf \u00b6 static int i = 0 ; int main () { while ( 1 ) { if ( i ) dosomething (); } } /* Interrupt service routine */ void IRS () { i = 1 ; } \u4e0a\u9762\u793a\u4f8b\u7a0b\u5e8f\u7684\u672c\u610f\u662f\u4ea7\u751f\u4e2d\u65ad\u65f6\uff0c\u7531\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8fIRS\u54cd\u5e94\u4e2d\u65ad\uff0c\u53d8\u66f4\u7a0b\u5e8f\u53d8\u91cfi\uff0c\u4f7f\u5728main\u51fd\u6570\u4e2d\u8c03\u7528dosomething\u51fd\u6570\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u7f16\u8bd1\u5668\u5224\u65ad\u5728main\u51fd\u6570\u91cc\u9762\u6ca1\u6709\u4fee\u6539\u8fc7i\uff0c\u56e0\u6b64\u53ef\u80fd\u53ea\u6267\u884c\u4e00\u6b21\u5bf9\u4ecei\u5230\u67d0\u5bc4\u5b58\u5668\u7684\u8bfb\u64cd\u4f5c\uff0c\u7136\u540e\u6bcf\u6b21if\u5224\u65ad\u90fd\u53ea\u4f7f\u7528\u8fd9\u4e2a\u5bc4\u5b58\u5668\u91cc\u9762\u7684\u201ci\u526f\u672c\u201d\uff0c\u5bfc\u81f4dosomething\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8c03\u7528\u3002\u5982\u679c\u5c06\u53d8\u91cfi\u52a0\u4e0avolatile\u4fee\u9970\uff0c\u5219\u7f16\u8bd1\u5668\u4fdd\u8bc1\u5bf9\u53d8\u91cfi\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u88ab\u4f18\u5316\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u53d8\u91cfi\u88ab\u5916\u90e8\u7a0b\u5e8f\u66f4\u6539\u540e\u80fd\u53ca\u65f6\u5728\u539f\u7a0b\u5e8f\u4e2d\u5f97\u5230\u611f\u77e5\u3002 (3)\u591a\u7ebf\u7a0b\u5e94\u7528\u4e2d\u88ab\u591a\u4e2a\u4efb\u52a1\u5171\u4eab\u7684\u53d8\u91cf\u3002 \u00b6 \u5f53\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u67d0\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u8be5\u53d8\u91cf\u7684\u503c\u4f1a\u88ab\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\uff0c\u5e94\u8be5\u7528 volatile \u58f0\u660e\u3002\u4f5c\u7528\u662f\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u628a\u53d8\u91cf\u4ece\u5185\u5b58\u88c5\u5165CPU\u5bc4\u5b58\u5668\u4e2d\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\u53d8\u91cf\u540e\uff0c\u672a\u53ca\u65f6\u540c\u6b65\u5230\u5176\u5b83\u7ebf\u7a0b\u4e2d\u5bfc\u81f4\u7a0b\u5e8f\u51fa\u9519\u3002 volatile\u7684\u610f\u601d\u662f\u8ba9\u7f16\u8bd1\u5668\u6bcf\u6b21\u64cd\u4f5c\u8be5\u53d8\u91cf\u65f6\u4e00\u5b9a\u8981\u4ece\u5185\u5b58\u4e2d\u771f\u6b63\u53d6\u51fa\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5df2\u7ecf\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u3002\u793a\u4f8b\u5982\u4e0b\uff1a volatile bool bStop = false ; //bStop \u4e3a\u5171\u4eab\u5168\u5c40\u53d8\u91cf //\u7b2c\u4e00\u4e2a\u7ebf\u7a0b void threadFunc1 () { ... while ( ! bStop ){...} } //\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u7ec8\u6b62\u4e0a\u9762\u7684\u7ebf\u7a0b\u5faa\u73af void threadFunc2 () { ... bStop = true ; } \u8981\u60f3\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u7ec8\u6b62\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u5faa\u73af\uff0c\u5982\u679cbStop\u4e0d\u4f7f\u7528volatile\u5b9a\u4e49\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5faa\u73af\u5c06\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u56e0\u4e3abStop\u5df2\u7ecf\u8bfb\u53d6\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5bc4\u5b58\u5668\u4e2dbStop\u7684\u503c\u6c38\u8fdc\u4e0d\u4f1a\u53d8\u6210FALSE\uff0c\u52a0\u4e0avolatile\uff0c\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\uff0c\u6bcf\u6b21\u5747\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fabStop\u7684\u503c\uff0c\u5c31\u4e0d\u4f1a\u6b7b\u5faa\u73af\u4e86\u3002 \u662f\u5426\u4e86\u89e3volatile\u7684\u5e94\u7528\u573a\u666f\u662f\u533a\u5206C/C++\u7a0b\u5e8f\u5458\u548c\u5d4c\u5165\u5f0f\u5f00\u53d1\u7a0b\u5e8f\u5458\u7684\u6709\u6548\u529e\u6cd5\uff0c\u641e\u5d4c\u5165\u5f0f\u7684\u5bb6\u4f19\u4eec\u7ecf\u5e38\u540c\u786c\u4ef6\u3001\u4e2d\u65ad\u3001RTOS\u7b49\u7b49\u6253\u4ea4\u9053\uff0c\u8fd9\u4e9b\u90fd\u8981\u6c42\u7528\u5230volatile\u53d8\u91cf\uff0c\u4e0d\u61c2\u5f97volatile\u5c06\u4f1a\u5e26\u6765\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u707e\u96be\u3002 3. volatile\u5e38\u89c1\u95ee\u9898 \u00b6 \u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u770b\u4e00\u4e0b\u9762\u8bd5\u8005\u662f\u4e0d\u662f\u76f4\u6b63\u4e86\u89e3volatile\u3002 \uff081\uff09\u4e00\u4e2a\u53c2\u6570\u65e2\u53ef\u4ee5\u662fconst\u8fd8\u53ef\u4ee5\u662fvolatile\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f \u53ef\u4ee5\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u53ea\u8bfb\u7684\u72b6\u6001\u5bc4\u5b58\u5668\u3002\u5b83\u662fvolatile\u56e0\u4e3a\u5b83\u53ef\u80fd\u88ab\u610f\u60f3\u4e0d\u5230\u5730\u6539\u53d8\u3002\u5b83\u662fconst\u56e0\u4e3a\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u8bd5\u56fe\u53bb\u4fee\u6539\u5b83\u3002 \uff082\uff09\u4e00\u4e2a\u6307\u9488\u53ef\u4ee5\u662fvolatile\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f \u53ef\u4ee5\u3002\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u5e38\u89c1\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8f\u4fee\u8be5\u4e00\u4e2a\u6307\u5411\u4e00\u4e2abuffer\u7684\u6307\u9488\u65f6\u3002 \uff083\uff09\u4e0b\u9762\u7684\u51fd\u6570\u6709\u4ec0\u4e48\u9519\u8bef\uff1f int square ( volatile int * ptr ) { return * ptr * * ptr ; } \u8fd9\u6bb5\u4ee3\u7801\u6709\u70b9\u53d8\u6001\uff0c\u5176\u76ee\u7684\u662f\u7528\u6765\u8fd4\u56de\u6307\u9488ptr\u6307\u5411\u503c\u7684\u5e73\u65b9\uff0c\u4f46\u662f\uff0c\u7531\u4e8eptr\u6307\u5411\u4e00\u4e2avolatile\u578b\u53c2\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4ea7\u751f\u7c7b\u4f3c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a int square ( volatile int * ptr ) { int a , b ; a = * ptr ; b = * ptr ; return a * b ; } \u7531\u4e8e*ptr\u7684\u503c\u53ef\u80fd\u88ab\u610f\u60f3\u4e0d\u5230\u5730\u6539\u53d8\uff0c\u56e0\u6b64a\u548cb\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u3002\u7ed3\u679c\uff0c\u8fd9\u6bb5\u4ee3\u7801\u53ef\u80fd\u8fd4\u56de\u7684\u4e0d\u662f\u4f60\u6240\u671f\u671b\u7684\u5e73\u65b9\u503c\uff01\u6b63\u786e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a long square ( volatile int * ptr ) { int a =* ptr ; return a * a ; } 4. volatile\u4f7f\u7528 \u00b6 volatile \u5173\u952e\u5b57\u662f\u4e00\u79cd\u7c7b\u578b\u4fee\u9970\u7b26\uff0c\u7528\u5b83\u58f0\u660e\u7684\u7c7b\u578b\u53d8\u91cf\u8868\u793a\u53ef\u4ee5\u88ab\u67d0\u4e9b\u7f16\u8bd1\u5668\u672a\u77e5\u7684\u56e0\u7d20\uff08\u64cd\u4f5c\u7cfb\u7edf\u3001\u786c\u4ef6\u3001\u5176\u5b83\u7ebf\u7a0b\u7b49\uff09\u66f4\u6539\u3002\u6240\u4ee5\u4f7f\u7528 volatile \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u5e94\u5bf9\u8fd9\u6837\u7684\u5bf9\u8c61\u8fdb\u884c\u4f18\u5316\u3002 volatile \u5173\u952e\u5b57\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u6bcf\u6b21\u8bbf\u95ee\u65f6\u90fd\u5fc5\u987b\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u503c\uff08\u6ca1\u6709\u88ab volatile \u4fee\u9970\u7684\u53d8\u91cf\uff0c\u53ef\u80fd\u7531\u4e8e\u7f16\u8bd1\u5668\u7684\u4f18\u5316\uff0c\u4ece CPU \u5bc4\u5b58\u5668\u4e2d\u53d6\u503c\uff09 const \u53ef\u4ee5\u662f volatile \uff08\u5982\u53ea\u8bfb\u7684\u72b6\u6001\u5bc4\u5b58\u5668\uff09 \u6307\u9488\u53ef\u4ee5\u662f volatile \u4ee3\u7801\u5b66\u4e60: /* Compile code without optimization option */ #include <stdio.h> int main ( void ) { const int local = 10 ; int * ptr = ( int * ) & local ; printf ( \"Initial value of local : %d \\n \" , local ); * ptr = 100 ; printf ( \"Modified value of local: %d \\n \" , local ); return 0 ; } /* Compile code with optimization option */ #include <stdio.h> int main ( void ) { const volatile int local = 10 ; int * ptr = ( int * ) & local ; printf ( \"Initial value of local : %d \\n \" , local ); * ptr = 100 ; printf ( \"Modified value of local: %d \\n \" , local ); return 0 ; }","title":"volatile"},{"location":"cpp/volatile/#1-volatile","text":"\u88ab volatile \u4fee\u9970\u7684\u53d8\u91cf\uff0c\u5728\u5bf9\u5176\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0c\u4f1a\u5f15\u53d1\u4e00\u4e9b\u53ef\u89c2\u6d4b\u7684\u526f\u4f5c\u7528\u3002\u800c\u8fd9\u4e9b\u53ef\u89c2\u6d4b\u7684\u526f\u4f5c\u7528\uff0c\u662f\u7531\u7a0b\u5e8f\u4e4b\u5916\u7684\u56e0\u7d20\u51b3\u5b9a\u7684\u3002","title":"1. volatile"},{"location":"cpp/volatile/#2-volatile","text":"","title":"2. volatile\u5e94\u7528"},{"location":"cpp/volatile/#1","text":"\u5047\u8bbe\u8981\u5bf9\u4e00\u4e2a\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6b64\u8bbe\u5907\u7684\u67d0\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e3a0xff800000\u3002 int * output = ( unsigned int * ) 0xff800000 ; //\u5b9a\u4e49\u4e00\u4e2aIO\u7aef\u53e3\uff1b int init ( void ) { int i ; for ( i = 0 ; i < 10 ; i ++ ) { * output = i ; } } \u7ecf\u8fc7\u7f16\u8bd1\u5668\u4f18\u5316\u540e\uff0c\u7f16\u8bd1\u5668\u8ba4\u4e3a\u524d\u9762\u5faa\u73af\u534a\u5929\u90fd\u662f\u5e9f\u8bdd\uff0c\u5bf9\u6700\u540e\u7684\u7ed3\u679c\u6beb\u65e0\u5f71\u54cd\uff0c\u56e0\u4e3a\u6700\u7ec8\u53ea\u662f\u5c06output\u8fd9\u4e2a\u6307\u9488\u8d4b\u503c\u4e3a 9\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u6700\u540e\u7ed9\u4f60\u7f16\u8bd1\u7f16\u8bd1\u7684\u4ee3\u7801\u7ed3\u679c\u76f8\u5f53\u4e8e\uff1a int init ( void ) { * output = 9 ; } \u5982\u679c\u4f60\u5bf9\u6b64\u5916\u90e8\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u662f\u5fc5\u987b\u662f\u50cf\u4e0a\u9762\u4ee3\u7801\u4e00\u6837\u987a\u5e8f\u7684\u5bf9\u5176\u8d4b\u503c\uff0c\u663e\u7136\u4f18\u5316\u8fc7\u7a0b\u5e76\u4e0d\u80fd\u8fbe\u5230\u76ee\u7684\u3002\u53cd\u4e4b\u5982\u679c\u4f60\u4e0d\u662f\u5bf9\u6b64\u7aef\u53e3\u53cd\u590d\u5199\u64cd\u4f5c\uff0c\u800c\u662f\u53cd\u590d\u8bfb\u64cd\u4f5c\uff0c\u5176\u7ed3\u679c\u662f\u4e00\u6837\u7684\uff0c\u7f16\u8bd1\u5668\u5728\u4f18\u5316\u540e\uff0c\u4e5f\u8bb8\u4f60\u7684\u4ee3\u7801\u5bf9\u6b64\u5730\u5740\u7684\u8bfb\u64cd\u4f5c\u53ea\u505a\u4e86\u4e00\u6b21\u3002\u7136\u800c\u4ece\u4ee3\u7801\u89d2\u5ea6\u770b\u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\u3002\u8fd9\u65f6\u5019\u5c31\u8be5\u4f7f\u7528volatile\u901a\u77e5\u7f16\u8bd1\u5668\u8fd9\u4e2a\u53d8\u91cf\u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\uff0c\u5728\u9047\u5230\u6b64\u53d8\u91cf\u65f6\u5019\u4e0d\u8981\u4f18\u5316\u3002","title":"(1)\u5e76\u884c\u8bbe\u5907\u7684\u786c\u4ef6\u5bc4\u5b58\u5668\uff08\u5982\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u3002"},{"location":"cpp/volatile/#2","text":"static int i = 0 ; int main () { while ( 1 ) { if ( i ) dosomething (); } } /* Interrupt service routine */ void IRS () { i = 1 ; } \u4e0a\u9762\u793a\u4f8b\u7a0b\u5e8f\u7684\u672c\u610f\u662f\u4ea7\u751f\u4e2d\u65ad\u65f6\uff0c\u7531\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8fIRS\u54cd\u5e94\u4e2d\u65ad\uff0c\u53d8\u66f4\u7a0b\u5e8f\u53d8\u91cfi\uff0c\u4f7f\u5728main\u51fd\u6570\u4e2d\u8c03\u7528dosomething\u51fd\u6570\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u7f16\u8bd1\u5668\u5224\u65ad\u5728main\u51fd\u6570\u91cc\u9762\u6ca1\u6709\u4fee\u6539\u8fc7i\uff0c\u56e0\u6b64\u53ef\u80fd\u53ea\u6267\u884c\u4e00\u6b21\u5bf9\u4ecei\u5230\u67d0\u5bc4\u5b58\u5668\u7684\u8bfb\u64cd\u4f5c\uff0c\u7136\u540e\u6bcf\u6b21if\u5224\u65ad\u90fd\u53ea\u4f7f\u7528\u8fd9\u4e2a\u5bc4\u5b58\u5668\u91cc\u9762\u7684\u201ci\u526f\u672c\u201d\uff0c\u5bfc\u81f4dosomething\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8c03\u7528\u3002\u5982\u679c\u5c06\u53d8\u91cfi\u52a0\u4e0avolatile\u4fee\u9970\uff0c\u5219\u7f16\u8bd1\u5668\u4fdd\u8bc1\u5bf9\u53d8\u91cfi\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u88ab\u4f18\u5316\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u53d8\u91cfi\u88ab\u5916\u90e8\u7a0b\u5e8f\u66f4\u6539\u540e\u80fd\u53ca\u65f6\u5728\u539f\u7a0b\u5e8f\u4e2d\u5f97\u5230\u611f\u77e5\u3002","title":"(2)\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8f\u4e2d\u8bbf\u95ee\u5230\u7684\u53d8\u91cf"},{"location":"cpp/volatile/#3","text":"\u5f53\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u67d0\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u8be5\u53d8\u91cf\u7684\u503c\u4f1a\u88ab\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\uff0c\u5e94\u8be5\u7528 volatile \u58f0\u660e\u3002\u4f5c\u7528\u662f\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u628a\u53d8\u91cf\u4ece\u5185\u5b58\u88c5\u5165CPU\u5bc4\u5b58\u5668\u4e2d\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\u53d8\u91cf\u540e\uff0c\u672a\u53ca\u65f6\u540c\u6b65\u5230\u5176\u5b83\u7ebf\u7a0b\u4e2d\u5bfc\u81f4\u7a0b\u5e8f\u51fa\u9519\u3002 volatile\u7684\u610f\u601d\u662f\u8ba9\u7f16\u8bd1\u5668\u6bcf\u6b21\u64cd\u4f5c\u8be5\u53d8\u91cf\u65f6\u4e00\u5b9a\u8981\u4ece\u5185\u5b58\u4e2d\u771f\u6b63\u53d6\u51fa\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5df2\u7ecf\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u3002\u793a\u4f8b\u5982\u4e0b\uff1a volatile bool bStop = false ; //bStop \u4e3a\u5171\u4eab\u5168\u5c40\u53d8\u91cf //\u7b2c\u4e00\u4e2a\u7ebf\u7a0b void threadFunc1 () { ... while ( ! bStop ){...} } //\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u7ec8\u6b62\u4e0a\u9762\u7684\u7ebf\u7a0b\u5faa\u73af void threadFunc2 () { ... bStop = true ; } \u8981\u60f3\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u7ec8\u6b62\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u5faa\u73af\uff0c\u5982\u679cbStop\u4e0d\u4f7f\u7528volatile\u5b9a\u4e49\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5faa\u73af\u5c06\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u56e0\u4e3abStop\u5df2\u7ecf\u8bfb\u53d6\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5bc4\u5b58\u5668\u4e2dbStop\u7684\u503c\u6c38\u8fdc\u4e0d\u4f1a\u53d8\u6210FALSE\uff0c\u52a0\u4e0avolatile\uff0c\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\uff0c\u6bcf\u6b21\u5747\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fabStop\u7684\u503c\uff0c\u5c31\u4e0d\u4f1a\u6b7b\u5faa\u73af\u4e86\u3002 \u662f\u5426\u4e86\u89e3volatile\u7684\u5e94\u7528\u573a\u666f\u662f\u533a\u5206C/C++\u7a0b\u5e8f\u5458\u548c\u5d4c\u5165\u5f0f\u5f00\u53d1\u7a0b\u5e8f\u5458\u7684\u6709\u6548\u529e\u6cd5\uff0c\u641e\u5d4c\u5165\u5f0f\u7684\u5bb6\u4f19\u4eec\u7ecf\u5e38\u540c\u786c\u4ef6\u3001\u4e2d\u65ad\u3001RTOS\u7b49\u7b49\u6253\u4ea4\u9053\uff0c\u8fd9\u4e9b\u90fd\u8981\u6c42\u7528\u5230volatile\u53d8\u91cf\uff0c\u4e0d\u61c2\u5f97volatile\u5c06\u4f1a\u5e26\u6765\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u707e\u96be\u3002","title":"(3)\u591a\u7ebf\u7a0b\u5e94\u7528\u4e2d\u88ab\u591a\u4e2a\u4efb\u52a1\u5171\u4eab\u7684\u53d8\u91cf\u3002"},{"location":"cpp/volatile/#3-volatile","text":"\u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u770b\u4e00\u4e0b\u9762\u8bd5\u8005\u662f\u4e0d\u662f\u76f4\u6b63\u4e86\u89e3volatile\u3002 \uff081\uff09\u4e00\u4e2a\u53c2\u6570\u65e2\u53ef\u4ee5\u662fconst\u8fd8\u53ef\u4ee5\u662fvolatile\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f \u53ef\u4ee5\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u53ea\u8bfb\u7684\u72b6\u6001\u5bc4\u5b58\u5668\u3002\u5b83\u662fvolatile\u56e0\u4e3a\u5b83\u53ef\u80fd\u88ab\u610f\u60f3\u4e0d\u5230\u5730\u6539\u53d8\u3002\u5b83\u662fconst\u56e0\u4e3a\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u8bd5\u56fe\u53bb\u4fee\u6539\u5b83\u3002 \uff082\uff09\u4e00\u4e2a\u6307\u9488\u53ef\u4ee5\u662fvolatile\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f \u53ef\u4ee5\u3002\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u5e38\u89c1\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8f\u4fee\u8be5\u4e00\u4e2a\u6307\u5411\u4e00\u4e2abuffer\u7684\u6307\u9488\u65f6\u3002 \uff083\uff09\u4e0b\u9762\u7684\u51fd\u6570\u6709\u4ec0\u4e48\u9519\u8bef\uff1f int square ( volatile int * ptr ) { return * ptr * * ptr ; } \u8fd9\u6bb5\u4ee3\u7801\u6709\u70b9\u53d8\u6001\uff0c\u5176\u76ee\u7684\u662f\u7528\u6765\u8fd4\u56de\u6307\u9488ptr\u6307\u5411\u503c\u7684\u5e73\u65b9\uff0c\u4f46\u662f\uff0c\u7531\u4e8eptr\u6307\u5411\u4e00\u4e2avolatile\u578b\u53c2\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4ea7\u751f\u7c7b\u4f3c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a int square ( volatile int * ptr ) { int a , b ; a = * ptr ; b = * ptr ; return a * b ; } \u7531\u4e8e*ptr\u7684\u503c\u53ef\u80fd\u88ab\u610f\u60f3\u4e0d\u5230\u5730\u6539\u53d8\uff0c\u56e0\u6b64a\u548cb\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u3002\u7ed3\u679c\uff0c\u8fd9\u6bb5\u4ee3\u7801\u53ef\u80fd\u8fd4\u56de\u7684\u4e0d\u662f\u4f60\u6240\u671f\u671b\u7684\u5e73\u65b9\u503c\uff01\u6b63\u786e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a long square ( volatile int * ptr ) { int a =* ptr ; return a * a ; }","title":"3. volatile\u5e38\u89c1\u95ee\u9898"},{"location":"cpp/volatile/#4-volatile","text":"volatile \u5173\u952e\u5b57\u662f\u4e00\u79cd\u7c7b\u578b\u4fee\u9970\u7b26\uff0c\u7528\u5b83\u58f0\u660e\u7684\u7c7b\u578b\u53d8\u91cf\u8868\u793a\u53ef\u4ee5\u88ab\u67d0\u4e9b\u7f16\u8bd1\u5668\u672a\u77e5\u7684\u56e0\u7d20\uff08\u64cd\u4f5c\u7cfb\u7edf\u3001\u786c\u4ef6\u3001\u5176\u5b83\u7ebf\u7a0b\u7b49\uff09\u66f4\u6539\u3002\u6240\u4ee5\u4f7f\u7528 volatile \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u5e94\u5bf9\u8fd9\u6837\u7684\u5bf9\u8c61\u8fdb\u884c\u4f18\u5316\u3002 volatile \u5173\u952e\u5b57\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u6bcf\u6b21\u8bbf\u95ee\u65f6\u90fd\u5fc5\u987b\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u503c\uff08\u6ca1\u6709\u88ab volatile \u4fee\u9970\u7684\u53d8\u91cf\uff0c\u53ef\u80fd\u7531\u4e8e\u7f16\u8bd1\u5668\u7684\u4f18\u5316\uff0c\u4ece CPU \u5bc4\u5b58\u5668\u4e2d\u53d6\u503c\uff09 const \u53ef\u4ee5\u662f volatile \uff08\u5982\u53ea\u8bfb\u7684\u72b6\u6001\u5bc4\u5b58\u5668\uff09 \u6307\u9488\u53ef\u4ee5\u662f volatile \u4ee3\u7801\u5b66\u4e60: /* Compile code without optimization option */ #include <stdio.h> int main ( void ) { const int local = 10 ; int * ptr = ( int * ) & local ; printf ( \"Initial value of local : %d \\n \" , local ); * ptr = 100 ; printf ( \"Modified value of local: %d \\n \" , local ); return 0 ; } /* Compile code with optimization option */ #include <stdio.h> int main ( void ) { const volatile int local = 10 ; int * ptr = ( int * ) & local ; printf ( \"Initial value of local : %d \\n \" , local ); * ptr = 100 ; printf ( \"Modified value of local: %d \\n \" , local ); return 0 ; }","title":"4. volatile\u4f7f\u7528"},{"location":"cpp/vptr_vtable/","text":"\u6df1\u5165\u6d45\u51faC++\u865a\u51fd\u6570\u7684vptr\u4e0evtable 1. \u57fa\u7840\u7406\u8bba \u00b6 \u4e3a\u4e86\u5b9e\u73b0\u865a\u51fd\u6570\uff0cC ++\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u865a\u62df\u8868\u7684\u7279\u6b8a\u5f62\u5f0f\u7684\u540e\u671f\u7ed1\u5b9a\u3002\u8be5\u865a\u62df\u8868\u662f\u7528\u4e8e\u89e3\u51b3\u5728\u52a8\u6001/\u540e\u671f\u7ed1\u5b9a\u65b9\u5f0f\u7684\u51fd\u6570\u8c03\u7528\u51fd\u6570\u7684\u67e5\u627e\u8868\u3002 \u865a\u62df\u8868\u6709\u65f6\u4f1a\u4f7f\u7528\u5176\u4ed6\u540d\u79f0\uff0c\u4f8b\u5982\u201cvtable\u201d\uff0c\u201c\u865a\u51fd\u6570\u8868\u201d\uff0c\u201c\u865a\u65b9\u6cd5\u8868\u201d\u6216\u201c\u8c03\u5ea6\u8868\u201d\u3002 \u865a\u62df\u8868\u5b9e\u9645\u4e0a\u975e\u5e38\u7b80\u5355\uff0c\u867d\u7136\u7528\u6587\u5b57\u63cf\u8ff0\u6709\u70b9\u590d\u6742\u3002 \u9996\u5148\uff0c \u6bcf\u4e2a\u4f7f\u7528\u865a\u51fd\u6570\u7684\u7c7b\uff08\u6216\u8005\u4ece\u4f7f\u7528\u865a\u51fd\u6570\u7684\u7c7b\u6d3e\u751f\uff09\u90fd\u6709\u81ea\u5df1\u7684\u865a\u62df\u8868 \u3002\u8be5\u8868\u53ea\u662f\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u8bbe\u7f6e\u7684\u9759\u6001\u6570\u7ec4\u3002 \u865a\u62df\u8868\u5305\u542b\u53ef\u7531\u7c7b\u7684\u5bf9\u8c61\u8c03\u7528\u7684\u6bcf\u4e2a\u865a\u51fd\u6570\u7684\u4e00\u4e2a\u6761\u76ee\u3002 \u6b64\u8868\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u6307\u5411\u8be5\u7c7b\u53ef\u8bbf\u95ee\u7684\u6d3e\u751f\u51fd\u6570\u3002 \u5176\u6b21\uff0c\u7f16\u8bd1\u5668\u8fd8\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u9690\u85cf\u6307\u5411\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3avptr\u3002vptr\u5728\u521b\u5efa\u7c7b\u5b9e\u4f8b\u65f6\u81ea\u52a8\u8bbe\u7f6e\uff0c\u4ee5\u4fbf\u6307\u5411\u8be5\u7c7b\u7684\u865a\u62df\u8868\u3002\u4e0ethis\u6307\u9488\u4e0d\u540c\uff0cthis\u6307\u9488\u5b9e\u9645\u4e0a\u662f\u7f16\u8bd1\u5668\u7528\u6765\u89e3\u6790\u81ea\u5f15\u7528\u7684\u51fd\u6570\u53c2\u6570\uff0cvptr\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u6307\u9488\u3002 \u56e0\u6b64\uff0c\u5b83\u4f7f\u6bcf\u4e2a\u7c7b\u5bf9\u8c61\u7684\u5206\u914d\u5927\u4e00\u4e2a\u6307\u9488\u7684\u5927\u5c0f\u3002\u8fd9\u4e5f\u610f\u5473\u7740vptr\u7531\u6d3e\u751f\u7c7b\u7ee7\u627f\uff0c\u8fd9\u5f88\u91cd\u8981\u3002 2. \u5b9e\u73b0\u4e0e\u5185\u90e8\u7ed3\u6784 \u00b6 \u4e0b\u9762\u6211\u4eec\u6765\u770b\u81ea\u52a8\u4e0e\u624b\u52a8\u64cd\u7eb5vptr\u6765\u83b7\u53d6\u5730\u5740\u4e0e\u8c03\u7528\u865a\u51fd\u6570\uff01 \u5f00\u59cb\u770b\u4ee3\u7801\u4e4b\u524d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u7ed9\u51fa\u8c03\u7528\u56fe\uff1a \u4ee3\u7801\u5168\u90e8\u9075\u5faa\u6807\u51c6\u7684\u6ce8\u91ca\u98ce\u683c\uff0c\u76f8\u4fe1\u5927\u5bb6\u770b\u4e86\u5c31\u4f1a\u660e\u767d #include <iostream> #include <stdio.h> using namespace std ; /** * @brief \u51fd\u6570\u6307\u9488 */ typedef void ( * Fun )(); /** * @brief \u57fa\u7c7b */ class Base { public : Base (){}; virtual void fun1 () { cout << \"Base::fun1()\" << endl ; } virtual void fun2 () { cout << \"Base::fun2()\" << endl ; } virtual void fun3 (){} ~ Base (){}; }; /** * @brief \u6d3e\u751f\u7c7b */ class Derived : public Base { public : Derived (){}; void fun1 () { cout << \"Derived::fun1()\" << endl ; } void fun2 () { cout << \"DerivedClass::fun2()\" << endl ; } ~ Derived (){}; }; /** * @brief \u83b7\u53d6vptr\u5730\u5740\u4e0efunc\u5730\u5740,vptr\u6307\u5411\u7684\u662f\u4e00\u5757\u5185\u5b58\uff0c\u8fd9\u5757\u5185\u5b58\u5b58\u653e\u7684\u662f\u865a\u51fd\u6570\u5730\u5740\uff0c\u8fd9\u5757\u5185\u5b58\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u865a\u8868 * * @param obj * @param offset * * @return */ Fun getAddr ( void * obj , unsigned int offset ) { cout << \"=======================\" << endl ; void * vptr_addr = ( void * ) * ( unsigned long * ) obj ; //64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u53608\u5b57\u8282\uff0c\u901a\u8fc7*(unsigned long *)obj\u53d6\u51fa\u524d8\u5b57\u8282\uff0c\u5373vptr\u6307\u9488 printf ( \"vptr_addr:%p \\n \" , vptr_addr ); /** * @brief \u901a\u8fc7vptr\u6307\u9488\u8bbf\u95eevirtual table\uff0c\u56e0\u4e3a\u865a\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20(\u865a\u51fd\u6570\u6307\u9488)\u572864\u4f4d\u7f16\u8bd1\u5668\u4e0b\u662f8\u4e2a\u5b57\u8282\uff0c\u56e0\u6b64\u901a\u8fc7*(unsigned long *)vptr_addr\u53d6\u51fa\u524d8\u5b57\u8282\uff0c * \u540e\u9762\u52a0\u4e0a\u504f\u79fb\u91cf\u5c31\u662f\u6bcf\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff01 */ void * func_addr = ( void * ) * (( unsigned long * ) vptr_addr + offset ); printf ( \"func_addr:%p \\n \" , func_addr ); return ( Fun ) func_addr ; } int main ( void ) { Base ptr ; Derived d ; Base * pt = new Derived (); // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b Base & pp = ptr ; // \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u57fa\u7c7b\u5b9e\u4f8b Base & p = d ; // \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b cout << \"\u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528\" << endl ; ptr . fun1 (); cout << \"\u57fa\u7c7b\u5bf9\u8c61\u8c03\u7528\u57fa\u7c7b\u5b9e\u4f8b\" << endl ; pp . fun1 (); cout << \"\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\" << endl ; pt -> fun1 (); cout << \"\u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\" << endl ; p . fun1 (); // \u624b\u52a8\u67e5\u627evptr \u548c vtable Fun f1 = getAddr ( pt , 0 ); ( * f1 )(); Fun f2 = getAddr ( pt , 1 ); ( * f2 )(); delete pt ; return 0 ; } \u8fd0\u884c\u7ed3\u679c: \u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528 Base::fun1() \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b Base::fun1() \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570 Derived::fun1() \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u57fa\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570 Derived::fun1() ======================= vptr_addr:0x401130 func_addr:0x400ea8 Derived::fun1() ======================= vptr_addr:0x401130 func_addr:0x400ed4 DerivedClass::fun2() \u6211\u4eec\u53d1\u73b0C++\u7684\u52a8\u6001\u591a\u6001\u6027\u662f\u901a\u8fc7\u865a\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u7b80\u5355\u7684\u8bf4\uff0c\u901a\u8fc7virtual\u51fd\u6570\uff0c\u6307\u5411\u5b50\u7c7b\u7684\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4e0a\u8ff0\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u865a\u51fd\u6570\uff0c\u5c06\u4e0a\u8ff0\u4ee3\u7801\u7b80\u5316\u4e3a\uff1a Base * pt = new Derived (); // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b cout << \"\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\" << endl ; pt -> fun1 (); \u5176\u8fc7\u7a0b\u4e3a\uff1a\u9996\u5148\u7a0b\u5e8f\u8bc6\u522b\u51fafun1()\u662f\u4e2a\u865a\u51fd\u6570\uff0c\u5176\u6b21\u7a0b\u5e8f\u4f7f\u7528pt->vptr\u6765\u83b7\u53d6Derived\u7684\u865a\u62df\u8868\u3002\u7b2c\u4e09\uff0c\u5b83\u67e5\u627eDerived\u865a\u62df\u8868\u4e2d\u8c03\u7528\u54ea\u4e2a\u7248\u672c\u7684fun1()\u3002\u8fd9\u91cc\u5c31\u53ef\u4ee5\u53d1\u73b0\u8c03\u7528\u7684\u662fDerived::fun1()\u3002\u56e0\u6b64pt->fun1()\u88ab\u89e3\u6790\u4e3aDerived::fun1()! \u9664\u6b64\u4e4b\u5916\uff0c\u4e0a\u8ff0\u4ee3\u7801\u5927\u5bb6\u4f1a\u770b\u5230\uff0c\u4e5f\u5305\u542b\u4e86\u624b\u52a8\u83b7\u53d6vptr\u5730\u5740\uff0c\u5e76\u8c03\u7528vtable\u4e2d\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u8d77\u6765\u9a8c\u8bc1\u4e00\u4e0b\u4e0a\u8ff0\u7684\u5730\u5740\u4e0e\u771f\u6b63\u5728\u81ea\u52a8\u8c03\u7528vtable\u4e2d\u7684\u865a\u51fd\u6570\uff0c\u6bd4\u5982\u4e0a\u8ff0pt->fun1()\u7684\u65f6\u5019\uff0c\u662f\u5426\u4e00\u81f4\uff01 \u8fd9\u91cc\u91c7\u7528gdb\u8c03\u8bd5\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u8bb0\u5f97\u52a0\u4e0a-g\u3002 \u901a\u8fc7gdb vptr\u8fdb\u5165gdb\u8c03\u8bd5\u9875\u9762\uff0c\u7136\u540e\u8f93\u5165b Derived::fun1\u5bf9fun1\u6253\u65ad\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u8f93\u5165r\u8fd0\u884c\u7a0b\u5e8f\u5230\u65ad\u70b9\u5904\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u67e5\u770b\u8c03\u7528\u6808\u4e2d\u7684\u5185\u5b58\u5730\u5740\uff0c\u901a\u8fc7disassemable fun1\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u6709\u5173fun1\u4e2d\u7684\u76f8\u5173\u6c47\u7f16\u4ee3\u7801\uff0c\u6211\u4eec\u770b\u5230\u4e860x0000000000400ea8\uff0c\u7136\u540e\u518d\u5bf9\u6bd4\u4e0a\u8ff0\u7684\u7ed3\u679c\u4f1a\u53d1\u73b0\u4e0e\u624b\u52a8\u8c03\u7528\u7684fun1\u4e00\u81f4\uff0cfun2\u7c7b\u4f3c\uff0c\u4ee5\u6b64\u8bc1\u660e\u4ee3\u7801\u6b63\u786e! gdb\u8c03\u8bd5\u4fe1\u606f\u5982\u4e0b\uff1a ( gdb ) b Derived :: fun1 Breakpoint 1 at 0x400eb4 : file vptr1 . cpp , line 23. ( gdb ) r Starting program : / home / light / Program / CPlusPlusThings / virtual / pure_virtualAndabstract_class / vptr \u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528 Base :: fun1 () \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b Base :: fun1 () \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570 Breakpoint 1 , Derived :: fun1 ( this = 0x614c20 ) at vptr1 . cpp : 23 23 cout << \"Derived::fun1()\" << endl ; ( gdb ) disassemble fun1 Dump of assembler code for function Derived :: fun1 () : 0x0000000000400ea8 <+ 0 >: push % rbp 0x0000000000400ea9 <+ 1 >: mov % rsp , % rbp 0x0000000000400eac <+ 4 >: sub $0x10 , % rsp 0x0000000000400eb0 <+ 8 >: mov % rdi , -0x8 ( % rbp ) => 0x0000000000400eb4 <+ 12 >: mov $0x401013 , % esi 0x0000000000400eb9 <+ 17 >: mov $0x602100 , % edi 0x0000000000400ebe <+ 22 >: callq 0x4009d0 < _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc @ plt > 0x0000000000400ec3 <+ 27 >: mov $0x400a00 , % esi 0x0000000000400ec8 <+ 32 >: mov % rax , % rdi 0x0000000000400ecb <+ 35 >: callq 0x4009f0 < _ZNSolsEPFRSoS_E @ plt > 0x0000000000400ed0 <+ 40 >: nop 0x0000000000400ed1 <+ 41 >: leaveq 0x0000000000400ed2 <+ 42 >: retq End of assembler dump . ( gdb ) disassemble fun2 Dump of assembler code for function Derived :: fun2 () : 0x0000000000400ed4 <+ 0 >: push % rbp 0x0000000000400ed5 <+ 1 >: mov % rsp , % rbp 0x0000000000400ed8 <+ 4 >: sub $0x10 , % rsp 0x0000000000400edc <+ 8 >: mov % rdi , -0x8 ( % rbp ) 0x0000000000400ee0 <+ 12 >: mov $0x401023 , % esi 0x0000000000400ee5 <+ 17 >: mov $0x602100 , % edi 0x0000000000400eea <+ 22 >: callq 0x4009d0 < _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc @ plt > 0x0000000000400eef <+ 27 >: mov $0x400a00 , % esi 0x0000000000400ef4 <+ 32 >: mov % rax , % rdi 0x0000000000400ef7 <+ 35 >: callq 0x4009f0 < _ZNSolsEPFRSoS_E @ plt > 0x0000000000400efc <+ 40 >: nop 0x0000000000400efd <+ 41 >: leaveq 0x0000000000400efe <+ 42 >: retq End of assembler dump .","title":"vptr_vtable"},{"location":"cpp/vptr_vtable/#1","text":"\u4e3a\u4e86\u5b9e\u73b0\u865a\u51fd\u6570\uff0cC ++\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u865a\u62df\u8868\u7684\u7279\u6b8a\u5f62\u5f0f\u7684\u540e\u671f\u7ed1\u5b9a\u3002\u8be5\u865a\u62df\u8868\u662f\u7528\u4e8e\u89e3\u51b3\u5728\u52a8\u6001/\u540e\u671f\u7ed1\u5b9a\u65b9\u5f0f\u7684\u51fd\u6570\u8c03\u7528\u51fd\u6570\u7684\u67e5\u627e\u8868\u3002 \u865a\u62df\u8868\u6709\u65f6\u4f1a\u4f7f\u7528\u5176\u4ed6\u540d\u79f0\uff0c\u4f8b\u5982\u201cvtable\u201d\uff0c\u201c\u865a\u51fd\u6570\u8868\u201d\uff0c\u201c\u865a\u65b9\u6cd5\u8868\u201d\u6216\u201c\u8c03\u5ea6\u8868\u201d\u3002 \u865a\u62df\u8868\u5b9e\u9645\u4e0a\u975e\u5e38\u7b80\u5355\uff0c\u867d\u7136\u7528\u6587\u5b57\u63cf\u8ff0\u6709\u70b9\u590d\u6742\u3002 \u9996\u5148\uff0c \u6bcf\u4e2a\u4f7f\u7528\u865a\u51fd\u6570\u7684\u7c7b\uff08\u6216\u8005\u4ece\u4f7f\u7528\u865a\u51fd\u6570\u7684\u7c7b\u6d3e\u751f\uff09\u90fd\u6709\u81ea\u5df1\u7684\u865a\u62df\u8868 \u3002\u8be5\u8868\u53ea\u662f\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u8bbe\u7f6e\u7684\u9759\u6001\u6570\u7ec4\u3002 \u865a\u62df\u8868\u5305\u542b\u53ef\u7531\u7c7b\u7684\u5bf9\u8c61\u8c03\u7528\u7684\u6bcf\u4e2a\u865a\u51fd\u6570\u7684\u4e00\u4e2a\u6761\u76ee\u3002 \u6b64\u8868\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u6307\u5411\u8be5\u7c7b\u53ef\u8bbf\u95ee\u7684\u6d3e\u751f\u51fd\u6570\u3002 \u5176\u6b21\uff0c\u7f16\u8bd1\u5668\u8fd8\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u9690\u85cf\u6307\u5411\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3avptr\u3002vptr\u5728\u521b\u5efa\u7c7b\u5b9e\u4f8b\u65f6\u81ea\u52a8\u8bbe\u7f6e\uff0c\u4ee5\u4fbf\u6307\u5411\u8be5\u7c7b\u7684\u865a\u62df\u8868\u3002\u4e0ethis\u6307\u9488\u4e0d\u540c\uff0cthis\u6307\u9488\u5b9e\u9645\u4e0a\u662f\u7f16\u8bd1\u5668\u7528\u6765\u89e3\u6790\u81ea\u5f15\u7528\u7684\u51fd\u6570\u53c2\u6570\uff0cvptr\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u6307\u9488\u3002 \u56e0\u6b64\uff0c\u5b83\u4f7f\u6bcf\u4e2a\u7c7b\u5bf9\u8c61\u7684\u5206\u914d\u5927\u4e00\u4e2a\u6307\u9488\u7684\u5927\u5c0f\u3002\u8fd9\u4e5f\u610f\u5473\u7740vptr\u7531\u6d3e\u751f\u7c7b\u7ee7\u627f\uff0c\u8fd9\u5f88\u91cd\u8981\u3002","title":"1. \u57fa\u7840\u7406\u8bba"},{"location":"cpp/vptr_vtable/#2","text":"\u4e0b\u9762\u6211\u4eec\u6765\u770b\u81ea\u52a8\u4e0e\u624b\u52a8\u64cd\u7eb5vptr\u6765\u83b7\u53d6\u5730\u5740\u4e0e\u8c03\u7528\u865a\u51fd\u6570\uff01 \u5f00\u59cb\u770b\u4ee3\u7801\u4e4b\u524d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u7ed9\u51fa\u8c03\u7528\u56fe\uff1a \u4ee3\u7801\u5168\u90e8\u9075\u5faa\u6807\u51c6\u7684\u6ce8\u91ca\u98ce\u683c\uff0c\u76f8\u4fe1\u5927\u5bb6\u770b\u4e86\u5c31\u4f1a\u660e\u767d #include <iostream> #include <stdio.h> using namespace std ; /** * @brief \u51fd\u6570\u6307\u9488 */ typedef void ( * Fun )(); /** * @brief \u57fa\u7c7b */ class Base { public : Base (){}; virtual void fun1 () { cout << \"Base::fun1()\" << endl ; } virtual void fun2 () { cout << \"Base::fun2()\" << endl ; } virtual void fun3 (){} ~ Base (){}; }; /** * @brief \u6d3e\u751f\u7c7b */ class Derived : public Base { public : Derived (){}; void fun1 () { cout << \"Derived::fun1()\" << endl ; } void fun2 () { cout << \"DerivedClass::fun2()\" << endl ; } ~ Derived (){}; }; /** * @brief \u83b7\u53d6vptr\u5730\u5740\u4e0efunc\u5730\u5740,vptr\u6307\u5411\u7684\u662f\u4e00\u5757\u5185\u5b58\uff0c\u8fd9\u5757\u5185\u5b58\u5b58\u653e\u7684\u662f\u865a\u51fd\u6570\u5730\u5740\uff0c\u8fd9\u5757\u5185\u5b58\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u865a\u8868 * * @param obj * @param offset * * @return */ Fun getAddr ( void * obj , unsigned int offset ) { cout << \"=======================\" << endl ; void * vptr_addr = ( void * ) * ( unsigned long * ) obj ; //64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u53608\u5b57\u8282\uff0c\u901a\u8fc7*(unsigned long *)obj\u53d6\u51fa\u524d8\u5b57\u8282\uff0c\u5373vptr\u6307\u9488 printf ( \"vptr_addr:%p \\n \" , vptr_addr ); /** * @brief \u901a\u8fc7vptr\u6307\u9488\u8bbf\u95eevirtual table\uff0c\u56e0\u4e3a\u865a\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20(\u865a\u51fd\u6570\u6307\u9488)\u572864\u4f4d\u7f16\u8bd1\u5668\u4e0b\u662f8\u4e2a\u5b57\u8282\uff0c\u56e0\u6b64\u901a\u8fc7*(unsigned long *)vptr_addr\u53d6\u51fa\u524d8\u5b57\u8282\uff0c * \u540e\u9762\u52a0\u4e0a\u504f\u79fb\u91cf\u5c31\u662f\u6bcf\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff01 */ void * func_addr = ( void * ) * (( unsigned long * ) vptr_addr + offset ); printf ( \"func_addr:%p \\n \" , func_addr ); return ( Fun ) func_addr ; } int main ( void ) { Base ptr ; Derived d ; Base * pt = new Derived (); // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b Base & pp = ptr ; // \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u57fa\u7c7b\u5b9e\u4f8b Base & p = d ; // \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b cout << \"\u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528\" << endl ; ptr . fun1 (); cout << \"\u57fa\u7c7b\u5bf9\u8c61\u8c03\u7528\u57fa\u7c7b\u5b9e\u4f8b\" << endl ; pp . fun1 (); cout << \"\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\" << endl ; pt -> fun1 (); cout << \"\u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\" << endl ; p . fun1 (); // \u624b\u52a8\u67e5\u627evptr \u548c vtable Fun f1 = getAddr ( pt , 0 ); ( * f1 )(); Fun f2 = getAddr ( pt , 1 ); ( * f2 )(); delete pt ; return 0 ; } \u8fd0\u884c\u7ed3\u679c: \u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528 Base::fun1() \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b Base::fun1() \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570 Derived::fun1() \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u57fa\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570 Derived::fun1() ======================= vptr_addr:0x401130 func_addr:0x400ea8 Derived::fun1() ======================= vptr_addr:0x401130 func_addr:0x400ed4 DerivedClass::fun2() \u6211\u4eec\u53d1\u73b0C++\u7684\u52a8\u6001\u591a\u6001\u6027\u662f\u901a\u8fc7\u865a\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u7b80\u5355\u7684\u8bf4\uff0c\u901a\u8fc7virtual\u51fd\u6570\uff0c\u6307\u5411\u5b50\u7c7b\u7684\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4e0a\u8ff0\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u865a\u51fd\u6570\uff0c\u5c06\u4e0a\u8ff0\u4ee3\u7801\u7b80\u5316\u4e3a\uff1a Base * pt = new Derived (); // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b cout << \"\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\" << endl ; pt -> fun1 (); \u5176\u8fc7\u7a0b\u4e3a\uff1a\u9996\u5148\u7a0b\u5e8f\u8bc6\u522b\u51fafun1()\u662f\u4e2a\u865a\u51fd\u6570\uff0c\u5176\u6b21\u7a0b\u5e8f\u4f7f\u7528pt->vptr\u6765\u83b7\u53d6Derived\u7684\u865a\u62df\u8868\u3002\u7b2c\u4e09\uff0c\u5b83\u67e5\u627eDerived\u865a\u62df\u8868\u4e2d\u8c03\u7528\u54ea\u4e2a\u7248\u672c\u7684fun1()\u3002\u8fd9\u91cc\u5c31\u53ef\u4ee5\u53d1\u73b0\u8c03\u7528\u7684\u662fDerived::fun1()\u3002\u56e0\u6b64pt->fun1()\u88ab\u89e3\u6790\u4e3aDerived::fun1()! \u9664\u6b64\u4e4b\u5916\uff0c\u4e0a\u8ff0\u4ee3\u7801\u5927\u5bb6\u4f1a\u770b\u5230\uff0c\u4e5f\u5305\u542b\u4e86\u624b\u52a8\u83b7\u53d6vptr\u5730\u5740\uff0c\u5e76\u8c03\u7528vtable\u4e2d\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u8d77\u6765\u9a8c\u8bc1\u4e00\u4e0b\u4e0a\u8ff0\u7684\u5730\u5740\u4e0e\u771f\u6b63\u5728\u81ea\u52a8\u8c03\u7528vtable\u4e2d\u7684\u865a\u51fd\u6570\uff0c\u6bd4\u5982\u4e0a\u8ff0pt->fun1()\u7684\u65f6\u5019\uff0c\u662f\u5426\u4e00\u81f4\uff01 \u8fd9\u91cc\u91c7\u7528gdb\u8c03\u8bd5\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u8bb0\u5f97\u52a0\u4e0a-g\u3002 \u901a\u8fc7gdb vptr\u8fdb\u5165gdb\u8c03\u8bd5\u9875\u9762\uff0c\u7136\u540e\u8f93\u5165b Derived::fun1\u5bf9fun1\u6253\u65ad\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u8f93\u5165r\u8fd0\u884c\u7a0b\u5e8f\u5230\u65ad\u70b9\u5904\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u67e5\u770b\u8c03\u7528\u6808\u4e2d\u7684\u5185\u5b58\u5730\u5740\uff0c\u901a\u8fc7disassemable fun1\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u6709\u5173fun1\u4e2d\u7684\u76f8\u5173\u6c47\u7f16\u4ee3\u7801\uff0c\u6211\u4eec\u770b\u5230\u4e860x0000000000400ea8\uff0c\u7136\u540e\u518d\u5bf9\u6bd4\u4e0a\u8ff0\u7684\u7ed3\u679c\u4f1a\u53d1\u73b0\u4e0e\u624b\u52a8\u8c03\u7528\u7684fun1\u4e00\u81f4\uff0cfun2\u7c7b\u4f3c\uff0c\u4ee5\u6b64\u8bc1\u660e\u4ee3\u7801\u6b63\u786e! gdb\u8c03\u8bd5\u4fe1\u606f\u5982\u4e0b\uff1a ( gdb ) b Derived :: fun1 Breakpoint 1 at 0x400eb4 : file vptr1 . cpp , line 23. ( gdb ) r Starting program : / home / light / Program / CPlusPlusThings / virtual / pure_virtualAndabstract_class / vptr \u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528 Base :: fun1 () \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b Base :: fun1 () \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570 Breakpoint 1 , Derived :: fun1 ( this = 0x614c20 ) at vptr1 . cpp : 23 23 cout << \"Derived::fun1()\" << endl ; ( gdb ) disassemble fun1 Dump of assembler code for function Derived :: fun1 () : 0x0000000000400ea8 <+ 0 >: push % rbp 0x0000000000400ea9 <+ 1 >: mov % rsp , % rbp 0x0000000000400eac <+ 4 >: sub $0x10 , % rsp 0x0000000000400eb0 <+ 8 >: mov % rdi , -0x8 ( % rbp ) => 0x0000000000400eb4 <+ 12 >: mov $0x401013 , % esi 0x0000000000400eb9 <+ 17 >: mov $0x602100 , % edi 0x0000000000400ebe <+ 22 >: callq 0x4009d0 < _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc @ plt > 0x0000000000400ec3 <+ 27 >: mov $0x400a00 , % esi 0x0000000000400ec8 <+ 32 >: mov % rax , % rdi 0x0000000000400ecb <+ 35 >: callq 0x4009f0 < _ZNSolsEPFRSoS_E @ plt > 0x0000000000400ed0 <+ 40 >: nop 0x0000000000400ed1 <+ 41 >: leaveq 0x0000000000400ed2 <+ 42 >: retq End of assembler dump . ( gdb ) disassemble fun2 Dump of assembler code for function Derived :: fun2 () : 0x0000000000400ed4 <+ 0 >: push % rbp 0x0000000000400ed5 <+ 1 >: mov % rsp , % rbp 0x0000000000400ed8 <+ 4 >: sub $0x10 , % rsp 0x0000000000400edc <+ 8 >: mov % rdi , -0x8 ( % rbp ) 0x0000000000400ee0 <+ 12 >: mov $0x401023 , % esi 0x0000000000400ee5 <+ 17 >: mov $0x602100 , % edi 0x0000000000400eea <+ 22 >: callq 0x4009d0 < _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc @ plt > 0x0000000000400eef <+ 27 >: mov $0x400a00 , % esi 0x0000000000400ef4 <+ 32 >: mov % rax , % rdi 0x0000000000400ef7 <+ 35 >: callq 0x4009f0 < _ZNSolsEPFRSoS_E @ plt > 0x0000000000400efc <+ 40 >: nop 0x0000000000400efd <+ 41 >: leaveq 0x0000000000400efe <+ 42 >: retq End of assembler dump .","title":"2. \u5b9e\u73b0\u4e0e\u5185\u90e8\u7ed3\u6784"},{"location":"cpp/%E4%BD%8D%E5%9F%9F/","text":"Bit field \u662f\u4ec0\u4e48\uff1f \u00b6 \u201c \u4f4d\u57df \u201c \u6216 \u201c \u4f4d\u6bb5 \u201c(Bit field)\u4e3a\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u628a\u6570\u636e\u4ee5\u4f4d\u7684\u5f62\u5f0f\u7d27\u51d1\u7684\u50a8\u5b58\uff0c\u5e76\u5141\u8bb8\u7a0b\u5e8f\u5458\u5bf9\u6b64\u7ed3\u6784\u7684\u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u4e00\u4e2a\u597d\u5904\u662f\u5b83\u53ef\u4ee5\u4f7f\u6570\u636e\u5355\u5143\u8282\u7701\u50a8\u5b58\u7a7a\u95f4\uff0c\u5f53\u7a0b\u5e8f\u9700\u8981\u6210\u5343\u4e0a\u4e07\u4e2a\u6570\u636e\u5355\u5143\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u7b2c\u4e8c\u4e2a\u597d\u5904\u662f\u4f4d\u6bb5\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8bbf\u95ee\u4e00\u4e2a\u6574\u6570\u503c\u7684\u90e8\u5206\u5185\u5bb9\u4ece\u800c\u53ef\u4ee5\u7b80\u5316\u7a0b\u5e8f\u6e90\u4ee3\u7801\u3002\u800c\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u4f4d\u6bb5\u5b9e\u73b0\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u673a\u5668\u548c\u7cfb\u7edf\uff0c\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4f4d\u6bb5\u5728\u672c\u8d28\u4e0a\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002 \u4f4d\u57df\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u662f\u4e0e\u673a\u5668\u6709\u5173\u7684 \u4f4d\u57df\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6574\u578b\u6216\u679a\u4e3e\u7c7b\u578b\uff0c\u5e26\u7b26\u53f7\u7c7b\u578b\u4e2d\u7684\u4f4d\u57df\u7684\u884c\u4e3a\u5c06\u56e0\u5177\u4f53\u5b9e\u73b0\u800c\u5b9a \u53d6\u5730\u5740\u8fd0\u7b97\u7b26\uff08&\uff09\u4e0d\u80fd\u4f5c\u7528\u4e8e\u4f4d\u57df\uff0c\u4efb\u4f55\u6307\u9488\u90fd\u65e0\u6cd5\u6307\u5411\u7c7b\u7684\u4f4d\u57df \u4f4d\u57df\u4f7f\u7528 \u00b6 \u4f4d\u57df\u901a\u5e38\u4f7f\u7528\u7ed3\u6784\u4f53\u58f0\u660e\uff0c \u8be5\u7ed3\u6784\u58f0\u660e\u4e3a\u6bcf\u4e2a\u4f4d\u57df\u6210\u5458\u8bbe\u7f6e\u540d\u79f0\uff0c\u5e76\u51b3\u5b9a\u5176\u5bbd\u5ea6\uff1a struct bit_field_name { type member_name : width ; };","title":"\u4f4d\u57df"},{"location":"cpp/%E4%BD%8D%E5%9F%9F/#bit-field","text":"\u201c \u4f4d\u57df \u201c \u6216 \u201c \u4f4d\u6bb5 \u201c(Bit field)\u4e3a\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u628a\u6570\u636e\u4ee5\u4f4d\u7684\u5f62\u5f0f\u7d27\u51d1\u7684\u50a8\u5b58\uff0c\u5e76\u5141\u8bb8\u7a0b\u5e8f\u5458\u5bf9\u6b64\u7ed3\u6784\u7684\u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u4e00\u4e2a\u597d\u5904\u662f\u5b83\u53ef\u4ee5\u4f7f\u6570\u636e\u5355\u5143\u8282\u7701\u50a8\u5b58\u7a7a\u95f4\uff0c\u5f53\u7a0b\u5e8f\u9700\u8981\u6210\u5343\u4e0a\u4e07\u4e2a\u6570\u636e\u5355\u5143\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u7b2c\u4e8c\u4e2a\u597d\u5904\u662f\u4f4d\u6bb5\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8bbf\u95ee\u4e00\u4e2a\u6574\u6570\u503c\u7684\u90e8\u5206\u5185\u5bb9\u4ece\u800c\u53ef\u4ee5\u7b80\u5316\u7a0b\u5e8f\u6e90\u4ee3\u7801\u3002\u800c\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u4f4d\u6bb5\u5b9e\u73b0\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u673a\u5668\u548c\u7cfb\u7edf\uff0c\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4f4d\u6bb5\u5728\u672c\u8d28\u4e0a\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002 \u4f4d\u57df\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u662f\u4e0e\u673a\u5668\u6709\u5173\u7684 \u4f4d\u57df\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6574\u578b\u6216\u679a\u4e3e\u7c7b\u578b\uff0c\u5e26\u7b26\u53f7\u7c7b\u578b\u4e2d\u7684\u4f4d\u57df\u7684\u884c\u4e3a\u5c06\u56e0\u5177\u4f53\u5b9e\u73b0\u800c\u5b9a \u53d6\u5730\u5740\u8fd0\u7b97\u7b26\uff08&\uff09\u4e0d\u80fd\u4f5c\u7528\u4e8e\u4f4d\u57df\uff0c\u4efb\u4f55\u6307\u9488\u90fd\u65e0\u6cd5\u6307\u5411\u7c7b\u7684\u4f4d\u57df","title":"Bit field \u662f\u4ec0\u4e48\uff1f"},{"location":"cpp/%E4%BD%8D%E5%9F%9F/#_1","text":"\u4f4d\u57df\u901a\u5e38\u4f7f\u7528\u7ed3\u6784\u4f53\u58f0\u660e\uff0c \u8be5\u7ed3\u6784\u58f0\u660e\u4e3a\u6bcf\u4e2a\u4f4d\u57df\u6210\u5458\u8bbe\u7f6e\u540d\u79f0\uff0c\u5e76\u51b3\u5b9a\u5176\u5bbd\u5ea6\uff1a struct bit_field_name { type member_name : width ; };","title":"\u4f4d\u57df\u4f7f\u7528"},{"location":"cpp/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/","text":"\u4fe1\u53f7\u662f\u7531\u64cd\u4f5c\u7cfb\u7edf\u4f20\u7ed9\u8fdb\u7a0b\u7684\u4e2d\u65ad\uff0c\u4f1a\u63d0\u65e9\u7ec8\u6b62\u4e00\u4e2a\u7a0b\u5e8f\u3002\u5728 UNIX\u3001LINUX\u3001Mac OS X \u6216 Windows \u7cfb\u7edf\u4e0a\uff0c\u53ef\u4ee5\u901a\u8fc7\u6309 Ctrl+C \u4ea7\u751f\u4e2d\u65ad\u3002 \u6709\u4e9b\u4fe1\u53f7\u4e0d\u80fd\u88ab\u7a0b\u5e8f\u6355\u83b7\uff0c\u4f46\u662f\u4e0b\u8868\u6240\u5217\u4fe1\u53f7\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u6355\u83b7\uff0c\u5e76\u53ef\u4ee5\u57fa\u4e8e\u4fe1\u53f7\u91c7\u53d6\u9002\u5f53\u7684\u52a8\u4f5c\u3002\u8fd9\u4e9b\u4fe1\u53f7\u662f\u5b9a\u4e49\u5728 C++ \u5934\u6587\u4ef6 \u4e2d\u3002 SIGABRT \u7a0b\u5e8f\u7684\u5f02\u5e38\u7ec8\u6b62\uff0c\u5982\u8c03\u7528 abort\u3002 SIGFPE \u9519\u8bef\u7684\u7b97\u672f\u8fd0\u7b97\uff0c\u6bd4\u5982\u9664\u4ee5\u96f6\u6216\u5bfc\u81f4\u6ea2\u51fa\u7684\u64cd\u4f5c\u3002 SIGILL \u68c0\u6d4b\u975e\u6cd5\u6307\u4ee4\u3002 SIGINT \u7a0b\u5e8f\u7ec8\u6b62(interrupt)\u4fe1\u53f7\u3002 SIGSEGV \u975e\u6cd5\u8bbf\u95ee\u5185\u5b58\u3002 SIGTERM \u53d1\u9001\u5230\u7a0b\u5e8f\u7684\u7ec8\u6b62\u8bf7\u6c42\u3002 signal() \u51fd\u6570 \u00b6 C++ \u4fe1\u53f7\u5904\u7406\u5e93\u63d0\u4f9b\u4e86 signal \u51fd\u6570\uff0c\u7528\u6765\u6355\u83b7\u7a81\u53d1\u4e8b\u4ef6\u3002\u4ee5\u4e0b\u662f signal() \u51fd\u6570\u7684\u8bed\u6cd5\uff1a void ( * signal ( int sig , void ( * func )( int )))( int ); \u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u4e86\u4fe1\u53f7\u7684\u7f16\u53f7\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6307\u5411\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u6307\u9488\u3002 \u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684 C++ \u7a0b\u5e8f\uff0c\u4f7f\u7528 signal() \u51fd\u6570\u6355\u83b7 SIGINT \u4fe1\u53f7\u3002 \u4e0d\u7ba1\u60a8\u60f3\u5728\u7a0b\u5e8f\u4e2d\u6355\u83b7\u4ec0\u4e48\u4fe1\u53f7\uff0c\u60a8\u90fd\u5fc5\u987b\u4f7f\u7528 signal \u51fd\u6570\u6765\u6ce8\u518c\u4fe1\u53f7\uff0c\u5e76\u5c06\u5176\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u76f8\u5173\u8054\u3002\u770b\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> #include <csignal> #include <unistd.h> using namespace std ; void signalHandler ( int signum ) { cout << \"Interrupt signal (\" << signum << \") received. \\n \" ; // \u6e05\u7406\u5e76\u5173\u95ed // \u7ec8\u6b62\u7a0b\u5e8f exit ( signum ); } int main () { // \u6ce8\u518c\u4fe1\u53f7 SIGINT \u548c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f signal ( SIGINT , signalHandler ); while ( 1 ){ cout << \"Going to sleep....\" << endl ; sleep ( 1 ); } return 0 ; } raise() \u51fd\u6570 \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 raise() \u751f\u6210\u4fe1\u53f7\uff0c\u8be5\u51fd\u6570\u5e26\u6709\u4e00\u4e2a\u6574\u6570\u4fe1\u53f7\u7f16\u53f7\u4f5c\u4e3a\u53c2\u6570\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a int raise ( signal sig ); \u5728\u8fd9\u91cc\uff0csig \u662f\u8981\u53d1\u9001\u7684\u4fe1\u53f7\u7684\u7f16\u53f7\uff0c\u8fd9\u4e9b\u4fe1\u53f7\u5305\u62ec\uff1aSIGINT\u3001SIGABRT\u3001SIGFPE\u3001SIGILL\u3001SIGSEGV\u3001SIGTERM\u3001SIGHUP\u3002 \u4ee5\u4e0b\u662f\u6211\u4eec\u4f7f\u7528 raise() \u51fd\u6570\u5185\u90e8\u751f\u6210\u4fe1\u53f7\u7684\u5b9e\u4f8b\uff1a #include <iostream> #include <csignal> #include <unistd.h> using namespace std ; void signalHandler ( int signum ) { cout << \"Interrupt signal (\" << signum << \") received. \\n \" ; // \u6e05\u7406\u5e76\u5173\u95ed // \u7ec8\u6b62\u7a0b\u5e8f exit ( signum ); } int main () { int i = 0 ; // \u6ce8\u518c\u4fe1\u53f7 SIGINT \u548c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f signal ( SIGINT , signalHandler ); while ( ++ i ){ cout << \"Going to sleep....\" << endl ; if ( i == 3 ){ raise ( SIGINT ); } sleep ( 1 ); } return 0 ; }","title":"\u4fe1\u53f7\u5904\u7406"},{"location":"cpp/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#signal","text":"C++ \u4fe1\u53f7\u5904\u7406\u5e93\u63d0\u4f9b\u4e86 signal \u51fd\u6570\uff0c\u7528\u6765\u6355\u83b7\u7a81\u53d1\u4e8b\u4ef6\u3002\u4ee5\u4e0b\u662f signal() \u51fd\u6570\u7684\u8bed\u6cd5\uff1a void ( * signal ( int sig , void ( * func )( int )))( int ); \u8fd9\u4e2a\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u4e86\u4fe1\u53f7\u7684\u7f16\u53f7\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6307\u5411\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u7684\u6307\u9488\u3002 \u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684 C++ \u7a0b\u5e8f\uff0c\u4f7f\u7528 signal() \u51fd\u6570\u6355\u83b7 SIGINT \u4fe1\u53f7\u3002 \u4e0d\u7ba1\u60a8\u60f3\u5728\u7a0b\u5e8f\u4e2d\u6355\u83b7\u4ec0\u4e48\u4fe1\u53f7\uff0c\u60a8\u90fd\u5fc5\u987b\u4f7f\u7528 signal \u51fd\u6570\u6765\u6ce8\u518c\u4fe1\u53f7\uff0c\u5e76\u5c06\u5176\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u76f8\u5173\u8054\u3002\u770b\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> #include <csignal> #include <unistd.h> using namespace std ; void signalHandler ( int signum ) { cout << \"Interrupt signal (\" << signum << \") received. \\n \" ; // \u6e05\u7406\u5e76\u5173\u95ed // \u7ec8\u6b62\u7a0b\u5e8f exit ( signum ); } int main () { // \u6ce8\u518c\u4fe1\u53f7 SIGINT \u548c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f signal ( SIGINT , signalHandler ); while ( 1 ){ cout << \"Going to sleep....\" << endl ; sleep ( 1 ); } return 0 ; }","title":"signal() \u51fd\u6570"},{"location":"cpp/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/#raise","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 raise() \u751f\u6210\u4fe1\u53f7\uff0c\u8be5\u51fd\u6570\u5e26\u6709\u4e00\u4e2a\u6574\u6570\u4fe1\u53f7\u7f16\u53f7\u4f5c\u4e3a\u53c2\u6570\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a int raise ( signal sig ); \u5728\u8fd9\u91cc\uff0csig \u662f\u8981\u53d1\u9001\u7684\u4fe1\u53f7\u7684\u7f16\u53f7\uff0c\u8fd9\u4e9b\u4fe1\u53f7\u5305\u62ec\uff1aSIGINT\u3001SIGABRT\u3001SIGFPE\u3001SIGILL\u3001SIGSEGV\u3001SIGTERM\u3001SIGHUP\u3002 \u4ee5\u4e0b\u662f\u6211\u4eec\u4f7f\u7528 raise() \u51fd\u6570\u5185\u90e8\u751f\u6210\u4fe1\u53f7\u7684\u5b9e\u4f8b\uff1a #include <iostream> #include <csignal> #include <unistd.h> using namespace std ; void signalHandler ( int signum ) { cout << \"Interrupt signal (\" << signum << \") received. \\n \" ; // \u6e05\u7406\u5e76\u5173\u95ed // \u7ec8\u6b62\u7a0b\u5e8f exit ( signum ); } int main () { int i = 0 ; // \u6ce8\u518c\u4fe1\u53f7 SIGINT \u548c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f signal ( SIGINT , signalHandler ); while ( ++ i ){ cout << \"Going to sleep....\" << endl ; if ( i == 3 ){ raise ( SIGINT ); } sleep ( 1 ); } return 0 ; }","title":"raise() \u51fd\u6570"},{"location":"cpp/%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B/","text":"C++ \u5141\u8bb8\u5728 char\u3001int \u548c double \u6570\u636e\u7c7b\u578b\u524d\u653e\u7f6e\u4fee\u9970\u7b26\u3002\u4fee\u9970\u7b26\u7528\u4e8e\u6539\u53d8\u57fa\u672c\u7c7b\u578b\u7684\u542b\u4e49\uff0c\u6240\u4ee5\u5b83\u66f4\u80fd\u6ee1\u8db3\u5404\u79cd\u60c5\u5883\u7684\u9700\u6c42\u3002 \u6570\u636e\u7c7b\u578b\u4fee\u9970\u7b26\u5305\u62ec\uff1a signed unsigned long short \u4fee\u9970\u7b26 signed\u3001unsigned\u3001long \u548c short \u53ef\u5e94\u7528\u4e8e\u6574\u578b\uff0csigned \u548c unsigned \u53ef\u5e94\u7528\u4e8e\u5b57\u7b26\u578b\uff0clong \u53ef\u5e94\u7528\u4e8e\u53cc\u7cbe\u5ea6\u578b\u3002 \u4fee\u9970\u7b26 signed \u548c unsigned \u4e5f\u53ef\u4ee5\u4f5c\u4e3a long \u6216 short \u4fee\u9970\u7b26\u7684\u524d\u7f00\u3002\u4f8b\u5982\uff1aunsigned long int\u3002 \u4e3a\u4e86\u7406\u89e3 C++ \u89e3\u91ca\u6709\u7b26\u53f7\u6574\u6570\u548c\u65e0\u7b26\u53f7\u6574\u6570\u4fee\u9970\u7b26\u4e4b\u95f4\u7684\u5dee\u522b\uff0c\u6211\u4eec\u6765\u8fd0\u884c\u4e00\u4e0b\u4e0b\u9762\u8fd9\u4e2a\u77ed\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; /* * \u8fd9\u4e2a\u7a0b\u5e8f\u6f14\u793a\u4e86\u6709\u7b26\u53f7\u6574\u6570\u548c\u65e0\u7b26\u53f7\u6574\u6570\u4e4b\u95f4\u7684\u5dee\u522b */ int main () { short int i ; // \u6709\u7b26\u53f7\u77ed\u6574\u6570 short unsigned int j ; // \u65e0\u7b26\u53f7\u77ed\u6574\u6570 j = 50000 ; i = j ; cout << i << \" \" << j ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u4f1a\u8f93\u51fa\u4e0b\u5217\u7ed3\u679c\uff1a -15536 50000 \u4e0a\u8ff0\u7ed3\u679c\u4e2d\uff0c\u65e0\u7b26\u53f7\u77ed\u6574\u6570 50,000 \u7684\u4f4d\u6a21\u5f0f\u88ab\u89e3\u91ca\u4e3a\u6709\u7b26\u53f7\u77ed\u6574\u6570 -15,536\u3002 C++ \u4e2d\u7684\u7c7b\u578b\u9650\u5b9a\u7b26 \u00b6 \u7c7b\u578b\u9650\u5b9a\u7b26\u63d0\u4f9b\u4e86\u53d8\u91cf\u7684\u989d\u5916\u4fe1\u606f\u3002 const \u00b6 const \u7c7b\u578b\u7684\u5bf9\u8c61\u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u4e0d\u80fd\u88ab\u4fee\u6539\u6539\u53d8\u3002 volatile \u00b6 \u4fee\u9970\u7b26 volatile \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u4f18\u5316volatile\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u8ba9\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u53d8\u91cf\u3002\u5bf9\u4e8e\u4e00\u822c\u7684\u53d8\u91cf\u7f16\u8bd1\u5668\u4f1a\u5bf9\u53d8\u91cf\u8fdb\u884c\u4f18\u5316\uff0c\u5c06\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u503c\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u4ee5\u52a0\u5feb\u8bfb\u5199\u6548\u7387\u3002 restrict \u00b6 \u7531 restrict \u4fee\u9970\u7684\u6307\u9488\u662f\u552f\u4e00\u4e00\u79cd\u8bbf\u95ee\u5b83\u6240\u6307\u5411\u7684\u5bf9\u8c61\u7684\u65b9\u5f0f\u3002\u53ea\u6709 C99 \u589e\u52a0\u4e86\u65b0\u7684\u7c7b\u578b\u9650\u5b9a\u7b26 restrict\u3002","title":"\u4fee\u9970\u7b26\u7c7b\u578b"},{"location":"cpp/%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B/#c","text":"\u7c7b\u578b\u9650\u5b9a\u7b26\u63d0\u4f9b\u4e86\u53d8\u91cf\u7684\u989d\u5916\u4fe1\u606f\u3002","title":"C++ \u4e2d\u7684\u7c7b\u578b\u9650\u5b9a\u7b26"},{"location":"cpp/%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B/#const","text":"const \u7c7b\u578b\u7684\u5bf9\u8c61\u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u4e0d\u80fd\u88ab\u4fee\u6539\u6539\u53d8\u3002","title":"const"},{"location":"cpp/%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B/#volatile","text":"\u4fee\u9970\u7b26 volatile \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u9700\u8981\u4f18\u5316volatile\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u8ba9\u7a0b\u5e8f\u53ef\u4ee5\u76f4\u63a5\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u53d8\u91cf\u3002\u5bf9\u4e8e\u4e00\u822c\u7684\u53d8\u91cf\u7f16\u8bd1\u5668\u4f1a\u5bf9\u53d8\u91cf\u8fdb\u884c\u4f18\u5316\uff0c\u5c06\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u503c\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u4ee5\u52a0\u5feb\u8bfb\u5199\u6548\u7387\u3002","title":"volatile"},{"location":"cpp/%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B/#restrict","text":"\u7531 restrict \u4fee\u9970\u7684\u6307\u9488\u662f\u552f\u4e00\u4e00\u79cd\u8bbf\u95ee\u5b83\u6240\u6307\u5411\u7684\u5bf9\u8c61\u7684\u65b9\u5f0f\u3002\u53ea\u6709 C99 \u589e\u52a0\u4e86\u65b0\u7684\u7c7b\u578b\u9650\u5b9a\u7b26 restrict\u3002","title":"restrict"},{"location":"cpp/%E5%87%BD%E6%95%B0/","text":"\u5b9a\u4e49\u51fd\u6570 \u00b6 C++ \u4e2d\u7684\u51fd\u6570\u5b9a\u4e49\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\uff1a return_type function_name ( parameter list ) { body of the function } \u5728 C++ \u4e2d\uff0c\u51fd\u6570\u7531\u4e00\u4e2a\u51fd\u6570\u5934\u548c\u4e00\u4e2a\u51fd\u6570\u4e3b\u4f53\u7ec4\u6210\u3002\u4e0b\u9762\u5217\u51fa\u4e00\u4e2a\u51fd\u6570\u7684\u6240\u6709\u7ec4\u6210\u90e8\u5206\uff1a \u8fd4\u56de\u7c7b\u578b\uff1a\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u503c\u3002return_type \u662f\u51fd\u6570\u8fd4\u56de\u7684\u503c\u7684\u6570\u636e\u7c7b\u578b\u3002\u6709\u4e9b\u51fd\u6570\u6267\u884c\u6240\u9700\u7684\u64cd\u4f5c\u800c\u4e0d\u8fd4\u56de\u503c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0creturn_type \u662f\u5173\u952e\u5b57 void\u3002 \u51fd\u6570\u540d\u79f0\uff1a\u8fd9\u662f\u51fd\u6570\u7684\u5b9e\u9645\u540d\u79f0\u3002\u51fd\u6570\u540d\u548c\u53c2\u6570\u5217\u8868\u4e00\u8d77\u6784\u6210\u4e86\u51fd\u6570\u7b7e\u540d\u3002 \u53c2\u6570\uff1a\u53c2\u6570\u5c31\u50cf\u662f\u5360\u4f4d\u7b26\u3002\u5f53\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u60a8\u5411\u53c2\u6570\u4f20\u9012\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u88ab\u79f0\u4e3a\u5b9e\u9645\u53c2\u6570\u3002\u53c2\u6570\u5217\u8868\u5305\u62ec\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\u3001\u987a\u5e8f\u3001\u6570\u91cf\u3002\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u51fd\u6570\u53ef\u80fd\u4e0d\u5305\u542b\u53c2\u6570\u3002 \u51fd\u6570\u4e3b\u4f53\uff1a\u51fd\u6570\u4e3b\u4f53\u5305\u542b\u4e00\u7ec4\u5b9a\u4e49\u51fd\u6570\u6267\u884c\u4efb\u52a1\u7684\u8bed\u53e5\u3002 // \u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\u6570 int max ( int num1 , int num2 ) { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int result ; if ( num1 > num2 ) result = num1 ; else result = num2 ; return result ; } \u51fd\u6570\u58f0\u660e \u00b6 \u51fd\u6570\u58f0\u660e\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u51fd\u6570\u540d\u79f0\u53ca\u5982\u4f55\u8c03\u7528\u51fd\u6570\u3002 \u51fd\u6570\u7684\u5b9e\u9645\u4e3b\u4f53\u53ef\u4ee5\u5355\u72ec\u5b9a\u4e49\u3002 \u51fd\u6570\u58f0\u660e\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a return_type function_name( parameter list ); \u9488\u5bf9\u4e0a\u9762\u5b9a\u4e49\u7684\u51fd\u6570 max()\uff0c\u4ee5\u4e0b\u662f\u51fd\u6570\u58f0\u660e\uff1a int max(int num1, int num2); \u5728\u51fd\u6570\u58f0\u660e\u4e2d\uff0c\u53c2\u6570\u7684\u540d\u79f0\u5e76\u4e0d\u91cd\u8981\uff0c\u53ea\u6709\u53c2\u6570\u7684\u7c7b\u578b\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u6b64\u4e0b\u9762\u4e5f\u662f\u6709\u6548\u7684\u58f0\u660e\uff1a int max(int, int); \u5f53\u60a8\u5728\u4e00\u4e2a\u6e90\u6587\u4ef6\u4e2d\u5b9a\u4e49\u51fd\u6570\u4e14\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u58f0\u660e\u662f\u5fc5\u9700\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e94\u8be5\u5728\u8c03\u7528\u51fd\u6570\u7684\u6587\u4ef6\u9876\u90e8\u58f0\u660e\u51fd\u6570\u3002 \u8c03\u7528\u51fd\u6570 \u00b6 \u521b\u5efa C++ \u51fd\u6570\u65f6\uff0c\u4f1a\u5b9a\u4e49\u51fd\u6570\u505a\u4ec0\u4e48\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u7528\u51fd\u6570\u6765\u5b8c\u6210\u5df2\u5b9a\u4e49\u7684\u4efb\u52a1\u3002 \u5f53\u7a0b\u5e8f\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u63a7\u5236\u6743\u4f1a\u8f6c\u79fb\u7ed9\u88ab\u8c03\u7528\u7684\u51fd\u6570\u3002\u88ab\u8c03\u7528\u7684\u51fd\u6570\u6267\u884c\u5df2\u5b9a\u4e49\u7684\u4efb\u52a1\uff0c\u5f53\u51fd\u6570\u7684\u8fd4\u56de\u8bed\u53e5\u88ab\u6267\u884c\u65f6\uff0c\u6216\u5230\u8fbe\u51fd\u6570\u7684\u7ed3\u675f\u62ec\u53f7\u65f6\uff0c\u4f1a\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u4e3b\u7a0b\u5e8f\u3002 \u8c03\u7528\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u6240\u9700\u53c2\u6570\uff0c\u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5219\u53ef\u4ee5\u5b58\u50a8\u8fd4\u56de\u503c\u3002\u4f8b\u5982\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e int max ( int num1 , int num2 ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; int ret ; // \u8c03\u7528\u51fd\u6570\u6765\u83b7\u53d6\u6700\u5927\u503c ret = max ( a , b ); cout << \"Max value is : \" << ret << endl ; return 0 ; } // \u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\u6570 int max ( int num1 , int num2 ) { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int result ; if ( num1 > num2 ) result = num1 ; else result = num2 ; return result ; } \u51fd\u6570\u53c2\u6570 \u00b6 \u5982\u679c\u51fd\u6570\u8981\u4f7f\u7528\u53c2\u6570\uff0c\u5219\u5fc5\u987b\u58f0\u660e\u63a5\u53d7\u53c2\u6570\u503c\u7684\u53d8\u91cf\u3002 \u8fd9\u4e9b\u53d8\u91cf\u79f0\u4e3a\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u3002 \u5f62\u5f0f\u53c2\u6570\u5c31\u50cf\u51fd\u6570\u5185\u7684\u5176\u4ed6\u5c40\u90e8\u53d8\u91cf\uff0c\u5728\u8fdb\u5165\u51fd\u6570\u65f6\u88ab\u521b\u5efa\uff0c\u9000\u51fa\u51fd\u6570\u65f6\u88ab\u9500\u6bc1\u3002 \u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6709\u4e09\u79cd\u5411\u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u65b9\u5f0f\uff1a \u4f20\u503c\u8c03\u7528 \u00b6 \u5411\u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u4f20\u503c\u8c03\u7528\u65b9\u6cd5\uff0c\u628a\u53c2\u6570\u7684\u5b9e\u9645\u503c\u590d\u5236\u7ed9\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u51fd\u6570\u5185\u7684\u5f62\u5f0f\u53c2\u6570\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u9645\u53c2\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC++ \u4f7f\u7528\u503c\u4f20\u9012\u6765\u4f20\u9012\u53c2\u6570\u3002 \u51fd\u6570 swap() \u5b9a\u4e49\u5982\u4e0b\uff1a // \u51fd\u6570\u5b9a\u4e49 void swap ( int x , int y ) { int temp ; temp = x ; /* \u4fdd\u5b58 x \u7684\u503c */ x = y ; /* \u628a y \u8d4b\u503c\u7ed9 x */ y = temp ; /* \u628a x \u8d4b\u503c\u7ed9 y */ return ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u503c\u4f20\u9012\u6765\u8c03\u7528\u51fd\u6570 swap()\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e void swap ( int x , int y ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; cout << \"\u4ea4\u6362\u524d\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u524d\uff0cb \u7684\u503c\uff1a\" << b << endl ; // \u8c03\u7528\u51fd\u6570\u6765\u4ea4\u6362\u503c swap ( a , b ); cout << \"\u4ea4\u6362\u540e\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u540e\uff0cb \u7684\u503c\uff1a\" << b << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u4ea4\u6362\u524d\uff0c a \u7684\u503c\uff1a 100 \u4ea4\u6362\u524d\uff0c b \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c a \u7684\u503c\uff1a 100 \u4ea4\u6362\u540e\uff0c b \u7684\u503c\uff1a 200 \u6307\u9488\u8c03\u7528 \u00b6 \u5411\u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u6307\u9488\u8c03\u7528\u65b9\u6cd5\uff0c\u628a\u53c2\u6570\u7684\u5730\u5740\u590d\u5236\u7ed9\u5f62\u5f0f\u53c2\u6570\u3002\u5728\u51fd\u6570\u5185\uff0c\u8be5\u5730\u5740\u7528\u4e8e\u8bbf\u95ee\u8c03\u7528\u4e2d\u8981\u7528\u5230\u7684\u5b9e\u9645\u53c2\u6570\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4fee\u6539\u5f62\u5f0f\u53c2\u6570\u4f1a\u5f71\u54cd\u5b9e\u9645\u53c2\u6570\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u4fee\u6539\u5f62\u5f0f\u53c2\u6570\u4f1a\u5f71\u54cd\u5b9e\u9645\u53c2\u6570\u3002 // \u51fd\u6570\u5b9a\u4e49 void swap ( int * x , int * y ) { int temp ; temp = * x ; /* \u4fdd\u5b58\u5730\u5740 x \u7684\u503c */ * x = * y ; /* \u628a y \u8d4b\u503c\u7ed9 x */ * y = temp ; /* \u628a x \u8d4b\u503c\u7ed9 y */ return ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u6307\u9488\u4f20\u503c\u6765\u8c03\u7528\u51fd\u6570 swap()\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e void swap ( int * x , int * y ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; cout << \"\u4ea4\u6362\u524d\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u524d\uff0cb \u7684\u503c\uff1a\" << b << endl ; /* \u8c03\u7528\u51fd\u6570\u6765\u4ea4\u6362\u503c * &a \u8868\u793a\u6307\u5411 a \u7684\u6307\u9488\uff0c\u5373\u53d8\u91cf a \u7684\u5730\u5740 * &b \u8868\u793a\u6307\u5411 b \u7684\u6307\u9488\uff0c\u5373\u53d8\u91cf b \u7684\u5730\u5740 */ swap ( & a , & b ); cout << \"\u4ea4\u6362\u540e\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u540e\uff0cb \u7684\u503c\uff1a\" << b << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u4ea4\u6362\u524d\uff0c a \u7684\u503c\uff1a 100 \u4ea4\u6362\u524d\uff0c b \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c a \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c b \u7684\u503c\uff1a 100 \u5f15\u7528\u8c03\u7528 \u00b6 \u5411\u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u5f15\u7528\u8c03\u7528\u65b9\u6cd5\uff0c\u628a\u5f15\u7528\u7684\u5730\u5740\u590d\u5236\u7ed9\u5f62\u5f0f\u53c2\u6570\u3002\u5728\u51fd\u6570\u5185\uff0c\u8be5\u5f15\u7528\u7528\u4e8e\u8bbf\u95ee\u8c03\u7528\u4e2d\u8981\u7528\u5230\u7684\u5b9e\u9645\u53c2\u6570\u3002 \u6309\u5f15\u7528\u4f20\u9012\u503c\uff0c\u53c2\u6570\u5f15\u7528\u88ab\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5c31\u50cf\u4f20\u9012\u5176\u4ed6\u503c\u7ed9\u51fd\u6570\u4e00\u6837\u3002\u56e0\u6b64\u76f8\u5e94\u5730\uff0c\u5728\u4e0b\u9762\u7684\u51fd\u6570 swap() \u4e2d\uff0c\u60a8\u9700\u8981\u58f0\u660e\u51fd\u6570\u53c2\u6570\u4e3a\u5f15\u7528\u7c7b\u578b\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u4ea4\u6362\u53c2\u6570\u6240\u6307\u5411\u7684\u4e24\u4e2a\u6574\u6570\u53d8\u91cf\u7684\u503c\u3002 // \u51fd\u6570\u5b9a\u4e49 void swap ( int & x , int & y ) { int temp ; temp = x ; /* \u4fdd\u5b58\u5730\u5740 x \u7684\u503c */ x = y ; /* \u628a y \u8d4b\u503c\u7ed9 x */ y = temp ; /* \u628a x \u8d4b\u503c\u7ed9 y */ return ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u5f15\u7528\u4f20\u503c\u6765\u8c03\u7528\u51fd\u6570 swap()\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e void swap ( int & x , int & y ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; cout << \"\u4ea4\u6362\u524d\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u524d\uff0cb \u7684\u503c\uff1a\" << b << endl ; /* \u8c03\u7528\u51fd\u6570\u6765\u4ea4\u6362\u503c */ swap ( a , b ); cout << \"\u4ea4\u6362\u540e\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u540e\uff0cb \u7684\u503c\uff1a\" << b << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u4ea4\u6362\u524d\uff0c a \u7684\u503c\uff1a 100 \u4ea4\u6362\u524d\uff0c b \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c a \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c b \u7684\u503c\uff1a 100 \u53c2\u6570\u7684\u9ed8\u8ba4\u503c \u00b6 \u5f53\u60a8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u60a8\u53ef\u4ee5\u4e3a\u53c2\u6570\u5217\u8868\u4e2d\u540e\u8fb9\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002\u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u5982\u679c\u5b9e\u9645\u53c2\u6570\u7684\u503c\u7559\u7a7a\uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4\u503c\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; int sum ( int a , int b = 20 ) { int result ; result = a + b ; return ( result ); } int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; int result ; // \u8c03\u7528\u51fd\u6570\u6765\u6dfb\u52a0\u503c result = sum ( a , b ); cout << \"Total value is :\" << result << endl ; // \u518d\u6b21\u8c03\u7528\u51fd\u6570 result = sum ( a ); cout << \"Total value is :\" << result << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a Total value is : 300 Total value is : 120 Lambda \u51fd\u6570\u4e0e\u8868\u8fbe\u5f0f \u00b6 C++11 \u63d0\u4f9b\u4e86\u5bf9\u533f\u540d\u51fd\u6570\u7684\u652f\u6301,\u79f0\u4e3a Lambda \u51fd\u6570(\u4e5f\u53eb Lambda \u8868\u8fbe\u5f0f)\u3002 Lambda \u8868\u8fbe\u5f0f\u628a\u51fd\u6570\u770b\u4f5c\u5bf9\u8c61\u3002Lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u50cf\u5bf9\u8c61\u4e00\u6837\u4f7f\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u5c06\u5b83\u4eec\u8d4b\u7ed9\u53d8\u91cf\u548c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u8fd8\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u5bf9\u5176\u6c42\u503c\u3002 Lambda \u8868\u8fbe\u5f0f\u672c\u8d28\u4e0a\u4e0e\u51fd\u6570\u58f0\u660e\u975e\u5e38\u7c7b\u4f3c\u3002Lambda \u8868\u8fbe\u5f0f\u5177\u4f53\u5f62\u5f0f\u5982\u4e0b: [capture](parameters)->return-type{body} \u4f8b\u5982\uff1a []( int x , int y ){ return x < y ; } \u5982\u679c\u6ca1\u6709\u8fd4\u56de\u503c\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a [capture](parameters){body} \u4f8b\u5982\uff1a []{ ++ global_x ; } \u5728\u4e00\u4e2a\u66f4\u4e3a\u590d\u6742\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u88ab\u660e\u786e\u7684\u6307\u5b9a\u5982\u4e0b\uff1a []( int x , int y ) -> int { int z = x + y ; return z + x ; } \u672c\u4f8b\u4e2d\uff0c\u4e00\u4e2a\u4e34\u65f6\u7684\u53c2\u6570 z \u88ab\u521b\u5efa\u7528\u6765\u5b58\u50a8\u4e2d\u95f4\u7ed3\u679c\u3002\u5982\u540c\u4e00\u822c\u7684\u51fd\u6570\uff0cz \u7684\u503c\u4e0d\u4f1a\u4fdd\u7559\u5230\u4e0b\u4e00\u6b21\u8be5\u4e0d\u5177\u540d\u51fd\u6570\u518d\u6b21\u88ab\u8c03\u7528\u65f6\u3002 \u5982\u679c lambda \u51fd\u6570\u6ca1\u6709\u4f20\u56de\u503c\uff08\u4f8b\u5982 void\uff09\uff0c\u5176\u8fd4\u56de\u7c7b\u578b\u53ef\u88ab\u5b8c\u5168\u5ffd\u7565\u3002 \u5728Lambda\u8868\u8fbe\u5f0f\u5185\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u8fd9\u662fLambda\u8868\u8fbe\u5f0f\u7684\u95ed\u5305\uff08Closure\uff09\u884c\u4e3a\u3002 \u53ef\u4ee5\u901a\u8fc7\u524d\u9762\u7684[]\u6765\u6307\u5b9a\uff1a [] // \u6c92\u6709\u5b9a\u4e49\u4efb\u4f55\u53d8\u91cf\u3002\u4f7f\u7528\u672a\u5b9a\u4e49\u53d8\u91cf\u4f1a\u5f15\u53d1\u9519\u8bef\u3002 [ x , & y ] // x\u4ee5\u4f20\u503c\u65b9\u5f0f\u4f20\u5165\uff08\u9ed8\u8ba4\uff09\uff0cy\u4ee5\u5f15\u7528\u65b9\u5f0f\u4f20\u5165\u3002 [ & ] // \u4efb\u4f55\u88ab\u4f7f\u7528\u5230\u7684\u5916\u90e8\u53d8\u91cf\u90fd\u9690\u5f0f\u5730\u4ee5\u5f15\u7528\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002 [ = ] // \u4efb\u4f55\u88ab\u4f7f\u7528\u5230\u7684\u5916\u90e8\u53d8\u91cf\u90fd\u9690\u5f0f\u5730\u4ee5\u4f20\u503c\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002 [ & , x ] // x\u663e\u5f0f\u5730\u4ee5\u4f20\u503c\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002\u5176\u4f59\u53d8\u91cf\u4ee5\u5f15\u7528\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002 [ = , & z ] // z\u663e\u5f0f\u5730\u4ee5\u5f15\u7528\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002\u5176\u4f59\u53d8\u91cf\u4ee5\u4f20\u503c\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002 \u53e6\u5916\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u3002\u5bf9\u4e8e[=]\u6216[&]\u7684\u5f62\u5f0f\uff0clambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 this \u6307\u9488\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e[]\u7684\u5f62\u5f0f\uff0c\u5982\u679c\u8981\u4f7f\u7528 this \u6307\u9488\uff0c\u5fc5\u987b\u663e\u5f0f\u4f20\u5165\uff1a [ this ]() { this -> someFunc (); }();","title":"\u51fd\u6570"},{"location":"cpp/%E5%87%BD%E6%95%B0/#_1","text":"C++ \u4e2d\u7684\u51fd\u6570\u5b9a\u4e49\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\uff1a return_type function_name ( parameter list ) { body of the function } \u5728 C++ \u4e2d\uff0c\u51fd\u6570\u7531\u4e00\u4e2a\u51fd\u6570\u5934\u548c\u4e00\u4e2a\u51fd\u6570\u4e3b\u4f53\u7ec4\u6210\u3002\u4e0b\u9762\u5217\u51fa\u4e00\u4e2a\u51fd\u6570\u7684\u6240\u6709\u7ec4\u6210\u90e8\u5206\uff1a \u8fd4\u56de\u7c7b\u578b\uff1a\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u503c\u3002return_type \u662f\u51fd\u6570\u8fd4\u56de\u7684\u503c\u7684\u6570\u636e\u7c7b\u578b\u3002\u6709\u4e9b\u51fd\u6570\u6267\u884c\u6240\u9700\u7684\u64cd\u4f5c\u800c\u4e0d\u8fd4\u56de\u503c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0creturn_type \u662f\u5173\u952e\u5b57 void\u3002 \u51fd\u6570\u540d\u79f0\uff1a\u8fd9\u662f\u51fd\u6570\u7684\u5b9e\u9645\u540d\u79f0\u3002\u51fd\u6570\u540d\u548c\u53c2\u6570\u5217\u8868\u4e00\u8d77\u6784\u6210\u4e86\u51fd\u6570\u7b7e\u540d\u3002 \u53c2\u6570\uff1a\u53c2\u6570\u5c31\u50cf\u662f\u5360\u4f4d\u7b26\u3002\u5f53\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u60a8\u5411\u53c2\u6570\u4f20\u9012\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u88ab\u79f0\u4e3a\u5b9e\u9645\u53c2\u6570\u3002\u53c2\u6570\u5217\u8868\u5305\u62ec\u51fd\u6570\u53c2\u6570\u7684\u7c7b\u578b\u3001\u987a\u5e8f\u3001\u6570\u91cf\u3002\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u51fd\u6570\u53ef\u80fd\u4e0d\u5305\u542b\u53c2\u6570\u3002 \u51fd\u6570\u4e3b\u4f53\uff1a\u51fd\u6570\u4e3b\u4f53\u5305\u542b\u4e00\u7ec4\u5b9a\u4e49\u51fd\u6570\u6267\u884c\u4efb\u52a1\u7684\u8bed\u53e5\u3002 // \u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\u6570 int max ( int num1 , int num2 ) { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int result ; if ( num1 > num2 ) result = num1 ; else result = num2 ; return result ; }","title":"\u5b9a\u4e49\u51fd\u6570"},{"location":"cpp/%E5%87%BD%E6%95%B0/#_2","text":"\u51fd\u6570\u58f0\u660e\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u51fd\u6570\u540d\u79f0\u53ca\u5982\u4f55\u8c03\u7528\u51fd\u6570\u3002 \u51fd\u6570\u7684\u5b9e\u9645\u4e3b\u4f53\u53ef\u4ee5\u5355\u72ec\u5b9a\u4e49\u3002 \u51fd\u6570\u58f0\u660e\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a return_type function_name( parameter list ); \u9488\u5bf9\u4e0a\u9762\u5b9a\u4e49\u7684\u51fd\u6570 max()\uff0c\u4ee5\u4e0b\u662f\u51fd\u6570\u58f0\u660e\uff1a int max(int num1, int num2); \u5728\u51fd\u6570\u58f0\u660e\u4e2d\uff0c\u53c2\u6570\u7684\u540d\u79f0\u5e76\u4e0d\u91cd\u8981\uff0c\u53ea\u6709\u53c2\u6570\u7684\u7c7b\u578b\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u6b64\u4e0b\u9762\u4e5f\u662f\u6709\u6548\u7684\u58f0\u660e\uff1a int max(int, int); \u5f53\u60a8\u5728\u4e00\u4e2a\u6e90\u6587\u4ef6\u4e2d\u5b9a\u4e49\u51fd\u6570\u4e14\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u51fd\u6570\u58f0\u660e\u662f\u5fc5\u9700\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e94\u8be5\u5728\u8c03\u7528\u51fd\u6570\u7684\u6587\u4ef6\u9876\u90e8\u58f0\u660e\u51fd\u6570\u3002","title":"\u51fd\u6570\u58f0\u660e"},{"location":"cpp/%E5%87%BD%E6%95%B0/#_3","text":"\u521b\u5efa C++ \u51fd\u6570\u65f6\uff0c\u4f1a\u5b9a\u4e49\u51fd\u6570\u505a\u4ec0\u4e48\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u7528\u51fd\u6570\u6765\u5b8c\u6210\u5df2\u5b9a\u4e49\u7684\u4efb\u52a1\u3002 \u5f53\u7a0b\u5e8f\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u63a7\u5236\u6743\u4f1a\u8f6c\u79fb\u7ed9\u88ab\u8c03\u7528\u7684\u51fd\u6570\u3002\u88ab\u8c03\u7528\u7684\u51fd\u6570\u6267\u884c\u5df2\u5b9a\u4e49\u7684\u4efb\u52a1\uff0c\u5f53\u51fd\u6570\u7684\u8fd4\u56de\u8bed\u53e5\u88ab\u6267\u884c\u65f6\uff0c\u6216\u5230\u8fbe\u51fd\u6570\u7684\u7ed3\u675f\u62ec\u53f7\u65f6\uff0c\u4f1a\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u4ea4\u8fd8\u7ed9\u4e3b\u7a0b\u5e8f\u3002 \u8c03\u7528\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u6240\u9700\u53c2\u6570\uff0c\u5982\u679c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u5219\u53ef\u4ee5\u5b58\u50a8\u8fd4\u56de\u503c\u3002\u4f8b\u5982\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e int max ( int num1 , int num2 ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; int ret ; // \u8c03\u7528\u51fd\u6570\u6765\u83b7\u53d6\u6700\u5927\u503c ret = max ( a , b ); cout << \"Max value is : \" << ret << endl ; return 0 ; } // \u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u8f83\u5927\u7684\u90a3\u4e2a\u6570 int max ( int num1 , int num2 ) { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int result ; if ( num1 > num2 ) result = num1 ; else result = num2 ; return result ; }","title":"\u8c03\u7528\u51fd\u6570"},{"location":"cpp/%E5%87%BD%E6%95%B0/#_4","text":"\u5982\u679c\u51fd\u6570\u8981\u4f7f\u7528\u53c2\u6570\uff0c\u5219\u5fc5\u987b\u58f0\u660e\u63a5\u53d7\u53c2\u6570\u503c\u7684\u53d8\u91cf\u3002 \u8fd9\u4e9b\u53d8\u91cf\u79f0\u4e3a\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u3002 \u5f62\u5f0f\u53c2\u6570\u5c31\u50cf\u51fd\u6570\u5185\u7684\u5176\u4ed6\u5c40\u90e8\u53d8\u91cf\uff0c\u5728\u8fdb\u5165\u51fd\u6570\u65f6\u88ab\u521b\u5efa\uff0c\u9000\u51fa\u51fd\u6570\u65f6\u88ab\u9500\u6bc1\u3002 \u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6709\u4e09\u79cd\u5411\u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u65b9\u5f0f\uff1a","title":"\u51fd\u6570\u53c2\u6570"},{"location":"cpp/%E5%87%BD%E6%95%B0/#_5","text":"\u5411\u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u4f20\u503c\u8c03\u7528\u65b9\u6cd5\uff0c\u628a\u53c2\u6570\u7684\u5b9e\u9645\u503c\u590d\u5236\u7ed9\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4fee\u6539\u51fd\u6570\u5185\u7684\u5f62\u5f0f\u53c2\u6570\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u9645\u53c2\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC++ \u4f7f\u7528\u503c\u4f20\u9012\u6765\u4f20\u9012\u53c2\u6570\u3002 \u51fd\u6570 swap() \u5b9a\u4e49\u5982\u4e0b\uff1a // \u51fd\u6570\u5b9a\u4e49 void swap ( int x , int y ) { int temp ; temp = x ; /* \u4fdd\u5b58 x \u7684\u503c */ x = y ; /* \u628a y \u8d4b\u503c\u7ed9 x */ y = temp ; /* \u628a x \u8d4b\u503c\u7ed9 y */ return ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u503c\u4f20\u9012\u6765\u8c03\u7528\u51fd\u6570 swap()\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e void swap ( int x , int y ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; cout << \"\u4ea4\u6362\u524d\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u524d\uff0cb \u7684\u503c\uff1a\" << b << endl ; // \u8c03\u7528\u51fd\u6570\u6765\u4ea4\u6362\u503c swap ( a , b ); cout << \"\u4ea4\u6362\u540e\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u540e\uff0cb \u7684\u503c\uff1a\" << b << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u4ea4\u6362\u524d\uff0c a \u7684\u503c\uff1a 100 \u4ea4\u6362\u524d\uff0c b \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c a \u7684\u503c\uff1a 100 \u4ea4\u6362\u540e\uff0c b \u7684\u503c\uff1a 200","title":"\u4f20\u503c\u8c03\u7528"},{"location":"cpp/%E5%87%BD%E6%95%B0/#_6","text":"\u5411\u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u6307\u9488\u8c03\u7528\u65b9\u6cd5\uff0c\u628a\u53c2\u6570\u7684\u5730\u5740\u590d\u5236\u7ed9\u5f62\u5f0f\u53c2\u6570\u3002\u5728\u51fd\u6570\u5185\uff0c\u8be5\u5730\u5740\u7528\u4e8e\u8bbf\u95ee\u8c03\u7528\u4e2d\u8981\u7528\u5230\u7684\u5b9e\u9645\u53c2\u6570\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4fee\u6539\u5f62\u5f0f\u53c2\u6570\u4f1a\u5f71\u54cd\u5b9e\u9645\u53c2\u6570\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u4fee\u6539\u5f62\u5f0f\u53c2\u6570\u4f1a\u5f71\u54cd\u5b9e\u9645\u53c2\u6570\u3002 // \u51fd\u6570\u5b9a\u4e49 void swap ( int * x , int * y ) { int temp ; temp = * x ; /* \u4fdd\u5b58\u5730\u5740 x \u7684\u503c */ * x = * y ; /* \u628a y \u8d4b\u503c\u7ed9 x */ * y = temp ; /* \u628a x \u8d4b\u503c\u7ed9 y */ return ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u6307\u9488\u4f20\u503c\u6765\u8c03\u7528\u51fd\u6570 swap()\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e void swap ( int * x , int * y ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; cout << \"\u4ea4\u6362\u524d\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u524d\uff0cb \u7684\u503c\uff1a\" << b << endl ; /* \u8c03\u7528\u51fd\u6570\u6765\u4ea4\u6362\u503c * &a \u8868\u793a\u6307\u5411 a \u7684\u6307\u9488\uff0c\u5373\u53d8\u91cf a \u7684\u5730\u5740 * &b \u8868\u793a\u6307\u5411 b \u7684\u6307\u9488\uff0c\u5373\u53d8\u91cf b \u7684\u5730\u5740 */ swap ( & a , & b ); cout << \"\u4ea4\u6362\u540e\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u540e\uff0cb \u7684\u503c\uff1a\" << b << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u4ea4\u6362\u524d\uff0c a \u7684\u503c\uff1a 100 \u4ea4\u6362\u524d\uff0c b \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c a \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c b \u7684\u503c\uff1a 100","title":"\u6307\u9488\u8c03\u7528"},{"location":"cpp/%E5%87%BD%E6%95%B0/#_7","text":"\u5411\u51fd\u6570\u4f20\u9012\u53c2\u6570\u7684\u5f15\u7528\u8c03\u7528\u65b9\u6cd5\uff0c\u628a\u5f15\u7528\u7684\u5730\u5740\u590d\u5236\u7ed9\u5f62\u5f0f\u53c2\u6570\u3002\u5728\u51fd\u6570\u5185\uff0c\u8be5\u5f15\u7528\u7528\u4e8e\u8bbf\u95ee\u8c03\u7528\u4e2d\u8981\u7528\u5230\u7684\u5b9e\u9645\u53c2\u6570\u3002 \u6309\u5f15\u7528\u4f20\u9012\u503c\uff0c\u53c2\u6570\u5f15\u7528\u88ab\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u5c31\u50cf\u4f20\u9012\u5176\u4ed6\u503c\u7ed9\u51fd\u6570\u4e00\u6837\u3002\u56e0\u6b64\u76f8\u5e94\u5730\uff0c\u5728\u4e0b\u9762\u7684\u51fd\u6570 swap() \u4e2d\uff0c\u60a8\u9700\u8981\u58f0\u660e\u51fd\u6570\u53c2\u6570\u4e3a\u5f15\u7528\u7c7b\u578b\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u4ea4\u6362\u53c2\u6570\u6240\u6307\u5411\u7684\u4e24\u4e2a\u6574\u6570\u53d8\u91cf\u7684\u503c\u3002 // \u51fd\u6570\u5b9a\u4e49 void swap ( int & x , int & y ) { int temp ; temp = x ; /* \u4fdd\u5b58\u5730\u5740 x \u7684\u503c */ x = y ; /* \u628a y \u8d4b\u503c\u7ed9 x */ y = temp ; /* \u628a x \u8d4b\u503c\u7ed9 y */ return ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u5f15\u7528\u4f20\u503c\u6765\u8c03\u7528\u51fd\u6570 swap()\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e void swap ( int & x , int & y ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; cout << \"\u4ea4\u6362\u524d\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u524d\uff0cb \u7684\u503c\uff1a\" << b << endl ; /* \u8c03\u7528\u51fd\u6570\u6765\u4ea4\u6362\u503c */ swap ( a , b ); cout << \"\u4ea4\u6362\u540e\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u540e\uff0cb \u7684\u503c\uff1a\" << b << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u4ea4\u6362\u524d\uff0c a \u7684\u503c\uff1a 100 \u4ea4\u6362\u524d\uff0c b \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c a \u7684\u503c\uff1a 200 \u4ea4\u6362\u540e\uff0c b \u7684\u503c\uff1a 100","title":"\u5f15\u7528\u8c03\u7528"},{"location":"cpp/%E5%87%BD%E6%95%B0/#_8","text":"\u5f53\u60a8\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u60a8\u53ef\u4ee5\u4e3a\u53c2\u6570\u5217\u8868\u4e2d\u540e\u8fb9\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002\u5f53\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u5982\u679c\u5b9e\u9645\u53c2\u6570\u7684\u503c\u7559\u7a7a\uff0c\u5219\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4\u503c\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; int sum ( int a , int b = 20 ) { int result ; result = a + b ; return ( result ); } int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; int result ; // \u8c03\u7528\u51fd\u6570\u6765\u6dfb\u52a0\u503c result = sum ( a , b ); cout << \"Total value is :\" << result << endl ; // \u518d\u6b21\u8c03\u7528\u51fd\u6570 result = sum ( a ); cout << \"Total value is :\" << result << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a Total value is : 300 Total value is : 120","title":"\u53c2\u6570\u7684\u9ed8\u8ba4\u503c"},{"location":"cpp/%E5%87%BD%E6%95%B0/#lambda","text":"C++11 \u63d0\u4f9b\u4e86\u5bf9\u533f\u540d\u51fd\u6570\u7684\u652f\u6301,\u79f0\u4e3a Lambda \u51fd\u6570(\u4e5f\u53eb Lambda \u8868\u8fbe\u5f0f)\u3002 Lambda \u8868\u8fbe\u5f0f\u628a\u51fd\u6570\u770b\u4f5c\u5bf9\u8c61\u3002Lambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u50cf\u5bf9\u8c61\u4e00\u6837\u4f7f\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u5c06\u5b83\u4eec\u8d4b\u7ed9\u53d8\u91cf\u548c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u8fd8\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u5bf9\u5176\u6c42\u503c\u3002 Lambda \u8868\u8fbe\u5f0f\u672c\u8d28\u4e0a\u4e0e\u51fd\u6570\u58f0\u660e\u975e\u5e38\u7c7b\u4f3c\u3002Lambda \u8868\u8fbe\u5f0f\u5177\u4f53\u5f62\u5f0f\u5982\u4e0b: [capture](parameters)->return-type{body} \u4f8b\u5982\uff1a []( int x , int y ){ return x < y ; } \u5982\u679c\u6ca1\u6709\u8fd4\u56de\u503c\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a [capture](parameters){body} \u4f8b\u5982\uff1a []{ ++ global_x ; } \u5728\u4e00\u4e2a\u66f4\u4e3a\u590d\u6742\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u88ab\u660e\u786e\u7684\u6307\u5b9a\u5982\u4e0b\uff1a []( int x , int y ) -> int { int z = x + y ; return z + x ; } \u672c\u4f8b\u4e2d\uff0c\u4e00\u4e2a\u4e34\u65f6\u7684\u53c2\u6570 z \u88ab\u521b\u5efa\u7528\u6765\u5b58\u50a8\u4e2d\u95f4\u7ed3\u679c\u3002\u5982\u540c\u4e00\u822c\u7684\u51fd\u6570\uff0cz \u7684\u503c\u4e0d\u4f1a\u4fdd\u7559\u5230\u4e0b\u4e00\u6b21\u8be5\u4e0d\u5177\u540d\u51fd\u6570\u518d\u6b21\u88ab\u8c03\u7528\u65f6\u3002 \u5982\u679c lambda \u51fd\u6570\u6ca1\u6709\u4f20\u56de\u503c\uff08\u4f8b\u5982 void\uff09\uff0c\u5176\u8fd4\u56de\u7c7b\u578b\u53ef\u88ab\u5b8c\u5168\u5ffd\u7565\u3002 \u5728Lambda\u8868\u8fbe\u5f0f\u5185\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u8fd9\u662fLambda\u8868\u8fbe\u5f0f\u7684\u95ed\u5305\uff08Closure\uff09\u884c\u4e3a\u3002 \u53ef\u4ee5\u901a\u8fc7\u524d\u9762\u7684[]\u6765\u6307\u5b9a\uff1a [] // \u6c92\u6709\u5b9a\u4e49\u4efb\u4f55\u53d8\u91cf\u3002\u4f7f\u7528\u672a\u5b9a\u4e49\u53d8\u91cf\u4f1a\u5f15\u53d1\u9519\u8bef\u3002 [ x , & y ] // x\u4ee5\u4f20\u503c\u65b9\u5f0f\u4f20\u5165\uff08\u9ed8\u8ba4\uff09\uff0cy\u4ee5\u5f15\u7528\u65b9\u5f0f\u4f20\u5165\u3002 [ & ] // \u4efb\u4f55\u88ab\u4f7f\u7528\u5230\u7684\u5916\u90e8\u53d8\u91cf\u90fd\u9690\u5f0f\u5730\u4ee5\u5f15\u7528\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002 [ = ] // \u4efb\u4f55\u88ab\u4f7f\u7528\u5230\u7684\u5916\u90e8\u53d8\u91cf\u90fd\u9690\u5f0f\u5730\u4ee5\u4f20\u503c\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002 [ & , x ] // x\u663e\u5f0f\u5730\u4ee5\u4f20\u503c\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002\u5176\u4f59\u53d8\u91cf\u4ee5\u5f15\u7528\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002 [ = , & z ] // z\u663e\u5f0f\u5730\u4ee5\u5f15\u7528\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002\u5176\u4f59\u53d8\u91cf\u4ee5\u4f20\u503c\u65b9\u5f0f\u52a0\u4ee5\u5f15\u7528\u3002 \u53e6\u5916\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u3002\u5bf9\u4e8e[=]\u6216[&]\u7684\u5f62\u5f0f\uff0clambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 this \u6307\u9488\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e[]\u7684\u5f62\u5f0f\uff0c\u5982\u679c\u8981\u4f7f\u7528 this \u6307\u9488\uff0c\u5fc5\u987b\u663e\u5f0f\u4f20\u5165\uff1a [ this ]() { this -> someFunc (); }();","title":"Lambda \u51fd\u6570\u4e0e\u8868\u8fbe\u5f0f"},{"location":"cpp/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/","text":"\u4e86\u89e3\u52a8\u6001\u5185\u5b58\u5728 C++ \u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u662f\u6210\u4e3a\u4e00\u540d\u5408\u683c\u7684 C++ \u7a0b\u5e8f\u5458\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002 C++ \u7a0b\u5e8f\u4e2d\u7684\u5185\u5b58\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a \u6808\uff1a\u5728\u51fd\u6570\u5185\u90e8\u58f0\u660e\u7684\u6240\u6709\u53d8\u91cf\u90fd\u5c06\u5360\u7528\u6808\u5185\u5b58\u3002 \u5806\uff1a\u8fd9\u662f\u7a0b\u5e8f\u4e2d\u672a\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53ef\u7528\u4e8e\u52a8\u6001\u5206\u914d\u5185\u5b58\u3002 \u5f88\u591a\u65f6\u5019\uff0c\u60a8\u65e0\u6cd5\u63d0\u524d\u9884\u77e5\u9700\u8981\u591a\u5c11\u5185\u5b58\u6765\u5b58\u50a8\u67d0\u4e2a\u5b9a\u4e49\u53d8\u91cf\u4e2d\u7684\u7279\u5b9a\u4fe1\u606f\uff0c\u6240\u9700\u5185\u5b58\u7684\u5927\u5c0f\u9700\u8981\u5728\u8fd0\u884c\u65f6\u624d\u80fd\u786e\u5b9a\u3002 \u5728 C++ \u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u7684\u8fd0\u7b97\u7b26\u4e3a\u7ed9\u5b9a\u7c7b\u578b\u7684\u53d8\u91cf\u5728\u8fd0\u884c\u65f6\u5206\u914d\u5806\u5185\u7684\u5185\u5b58\uff0c\u8fd9\u4f1a\u8fd4\u56de\u6240\u5206\u914d\u7684\u7a7a\u95f4\u5730\u5740\u3002\u8fd9\u79cd\u8fd0\u7b97\u7b26\u5373 new \u8fd0\u7b97\u7b26\u3002 \u5982\u679c\u60a8\u4e0d\u518d\u9700\u8981\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528 delete \u8fd0\u7b97\u7b26\uff0c\u5220\u9664\u4e4b\u524d\u7531 new \u8fd0\u7b97\u7b26\u5206\u914d\u7684\u5185\u5b58\u3002 new \u548c delete \u8fd0\u7b97\u7b26 \u00b6 \u4e0b\u9762\u662f\u4f7f\u7528 new \u8fd0\u7b97\u7b26\u6765\u4e3a\u4efb\u610f\u7684\u6570\u636e\u7c7b\u578b\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u901a\u7528\u8bed\u6cd5\uff1a new data - type ; \u5728\u8fd9\u91cc\uff0cdata-type \u53ef\u4ee5\u662f\u5305\u62ec\u6570\u7ec4\u5728\u5185\u7684\u4efb\u610f\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u62ec\u7c7b\u6216\u7ed3\u6784\u5728\u5185\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u3002 \u8ba9\u6211\u4eec\u5148\u6765\u770b\u4e0b\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411 double \u7c7b\u578b\u7684\u6307\u9488\uff0c\u7136\u540e\u8bf7\u6c42\u5185\u5b58\uff0c\u8be5\u5185\u5b58\u5728\u6267\u884c\u65f6\u88ab\u5206\u914d\u3002 \u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u8bed\u53e5\u4f7f\u7528 new \u8fd0\u7b97\u7b26\u6765\u5b8c\u6210\u8fd9\u70b9\uff1a double * pvalue = NULL ; // \u521d\u59cb\u5316\u4e3a null \u7684\u6307\u9488 pvalue = new double ; // \u4e3a\u53d8\u91cf\u8bf7\u6c42\u5185\u5b58 \u5982\u679c\u81ea\u7531\u5b58\u50a8\u533a\u5df2\u88ab\u7528\u5b8c\uff0c\u53ef\u80fd\u65e0\u6cd5\u6210\u529f\u5206\u914d\u5185\u5b58\u3002\u6240\u4ee5\u5efa\u8bae\u68c0\u67e5 new \u8fd0\u7b97\u7b26\u662f\u5426\u8fd4\u56de NULL \u6307\u9488\uff0c\u5e76\u91c7\u53d6\u4ee5\u4e0b\u9002\u5f53\u7684\u64cd\u4f5c\uff1a double * pvalue = NULL ; if ( ! ( pvalue = new double )) { cout << \"Error: out of memory.\" << endl ; exit ( 1 ); } malloc() \u51fd\u6570\u5728 C \u8bed\u8a00\u4e2d\u5c31\u51fa\u73b0\u4e86\uff0c\u5728 C++ \u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u5efa\u8bae\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528 malloc() \u51fd\u6570\u3002new \u4e0e malloc() \u51fd\u6570\u76f8\u6bd4\uff0c\u5176\u4e3b\u8981\u7684\u4f18\u70b9\u662f\uff0cnew \u4e0d\u53ea\u662f\u5206\u914d\u4e86\u5185\u5b58\uff0c\u5b83\u8fd8\u521b\u5efa\u4e86\u5bf9\u8c61\u3002 \u5728\u4efb\u4f55\u65f6\u5019\uff0c\u5f53\u60a8\u89c9\u5f97\u67d0\u4e2a\u5df2\u7ecf\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u53d8\u91cf\u4e0d\u518d\u9700\u8981\u4f7f\u7528\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 delete \u64cd\u4f5c\u7b26\u91ca\u653e\u5b83\u6240\u5360\u7528\u7684\u5185\u5b58\uff0c\u5982\u4e0b\u6240\u793a\uff1a delete pvalue ; // \u91ca\u653e pvalue \u6240\u6307\u5411\u7684\u5185\u5b58 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u4e86\u4e0a\u9762\u7684\u6982\u5ff5\uff0c\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 new \u548c delete \u8fd0\u7b97\u7b26\uff1a #include <iostream> using namespace std ; int main () { double * pvalue = NULL ; // \u521d\u59cb\u5316\u4e3a null \u7684\u6307\u9488 pvalue = new double ; // \u4e3a\u53d8\u91cf\u8bf7\u6c42\u5185\u5b58 * pvalue = 29494.99 ; // \u5728\u5206\u914d\u7684\u5730\u5740\u5b58\u50a8\u503c cout << \"Value of pvalue : \" << * pvalue << endl ; delete pvalue ; // \u91ca\u653e\u5185\u5b58 return 0 ; } \u6570\u7ec4\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d \u00b6 \u5047\u8bbe\u6211\u4eec\u8981\u4e3a\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff08\u4e00\u4e2a\u6709 20 \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff09\u5206\u914d\u5185\u5b58\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5b9e\u4f8b\u4e2d\u7684\u8bed\u6cd5\u6765\u4e3a\u6570\u7ec4\u52a8\u6001\u5730\u5206\u914d\u5185\u5b58\uff0c\u5982\u4e0b\u6240\u793a\uff1a char * pvalue = NULL ; // \u521d\u59cb\u5316\u4e3a null \u7684\u6307\u9488 pvalue = new char [ 20 ]; // \u4e3a\u53d8\u91cf\u8bf7\u6c42\u5185\u5b58 \u8981\u5220\u9664\u6211\u4eec\u521a\u624d\u521b\u5efa\u7684\u6570\u7ec4\uff0c\u8bed\u53e5\u5982\u4e0b\uff1a delete [] pvalue ; // \u5220\u9664 pvalue \u6240\u6307\u5411\u7684\u6570\u7ec4 \u4e0b\u9762\u662f new \u64cd\u4f5c\u7b26\u7684\u901a\u7528\u8bed\u6cd5\uff0c\u53ef\u4ee5\u4e3a\u591a\u7ef4\u6570\u7ec4\u5206\u914d\u5185\u5b58\uff0c\u5982\u4e0b\u6240\u793a\uff1a // \u52a8\u6001\u5206\u914d,\u6570\u7ec4\u957f\u5ea6\u4e3a m int * array = new int [ m ]; //\u91ca\u653e\u5185\u5b58 delete [] array ; \u4e8c\u7ef4\u6570\u7ec4 int ** array // \u5047\u5b9a\u6570\u7ec4\u7b2c\u4e00\u7ef4\u957f\u5ea6\u4e3a m\uff0c \u7b2c\u4e8c\u7ef4\u957f\u5ea6\u4e3a n // \u52a8\u6001\u5206\u914d\u7a7a\u95f4 array = new int * [ m ]; for ( int i = 0 ; i < m ; i ++ ) { array [ i ] = new int [ n ] ; } //\u91ca\u653e for ( int i = 0 ; i < m ; i ++ ) { delete [] array [ i ]; } delete [] array ; \u4e8c\u7ef4\u6570\u7ec4\u5b9e\u4f8b\u6d4b\u8bd5\uff1a #include <iostream> using namespace std ; int main () { int ** p ; int i , j ; //p[4][8] //\u5f00\u59cb\u5206\u914d4\u884c8\u5217\u7684\u4e8c\u7ef4\u6570\u636e p = new int * [ 4 ]; for ( i = 0 ; i < 4 ; i ++ ){ p [ i ] = new int [ 8 ]; } for ( i = 0 ; i < 4 ; i ++ ){ for ( j = 0 ; j < 8 ; j ++ ){ p [ i ][ j ] = j * i ; } } //\u6253\u5370\u6570\u636e for ( i = 0 ; i < 4 ; i ++ ){ for ( j = 0 ; j < 8 ; j ++ ) { if ( j == 0 ) cout << endl ; cout << p [ i ][ j ] << \" \\t \" ; } } //\u5f00\u59cb\u91ca\u653e\u7533\u8bf7\u7684\u5806 for ( i = 0 ; i < 4 ; i ++ ){ delete [] p [ i ]; } delete [] p ; return 0 ; } \u5bf9\u8c61\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d \u00b6 \u5bf9\u8c61\u4e0e\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 \u4f8b\u5982\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\u6765\u7406\u6e05\u8fd9\u4e00\u6982\u5ff5\uff1a #include <iostream> using namespace std ; class Box { public : Box () { cout << \"\u8c03\u7528\u6784\u9020\u51fd\u6570\uff01\" << endl ; } ~ Box () { cout << \"\u8c03\u7528\u6790\u6784\u51fd\u6570\uff01\" << endl ; } }; int main ( ) { Box * myBoxArray = new Box [ 4 ]; delete [] myBoxArray ; // \u5220\u9664\u6570\u7ec4 return 0 ; } \u5982\u679c\u8981\u4e3a\u4e00\u4e2a\u5305\u542b\u56db\u4e2a Box \u5bf9\u8c61\u7684\u6570\u7ec4\u5206\u914d\u5185\u5b58\uff0c\u6784\u9020\u51fd\u6570\u5c06\u88ab\u8c03\u7528 4 \u6b21\uff0c\u540c\u6837\u5730\uff0c\u5f53\u5220\u9664\u8fd9\u4e9b\u5bf9\u8c61\u65f6\uff0c\u6790\u6784\u51fd\u6570\u4e5f\u5c06\u88ab\u8c03\u7528\u76f8\u540c\u7684\u6b21\u6570\uff084\u6b21\uff09\u3002","title":"\u52a8\u6001\u5185\u5b58"},{"location":"cpp/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/#new-delete","text":"\u4e0b\u9762\u662f\u4f7f\u7528 new \u8fd0\u7b97\u7b26\u6765\u4e3a\u4efb\u610f\u7684\u6570\u636e\u7c7b\u578b\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u901a\u7528\u8bed\u6cd5\uff1a new data - type ; \u5728\u8fd9\u91cc\uff0cdata-type \u53ef\u4ee5\u662f\u5305\u62ec\u6570\u7ec4\u5728\u5185\u7684\u4efb\u610f\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u62ec\u7c7b\u6216\u7ed3\u6784\u5728\u5185\u7684\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u4efb\u4f55\u6570\u636e\u7c7b\u578b\u3002 \u8ba9\u6211\u4eec\u5148\u6765\u770b\u4e0b\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411 double \u7c7b\u578b\u7684\u6307\u9488\uff0c\u7136\u540e\u8bf7\u6c42\u5185\u5b58\uff0c\u8be5\u5185\u5b58\u5728\u6267\u884c\u65f6\u88ab\u5206\u914d\u3002 \u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u8bed\u53e5\u4f7f\u7528 new \u8fd0\u7b97\u7b26\u6765\u5b8c\u6210\u8fd9\u70b9\uff1a double * pvalue = NULL ; // \u521d\u59cb\u5316\u4e3a null \u7684\u6307\u9488 pvalue = new double ; // \u4e3a\u53d8\u91cf\u8bf7\u6c42\u5185\u5b58 \u5982\u679c\u81ea\u7531\u5b58\u50a8\u533a\u5df2\u88ab\u7528\u5b8c\uff0c\u53ef\u80fd\u65e0\u6cd5\u6210\u529f\u5206\u914d\u5185\u5b58\u3002\u6240\u4ee5\u5efa\u8bae\u68c0\u67e5 new \u8fd0\u7b97\u7b26\u662f\u5426\u8fd4\u56de NULL \u6307\u9488\uff0c\u5e76\u91c7\u53d6\u4ee5\u4e0b\u9002\u5f53\u7684\u64cd\u4f5c\uff1a double * pvalue = NULL ; if ( ! ( pvalue = new double )) { cout << \"Error: out of memory.\" << endl ; exit ( 1 ); } malloc() \u51fd\u6570\u5728 C \u8bed\u8a00\u4e2d\u5c31\u51fa\u73b0\u4e86\uff0c\u5728 C++ \u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u5efa\u8bae\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528 malloc() \u51fd\u6570\u3002new \u4e0e malloc() \u51fd\u6570\u76f8\u6bd4\uff0c\u5176\u4e3b\u8981\u7684\u4f18\u70b9\u662f\uff0cnew \u4e0d\u53ea\u662f\u5206\u914d\u4e86\u5185\u5b58\uff0c\u5b83\u8fd8\u521b\u5efa\u4e86\u5bf9\u8c61\u3002 \u5728\u4efb\u4f55\u65f6\u5019\uff0c\u5f53\u60a8\u89c9\u5f97\u67d0\u4e2a\u5df2\u7ecf\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u53d8\u91cf\u4e0d\u518d\u9700\u8981\u4f7f\u7528\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 delete \u64cd\u4f5c\u7b26\u91ca\u653e\u5b83\u6240\u5360\u7528\u7684\u5185\u5b58\uff0c\u5982\u4e0b\u6240\u793a\uff1a delete pvalue ; // \u91ca\u653e pvalue \u6240\u6307\u5411\u7684\u5185\u5b58 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u4e86\u4e0a\u9762\u7684\u6982\u5ff5\uff0c\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 new \u548c delete \u8fd0\u7b97\u7b26\uff1a #include <iostream> using namespace std ; int main () { double * pvalue = NULL ; // \u521d\u59cb\u5316\u4e3a null \u7684\u6307\u9488 pvalue = new double ; // \u4e3a\u53d8\u91cf\u8bf7\u6c42\u5185\u5b58 * pvalue = 29494.99 ; // \u5728\u5206\u914d\u7684\u5730\u5740\u5b58\u50a8\u503c cout << \"Value of pvalue : \" << * pvalue << endl ; delete pvalue ; // \u91ca\u653e\u5185\u5b58 return 0 ; }","title":"new \u548c delete \u8fd0\u7b97\u7b26"},{"location":"cpp/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/#_1","text":"\u5047\u8bbe\u6211\u4eec\u8981\u4e3a\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff08\u4e00\u4e2a\u6709 20 \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff09\u5206\u914d\u5185\u5b58\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5b9e\u4f8b\u4e2d\u7684\u8bed\u6cd5\u6765\u4e3a\u6570\u7ec4\u52a8\u6001\u5730\u5206\u914d\u5185\u5b58\uff0c\u5982\u4e0b\u6240\u793a\uff1a char * pvalue = NULL ; // \u521d\u59cb\u5316\u4e3a null \u7684\u6307\u9488 pvalue = new char [ 20 ]; // \u4e3a\u53d8\u91cf\u8bf7\u6c42\u5185\u5b58 \u8981\u5220\u9664\u6211\u4eec\u521a\u624d\u521b\u5efa\u7684\u6570\u7ec4\uff0c\u8bed\u53e5\u5982\u4e0b\uff1a delete [] pvalue ; // \u5220\u9664 pvalue \u6240\u6307\u5411\u7684\u6570\u7ec4 \u4e0b\u9762\u662f new \u64cd\u4f5c\u7b26\u7684\u901a\u7528\u8bed\u6cd5\uff0c\u53ef\u4ee5\u4e3a\u591a\u7ef4\u6570\u7ec4\u5206\u914d\u5185\u5b58\uff0c\u5982\u4e0b\u6240\u793a\uff1a // \u52a8\u6001\u5206\u914d,\u6570\u7ec4\u957f\u5ea6\u4e3a m int * array = new int [ m ]; //\u91ca\u653e\u5185\u5b58 delete [] array ; \u4e8c\u7ef4\u6570\u7ec4 int ** array // \u5047\u5b9a\u6570\u7ec4\u7b2c\u4e00\u7ef4\u957f\u5ea6\u4e3a m\uff0c \u7b2c\u4e8c\u7ef4\u957f\u5ea6\u4e3a n // \u52a8\u6001\u5206\u914d\u7a7a\u95f4 array = new int * [ m ]; for ( int i = 0 ; i < m ; i ++ ) { array [ i ] = new int [ n ] ; } //\u91ca\u653e for ( int i = 0 ; i < m ; i ++ ) { delete [] array [ i ]; } delete [] array ; \u4e8c\u7ef4\u6570\u7ec4\u5b9e\u4f8b\u6d4b\u8bd5\uff1a #include <iostream> using namespace std ; int main () { int ** p ; int i , j ; //p[4][8] //\u5f00\u59cb\u5206\u914d4\u884c8\u5217\u7684\u4e8c\u7ef4\u6570\u636e p = new int * [ 4 ]; for ( i = 0 ; i < 4 ; i ++ ){ p [ i ] = new int [ 8 ]; } for ( i = 0 ; i < 4 ; i ++ ){ for ( j = 0 ; j < 8 ; j ++ ){ p [ i ][ j ] = j * i ; } } //\u6253\u5370\u6570\u636e for ( i = 0 ; i < 4 ; i ++ ){ for ( j = 0 ; j < 8 ; j ++ ) { if ( j == 0 ) cout << endl ; cout << p [ i ][ j ] << \" \\t \" ; } } //\u5f00\u59cb\u91ca\u653e\u7533\u8bf7\u7684\u5806 for ( i = 0 ; i < 4 ; i ++ ){ delete [] p [ i ]; } delete [] p ; return 0 ; }","title":"\u6570\u7ec4\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d"},{"location":"cpp/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/#_2","text":"\u5bf9\u8c61\u4e0e\u7b80\u5355\u7684\u6570\u636e\u7c7b\u578b\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002 \u4f8b\u5982\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u5bf9\u8c61\u6570\u7ec4\u6765\u7406\u6e05\u8fd9\u4e00\u6982\u5ff5\uff1a #include <iostream> using namespace std ; class Box { public : Box () { cout << \"\u8c03\u7528\u6784\u9020\u51fd\u6570\uff01\" << endl ; } ~ Box () { cout << \"\u8c03\u7528\u6790\u6784\u51fd\u6570\uff01\" << endl ; } }; int main ( ) { Box * myBoxArray = new Box [ 4 ]; delete [] myBoxArray ; // \u5220\u9664\u6570\u7ec4 return 0 ; } \u5982\u679c\u8981\u4e3a\u4e00\u4e2a\u5305\u542b\u56db\u4e2a Box \u5bf9\u8c61\u7684\u6570\u7ec4\u5206\u914d\u5185\u5b58\uff0c\u6784\u9020\u51fd\u6570\u5c06\u88ab\u8c03\u7528 4 \u6b21\uff0c\u540c\u6837\u5730\uff0c\u5f53\u5220\u9664\u8fd9\u4e9b\u5bf9\u8c61\u65f6\uff0c\u6790\u6784\u51fd\u6570\u4e5f\u5c06\u88ab\u8c03\u7528\u76f8\u540c\u7684\u6b21\u6570\uff084\u6b21\uff09\u3002","title":"\u5bf9\u8c61\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d"},{"location":"cpp/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/","text":"\u5c40\u90e8\u53d8\u91cf \u00b6 \u5728\u51fd\u6570\u6216\u4e00\u4e2a\u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\u3002\u5b83\u4eec\u53ea\u80fd\u88ab\u51fd\u6570\u5185\u90e8\u6216\u8005\u4ee3\u7801\u5757\u5185\u90e8\u7684\u8bed\u53e5\u4f7f\u7528\u3002 #include <iostream> using namespace std ; int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a , b ; int c ; // \u5b9e\u9645\u521d\u59cb\u5316 a = 10 ; b = 20 ; c = a + b ; cout << c ; return 0 ; } \u5168\u5c40\u53d8\u91cf \u00b6 \u5728\u6240\u6709\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff08\u901a\u5e38\u662f\u5728\u7a0b\u5e8f\u7684\u5934\u90e8\uff09\uff0c\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\u3002\u5168\u5c40\u53d8\u91cf\u7684\u503c\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u5185\u90fd\u662f\u6709\u6548\u7684\u3002 \u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u88ab\u4efb\u4f55\u51fd\u6570\u8bbf\u95ee\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5168\u5c40\u53d8\u91cf\u4e00\u65e6\u58f0\u660e\uff0c\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u90fd\u662f\u53ef\u7528\u7684\u3002 #include <iostream> using namespace std ; // \u5168\u5c40\u53d8\u91cf\u58f0\u660e int g ; int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a , b ; // \u5b9e\u9645\u521d\u59cb\u5316 a = 10 ; b = 20 ; g = a + b ; cout << g ; return 0 ; } \u5728\u7a0b\u5e8f\u4e2d\uff0c\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u7684\u540d\u79f0\u53ef\u4ee5\u76f8\u540c\uff0c\u4f46\u662f\u5728\u51fd\u6570\u5185\uff0c\u5c40\u90e8\u53d8\u91cf\u7684\u503c\u4f1a\u8986\u76d6\u5168\u5c40\u53d8\u91cf\u7684\u503c\u3002 #include <iostream> using namespace std ; // \u5168\u5c40\u53d8\u91cf\u58f0\u660e int g = 20 ; int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int g = 10 ; cout << g ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a 10 \u521d\u59cb\u5316\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf \u00b6 \u5f53\u5c40\u90e8\u53d8\u91cf\u88ab\u5b9a\u4e49\u65f6\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u5bf9\u5176\u521d\u59cb\u5316\uff0c\u60a8\u5fc5\u987b\u81ea\u884c\u5bf9\u5176\u521d\u59cb\u5316\u3002 \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u4e0b\u5217\u503c\uff1a","title":"\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"cpp/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/#_1","text":"\u5728\u51fd\u6570\u6216\u4e00\u4e2a\u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\u3002\u5b83\u4eec\u53ea\u80fd\u88ab\u51fd\u6570\u5185\u90e8\u6216\u8005\u4ee3\u7801\u5757\u5185\u90e8\u7684\u8bed\u53e5\u4f7f\u7528\u3002 #include <iostream> using namespace std ; int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a , b ; int c ; // \u5b9e\u9645\u521d\u59cb\u5316 a = 10 ; b = 20 ; c = a + b ; cout << c ; return 0 ; }","title":"\u5c40\u90e8\u53d8\u91cf"},{"location":"cpp/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/#_2","text":"\u5728\u6240\u6709\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff08\u901a\u5e38\u662f\u5728\u7a0b\u5e8f\u7684\u5934\u90e8\uff09\uff0c\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\u3002\u5168\u5c40\u53d8\u91cf\u7684\u503c\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u5185\u90fd\u662f\u6709\u6548\u7684\u3002 \u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u88ab\u4efb\u4f55\u51fd\u6570\u8bbf\u95ee\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5168\u5c40\u53d8\u91cf\u4e00\u65e6\u58f0\u660e\uff0c\u5728\u6574\u4e2a\u7a0b\u5e8f\u4e2d\u90fd\u662f\u53ef\u7528\u7684\u3002 #include <iostream> using namespace std ; // \u5168\u5c40\u53d8\u91cf\u58f0\u660e int g ; int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a , b ; // \u5b9e\u9645\u521d\u59cb\u5316 a = 10 ; b = 20 ; g = a + b ; cout << g ; return 0 ; } \u5728\u7a0b\u5e8f\u4e2d\uff0c\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u7684\u540d\u79f0\u53ef\u4ee5\u76f8\u540c\uff0c\u4f46\u662f\u5728\u51fd\u6570\u5185\uff0c\u5c40\u90e8\u53d8\u91cf\u7684\u503c\u4f1a\u8986\u76d6\u5168\u5c40\u53d8\u91cf\u7684\u503c\u3002 #include <iostream> using namespace std ; // \u5168\u5c40\u53d8\u91cf\u58f0\u660e int g = 20 ; int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int g = 10 ; cout << g ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a 10","title":"\u5168\u5c40\u53d8\u91cf"},{"location":"cpp/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/#_3","text":"\u5f53\u5c40\u90e8\u53d8\u91cf\u88ab\u5b9a\u4e49\u65f6\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u5bf9\u5176\u521d\u59cb\u5316\uff0c\u60a8\u5fc5\u987b\u81ea\u884c\u5bf9\u5176\u521d\u59cb\u5316\u3002 \u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u4e3a\u4e0b\u5217\u503c\uff1a","title":"\u521d\u59cb\u5316\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf"},{"location":"cpp/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/","text":"\u5047\u8bbe\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff0c\u5f53\u4e00\u4e2a\u73ed\u4e0a\u6709\u4e24\u4e2a\u540d\u53eb Zara \u7684\u5b66\u751f\u65f6\uff0c\u4e3a\u4e86\u660e\u786e\u533a\u5206\u5b83\u4eec\uff0c\u6211\u4eec\u5728\u4f7f\u7528\u540d\u5b57\u4e4b\u5916\uff0c\u4e0d\u5f97\u4e0d\u4f7f\u7528\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u4ed6\u4eec\u7684\u5bb6\u5ead\u4f4f\u5740\uff0c\u6216\u8005\u4ed6\u4eec\u7236\u6bcd\u7684\u540d\u5b57\u7b49\u7b49\u3002 \u540c\u6837\u7684\u60c5\u51b5\u4e5f\u51fa\u73b0\u5728 C++ \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u4f1a\u5199\u4e00\u4e2a\u540d\u4e3a xyz() \u7684\u51fd\u6570\uff0c\u5728\u53e6\u4e00\u4e2a\u53ef\u7528\u7684\u5e93\u4e2d\u4e5f\u5b58\u5728\u4e00\u4e2a\u76f8\u540c\u7684\u51fd\u6570 xyz()\u3002\u8fd9\u6837\uff0c\u7f16\u8bd1\u5668\u5c31\u65e0\u6cd5\u5224\u65ad\u60a8\u6240\u4f7f\u7528\u7684\u662f\u54ea\u4e00\u4e2a xyz() \u51fd\u6570\u3002 \u56e0\u6b64\uff0c\u5f15\u5165\u4e86\u547d\u540d\u7a7a\u95f4\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4e13\u95e8\u7528\u4e8e\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u5b83\u53ef\u4f5c\u4e3a\u9644\u52a0\u4fe1\u606f\u6765\u533a\u5206\u4e0d\u540c\u5e93\u4e2d\u76f8\u540c\u540d\u79f0\u7684\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u7b49\u3002\u4f7f\u7528\u4e86\u547d\u540d\u7a7a\u95f4\u5373\u5b9a\u4e49\u4e86\u4e0a\u4e0b\u6587\u3002\u672c\u8d28\u4e0a\uff0c\u547d\u540d\u7a7a\u95f4\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8303\u56f4\u3002 \u5b9a\u4e49\u547d\u540d\u7a7a\u95f4 \u00b6 \u547d\u540d\u7a7a\u95f4\u7684\u5b9a\u4e49\u4f7f\u7528\u5173\u952e\u5b57 namespace\uff0c\u540e\u8ddf\u547d\u540d\u7a7a\u95f4\u7684\u540d\u79f0\uff0c\u5982\u4e0b\u6240\u793a\uff1a namespace namespace_name { // \u4ee3\u7801\u58f0\u660e } \u4e3a\u4e86\u8c03\u7528\u5e26\u6709\u547d\u540d\u7a7a\u95f4\u7684\u51fd\u6570\u6216\u53d8\u91cf\uff0c\u9700\u8981\u5728\u524d\u9762\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\u7684\u540d\u79f0\uff0c\u5982\u4e0b\u6240\u793a\uff1a namespace_name :: code ; // code \u53ef\u4ee5\u662f\u53d8\u91cf\u6216\u51fd\u6570 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u547d\u540d\u7a7a\u95f4\u5982\u4f55\u4e3a\u53d8\u91cf\u6216\u51fd\u6570\u7b49\u5b9e\u4f53\u5b9a\u4e49\u8303\u56f4\uff1a #include <iostream> using namespace std ; // \u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 namespace first_space { void func (){ cout << \"Inside first_space\" << endl ; } } // \u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4 namespace second_space { void func (){ cout << \"Inside second_space\" << endl ; } } int main () { // \u8c03\u7528\u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 first_space :: func (); // \u8c03\u7528\u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 second_space :: func (); return 0 ; } using \u6307\u4ee4 \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528 using namespace \u6307\u4ee4\uff0c\u8fd9\u6837\u5728\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u65f6\u5c31\u53ef\u4ee5\u4e0d\u7528\u5728\u524d\u9762\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\u7684\u540d\u79f0\u3002\u8fd9\u4e2a\u6307\u4ee4\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u540e\u7eed\u7684\u4ee3\u7801\u5c06\u4f7f\u7528\u6307\u5b9a\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u79f0\u3002 #include <iostream> using namespace std ; // \u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 namespace first_space { void func (){ cout << \"Inside first_space\" << endl ; } } // \u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4 namespace second_space { void func (){ cout << \"Inside second_space\" << endl ; } } using namespace first_space ; int main () { // \u8c03\u7528\u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 func (); return 0 ; } using \u6307\u4ee4\u4e5f\u53ef\u4ee5\u7528\u6765\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u7279\u5b9a\u9879\u76ee\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u53ea\u6253\u7b97\u4f7f\u7528 std \u547d\u540d\u7a7a\u95f4\u4e2d\u7684 cout \u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u8bed\u53e5\uff1a using std :: cout ; \u968f\u540e\u7684\u4ee3\u7801\u4e2d\uff0c\u5728\u4f7f\u7528 cout \u65f6\u5c31\u53ef\u4ee5\u4e0d\u7528\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\uff0c\u4f46\u662f std \u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u5176\u4ed6\u9879\u76ee\u4ecd\u7136\u9700\u8981\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using std :: cout ; int main () { cout << \"std::endl is used with std!\" << std :: endl ; return 0 ; } using \u6307\u4ee4\u5f15\u5165\u7684\u540d\u79f0\u9075\u5faa\u6b63\u5e38\u7684\u8303\u56f4\u89c4\u5219\u3002\u540d\u79f0\u4ece\u4f7f\u7528 using \u6307\u4ee4\u5f00\u59cb\u662f\u53ef\u89c1\u7684\uff0c\u76f4\u5230\u8be5\u8303\u56f4\u7ed3\u675f\u3002\u6b64\u65f6\uff0c\u5728\u8303\u56f4\u4ee5\u5916\u5b9a\u4e49\u7684\u540c\u540d\u5b9e\u4f53\u662f\u9690\u85cf\u7684\u3002 \u4e0d\u8fde\u7eed\u7684\u547d\u540d\u7a7a\u95f4 \u00b6 \u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5b9a\u4e49\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u90e8\u5206\u4e2d\uff0c\u56e0\u6b64\u547d\u540d\u7a7a\u95f4\u662f\u7531\u51e0\u4e2a\u5355\u72ec\u5b9a\u4e49\u7684\u90e8\u5206\u7ec4\u6210\u7684\u3002\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\u53ef\u4ee5\u5206\u6563\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e2a\u7ec4\u6210\u90e8\u5206\u9700\u8981\u8bf7\u6c42\u5b9a\u4e49\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u540d\u79f0\uff0c\u5219\u4ecd\u7136\u9700\u8981\u58f0\u660e\u8be5\u540d\u79f0\u3002 \u4e0b\u9762\u7684\u547d\u540d\u7a7a\u95f4\u5b9a\u4e49\u53ef\u4ee5\u662f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e3a\u5df2\u6709\u7684\u547d\u540d\u7a7a\u95f4\u589e\u52a0\u65b0\u7684\u5143\u7d20\uff1a namespace namespace_name { // \u4ee3\u7801\u58f0\u660e } \u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4 \u00b6 \u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5d4c\u5957\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u5b9a\u4e49\u53e6\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u4e0b\u6240\u793a\uff1a namespace namespace_name1 { // \u4ee3\u7801\u58f0\u660e namespace namespace_name2 { // \u4ee3\u7801\u58f0\u660e } } \u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 :: \u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6210\u5458\uff1a // \u8bbf\u95ee namespace_name2 \u4e2d\u7684\u6210\u5458 using namespace namespace_name1 :: namespace_name2 ; // \u8bbf\u95ee namespace:name1 \u4e2d\u7684\u6210\u5458 using namespace namespace_name1 ; \u5728\u4e0a\u9762\u7684\u8bed\u53e5\u4e2d\uff0c\u5982\u679c\u4f7f\u7528\u7684\u662f namespace_name1\uff0c\u90a3\u4e48\u5728\u8be5\u8303\u56f4\u5185 namespace_name2 \u4e2d\u7684\u5143\u7d20\u4e5f\u662f\u53ef\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; // \u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 namespace first_space { void func (){ cout << \"Inside first_space\" << endl ; } // \u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4 namespace second_space { void func (){ cout << \"Inside second_space\" << endl ; } } } using namespace first_space :: second_space ; int main () { // \u8c03\u7528\u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 func (); return 0 ; }","title":"\u547d\u540d\u7a7a\u95f4"},{"location":"cpp/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/#_1","text":"\u547d\u540d\u7a7a\u95f4\u7684\u5b9a\u4e49\u4f7f\u7528\u5173\u952e\u5b57 namespace\uff0c\u540e\u8ddf\u547d\u540d\u7a7a\u95f4\u7684\u540d\u79f0\uff0c\u5982\u4e0b\u6240\u793a\uff1a namespace namespace_name { // \u4ee3\u7801\u58f0\u660e } \u4e3a\u4e86\u8c03\u7528\u5e26\u6709\u547d\u540d\u7a7a\u95f4\u7684\u51fd\u6570\u6216\u53d8\u91cf\uff0c\u9700\u8981\u5728\u524d\u9762\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\u7684\u540d\u79f0\uff0c\u5982\u4e0b\u6240\u793a\uff1a namespace_name :: code ; // code \u53ef\u4ee5\u662f\u53d8\u91cf\u6216\u51fd\u6570 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u547d\u540d\u7a7a\u95f4\u5982\u4f55\u4e3a\u53d8\u91cf\u6216\u51fd\u6570\u7b49\u5b9e\u4f53\u5b9a\u4e49\u8303\u56f4\uff1a #include <iostream> using namespace std ; // \u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 namespace first_space { void func (){ cout << \"Inside first_space\" << endl ; } } // \u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4 namespace second_space { void func (){ cout << \"Inside second_space\" << endl ; } } int main () { // \u8c03\u7528\u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 first_space :: func (); // \u8c03\u7528\u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 second_space :: func (); return 0 ; }","title":"\u5b9a\u4e49\u547d\u540d\u7a7a\u95f4"},{"location":"cpp/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/#using","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 using namespace \u6307\u4ee4\uff0c\u8fd9\u6837\u5728\u4f7f\u7528\u547d\u540d\u7a7a\u95f4\u65f6\u5c31\u53ef\u4ee5\u4e0d\u7528\u5728\u524d\u9762\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\u7684\u540d\u79f0\u3002\u8fd9\u4e2a\u6307\u4ee4\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u540e\u7eed\u7684\u4ee3\u7801\u5c06\u4f7f\u7528\u6307\u5b9a\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u540d\u79f0\u3002 #include <iostream> using namespace std ; // \u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 namespace first_space { void func (){ cout << \"Inside first_space\" << endl ; } } // \u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4 namespace second_space { void func (){ cout << \"Inside second_space\" << endl ; } } using namespace first_space ; int main () { // \u8c03\u7528\u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 func (); return 0 ; } using \u6307\u4ee4\u4e5f\u53ef\u4ee5\u7528\u6765\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u7279\u5b9a\u9879\u76ee\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u53ea\u6253\u7b97\u4f7f\u7528 std \u547d\u540d\u7a7a\u95f4\u4e2d\u7684 cout \u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u8bed\u53e5\uff1a using std :: cout ; \u968f\u540e\u7684\u4ee3\u7801\u4e2d\uff0c\u5728\u4f7f\u7528 cout \u65f6\u5c31\u53ef\u4ee5\u4e0d\u7528\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\uff0c\u4f46\u662f std \u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u5176\u4ed6\u9879\u76ee\u4ecd\u7136\u9700\u8981\u52a0\u4e0a\u547d\u540d\u7a7a\u95f4\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using std :: cout ; int main () { cout << \"std::endl is used with std!\" << std :: endl ; return 0 ; } using \u6307\u4ee4\u5f15\u5165\u7684\u540d\u79f0\u9075\u5faa\u6b63\u5e38\u7684\u8303\u56f4\u89c4\u5219\u3002\u540d\u79f0\u4ece\u4f7f\u7528 using \u6307\u4ee4\u5f00\u59cb\u662f\u53ef\u89c1\u7684\uff0c\u76f4\u5230\u8be5\u8303\u56f4\u7ed3\u675f\u3002\u6b64\u65f6\uff0c\u5728\u8303\u56f4\u4ee5\u5916\u5b9a\u4e49\u7684\u540c\u540d\u5b9e\u4f53\u662f\u9690\u85cf\u7684\u3002","title":"using \u6307\u4ee4"},{"location":"cpp/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/#_2","text":"\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5b9a\u4e49\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u90e8\u5206\u4e2d\uff0c\u56e0\u6b64\u547d\u540d\u7a7a\u95f4\u662f\u7531\u51e0\u4e2a\u5355\u72ec\u5b9a\u4e49\u7684\u90e8\u5206\u7ec4\u6210\u7684\u3002\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\u53ef\u4ee5\u5206\u6563\u5728\u591a\u4e2a\u6587\u4ef6\u4e2d\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e2a\u7ec4\u6210\u90e8\u5206\u9700\u8981\u8bf7\u6c42\u5b9a\u4e49\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u540d\u79f0\uff0c\u5219\u4ecd\u7136\u9700\u8981\u58f0\u660e\u8be5\u540d\u79f0\u3002 \u4e0b\u9762\u7684\u547d\u540d\u7a7a\u95f4\u5b9a\u4e49\u53ef\u4ee5\u662f\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e3a\u5df2\u6709\u7684\u547d\u540d\u7a7a\u95f4\u589e\u52a0\u65b0\u7684\u5143\u7d20\uff1a namespace namespace_name { // \u4ee3\u7801\u58f0\u660e }","title":"\u4e0d\u8fde\u7eed\u7684\u547d\u540d\u7a7a\u95f4"},{"location":"cpp/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/#_3","text":"\u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5d4c\u5957\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u5b9a\u4e49\u53e6\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u5982\u4e0b\u6240\u793a\uff1a namespace namespace_name1 { // \u4ee3\u7801\u58f0\u660e namespace namespace_name2 { // \u4ee3\u7801\u58f0\u660e } } \u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 :: \u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6210\u5458\uff1a // \u8bbf\u95ee namespace_name2 \u4e2d\u7684\u6210\u5458 using namespace namespace_name1 :: namespace_name2 ; // \u8bbf\u95ee namespace:name1 \u4e2d\u7684\u6210\u5458 using namespace namespace_name1 ; \u5728\u4e0a\u9762\u7684\u8bed\u53e5\u4e2d\uff0c\u5982\u679c\u4f7f\u7528\u7684\u662f namespace_name1\uff0c\u90a3\u4e48\u5728\u8be5\u8303\u56f4\u5185 namespace_name2 \u4e2d\u7684\u5143\u7d20\u4e5f\u662f\u53ef\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; // \u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 namespace first_space { void func (){ cout << \"Inside first_space\" << endl ; } // \u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4 namespace second_space { void func (){ cout << \"Inside second_space\" << endl ; } } } using namespace first_space :: second_space ; int main () { // \u8c03\u7528\u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 func (); return 0 ; }","title":"\u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/","text":"C++ \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e30\u5bcc\u7684\u8f93\u5165/\u8f93\u51fa\u529f\u80fd\uff0c\u6211\u4eec\u5c06\u5728\u540e\u7eed\u7684\u7ae0\u8282\u8fdb\u884c\u4ecb\u7ecd\u3002 \u672c\u7ae0\u5c06\u8ba8\u8bba C++ \u7f16\u7a0b\u4e2d\u6700\u57fa\u672c\u548c\u6700\u5e38\u89c1\u7684 I/O \u64cd\u4f5c\u3002 C++ \u7684 I/O \u53d1\u751f\u5728\u6d41\u4e2d\uff0c\u6d41\u662f\u5b57\u8282\u5e8f\u5217\u3002\u5982\u679c\u5b57\u8282\u6d41\u662f\u4ece\u8bbe\u5907\uff08\u5982\u952e\u76d8\u3001\u78c1\u76d8\u9a71\u52a8\u5668\u3001\u7f51\u7edc\u8fde\u63a5\u7b49\uff09\u6d41\u5411\u5185\u5b58\uff0c\u8fd9\u53eb\u505a\u8f93\u5165\u64cd\u4f5c\u3002\u5982\u679c\u5b57\u8282\u6d41\u662f\u4ece\u5185\u5b58\u6d41\u5411\u8bbe\u5907\uff08\u5982\u663e\u793a\u5c4f\u3001\u6253\u5370\u673a\u3001\u78c1\u76d8\u9a71\u52a8\u5668\u3001\u7f51\u7edc\u8fde\u63a5\u7b49\uff09\uff0c\u8fd9\u53eb\u505a\u8f93\u51fa\u64cd\u4f5c\u3002 I/O \u5e93\u5934\u6587\u4ef6 \u00b6 \u4e0b\u5217\u7684\u5934\u6587\u4ef6\u5728 C++ \u7f16\u7a0b\u4e2d\u5f88\u91cd\u8981\u3002 \u6807\u51c6\u8f93\u51fa\u6d41\uff08cout\uff09 \u00b6 \u9884\u5b9a\u4e49\u7684\u5bf9\u8c61 cout \u662f iostream \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002cout \u5bf9\u8c61\"\u8fde\u63a5\"\u5230\u6807\u51c6\u8f93\u51fa\u8bbe\u5907\uff0c\u901a\u5e38\u662f\u663e\u793a\u5c4f\u3002cout \u662f\u4e0e\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main ( ) { char str [] = \"Hello C++\" ; cout << \"Value of str is : \" << str << endl ; } C++ \u7f16\u8bd1\u5668\u6839\u636e\u8981\u8f93\u51fa\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\uff0c\u9009\u62e9\u5408\u9002\u7684\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26\u6765\u663e\u793a\u503c\u3002 << \u8fd0\u7b97\u7b26\u88ab\u91cd\u8f7d\u6765\u8f93\u51fa\u5185\u7f6e\u7c7b\u578b\uff08\u6574\u578b\u3001\u6d6e\u70b9\u578b\u3001double \u578b\u3001\u5b57\u7b26\u4e32\u548c\u6307\u9488\uff09\u7684\u6570\u636e\u9879\u3002 \u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u5982\u4e0a\u9762\u5b9e\u4f8b\u4e2d\u6240\u793a\uff0cendl \u7528\u4e8e\u5728\u884c\u672b\u6dfb\u52a0\u4e00\u4e2a\u6362\u884c\u7b26\u3002 \u6807\u51c6\u8f93\u5165\u6d41\uff08cin\uff09 \u00b6 \u9884\u5b9a\u4e49\u7684\u5bf9\u8c61 cin \u662f iostream \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002cin \u5bf9\u8c61\u9644\u5c5e\u5230\u6807\u51c6\u8f93\u5165\u8bbe\u5907\uff0c\u901a\u5e38\u662f\u952e\u76d8\u3002cin \u662f\u4e0e\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26 >> \u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main ( ) { char name [ 50 ]; cout << \"\u8bf7\u8f93\u5165\u60a8\u7684\u540d\u79f0\uff1a \" ; cin >> name ; cout << \"\u60a8\u7684\u540d\u79f0\u662f\uff1a \" << name << endl ; } C++ \u7f16\u8bd1\u5668\u6839\u636e\u8981\u8f93\u5165\u503c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u9009\u62e9\u5408\u9002\u7684\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\u6765\u63d0\u53d6\u503c\uff0c\u5e76\u628a\u5b83\u5b58\u50a8\u5728\u7ed9\u5b9a\u7684\u53d8\u91cf\u4e2d\u3002 \u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26 >> \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u5982\u679c\u8981\u6c42\u8f93\u5165\u591a\u4e2a\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8bed\u53e5\uff1a cin >> name >> age ; \u8fd9\u76f8\u5f53\u4e8e\u4e0b\u9762\u4e24\u4e2a\u8bed\u53e5\uff1a cin >> name ; cin >> age ; \u6807\u51c6\u9519\u8bef\u6d41\uff08cerr\uff09 \u00b6 \u9884\u5b9a\u4e49\u7684\u5bf9\u8c61 cerr \u662f iostream \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002cerr \u5bf9\u8c61\u9644\u5c5e\u5230\u6807\u51c6\u9519\u8bef\u8bbe\u5907\uff0c\u901a\u5e38\u4e5f\u662f\u663e\u793a\u5c4f\uff0c\u4f46\u662f cerr \u5bf9\u8c61\u662f\u975e\u7f13\u51b2\u7684\uff0c\u4e14\u6bcf\u4e2a\u6d41\u63d2\u5165\u5230 cerr \u90fd\u4f1a\u7acb\u5373\u8f93\u51fa\u3002 cerr \u4e5f\u662f\u4e0e\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main ( ) { char str [] = \"Unable to read....\" ; cerr << \"Error message : \" << str << endl ; } \u6807\u51c6\u65e5\u5fd7\u6d41\uff08clog\uff09 \u00b6 \u9884\u5b9a\u4e49\u7684\u5bf9\u8c61 clog \u662f iostream \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002clog \u5bf9\u8c61\u9644\u5c5e\u5230\u6807\u51c6\u9519\u8bef\u8bbe\u5907\uff0c\u901a\u5e38\u4e5f\u662f\u663e\u793a\u5c4f\uff0c\u4f46\u662f clog \u5bf9\u8c61\u662f\u7f13\u51b2\u7684\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u6d41\u63d2\u5165\u5230 clog \u90fd\u4f1a\u5148\u5b58\u50a8\u5728\u7f13\u51b2\u533a\uff0c\u76f4\u5230\u7f13\u51b2\u586b\u6ee1\u6216\u8005\u7f13\u51b2\u533a\u5237\u65b0\u65f6\u624d\u4f1a\u8f93\u51fa\u3002 clog \u4e5f\u662f\u4e0e\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main ( ) { char str [] = \"Unable to read....\" ; clog << \"Error message : \" << str << endl ; } \u901a\u8fc7\u8fd9\u4e9b\u5c0f\u5b9e\u4f8b\uff0c\u6211\u4eec\u65e0\u6cd5\u533a\u5206 cout\u3001cerr \u548c clog \u7684\u5dee\u5f02\uff0c\u4f46\u5728\u7f16\u5199\u548c\u6267\u884c\u5927\u578b\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u5f02\u5c31\u53d8\u5f97\u975e\u5e38\u660e\u663e\u3002 \u6240\u4ee5\u826f\u597d\u7684\u7f16\u7a0b\u5b9e\u8df5\u544a\u8bc9\u6211\u4eec\uff0c\u4f7f\u7528 cerr \u6d41\u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\uff0c\u800c\u5176\u4ed6\u7684\u65e5\u5fd7\u6d88\u606f\u5219\u4f7f\u7528 clog \u6d41\u6765\u8f93\u51fa\u3002","title":"\u57fa\u672c\u7684\u8f93\u5165\u8f93\u51fa"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#io","text":"\u4e0b\u5217\u7684\u5934\u6587\u4ef6\u5728 C++ \u7f16\u7a0b\u4e2d\u5f88\u91cd\u8981\u3002","title":"I/O \u5e93\u5934\u6587\u4ef6"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#cout","text":"\u9884\u5b9a\u4e49\u7684\u5bf9\u8c61 cout \u662f iostream \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002cout \u5bf9\u8c61\"\u8fde\u63a5\"\u5230\u6807\u51c6\u8f93\u51fa\u8bbe\u5907\uff0c\u901a\u5e38\u662f\u663e\u793a\u5c4f\u3002cout \u662f\u4e0e\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main ( ) { char str [] = \"Hello C++\" ; cout << \"Value of str is : \" << str << endl ; } C++ \u7f16\u8bd1\u5668\u6839\u636e\u8981\u8f93\u51fa\u53d8\u91cf\u7684\u6570\u636e\u7c7b\u578b\uff0c\u9009\u62e9\u5408\u9002\u7684\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26\u6765\u663e\u793a\u503c\u3002 << \u8fd0\u7b97\u7b26\u88ab\u91cd\u8f7d\u6765\u8f93\u51fa\u5185\u7f6e\u7c7b\u578b\uff08\u6574\u578b\u3001\u6d6e\u70b9\u578b\u3001double \u578b\u3001\u5b57\u7b26\u4e32\u548c\u6307\u9488\uff09\u7684\u6570\u636e\u9879\u3002 \u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u5982\u4e0a\u9762\u5b9e\u4f8b\u4e2d\u6240\u793a\uff0cendl \u7528\u4e8e\u5728\u884c\u672b\u6dfb\u52a0\u4e00\u4e2a\u6362\u884c\u7b26\u3002","title":"\u6807\u51c6\u8f93\u51fa\u6d41\uff08cout\uff09"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#cin","text":"\u9884\u5b9a\u4e49\u7684\u5bf9\u8c61 cin \u662f iostream \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002cin \u5bf9\u8c61\u9644\u5c5e\u5230\u6807\u51c6\u8f93\u5165\u8bbe\u5907\uff0c\u901a\u5e38\u662f\u952e\u76d8\u3002cin \u662f\u4e0e\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26 >> \u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main ( ) { char name [ 50 ]; cout << \"\u8bf7\u8f93\u5165\u60a8\u7684\u540d\u79f0\uff1a \" ; cin >> name ; cout << \"\u60a8\u7684\u540d\u79f0\u662f\uff1a \" << name << endl ; } C++ \u7f16\u8bd1\u5668\u6839\u636e\u8981\u8f93\u5165\u503c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u9009\u62e9\u5408\u9002\u7684\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\u6765\u63d0\u53d6\u503c\uff0c\u5e76\u628a\u5b83\u5b58\u50a8\u5728\u7ed9\u5b9a\u7684\u53d8\u91cf\u4e2d\u3002 \u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26 >> \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u5982\u679c\u8981\u6c42\u8f93\u5165\u591a\u4e2a\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8bed\u53e5\uff1a cin >> name >> age ; \u8fd9\u76f8\u5f53\u4e8e\u4e0b\u9762\u4e24\u4e2a\u8bed\u53e5\uff1a cin >> name ; cin >> age ;","title":"\u6807\u51c6\u8f93\u5165\u6d41\uff08cin\uff09"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#cerr","text":"\u9884\u5b9a\u4e49\u7684\u5bf9\u8c61 cerr \u662f iostream \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002cerr \u5bf9\u8c61\u9644\u5c5e\u5230\u6807\u51c6\u9519\u8bef\u8bbe\u5907\uff0c\u901a\u5e38\u4e5f\u662f\u663e\u793a\u5c4f\uff0c\u4f46\u662f cerr \u5bf9\u8c61\u662f\u975e\u7f13\u51b2\u7684\uff0c\u4e14\u6bcf\u4e2a\u6d41\u63d2\u5165\u5230 cerr \u90fd\u4f1a\u7acb\u5373\u8f93\u51fa\u3002 cerr \u4e5f\u662f\u4e0e\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main ( ) { char str [] = \"Unable to read....\" ; cerr << \"Error message : \" << str << endl ; }","title":"\u6807\u51c6\u9519\u8bef\u6d41\uff08cerr\uff09"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/#clog","text":"\u9884\u5b9a\u4e49\u7684\u5bf9\u8c61 clog \u662f iostream \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002clog \u5bf9\u8c61\u9644\u5c5e\u5230\u6807\u51c6\u9519\u8bef\u8bbe\u5907\uff0c\u901a\u5e38\u4e5f\u662f\u663e\u793a\u5c4f\uff0c\u4f46\u662f clog \u5bf9\u8c61\u662f\u7f13\u51b2\u7684\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u6d41\u63d2\u5165\u5230 clog \u90fd\u4f1a\u5148\u5b58\u50a8\u5728\u7f13\u51b2\u533a\uff0c\u76f4\u5230\u7f13\u51b2\u586b\u6ee1\u6216\u8005\u7f13\u51b2\u533a\u5237\u65b0\u65f6\u624d\u4f1a\u8f93\u51fa\u3002 clog \u4e5f\u662f\u4e0e\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main ( ) { char str [] = \"Unable to read....\" ; clog << \"Error message : \" << str << endl ; } \u901a\u8fc7\u8fd9\u4e9b\u5c0f\u5b9e\u4f8b\uff0c\u6211\u4eec\u65e0\u6cd5\u533a\u5206 cout\u3001cerr \u548c clog \u7684\u5dee\u5f02\uff0c\u4f46\u5728\u7f16\u5199\u548c\u6267\u884c\u5927\u578b\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u5f02\u5c31\u53d8\u5f97\u975e\u5e38\u660e\u663e\u3002 \u6240\u4ee5\u826f\u597d\u7684\u7f16\u7a0b\u5b9e\u8df5\u544a\u8bc9\u6211\u4eec\uff0c\u4f7f\u7528 cerr \u6d41\u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\uff0c\u800c\u5176\u4ed6\u7684\u65e5\u5fd7\u6d88\u606f\u5219\u4f7f\u7528 clog \u6d41\u6765\u8f93\u51fa\u3002","title":"\u6807\u51c6\u65e5\u5fd7\u6d41\uff08clog\uff09"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","text":"C++ \u7a0b\u5e8f\u7ed3\u6784 \u00b6 \u8ba9\u6211\u4eec\u770b\u4e00\u6bb5\u7b80\u5355\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u8f93\u51fa\u5355\u8bcd Hello World\u3002 #include <iostream> using namespace std ; // main() \u662f\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u7684\u5730\u65b9 int main () { cout << \"Hello World\" ; // \u8f93\u51fa Hello World return 0 ; } \u63a5\u4e0b\u6765\u6211\u4eec\u8bb2\u89e3\u4e00\u4e0b\u4e0a\u9762\u8fd9\u6bb5\u7a0b\u5e8f\uff1a C++ \u8bed\u8a00\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5934\u6587\u4ef6\uff0c\u8fd9\u4e9b\u5934\u6587\u4ef6\u5305\u542b\u4e86\u7a0b\u5e8f\u4e2d\u5fc5\u9700\u7684\u6216\u6709\u7528\u7684\u4fe1\u606f\u3002\u4e0a\u9762\u8fd9\u6bb5\u7a0b\u5e8f\u4e2d\uff0c\u5305\u542b\u4e86\u5934\u6587\u4ef6 \u3002 \u4e0b\u4e00\u884c using namespace std; \u544a\u8bc9\u7f16\u8bd1\u5668\u4f7f\u7528 std \u547d\u540d\u7a7a\u95f4\u3002\u547d\u540d\u7a7a\u95f4\u662f C++ \u4e2d\u4e00\u4e2a\u76f8\u5bf9\u65b0\u7684\u6982\u5ff5\u3002 \u4e0b\u4e00\u884c // main() \u662f\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u7684\u5730\u65b9 \u662f\u4e00\u4e2a\u5355\u884c\u6ce8\u91ca\u3002\u5355\u884c\u6ce8\u91ca\u4ee5 // \u5f00\u5934\uff0c\u5728\u884c\u672b\u7ed3\u675f\u3002 \u4e0b\u4e00\u884c int main() \u662f\u4e3b\u51fd\u6570\uff0c\u7a0b\u5e8f\u4ece\u8fd9\u91cc\u5f00\u59cb\u6267\u884c\u3002 \u4e0b\u4e00\u884c cout << \"Hello World\"; \u4f1a\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u6d88\u606f \"Hello World\"\u3002 \u4e0b\u4e00\u884c return 0; \u7ec8\u6b62 main( )\u51fd\u6570\uff0c\u5e76\u5411\u8c03\u7528\u8fdb\u7a0b\u8fd4\u56de\u503c 0\u3002 \u7f16\u8bd1 & \u6267\u884c C++ \u7a0b\u5e8f \u00b6 \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u628a\u6e90\u4ee3\u7801\u4fdd\u5b58\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u8bd1\u5e76\u8fd0\u884c\u5b83\u3002\u4e0b\u9762\u662f\u7b80\u5355\u7684\u6b65\u9aa4\uff1a \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\uff0c\u6dfb\u52a0\u4e0a\u8ff0\u4ee3\u7801\u3002 \u4fdd\u5b58\u6587\u4ef6\u4e3a hello.cpp\u3002 \u6253\u5f00\u547d\u4ee4\u63d0\u793a\u7b26\uff0c\u8fdb\u5165\u5230\u4fdd\u5b58\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u3002 \u952e\u5165 'g++ hello.cpp '\uff0c\u8f93\u5165\u56de\u8f66\uff0c\u7f16\u8bd1\u4ee3\u7801\u3002\u5982\u679c\u4ee3\u7801\u4e2d\u6ca1\u6709\u9519\u8bef\uff0c\u547d\u4ee4\u63d0\u793a\u7b26\u4f1a\u8df3\u5230\u4e0b\u4e00\u884c\uff0c\u5e76\u751f\u6210 a.out \u53ef\u6267\u884c\u6587\u4ef6\u3002 \u73b0\u5728\uff0c\u952e\u5165 ' a.out' \u6765\u8fd0\u884c\u7a0b\u5e8f\u3002 \u60a8\u53ef\u4ee5\u770b\u5230\u5c4f\u5e55\u4e0a\u663e\u793a ' Hello World '\u3002 $ g++ hello.cpp $ ./a.out Hello World \u8bf7\u786e\u4fdd\u60a8\u7684\u8def\u5f84\u4e2d\u5df2\u5305\u542b g++ \u7f16\u8bd1\u5668\uff0c\u5e76\u786e\u4fdd\u5728\u5305\u542b\u6e90\u6587\u4ef6 hello.cpp \u7684\u76ee\u5f55\u4e2d\u8fd0\u884c\u5b83\u3002 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 makefile \u6765\u7f16\u8bd1 C/C++ \u7a0b\u5e8f\u3002 C++ \u4e2d\u7684\u5206\u53f7 & \u8bed\u53e5\u5757 \u00b6 \u5728 C++ \u4e2d\uff0c\u5206\u53f7\u662f\u8bed\u53e5\u7ed3\u675f\u7b26\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u8bed\u53e5\u5fc5\u987b\u4ee5\u5206\u53f7\u7ed3\u675f\u3002\u5b83\u8868\u660e\u4e00\u4e2a\u903b\u8f91\u5b9e\u4f53\u7684\u7ed3\u675f\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e09\u4e2a\u4e0d\u540c\u7684\u8bed\u53e5\uff1a x = y ; y = y + 1 ; add ( x , y ); \u8bed\u53e5\u5757\u662f\u4e00\u7ec4\u4f7f\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u6309\u903b\u8f91\u8fde\u63a5\u7684\u8bed\u53e5\u3002\u4f8b\u5982\uff1a { cout << \"Hello World\" ; // \u8f93\u51fa Hello World return 0 ; } C++ \u4e0d\u4ee5\u884c\u672b\u4f5c\u4e3a\u7ed3\u675f\u7b26\u7684\u6807\u8bc6\uff0c\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u884c\u4e0a\u653e\u7f6e\u591a\u4e2a\u8bed\u53e5\u3002\u4f8b\u5982\uff1a x = y ; y = y + 1 ; add ( x , y ); \u7b49\u540c\u4e8e x = y ; y = y + 1 ; add ( x , y ); C++ \u5173\u952e\u5b57 \u00b6 \u4e0b\u8868\u5217\u51fa\u4e86 C++ \u4e2d\u7684\u4fdd\u7559\u5b57\u3002\u8fd9\u4e9b\u4fdd\u7559\u5b57\u4e0d\u80fd\u4f5c\u4e3a\u5e38\u91cf\u540d\u3001\u53d8\u91cf\u540d\u6216\u5176\u4ed6\u6807\u8bc6\u7b26\u540d\u79f0\u3002 \u5b8c\u6574\u5173\u952e\u5b57\u4ecb\u7ecd\u53ef\u67e5\u9605\uff1a https://www.runoob.com/w3cnote/cpp-keyword-intro.html C++ \u4e2d\u7684\u7a7a\u683c \u00b6 \u53ea\u5305\u542b\u7a7a\u683c\u7684\u884c\uff0c\u88ab\u79f0\u4e3a\u7a7a\u767d\u884c\uff0c\u53ef\u80fd\u5e26\u6709\u6ce8\u91ca\uff0cC++ \u7f16\u8bd1\u5668\u4f1a\u5b8c\u5168\u5ffd\u7565\u5b83\u3002 \u5728 C++ \u4e2d\uff0c\u7a7a\u683c\u7528\u4e8e\u63cf\u8ff0\u7a7a\u767d\u7b26\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u548c\u6ce8\u91ca\u3002\u7a7a\u683c\u5206\u9694\u8bed\u53e5\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u8ba9\u7f16\u8bd1\u5668\u80fd\u8bc6\u522b\u8bed\u53e5\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff08\u6bd4\u5982 int\uff09\u5728\u54ea\u91cc\u7ed3\u675f\uff0c\u4e0b\u4e00\u4e2a\u5143\u7d20\u5728\u54ea\u91cc\u5f00\u59cb\u3002\u56e0\u6b64\uff0c\u5728\u4e0b\u9762\u7684\u8bed\u53e5\u4e2d\uff1a int age ; \u5728\u8fd9\u91cc\uff0cint \u548c age \u4e4b\u95f4\u5fc5\u987b\u81f3\u5c11\u6709\u4e00\u4e2a\u7a7a\u683c\u5b57\u7b26\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u7a7a\u767d\u7b26\uff09\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u624d\u80fd\u591f\u533a\u5206\u5b83\u4eec\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u4e0b\u9762\u7684\u8bed\u53e5\u4e2d\uff1a fruit = apples + oranges ; // \u83b7\u53d6\u6c34\u679c\u7684\u603b\u6570 fruit \u548c =\uff0c\u6216\u8005 = \u548c apples \u4e4b\u95f4\u7684\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u662f\u4e3a\u4e86\u589e\u5f3a\u53ef\u8bfb\u6027\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9002\u5f53\u589e\u52a0\u4e00\u4e9b\u7a7a\u683c\u3002 C++ \u6ce8\u91ca \u00b6 \u5355\u884c\u6ce8\u91ca\uff1a // \u591a\u884c\u6ce8\u91ca\uff1a /* \u8fd9\u662f\u6ce8\u91ca */ /* C++ \u6ce8\u91ca\u4e5f\u53ef\u4ee5 * \u8de8\u884c */ C++ \u6570\u636e\u7c7b\u578b \u00b6 \u57fa\u672c\u7684\u5185\u7f6e\u7c7b\u578b \u00b6 \u5176\u5b9e wchar_t \u662f\u8fd9\u6837\u6765\u7684\uff1a typedef short int wchar_t ; \u6240\u4ee5 wchar_t \u5b9e\u9645\u4e0a\u7684\u7a7a\u95f4\u662f\u548c short int \u4e00\u6837\u3002 \u4e00\u4e9b\u57fa\u672c\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u4fee\u9970\u7b26\u8fdb\u884c\u4fee\u9970\uff1a signed unsigned short long \u4e0b\u8868\u663e\u793a\u4e86\u5404\u79cd\u53d8\u91cf\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u503c\u65f6\u9700\u8981\u5360\u7528\u7684\u5185\u5b58\uff0c\u4ee5\u53ca\u8be5\u7c7b\u578b\u7684\u53d8\u91cf\u6240\u80fd\u5b58\u50a8\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 Notice \u4e0d\u540c\u7cfb\u7edf\u4f1a\u6709\u6240\u5dee\u5f02\uff0c\u4e00\u5b57\u8282\u4e3a 8 \u4f4d\u3002 Notice long int \u4e0e int \u90fd\u662f 4 \u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a\u65e9\u671f\u7684 C \u7f16\u8bd1\u5668\u5b9a\u4e49\u4e86 long int \u5360\u7528 4 \u4e2a\u5b57\u8282\uff0cint \u5360\u7528 2 \u4e2a\u5b57\u8282\uff0c\u65b0\u7248\u7684C/C++ \u6807\u51c6\u517c\u5bb9\u4e86\u65e9\u671f\u7684\u8fd9\u4e00\u8bbe\u5b9a\u3002 \u4ece\u4e0a\u8868\u53ef\u5f97\u77e5\uff0c\u53d8\u91cf\u7684\u5927\u5c0f\u4f1a\u6839\u636e\u7f16\u8bd1\u5668\u548c\u6240\u4f7f\u7528\u7684\u7535\u8111\u800c\u6709\u6240\u4e0d\u540c\u3002 \u4e0b\u9762\u5b9e\u4f8b\u4f1a\u8f93\u51fa\u60a8\u7535\u8111\u4e0a\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u3002 // data_type #include <iostream> #include <limits> using namespace std ; int main () { cout << \"type: \\t\\t \" << \"************size**************\" << endl ; cout << \"bool: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( bool ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < bool >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < bool >:: min )() << endl ; cout << \"char: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( char ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < char >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < char >:: min )() << endl ; cout << \"signed char: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( signed char ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < signed char >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < signed char >:: min )() << endl ; cout << \"unsigned char: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( unsigned char ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < unsigned char >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < unsigned char >:: min )() << endl ; cout << \"wchar_t: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( wchar_t ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < wchar_t >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < wchar_t >:: min )() << endl ; cout << \"short: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( short ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < short >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < short >:: min )() << endl ; cout << \"int: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( int ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < int >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < int >:: min )() << endl ; cout << \"unsigned: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( unsigned ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < unsigned >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < unsigned >:: min )() << endl ; cout << \"long: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( long ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < long >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < long >:: min )() << endl ; cout << \"unsigned long: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( unsigned long ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < unsigned long >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < unsigned long >:: min )() << endl ; cout << \"double: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( double ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < double >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < double >:: min )() << endl ; cout << \"long double: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( long double ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < long double >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < long double >:: min )() << endl ; cout << \"float: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( float ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < float >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < float >:: min )() << endl ; cout << \"size_t: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( size_t ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < size_t >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < size_t >:: min )() << endl ; cout << \"string: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( string ) << endl ; // << \"\\t\u6700\u5927\u503c\uff1a\" << (numeric_limits<string>::max)() << \"\\t\u6700\u5c0f\u503c\uff1a\" << (numeric_limits<string>::min)() << endl; cout << \"type: \\t\\t \" << \"************size**************\" << endl ; return 0 ; } \u672c\u5b9e\u4f8b\u4f7f\u7528\u4e86 endl\uff0c\u8fd9\u5c06\u5728\u6bcf\u4e00\u884c\u540e\u63d2\u5165\u4e00\u4e2a\u6362\u884c\u7b26\uff0c<< \u8fd0\u7b97\u7b26\u7528\u4e8e\u5411\u5c4f\u5e55\u4f20\u591a\u4e2a\u503c\u3002\u6211\u4eec\u4e5f\u4f7f\u7528 sizeof() \u51fd\u6570\u6765\u83b7\u53d6\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u3002 typedef \u58f0\u660e \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528 typedef \u4e3a\u4e00\u4e2a\u5df2\u6709\u7684\u7c7b\u578b\u53d6\u4e00\u4e2a\u65b0\u7684\u540d\u5b57\u3002\u4e0b\u9762\u662f\u4f7f\u7528 typedef \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7c7b\u578b\u7684\u8bed\u6cd5\uff1a typedef type newname ; \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8bed\u53e5\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\uff0cfeet \u662f int \u7684\u53e6\u4e00\u4e2a\u540d\u79f0\uff1a typedef int feet ; \u73b0\u5728\uff0c\u4e0b\u9762\u7684\u58f0\u660e\u662f\u5b8c\u5168\u5408\u6cd5\u7684\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u6574\u578b\u53d8\u91cf distance\uff1a feet distance ; \u679a\u4e3e\u7c7b\u578b \u00b6 \u679a\u4e3e\u7c7b\u578b(enumeration)\u662fC++\u4e2d\u7684\u4e00\u79cd\u6d3e\u751f\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u662f\u7531\u7528\u6237\u5b9a\u4e49\u7684\u82e5\u5e72\u679a\u4e3e\u5e38\u91cf\u7684\u96c6\u5408\u3002 \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u53ea\u6709\u51e0\u79cd\u53ef\u80fd\u7684\u503c\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u679a\u4e3e(enumeration)\u7c7b\u578b\u3002\u6240\u8c13\"\u679a\u4e3e\"\u662f\u6307\u5c06\u53d8\u91cf\u7684\u503c\u4e00\u4e00\u5217\u4e3e\u51fa\u6765\uff0c\u53d8\u91cf\u7684\u503c\u53ea\u80fd\u5728\u5217\u4e3e\u51fa\u6765\u7684\u503c\u7684\u8303\u56f4\u5185\u3002 \u521b\u5efa\u679a\u4e3e\uff0c\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57 enum\u3002\u679a\u4e3e\u7c7b\u578b\u7684\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a enum \u679a\u4e3e\u540d { \u6807\u8bc6\u7b26 [ = \u6574\u578b\u5e38\u6570 ], \u6807\u8bc6\u7b26 [ = \u6574\u578b\u5e38\u6570 ], ... \u6807\u8bc6\u7b26 [ = \u6574\u578b\u5e38\u6570 ] } \u679a\u4e3e\u53d8\u91cf ; \u5982\u679c\u679a\u4e3e\u6ca1\u6709\u521d\u59cb\u5316, \u5373\u7701\u6389\"=\u6574\u578b\u5e38\u6570\"\u65f6, \u5219\u4ece\u7b2c\u4e00\u4e2a\u6807\u8bc6\u7b26\u5f00\u59cb\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u989c\u8272\u679a\u4e3e\uff0c\u53d8\u91cf c \u7684\u7c7b\u578b\u4e3a color\u3002\u6700\u540e\uff0cc \u88ab\u8d4b\u503c\u4e3a \"blue\"\u3002 enum color { red , green , blue } c ; c = blue ; \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u4e2a\u540d\u79f0\u7684\u503c\u4e3a 0\uff0c\u7b2c\u4e8c\u4e2a\u540d\u79f0\u7684\u503c\u4e3a 1\uff0c\u7b2c\u4e09\u4e2a\u540d\u79f0\u7684\u503c\u4e3a 2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4f46\u662f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u7ed9\u540d\u79f0\u8d4b\u4e88\u4e00\u4e2a\u7279\u6b8a\u7684\u503c\uff0c\u53ea\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u521d\u59cb\u503c\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u679a\u4e3e\u4e2d\uff0cgreen \u7684\u503c\u4e3a 5\u3002 enum color { red , green = 5 , blue }; \u5728\u8fd9\u91cc\uff0cblue \u7684\u503c\u4e3a 6\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u540d\u79f0\u90fd\u4f1a\u6bd4\u5b83\u524d\u9762\u4e00\u4e2a\u540d\u79f0\u5927 1\uff0c\u4f46 red \u7684\u503c\u4f9d\u7136\u4e3a 0\u3002 C++ \u53d8\u91cf\u7c7b\u578b \u00b6 C++ \u4e2d\u7684\u53d8\u91cf\u5b9a\u4e49 \u00b6 \u53d8\u91cf\u5b9a\u4e49\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u5728\u4f55\u5904\u521b\u5efa\u53d8\u91cf\u7684\u5b58\u50a8\uff0c\u4ee5\u53ca\u5982\u4f55\u521b\u5efa\u53d8\u91cf\u7684\u5b58\u50a8\u3002\u53d8\u91cf\u5b9a\u4e49\u6307\u5b9a\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u5305\u542b\u4e86\u8be5\u7c7b\u578b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u7684\u5217\u8868\uff0c\u5982\u4e0b\u6240\u793a\uff1a type variable_list; \u5728\u8fd9\u91cc\uff0ctype \u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684 C++ \u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f char\u3001wchar_t\u3001int\u3001float\u3001double\u3001bool \u6216\u4efb\u4f55\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5bf9\u8c61\uff0cvariable_list \u53ef\u4ee5\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u8bc6\u7b26\u540d\u79f0\u7ec4\u6210\uff0c\u591a\u4e2a\u6807\u8bc6\u7b26\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002\u4e0b\u9762\u5217\u51fa\u51e0\u4e2a\u6709\u6548\u7684\u58f0\u660e\uff1a int i , j , k ; char c , ch ; float f , salary ; double d ; \u884c int i, j, k; \u58f0\u660e\u5e76\u5b9a\u4e49\u4e86\u53d8\u91cf i\u3001j \u548c k\uff0c\u8fd9\u6307\u793a\u7f16\u8bd1\u5668\u521b\u5efa\u7c7b\u578b\u4e3a int \u7684\u540d\u4e3a i\u3001j\u3001k \u7684\u53d8\u91cf\u3002 \u53d8\u91cf\u53ef\u4ee5\u5728\u58f0\u660e\u7684\u65f6\u5019\u88ab\u521d\u59cb\u5316\uff08\u6307\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\uff09\u3002\u521d\u59cb\u5316\u5668\u7531\u4e00\u4e2a\u7b49\u53f7\uff0c\u540e\u8ddf\u4e00\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\u7ec4\u6210\uff0c\u5982\u4e0b\u6240\u793a\uff1a type variable_name = value; \u4e0b\u9762\u5217\u4e3e\u51e0\u4e2a\u5b9e\u4f8b\uff1a extern int d = 3 , f = 5 ; // d \u548c f \u7684\u58f0\u660e int d = 3 , f = 5 ; // \u5b9a\u4e49\u5e76\u521d\u59cb\u5316 d \u548c f byte z = 22 ; // \u5b9a\u4e49\u5e76\u521d\u59cb\u5316 z char x = 'x' ; // \u53d8\u91cf x \u7684\u503c\u4e3a 'x' \u4e0d\u5e26\u521d\u59cb\u5316\u7684\u5b9a\u4e49\uff1a\u5e26\u6709\u9759\u6001\u5b58\u50a8\u6301\u7eed\u65f6\u95f4\u7684\u53d8\u91cf\u4f1a\u88ab\u9690\u5f0f\u521d\u59cb\u5316\u4e3a NULL\uff08\u6240\u6709\u5b57\u8282\u7684\u503c\u90fd\u662f 0\uff09\uff0c\u5176\u4ed6\u6240\u6709\u53d8\u91cf\u7684\u521d\u59cb\u503c\u662f\u672a\u5b9a\u4e49\u7684\u3002 C++ \u4e2d\u7684\u53d8\u91cf\u58f0\u660e \u00b6 \u53d8\u91cf\u58f0\u660e\u5411\u7f16\u8bd1\u5668\u4fdd\u8bc1\u53d8\u91cf\u4ee5\u7ed9\u5b9a\u7684\u7c7b\u578b\u548c\u540d\u79f0\u5b58\u5728\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5728\u4e0d\u9700\u8981\u77e5\u9053\u53d8\u91cf\u5b8c\u6574\u7ec6\u8282\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u7ee7\u7eed\u8fdb\u4e00\u6b65\u7684\u7f16\u8bd1\u3002\u53d8\u91cf\u58f0\u660e\u53ea\u5728\u7f16\u8bd1\u65f6\u6709\u5b83\u7684\u610f\u4e49\uff0c\u5728\u7a0b\u5e8f\u8fde\u63a5\u65f6\u7f16\u8bd1\u5668\u9700\u8981\u5b9e\u9645\u7684\u53d8\u91cf\u58f0\u660e\u3002 \u5f53\u60a8\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u4e14\u53ea\u5728\u5176\u4e2d\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b9a\u4e49\u53d8\u91cf\u65f6\uff08\u5b9a\u4e49\u53d8\u91cf\u7684\u6587\u4ef6\u5728\u7a0b\u5e8f\u8fde\u63a5\u65f6\u662f\u53ef\u7528\u7684\uff09\uff0c\u53d8\u91cf\u58f0\u660e\u5c31\u663e\u5f97\u975e\u5e38\u6709\u7528\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 extern \u5173\u952e\u5b57\u5728\u4efb\u4f55\u5730\u65b9\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u3002\u867d\u7136\u60a8\u53ef\u4ee5\u5728 C++ \u7a0b\u5e8f\u4e2d\u591a\u6b21\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f46\u53d8\u91cf\u53ea\u80fd\u5728\u67d0\u4e2a\u6587\u4ef6\u3001\u51fd\u6570\u6216\u4ee3\u7801\u5757\u4e2d\u88ab\u5b9a\u4e49\u4e00\u6b21\u3002 \u5c1d\u8bd5\u4e0b\u9762\u7684\u5b9e\u4f8b\uff0c\u5176\u4e2d\uff0c\u53d8\u91cf\u5728\u5934\u90e8\u5c31\u5df2\u7ecf\u88ab\u58f0\u660e\uff0c\u4f46\u5b83\u4eec\u662f\u5728\u4e3b\u51fd\u6570\u5185\u88ab\u5b9a\u4e49\u548c\u521d\u59cb\u5316\u7684\uff1a #include <iostream> using namespace std ; // \u53d8\u91cf\u58f0\u660e extern int a , b ; extern int c ; extern float f ; int main () { // \u53d8\u91cf\u5b9a\u4e49 int a , b ; int c ; float f ; // \u5b9e\u9645\u521d\u59cb\u5316 a = 10 ; b = 20 ; c = a + b ; cout << c << endl ; f = 70.0 / 3.0 ; cout << f << endl ; return 0 ; } \u540c\u6837\u7684\uff0c\u5728\u51fd\u6570\u58f0\u660e\u65f6\uff0c\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\u540d\uff0c\u800c\u51fd\u6570\u7684\u5b9e\u9645\u5b9a\u4e49\u5219\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8fdb\u884c\u3002\u4f8b\u5982\uff1a // \u51fd\u6570\u58f0\u660e int func (); int main () { // \u51fd\u6570\u8c03\u7528 int i = func (); } // \u51fd\u6570\u5b9a\u4e49 int func () { return 0 ; } C++ \u4e2d\u7684\u5de6\u503c\uff08Lvalues\uff09\u548c\u53f3\u503c\uff08Rvalues\uff09 \u00b6 C++ \u4e2d\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\uff1a \u5de6\u503c\uff08lvalue\uff09\uff1a\u6307\u5411\u5185\u5b58\u4f4d\u7f6e\u7684\u8868\u8fbe\u5f0f\u88ab\u79f0\u4e3a\u5de6\u503c\uff08lvalue\uff09\u8868\u8fbe\u5f0f\u3002\u5de6\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u3002 \u53f3\u503c\uff08rvalue\uff09\uff1a\u672f\u8bed\u53f3\u503c\uff08rvalue\uff09\u6307\u7684\u662f\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u67d0\u4e9b\u5730\u5740\u7684\u6570\u503c\u3002\u53f3\u503c\u662f\u4e0d\u80fd\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53f3\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u53f3\u8fb9\uff0c\u4f46\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002 \u53d8\u91cf\u662f\u5de6\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002\u6570\u503c\u578b\u7684\u5b57\u9762\u503c\u662f\u53f3\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6709\u6548\u7684\u8bed\u53e5\uff1a int g = 20 ; \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a\u5c31\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u8bed\u53e5\uff0c\u4f1a\u751f\u6210\u7f16\u8bd1\u65f6\u9519\u8bef\uff1a 10 = 20 ;","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c","text":"\u8ba9\u6211\u4eec\u770b\u4e00\u6bb5\u7b80\u5355\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u8f93\u51fa\u5355\u8bcd Hello World\u3002 #include <iostream> using namespace std ; // main() \u662f\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u7684\u5730\u65b9 int main () { cout << \"Hello World\" ; // \u8f93\u51fa Hello World return 0 ; } \u63a5\u4e0b\u6765\u6211\u4eec\u8bb2\u89e3\u4e00\u4e0b\u4e0a\u9762\u8fd9\u6bb5\u7a0b\u5e8f\uff1a C++ \u8bed\u8a00\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5934\u6587\u4ef6\uff0c\u8fd9\u4e9b\u5934\u6587\u4ef6\u5305\u542b\u4e86\u7a0b\u5e8f\u4e2d\u5fc5\u9700\u7684\u6216\u6709\u7528\u7684\u4fe1\u606f\u3002\u4e0a\u9762\u8fd9\u6bb5\u7a0b\u5e8f\u4e2d\uff0c\u5305\u542b\u4e86\u5934\u6587\u4ef6 \u3002 \u4e0b\u4e00\u884c using namespace std; \u544a\u8bc9\u7f16\u8bd1\u5668\u4f7f\u7528 std \u547d\u540d\u7a7a\u95f4\u3002\u547d\u540d\u7a7a\u95f4\u662f C++ \u4e2d\u4e00\u4e2a\u76f8\u5bf9\u65b0\u7684\u6982\u5ff5\u3002 \u4e0b\u4e00\u884c // main() \u662f\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u7684\u5730\u65b9 \u662f\u4e00\u4e2a\u5355\u884c\u6ce8\u91ca\u3002\u5355\u884c\u6ce8\u91ca\u4ee5 // \u5f00\u5934\uff0c\u5728\u884c\u672b\u7ed3\u675f\u3002 \u4e0b\u4e00\u884c int main() \u662f\u4e3b\u51fd\u6570\uff0c\u7a0b\u5e8f\u4ece\u8fd9\u91cc\u5f00\u59cb\u6267\u884c\u3002 \u4e0b\u4e00\u884c cout << \"Hello World\"; \u4f1a\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u6d88\u606f \"Hello World\"\u3002 \u4e0b\u4e00\u884c return 0; \u7ec8\u6b62 main( )\u51fd\u6570\uff0c\u5e76\u5411\u8c03\u7528\u8fdb\u7a0b\u8fd4\u56de\u503c 0\u3002","title":"C++ \u7a0b\u5e8f\u7ed3\u6784"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_1","text":"\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u628a\u6e90\u4ee3\u7801\u4fdd\u5b58\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u8bd1\u5e76\u8fd0\u884c\u5b83\u3002\u4e0b\u9762\u662f\u7b80\u5355\u7684\u6b65\u9aa4\uff1a \u6253\u5f00\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\uff0c\u6dfb\u52a0\u4e0a\u8ff0\u4ee3\u7801\u3002 \u4fdd\u5b58\u6587\u4ef6\u4e3a hello.cpp\u3002 \u6253\u5f00\u547d\u4ee4\u63d0\u793a\u7b26\uff0c\u8fdb\u5165\u5230\u4fdd\u5b58\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u3002 \u952e\u5165 'g++ hello.cpp '\uff0c\u8f93\u5165\u56de\u8f66\uff0c\u7f16\u8bd1\u4ee3\u7801\u3002\u5982\u679c\u4ee3\u7801\u4e2d\u6ca1\u6709\u9519\u8bef\uff0c\u547d\u4ee4\u63d0\u793a\u7b26\u4f1a\u8df3\u5230\u4e0b\u4e00\u884c\uff0c\u5e76\u751f\u6210 a.out \u53ef\u6267\u884c\u6587\u4ef6\u3002 \u73b0\u5728\uff0c\u952e\u5165 ' a.out' \u6765\u8fd0\u884c\u7a0b\u5e8f\u3002 \u60a8\u53ef\u4ee5\u770b\u5230\u5c4f\u5e55\u4e0a\u663e\u793a ' Hello World '\u3002 $ g++ hello.cpp $ ./a.out Hello World \u8bf7\u786e\u4fdd\u60a8\u7684\u8def\u5f84\u4e2d\u5df2\u5305\u542b g++ \u7f16\u8bd1\u5668\uff0c\u5e76\u786e\u4fdd\u5728\u5305\u542b\u6e90\u6587\u4ef6 hello.cpp \u7684\u76ee\u5f55\u4e2d\u8fd0\u884c\u5b83\u3002 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 makefile \u6765\u7f16\u8bd1 C/C++ \u7a0b\u5e8f\u3002","title":"\u7f16\u8bd1 &amp; \u6267\u884c C++ \u7a0b\u5e8f"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_2","text":"\u5728 C++ \u4e2d\uff0c\u5206\u53f7\u662f\u8bed\u53e5\u7ed3\u675f\u7b26\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u8bed\u53e5\u5fc5\u987b\u4ee5\u5206\u53f7\u7ed3\u675f\u3002\u5b83\u8868\u660e\u4e00\u4e2a\u903b\u8f91\u5b9e\u4f53\u7684\u7ed3\u675f\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e09\u4e2a\u4e0d\u540c\u7684\u8bed\u53e5\uff1a x = y ; y = y + 1 ; add ( x , y ); \u8bed\u53e5\u5757\u662f\u4e00\u7ec4\u4f7f\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u6309\u903b\u8f91\u8fde\u63a5\u7684\u8bed\u53e5\u3002\u4f8b\u5982\uff1a { cout << \"Hello World\" ; // \u8f93\u51fa Hello World return 0 ; } C++ \u4e0d\u4ee5\u884c\u672b\u4f5c\u4e3a\u7ed3\u675f\u7b26\u7684\u6807\u8bc6\uff0c\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u884c\u4e0a\u653e\u7f6e\u591a\u4e2a\u8bed\u53e5\u3002\u4f8b\u5982\uff1a x = y ; y = y + 1 ; add ( x , y ); \u7b49\u540c\u4e8e x = y ; y = y + 1 ; add ( x , y );","title":"C++ \u4e2d\u7684\u5206\u53f7 &amp; \u8bed\u53e5\u5757"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_3","text":"\u4e0b\u8868\u5217\u51fa\u4e86 C++ \u4e2d\u7684\u4fdd\u7559\u5b57\u3002\u8fd9\u4e9b\u4fdd\u7559\u5b57\u4e0d\u80fd\u4f5c\u4e3a\u5e38\u91cf\u540d\u3001\u53d8\u91cf\u540d\u6216\u5176\u4ed6\u6807\u8bc6\u7b26\u540d\u79f0\u3002 \u5b8c\u6574\u5173\u952e\u5b57\u4ecb\u7ecd\u53ef\u67e5\u9605\uff1a https://www.runoob.com/w3cnote/cpp-keyword-intro.html","title":"C++ \u5173\u952e\u5b57"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_4","text":"\u53ea\u5305\u542b\u7a7a\u683c\u7684\u884c\uff0c\u88ab\u79f0\u4e3a\u7a7a\u767d\u884c\uff0c\u53ef\u80fd\u5e26\u6709\u6ce8\u91ca\uff0cC++ \u7f16\u8bd1\u5668\u4f1a\u5b8c\u5168\u5ffd\u7565\u5b83\u3002 \u5728 C++ \u4e2d\uff0c\u7a7a\u683c\u7528\u4e8e\u63cf\u8ff0\u7a7a\u767d\u7b26\u3001\u5236\u8868\u7b26\u3001\u6362\u884c\u7b26\u548c\u6ce8\u91ca\u3002\u7a7a\u683c\u5206\u9694\u8bed\u53e5\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u8ba9\u7f16\u8bd1\u5668\u80fd\u8bc6\u522b\u8bed\u53e5\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff08\u6bd4\u5982 int\uff09\u5728\u54ea\u91cc\u7ed3\u675f\uff0c\u4e0b\u4e00\u4e2a\u5143\u7d20\u5728\u54ea\u91cc\u5f00\u59cb\u3002\u56e0\u6b64\uff0c\u5728\u4e0b\u9762\u7684\u8bed\u53e5\u4e2d\uff1a int age ; \u5728\u8fd9\u91cc\uff0cint \u548c age \u4e4b\u95f4\u5fc5\u987b\u81f3\u5c11\u6709\u4e00\u4e2a\u7a7a\u683c\u5b57\u7b26\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u7a7a\u767d\u7b26\uff09\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u624d\u80fd\u591f\u533a\u5206\u5b83\u4eec\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u4e0b\u9762\u7684\u8bed\u53e5\u4e2d\uff1a fruit = apples + oranges ; // \u83b7\u53d6\u6c34\u679c\u7684\u603b\u6570 fruit \u548c =\uff0c\u6216\u8005 = \u548c apples \u4e4b\u95f4\u7684\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u662f\u4e3a\u4e86\u589e\u5f3a\u53ef\u8bfb\u6027\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9002\u5f53\u589e\u52a0\u4e00\u4e9b\u7a7a\u683c\u3002","title":"C++ \u4e2d\u7684\u7a7a\u683c"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_5","text":"\u5355\u884c\u6ce8\u91ca\uff1a // \u591a\u884c\u6ce8\u91ca\uff1a /* \u8fd9\u662f\u6ce8\u91ca */ /* C++ \u6ce8\u91ca\u4e5f\u53ef\u4ee5 * \u8de8\u884c */","title":"C++ \u6ce8\u91ca"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_6","text":"","title":"C++ \u6570\u636e\u7c7b\u578b"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#_1","text":"\u5176\u5b9e wchar_t \u662f\u8fd9\u6837\u6765\u7684\uff1a typedef short int wchar_t ; \u6240\u4ee5 wchar_t \u5b9e\u9645\u4e0a\u7684\u7a7a\u95f4\u662f\u548c short int \u4e00\u6837\u3002 \u4e00\u4e9b\u57fa\u672c\u7c7b\u578b\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u4fee\u9970\u7b26\u8fdb\u884c\u4fee\u9970\uff1a signed unsigned short long \u4e0b\u8868\u663e\u793a\u4e86\u5404\u79cd\u53d8\u91cf\u7c7b\u578b\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u503c\u65f6\u9700\u8981\u5360\u7528\u7684\u5185\u5b58\uff0c\u4ee5\u53ca\u8be5\u7c7b\u578b\u7684\u53d8\u91cf\u6240\u80fd\u5b58\u50a8\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 Notice \u4e0d\u540c\u7cfb\u7edf\u4f1a\u6709\u6240\u5dee\u5f02\uff0c\u4e00\u5b57\u8282\u4e3a 8 \u4f4d\u3002 Notice long int \u4e0e int \u90fd\u662f 4 \u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a\u65e9\u671f\u7684 C \u7f16\u8bd1\u5668\u5b9a\u4e49\u4e86 long int \u5360\u7528 4 \u4e2a\u5b57\u8282\uff0cint \u5360\u7528 2 \u4e2a\u5b57\u8282\uff0c\u65b0\u7248\u7684C/C++ \u6807\u51c6\u517c\u5bb9\u4e86\u65e9\u671f\u7684\u8fd9\u4e00\u8bbe\u5b9a\u3002 \u4ece\u4e0a\u8868\u53ef\u5f97\u77e5\uff0c\u53d8\u91cf\u7684\u5927\u5c0f\u4f1a\u6839\u636e\u7f16\u8bd1\u5668\u548c\u6240\u4f7f\u7528\u7684\u7535\u8111\u800c\u6709\u6240\u4e0d\u540c\u3002 \u4e0b\u9762\u5b9e\u4f8b\u4f1a\u8f93\u51fa\u60a8\u7535\u8111\u4e0a\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u3002 // data_type #include <iostream> #include <limits> using namespace std ; int main () { cout << \"type: \\t\\t \" << \"************size**************\" << endl ; cout << \"bool: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( bool ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < bool >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < bool >:: min )() << endl ; cout << \"char: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( char ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < char >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < char >:: min )() << endl ; cout << \"signed char: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( signed char ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < signed char >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < signed char >:: min )() << endl ; cout << \"unsigned char: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( unsigned char ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < unsigned char >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < unsigned char >:: min )() << endl ; cout << \"wchar_t: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( wchar_t ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < wchar_t >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < wchar_t >:: min )() << endl ; cout << \"short: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( short ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < short >:: max )(); cout << \" \\t\\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < short >:: min )() << endl ; cout << \"int: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( int ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < int >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < int >:: min )() << endl ; cout << \"unsigned: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( unsigned ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < unsigned >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < unsigned >:: min )() << endl ; cout << \"long: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( long ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < long >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < long >:: min )() << endl ; cout << \"unsigned long: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( unsigned long ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < unsigned long >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < unsigned long >:: min )() << endl ; cout << \"double: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( double ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < double >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < double >:: min )() << endl ; cout << \"long double: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( long double ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < long double >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < long double >:: min )() << endl ; cout << \"float: \\t\\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( float ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < float >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < float >:: min )() << endl ; cout << \"size_t: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( size_t ); cout << \" \\t \u6700\u5927\u503c\uff1a\" << ( numeric_limits < size_t >:: max )(); cout << \" \\t \u6700\u5c0f\u503c\uff1a\" << ( numeric_limits < size_t >:: min )() << endl ; cout << \"string: \\t \" << \"\u6240\u5360\u5b57\u8282\u6570\uff1a\" << sizeof ( string ) << endl ; // << \"\\t\u6700\u5927\u503c\uff1a\" << (numeric_limits<string>::max)() << \"\\t\u6700\u5c0f\u503c\uff1a\" << (numeric_limits<string>::min)() << endl; cout << \"type: \\t\\t \" << \"************size**************\" << endl ; return 0 ; } \u672c\u5b9e\u4f8b\u4f7f\u7528\u4e86 endl\uff0c\u8fd9\u5c06\u5728\u6bcf\u4e00\u884c\u540e\u63d2\u5165\u4e00\u4e2a\u6362\u884c\u7b26\uff0c<< \u8fd0\u7b97\u7b26\u7528\u4e8e\u5411\u5c4f\u5e55\u4f20\u591a\u4e2a\u503c\u3002\u6211\u4eec\u4e5f\u4f7f\u7528 sizeof() \u51fd\u6570\u6765\u83b7\u53d6\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u3002","title":"\u57fa\u672c\u7684\u5185\u7f6e\u7c7b\u578b"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#typedef","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 typedef \u4e3a\u4e00\u4e2a\u5df2\u6709\u7684\u7c7b\u578b\u53d6\u4e00\u4e2a\u65b0\u7684\u540d\u5b57\u3002\u4e0b\u9762\u662f\u4f7f\u7528 typedef \u5b9a\u4e49\u4e00\u4e2a\u65b0\u7c7b\u578b\u7684\u8bed\u6cd5\uff1a typedef type newname ; \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u8bed\u53e5\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\uff0cfeet \u662f int \u7684\u53e6\u4e00\u4e2a\u540d\u79f0\uff1a typedef int feet ; \u73b0\u5728\uff0c\u4e0b\u9762\u7684\u58f0\u660e\u662f\u5b8c\u5168\u5408\u6cd5\u7684\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a\u6574\u578b\u53d8\u91cf distance\uff1a feet distance ;","title":"typedef \u58f0\u660e"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#_2","text":"\u679a\u4e3e\u7c7b\u578b(enumeration)\u662fC++\u4e2d\u7684\u4e00\u79cd\u6d3e\u751f\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u662f\u7531\u7528\u6237\u5b9a\u4e49\u7684\u82e5\u5e72\u679a\u4e3e\u5e38\u91cf\u7684\u96c6\u5408\u3002 \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u53ea\u6709\u51e0\u79cd\u53ef\u80fd\u7684\u503c\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u679a\u4e3e(enumeration)\u7c7b\u578b\u3002\u6240\u8c13\"\u679a\u4e3e\"\u662f\u6307\u5c06\u53d8\u91cf\u7684\u503c\u4e00\u4e00\u5217\u4e3e\u51fa\u6765\uff0c\u53d8\u91cf\u7684\u503c\u53ea\u80fd\u5728\u5217\u4e3e\u51fa\u6765\u7684\u503c\u7684\u8303\u56f4\u5185\u3002 \u521b\u5efa\u679a\u4e3e\uff0c\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57 enum\u3002\u679a\u4e3e\u7c7b\u578b\u7684\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a enum \u679a\u4e3e\u540d { \u6807\u8bc6\u7b26 [ = \u6574\u578b\u5e38\u6570 ], \u6807\u8bc6\u7b26 [ = \u6574\u578b\u5e38\u6570 ], ... \u6807\u8bc6\u7b26 [ = \u6574\u578b\u5e38\u6570 ] } \u679a\u4e3e\u53d8\u91cf ; \u5982\u679c\u679a\u4e3e\u6ca1\u6709\u521d\u59cb\u5316, \u5373\u7701\u6389\"=\u6574\u578b\u5e38\u6570\"\u65f6, \u5219\u4ece\u7b2c\u4e00\u4e2a\u6807\u8bc6\u7b26\u5f00\u59cb\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u989c\u8272\u679a\u4e3e\uff0c\u53d8\u91cf c \u7684\u7c7b\u578b\u4e3a color\u3002\u6700\u540e\uff0cc \u88ab\u8d4b\u503c\u4e3a \"blue\"\u3002 enum color { red , green , blue } c ; c = blue ; \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u4e2a\u540d\u79f0\u7684\u503c\u4e3a 0\uff0c\u7b2c\u4e8c\u4e2a\u540d\u79f0\u7684\u503c\u4e3a 1\uff0c\u7b2c\u4e09\u4e2a\u540d\u79f0\u7684\u503c\u4e3a 2\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4f46\u662f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u7ed9\u540d\u79f0\u8d4b\u4e88\u4e00\u4e2a\u7279\u6b8a\u7684\u503c\uff0c\u53ea\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u521d\u59cb\u503c\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u679a\u4e3e\u4e2d\uff0cgreen \u7684\u503c\u4e3a 5\u3002 enum color { red , green = 5 , blue }; \u5728\u8fd9\u91cc\uff0cblue \u7684\u503c\u4e3a 6\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u540d\u79f0\u90fd\u4f1a\u6bd4\u5b83\u524d\u9762\u4e00\u4e2a\u540d\u79f0\u5927 1\uff0c\u4f46 red \u7684\u503c\u4f9d\u7136\u4e3a 0\u3002","title":"\u679a\u4e3e\u7c7b\u578b"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_7","text":"","title":"C++ \u53d8\u91cf\u7c7b\u578b"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_8","text":"\u53d8\u91cf\u5b9a\u4e49\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u5728\u4f55\u5904\u521b\u5efa\u53d8\u91cf\u7684\u5b58\u50a8\uff0c\u4ee5\u53ca\u5982\u4f55\u521b\u5efa\u53d8\u91cf\u7684\u5b58\u50a8\u3002\u53d8\u91cf\u5b9a\u4e49\u6307\u5b9a\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c\u5e76\u5305\u542b\u4e86\u8be5\u7c7b\u578b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u7684\u5217\u8868\uff0c\u5982\u4e0b\u6240\u793a\uff1a type variable_list; \u5728\u8fd9\u91cc\uff0ctype \u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684 C++ \u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f char\u3001wchar_t\u3001int\u3001float\u3001double\u3001bool \u6216\u4efb\u4f55\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5bf9\u8c61\uff0cvariable_list \u53ef\u4ee5\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u8bc6\u7b26\u540d\u79f0\u7ec4\u6210\uff0c\u591a\u4e2a\u6807\u8bc6\u7b26\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002\u4e0b\u9762\u5217\u51fa\u51e0\u4e2a\u6709\u6548\u7684\u58f0\u660e\uff1a int i , j , k ; char c , ch ; float f , salary ; double d ; \u884c int i, j, k; \u58f0\u660e\u5e76\u5b9a\u4e49\u4e86\u53d8\u91cf i\u3001j \u548c k\uff0c\u8fd9\u6307\u793a\u7f16\u8bd1\u5668\u521b\u5efa\u7c7b\u578b\u4e3a int \u7684\u540d\u4e3a i\u3001j\u3001k \u7684\u53d8\u91cf\u3002 \u53d8\u91cf\u53ef\u4ee5\u5728\u58f0\u660e\u7684\u65f6\u5019\u88ab\u521d\u59cb\u5316\uff08\u6307\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\uff09\u3002\u521d\u59cb\u5316\u5668\u7531\u4e00\u4e2a\u7b49\u53f7\uff0c\u540e\u8ddf\u4e00\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\u7ec4\u6210\uff0c\u5982\u4e0b\u6240\u793a\uff1a type variable_name = value; \u4e0b\u9762\u5217\u4e3e\u51e0\u4e2a\u5b9e\u4f8b\uff1a extern int d = 3 , f = 5 ; // d \u548c f \u7684\u58f0\u660e int d = 3 , f = 5 ; // \u5b9a\u4e49\u5e76\u521d\u59cb\u5316 d \u548c f byte z = 22 ; // \u5b9a\u4e49\u5e76\u521d\u59cb\u5316 z char x = 'x' ; // \u53d8\u91cf x \u7684\u503c\u4e3a 'x' \u4e0d\u5e26\u521d\u59cb\u5316\u7684\u5b9a\u4e49\uff1a\u5e26\u6709\u9759\u6001\u5b58\u50a8\u6301\u7eed\u65f6\u95f4\u7684\u53d8\u91cf\u4f1a\u88ab\u9690\u5f0f\u521d\u59cb\u5316\u4e3a NULL\uff08\u6240\u6709\u5b57\u8282\u7684\u503c\u90fd\u662f 0\uff09\uff0c\u5176\u4ed6\u6240\u6709\u53d8\u91cf\u7684\u521d\u59cb\u503c\u662f\u672a\u5b9a\u4e49\u7684\u3002","title":"C++ \u4e2d\u7684\u53d8\u91cf\u5b9a\u4e49"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c_9","text":"\u53d8\u91cf\u58f0\u660e\u5411\u7f16\u8bd1\u5668\u4fdd\u8bc1\u53d8\u91cf\u4ee5\u7ed9\u5b9a\u7684\u7c7b\u578b\u548c\u540d\u79f0\u5b58\u5728\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5728\u4e0d\u9700\u8981\u77e5\u9053\u53d8\u91cf\u5b8c\u6574\u7ec6\u8282\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u7ee7\u7eed\u8fdb\u4e00\u6b65\u7684\u7f16\u8bd1\u3002\u53d8\u91cf\u58f0\u660e\u53ea\u5728\u7f16\u8bd1\u65f6\u6709\u5b83\u7684\u610f\u4e49\uff0c\u5728\u7a0b\u5e8f\u8fde\u63a5\u65f6\u7f16\u8bd1\u5668\u9700\u8981\u5b9e\u9645\u7684\u53d8\u91cf\u58f0\u660e\u3002 \u5f53\u60a8\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u4e14\u53ea\u5728\u5176\u4e2d\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5b9a\u4e49\u53d8\u91cf\u65f6\uff08\u5b9a\u4e49\u53d8\u91cf\u7684\u6587\u4ef6\u5728\u7a0b\u5e8f\u8fde\u63a5\u65f6\u662f\u53ef\u7528\u7684\uff09\uff0c\u53d8\u91cf\u58f0\u660e\u5c31\u663e\u5f97\u975e\u5e38\u6709\u7528\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 extern \u5173\u952e\u5b57\u5728\u4efb\u4f55\u5730\u65b9\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u3002\u867d\u7136\u60a8\u53ef\u4ee5\u5728 C++ \u7a0b\u5e8f\u4e2d\u591a\u6b21\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f46\u53d8\u91cf\u53ea\u80fd\u5728\u67d0\u4e2a\u6587\u4ef6\u3001\u51fd\u6570\u6216\u4ee3\u7801\u5757\u4e2d\u88ab\u5b9a\u4e49\u4e00\u6b21\u3002 \u5c1d\u8bd5\u4e0b\u9762\u7684\u5b9e\u4f8b\uff0c\u5176\u4e2d\uff0c\u53d8\u91cf\u5728\u5934\u90e8\u5c31\u5df2\u7ecf\u88ab\u58f0\u660e\uff0c\u4f46\u5b83\u4eec\u662f\u5728\u4e3b\u51fd\u6570\u5185\u88ab\u5b9a\u4e49\u548c\u521d\u59cb\u5316\u7684\uff1a #include <iostream> using namespace std ; // \u53d8\u91cf\u58f0\u660e extern int a , b ; extern int c ; extern float f ; int main () { // \u53d8\u91cf\u5b9a\u4e49 int a , b ; int c ; float f ; // \u5b9e\u9645\u521d\u59cb\u5316 a = 10 ; b = 20 ; c = a + b ; cout << c << endl ; f = 70.0 / 3.0 ; cout << f << endl ; return 0 ; } \u540c\u6837\u7684\uff0c\u5728\u51fd\u6570\u58f0\u660e\u65f6\uff0c\u63d0\u4f9b\u4e00\u4e2a\u51fd\u6570\u540d\uff0c\u800c\u51fd\u6570\u7684\u5b9e\u9645\u5b9a\u4e49\u5219\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8fdb\u884c\u3002\u4f8b\u5982\uff1a // \u51fd\u6570\u58f0\u660e int func (); int main () { // \u51fd\u6570\u8c03\u7528 int i = func (); } // \u51fd\u6570\u5b9a\u4e49 int func () { return 0 ; }","title":"C++ \u4e2d\u7684\u53d8\u91cf\u58f0\u660e"},{"location":"cpp/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#c-lvaluesrvalues","text":"C++ \u4e2d\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\uff1a \u5de6\u503c\uff08lvalue\uff09\uff1a\u6307\u5411\u5185\u5b58\u4f4d\u7f6e\u7684\u8868\u8fbe\u5f0f\u88ab\u79f0\u4e3a\u5de6\u503c\uff08lvalue\uff09\u8868\u8fbe\u5f0f\u3002\u5de6\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u6216\u53f3\u8fb9\u3002 \u53f3\u503c\uff08rvalue\uff09\uff1a\u672f\u8bed\u53f3\u503c\uff08rvalue\uff09\u6307\u7684\u662f\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u67d0\u4e9b\u5730\u5740\u7684\u6570\u503c\u3002\u53f3\u503c\u662f\u4e0d\u80fd\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53f3\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u53f3\u8fb9\uff0c\u4f46\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002 \u53d8\u91cf\u662f\u5de6\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002\u6570\u503c\u578b\u7684\u5b57\u9762\u503c\u662f\u53f3\u503c\uff0c\u56e0\u6b64\u4e0d\u80fd\u88ab\u8d4b\u503c\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728\u8d4b\u503c\u53f7\u7684\u5de6\u8fb9\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u6709\u6548\u7684\u8bed\u53e5\uff1a int g = 20 ; \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a\u5c31\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u8bed\u53e5\uff0c\u4f1a\u751f\u6210\u7f16\u8bd1\u65f6\u9519\u8bef\uff1a 10 = 20 ;","title":"C++ \u4e2d\u7684\u5de6\u503c\uff08Lvalues\uff09\u548c\u53f3\u503c\uff08Rvalues\uff09"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/","text":"\u7c7b\u5185\u9759\u6001\u6210\u5458\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u7ed9\u5b9a\u4e49\uff1f \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u5219\u4e00\u5b9a\u4f1a\u7ed9\u5176\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u95f4\uff08\u5373\u4f7f\u4e0d\u521d\u59cb\u5316\u3001\u8d4b\u503c\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u6b63\u5982\u7c7b\u4e2d\u7684\u666e\u901a\u6210\u5458\u53d8\u91cf\uff0c\u6211\u4ecd\u4ee5\u6574\u578b\u8bf4\u660e\uff0c\u5f53\u5176\u88ab\u5b9a\u4e49\u4e8e\u7c7b\u4e2d\u65f6\uff0c\u5c31\u662f\u8868\u660e\u6b64\u7c7b\u9700\u8981\u4e00\u4e2a\u6574\u578b\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u6bcf\u521b\u5efa\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u65f6\uff0c\u5c31\u4f1a\u7ed9\u8be5\u5bf9\u8c61\u76f8\u5e94\u7684\u5927\u5c0f\u3002 static\u53d8\u91cf\u662f\u5b58\u50a8\u4e8e\u5168\u5c40\u6570\u636e\u533a\uff0c\u4e0e\u7c7b\u5bf9\u8c61\uff08\u5bf9\u8c61\u4e2d\u5305\u62ec\u6210\u5458\u53d8\u91cf\uff09\u7684\u5b58\u50a8\u4f4d\u7f6e\u5e76\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u5728\u7c7b\u4e2d\u4e0d\u662f\u5b9a\u4e49\uff08\u4e0d\u7ed9\u5176\u7a7a\u95f4\uff09\u3002 \u4e94\u5927\u5185\u5b58\u5206\u533a \u00b6 \u5728C++\u4e2d\uff0c\u5185\u5b58\u5206\u62105\u4e2a\u533a\uff0c\u4ed6\u4eec\u5206\u522b\u662f\u5806\u3001\u6808\u3001\u81ea\u7531\u5b58\u50a8\u533a\u3001\u5168\u5c40/\u9759\u6001\u5b58\u50a8\u533a\u548c\u5e38\u91cf\u5b58\u50a8\u533a\u3002 \u6808: \u5c31\u662f\u90a3\u4e9b\u7531\u7f16\u8bd1\u5668\u5728\u9700\u8981\u7684\u65f6\u5019\u5206\u914d\uff0c\u5728\u4e0d\u9700\u8981\u7684\u65f6\u5019\u81ea\u52a8\u6e05\u9664\u7684\u53d8\u91cf\u7684\u5b58\u50a8\u533a\u3002\u91cc\u9762\u7684\u53d8\u91cf\u901a\u5e38\u662f\u5c40\u90e8\u53d8\u91cf\u3001\u51fd\u6570\u53c2\u6570\u7b49\u3002 \u5806: \u5c31\u662f\u90a3\u4e9b\u7531new\u5206\u914d\u7684\u5185\u5b58\u5757\uff0c\u4ed6\u4eec\u7684\u91ca\u653e\u7f16\u8bd1\u5668\u4e0d\u53bb\u7ba1\uff0c\u7531\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u53bb\u63a7\u5236\uff0c\u4e00\u822c\u4e00\u4e2anew\u5c31\u8981\u5bf9\u5e94\u4e00\u4e2adelete\u3002\u5982\u679c\u7a0b\u5e8f\u5458\u6ca1\u6709\u91ca\u653e\u6389\uff0c\u90a3\u4e48\u5728\u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u56de\u6536\u3002 \u81ea\u7531\u5b58\u50a8\u533a: \u5c31\u662f\u90a3\u4e9b\u7531malloc\u7b49\u5206\u914d\u7684\u5185\u5b58\u5757\uff0c\u4ed6\u548c\u5806\u662f\u5341\u5206\u76f8\u4f3c\u7684\uff0c\u4e0d\u8fc7\u5b83\u662f\u7528free\u6765\u7ed3\u675f\u81ea\u5df1\u7684\u751f\u547d\u7684\u3002 \u5168\u5c40/\u9759\u6001\u5b58\u50a8\u533a: \u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u88ab\u5206\u914d\u5230\u540c\u4e00\u5757\u5185\u5b58\u4e2d\uff0c\u5728\u4ee5\u524d\u7684C\u8bed\u8a00\u4e2d\uff0c\u5168\u5c40\u53d8\u91cf\u53c8\u5206\u4e3a\u521d\u59cb\u5316\u7684\u548c\u672a\u521d\u59cb\u5316\u7684\uff0c\u5728C++\u91cc\u9762\u6ca1\u6709\u8fd9\u4e2a\u533a\u5206\u4e86\uff0c\u4ed6\u4eec\u5171\u540c\u5360\u7528\u540c\u4e00\u5757\u5185\u5b58\u533a\uff08\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u90fd\u88ab\u521d\u59cb\u5316\u62100\u6216\u7a7a\u4e32\uff0cC\u4e2d\u4e5f\u4e00\u6837\uff09\u3002 \u5e38\u91cf\u5b58\u50a8\u533a: \u8fd9\u662f\u4e00\u5757\u6bd4\u8f83\u7279\u6b8a\u7684\u5b58\u50a8\u533a\uff0c\u4ed6\u4eec\u91cc\u9762\u5b58\u653e\u7684\u662f\u5e38\u91cf\uff0c\u4e0d\u5141\u8bb8\u4fee\u6539\uff08\u5f53\u7136\uff0c\u4f60\u8981\u901a\u8fc7\u975e\u6b63\u5f53\u624b\u6bb5\u4e5f\u53ef\u4ee5\u4fee\u6539\uff0c\u800c\u4e14\u65b9\u6cd5\u5f88\u591a\uff09\u3002 \u660e\u786e\u533a\u5206\u5806\u4e0e\u6808 \u00b6 void f () { int * p = new int [ 5 ]; } \u4e0a\u9762\u8fd9\u6761\u77ed\u77ed\u7684\u4e00\u53e5\u8bdd\u5c31\u5305\u542b\u4e86\u5806\u4e0e\u6808\uff0c\u770b\u5230new\uff0c\u6211\u4eec\u9996\u5148\u5c31\u5e94\u8be5\u60f3\u5230\uff0c\u6211\u4eec\u5206\u914d\u4e86\u4e00\u5757\u5806\u5185\u5b58\uff0c\u90a3\u4e48\u6307\u9488p\u5462\uff1f\u4ed6\u5206\u914d\u7684\u662f\u4e00\u5757\u6808\u5185\u5b58\uff0c\u6240\u4ee5\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u5c31\u662f\uff1a\u5728\u6808\u5185\u5b58\u4e2d\u5b58\u653e\u4e86\u4e00\u4e2a\u6307\u5411\u4e00\u5757\u5806\u5185\u5b58\u7684\u6307\u9488p\u3002 \u5728\u7a0b\u5e8f\u4f1a\u5148\u786e\u5b9a\u5728\u5806\u4e2d\u5206\u914d\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u7136\u540e\u8c03\u7528operator new\u5206\u914d\u5185\u5b58\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u5757\u5185\u5b58\u7684\u9996\u5730\u5740\uff0c\u653e\u5165\u6808\u4e2d\uff0c\u4ed6\u5728VC6\u4e0b\u7684\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a 00401028 push 14h 0040102A call operator new (00401060) 0040102F add esp,4 00401032 mov dword ptr [ebp-8],eax 00401035 mov eax,dword ptr [ebp-8] 00401038 mov dword ptr [ebp-4],eax \u8fd9\u91cc\uff0c\u6211\u4eec\u4e3a\u4e86\u7b80\u5355\u5e76\u6ca1\u6709\u91ca\u653e\u5185\u5b58\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u53bb\u91ca\u653e\u5462\uff1f\u662fdelete p\u4e48\uff1f\u54e6\uff0c\u9519\u4e86\uff0c\u5e94\u8be5\u662fdelete []p\uff0c\u8fd9\u662f\u4e3a\u4e86\u544a\u8bc9\u7f16\u8bd1\u5668\uff1a\u6211\u5220\u9664\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\uff0cVC6\u5c31\u4f1a\u6839\u636e\u76f8\u5e94\u7684Cookie\u4fe1\u606f\u53bb\u8fdb\u884c\u91ca\u653e\u5185\u5b58\u7684\u5de5\u4f5c\u3002 \u597d\u4e86\uff0c\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u4e3b\u9898\uff1a\u5806\u548c\u6808\u7a76\u7adf\u6709\u4ec0\u4e48\u533a\u522b\uff1f \u4e3b\u8981\u7684\u533a\u522b\u7531\u4ee5\u4e0b\u51e0\u70b9\uff1a \u7ba1\u7406\u65b9\u5f0f\u4e0d\u540c\uff1b \u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u7ba1\u7406\uff0c\u65e0\u9700\u6211\u4eec\u624b\u5de5\u63a7\u5236\uff1b\u5bf9\u4e8e\u5806\u6765\u8bf4\uff0c\u91ca\u653e\u5de5\u4f5c\u7531\u7a0b\u5e8f\u5458\u63a7\u5236\uff0c\u5bb9\u6613\u4ea7\u751fmemory leak\u3002 \u7a7a\u95f4\u5927\u5c0f\u4e0d\u540c\uff1b \u4e00\u822c\u6765\u8bb2\u572832\u4f4d\u7cfb\u7edf\u4e0b\uff0c\u5806\u5185\u5b58\u53ef\u4ee5\u8fbe\u52304G\u7684\u7a7a\u95f4\uff0c\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\u5806\u5185\u5b58\u51e0\u4e4e\u662f\u6ca1\u6709\u4ec0\u4e48\u9650\u5236\u7684\u3002\u4f46\u662f\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u4e00\u822c\u90fd\u662f\u6709\u4e00\u5b9a\u7684\u7a7a\u95f4\u5927\u5c0f\u7684\u3002 \u80fd\u5426\u4ea7\u751f\u788e\u7247\u4e0d\u540c\uff1b \u5bf9\u4e8e\u5806\u6765\u8bb2\uff0c\u9891\u7e41\u7684new/delete\u52bf\u5fc5\u4f1a\u9020\u6210\u5185\u5b58\u7a7a\u95f4\u7684\u4e0d\u8fde\u7eed\uff0c\u4ece\u800c\u9020\u6210\u5927\u91cf\u7684\u788e\u7247\uff0c\u4f7f\u7a0b\u5e8f\u6548\u7387\u964d\u4f4e\u3002\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u5219\u4e0d\u4f1a\u5b58\u5728\u8fd9\u4e2a \u95ee\u9898\uff0c\u56e0\u4e3a\u6808\u662f\u5148\u8fdb\u540e\u51fa\u7684\u961f\u5217\uff0c\u4ed6\u4eec\u662f\u5982\u6b64\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u4ee5\u81f3\u4e8e\u6c38\u8fdc\u90fd\u4e0d\u53ef\u80fd\u6709\u4e00\u4e2a\u5185\u5b58\u5757\u4ece\u6808\u4e2d\u95f4\u5f39\u51fa\uff0c\u5728\u4ed6\u5f39\u51fa\u4e4b\u524d\uff0c\u5728\u4ed6\u4e0a\u9762\u7684\u540e\u8fdb\u7684\u6808\u5185\u5bb9\u5df2\u7ecf\u88ab\u5f39\u51fa\u3002 \u751f\u957f\u65b9\u5411\u4e0d\u540c\uff1b \u5bf9\u4e8e\u5806\u6765\u8bb2\uff0c\u751f\u957f\u65b9\u5411\u662f\u5411\u4e0a\u7684\uff0c\u4e5f\u5c31\u662f\u5411\u7740\u5185\u5b58\u5730\u5740\u589e\u52a0\u7684\u65b9\u5411\uff1b\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u5b83\u7684\u751f\u957f\u65b9\u5411\u662f\u5411\u4e0b\u7684\uff0c\u662f\u5411\u7740\u5185\u5b58\u5730\u5740\u51cf\u5c0f\u7684\u65b9\u5411\u589e\u957f \u5206\u914d\u65b9\u5f0f\u4e0d\u540c\uff1b \u5806\u90fd\u662f\u52a8\u6001\u5206\u914d\u7684\uff0c\u6ca1\u6709\u9759\u6001\u5206\u914d\u7684\u5806\u3002 \u6808\u67092\u79cd\u5206\u914d\u65b9\u5f0f\uff1a\u9759\u6001\u5206\u914d\u548c\u52a8\u6001\u5206\u914d\u3002\u9759\u6001\u5206\u914d\u662f\u7f16\u8bd1\u5668\u5b8c\u6210\u7684\uff0c\u6bd4\u5982\u5c40\u90e8\u53d8\u91cf\u7684\u5206\u914d\u3002\u52a8\u6001\u5206\u914d\u7531alloca\u51fd\u6570\u8fdb\u884c\u5206\u914d\uff0c\u4f46\u662f\u6808\u7684\u52a8\u6001\u5206\u914d\u548c\u5806\u662f\u4e0d\u540c\u7684\uff0c\u4ed6\u7684\u52a8\u6001\u5206\u914d\u662f\u7531\u7f16\u8bd1\u5668\u8fdb\u884c\u91ca\u653e\uff0c\u65e0\u9700\u6211\u4eec\u624b\u5de5\u5b9e\u73b0\u3002 \u5206\u914d\u6548\u7387\u4e0d\u540c\uff1b \u6808\u662f\u673a\u5668\u7cfb\u7edf\u63d0\u4f9b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8ba1\u7b97\u673a\u4f1a\u5728\u5e95\u5c42\u5bf9\u6808\u63d0\u4f9b\u652f\u6301\uff1a\u5206\u914d\u4e13\u95e8\u7684\u5bc4\u5b58\u5668\u5b58\u653e\u6808\u7684\u5730\u5740\uff0c\u538b\u6808\u51fa\u6808\u90fd\u6709\u4e13\u95e8\u7684\u6307\u4ee4\u6267\u884c\uff0c\u8fd9\u5c31\u51b3\u5b9a\u4e86\u6808\u7684 \u6548\u7387\u6bd4\u8f83\u9ad8\u3002 \u5806\u5219\u662fC/C++\u51fd\u6570\u5e93\u63d0\u4f9b\u7684\uff0c\u5b83\u7684\u673a\u5236\u662f\u5f88\u590d\u6742\u7684\uff0c\u4f8b\u5982\u4e3a\u4e86\u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u5e93\u51fd\u6570\u4f1a\u6309\u7167\u4e00\u5b9a\u7684\u7b97\u6cd5\uff08\u5177\u4f53\u7684\u7b97\u6cd5\u53ef\u4ee5\u53c2\u8003\u6570\u636e\u7ed3\u6784/\u64cd\u4f5c\u7cfb \u7edf\uff09\u5728\u5806\u5185\u5b58\u4e2d\u641c\u7d22\u53ef\u7528\u7684\u8db3\u591f\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u6ca1\u6709\u8db3\u591f\u5927\u5c0f\u7684\u7a7a\u95f4\uff08\u53ef\u80fd\u662f\u7531\u4e8e\u5185\u5b58\u788e\u7247\u592a\u591a\uff09\uff0c\u5c31\u6709\u53ef\u80fd\u8c03\u7528\u7cfb\u7edf\u529f\u80fd\u53bb\u589e\u52a0\u7a0b\u5e8f\u6570\u636e\u6bb5\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd9\u6837\u5c31 \u6709\u673a\u4f1a\u5206\u5230\u8db3\u591f\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u8fd4\u56de\u3002 \u663e\u7136\uff0c\u5806\u7684\u6548\u7387\u6bd4\u6808\u8981\u4f4e\u5f97\u591a\u3002 \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5806\u548c\u6808\u76f8\u6bd4\uff0c\u7531\u4e8e\u5927\u91cf new/delete\u7684\u4f7f\u7528\uff0c\u5bb9\u6613\u9020\u6210\u5927\u91cf\u7684\u5185\u5b58\u788e\u7247\uff1b\u7531\u4e8e\u6ca1\u6709\u4e13\u95e8\u7684\u7cfb\u7edf\u652f\u6301\uff0c\u6548\u7387\u5f88\u4f4e\uff1b\u7531\u4e8e\u53ef\u80fd\u5f15\u53d1 \u7528\u6237\u6001\u548c\u6838\u5fc3\u6001\u7684\u5207\u6362\uff0c\u5185\u5b58\u7684\u7533\u8bf7\uff0c\u4ee3\u4ef7\u53d8\u5f97\u66f4\u52a0\u6602\u8d35\u3002\u6240\u4ee5\u6808\u5728\u7a0b\u5e8f\u4e2d\u662f\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\uff0c\u5c31\u7b97\u662f\u51fd\u6570\u7684\u8c03\u7528\u4e5f\u5229\u7528\u6808\u53bb\u5b8c\u6210\uff0c\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\u7684\u53c2\u6570\uff0c\u8fd4\u56de\u5730 \u5740\uff0cEBP\u548c\u5c40\u90e8\u53d8\u91cf\u90fd\u91c7\u7528\u6808\u7684\u65b9\u5f0f\u5b58\u653e\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u63a8\u8350\u5927\u5bb6\u5c3d\u91cf\u7528\u6808\uff0c\u800c\u4e0d\u662f\u7528\u5806\u3002 \u867d\u7136\u6808\u6709\u5982\u6b64\u4f17\u591a\u7684\u597d\u5904\uff0c\u4f46\u662f\u7531\u4e8e\u548c\u5806\u76f8\u6bd4\u4e0d\u662f\u90a3\u4e48\u7075\u6d3b\uff0c\u6709\u65f6\u5019\u5206\u914d\u5927\u91cf\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd8\u662f\u7528\u5806\u597d\u4e00\u4e9b\u3002 static\u7528\u6765\u63a7\u5236\u53d8\u91cf\u7684\u5b58\u50a8\u65b9\u5f0f\u548c\u53ef\u89c1\u6027 \u00b6 \u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5728\u7a0b\u5e8f\u6267\u884c\u5230\u5b83\u7684\u5b9a\u4e49\u5904\u65f6\uff0c\u7f16\u8bd1\u5668\u4e3a\u5b83\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\uff0c\u51fd\u6570\u5728\u6808\u4e0a\u5206\u914d\u7684\u7a7a\u95f4\u5728\u6b64\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u91ca\u653e\u6389\u3002 \u8fd9\u6837\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u95ee\u9898: Question \u5982\u679c\u60f3\u5c06\u51fd\u6570\u4e2d\u6b64\u53d8\u91cf\u7684\u503c\u4fdd\u5b58\u81f3\u4e0b\u4e00\u6b21\u8c03\u7528\u65f6\uff0c\u5982\u4f55\u5b9e\u73b0\uff1f \u6700\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5\u662f\u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u7684\u53d8\u91cf\uff0c\u4f46\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6709\u8bb8\u591a\u7f3a\u70b9\uff0c\u6700\u660e\u663e\u7684\u7f3a\u70b9\u662f\u7834\u574f\u4e86\u6b64\u53d8\u91cf\u7684\u8bbf\u95ee\u8303\u56f4\uff08\u4f7f\u5f97\u5728\u6b64\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4e0d\u4ec5\u4ec5\u53d7\u6b64\u51fd\u6570\u63a7\u5236\uff09\u3002 static\u7684\u5185\u90e8\u673a\u5236 \u00b6 \u9759\u6001\u6570\u636e\u6210\u5458\u8981\u5b9e\u9645\u5730\u5206\u914d\u7a7a\u95f4\uff0c\u6545\u4e0d\u80fd\u5728\u7c7b\u7684\u58f0\u660e\u4e2d\u5b9a\u4e49\uff08\u53ea\u80fd\u58f0\u660e\u6570\u636e\u6210\u5458\uff09\u3002\u7c7b\u58f0\u660e\u53ea\u58f0\u660e\u4e00\u4e2a\u7c7b\u7684\u201c\u5c3a\u5bf8\u548c\u89c4\u683c\u201d\uff0c\u5e76\u4e0d\u8fdb\u884c\u5b9e\u9645\u7684\u5185\u5b58\u5206\u914d\uff0c\u6240\u4ee5\u5728\u7c7b\u58f0\u660e\u4e2d\u5199\u6210\u5b9a\u4e49\u662f\u9519\u8bef\u7684\u3002 \u5b83\u4e5f\u4e0d\u80fd\u5728\u5934\u6587\u4ef6\u4e2d\u7c7b\u58f0\u660e\u7684\u5916\u90e8\u5b9a\u4e49\uff0c\u56e0\u4e3a\u90a3\u4f1a\u9020\u6210\u5728\u591a\u4e2a\u4f7f\u7528\u8be5\u7c7b\u7684\u6e90\u6587\u4ef6\u4e2d\uff0c\u5bf9\u5176\u91cd\u590d\u5b9a\u4e49\u3002 static\u88ab\u5f15\u5165\u4ee5\u544a\u77e5\u7f16\u8bd1\u5668\uff0c\u5c06\u53d8\u91cf\u5b58\u50a8\u5728\u7a0b\u5e8f\u7684\u9759\u6001\u5b58\u50a8\u533a\u800c\u975e\u6808\u4e0a\u7a7a\u95f4\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u6309\u5b9a\u4e49\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u4f9d\u6b21\u521d\u59cb\u5316\uff0c\u6ce8\u610f\u9759\u6001\u6210\u5458\u5d4c\u5957\u65f6\uff0c\u8981\u4fdd\u8bc1\u6240\u5d4c\u5957\u7684\u6210\u5458\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\u3002\u6d88\u9664\u65f6\u7684\u987a\u5e8f\u662f\u521d\u59cb\u5316\u7684\u53cd\u987a\u5e8f\u3002 static\u7684\u4f18\u52bf \u00b6 \u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u56e0\u4e3a\u5b83\u662f\u6240\u6709\u5bf9\u8c61\u6240\u516c\u6709\u7684\uff0c\u56e0\u6b64\uff0c\u5bf9\u591a\u4e2a\u5bf9\u8c61\u6765\u8bf4\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u53ea\u5b58\u50a8\u4e00\u5904\uff0c\u4f9b\u6240\u6709\u5bf9\u8c61\u5171\u7528\u3002 \u9759\u6001\u6570\u636e\u6210\u5458\u7684\u503c\u5bf9\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u6837\uff0c\u4f46\u5b83\u7684\u503c\u662f\u53ef\u4ee5\u66f4\u65b0\u7684\u3002\u53ea\u8981\u5bf9\u9759\u6001\u6570\u636e\u6210\u5458\u7684\u503c\u66f4\u65b0\u4e00\u6b21\uff0c\u4fdd\u8bc1\u6240\u6709\u5bf9\u8c61\u5b58\u53d6\u66f4\u65b0\u540e\u7684\u76f8\u540c\u7684\u503c\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u9ad8\u65f6\u95f4\u6548\u7387\u3002 (1)\u7c7b\u7684\u9759\u6001\u6210\u5458\u51fd\u6570\u662f\u5c5e\u4e8e\u6574\u4e2a\u7c7b\u800c\u975e\u7c7b\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709this\u6307\u9488\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5b83\u4ec5\u80fd\u8bbf\u95ee\u7c7b\u7684\u9759\u6001\u6570\u636e\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 (2)\u4e0d\u80fd\u5c06\u9759\u6001\u6210\u5458\u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570\u3002 (3)\u7531\u4e8e\u9759\u6001\u6210\u5458\u58f0\u660e\u4e8e\u7c7b\u4e2d\uff0c\u64cd\u4f5c\u4e8e\u5176\u5916\uff0c\u6240\u4ee5\u5bf9\u5176\u53d6\u5730\u5740\u64cd\u4f5c\uff0c\u5c31\u591a\u5c11\u6709\u4e9b\u7279\u6b8a\uff0c\u53d8\u91cf\u5730\u5740\u662f\u6307\u5411\u5176\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\uff0c\u51fd\u6570\u5730\u5740\u7c7b\u578b\u662f\u4e00\u4e2a\u201cnonmember\u51fd\u6570\u6307\u9488\u201d\u3002 (4)\u7531\u4e8e\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709this\u6307\u9488\uff0c\u6240\u4ee5\u5c31\u5dee\u4e0d\u591a\u7b49\u540c\u4e8enonmember\u51fd\u6570\uff0c\u7ed3\u679c\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u610f\u60f3\u4e0d\u5230\u7684\u597d\u5904\uff1a\u6210\u4e3a\u4e00\u4e2acallback\u51fd\u6570\uff0c\u4f7f\u5f97\u6211\u4eec\u5f97\u4ee5\u5c06C++\u548cC-based X Window\u7cfb\u7edf\u7ed3\u5408\uff0c\u540c\u65f6\u4e5f\u6210\u529f\u7684\u5e94\u7528\u4e8e\u7ebf\u7a0b\u51fd\u6570\u8eab\u4e0a\u3002 (5)static\u5e76\u6ca1\u6709\u589e\u52a0\u7a0b\u5e8f\u7684\u65f6\u7a7a\u5f00\u9500\uff0c\u76f8\u53cd\u5979\u8fd8\u7f29\u77ed\u4e86\u5b50\u7c7b\u5bf9\u7236\u7c7b\u9759\u6001\u6210\u5458\u7684\u8bbf\u95ee\u65f6\u95f4\uff0c\u8282\u7701\u4e86\u5b50\u7c7b\u7684\u5185\u5b58\u7a7a\u95f4\u3002 (6)\u9759\u6001\u6570\u636e\u6210\u5458\u662f\u9759\u6001\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u5bf9\u5b83\u8fdb\u884c\u521d\u59cb\u5316\u3002 (7)\u9759\u6001\u6210\u5458\u521d\u59cb\u5316\u4e0e\u4e00\u822c\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u4e0d\u540c: - \u521d\u59cb\u5316\u5728\u7c7b\u4f53\u5916\u8fdb\u884c\uff0c\u800c\u524d\u9762\u4e0d\u52a0static\uff0c\u4ee5\u514d\u4e0e\u4e00\u822c\u9759\u6001\u53d8\u91cf\u6216\u5bf9\u8c61\u76f8\u6df7\u6dc6\uff1b - \u521d\u59cb\u5316\u65f6\u4e0d\u52a0\u8be5\u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\u63a7\u5236\u7b26private\uff0cpublic\u7b49\uff1b \u3000\u3000- \u521d\u59cb\u5316\u65f6\u4f7f\u7528\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u6765\u6807\u660e\u5b83\u6240\u5c5e\u7c7b\uff1b - \u6240\u4ee5\u6211\u4eec\u5f97\u51fa\u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u7684\u683c\u5f0f\uff1a <\u6570\u636e\u7c7b\u578b><\u7c7b\u540d>::<\u9759\u6001\u6570\u636e\u6210\u5458\u540d>=<\u503c> (8) \u4e3a\u4e86\u9632\u6b62\u7236\u7c7b\u7684\u5f71\u54cd\uff0c\u53ef\u4ee5\u5728\u5b50\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u7236\u7c7b\u76f8\u540c\u7684\u9759\u6001\u53d8\u91cf\uff0c\u4ee5\u5c4f\u853d\u7236\u7c7b\u7684\u5f71\u54cd\u3002\u8fd9\u91cc\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff1a\u6211\u4eec\u8bf4\u9759\u6001\u6210\u5458\u4e3a\u7236\u7c7b\u548c\u5b50\u7c7b\u5171\u4eab\uff0c\u4f46\u6211\u4eec\u6709\u91cd\u590d\u5b9a\u4e49\u4e86\u9759\u6001\u6210\u5458\uff0c\u8fd9\u4f1a\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u5462\uff1f\u4e0d\u4f1a\uff0c\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u91c7\u7528\u4e86\u4e00\u79cd\u7edd\u5999\u7684\u624b\u6cd5\uff1aname-mangling \u7528\u4ee5\u751f\u6210\u552f\u4e00\u7684\u6807\u5fd7\u3002 static\u7684\u53ef\u89c1\u6027\u5c06\u5728\u4ee5\u4e0b\u5185\u5bb9\u6709\u8986\u76d6 C++\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b \u00b6 \u5185\u5b58\u4e2d\u4f9b\u7528\u6237\u4f7f\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\u5206\u4e3a\u4ee3\u7801\u533a\u4e0e\u6570\u636e\u533a\u4e24\u4e2a\u90e8\u5206\u3002 \u53d8\u91cf\u5b58\u50a8\u5728\u6570\u636e\u533a\uff0c\u6570\u636e\u533a\u53c8\u53ef\u5206\u4e3a\u9759\u6001\u5b58\u50a8\u533a\u4e0e\u52a8\u6001\u5b58\u50a8\u533a\u3002 \u9759\u6001\u5b58\u50a8\u662f\u6307\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u7ed9\u53d8\u91cf\u5206\u914d\u56fa\u5b9a\u5b58\u50a8\u7a7a\u95f4\u7684\u65b9\u5f0f\u3002\u5982\u5168\u5c40\u53d8\u91cf\u5b58\u653e\u5728\u9759\u6001\u5b58\u50a8\u533a\u4e2d\uff0c\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5206\u914d\u7a7a\u95f4\uff0c\u7a0b\u5e8f\u8fd0\u884c\u5b8c\u91ca\u653e\u3002 \u52a8\u6001\u5b58\u50a8\u662f\u6307\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6839\u636e\u5b9e\u9645\u9700\u8981\u52a8\u6001\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u7684\u65b9\u5f0f\u3002 \u5982\u5f62\u5f0f\u53c2\u6570\u5b58\u653e\u5728\u52a8\u6001\u5b58\u50a8\u533a\u4e2d\uff0c\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5206\u914d\u7a7a\u95f4\uff0c\u8c03\u7528\u5b8c\u6210\u91ca\u653e\u3002 \u5bf9\u4e8e\u9759\u6001\u5b58\u50a8\u65b9\u5f0f\u7684\u53d8\u91cf\u53ef\u5728\u7f16\u8bd1\u65f6\u521d\u59cb\u5316\uff0c\u9ed8\u8ba4\u521d\u503c\u4e3aO\u6216\u7a7a\u5b57\u7b26\u3002\u5bf9\u52a8\u6001\u5b58\u50a8\u65b9\u5f0f\u7684\u53d8\u91cf\u5982\u4e0d\u8d4b\u521d\u503c\uff0c\u5219\u5b83\u7684\u503c\u662f\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u503c\u3002 \u56db\u79cd\u5b58\u50a8\u7c7b \u81ea\u52a8(auto)\u3001\u5bc4\u5b58\u5668(register)\u3001\u9759\u6001(static)\u53ca\u5916\u90e8(extern) \u9759\u6001\u5b58\u50a8\u7c7b\u522b\u4e0e\u5916\u90e8\u5b58\u50a8\u7c7b\u522b\u53d8\u91cf\u5b58\u653e\u5728\u9759\u6001\u5b58\u50a8\u533a \u81ea\u52a8\u5b58\u50a8\u7c7b\u522b\u53d8\u91cf\u5b58\u653e\u5728\u52a8\u6001\u5b58\u50a8\u533a \u5bc4\u5b58\u5668\u5b58\u50a8\u7c7b\u522b\u76f4\u63a5\u9001\u5bc4\u5b58\u5668 auto \u5b58\u50a8\u7c7b\u6307\u660e\u7b26 \u00b6 \u7528\u4e8e\u8bf4\u660e\u5177\u6709\u5c40\u90e8\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u5b83\u8868\u793a\u53d8\u91cf\u5177\u6709\u5c40\u90e8\uff08\u81ea\u52a8\uff09\u751f\u6210\u671f\uff0c\u4f46\u7531\u4e8e\u5b83\u662f\u6240\u6709\u5c40\u90e8\u4f5c\u7528\u57df\u53d8\u91cf\u8bf4\u660e\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u6307\u660e\u7b26\uff0c\u6240\u4ee5\u4f7f\u7528\u5f97\u5f88 \u5c11\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6240\u6709\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u90fd\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u5176\u4f5c\u7528\u57df\u53ea\u5728\u51fd\u6570\u5185\u90e8\u3002\u5b83\u7684\u751f\u5b58\u671f\u4e3a\u8be5\u51fd\u6570\u8fd0\u884c\u671f\u95f4\uff0c\u4e00\u65e6\u79bb\u5f00\u8fd9\u4e2a\u51fd\u6570\u6216\u8fd9\u4e2a \u51fd\u6570\u7ec8\u6b62\uff0c\u5c40\u90e8\u53d8\u91cf\u4e5f\u968f\u4e4b\u6d88\u5931\u3002 register \u5b58\u50a8\u7c7b\u6307\u660e\u7b26 \u00b6 \u5f53\u58f0\u660e\u4e86\u8fd9\u4e2a\u6307\u660e\u7b26\u540e\uff0c\u7f16\u8bd1\u7a0b\u5e8f\u5c06\u5c3d\u53ef\u80fd\u5730\u4e3a\u8be5\u53d8\u91cf\u5206\u914dCPU\u5185\u90e8\u7684\u5bc4\u5b58\u5668\u4f5c\u4e3a\u53d8\u91cf\u7684\u5b58\u50a8\u5355\u5143\uff0c\u4ee5\u52a0\u5feb\u8fd0\u884c\u901f\u5ea6\u3002\u6ce8\u610f\uff0c\u5bc4\u5b58\u5668\u4e0e\u5b58\u50a8\u5668\u662f \u4e0d\u540c\u7684\u3002\u5bc4\u5b58\u5668\u4e00\u822c\u5728CPU\u5185\u90e8\uff0c\u800c\u5b58\u50a8\u5668\u4e00\u822c\u6307\u5916\u90e8\u7684\uff08\u6bd4\u5982\u5185\u5b58\u6761\uff09\uff0cCPU\u5185\u90e8\u7684\u5bc4\u5b58\u5668\u5176\u8fd0\u7b97\u901f\u5ea6\u662f\u5f88\u9ad8\u7684\u3002\u5f53\u5bc4\u5b58\u5668\u5df2\u5206\u914d\u5b8c\u6bd5\uff0c\u5c31\u81ea\u52a8\u5730\u5206\u914d\u4e00\u4e2a\u5916\u90e8\u7684\u5185\u5b58\u3002\u5b83\u7684\u4f5c\u7528\u7b49\u4ef7\u4e8eauto\uff0c\u4e5f\u53ea\u80fd\u7528\u4e8e\u5c40\u90e8\u53d8\u91cf\u548c\u51fd\u6570\u7684\u53c2\u91cf\u8bf4\u660e\u3002 static \u5b58\u50a8\u7c7b\u6307\u660e\u7b26 \u00b6 \u8868\u793a\u53d8\u91cf\u5177\u6709\u9759\u6001\u751f\u6210\u671f\u3002 static\u53d8\u91cf\u7684\u7684\u7279\u70b9\u662f\u5b83\u79bb\u5f00\u4e86\u5176\u4f5c\u7528\u57df\u540e\uff0c\u5176\u503c\u4e0d\u4f1a\u6d88\u5931\u3002 \u5f53\u56de\u5230\u8be5\u4f5c\u7528\u57df\u4e4b\u540e\u53c8\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e2astatic\u53d8\u91cf\u7684\u503c\u3002 // \u5229\u7528static\u53d8\u91cf\u7edf\u8ba1\u8c03\u7528\u51fd\u6570\u7684\u6b21\u6570 #include <iostream> using namespace std ; int two (); /*\u51fd\u6570\u539f\u578b\u8bf4\u660e*/ int main () { int a = 0 ; a = two (); /*a\u7684\u503c\u7b49\u4e8e1*/ a = two (); /*a\u7684\u503c\u7b49\u4e8e2*/ a = two (); /*a\u7684\u503c\u7b49\u4e8e3*/ cout << a ; return 0 ; } int two () { static int b = 0 ; /*\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c40\u90e8\u7684static\u53d8\u91cf*/ b ++ ; return b ; } extern \u5b58\u50a8\u7c7b\u6307\u660e\u7b26 \u00b6 \u4e00\u822c\u7528\u5728\u5de5\u7a0b\u6587\u4ef6\u4e2d\u3002\u5728\u4e00\u4e2a\u5de5\u7a0b\u6587\u4ef6\u4e2d\u56e0\u4e3a\u6709\u591a\u4e2a\u7a0b\u5e8f\u6587\u4ef6\uff0c\u5f53\u67d0\u4e00\u4e2a\u53d8\u91cf\u5728\u4e00\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u4e4b\u540e\uff0c\u5982\u679c\u5728\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u4e88\u4ee5\u5b9a\u4e49\uff0c \u5c31\u4f1a\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49\u53d8\u91cf\u7684\u9519\u8bef\u3002\u4f7f\u7528extern\u5b58\u50a8\u7c7b\u578b\u6307\u660e\u7b26\u5c31\u53ef\u4ee5\u6307\u51fa\u5728\u8be5\u6587\u4ef6\u5916\u90e8\u5df2\u7ecf\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u53d8\u91cf\u3002extern\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u6574\u4e2a\u7a0b\u5e8f\u3002 \u53d8\u91cf\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4ec0\u4e48\u5730\u65b9\uff1f \u00b6 \u53d8\u91cf\u53ef\u4ee5\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4e0d\u540c\u5730\u65b9\uff0c\u8fd9\u4f9d\u8d56\u4e8e\u5b83\u4eec\u7684\u751f\u6210\u671f\u3002\u5728\u51fd\u6570\u4e0a\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff08\u5168\u5c40\u53d8\u91cf\u6216static\u5916\u90e8\u53d8\u91cf\uff09\u548c\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684static\u53d8\u91cf\uff0c\u5176\u751f\u5b58\u671f\u5c31\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u5168\u8fc7\u7a0b\u3002\u8fd9\u4e9b\u53d8\u91cf\u88ab\u5b58\u50a8\u5728\u6570\u636e\u6bb5(Data Segment)\u4e2d\u3002\u6570\u636e\u6bb5\u662f\u5728\u5185\u5b58\u4e2d\u4e3a\u8fd9\u4e9b\u53d8\u91cf\u7559\u51fa\u7684\u4e00\u6bb5\u5927\u5c0f\u56fa\u5b9a\u7684\u7a7a\u95f4\uff0c\u5b83\u5206\u4e3a\u4e8c\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u7528\u6765\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u53e6\u4e00\u90e8\u5206\u7528\u6765\u5b58\u653e\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3002 \u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684auto\u53d8\u91cf\uff08\u6ca1\u6709\u7528\u5173\u952e\u5b57static\u5b9a\u4e49\u7684\u53d8\u91cf\uff09\u7684\u751f\u6210\u671f\u4ece\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u5176\u6240\u5728\u7684\u7a0b\u5e8f\u5757\u4ee3\u7801\u65f6\u5f00\u59cb\uff0c\u5230\u7a0b\u5e8f\u79bb\u5f00\u8be5\u7a0b\u5e8f\u5757\u65f6\u4e3a\u6b62\u3002 \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u53d8\u91cf\u53ea\u5728\u8c03\u7528\u8be5\u51fd\u6570\u671f\u95f4\u5b58\u5728\u3002\u8fd9\u4e9b\u53d8\u91cf\u88ab\u5b58\u50a8\u5728\u6808(stack)\u4e2d\u3002\u6808\u662f\u5185\u5b58\u4e2d\u7684\u4e00\u6bb5\u7a7a\u95f4\uff0c\u5f00\u59cb\u5f88\u5c0f\uff0c\u4ee5\u540e\u9010\u6e10\u81ea\u52a8\u53d8\u5927\uff0c\u76f4\u5230\u8fbe\u5230\u67d0\u4e2a\u9884\u5b9a\u4e49\u7684\u754c\u9650\u3002 \u5f53\u7528malloc\u7b49\u51fd\u6570\u7ed9\u6307\u9488\u5206\u914d\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u5206\u914d\u7684\u5185\u5b58\u5757\u4f4d\u4e8e\u4e00\u6bb5\u540d\u4e3a\u201c\u5806\uff08heap\uff09\u201d\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\u3002\u5806\u5f00\u59cb\u65f6\u5f88\u5c0f\uff0c\u4f46\u8c03\u7528malloc\u6216clloc\u7b49\u5185\u5b58\u5206\u914d\u51fd\u6570\u65f6\u5b83\u5c31\u4f1a\u589e\u5927\u3002\u5806\u53ef\u4ee5\u548c\u6570\u636e\u6bb5\u6216\u6808\u5171\u7528\u4e00\u4e2a\u5185\u5b58\u6bb5\uff0c\u4e5f\u53ef\u4ee5\u6709\u5b83\u81ea\u5df1\u7684\u5185\u5b58\u6bb5\uff0c\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8e\u7f16\u8bd1\u9009\u9879\u548c\u64cd\u4f5c\u7cfb\u7edf\u3002\u4e0e\u6808\u76f8\u4f3c\uff0c\u5806\u4e5f\u6709\u4e00\u4e2a\u589e\u957f\u754c\u9650\uff0c\u5e76\u4e14\u51b3\u5b9a\u8fd9\u4e2a\u754c\u9650\u7684\u89c4\u5219\u4e0e\u6808\u76f8\u540c\u3002 \u6587\u7ae0\u53c2\u8003: https://www.cnblogs.com/hanyonglu/archive/2011/04/12/2014212.html","title":"c++ \u5806\u3001\u6808\u3001\u9759\u6001\u6570\u636e\u533a"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#_1","text":"\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\u5219\u4e00\u5b9a\u4f1a\u7ed9\u5176\u5f00\u8f9f\u4e00\u4e2a\u7a7a\u95f4\uff08\u5373\u4f7f\u4e0d\u521d\u59cb\u5316\u3001\u8d4b\u503c\u4e5f\u662f\u5982\u6b64\uff09\uff0c\u6b63\u5982\u7c7b\u4e2d\u7684\u666e\u901a\u6210\u5458\u53d8\u91cf\uff0c\u6211\u4ecd\u4ee5\u6574\u578b\u8bf4\u660e\uff0c\u5f53\u5176\u88ab\u5b9a\u4e49\u4e8e\u7c7b\u4e2d\u65f6\uff0c\u5c31\u662f\u8868\u660e\u6b64\u7c7b\u9700\u8981\u4e00\u4e2a\u6574\u578b\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u6bcf\u521b\u5efa\u4e00\u4e2a\u7c7b\u5bf9\u8c61\u65f6\uff0c\u5c31\u4f1a\u7ed9\u8be5\u5bf9\u8c61\u76f8\u5e94\u7684\u5927\u5c0f\u3002 static\u53d8\u91cf\u662f\u5b58\u50a8\u4e8e\u5168\u5c40\u6570\u636e\u533a\uff0c\u4e0e\u7c7b\u5bf9\u8c61\uff08\u5bf9\u8c61\u4e2d\u5305\u62ec\u6210\u5458\u53d8\u91cf\uff09\u7684\u5b58\u50a8\u4f4d\u7f6e\u5e76\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u5728\u7c7b\u4e2d\u4e0d\u662f\u5b9a\u4e49\uff08\u4e0d\u7ed9\u5176\u7a7a\u95f4\uff09\u3002","title":"\u7c7b\u5185\u9759\u6001\u6210\u5458\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u7ed9\u5b9a\u4e49\uff1f"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#_2","text":"\u5728C++\u4e2d\uff0c\u5185\u5b58\u5206\u62105\u4e2a\u533a\uff0c\u4ed6\u4eec\u5206\u522b\u662f\u5806\u3001\u6808\u3001\u81ea\u7531\u5b58\u50a8\u533a\u3001\u5168\u5c40/\u9759\u6001\u5b58\u50a8\u533a\u548c\u5e38\u91cf\u5b58\u50a8\u533a\u3002 \u6808: \u5c31\u662f\u90a3\u4e9b\u7531\u7f16\u8bd1\u5668\u5728\u9700\u8981\u7684\u65f6\u5019\u5206\u914d\uff0c\u5728\u4e0d\u9700\u8981\u7684\u65f6\u5019\u81ea\u52a8\u6e05\u9664\u7684\u53d8\u91cf\u7684\u5b58\u50a8\u533a\u3002\u91cc\u9762\u7684\u53d8\u91cf\u901a\u5e38\u662f\u5c40\u90e8\u53d8\u91cf\u3001\u51fd\u6570\u53c2\u6570\u7b49\u3002 \u5806: \u5c31\u662f\u90a3\u4e9b\u7531new\u5206\u914d\u7684\u5185\u5b58\u5757\uff0c\u4ed6\u4eec\u7684\u91ca\u653e\u7f16\u8bd1\u5668\u4e0d\u53bb\u7ba1\uff0c\u7531\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u53bb\u63a7\u5236\uff0c\u4e00\u822c\u4e00\u4e2anew\u5c31\u8981\u5bf9\u5e94\u4e00\u4e2adelete\u3002\u5982\u679c\u7a0b\u5e8f\u5458\u6ca1\u6709\u91ca\u653e\u6389\uff0c\u90a3\u4e48\u5728\u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u56de\u6536\u3002 \u81ea\u7531\u5b58\u50a8\u533a: \u5c31\u662f\u90a3\u4e9b\u7531malloc\u7b49\u5206\u914d\u7684\u5185\u5b58\u5757\uff0c\u4ed6\u548c\u5806\u662f\u5341\u5206\u76f8\u4f3c\u7684\uff0c\u4e0d\u8fc7\u5b83\u662f\u7528free\u6765\u7ed3\u675f\u81ea\u5df1\u7684\u751f\u547d\u7684\u3002 \u5168\u5c40/\u9759\u6001\u5b58\u50a8\u533a: \u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u88ab\u5206\u914d\u5230\u540c\u4e00\u5757\u5185\u5b58\u4e2d\uff0c\u5728\u4ee5\u524d\u7684C\u8bed\u8a00\u4e2d\uff0c\u5168\u5c40\u53d8\u91cf\u53c8\u5206\u4e3a\u521d\u59cb\u5316\u7684\u548c\u672a\u521d\u59cb\u5316\u7684\uff0c\u5728C++\u91cc\u9762\u6ca1\u6709\u8fd9\u4e2a\u533a\u5206\u4e86\uff0c\u4ed6\u4eec\u5171\u540c\u5360\u7528\u540c\u4e00\u5757\u5185\u5b58\u533a\uff08\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u90fd\u88ab\u521d\u59cb\u5316\u62100\u6216\u7a7a\u4e32\uff0cC\u4e2d\u4e5f\u4e00\u6837\uff09\u3002 \u5e38\u91cf\u5b58\u50a8\u533a: \u8fd9\u662f\u4e00\u5757\u6bd4\u8f83\u7279\u6b8a\u7684\u5b58\u50a8\u533a\uff0c\u4ed6\u4eec\u91cc\u9762\u5b58\u653e\u7684\u662f\u5e38\u91cf\uff0c\u4e0d\u5141\u8bb8\u4fee\u6539\uff08\u5f53\u7136\uff0c\u4f60\u8981\u901a\u8fc7\u975e\u6b63\u5f53\u624b\u6bb5\u4e5f\u53ef\u4ee5\u4fee\u6539\uff0c\u800c\u4e14\u65b9\u6cd5\u5f88\u591a\uff09\u3002","title":"\u4e94\u5927\u5185\u5b58\u5206\u533a"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#_3","text":"void f () { int * p = new int [ 5 ]; } \u4e0a\u9762\u8fd9\u6761\u77ed\u77ed\u7684\u4e00\u53e5\u8bdd\u5c31\u5305\u542b\u4e86\u5806\u4e0e\u6808\uff0c\u770b\u5230new\uff0c\u6211\u4eec\u9996\u5148\u5c31\u5e94\u8be5\u60f3\u5230\uff0c\u6211\u4eec\u5206\u914d\u4e86\u4e00\u5757\u5806\u5185\u5b58\uff0c\u90a3\u4e48\u6307\u9488p\u5462\uff1f\u4ed6\u5206\u914d\u7684\u662f\u4e00\u5757\u6808\u5185\u5b58\uff0c\u6240\u4ee5\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u5c31\u662f\uff1a\u5728\u6808\u5185\u5b58\u4e2d\u5b58\u653e\u4e86\u4e00\u4e2a\u6307\u5411\u4e00\u5757\u5806\u5185\u5b58\u7684\u6307\u9488p\u3002 \u5728\u7a0b\u5e8f\u4f1a\u5148\u786e\u5b9a\u5728\u5806\u4e2d\u5206\u914d\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u7136\u540e\u8c03\u7528operator new\u5206\u914d\u5185\u5b58\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u5757\u5185\u5b58\u7684\u9996\u5730\u5740\uff0c\u653e\u5165\u6808\u4e2d\uff0c\u4ed6\u5728VC6\u4e0b\u7684\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a 00401028 push 14h 0040102A call operator new (00401060) 0040102F add esp,4 00401032 mov dword ptr [ebp-8],eax 00401035 mov eax,dword ptr [ebp-8] 00401038 mov dword ptr [ebp-4],eax \u8fd9\u91cc\uff0c\u6211\u4eec\u4e3a\u4e86\u7b80\u5355\u5e76\u6ca1\u6709\u91ca\u653e\u5185\u5b58\uff0c\u90a3\u4e48\u8be5\u600e\u4e48\u53bb\u91ca\u653e\u5462\uff1f\u662fdelete p\u4e48\uff1f\u54e6\uff0c\u9519\u4e86\uff0c\u5e94\u8be5\u662fdelete []p\uff0c\u8fd9\u662f\u4e3a\u4e86\u544a\u8bc9\u7f16\u8bd1\u5668\uff1a\u6211\u5220\u9664\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\uff0cVC6\u5c31\u4f1a\u6839\u636e\u76f8\u5e94\u7684Cookie\u4fe1\u606f\u53bb\u8fdb\u884c\u91ca\u653e\u5185\u5b58\u7684\u5de5\u4f5c\u3002 \u597d\u4e86\uff0c\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u4e3b\u9898\uff1a\u5806\u548c\u6808\u7a76\u7adf\u6709\u4ec0\u4e48\u533a\u522b\uff1f \u4e3b\u8981\u7684\u533a\u522b\u7531\u4ee5\u4e0b\u51e0\u70b9\uff1a \u7ba1\u7406\u65b9\u5f0f\u4e0d\u540c\uff1b \u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u7ba1\u7406\uff0c\u65e0\u9700\u6211\u4eec\u624b\u5de5\u63a7\u5236\uff1b\u5bf9\u4e8e\u5806\u6765\u8bf4\uff0c\u91ca\u653e\u5de5\u4f5c\u7531\u7a0b\u5e8f\u5458\u63a7\u5236\uff0c\u5bb9\u6613\u4ea7\u751fmemory leak\u3002 \u7a7a\u95f4\u5927\u5c0f\u4e0d\u540c\uff1b \u4e00\u822c\u6765\u8bb2\u572832\u4f4d\u7cfb\u7edf\u4e0b\uff0c\u5806\u5185\u5b58\u53ef\u4ee5\u8fbe\u52304G\u7684\u7a7a\u95f4\uff0c\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\u5806\u5185\u5b58\u51e0\u4e4e\u662f\u6ca1\u6709\u4ec0\u4e48\u9650\u5236\u7684\u3002\u4f46\u662f\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u4e00\u822c\u90fd\u662f\u6709\u4e00\u5b9a\u7684\u7a7a\u95f4\u5927\u5c0f\u7684\u3002 \u80fd\u5426\u4ea7\u751f\u788e\u7247\u4e0d\u540c\uff1b \u5bf9\u4e8e\u5806\u6765\u8bb2\uff0c\u9891\u7e41\u7684new/delete\u52bf\u5fc5\u4f1a\u9020\u6210\u5185\u5b58\u7a7a\u95f4\u7684\u4e0d\u8fde\u7eed\uff0c\u4ece\u800c\u9020\u6210\u5927\u91cf\u7684\u788e\u7247\uff0c\u4f7f\u7a0b\u5e8f\u6548\u7387\u964d\u4f4e\u3002\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u5219\u4e0d\u4f1a\u5b58\u5728\u8fd9\u4e2a \u95ee\u9898\uff0c\u56e0\u4e3a\u6808\u662f\u5148\u8fdb\u540e\u51fa\u7684\u961f\u5217\uff0c\u4ed6\u4eec\u662f\u5982\u6b64\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u4ee5\u81f3\u4e8e\u6c38\u8fdc\u90fd\u4e0d\u53ef\u80fd\u6709\u4e00\u4e2a\u5185\u5b58\u5757\u4ece\u6808\u4e2d\u95f4\u5f39\u51fa\uff0c\u5728\u4ed6\u5f39\u51fa\u4e4b\u524d\uff0c\u5728\u4ed6\u4e0a\u9762\u7684\u540e\u8fdb\u7684\u6808\u5185\u5bb9\u5df2\u7ecf\u88ab\u5f39\u51fa\u3002 \u751f\u957f\u65b9\u5411\u4e0d\u540c\uff1b \u5bf9\u4e8e\u5806\u6765\u8bb2\uff0c\u751f\u957f\u65b9\u5411\u662f\u5411\u4e0a\u7684\uff0c\u4e5f\u5c31\u662f\u5411\u7740\u5185\u5b58\u5730\u5740\u589e\u52a0\u7684\u65b9\u5411\uff1b\u5bf9\u4e8e\u6808\u6765\u8bb2\uff0c\u5b83\u7684\u751f\u957f\u65b9\u5411\u662f\u5411\u4e0b\u7684\uff0c\u662f\u5411\u7740\u5185\u5b58\u5730\u5740\u51cf\u5c0f\u7684\u65b9\u5411\u589e\u957f \u5206\u914d\u65b9\u5f0f\u4e0d\u540c\uff1b \u5806\u90fd\u662f\u52a8\u6001\u5206\u914d\u7684\uff0c\u6ca1\u6709\u9759\u6001\u5206\u914d\u7684\u5806\u3002 \u6808\u67092\u79cd\u5206\u914d\u65b9\u5f0f\uff1a\u9759\u6001\u5206\u914d\u548c\u52a8\u6001\u5206\u914d\u3002\u9759\u6001\u5206\u914d\u662f\u7f16\u8bd1\u5668\u5b8c\u6210\u7684\uff0c\u6bd4\u5982\u5c40\u90e8\u53d8\u91cf\u7684\u5206\u914d\u3002\u52a8\u6001\u5206\u914d\u7531alloca\u51fd\u6570\u8fdb\u884c\u5206\u914d\uff0c\u4f46\u662f\u6808\u7684\u52a8\u6001\u5206\u914d\u548c\u5806\u662f\u4e0d\u540c\u7684\uff0c\u4ed6\u7684\u52a8\u6001\u5206\u914d\u662f\u7531\u7f16\u8bd1\u5668\u8fdb\u884c\u91ca\u653e\uff0c\u65e0\u9700\u6211\u4eec\u624b\u5de5\u5b9e\u73b0\u3002 \u5206\u914d\u6548\u7387\u4e0d\u540c\uff1b \u6808\u662f\u673a\u5668\u7cfb\u7edf\u63d0\u4f9b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8ba1\u7b97\u673a\u4f1a\u5728\u5e95\u5c42\u5bf9\u6808\u63d0\u4f9b\u652f\u6301\uff1a\u5206\u914d\u4e13\u95e8\u7684\u5bc4\u5b58\u5668\u5b58\u653e\u6808\u7684\u5730\u5740\uff0c\u538b\u6808\u51fa\u6808\u90fd\u6709\u4e13\u95e8\u7684\u6307\u4ee4\u6267\u884c\uff0c\u8fd9\u5c31\u51b3\u5b9a\u4e86\u6808\u7684 \u6548\u7387\u6bd4\u8f83\u9ad8\u3002 \u5806\u5219\u662fC/C++\u51fd\u6570\u5e93\u63d0\u4f9b\u7684\uff0c\u5b83\u7684\u673a\u5236\u662f\u5f88\u590d\u6742\u7684\uff0c\u4f8b\u5982\u4e3a\u4e86\u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u5e93\u51fd\u6570\u4f1a\u6309\u7167\u4e00\u5b9a\u7684\u7b97\u6cd5\uff08\u5177\u4f53\u7684\u7b97\u6cd5\u53ef\u4ee5\u53c2\u8003\u6570\u636e\u7ed3\u6784/\u64cd\u4f5c\u7cfb \u7edf\uff09\u5728\u5806\u5185\u5b58\u4e2d\u641c\u7d22\u53ef\u7528\u7684\u8db3\u591f\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u5982\u679c\u6ca1\u6709\u8db3\u591f\u5927\u5c0f\u7684\u7a7a\u95f4\uff08\u53ef\u80fd\u662f\u7531\u4e8e\u5185\u5b58\u788e\u7247\u592a\u591a\uff09\uff0c\u5c31\u6709\u53ef\u80fd\u8c03\u7528\u7cfb\u7edf\u529f\u80fd\u53bb\u589e\u52a0\u7a0b\u5e8f\u6570\u636e\u6bb5\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd9\u6837\u5c31 \u6709\u673a\u4f1a\u5206\u5230\u8db3\u591f\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u8fd4\u56de\u3002 \u663e\u7136\uff0c\u5806\u7684\u6548\u7387\u6bd4\u6808\u8981\u4f4e\u5f97\u591a\u3002 \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5806\u548c\u6808\u76f8\u6bd4\uff0c\u7531\u4e8e\u5927\u91cf new/delete\u7684\u4f7f\u7528\uff0c\u5bb9\u6613\u9020\u6210\u5927\u91cf\u7684\u5185\u5b58\u788e\u7247\uff1b\u7531\u4e8e\u6ca1\u6709\u4e13\u95e8\u7684\u7cfb\u7edf\u652f\u6301\uff0c\u6548\u7387\u5f88\u4f4e\uff1b\u7531\u4e8e\u53ef\u80fd\u5f15\u53d1 \u7528\u6237\u6001\u548c\u6838\u5fc3\u6001\u7684\u5207\u6362\uff0c\u5185\u5b58\u7684\u7533\u8bf7\uff0c\u4ee3\u4ef7\u53d8\u5f97\u66f4\u52a0\u6602\u8d35\u3002\u6240\u4ee5\u6808\u5728\u7a0b\u5e8f\u4e2d\u662f\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\uff0c\u5c31\u7b97\u662f\u51fd\u6570\u7684\u8c03\u7528\u4e5f\u5229\u7528\u6808\u53bb\u5b8c\u6210\uff0c\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\u7684\u53c2\u6570\uff0c\u8fd4\u56de\u5730 \u5740\uff0cEBP\u548c\u5c40\u90e8\u53d8\u91cf\u90fd\u91c7\u7528\u6808\u7684\u65b9\u5f0f\u5b58\u653e\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u63a8\u8350\u5927\u5bb6\u5c3d\u91cf\u7528\u6808\uff0c\u800c\u4e0d\u662f\u7528\u5806\u3002 \u867d\u7136\u6808\u6709\u5982\u6b64\u4f17\u591a\u7684\u597d\u5904\uff0c\u4f46\u662f\u7531\u4e8e\u548c\u5806\u76f8\u6bd4\u4e0d\u662f\u90a3\u4e48\u7075\u6d3b\uff0c\u6709\u65f6\u5019\u5206\u914d\u5927\u91cf\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd8\u662f\u7528\u5806\u597d\u4e00\u4e9b\u3002","title":"\u660e\u786e\u533a\u5206\u5806\u4e0e\u6808"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#static","text":"\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5728\u7a0b\u5e8f\u6267\u884c\u5230\u5b83\u7684\u5b9a\u4e49\u5904\u65f6\uff0c\u7f16\u8bd1\u5668\u4e3a\u5b83\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\uff0c\u51fd\u6570\u5728\u6808\u4e0a\u5206\u914d\u7684\u7a7a\u95f4\u5728\u6b64\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u91ca\u653e\u6389\u3002 \u8fd9\u6837\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u95ee\u9898: Question \u5982\u679c\u60f3\u5c06\u51fd\u6570\u4e2d\u6b64\u53d8\u91cf\u7684\u503c\u4fdd\u5b58\u81f3\u4e0b\u4e00\u6b21\u8c03\u7528\u65f6\uff0c\u5982\u4f55\u5b9e\u73b0\uff1f \u6700\u5bb9\u6613\u60f3\u5230\u7684\u65b9\u6cd5\u662f\u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u7684\u53d8\u91cf\uff0c\u4f46\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6709\u8bb8\u591a\u7f3a\u70b9\uff0c\u6700\u660e\u663e\u7684\u7f3a\u70b9\u662f\u7834\u574f\u4e86\u6b64\u53d8\u91cf\u7684\u8bbf\u95ee\u8303\u56f4\uff08\u4f7f\u5f97\u5728\u6b64\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4e0d\u4ec5\u4ec5\u53d7\u6b64\u51fd\u6570\u63a7\u5236\uff09\u3002","title":"static\u7528\u6765\u63a7\u5236\u53d8\u91cf\u7684\u5b58\u50a8\u65b9\u5f0f\u548c\u53ef\u89c1\u6027"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#static_1","text":"\u9759\u6001\u6570\u636e\u6210\u5458\u8981\u5b9e\u9645\u5730\u5206\u914d\u7a7a\u95f4\uff0c\u6545\u4e0d\u80fd\u5728\u7c7b\u7684\u58f0\u660e\u4e2d\u5b9a\u4e49\uff08\u53ea\u80fd\u58f0\u660e\u6570\u636e\u6210\u5458\uff09\u3002\u7c7b\u58f0\u660e\u53ea\u58f0\u660e\u4e00\u4e2a\u7c7b\u7684\u201c\u5c3a\u5bf8\u548c\u89c4\u683c\u201d\uff0c\u5e76\u4e0d\u8fdb\u884c\u5b9e\u9645\u7684\u5185\u5b58\u5206\u914d\uff0c\u6240\u4ee5\u5728\u7c7b\u58f0\u660e\u4e2d\u5199\u6210\u5b9a\u4e49\u662f\u9519\u8bef\u7684\u3002 \u5b83\u4e5f\u4e0d\u80fd\u5728\u5934\u6587\u4ef6\u4e2d\u7c7b\u58f0\u660e\u7684\u5916\u90e8\u5b9a\u4e49\uff0c\u56e0\u4e3a\u90a3\u4f1a\u9020\u6210\u5728\u591a\u4e2a\u4f7f\u7528\u8be5\u7c7b\u7684\u6e90\u6587\u4ef6\u4e2d\uff0c\u5bf9\u5176\u91cd\u590d\u5b9a\u4e49\u3002 static\u88ab\u5f15\u5165\u4ee5\u544a\u77e5\u7f16\u8bd1\u5668\uff0c\u5c06\u53d8\u91cf\u5b58\u50a8\u5728\u7a0b\u5e8f\u7684\u9759\u6001\u5b58\u50a8\u533a\u800c\u975e\u6808\u4e0a\u7a7a\u95f4\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u6309\u5b9a\u4e49\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u4f9d\u6b21\u521d\u59cb\u5316\uff0c\u6ce8\u610f\u9759\u6001\u6210\u5458\u5d4c\u5957\u65f6\uff0c\u8981\u4fdd\u8bc1\u6240\u5d4c\u5957\u7684\u6210\u5458\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\u3002\u6d88\u9664\u65f6\u7684\u987a\u5e8f\u662f\u521d\u59cb\u5316\u7684\u53cd\u987a\u5e8f\u3002","title":"static\u7684\u5185\u90e8\u673a\u5236"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#static_2","text":"\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u56e0\u4e3a\u5b83\u662f\u6240\u6709\u5bf9\u8c61\u6240\u516c\u6709\u7684\uff0c\u56e0\u6b64\uff0c\u5bf9\u591a\u4e2a\u5bf9\u8c61\u6765\u8bf4\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u53ea\u5b58\u50a8\u4e00\u5904\uff0c\u4f9b\u6240\u6709\u5bf9\u8c61\u5171\u7528\u3002 \u9759\u6001\u6570\u636e\u6210\u5458\u7684\u503c\u5bf9\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u6837\uff0c\u4f46\u5b83\u7684\u503c\u662f\u53ef\u4ee5\u66f4\u65b0\u7684\u3002\u53ea\u8981\u5bf9\u9759\u6001\u6570\u636e\u6210\u5458\u7684\u503c\u66f4\u65b0\u4e00\u6b21\uff0c\u4fdd\u8bc1\u6240\u6709\u5bf9\u8c61\u5b58\u53d6\u66f4\u65b0\u540e\u7684\u76f8\u540c\u7684\u503c\uff0c\u8fd9\u6837\u53ef\u4ee5\u63d0\u9ad8\u65f6\u95f4\u6548\u7387\u3002 (1)\u7c7b\u7684\u9759\u6001\u6210\u5458\u51fd\u6570\u662f\u5c5e\u4e8e\u6574\u4e2a\u7c7b\u800c\u975e\u7c7b\u7684\u5bf9\u8c61\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709this\u6307\u9488\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5b83\u4ec5\u80fd\u8bbf\u95ee\u7c7b\u7684\u9759\u6001\u6570\u636e\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 (2)\u4e0d\u80fd\u5c06\u9759\u6001\u6210\u5458\u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570\u3002 (3)\u7531\u4e8e\u9759\u6001\u6210\u5458\u58f0\u660e\u4e8e\u7c7b\u4e2d\uff0c\u64cd\u4f5c\u4e8e\u5176\u5916\uff0c\u6240\u4ee5\u5bf9\u5176\u53d6\u5730\u5740\u64cd\u4f5c\uff0c\u5c31\u591a\u5c11\u6709\u4e9b\u7279\u6b8a\uff0c\u53d8\u91cf\u5730\u5740\u662f\u6307\u5411\u5176\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\uff0c\u51fd\u6570\u5730\u5740\u7c7b\u578b\u662f\u4e00\u4e2a\u201cnonmember\u51fd\u6570\u6307\u9488\u201d\u3002 (4)\u7531\u4e8e\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709this\u6307\u9488\uff0c\u6240\u4ee5\u5c31\u5dee\u4e0d\u591a\u7b49\u540c\u4e8enonmember\u51fd\u6570\uff0c\u7ed3\u679c\u5c31\u4ea7\u751f\u4e86\u4e00\u4e2a\u610f\u60f3\u4e0d\u5230\u7684\u597d\u5904\uff1a\u6210\u4e3a\u4e00\u4e2acallback\u51fd\u6570\uff0c\u4f7f\u5f97\u6211\u4eec\u5f97\u4ee5\u5c06C++\u548cC-based X Window\u7cfb\u7edf\u7ed3\u5408\uff0c\u540c\u65f6\u4e5f\u6210\u529f\u7684\u5e94\u7528\u4e8e\u7ebf\u7a0b\u51fd\u6570\u8eab\u4e0a\u3002 (5)static\u5e76\u6ca1\u6709\u589e\u52a0\u7a0b\u5e8f\u7684\u65f6\u7a7a\u5f00\u9500\uff0c\u76f8\u53cd\u5979\u8fd8\u7f29\u77ed\u4e86\u5b50\u7c7b\u5bf9\u7236\u7c7b\u9759\u6001\u6210\u5458\u7684\u8bbf\u95ee\u65f6\u95f4\uff0c\u8282\u7701\u4e86\u5b50\u7c7b\u7684\u5185\u5b58\u7a7a\u95f4\u3002 (6)\u9759\u6001\u6570\u636e\u6210\u5458\u662f\u9759\u6001\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u5bf9\u5b83\u8fdb\u884c\u521d\u59cb\u5316\u3002 (7)\u9759\u6001\u6210\u5458\u521d\u59cb\u5316\u4e0e\u4e00\u822c\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u4e0d\u540c: - \u521d\u59cb\u5316\u5728\u7c7b\u4f53\u5916\u8fdb\u884c\uff0c\u800c\u524d\u9762\u4e0d\u52a0static\uff0c\u4ee5\u514d\u4e0e\u4e00\u822c\u9759\u6001\u53d8\u91cf\u6216\u5bf9\u8c61\u76f8\u6df7\u6dc6\uff1b - \u521d\u59cb\u5316\u65f6\u4e0d\u52a0\u8be5\u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\u63a7\u5236\u7b26private\uff0cpublic\u7b49\uff1b \u3000\u3000- \u521d\u59cb\u5316\u65f6\u4f7f\u7528\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u6765\u6807\u660e\u5b83\u6240\u5c5e\u7c7b\uff1b - \u6240\u4ee5\u6211\u4eec\u5f97\u51fa\u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u7684\u683c\u5f0f\uff1a <\u6570\u636e\u7c7b\u578b><\u7c7b\u540d>::<\u9759\u6001\u6570\u636e\u6210\u5458\u540d>=<\u503c> (8) \u4e3a\u4e86\u9632\u6b62\u7236\u7c7b\u7684\u5f71\u54cd\uff0c\u53ef\u4ee5\u5728\u5b50\u7c7b\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u7236\u7c7b\u76f8\u540c\u7684\u9759\u6001\u53d8\u91cf\uff0c\u4ee5\u5c4f\u853d\u7236\u7c7b\u7684\u5f71\u54cd\u3002\u8fd9\u91cc\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff1a\u6211\u4eec\u8bf4\u9759\u6001\u6210\u5458\u4e3a\u7236\u7c7b\u548c\u5b50\u7c7b\u5171\u4eab\uff0c\u4f46\u6211\u4eec\u6709\u91cd\u590d\u5b9a\u4e49\u4e86\u9759\u6001\u6210\u5458\uff0c\u8fd9\u4f1a\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u5462\uff1f\u4e0d\u4f1a\uff0c\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u91c7\u7528\u4e86\u4e00\u79cd\u7edd\u5999\u7684\u624b\u6cd5\uff1aname-mangling \u7528\u4ee5\u751f\u6210\u552f\u4e00\u7684\u6807\u5fd7\u3002 static\u7684\u53ef\u89c1\u6027\u5c06\u5728\u4ee5\u4e0b\u5185\u5bb9\u6709\u8986\u76d6","title":"static\u7684\u4f18\u52bf"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#c","text":"\u5185\u5b58\u4e2d\u4f9b\u7528\u6237\u4f7f\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\u5206\u4e3a\u4ee3\u7801\u533a\u4e0e\u6570\u636e\u533a\u4e24\u4e2a\u90e8\u5206\u3002 \u53d8\u91cf\u5b58\u50a8\u5728\u6570\u636e\u533a\uff0c\u6570\u636e\u533a\u53c8\u53ef\u5206\u4e3a\u9759\u6001\u5b58\u50a8\u533a\u4e0e\u52a8\u6001\u5b58\u50a8\u533a\u3002 \u9759\u6001\u5b58\u50a8\u662f\u6307\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u7ed9\u53d8\u91cf\u5206\u914d\u56fa\u5b9a\u5b58\u50a8\u7a7a\u95f4\u7684\u65b9\u5f0f\u3002\u5982\u5168\u5c40\u53d8\u91cf\u5b58\u653e\u5728\u9759\u6001\u5b58\u50a8\u533a\u4e2d\uff0c\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5206\u914d\u7a7a\u95f4\uff0c\u7a0b\u5e8f\u8fd0\u884c\u5b8c\u91ca\u653e\u3002 \u52a8\u6001\u5b58\u50a8\u662f\u6307\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6839\u636e\u5b9e\u9645\u9700\u8981\u52a8\u6001\u5206\u914d\u5b58\u50a8\u7a7a\u95f4\u7684\u65b9\u5f0f\u3002 \u5982\u5f62\u5f0f\u53c2\u6570\u5b58\u653e\u5728\u52a8\u6001\u5b58\u50a8\u533a\u4e2d\uff0c\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5206\u914d\u7a7a\u95f4\uff0c\u8c03\u7528\u5b8c\u6210\u91ca\u653e\u3002 \u5bf9\u4e8e\u9759\u6001\u5b58\u50a8\u65b9\u5f0f\u7684\u53d8\u91cf\u53ef\u5728\u7f16\u8bd1\u65f6\u521d\u59cb\u5316\uff0c\u9ed8\u8ba4\u521d\u503c\u4e3aO\u6216\u7a7a\u5b57\u7b26\u3002\u5bf9\u52a8\u6001\u5b58\u50a8\u65b9\u5f0f\u7684\u53d8\u91cf\u5982\u4e0d\u8d4b\u521d\u503c\uff0c\u5219\u5b83\u7684\u503c\u662f\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u503c\u3002 \u56db\u79cd\u5b58\u50a8\u7c7b \u81ea\u52a8(auto)\u3001\u5bc4\u5b58\u5668(register)\u3001\u9759\u6001(static)\u53ca\u5916\u90e8(extern) \u9759\u6001\u5b58\u50a8\u7c7b\u522b\u4e0e\u5916\u90e8\u5b58\u50a8\u7c7b\u522b\u53d8\u91cf\u5b58\u653e\u5728\u9759\u6001\u5b58\u50a8\u533a \u81ea\u52a8\u5b58\u50a8\u7c7b\u522b\u53d8\u91cf\u5b58\u653e\u5728\u52a8\u6001\u5b58\u50a8\u533a \u5bc4\u5b58\u5668\u5b58\u50a8\u7c7b\u522b\u76f4\u63a5\u9001\u5bc4\u5b58\u5668","title":"C++\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#auto","text":"\u7528\u4e8e\u8bf4\u660e\u5177\u6709\u5c40\u90e8\u4f5c\u7528\u57df\u7684\u53d8\u91cf\uff0c\u5b83\u8868\u793a\u53d8\u91cf\u5177\u6709\u5c40\u90e8\uff08\u81ea\u52a8\uff09\u751f\u6210\u671f\uff0c\u4f46\u7531\u4e8e\u5b83\u662f\u6240\u6709\u5c40\u90e8\u4f5c\u7528\u57df\u53d8\u91cf\u8bf4\u660e\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u6307\u660e\u7b26\uff0c\u6240\u4ee5\u4f7f\u7528\u5f97\u5f88 \u5c11\u3002\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6240\u6709\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u90fd\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u5176\u4f5c\u7528\u57df\u53ea\u5728\u51fd\u6570\u5185\u90e8\u3002\u5b83\u7684\u751f\u5b58\u671f\u4e3a\u8be5\u51fd\u6570\u8fd0\u884c\u671f\u95f4\uff0c\u4e00\u65e6\u79bb\u5f00\u8fd9\u4e2a\u51fd\u6570\u6216\u8fd9\u4e2a \u51fd\u6570\u7ec8\u6b62\uff0c\u5c40\u90e8\u53d8\u91cf\u4e5f\u968f\u4e4b\u6d88\u5931\u3002","title":"auto \u5b58\u50a8\u7c7b\u6307\u660e\u7b26"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#register","text":"\u5f53\u58f0\u660e\u4e86\u8fd9\u4e2a\u6307\u660e\u7b26\u540e\uff0c\u7f16\u8bd1\u7a0b\u5e8f\u5c06\u5c3d\u53ef\u80fd\u5730\u4e3a\u8be5\u53d8\u91cf\u5206\u914dCPU\u5185\u90e8\u7684\u5bc4\u5b58\u5668\u4f5c\u4e3a\u53d8\u91cf\u7684\u5b58\u50a8\u5355\u5143\uff0c\u4ee5\u52a0\u5feb\u8fd0\u884c\u901f\u5ea6\u3002\u6ce8\u610f\uff0c\u5bc4\u5b58\u5668\u4e0e\u5b58\u50a8\u5668\u662f \u4e0d\u540c\u7684\u3002\u5bc4\u5b58\u5668\u4e00\u822c\u5728CPU\u5185\u90e8\uff0c\u800c\u5b58\u50a8\u5668\u4e00\u822c\u6307\u5916\u90e8\u7684\uff08\u6bd4\u5982\u5185\u5b58\u6761\uff09\uff0cCPU\u5185\u90e8\u7684\u5bc4\u5b58\u5668\u5176\u8fd0\u7b97\u901f\u5ea6\u662f\u5f88\u9ad8\u7684\u3002\u5f53\u5bc4\u5b58\u5668\u5df2\u5206\u914d\u5b8c\u6bd5\uff0c\u5c31\u81ea\u52a8\u5730\u5206\u914d\u4e00\u4e2a\u5916\u90e8\u7684\u5185\u5b58\u3002\u5b83\u7684\u4f5c\u7528\u7b49\u4ef7\u4e8eauto\uff0c\u4e5f\u53ea\u80fd\u7528\u4e8e\u5c40\u90e8\u53d8\u91cf\u548c\u51fd\u6570\u7684\u53c2\u91cf\u8bf4\u660e\u3002","title":"register \u5b58\u50a8\u7c7b\u6307\u660e\u7b26"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#static_3","text":"\u8868\u793a\u53d8\u91cf\u5177\u6709\u9759\u6001\u751f\u6210\u671f\u3002 static\u53d8\u91cf\u7684\u7684\u7279\u70b9\u662f\u5b83\u79bb\u5f00\u4e86\u5176\u4f5c\u7528\u57df\u540e\uff0c\u5176\u503c\u4e0d\u4f1a\u6d88\u5931\u3002 \u5f53\u56de\u5230\u8be5\u4f5c\u7528\u57df\u4e4b\u540e\u53c8\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e2astatic\u53d8\u91cf\u7684\u503c\u3002 // \u5229\u7528static\u53d8\u91cf\u7edf\u8ba1\u8c03\u7528\u51fd\u6570\u7684\u6b21\u6570 #include <iostream> using namespace std ; int two (); /*\u51fd\u6570\u539f\u578b\u8bf4\u660e*/ int main () { int a = 0 ; a = two (); /*a\u7684\u503c\u7b49\u4e8e1*/ a = two (); /*a\u7684\u503c\u7b49\u4e8e2*/ a = two (); /*a\u7684\u503c\u7b49\u4e8e3*/ cout << a ; return 0 ; } int two () { static int b = 0 ; /*\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5c40\u90e8\u7684static\u53d8\u91cf*/ b ++ ; return b ; }","title":"static \u5b58\u50a8\u7c7b\u6307\u660e\u7b26"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#extern","text":"\u4e00\u822c\u7528\u5728\u5de5\u7a0b\u6587\u4ef6\u4e2d\u3002\u5728\u4e00\u4e2a\u5de5\u7a0b\u6587\u4ef6\u4e2d\u56e0\u4e3a\u6709\u591a\u4e2a\u7a0b\u5e8f\u6587\u4ef6\uff0c\u5f53\u67d0\u4e00\u4e2a\u53d8\u91cf\u5728\u4e00\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u4e4b\u540e\uff0c\u5982\u679c\u5728\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u4e88\u4ee5\u5b9a\u4e49\uff0c \u5c31\u4f1a\u51fa\u73b0\u91cd\u590d\u5b9a\u4e49\u53d8\u91cf\u7684\u9519\u8bef\u3002\u4f7f\u7528extern\u5b58\u50a8\u7c7b\u578b\u6307\u660e\u7b26\u5c31\u53ef\u4ee5\u6307\u51fa\u5728\u8be5\u6587\u4ef6\u5916\u90e8\u5df2\u7ecf\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u53d8\u91cf\u3002extern\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u6574\u4e2a\u7a0b\u5e8f\u3002","title":"extern \u5b58\u50a8\u7c7b\u6307\u660e\u7b26"},{"location":"cpp/%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8C%BA/#_4","text":"\u53d8\u91cf\u53ef\u4ee5\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4e0d\u540c\u5730\u65b9\uff0c\u8fd9\u4f9d\u8d56\u4e8e\u5b83\u4eec\u7684\u751f\u6210\u671f\u3002\u5728\u51fd\u6570\u4e0a\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff08\u5168\u5c40\u53d8\u91cf\u6216static\u5916\u90e8\u53d8\u91cf\uff09\u548c\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684static\u53d8\u91cf\uff0c\u5176\u751f\u5b58\u671f\u5c31\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u5168\u8fc7\u7a0b\u3002\u8fd9\u4e9b\u53d8\u91cf\u88ab\u5b58\u50a8\u5728\u6570\u636e\u6bb5(Data Segment)\u4e2d\u3002\u6570\u636e\u6bb5\u662f\u5728\u5185\u5b58\u4e2d\u4e3a\u8fd9\u4e9b\u53d8\u91cf\u7559\u51fa\u7684\u4e00\u6bb5\u5927\u5c0f\u56fa\u5b9a\u7684\u7a7a\u95f4\uff0c\u5b83\u5206\u4e3a\u4e8c\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u7528\u6765\u521d\u59cb\u5316\u53d8\u91cf\uff0c\u53e6\u4e00\u90e8\u5206\u7528\u6765\u5b58\u653e\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u3002 \u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684auto\u53d8\u91cf\uff08\u6ca1\u6709\u7528\u5173\u952e\u5b57static\u5b9a\u4e49\u7684\u53d8\u91cf\uff09\u7684\u751f\u6210\u671f\u4ece\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u5176\u6240\u5728\u7684\u7a0b\u5e8f\u5757\u4ee3\u7801\u65f6\u5f00\u59cb\uff0c\u5230\u7a0b\u5e8f\u79bb\u5f00\u8be5\u7a0b\u5e8f\u5757\u65f6\u4e3a\u6b62\u3002 \u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u53d8\u91cf\u53ea\u5728\u8c03\u7528\u8be5\u51fd\u6570\u671f\u95f4\u5b58\u5728\u3002\u8fd9\u4e9b\u53d8\u91cf\u88ab\u5b58\u50a8\u5728\u6808(stack)\u4e2d\u3002\u6808\u662f\u5185\u5b58\u4e2d\u7684\u4e00\u6bb5\u7a7a\u95f4\uff0c\u5f00\u59cb\u5f88\u5c0f\uff0c\u4ee5\u540e\u9010\u6e10\u81ea\u52a8\u53d8\u5927\uff0c\u76f4\u5230\u8fbe\u5230\u67d0\u4e2a\u9884\u5b9a\u4e49\u7684\u754c\u9650\u3002 \u5f53\u7528malloc\u7b49\u51fd\u6570\u7ed9\u6307\u9488\u5206\u914d\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u5206\u914d\u7684\u5185\u5b58\u5757\u4f4d\u4e8e\u4e00\u6bb5\u540d\u4e3a\u201c\u5806\uff08heap\uff09\u201d\u7684\u5185\u5b58\u7a7a\u95f4\u4e2d\u3002\u5806\u5f00\u59cb\u65f6\u5f88\u5c0f\uff0c\u4f46\u8c03\u7528malloc\u6216clloc\u7b49\u5185\u5b58\u5206\u914d\u51fd\u6570\u65f6\u5b83\u5c31\u4f1a\u589e\u5927\u3002\u5806\u53ef\u4ee5\u548c\u6570\u636e\u6bb5\u6216\u6808\u5171\u7528\u4e00\u4e2a\u5185\u5b58\u6bb5\uff0c\u4e5f\u53ef\u4ee5\u6709\u5b83\u81ea\u5df1\u7684\u5185\u5b58\u6bb5\uff0c\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8e\u7f16\u8bd1\u9009\u9879\u548c\u64cd\u4f5c\u7cfb\u7edf\u3002\u4e0e\u6808\u76f8\u4f3c\uff0c\u5806\u4e5f\u6709\u4e00\u4e2a\u589e\u957f\u754c\u9650\uff0c\u5e76\u4e14\u51b3\u5b9a\u8fd9\u4e2a\u754c\u9650\u7684\u89c4\u5219\u4e0e\u6808\u76f8\u540c\u3002 \u6587\u7ae0\u53c2\u8003: https://www.cnblogs.com/hanyonglu/archive/2011/04/12/2014212.html","title":"\u53d8\u91cf\u5b58\u50a8\u5728\u5185\u5b58\u7684\u4ec0\u4e48\u5730\u65b9\uff1f"},{"location":"cpp/%E5%A4%9A%E6%80%81/","text":"\u5f53\u7c7b\u4e4b\u95f4\u5b58\u5728\u5c42\u6b21\u7ed3\u6784\uff0c\u5e76\u4e14\u7c7b\u4e4b\u95f4\u662f\u901a\u8fc7\u7ee7\u627f\u5173\u8054\u65f6\uff0c\u5c31\u4f1a\u7528\u5230\u591a\u6001\u3002 C++ \u591a\u6001\u610f\u5473\u7740\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\uff0c\u4f1a\u6839\u636e\u8c03\u7528\u51fd\u6570\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u6765\u6267\u884c\u4e0d\u540c\u7684\u51fd\u6570\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e2d\uff0c\u57fa\u7c7b Shape \u88ab\u6d3e\u751f\u4e3a\u4e24\u4e2a\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; class Shape { protected : int width , height ; public : Shape ( int a = 0 , int b = 0 ) { width = a ; height = b ; } int area () { cout << \"Parent class area :\" << endl ; return 0 ; } }; class Rectangle : public Shape { public : Rectangle ( int a = 0 , int b = 0 ) : Shape ( a , b ) { } int area () { cout << \"Rectangle class area :\" << endl ; return ( width * height ); } }; class Triangle : public Shape { public : Triangle ( int a = 0 , int b = 0 ) : Shape ( a , b ) { } int area () { cout << \"Triangle class area :\" << endl ; return ( width * height / 2 ); } }; // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Shape * shape ; Rectangle rec ( 10 , 7 ); Triangle tri ( 10 , 5 ); // \u5b58\u50a8\u77e9\u5f62\u7684\u5730\u5740 shape = & rec ; // \u8c03\u7528\u77e9\u5f62\u7684\u6c42\u9762\u79ef\u51fd\u6570 area shape -> area (); // \u5b58\u50a8\u4e09\u89d2\u5f62\u7684\u5730\u5740 shape = & tri ; // \u8c03\u7528\u4e09\u89d2\u5f62\u7684\u6c42\u9762\u79ef\u51fd\u6570 area shape -> area (); return 0 ; } \u5bfc\u81f4\u9519\u8bef\u8f93\u51fa\u7684\u539f\u56e0\u662f\uff0c\u8c03\u7528\u51fd\u6570 area() \u88ab\u7f16\u8bd1\u5668\u8bbe\u7f6e\u4e3a\u57fa\u7c7b\u4e2d\u7684\u7248\u672c\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u9759\u6001\u591a\u6001\uff0c\u6216\u9759\u6001\u94fe\u63a5 - \u51fd\u6570\u8c03\u7528\u5728\u7a0b\u5e8f\u6267\u884c\u524d\u5c31\u51c6\u5907\u597d\u4e86\u3002\u6709\u65f6\u5019\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u65e9\u7ed1\u5b9a\uff0c\u56e0\u4e3a area() \u51fd\u6570\u5728\u7a0b\u5e8f\u7f16\u8bd1\u671f\u95f4\u5c31\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u3002 \u4f46\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5bf9\u7a0b\u5e8f\u7a0d\u4f5c\u4fee\u6539\uff0c\u5728 Shape \u7c7b\u4e2d\uff0carea() \u7684\u58f0\u660e\u524d\u653e\u7f6e\u5173\u952e\u5b57 virtual\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Shape { protected : int width , height ; public : Shape ( int a = 0 , int b = 0 ) { width = a ; height = b ; } virtual int area () { cout << \"Parent class area :\" << endl ; return 0 ; } }; \u4fee\u6539\u540e\uff0c\u5f53\u7f16\u8bd1\u548c\u6267\u884c\u524d\u9762\u7684\u5b9e\u4f8b\u4ee3\u7801\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4ee5\u4e0b\u7ed3\u679c\uff1a Rectangle class area Triangle class area \u6b64\u65f6\uff0c\u7f16\u8bd1\u5668\u770b\u7684\u662f\u6307\u9488\u7684\u5185\u5bb9\uff0c\u800c\u4e0d\u662f\u5b83\u7684\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u7531\u4e8e tri \u548c rec \u7c7b\u7684\u5bf9\u8c61\u7684\u5730\u5740\u5b58\u50a8\u5728 *shape \u4e2d\uff0c\u6240\u4ee5\u4f1a\u8c03\u7528\u5404\u81ea\u7684 area() \u51fd\u6570\u3002 \u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0c\u6bcf\u4e2a\u5b50\u7c7b\u90fd\u6709\u4e00\u4e2a\u51fd\u6570 area() \u7684\u72ec\u7acb\u5b9e\u73b0\u3002\u8fd9\u5c31\u662f\u591a\u6001\u7684\u4e00\u822c\u4f7f\u7528\u65b9\u5f0f\u3002\u6709\u4e86\u591a\u6001\uff0c\u60a8\u53ef\u4ee5\u6709\u591a\u4e2a\u4e0d\u540c\u7684\u7c7b\uff0c\u90fd\u5e26\u6709\u540c\u4e00\u4e2a\u540d\u79f0\u4f46\u5177\u6709\u4e0d\u540c\u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u51fd\u6570\u7684\u53c2\u6570\u751a\u81f3\u53ef\u4ee5\u662f\u76f8\u540c\u7684\u3002 \u865a\u51fd\u6570 \u00b6 \u865a\u51fd\u6570 \u662f\u5728\u57fa\u7c7b\u4e2d\u4f7f\u7528\u5173\u952e\u5b57 virtual \u58f0\u660e\u7684\u51fd\u6570\u3002\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u865a\u51fd\u6570\u65f6\uff0c\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u9759\u6001\u94fe\u63a5\u5230\u8be5\u51fd\u6570\u3002 \u6211\u4eec\u60f3\u8981\u7684\u662f\u5728\u7a0b\u5e8f\u4e2d\u4efb\u610f\u70b9\u53ef\u4ee5\u6839\u636e\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u7c7b\u578b\u6765\u9009\u62e9\u8c03\u7528\u7684\u51fd\u6570\uff0c\u8fd9\u79cd\u64cd\u4f5c\u88ab\u79f0\u4e3a\u52a8\u6001\u94fe\u63a5\uff0c\u6216\u540e\u671f\u7ed1\u5b9a\u3002 \u7eaf\u865a\u51fd\u6570 \u00b6 \u60a8\u53ef\u80fd\u60f3\u8981\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u865a\u51fd\u6570\uff0c\u4ee5\u4fbf\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u8be5\u51fd\u6570\u66f4\u597d\u5730\u9002\u7528\u4e8e\u5bf9\u8c61\uff0c\u4f46\u662f\u60a8\u5728\u57fa\u7c7b\u4e2d\u53c8\u4e0d\u80fd\u5bf9\u865a\u51fd\u6570\u7ed9\u51fa\u6709\u610f\u4e49\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u7528\u5230\u7eaf\u865a\u51fd\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u57fa\u7c7b\u4e2d\u7684\u865a\u51fd\u6570 area() \u6539\u5199\u5982\u4e0b\uff1a class Shape { protected : int width , height ; public : Shape ( int a = 0 , int b = 0 ) { width = a ; height = b ; } // pure virtual function virtual int area () = 0 ; }; = 0 \u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u51fd\u6570\u6ca1\u6709\u4e3b\u4f53\uff0c\u4e0a\u9762\u7684\u865a\u51fd\u6570\u662f\u7eaf\u865a\u51fd\u6570\u3002","title":"\u591a\u6001"},{"location":"cpp/%E5%A4%9A%E6%80%81/#_1","text":"\u865a\u51fd\u6570 \u662f\u5728\u57fa\u7c7b\u4e2d\u4f7f\u7528\u5173\u952e\u5b57 virtual \u58f0\u660e\u7684\u51fd\u6570\u3002\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u865a\u51fd\u6570\u65f6\uff0c\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u9759\u6001\u94fe\u63a5\u5230\u8be5\u51fd\u6570\u3002 \u6211\u4eec\u60f3\u8981\u7684\u662f\u5728\u7a0b\u5e8f\u4e2d\u4efb\u610f\u70b9\u53ef\u4ee5\u6839\u636e\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u7c7b\u578b\u6765\u9009\u62e9\u8c03\u7528\u7684\u51fd\u6570\uff0c\u8fd9\u79cd\u64cd\u4f5c\u88ab\u79f0\u4e3a\u52a8\u6001\u94fe\u63a5\uff0c\u6216\u540e\u671f\u7ed1\u5b9a\u3002","title":"\u865a\u51fd\u6570"},{"location":"cpp/%E5%A4%9A%E6%80%81/#_2","text":"\u60a8\u53ef\u80fd\u60f3\u8981\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u865a\u51fd\u6570\uff0c\u4ee5\u4fbf\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u8be5\u51fd\u6570\u66f4\u597d\u5730\u9002\u7528\u4e8e\u5bf9\u8c61\uff0c\u4f46\u662f\u60a8\u5728\u57fa\u7c7b\u4e2d\u53c8\u4e0d\u80fd\u5bf9\u865a\u51fd\u6570\u7ed9\u51fa\u6709\u610f\u4e49\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u7528\u5230\u7eaf\u865a\u51fd\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u57fa\u7c7b\u4e2d\u7684\u865a\u51fd\u6570 area() \u6539\u5199\u5982\u4e0b\uff1a class Shape { protected : int width , height ; public : Shape ( int a = 0 , int b = 0 ) { width = a ; height = b ; } // pure virtual function virtual int area () = 0 ; }; = 0 \u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u51fd\u6570\u6ca1\u6709\u4e3b\u4f53\uff0c\u4e0a\u9762\u7684\u865a\u51fd\u6570\u662f\u7eaf\u865a\u51fd\u6570\u3002","title":"\u7eaf\u865a\u51fd\u6570"},{"location":"cpp/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","text":"\u591a\u7ebf\u7a0b\u662f\u591a\u4efb\u52a1\u5904\u7406\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\uff0c\u591a\u4efb\u52a1\u5904\u7406\u5141\u8bb8\u8ba9\u7535\u8111\u540c\u65f6\u8fd0\u884c\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u7a0b\u5e8f\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e24\u79cd\u7c7b\u578b\u7684\u591a\u4efb\u52a1\u5904\u7406\uff1a\u57fa\u4e8e\u8fdb\u7a0b\u548c\u57fa\u4e8e\u7ebf\u7a0b\u3002 \u57fa\u4e8e\u8fdb\u7a0b\u7684\u591a\u4efb\u52a1\u5904\u7406\u662f\u7a0b\u5e8f\u7684\u5e76\u53d1\u6267\u884c\u3002 \u57fa\u4e8e\u7ebf\u7a0b\u7684\u591a\u4efb\u52a1\u5904\u7406\u662f\u540c\u4e00\u7a0b\u5e8f\u7684\u7247\u6bb5\u7684\u5e76\u53d1\u6267\u884c\u3002 \u591a\u7ebf\u7a0b\u7a0b\u5e8f\u5305\u542b\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u7684\u4e24\u4e2a\u6216\u591a\u4e2a\u90e8\u5206\u3002\u8fd9\u6837\u7684\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u90e8\u5206\u79f0\u4e3a\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u6267\u884c\u8def\u5f84\u3002 \u672c\u6559\u7a0b\u5047\u8bbe\u60a8\u4f7f\u7528\u7684\u662f Linux \u64cd\u4f5c\u7cfb\u7edf\uff0c\u6211\u4eec\u8981\u4f7f\u7528 POSIX \u7f16\u5199\u591a\u7ebf\u7a0b C++ \u7a0b\u5e8f\u3002 POSIX Threads \u6216 Pthreads \u63d0\u4f9b\u7684 API \u53ef\u5728\u591a\u79cd\u7c7b Unix POSIX \u7cfb\u7edf\u4e0a\u53ef\u7528\uff0c\u6bd4\u5982 FreeBSD\u3001NetBSD\u3001GNU/Linux\u3001Mac OS X \u548c Solaris\u3002 \u521b\u5efa\u7ebf\u7a0b \u00b6 \u4e0b\u9762\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u521b\u5efa\u4e00\u4e2a POSIX \u7ebf\u7a0b\uff1a #include <pthread.h> pthread_create ( thread , attr , start_routine , arg ) \u5728\u8fd9\u91cc\uff0cpthread_create \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\uff0c\u5e76\u8ba9\u5b83\u53ef\u6267\u884c\u3002\u4e0b\u9762\u662f\u5173\u4e8e\u53c2\u6570\u7684\u8bf4\u660e\uff1a thread \u6307\u5411\u7ebf\u7a0b\u6807\u8bc6\u7b26\u6307\u9488\u3002 attr \u4e00\u4e2a\u4e0d\u900f\u660e\u7684\u5c5e\u6027\u5bf9\u8c61\uff0c\u53ef\u4ee5\u88ab\u7528\u6765\u8bbe\u7f6e\u7ebf\u7a0b\u5c5e\u6027\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u7ebf\u7a0b\u5c5e\u6027\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u503c NULL\u3002 start_routine \u7ebf\u7a0b\u8fd0\u884c\u51fd\u6570\u8d77\u59cb\u5730\u5740\uff0c\u4e00\u65e6\u7ebf\u7a0b\u88ab\u521b\u5efa\u5c31\u4f1a\u6267\u884c\u3002 arg \u8fd0\u884c\u51fd\u6570\u7684\u53c2\u6570\u3002\u5b83\u5fc5\u987b\u901a\u8fc7\u628a\u5f15\u7528\u4f5c\u4e3a\u6307\u9488\u5f3a\u5236\u8f6c\u6362\u4e3a void \u7c7b\u578b\u8fdb\u884c\u4f20\u9012\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012\u53c2\u6570\uff0c\u5219\u4f7f\u7528 NULL\u3002 \u521b\u5efa\u7ebf\u7a0b\u6210\u529f\u65f6\uff0c\u51fd\u6570\u8fd4\u56de 0\uff0c\u82e5\u8fd4\u56de\u503c\u4e0d\u4e3a 0 \u5219\u8bf4\u660e\u521b\u5efa\u7ebf\u7a0b\u5931\u8d25\u3002 \u7ec8\u6b62\u7ebf\u7a0b \u00b6 \u4f7f\u7528\u4e0b\u9762\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u7ec8\u6b62\u4e00\u4e2a POSIX \u7ebf\u7a0b\uff1a #include <pthread.h> pthread_exit ( status ) \u5728\u8fd9\u91cc\uff0cpthread_exit \u7528\u4e8e\u663e\u5f0f\u5730\u9000\u51fa\u4e00\u4e2a\u7ebf\u7a0b\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cpthread_exit() \u51fd\u6570\u662f\u5728\u7ebf\u7a0b\u5b8c\u6210\u5de5\u4f5c\u540e\u65e0\u9700\u7ee7\u7eed\u5b58\u5728\u65f6\u88ab\u8c03\u7528\u3002 \u5982\u679c main() \u662f\u5728\u5b83\u6240\u521b\u5efa\u7684\u7ebf\u7a0b\u4e4b\u524d\u7ed3\u675f\uff0c\u5e76\u901a\u8fc7 pthread_exit() \u9000\u51fa\uff0c\u90a3\u4e48\u5176\u4ed6\u7ebf\u7a0b\u5c06\u7ee7\u7eed\u6267\u884c\u3002\u5426\u5219\uff0c\u5b83\u4eec\u5c06\u5728 main() \u7ed3\u675f\u65f6\u81ea\u52a8\u88ab\u7ec8\u6b62\u3002 \u4ee5\u4e0b\u7b80\u5355\u7684\u5b9e\u4f8b\u4ee3\u7801\u4f7f\u7528 pthread_create() \u51fd\u6570\u521b\u5efa\u4e86 5 \u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8f93\u51fa\"Hello Runoob\uff01\": #include <iostream> // \u5fc5\u987b\u7684\u5934\u6587\u4ef6 #include <pthread.h> using namespace std ; #define NUM_THREADS 5 // \u7ebf\u7a0b\u7684\u8fd0\u884c\u51fd\u6570 void * say_hello ( void * args ) { cout << \"Hello Runoob\uff01\" << endl ; return 0 ; } int main () { // \u5b9a\u4e49\u7ebf\u7a0b\u7684 id \u53d8\u91cf\uff0c\u591a\u4e2a\u53d8\u91cf\u4f7f\u7528\u6570\u7ec4 pthread_t tids [ NUM_THREADS ]; for ( int i = 0 ; i < NUM_THREADS ; ++ i ) { //\u53c2\u6570\u4f9d\u6b21\u662f\uff1a\u521b\u5efa\u7684\u7ebf\u7a0bid\uff0c\u7ebf\u7a0b\u53c2\u6570\uff0c\u8c03\u7528\u7684\u51fd\u6570\uff0c\u4f20\u5165\u7684\u51fd\u6570\u53c2\u6570 int ret = pthread_create ( & tids [ i ], NULL , say_hello , NULL ); if ( ret != 0 ) { cout << \"pthread_create error: error_code=\" << ret << endl ; } } //\u7b49\u5404\u4e2a\u7ebf\u7a0b\u9000\u51fa\u540e\uff0c\u8fdb\u7a0b\u624d\u7ed3\u675f\uff0c\u5426\u5219\u8fdb\u7a0b\u5f3a\u5236\u7ed3\u675f\u4e86\uff0c\u7ebf\u7a0b\u53ef\u80fd\u8fd8\u6ca1\u53cd\u5e94\u8fc7\u6765\uff1b pthread_exit ( NULL ); } \u4f7f\u7528 -lpthread \u5e93\u7f16\u8bd1\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a $ g++ test.cpp -lpthread -o test.o \u4ee5\u4e0b\u7b80\u5355\u7684\u5b9e\u4f8b\u4ee3\u7801\u4f7f\u7528 pthread_create() \u51fd\u6570\u521b\u5efa\u4e86 5 \u4e2a\u7ebf\u7a0b\uff0c\u5e76\u63a5\u6536\u4f20\u5165\u7684\u53c2\u6570\u3002 \u6bcf\u4e2a\u7ebf\u7a0b\u6253\u5370\u4e00\u4e2a \"Hello Runoob!\" \u6d88\u606f\uff0c\u5e76\u8f93\u51fa\u63a5\u6536\u7684\u53c2\u6570\uff0c\u7136\u540e\u8c03\u7528 pthread_exit() \u7ec8\u6b62\u7ebf\u7a0b\u3002 //\u6587\u4ef6\u540d\uff1atest.cpp #include <iostream> #include <cstdlib> #include <pthread.h> using namespace std ; #define NUM_THREADS 5 void * PrintHello ( void * threadid ) { // \u5bf9\u4f20\u5165\u7684\u53c2\u6570\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u7531\u65e0\u7c7b\u578b\u6307\u9488\u53d8\u4e3a\u6574\u5f62\u6570\u6307\u9488\uff0c\u7136\u540e\u518d\u8bfb\u53d6 int tid = * (( int * ) threadid ); cout << \"Hello Runoob! \u7ebf\u7a0b ID, \" << tid << endl ; pthread_exit ( NULL ); } int main () { pthread_t threads [ NUM_THREADS ]; int indexes [ NUM_THREADS ]; // \u7528\u6570\u7ec4\u6765\u4fdd\u5b58i\u7684\u503c int rc ; int i ; for ( i = 0 ; i < NUM_THREADS ; i ++ ){ cout << \"main() : \u521b\u5efa\u7ebf\u7a0b, \" << i << endl ; indexes [ i ] = i ; //\u5148\u4fdd\u5b58i\u7684\u503c // \u4f20\u5165\u7684\u65f6\u5019\u5fc5\u987b\u5f3a\u5236\u8f6c\u6362\u4e3avoid* \u7c7b\u578b\uff0c\u5373\u65e0\u7c7b\u578b\u6307\u9488 rc = pthread_create ( & threads [ i ], NULL , PrintHello , ( void * ) & ( indexes [ i ])); if ( rc ){ cout << \"Error:\u65e0\u6cd5\u521b\u5efa\u7ebf\u7a0b,\" << rc << endl ; exit ( -1 ); } } pthread_exit ( NULL ); } \u5411\u7ebf\u7a0b\u4f20\u9012\u53c2\u6570 \u00b6 \u8fd9\u4e2a\u5b9e\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u7ed3\u6784\u4f20\u9012\u591a\u4e2a\u53c2\u6570\u3002\u60a8\u53ef\u4ee5\u5728\u7ebf\u7a0b\u56de\u8c03\u4e2d\u4f20\u9012\u4efb\u610f\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u6307\u5411 void\uff0c\u5982\u4e0b\u9762\u7684\u5b9e\u4f8b\u6240\u793a\uff1a #include <iostream> #include <cstdlib> #include <pthread.h> using namespace std ; #define NUM_THREADS 5 struct thread_data { int thread_id ; char * message ; }; void * PrintHello ( void * threadarg ) { struct thread_data * my_data ; my_data = ( struct thread_data * ) threadarg ; cout << \"Thread ID : \" << my_data -> thread_id ; cout << \" Message : \" << my_data -> message << endl ; pthread_exit ( NULL ); } int main () { pthread_t threads [ NUM_THREADS ]; struct thread_data td [ NUM_THREADS ]; int rc ; int i ; for ( i = 0 ; i < NUM_THREADS ; i ++ ){ cout << \"main() : creating thread, \" << i << endl ; td [ i ]. thread_id = i ; td [ i ]. message = ( char * ) \"This is message\" ; rc = pthread_create ( & threads [ i ], NULL , PrintHello , ( void * ) & td [ i ]); if ( rc ){ cout << \"Error:unable to create thread,\" << rc << endl ; exit ( -1 ); } } pthread_exit ( NULL ); } \u8fde\u63a5\u548c\u5206\u79bb\u7ebf\u7a0b \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u51fd\u6570\u6765\u8fde\u63a5\u6216\u5206\u79bb\u7ebf\u7a0b\uff1a pthread_join ( threadid , status ) pthread_detach ( threadid ) pthread_join() \u5b50\u7a0b\u5e8f\u963b\u585e\u8c03\u7528\u7a0b\u5e8f\uff0c\u76f4\u5230\u6307\u5b9a\u7684 threadid \u7ebf\u7a0b\u7ec8\u6b62\u4e3a\u6b62\u3002 \u5f53\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u5b83\u7684\u67d0\u4e2a\u5c5e\u6027\u4f1a\u5b9a\u4e49\u5b83\u662f\u5426\u662f\u53ef\u8fde\u63a5\u7684\uff08joinable\uff09\u6216\u53ef\u5206\u79bb\u7684\uff08detached\uff09\u3002 \u53ea\u6709\u521b\u5efa\u65f6\u5b9a\u4e49\u4e3a\u53ef\u8fde\u63a5\u7684\u7ebf\u7a0b\u624d\u53ef\u4ee5\u88ab\u8fde\u63a5\u3002\u5982\u679c\u7ebf\u7a0b\u521b\u5efa\u65f6\u88ab\u5b9a\u4e49\u4e3a\u53ef\u5206\u79bb\u7684\uff0c\u5219\u5b83\u6c38\u8fdc\u4e5f\u4e0d\u80fd\u88ab\u8fde\u63a5\u3002 \u8fd9\u4e2a\u5b9e\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 pthread_join() \u51fd\u6570\u6765\u7b49\u5f85\u7ebf\u7a0b\u7684\u5b8c\u6210\u3002 #include <iostream> #include <cstdlib> #include <pthread.h> #include <unistd.h> using namespace std ; #define NUM_THREADS 5 void * wait ( void * t ) { int i ; long tid ; tid = ( long ) t ; sleep ( 1 ); cout << \"Sleeping in thread \" << endl ; cout << \"Thread with id : \" << tid << \" ...exiting \" << endl ; pthread_exit ( NULL ); } int main () { int rc ; int i ; pthread_t threads [ NUM_THREADS ]; pthread_attr_t attr ; void * status ; // \u521d\u59cb\u5316\u5e76\u8bbe\u7f6e\u7ebf\u7a0b\u4e3a\u53ef\u8fde\u63a5\u7684\uff08joinable\uff09 pthread_attr_init ( & attr ); pthread_attr_setdetachstate ( & attr , PTHREAD_CREATE_JOINABLE ); for ( i = 0 ; i < NUM_THREADS ; i ++ ){ cout << \"main() : creating thread, \" << i << endl ; rc = pthread_create ( & threads [ i ], NULL , wait , ( void * ) & i ); if ( rc ){ cout << \"Error:unable to create thread,\" << rc << endl ; exit ( -1 ); } } // \u5220\u9664\u5c5e\u6027\uff0c\u5e76\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b pthread_attr_destroy ( & attr ); for ( i = 0 ; i < NUM_THREADS ; i ++ ){ rc = pthread_join ( threads [ i ], & status ); if ( rc ){ cout << \"Error:unable to join,\" << rc << endl ; exit ( -1 ); } cout << \"Main: completed thread id :\" << i ; cout << \" exiting with status :\" << status << endl ; } cout << \"Main: program exiting.\" << endl ; pthread_exit ( NULL ); }","title":"\u591a\u7ebf\u7a0b"},{"location":"cpp/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_1","text":"\u4e0b\u9762\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u521b\u5efa\u4e00\u4e2a POSIX \u7ebf\u7a0b\uff1a #include <pthread.h> pthread_create ( thread , attr , start_routine , arg ) \u5728\u8fd9\u91cc\uff0cpthread_create \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\uff0c\u5e76\u8ba9\u5b83\u53ef\u6267\u884c\u3002\u4e0b\u9762\u662f\u5173\u4e8e\u53c2\u6570\u7684\u8bf4\u660e\uff1a thread \u6307\u5411\u7ebf\u7a0b\u6807\u8bc6\u7b26\u6307\u9488\u3002 attr \u4e00\u4e2a\u4e0d\u900f\u660e\u7684\u5c5e\u6027\u5bf9\u8c61\uff0c\u53ef\u4ee5\u88ab\u7528\u6765\u8bbe\u7f6e\u7ebf\u7a0b\u5c5e\u6027\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u7ebf\u7a0b\u5c5e\u6027\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u503c NULL\u3002 start_routine \u7ebf\u7a0b\u8fd0\u884c\u51fd\u6570\u8d77\u59cb\u5730\u5740\uff0c\u4e00\u65e6\u7ebf\u7a0b\u88ab\u521b\u5efa\u5c31\u4f1a\u6267\u884c\u3002 arg \u8fd0\u884c\u51fd\u6570\u7684\u53c2\u6570\u3002\u5b83\u5fc5\u987b\u901a\u8fc7\u628a\u5f15\u7528\u4f5c\u4e3a\u6307\u9488\u5f3a\u5236\u8f6c\u6362\u4e3a void \u7c7b\u578b\u8fdb\u884c\u4f20\u9012\u3002\u5982\u679c\u6ca1\u6709\u4f20\u9012\u53c2\u6570\uff0c\u5219\u4f7f\u7528 NULL\u3002 \u521b\u5efa\u7ebf\u7a0b\u6210\u529f\u65f6\uff0c\u51fd\u6570\u8fd4\u56de 0\uff0c\u82e5\u8fd4\u56de\u503c\u4e0d\u4e3a 0 \u5219\u8bf4\u660e\u521b\u5efa\u7ebf\u7a0b\u5931\u8d25\u3002","title":"\u521b\u5efa\u7ebf\u7a0b"},{"location":"cpp/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_2","text":"\u4f7f\u7528\u4e0b\u9762\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u6765\u7ec8\u6b62\u4e00\u4e2a POSIX \u7ebf\u7a0b\uff1a #include <pthread.h> pthread_exit ( status ) \u5728\u8fd9\u91cc\uff0cpthread_exit \u7528\u4e8e\u663e\u5f0f\u5730\u9000\u51fa\u4e00\u4e2a\u7ebf\u7a0b\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cpthread_exit() \u51fd\u6570\u662f\u5728\u7ebf\u7a0b\u5b8c\u6210\u5de5\u4f5c\u540e\u65e0\u9700\u7ee7\u7eed\u5b58\u5728\u65f6\u88ab\u8c03\u7528\u3002 \u5982\u679c main() \u662f\u5728\u5b83\u6240\u521b\u5efa\u7684\u7ebf\u7a0b\u4e4b\u524d\u7ed3\u675f\uff0c\u5e76\u901a\u8fc7 pthread_exit() \u9000\u51fa\uff0c\u90a3\u4e48\u5176\u4ed6\u7ebf\u7a0b\u5c06\u7ee7\u7eed\u6267\u884c\u3002\u5426\u5219\uff0c\u5b83\u4eec\u5c06\u5728 main() \u7ed3\u675f\u65f6\u81ea\u52a8\u88ab\u7ec8\u6b62\u3002 \u4ee5\u4e0b\u7b80\u5355\u7684\u5b9e\u4f8b\u4ee3\u7801\u4f7f\u7528 pthread_create() \u51fd\u6570\u521b\u5efa\u4e86 5 \u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8f93\u51fa\"Hello Runoob\uff01\": #include <iostream> // \u5fc5\u987b\u7684\u5934\u6587\u4ef6 #include <pthread.h> using namespace std ; #define NUM_THREADS 5 // \u7ebf\u7a0b\u7684\u8fd0\u884c\u51fd\u6570 void * say_hello ( void * args ) { cout << \"Hello Runoob\uff01\" << endl ; return 0 ; } int main () { // \u5b9a\u4e49\u7ebf\u7a0b\u7684 id \u53d8\u91cf\uff0c\u591a\u4e2a\u53d8\u91cf\u4f7f\u7528\u6570\u7ec4 pthread_t tids [ NUM_THREADS ]; for ( int i = 0 ; i < NUM_THREADS ; ++ i ) { //\u53c2\u6570\u4f9d\u6b21\u662f\uff1a\u521b\u5efa\u7684\u7ebf\u7a0bid\uff0c\u7ebf\u7a0b\u53c2\u6570\uff0c\u8c03\u7528\u7684\u51fd\u6570\uff0c\u4f20\u5165\u7684\u51fd\u6570\u53c2\u6570 int ret = pthread_create ( & tids [ i ], NULL , say_hello , NULL ); if ( ret != 0 ) { cout << \"pthread_create error: error_code=\" << ret << endl ; } } //\u7b49\u5404\u4e2a\u7ebf\u7a0b\u9000\u51fa\u540e\uff0c\u8fdb\u7a0b\u624d\u7ed3\u675f\uff0c\u5426\u5219\u8fdb\u7a0b\u5f3a\u5236\u7ed3\u675f\u4e86\uff0c\u7ebf\u7a0b\u53ef\u80fd\u8fd8\u6ca1\u53cd\u5e94\u8fc7\u6765\uff1b pthread_exit ( NULL ); } \u4f7f\u7528 -lpthread \u5e93\u7f16\u8bd1\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a $ g++ test.cpp -lpthread -o test.o \u4ee5\u4e0b\u7b80\u5355\u7684\u5b9e\u4f8b\u4ee3\u7801\u4f7f\u7528 pthread_create() \u51fd\u6570\u521b\u5efa\u4e86 5 \u4e2a\u7ebf\u7a0b\uff0c\u5e76\u63a5\u6536\u4f20\u5165\u7684\u53c2\u6570\u3002 \u6bcf\u4e2a\u7ebf\u7a0b\u6253\u5370\u4e00\u4e2a \"Hello Runoob!\" \u6d88\u606f\uff0c\u5e76\u8f93\u51fa\u63a5\u6536\u7684\u53c2\u6570\uff0c\u7136\u540e\u8c03\u7528 pthread_exit() \u7ec8\u6b62\u7ebf\u7a0b\u3002 //\u6587\u4ef6\u540d\uff1atest.cpp #include <iostream> #include <cstdlib> #include <pthread.h> using namespace std ; #define NUM_THREADS 5 void * PrintHello ( void * threadid ) { // \u5bf9\u4f20\u5165\u7684\u53c2\u6570\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff0c\u7531\u65e0\u7c7b\u578b\u6307\u9488\u53d8\u4e3a\u6574\u5f62\u6570\u6307\u9488\uff0c\u7136\u540e\u518d\u8bfb\u53d6 int tid = * (( int * ) threadid ); cout << \"Hello Runoob! \u7ebf\u7a0b ID, \" << tid << endl ; pthread_exit ( NULL ); } int main () { pthread_t threads [ NUM_THREADS ]; int indexes [ NUM_THREADS ]; // \u7528\u6570\u7ec4\u6765\u4fdd\u5b58i\u7684\u503c int rc ; int i ; for ( i = 0 ; i < NUM_THREADS ; i ++ ){ cout << \"main() : \u521b\u5efa\u7ebf\u7a0b, \" << i << endl ; indexes [ i ] = i ; //\u5148\u4fdd\u5b58i\u7684\u503c // \u4f20\u5165\u7684\u65f6\u5019\u5fc5\u987b\u5f3a\u5236\u8f6c\u6362\u4e3avoid* \u7c7b\u578b\uff0c\u5373\u65e0\u7c7b\u578b\u6307\u9488 rc = pthread_create ( & threads [ i ], NULL , PrintHello , ( void * ) & ( indexes [ i ])); if ( rc ){ cout << \"Error:\u65e0\u6cd5\u521b\u5efa\u7ebf\u7a0b,\" << rc << endl ; exit ( -1 ); } } pthread_exit ( NULL ); }","title":"\u7ec8\u6b62\u7ebf\u7a0b"},{"location":"cpp/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_3","text":"\u8fd9\u4e2a\u5b9e\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u7ed3\u6784\u4f20\u9012\u591a\u4e2a\u53c2\u6570\u3002\u60a8\u53ef\u4ee5\u5728\u7ebf\u7a0b\u56de\u8c03\u4e2d\u4f20\u9012\u4efb\u610f\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u6307\u5411 void\uff0c\u5982\u4e0b\u9762\u7684\u5b9e\u4f8b\u6240\u793a\uff1a #include <iostream> #include <cstdlib> #include <pthread.h> using namespace std ; #define NUM_THREADS 5 struct thread_data { int thread_id ; char * message ; }; void * PrintHello ( void * threadarg ) { struct thread_data * my_data ; my_data = ( struct thread_data * ) threadarg ; cout << \"Thread ID : \" << my_data -> thread_id ; cout << \" Message : \" << my_data -> message << endl ; pthread_exit ( NULL ); } int main () { pthread_t threads [ NUM_THREADS ]; struct thread_data td [ NUM_THREADS ]; int rc ; int i ; for ( i = 0 ; i < NUM_THREADS ; i ++ ){ cout << \"main() : creating thread, \" << i << endl ; td [ i ]. thread_id = i ; td [ i ]. message = ( char * ) \"This is message\" ; rc = pthread_create ( & threads [ i ], NULL , PrintHello , ( void * ) & td [ i ]); if ( rc ){ cout << \"Error:unable to create thread,\" << rc << endl ; exit ( -1 ); } } pthread_exit ( NULL ); }","title":"\u5411\u7ebf\u7a0b\u4f20\u9012\u53c2\u6570"},{"location":"cpp/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_4","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u51fd\u6570\u6765\u8fde\u63a5\u6216\u5206\u79bb\u7ebf\u7a0b\uff1a pthread_join ( threadid , status ) pthread_detach ( threadid ) pthread_join() \u5b50\u7a0b\u5e8f\u963b\u585e\u8c03\u7528\u7a0b\u5e8f\uff0c\u76f4\u5230\u6307\u5b9a\u7684 threadid \u7ebf\u7a0b\u7ec8\u6b62\u4e3a\u6b62\u3002 \u5f53\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u5b83\u7684\u67d0\u4e2a\u5c5e\u6027\u4f1a\u5b9a\u4e49\u5b83\u662f\u5426\u662f\u53ef\u8fde\u63a5\u7684\uff08joinable\uff09\u6216\u53ef\u5206\u79bb\u7684\uff08detached\uff09\u3002 \u53ea\u6709\u521b\u5efa\u65f6\u5b9a\u4e49\u4e3a\u53ef\u8fde\u63a5\u7684\u7ebf\u7a0b\u624d\u53ef\u4ee5\u88ab\u8fde\u63a5\u3002\u5982\u679c\u7ebf\u7a0b\u521b\u5efa\u65f6\u88ab\u5b9a\u4e49\u4e3a\u53ef\u5206\u79bb\u7684\uff0c\u5219\u5b83\u6c38\u8fdc\u4e5f\u4e0d\u80fd\u88ab\u8fde\u63a5\u3002 \u8fd9\u4e2a\u5b9e\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 pthread_join() \u51fd\u6570\u6765\u7b49\u5f85\u7ebf\u7a0b\u7684\u5b8c\u6210\u3002 #include <iostream> #include <cstdlib> #include <pthread.h> #include <unistd.h> using namespace std ; #define NUM_THREADS 5 void * wait ( void * t ) { int i ; long tid ; tid = ( long ) t ; sleep ( 1 ); cout << \"Sleeping in thread \" << endl ; cout << \"Thread with id : \" << tid << \" ...exiting \" << endl ; pthread_exit ( NULL ); } int main () { int rc ; int i ; pthread_t threads [ NUM_THREADS ]; pthread_attr_t attr ; void * status ; // \u521d\u59cb\u5316\u5e76\u8bbe\u7f6e\u7ebf\u7a0b\u4e3a\u53ef\u8fde\u63a5\u7684\uff08joinable\uff09 pthread_attr_init ( & attr ); pthread_attr_setdetachstate ( & attr , PTHREAD_CREATE_JOINABLE ); for ( i = 0 ; i < NUM_THREADS ; i ++ ){ cout << \"main() : creating thread, \" << i << endl ; rc = pthread_create ( & threads [ i ], NULL , wait , ( void * ) & i ); if ( rc ){ cout << \"Error:unable to create thread,\" << rc << endl ; exit ( -1 ); } } // \u5220\u9664\u5c5e\u6027\uff0c\u5e76\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b pthread_attr_destroy ( & attr ); for ( i = 0 ; i < NUM_THREADS ; i ++ ){ rc = pthread_join ( threads [ i ], & status ); if ( rc ){ cout << \"Error:unable to join,\" << rc << endl ; exit ( -1 ); } cout << \"Main: completed thread id :\" << i ; cout << \" exiting with status :\" << status << endl ; } cout << \"Main: program exiting.\" << endl ; pthread_exit ( NULL ); }","title":"\u8fde\u63a5\u548c\u5206\u79bb\u7ebf\u7a0b"},{"location":"cpp/%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"C++ \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff1a C \u98ce\u683c\u5b57\u7b26\u4e32 C++ \u5f15\u5165\u7684 string \u7c7b\u7c7b\u578b C \u98ce\u683c\u5b57\u7b26\u4e32 \u00b6 C \u98ce\u683c\u7684\u5b57\u7b26\u4e32\u8d77\u6e90\u4e8e C \u8bed\u8a00\uff0c\u5e76\u5728 C++ \u4e2d\u7ee7\u7eed\u5f97\u5230\u652f\u6301\u3002\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528 null \u5b57\u7b26 '\\0' \u7ec8\u6b62\u7684\u4e00\u7ef4\u5b57\u7b26\u6570\u7ec4\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u542b\u4e86\u7ec4\u6210\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u3002 \u4e0b\u9762\u7684\u58f0\u660e\u548c\u521d\u59cb\u5316\u521b\u5efa\u4e86\u4e00\u4e2a \"Hello\" \u5b57\u7b26\u4e32\u3002\u7531\u4e8e\u5728\u6570\u7ec4\u7684\u672b\u5c3e\u5b58\u50a8\u4e86\u7a7a\u5b57\u7b26\uff0c\u6240\u4ee5\u5b57\u7b26\u6570\u7ec4\u7684\u5927\u5c0f\u6bd4\u5355\u8bcd \"Hello\" \u7684\u5b57\u7b26\u6570\u591a\u4e00\u4e2a\u3002 char greeting [ 6 ] = { 'H' , 'e' , 'l' , 'l' , 'o' , '\\0' }; \u4f9d\u636e\u6570\u7ec4\u521d\u59cb\u5316\u89c4\u5219\uff0c\u60a8\u53ef\u4ee5\u628a\u4e0a\u9762\u7684\u8bed\u53e5\u5199\u6210\u4ee5\u4e0b\u8bed\u53e5\uff1a char greeting [] = \"Hello\" ; \u4ee5\u4e0b\u662f C/C++ \u4e2d\u5b9a\u4e49\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5b58\u8868\u793a\uff1a \u5176\u5b9e\uff0c\u60a8\u4e0d\u9700\u8981\u628a null \u5b57\u7b26\u653e\u5728\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u672b\u5c3e\u3002C++ \u7f16\u8bd1\u5668\u4f1a\u5728\u521d\u59cb\u5316\u6570\u7ec4\u65f6\uff0c\u81ea\u52a8\u628a '\\0' \u653e\u5728\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002\u8ba9\u6211\u4eec\u5c1d\u8bd5\u8f93\u51fa\u4e0a\u9762\u7684\u5b57\u7b26\u4e32\uff1a #include <iostream> using namespace std ; int main () { char greeting [ 6 ] = { 'H' , 'e' , 'l' , 'l' , 'o' , '\\0' }; cout << \"Greeting message: \" ; cout << greeting << endl ; return 0 ; } C++ \u4e2d\u6709\u5927\u91cf\u7684\u51fd\u6570\u7528\u6765\u64cd\u4f5c\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff1asupports a wide range of functions that manipulate null-terminated strings: #include <iostream> #include <cstring> using namespace std ; int main () { char str1 [ 11 ] = \"Hello\" ; char str2 [ 11 ] = \"World\" ; char str3 [ 11 ]; int len ; // \u590d\u5236 str1 \u5230 str3 strcpy ( str3 , str1 ); cout << \"strcpy( str3, str1) : \" << str3 << endl ; // \u8fde\u63a5 str1 \u548c str2 strcat ( str1 , str2 ); cout << \"strcat( str1, str2): \" << str1 << endl ; // \u8fde\u63a5\u540e\uff0cstr1 \u7684\u603b\u957f\u5ea6 len = strlen ( str1 ); cout << \"strlen(str1) : \" << len << endl ; return 0 ; } C++ \u4e2d\u7684 String \u7c7b \u00b6 C++ \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 string \u7c7b\u7c7b\u578b\uff0c\u652f\u6301\u4e0a\u8ff0\u6240\u6709\u7684\u64cd\u4f5c\uff0c\u53e6\u5916\u8fd8\u589e\u52a0\u4e86\u5176\u4ed6\u66f4\u591a\u7684\u529f\u80fd\u3002\u6211\u4eec\u5c06\u5b66\u4e60 C++ \u6807\u51c6\u5e93\u4e2d\u7684\u8fd9\u4e2a\u7c7b\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u5b9e\u4f8b\uff1a #include <iostream> #include <string> using namespace std ; int main () { string str1 = \"Hello\" ; string str2 = \"World\" ; string str3 ; int len ; // \u590d\u5236 str1 \u5230 str3 str3 = str1 ; cout << \"str3 : \" << str3 << endl ; // \u8fde\u63a5 str1 \u548c str2 str3 = str1 + str2 ; cout << \"str1 + str2 : \" << str3 << endl ; // \u8fde\u63a5\u540e\uff0cstr3 \u7684\u603b\u957f\u5ea6 len = str3 . size (); cout << \"str3.size() : \" << len << endl ; return 0 ; }","title":"\u5b57\u7b26\u4e32"},{"location":"cpp/%E5%AD%97%E7%AC%A6%E4%B8%B2/#c","text":"C \u98ce\u683c\u7684\u5b57\u7b26\u4e32\u8d77\u6e90\u4e8e C \u8bed\u8a00\uff0c\u5e76\u5728 C++ \u4e2d\u7ee7\u7eed\u5f97\u5230\u652f\u6301\u3002\u5b57\u7b26\u4e32\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528 null \u5b57\u7b26 '\\0' \u7ec8\u6b62\u7684\u4e00\u7ef4\u5b57\u7b26\u6570\u7ec4\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u542b\u4e86\u7ec4\u6210\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u3002 \u4e0b\u9762\u7684\u58f0\u660e\u548c\u521d\u59cb\u5316\u521b\u5efa\u4e86\u4e00\u4e2a \"Hello\" \u5b57\u7b26\u4e32\u3002\u7531\u4e8e\u5728\u6570\u7ec4\u7684\u672b\u5c3e\u5b58\u50a8\u4e86\u7a7a\u5b57\u7b26\uff0c\u6240\u4ee5\u5b57\u7b26\u6570\u7ec4\u7684\u5927\u5c0f\u6bd4\u5355\u8bcd \"Hello\" \u7684\u5b57\u7b26\u6570\u591a\u4e00\u4e2a\u3002 char greeting [ 6 ] = { 'H' , 'e' , 'l' , 'l' , 'o' , '\\0' }; \u4f9d\u636e\u6570\u7ec4\u521d\u59cb\u5316\u89c4\u5219\uff0c\u60a8\u53ef\u4ee5\u628a\u4e0a\u9762\u7684\u8bed\u53e5\u5199\u6210\u4ee5\u4e0b\u8bed\u53e5\uff1a char greeting [] = \"Hello\" ; \u4ee5\u4e0b\u662f C/C++ \u4e2d\u5b9a\u4e49\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5b58\u8868\u793a\uff1a \u5176\u5b9e\uff0c\u60a8\u4e0d\u9700\u8981\u628a null \u5b57\u7b26\u653e\u5728\u5b57\u7b26\u4e32\u5e38\u91cf\u7684\u672b\u5c3e\u3002C++ \u7f16\u8bd1\u5668\u4f1a\u5728\u521d\u59cb\u5316\u6570\u7ec4\u65f6\uff0c\u81ea\u52a8\u628a '\\0' \u653e\u5728\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002\u8ba9\u6211\u4eec\u5c1d\u8bd5\u8f93\u51fa\u4e0a\u9762\u7684\u5b57\u7b26\u4e32\uff1a #include <iostream> using namespace std ; int main () { char greeting [ 6 ] = { 'H' , 'e' , 'l' , 'l' , 'o' , '\\0' }; cout << \"Greeting message: \" ; cout << greeting << endl ; return 0 ; } C++ \u4e2d\u6709\u5927\u91cf\u7684\u51fd\u6570\u7528\u6765\u64cd\u4f5c\u4ee5 null \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff1asupports a wide range of functions that manipulate null-terminated strings: #include <iostream> #include <cstring> using namespace std ; int main () { char str1 [ 11 ] = \"Hello\" ; char str2 [ 11 ] = \"World\" ; char str3 [ 11 ]; int len ; // \u590d\u5236 str1 \u5230 str3 strcpy ( str3 , str1 ); cout << \"strcpy( str3, str1) : \" << str3 << endl ; // \u8fde\u63a5 str1 \u548c str2 strcat ( str1 , str2 ); cout << \"strcat( str1, str2): \" << str1 << endl ; // \u8fde\u63a5\u540e\uff0cstr1 \u7684\u603b\u957f\u5ea6 len = strlen ( str1 ); cout << \"strlen(str1) : \" << len << endl ; return 0 ; }","title":"C \u98ce\u683c\u5b57\u7b26\u4e32"},{"location":"cpp/%E5%AD%97%E7%AC%A6%E4%B8%B2/#c-string","text":"C++ \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 string \u7c7b\u7c7b\u578b\uff0c\u652f\u6301\u4e0a\u8ff0\u6240\u6709\u7684\u64cd\u4f5c\uff0c\u53e6\u5916\u8fd8\u589e\u52a0\u4e86\u5176\u4ed6\u66f4\u591a\u7684\u529f\u80fd\u3002\u6211\u4eec\u5c06\u5b66\u4e60 C++ \u6807\u51c6\u5e93\u4e2d\u7684\u8fd9\u4e2a\u7c7b\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u5b9e\u4f8b\uff1a #include <iostream> #include <string> using namespace std ; int main () { string str1 = \"Hello\" ; string str2 = \"World\" ; string str3 ; int len ; // \u590d\u5236 str1 \u5230 str3 str3 = str1 ; cout << \"str3 : \" << str3 << endl ; // \u8fde\u63a5 str1 \u548c str2 str3 = str1 + str2 ; cout << \"str1 + str2 : \" << str3 << endl ; // \u8fde\u63a5\u540e\uff0cstr3 \u7684\u603b\u957f\u5ea6 len = str3 . size (); cout << \"str3.size() : \" << len << endl ; return 0 ; }","title":"C++ \u4e2d\u7684 String \u7c7b"},{"location":"cpp/%E5%AD%98%E5%82%A8%E7%B1%BB/","text":"\u5b58\u50a8\u7c7b\u5b9a\u4e49 C++ \u7a0b\u5e8f\u4e2d\u53d8\u91cf/\u51fd\u6570\u7684\u8303\u56f4\uff08\u53ef\u89c1\u6027\uff09\u548c\u751f\u547d\u5468\u671f\u3002\u8fd9\u4e9b\u8bf4\u660e\u7b26\u653e\u7f6e\u5728\u5b83\u4eec\u6240\u4fee\u9970\u7684\u7c7b\u578b\u4e4b\u524d\u3002 \u4e0b\u9762\u5217\u51fa C++ \u7a0b\u5e8f\u4e2d\u53ef\u7528\u7684\u5b58\u50a8\u7c7b\uff1a auto register static extern mutable thread_local (C++11) \u4ece C++ 17 \u5f00\u59cb\uff0cauto \u5173\u952e\u5b57\u4e0d\u518d\u662f C++ \u5b58\u50a8\u7c7b\u8bf4\u660e\u7b26\uff0c\u4e14 register \u5173\u952e\u5b57\u88ab\u5f03\u7528\u3002 auto \u5b58\u50a8\u7c7b \u00b6 \u81ea C++ 11 \u4ee5\u6765\uff0cauto \u5173\u952e\u5b57\u7528\u4e8e\u4e24\u79cd\u60c5\u51b5\uff1a\u58f0\u660e\u53d8\u91cf\u65f6\u6839\u636e\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u81ea\u52a8\u63a8\u65ad\u8be5\u53d8\u91cf\u7684\u7c7b\u578b\u3001\u58f0\u660e\u51fd\u6570\u65f6\u51fd\u6570\u8fd4\u56de\u503c\u7684\u5360\u4f4d\u7b26\u3002 C++98\u6807\u51c6\u4e2dauto\u5173\u952e\u5b57\u7528\u4e8e\u81ea\u52a8\u53d8\u91cf\u7684\u58f0\u660e\uff0c\u4f46\u7531\u4e8e\u4f7f\u7528\u6781\u5c11\u4e14\u591a\u4f59\uff0c\u5728C++11\u4e2d\u5df2\u5220\u9664\u8fd9\u4e00\u7528\u6cd5\u3002 \u6839\u636e\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u81ea\u52a8\u63a8\u65ad\u88ab\u58f0\u660e\u7684\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u5982\uff1a auto f = 3.14 ; //double auto s ( \"hello\" ); //const char* auto z = new auto ( 9 ); // int* auto x1 = 5 , x2 = 5.0 , x3 = 'r' ; //\u9519\u8bef\uff0c\u5fc5\u987b\u662f\u521d\u59cb\u5316\u4e3a\u540c\u4e00\u7c7b\u578b register \u5b58\u50a8\u7c7b \u00b6 register \u5b58\u50a8\u7c7b\u7528\u4e8e\u5b9a\u4e49\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\u800c\u4e0d\u662f RAM \u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\u53d8\u91cf\u7684\u6700\u5927\u5c3a\u5bf8\u7b49\u4e8e\u5bc4\u5b58\u5668\u7684\u5927\u5c0f\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u8bcd\uff09\uff0c\u4e14\u4e0d\u80fd\u5bf9\u5b83\u5e94\u7528\u4e00\u5143\u7684 '&' \u8fd0\u7b97\u7b26\uff08\u56e0\u4e3a\u5b83\u6ca1\u6709\u5185\u5b58\u4f4d\u7f6e\uff09\u3002 { register int miles ; } \u5bc4\u5b58\u5668\u53ea\u7528\u4e8e\u9700\u8981\u5feb\u901f\u8bbf\u95ee\u7684\u53d8\u91cf\uff0c\u6bd4\u5982\u8ba1\u6570\u5668\u3002\u8fd8\u5e94\u6ce8\u610f\u7684\u662f\uff0c\u5b9a\u4e49 'register' \u5e76\u4e0d\u610f\u5473\u7740\u53d8\u91cf\u5c06\u88ab\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u5b83\u610f\u5473\u7740\u53d8\u91cf\u53ef\u80fd\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd9\u53d6\u51b3\u4e8e\u786c\u4ef6\u548c\u5b9e\u73b0\u7684\u9650\u5236\u3002 static \u5b58\u50a8\u7c7b \u00b6 static \u5b58\u50a8\u7c7b\u6307\u793a\u7f16\u8bd1\u5668\u5728\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u5185\u4fdd\u6301\u5c40\u90e8\u53d8\u91cf\u7684\u5b58\u5728\uff0c\u800c\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u5b83\u8fdb\u5165\u548c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u8fdb\u884c\u521b\u5efa\u548c\u9500\u6bc1\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 static \u4fee\u9970\u5c40\u90e8\u53d8\u91cf\u53ef\u4ee5\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u95f4\u4fdd\u6301\u5c40\u90e8\u53d8\u91cf\u7684\u503c\u3002 static \u4fee\u9970\u7b26\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u5168\u5c40\u53d8\u91cf\u3002\u5f53 static \u4fee\u9970\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u4f1a\u4f7f\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u9650\u5236\u5728\u58f0\u660e\u5b83\u7684\u6587\u4ef6\u5185\u3002 \u5728 C++ \u4e2d\uff0c\u5f53 static \u7528\u5728\u7c7b\u6570\u636e\u6210\u5458\u4e0a\u65f6\uff0c\u4f1a\u5bfc\u81f4\u4ec5\u6709\u4e00\u4e2a\u8be5\u6210\u5458\u7684\u526f\u672c\u88ab\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002 #include <iostream> // \u51fd\u6570\u58f0\u660e void func ( void ); static int count = 10 ; /* \u5168\u5c40\u53d8\u91cf */ int main () { while ( count -- ) { func (); } return 0 ; } // \u51fd\u6570\u5b9a\u4e49 void func ( void ) { static int i = 5 ; // \u5c40\u90e8\u9759\u6001\u53d8\u91cf i ++ ; std :: cout << \"\u53d8\u91cf i \u4e3a \" << i ; std :: cout << \" , \u53d8\u91cf count \u4e3a \" << count << std :: endl ; } extern \u5b58\u50a8\u7c7b \u00b6 extern \u5b58\u50a8\u7c7b\u7528\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u5168\u5c40\u53d8\u91cf\u5bf9\u6240\u6709\u7684\u7a0b\u5e8f\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\u3002\u5f53\u60a8\u4f7f\u7528 'extern' \u65f6\uff0c\u5bf9\u4e8e\u65e0\u6cd5\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u4f1a\u628a\u53d8\u91cf\u540d\u6307\u5411\u4e00\u4e2a\u4e4b\u524d\u5b9a\u4e49\u8fc7\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5f53\u60a8\u6709\u591a\u4e2a\u6587\u4ef6\u4e14\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u6765\u5f97\u5230\u5df2\u5b9a\u4e49\u7684\u53d8\u91cf\u6216\u51fd\u6570\u7684\u5f15\u7528\u3002 \u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff0cextern \u662f\u7528\u6765\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u3002 extern \u4fee\u9970\u7b26\u901a\u5e38\u7528\u4e8e\u5f53\u6709\u4e24\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5171\u4eab\u76f8\u540c\u7684\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7b2c\u4e00\u4e2a\u6587\u4ef6\uff1amain.cpp #include <iostream> int count ; extern void write_extern (); int main () { count = 5 ; write_extern (); } \u7b2c\u4e8c\u4e2a\u6587\u4ef6\uff1asupport.cpp #include <iostream> extern int count ; void write_extern ( void ) { std :: cout << \"Count is \" << count << std :: endl ; } \u5728\u8fd9\u91cc\uff0c\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u4e2d\u7684 extern \u5173\u952e\u5b57\u7528\u4e8e\u58f0\u660e\u5df2\u7ecf\u5728\u7b2c\u4e00\u4e2a\u6587\u4ef6 main.cpp \u4e2d\u5b9a\u4e49\u7684 count\u3002\u73b0\u5728 \uff0c\u7f16\u8bd1\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ g++ main.cpp support.cpp -o write \u8fd9\u4f1a\u4ea7\u751f write \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5c1d\u8bd5\u6267\u884c write\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a $ ./write Count is 5 mutable \u5b58\u50a8\u7c7b \u00b6 mutable \u8bf4\u660e\u7b26\u4ec5\u9002\u7528\u4e8e\u7c7b\u7684\u5bf9\u8c61\uff0c\u8fd9\u5c06\u5728\u672c\u6559\u7a0b\u7684\u6700\u540e\u8fdb\u884c\u8bb2\u89e3\u3002 \u5b83\u5141\u8bb8\u5bf9\u8c61\u7684\u6210\u5458\u66ff\u4ee3\u5e38\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cmutable \u6210\u5458\u53ef\u4ee5\u901a\u8fc7 const \u6210\u5458\u51fd\u6570\u4fee\u6539\u3002 thread_local \u5b58\u50a8\u7c7b \u00b6 \u4f7f\u7528 thread_local \u8bf4\u660e\u7b26\u58f0\u660e\u7684\u53d8\u91cf\u4ec5\u53ef\u5728\u5b83\u5728\u5176\u4e0a\u521b\u5efa\u7684\u7ebf\u7a0b\u4e0a\u8bbf\u95ee\u3002 \u53d8\u91cf\u5728\u521b\u5efa\u7ebf\u7a0b\u65f6\u521b\u5efa\uff0c\u5e76\u5728\u9500\u6bc1\u7ebf\u7a0b\u65f6\u9500\u6bc1\u3002 \u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u5176\u81ea\u5df1\u7684\u53d8\u91cf\u526f\u672c\u3002 thread_local \u8bf4\u660e\u7b26\u53ef\u4ee5\u4e0e static \u6216 extern \u5408\u5e76\u3002 \u53ef\u4ee5\u5c06 thread_local \u4ec5\u5e94\u7528\u4e8e\u6570\u636e\u58f0\u660e\u548c\u5b9a\u4e49\uff0cthread_local \u4e0d\u80fd\u7528\u4e8e\u51fd\u6570\u58f0\u660e\u6216\u5b9a\u4e49\u3002 \u4ee5\u4e0b\u6f14\u793a\u4e86\u53ef\u4ee5\u88ab\u58f0\u660e\u4e3a thread_local \u7684\u53d8\u91cf\uff1a thread_local int x ; // \u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5168\u5c40\u53d8\u91cf class X { static thread_local std :: string s ; // \u7c7b\u7684static\u6210\u5458\u53d8\u91cf }; static thread_local std :: string X :: s ; // X::s \u662f\u9700\u8981\u5b9a\u4e49\u7684 void foo () { thread_local std :: vector < int > v ; // \u672c\u5730\u53d8\u91cf }","title":"\u5b58\u50a8\u7c7b"},{"location":"cpp/%E5%AD%98%E5%82%A8%E7%B1%BB/#auto","text":"\u81ea C++ 11 \u4ee5\u6765\uff0cauto \u5173\u952e\u5b57\u7528\u4e8e\u4e24\u79cd\u60c5\u51b5\uff1a\u58f0\u660e\u53d8\u91cf\u65f6\u6839\u636e\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u81ea\u52a8\u63a8\u65ad\u8be5\u53d8\u91cf\u7684\u7c7b\u578b\u3001\u58f0\u660e\u51fd\u6570\u65f6\u51fd\u6570\u8fd4\u56de\u503c\u7684\u5360\u4f4d\u7b26\u3002 C++98\u6807\u51c6\u4e2dauto\u5173\u952e\u5b57\u7528\u4e8e\u81ea\u52a8\u53d8\u91cf\u7684\u58f0\u660e\uff0c\u4f46\u7531\u4e8e\u4f7f\u7528\u6781\u5c11\u4e14\u591a\u4f59\uff0c\u5728C++11\u4e2d\u5df2\u5220\u9664\u8fd9\u4e00\u7528\u6cd5\u3002 \u6839\u636e\u521d\u59cb\u5316\u8868\u8fbe\u5f0f\u81ea\u52a8\u63a8\u65ad\u88ab\u58f0\u660e\u7684\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u5982\uff1a auto f = 3.14 ; //double auto s ( \"hello\" ); //const char* auto z = new auto ( 9 ); // int* auto x1 = 5 , x2 = 5.0 , x3 = 'r' ; //\u9519\u8bef\uff0c\u5fc5\u987b\u662f\u521d\u59cb\u5316\u4e3a\u540c\u4e00\u7c7b\u578b","title":"auto \u5b58\u50a8\u7c7b"},{"location":"cpp/%E5%AD%98%E5%82%A8%E7%B1%BB/#register","text":"register \u5b58\u50a8\u7c7b\u7528\u4e8e\u5b9a\u4e49\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\u800c\u4e0d\u662f RAM \u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u3002\u8fd9\u610f\u5473\u7740\u53d8\u91cf\u7684\u6700\u5927\u5c3a\u5bf8\u7b49\u4e8e\u5bc4\u5b58\u5668\u7684\u5927\u5c0f\uff08\u901a\u5e38\u662f\u4e00\u4e2a\u8bcd\uff09\uff0c\u4e14\u4e0d\u80fd\u5bf9\u5b83\u5e94\u7528\u4e00\u5143\u7684 '&' \u8fd0\u7b97\u7b26\uff08\u56e0\u4e3a\u5b83\u6ca1\u6709\u5185\u5b58\u4f4d\u7f6e\uff09\u3002 { register int miles ; } \u5bc4\u5b58\u5668\u53ea\u7528\u4e8e\u9700\u8981\u5feb\u901f\u8bbf\u95ee\u7684\u53d8\u91cf\uff0c\u6bd4\u5982\u8ba1\u6570\u5668\u3002\u8fd8\u5e94\u6ce8\u610f\u7684\u662f\uff0c\u5b9a\u4e49 'register' \u5e76\u4e0d\u610f\u5473\u7740\u53d8\u91cf\u5c06\u88ab\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u5b83\u610f\u5473\u7740\u53d8\u91cf\u53ef\u80fd\u5b58\u50a8\u5728\u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd9\u53d6\u51b3\u4e8e\u786c\u4ef6\u548c\u5b9e\u73b0\u7684\u9650\u5236\u3002","title":"register \u5b58\u50a8\u7c7b"},{"location":"cpp/%E5%AD%98%E5%82%A8%E7%B1%BB/#static","text":"static \u5b58\u50a8\u7c7b\u6307\u793a\u7f16\u8bd1\u5668\u5728\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u5185\u4fdd\u6301\u5c40\u90e8\u53d8\u91cf\u7684\u5b58\u5728\uff0c\u800c\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u5b83\u8fdb\u5165\u548c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u8fdb\u884c\u521b\u5efa\u548c\u9500\u6bc1\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 static \u4fee\u9970\u5c40\u90e8\u53d8\u91cf\u53ef\u4ee5\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u95f4\u4fdd\u6301\u5c40\u90e8\u53d8\u91cf\u7684\u503c\u3002 static \u4fee\u9970\u7b26\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u5168\u5c40\u53d8\u91cf\u3002\u5f53 static \u4fee\u9970\u5168\u5c40\u53d8\u91cf\u65f6\uff0c\u4f1a\u4f7f\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u9650\u5236\u5728\u58f0\u660e\u5b83\u7684\u6587\u4ef6\u5185\u3002 \u5728 C++ \u4e2d\uff0c\u5f53 static \u7528\u5728\u7c7b\u6570\u636e\u6210\u5458\u4e0a\u65f6\uff0c\u4f1a\u5bfc\u81f4\u4ec5\u6709\u4e00\u4e2a\u8be5\u6210\u5458\u7684\u526f\u672c\u88ab\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002 #include <iostream> // \u51fd\u6570\u58f0\u660e void func ( void ); static int count = 10 ; /* \u5168\u5c40\u53d8\u91cf */ int main () { while ( count -- ) { func (); } return 0 ; } // \u51fd\u6570\u5b9a\u4e49 void func ( void ) { static int i = 5 ; // \u5c40\u90e8\u9759\u6001\u53d8\u91cf i ++ ; std :: cout << \"\u53d8\u91cf i \u4e3a \" << i ; std :: cout << \" , \u53d8\u91cf count \u4e3a \" << count << std :: endl ; }","title":"static \u5b58\u50a8\u7c7b"},{"location":"cpp/%E5%AD%98%E5%82%A8%E7%B1%BB/#extern","text":"extern \u5b58\u50a8\u7c7b\u7528\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u5168\u5c40\u53d8\u91cf\u5bf9\u6240\u6709\u7684\u7a0b\u5e8f\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\u3002\u5f53\u60a8\u4f7f\u7528 'extern' \u65f6\uff0c\u5bf9\u4e8e\u65e0\u6cd5\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u4f1a\u628a\u53d8\u91cf\u540d\u6307\u5411\u4e00\u4e2a\u4e4b\u524d\u5b9a\u4e49\u8fc7\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5f53\u60a8\u6709\u591a\u4e2a\u6587\u4ef6\u4e14\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u6765\u5f97\u5230\u5df2\u5b9a\u4e49\u7684\u53d8\u91cf\u6216\u51fd\u6570\u7684\u5f15\u7528\u3002 \u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff0cextern \u662f\u7528\u6765\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u58f0\u660e\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u3002 extern \u4fee\u9970\u7b26\u901a\u5e38\u7528\u4e8e\u5f53\u6709\u4e24\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5171\u4eab\u76f8\u540c\u7684\u5168\u5c40\u53d8\u91cf\u6216\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u7b2c\u4e00\u4e2a\u6587\u4ef6\uff1amain.cpp #include <iostream> int count ; extern void write_extern (); int main () { count = 5 ; write_extern (); } \u7b2c\u4e8c\u4e2a\u6587\u4ef6\uff1asupport.cpp #include <iostream> extern int count ; void write_extern ( void ) { std :: cout << \"Count is \" << count << std :: endl ; } \u5728\u8fd9\u91cc\uff0c\u7b2c\u4e8c\u4e2a\u6587\u4ef6\u4e2d\u7684 extern \u5173\u952e\u5b57\u7528\u4e8e\u58f0\u660e\u5df2\u7ecf\u5728\u7b2c\u4e00\u4e2a\u6587\u4ef6 main.cpp \u4e2d\u5b9a\u4e49\u7684 count\u3002\u73b0\u5728 \uff0c\u7f16\u8bd1\u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ g++ main.cpp support.cpp -o write \u8fd9\u4f1a\u4ea7\u751f write \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5c1d\u8bd5\u6267\u884c write\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a $ ./write Count is 5","title":"extern \u5b58\u50a8\u7c7b"},{"location":"cpp/%E5%AD%98%E5%82%A8%E7%B1%BB/#mutable","text":"mutable \u8bf4\u660e\u7b26\u4ec5\u9002\u7528\u4e8e\u7c7b\u7684\u5bf9\u8c61\uff0c\u8fd9\u5c06\u5728\u672c\u6559\u7a0b\u7684\u6700\u540e\u8fdb\u884c\u8bb2\u89e3\u3002 \u5b83\u5141\u8bb8\u5bf9\u8c61\u7684\u6210\u5458\u66ff\u4ee3\u5e38\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cmutable \u6210\u5458\u53ef\u4ee5\u901a\u8fc7 const \u6210\u5458\u51fd\u6570\u4fee\u6539\u3002","title":"mutable \u5b58\u50a8\u7c7b"},{"location":"cpp/%E5%AD%98%E5%82%A8%E7%B1%BB/#thread_local","text":"\u4f7f\u7528 thread_local \u8bf4\u660e\u7b26\u58f0\u660e\u7684\u53d8\u91cf\u4ec5\u53ef\u5728\u5b83\u5728\u5176\u4e0a\u521b\u5efa\u7684\u7ebf\u7a0b\u4e0a\u8bbf\u95ee\u3002 \u53d8\u91cf\u5728\u521b\u5efa\u7ebf\u7a0b\u65f6\u521b\u5efa\uff0c\u5e76\u5728\u9500\u6bc1\u7ebf\u7a0b\u65f6\u9500\u6bc1\u3002 \u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u5176\u81ea\u5df1\u7684\u53d8\u91cf\u526f\u672c\u3002 thread_local \u8bf4\u660e\u7b26\u53ef\u4ee5\u4e0e static \u6216 extern \u5408\u5e76\u3002 \u53ef\u4ee5\u5c06 thread_local \u4ec5\u5e94\u7528\u4e8e\u6570\u636e\u58f0\u660e\u548c\u5b9a\u4e49\uff0cthread_local \u4e0d\u80fd\u7528\u4e8e\u51fd\u6570\u58f0\u660e\u6216\u5b9a\u4e49\u3002 \u4ee5\u4e0b\u6f14\u793a\u4e86\u53ef\u4ee5\u88ab\u58f0\u660e\u4e3a thread_local \u7684\u53d8\u91cf\uff1a thread_local int x ; // \u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5168\u5c40\u53d8\u91cf class X { static thread_local std :: string s ; // \u7c7b\u7684static\u6210\u5458\u53d8\u91cf }; static thread_local std :: string X :: s ; // X::s \u662f\u9700\u8981\u5b9a\u4e49\u7684 void foo () { thread_local std :: vector < int > v ; // \u672c\u5730\u53d8\u91cf }","title":"thread_local \u5b58\u50a8\u7c7b"},{"location":"cpp/%E5%B8%B8%E9%87%8F/","text":"\u5e38\u91cf\u662f\u56fa\u5b9a\u503c\uff0c\u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u3002 \u5e38\u91cf\u53ef\u4ee5\u662f\u4efb\u4f55\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u5206\u4e3a\u6574\u578b\u6570\u5b57\u3001\u6d6e\u70b9\u6570\u5b57\u3001\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u548c\u5e03\u5c14\u503c\u3002 \u6574\u6570\u5e38\u91cf \u00b6 \u6574\u6570\u5e38\u91cf\u53ef\u4ee5\u662f\u5341\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u7684\u5e38\u91cf\u3002 \u524d\u7f00\u6307\u5b9a\u57fa\u6570\uff1a0x \u6216 0X \u8868\u793a\u5341\u516d\u8fdb\u5236\uff0c0 \u8868\u793a\u516b\u8fdb\u5236\uff0c\u4e0d\u5e26\u524d\u7f00\u5219\u9ed8\u8ba4\u8868\u793a\u5341\u8fdb\u5236\u3002 \u6574\u6570\u5e38\u91cf\u4e5f\u53ef\u4ee5\u5e26\u4e00\u4e2a\u540e\u7f00\uff0c\u540e\u7f00\u662f U \u548c L \u7684\u7ec4\u5408\uff0cU \u8868\u793a\u65e0\u7b26\u53f7\u6574\u6570\uff08unsigned\uff09\uff0cL \u8868\u793a\u957f\u6574\u6570\uff08long\uff09\u3002\u540e\u7f00\u53ef\u4ee5\u662f\u5927\u5199\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c0f\u5199\uff0cU \u548c L \u7684\u987a\u5e8f\u4efb\u610f\u3002 212 // \u5408\u6cd5\u7684 215u // \u5408\u6cd5\u7684 0xFeeL // \u5408\u6cd5\u7684 07 8 // \u975e\u6cd5\u7684\uff1a8 \u4e0d\u662f\u516b\u8fdb\u5236\u7684\u6570\u5b57 032U U // \u975e\u6cd5\u7684\uff1a\u4e0d\u80fd\u91cd\u590d\u540e\u7f00 \u4ee5\u4e0b\u662f\u5404\u79cd\u7c7b\u578b\u7684\u6574\u6570\u5e38\u91cf\u7684\u5b9e\u4f8b\uff1a 85 // \u5341\u8fdb\u5236 0213 // \u516b\u8fdb\u5236 0x4b // \u5341\u516d\u8fdb\u5236 30 // \u6574\u6570 30u // \u65e0\u7b26\u53f7\u6574\u6570 30l // \u957f\u6574\u6570 30ul // \u65e0\u7b26\u53f7\u957f\u6574\u6570 \u6d6e\u70b9\u5e38\u91cf \u00b6 \u6d6e\u70b9\u5e38\u91cf\u7531\u6574\u6570\u90e8\u5206\u3001\u5c0f\u6570\u70b9\u3001\u5c0f\u6570\u90e8\u5206\u548c\u6307\u6570\u90e8\u5206\u7ec4\u6210\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5c0f\u6570\u5f62\u5f0f\u6216\u8005\u6307\u6570\u5f62\u5f0f\u6765\u8868\u793a\u6d6e\u70b9\u5e38\u91cf\u3002 \u5f53\u4f7f\u7528\u5c0f\u6570\u5f62\u5f0f\u8868\u793a\u65f6\uff0c\u5fc5\u987b\u5305\u542b\u6574\u6570\u90e8\u5206\u3001\u5c0f\u6570\u90e8\u5206\uff0c\u6216\u540c\u65f6\u5305\u542b\u4e24\u8005\u3002 \u5f53\u4f7f\u7528\u6307\u6570\u5f62\u5f0f\u8868\u793a\u65f6\uff0c \u5fc5\u987b\u5305\u542b\u5c0f\u6570\u70b9\u3001\u6307\u6570\uff0c\u6216\u540c\u65f6\u5305\u542b\u4e24\u8005\u3002\u5e26\u7b26\u53f7\u7684\u6307\u6570\u662f\u7528 e \u6216 E \u5f15\u5165\u7684\u3002 3.14159 // \u5408\u6cd5\u7684 314159E-5L // \u5408\u6cd5\u7684 510 E // \u975e\u6cd5\u7684\uff1a\u4e0d\u5b8c\u6574\u7684\u6307\u6570 210 e // \u975e\u6cd5\u7684\uff1a\u6ca1\u6709\u5c0f\u6570\u6216\u6307\u6570 . e55 // \u975e\u6cd5\u7684\uff1a\u7f3a\u5c11\u6574\u6570\u6216\u5206\u6570 \u5e03\u5c14\u5e38\u91cf \u00b6 \u5e03\u5c14\u5e38\u91cf\u5171\u6709\u4e24\u4e2a\uff0c\u5b83\u4eec\u90fd\u662f\u6807\u51c6\u7684 C++ \u5173\u952e\u5b57\uff1a true \u503c\u4ee3\u8868\u771f\u3002 false \u503c\u4ee3\u8868\u5047\u3002 \u6211\u4eec\u4e0d\u5e94\u628a true \u7684\u503c\u770b\u6210 1\uff0c\u628a false \u7684\u503c\u770b\u6210 0\u3002 \u5b57\u7b26\u5e38\u91cf \u00b6 \u5b57\u7b26\u5e38\u91cf\u662f\u62ec\u5728\u5355\u5f15\u53f7\u4e2d\u3002 \u5982\u679c\u5e38\u91cf\u4ee5 L\uff08\u4ec5\u5f53\u5927\u5199\u65f6\uff09\u5f00\u5934\uff0c\u5219\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u5bbd\u5b57\u7b26\u5e38\u91cf\uff08\u4f8b\u5982 L'x'\uff09\uff0c\u6b64\u65f6\u5b83\u5fc5\u987b\u5b58\u50a8\u5728 wchar_t \u7c7b\u578b\u7684\u53d8\u91cf\u4e2d\u3002\u5426\u5219\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u7a84\u5b57\u7b26\u5e38\u91cf\uff08\u4f8b\u5982 'x'\uff09\uff0c\u6b64\u65f6\u5b83\u53ef\u4ee5\u5b58\u50a8\u5728 char \u7c7b\u578b\u7684\u7b80\u5355\u53d8\u91cf\u4e2d\u3002 \u5b57\u7b26\u5e38\u91cf\u53ef\u4ee5\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5b57\u7b26\uff08\u4f8b\u5982 'x'\uff09\u3001\u4e00\u4e2a\u8f6c\u4e49\u5e8f\u5217\uff08\u4f8b\u5982 '\\t'\uff09\uff0c\u6216\u4e00\u4e2a\u901a\u7528\u7684\u5b57\u7b26\uff08\u4f8b\u5982 '\\u02C0'\uff09\u3002 \u5728 C++ \u4e2d\uff0c\u6709\u4e00\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\uff0c\u5f53\u5b83\u4eec\u524d\u9762\u6709\u53cd\u659c\u6760\u65f6\uff0c\u5b83\u4eec\u5c31\u5177\u6709\u7279\u6b8a\u7684\u542b\u4e49\uff0c\u88ab\u7528\u6765\u8868\u793a\u5982\u6362\u884c\u7b26\uff08\\n\uff09\u6216\u5236\u8868\u7b26\uff08\\t\uff09\u7b49\u3002 \u5b57\u7b26\u4e32\u5e38\u91cf \u00b6 \u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6216\u5e38\u91cf\u662f\u62ec\u5728\u53cc\u5f15\u53f7 \"\" \u4e2d\u7684\u3002\u4e00\u4e2a\u5b57\u7b26\u4e32\u5305\u542b\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u5e38\u91cf\u7684\u5b57\u7b26\uff1a\u666e\u901a\u7684\u5b57\u7b26\u3001\u8f6c\u4e49\u5e8f\u5217\u548c\u901a\u7528\u7684\u5b57\u7b26\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u7a7a\u683c\u505a\u5206\u9694\u7b26\uff0c\u628a\u4e00\u4e2a\u5f88\u957f\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u8fdb\u884c\u5206\u884c\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u663e\u793a\u4e86\u4e00\u4e9b\u5b57\u7b26\u4e32\u5e38\u91cf\u3002\u4e0b\u9762\u8fd9\u4e09\u79cd\u5f62\u5f0f\u6240\u663e\u793a\u7684\u5b57\u7b26\u4e32\u662f\u76f8\u540c\u7684\u3002 \"hello, dear\" \"hello, \\ dear \" \"hello, \" \"d\" \"ear\" \u5b9a\u4e49\u5e38\u91cf \u00b6 \u4f7f\u7528 #define \u9884\u5904\u7406\u5668 \u4f7f\u7528 const \u5173\u952e\u5b57 #define \u9884\u5904\u7406\u5668 \u00b6 \u4e0b\u9762\u662f\u4f7f\u7528 #define **\u9884\u5904\u7406\u5668**\u5b9a\u4e49\u5e38\u91cf\u7684\u5f62\u5f0f\uff1a #define identifier value #include <iostream> using namespace std ; #define LENGTH 10 #define WIDTH 5 #define NEWLINE '\\n' int main () { int area ; area = LENGTH * WIDTH ; cout << area ; cout << NEWLINE ; return 0 ; } const \u5173\u952e\u5b57 \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528 const \u524d\u7f00\u58f0\u660e\u6307\u5b9a\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a const type variable = value ; #include <iostream> using namespace std ; int main () { const int LENGTH = 10 ; const int WIDTH = 5 ; const char NEWLINE = '\\n' ; int area ; area = LENGTH * WIDTH ; cout << area ; cout << NEWLINE ; return 0 ; } \u8bf7\u6ce8\u610f\uff0c\u628a\u5e38\u91cf\u5b9a\u4e49\u4e3a\u5927\u5199\u5b57\u6bcd\u5f62\u5f0f\uff0c\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7f16\u7a0b\u5b9e\u8df5\u3002","title":"\u5e38\u91cf"},{"location":"cpp/%E5%B8%B8%E9%87%8F/#_1","text":"\u6574\u6570\u5e38\u91cf\u53ef\u4ee5\u662f\u5341\u8fdb\u5236\u3001\u516b\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u7684\u5e38\u91cf\u3002 \u524d\u7f00\u6307\u5b9a\u57fa\u6570\uff1a0x \u6216 0X \u8868\u793a\u5341\u516d\u8fdb\u5236\uff0c0 \u8868\u793a\u516b\u8fdb\u5236\uff0c\u4e0d\u5e26\u524d\u7f00\u5219\u9ed8\u8ba4\u8868\u793a\u5341\u8fdb\u5236\u3002 \u6574\u6570\u5e38\u91cf\u4e5f\u53ef\u4ee5\u5e26\u4e00\u4e2a\u540e\u7f00\uff0c\u540e\u7f00\u662f U \u548c L \u7684\u7ec4\u5408\uff0cU \u8868\u793a\u65e0\u7b26\u53f7\u6574\u6570\uff08unsigned\uff09\uff0cL \u8868\u793a\u957f\u6574\u6570\uff08long\uff09\u3002\u540e\u7f00\u53ef\u4ee5\u662f\u5927\u5199\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c0f\u5199\uff0cU \u548c L \u7684\u987a\u5e8f\u4efb\u610f\u3002 212 // \u5408\u6cd5\u7684 215u // \u5408\u6cd5\u7684 0xFeeL // \u5408\u6cd5\u7684 07 8 // \u975e\u6cd5\u7684\uff1a8 \u4e0d\u662f\u516b\u8fdb\u5236\u7684\u6570\u5b57 032U U // \u975e\u6cd5\u7684\uff1a\u4e0d\u80fd\u91cd\u590d\u540e\u7f00 \u4ee5\u4e0b\u662f\u5404\u79cd\u7c7b\u578b\u7684\u6574\u6570\u5e38\u91cf\u7684\u5b9e\u4f8b\uff1a 85 // \u5341\u8fdb\u5236 0213 // \u516b\u8fdb\u5236 0x4b // \u5341\u516d\u8fdb\u5236 30 // \u6574\u6570 30u // \u65e0\u7b26\u53f7\u6574\u6570 30l // \u957f\u6574\u6570 30ul // \u65e0\u7b26\u53f7\u957f\u6574\u6570","title":"\u6574\u6570\u5e38\u91cf"},{"location":"cpp/%E5%B8%B8%E9%87%8F/#_2","text":"\u6d6e\u70b9\u5e38\u91cf\u7531\u6574\u6570\u90e8\u5206\u3001\u5c0f\u6570\u70b9\u3001\u5c0f\u6570\u90e8\u5206\u548c\u6307\u6570\u90e8\u5206\u7ec4\u6210\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5c0f\u6570\u5f62\u5f0f\u6216\u8005\u6307\u6570\u5f62\u5f0f\u6765\u8868\u793a\u6d6e\u70b9\u5e38\u91cf\u3002 \u5f53\u4f7f\u7528\u5c0f\u6570\u5f62\u5f0f\u8868\u793a\u65f6\uff0c\u5fc5\u987b\u5305\u542b\u6574\u6570\u90e8\u5206\u3001\u5c0f\u6570\u90e8\u5206\uff0c\u6216\u540c\u65f6\u5305\u542b\u4e24\u8005\u3002 \u5f53\u4f7f\u7528\u6307\u6570\u5f62\u5f0f\u8868\u793a\u65f6\uff0c \u5fc5\u987b\u5305\u542b\u5c0f\u6570\u70b9\u3001\u6307\u6570\uff0c\u6216\u540c\u65f6\u5305\u542b\u4e24\u8005\u3002\u5e26\u7b26\u53f7\u7684\u6307\u6570\u662f\u7528 e \u6216 E \u5f15\u5165\u7684\u3002 3.14159 // \u5408\u6cd5\u7684 314159E-5L // \u5408\u6cd5\u7684 510 E // \u975e\u6cd5\u7684\uff1a\u4e0d\u5b8c\u6574\u7684\u6307\u6570 210 e // \u975e\u6cd5\u7684\uff1a\u6ca1\u6709\u5c0f\u6570\u6216\u6307\u6570 . e55 // \u975e\u6cd5\u7684\uff1a\u7f3a\u5c11\u6574\u6570\u6216\u5206\u6570","title":"\u6d6e\u70b9\u5e38\u91cf"},{"location":"cpp/%E5%B8%B8%E9%87%8F/#_3","text":"\u5e03\u5c14\u5e38\u91cf\u5171\u6709\u4e24\u4e2a\uff0c\u5b83\u4eec\u90fd\u662f\u6807\u51c6\u7684 C++ \u5173\u952e\u5b57\uff1a true \u503c\u4ee3\u8868\u771f\u3002 false \u503c\u4ee3\u8868\u5047\u3002 \u6211\u4eec\u4e0d\u5e94\u628a true \u7684\u503c\u770b\u6210 1\uff0c\u628a false \u7684\u503c\u770b\u6210 0\u3002","title":"\u5e03\u5c14\u5e38\u91cf"},{"location":"cpp/%E5%B8%B8%E9%87%8F/#_4","text":"\u5b57\u7b26\u5e38\u91cf\u662f\u62ec\u5728\u5355\u5f15\u53f7\u4e2d\u3002 \u5982\u679c\u5e38\u91cf\u4ee5 L\uff08\u4ec5\u5f53\u5927\u5199\u65f6\uff09\u5f00\u5934\uff0c\u5219\u8868\u793a\u5b83\u662f\u4e00\u4e2a\u5bbd\u5b57\u7b26\u5e38\u91cf\uff08\u4f8b\u5982 L'x'\uff09\uff0c\u6b64\u65f6\u5b83\u5fc5\u987b\u5b58\u50a8\u5728 wchar_t \u7c7b\u578b\u7684\u53d8\u91cf\u4e2d\u3002\u5426\u5219\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u7a84\u5b57\u7b26\u5e38\u91cf\uff08\u4f8b\u5982 'x'\uff09\uff0c\u6b64\u65f6\u5b83\u53ef\u4ee5\u5b58\u50a8\u5728 char \u7c7b\u578b\u7684\u7b80\u5355\u53d8\u91cf\u4e2d\u3002 \u5b57\u7b26\u5e38\u91cf\u53ef\u4ee5\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5b57\u7b26\uff08\u4f8b\u5982 'x'\uff09\u3001\u4e00\u4e2a\u8f6c\u4e49\u5e8f\u5217\uff08\u4f8b\u5982 '\\t'\uff09\uff0c\u6216\u4e00\u4e2a\u901a\u7528\u7684\u5b57\u7b26\uff08\u4f8b\u5982 '\\u02C0'\uff09\u3002 \u5728 C++ \u4e2d\uff0c\u6709\u4e00\u4e9b\u7279\u5b9a\u7684\u5b57\u7b26\uff0c\u5f53\u5b83\u4eec\u524d\u9762\u6709\u53cd\u659c\u6760\u65f6\uff0c\u5b83\u4eec\u5c31\u5177\u6709\u7279\u6b8a\u7684\u542b\u4e49\uff0c\u88ab\u7528\u6765\u8868\u793a\u5982\u6362\u884c\u7b26\uff08\\n\uff09\u6216\u5236\u8868\u7b26\uff08\\t\uff09\u7b49\u3002","title":"\u5b57\u7b26\u5e38\u91cf"},{"location":"cpp/%E5%B8%B8%E9%87%8F/#_5","text":"\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6216\u5e38\u91cf\u662f\u62ec\u5728\u53cc\u5f15\u53f7 \"\" \u4e2d\u7684\u3002\u4e00\u4e2a\u5b57\u7b26\u4e32\u5305\u542b\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u5e38\u91cf\u7684\u5b57\u7b26\uff1a\u666e\u901a\u7684\u5b57\u7b26\u3001\u8f6c\u4e49\u5e8f\u5217\u548c\u901a\u7528\u7684\u5b57\u7b26\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u7a7a\u683c\u505a\u5206\u9694\u7b26\uff0c\u628a\u4e00\u4e2a\u5f88\u957f\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u8fdb\u884c\u5206\u884c\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u663e\u793a\u4e86\u4e00\u4e9b\u5b57\u7b26\u4e32\u5e38\u91cf\u3002\u4e0b\u9762\u8fd9\u4e09\u79cd\u5f62\u5f0f\u6240\u663e\u793a\u7684\u5b57\u7b26\u4e32\u662f\u76f8\u540c\u7684\u3002 \"hello, dear\" \"hello, \\ dear \" \"hello, \" \"d\" \"ear\"","title":"\u5b57\u7b26\u4e32\u5e38\u91cf"},{"location":"cpp/%E5%B8%B8%E9%87%8F/#_6","text":"\u4f7f\u7528 #define \u9884\u5904\u7406\u5668 \u4f7f\u7528 const \u5173\u952e\u5b57","title":"\u5b9a\u4e49\u5e38\u91cf"},{"location":"cpp/%E5%B8%B8%E9%87%8F/#define","text":"\u4e0b\u9762\u662f\u4f7f\u7528 #define **\u9884\u5904\u7406\u5668**\u5b9a\u4e49\u5e38\u91cf\u7684\u5f62\u5f0f\uff1a #define identifier value #include <iostream> using namespace std ; #define LENGTH 10 #define WIDTH 5 #define NEWLINE '\\n' int main () { int area ; area = LENGTH * WIDTH ; cout << area ; cout << NEWLINE ; return 0 ; }","title":"#define \u9884\u5904\u7406\u5668"},{"location":"cpp/%E5%B8%B8%E9%87%8F/#const","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 const \u524d\u7f00\u58f0\u660e\u6307\u5b9a\u7c7b\u578b\u7684\u5e38\u91cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a const type variable = value ; #include <iostream> using namespace std ; int main () { const int LENGTH = 10 ; const int WIDTH = 5 ; const char NEWLINE = '\\n' ; int area ; area = LENGTH * WIDTH ; cout << area ; cout << NEWLINE ; return 0 ; } \u8bf7\u6ce8\u610f\uff0c\u628a\u5e38\u91cf\u5b9a\u4e49\u4e3a\u5927\u5199\u5b57\u6bcd\u5f62\u5f0f\uff0c\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7f16\u7a0b\u5b9e\u8df5\u3002","title":"const \u5173\u952e\u5b57"},{"location":"cpp/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/","text":"\u5f02\u5e38\u662f\u7a0b\u5e8f\u5728\u6267\u884c\u671f\u95f4\u4ea7\u751f\u7684\u95ee\u9898\u3002C++ \u5f02\u5e38\u662f\u6307\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53d1\u751f\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u6bd4\u5982\u5c1d\u8bd5\u9664\u4ee5\u96f6\u7684\u64cd\u4f5c\u3002 \u5f02\u5e38\u63d0\u4f9b\u4e86\u4e00\u79cd\u8f6c\u79fb\u7a0b\u5e8f\u63a7\u5236\u6743\u7684\u65b9\u5f0f\u3002C++ \u5f02\u5e38\u5904\u7406\u6d89\u53ca\u5230\u4e09\u4e2a\u5173\u952e\u5b57\uff1atry\u3001catch\u3001throw\u3002 throw: \u5f53\u95ee\u9898\u51fa\u73b0\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528 throw \u5173\u952e\u5b57\u6765\u5b8c\u6210\u7684\u3002 catch: \u5728\u60a8\u60f3\u8981\u5904\u7406\u95ee\u9898\u7684\u5730\u65b9\uff0c\u901a\u8fc7\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u5f02\u5e38\u3002catch \u5173\u952e\u5b57\u7528\u4e8e\u6355\u83b7\u5f02\u5e38\u3002 try: try \u5757\u4e2d\u7684\u4ee3\u7801\u6807\u8bc6\u5c06\u88ab\u6fc0\u6d3b\u7684\u7279\u5b9a\u5f02\u5e38\u3002\u5b83\u540e\u9762\u901a\u5e38\u8ddf\u7740\u4e00\u4e2a\u6216\u591a\u4e2a catch \u5757\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u5757\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0c\u6355\u83b7\u5f02\u5e38\u7684\u65b9\u6cd5\u4f1a\u4f7f\u7528 try \u548c catch \u5173\u952e\u5b57\u3002try \u5757\u4e2d\u653e\u7f6e\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u4ee3\u7801\uff0ctry \u5757\u4e2d\u7684\u4ee3\u7801\u88ab\u79f0\u4e3a\u4fdd\u62a4\u4ee3\u7801\u3002\u4f7f\u7528 try/catch \u8bed\u53e5\u7684\u8bed\u6cd5\u5982\u4e0b\u6240\u793a\uff1a try { // \u4fdd\u62a4\u4ee3\u7801 } catch ( ExceptionName e1 ) { // catch \u5757 } catch ( ExceptionName e2 ) { // catch \u5757 } catch ( ExceptionName eN ) { // catch \u5757 } \u5982\u679c try \u5757\u5728\u4e0d\u540c\u7684\u60c5\u5883\u4e0b\u4f1a\u629b\u51fa\u4e0d\u540c\u7684\u5f02\u5e38\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u4ee5\u5c1d\u8bd5\u7f57\u5217\u591a\u4e2a catch \u8bed\u53e5\uff0c\u7528\u4e8e\u6355\u83b7\u4e0d\u540c\u7c7b\u578b\u7684\u5f02\u5e38\u3002 \u629b\u51fa\u5f02\u5e38 \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528 throw \u8bed\u53e5\u5728\u4ee3\u7801\u5757\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u629b\u51fa\u5f02\u5e38\u3002throw \u8bed\u53e5\u7684\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u629b\u51fa\u7684\u5f02\u5e38\u7684\u7c7b\u578b\u3002 \u4ee5\u4e0b\u662f\u5c1d\u8bd5\u9664\u4ee5\u96f6\u65f6\u629b\u51fa\u5f02\u5e38\u7684\u5b9e\u4f8b\uff1a double division ( int a , int b ) { if ( b == 0 ) { throw \"Division by zero condition!\" ; } return ( a / b ); } \u6355\u83b7\u5f02\u5e38 \u00b6 catch \u5757\u8ddf\u5728 try \u5757\u540e\u9762\uff0c\u7528\u4e8e\u6355\u83b7\u5f02\u5e38\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u60f3\u8981\u6355\u6349\u7684\u5f02\u5e38\u7c7b\u578b\uff0c\u8fd9\u662f\u7531 catch \u5173\u952e\u5b57\u540e\u7684\u62ec\u53f7\u5185\u7684\u5f02\u5e38\u58f0\u660e\u51b3\u5b9a\u7684\u3002 try { // \u4fdd\u62a4\u4ee3\u7801 } catch ( ExceptionName e ) { // \u5904\u7406 ExceptionName \u5f02\u5e38\u7684\u4ee3\u7801 } \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u6355\u83b7\u4e00\u4e2a\u7c7b\u578b\u4e3a ExceptionName \u7684\u5f02\u5e38\u3002\u5982\u679c\u60a8\u60f3\u8ba9 catch \u5757\u80fd\u591f\u5904\u7406 try \u5757\u629b\u51fa\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u5219\u5fc5\u987b\u5728\u5f02\u5e38\u58f0\u660e\u7684\u62ec\u53f7\u5185\u4f7f\u7528\u7701\u7565\u53f7 ...\uff0c\u5982\u4e0b\u6240\u793a\uff1a try { // \u4fdd\u62a4\u4ee3\u7801 } catch (...) { // \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801 } \u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u629b\u51fa\u4e00\u4e2a\u9664\u4ee5\u96f6\u7684\u5f02\u5e38\uff0c\u5e76\u5728 catch \u5757\u4e2d\u6355\u83b7\u8be5\u5f02\u5e38\u3002 #include <iostream> using namespace std ; double division ( int a , int b ) { if ( b == 0 ) { throw \"Division by zero condition!\" ; } return ( a / b ); } int main () { int x = 50 ; int y = 0 ; double z = 0 ; try { z = division ( x , y ); cout << z << endl ; } catch ( const char * msg ) { cerr << msg << endl ; } return 0 ; } \u7531\u4e8e\u6211\u4eec\u629b\u51fa\u4e86\u4e00\u4e2a\u7c7b\u578b\u4e3a const char* \u7684\u5f02\u5e38\uff0c\u56e0\u6b64\uff0c\u5f53\u6355\u83b7\u8be5\u5f02\u5e38\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u5728 catch \u5757\u4e2d\u4f7f\u7528 const char*\u3002\u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a Division by zero condition ! C++ \u6807\u51c6\u7684\u5f02\u5e38 \u00b6 C++ \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u6807\u51c6\u7684\u5f02\u5e38\uff0c\u5b9a\u4e49\u5728 \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6807\u51c6\u7684\u5f02\u5e38\u3002\u5b83\u4eec\u662f\u4ee5\u7236\u5b50\u7c7b\u5c42\u6b21\u7ed3\u6784\u7ec4\u7ec7\u8d77\u6765\u7684\uff0c \u5982\u4e0b\u6240\u793a\uff1a \u4e0b\u8868\u662f\u5bf9\u4e0a\u9762\u5c42\u6b21\u7ed3\u6784\u4e2d\u51fa\u73b0\u7684\u6bcf\u4e2a\u5f02\u5e38\u7684\u8bf4\u660e\uff1a \u5b9a\u4e49\u65b0\u7684\u5f02\u5e38 \u00b6 \u60a8\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u548c\u91cd\u8f7d exception \u7c7b\u6765\u5b9a\u4e49\u65b0\u7684\u5f02\u5e38\u3002\u4e0b\u9762\u7684\u5b9e\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 std::exception \u7c7b\u6765\u5b9e\u73b0\u81ea\u5df1\u7684\u5f02\u5e38\uff1a #include <iostream> #include <exception> using namespace std ; struct MyException : public exception { const char * what () const throw () { return \"C++ Exception\" ; } }; int main () { try { throw MyException (); } catch ( MyException & e ) { std :: cout << \"MyException caught\" << std :: endl ; std :: cout << e . what () << std :: endl ; } catch ( std :: exception & e ) { //\u5176\u4ed6\u7684\u9519\u8bef } } \u8fd9\u5c06\u4ea7\u751f\u4ee5\u4e0b\u7ed3\u679c\uff1a MyException caught C ++ Exception \u5728\u8fd9\u91cc\uff0cwhat() \u662f\u5f02\u5e38\u7c7b\u63d0\u4f9b\u7684\u4e00\u4e2a\u516c\u5171\u65b9\u6cd5\uff0c\u5b83\u5df2\u88ab\u6240\u6709\u5b50\u5f02\u5e38\u7c7b\u91cd\u8f7d\u3002\u8fd9\u5c06\u8fd4\u56de\u5f02\u5e38\u4ea7\u751f\u7684\u539f\u56e0\u3002","title":"\u5f02\u5e38\u5904\u7406"},{"location":"cpp/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#_1","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 throw \u8bed\u53e5\u5728\u4ee3\u7801\u5757\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u629b\u51fa\u5f02\u5e38\u3002throw \u8bed\u53e5\u7684\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u629b\u51fa\u7684\u5f02\u5e38\u7684\u7c7b\u578b\u3002 \u4ee5\u4e0b\u662f\u5c1d\u8bd5\u9664\u4ee5\u96f6\u65f6\u629b\u51fa\u5f02\u5e38\u7684\u5b9e\u4f8b\uff1a double division ( int a , int b ) { if ( b == 0 ) { throw \"Division by zero condition!\" ; } return ( a / b ); }","title":"\u629b\u51fa\u5f02\u5e38"},{"location":"cpp/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#_2","text":"catch \u5757\u8ddf\u5728 try \u5757\u540e\u9762\uff0c\u7528\u4e8e\u6355\u83b7\u5f02\u5e38\u3002\u60a8\u53ef\u4ee5\u6307\u5b9a\u60f3\u8981\u6355\u6349\u7684\u5f02\u5e38\u7c7b\u578b\uff0c\u8fd9\u662f\u7531 catch \u5173\u952e\u5b57\u540e\u7684\u62ec\u53f7\u5185\u7684\u5f02\u5e38\u58f0\u660e\u51b3\u5b9a\u7684\u3002 try { // \u4fdd\u62a4\u4ee3\u7801 } catch ( ExceptionName e ) { // \u5904\u7406 ExceptionName \u5f02\u5e38\u7684\u4ee3\u7801 } \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u6355\u83b7\u4e00\u4e2a\u7c7b\u578b\u4e3a ExceptionName \u7684\u5f02\u5e38\u3002\u5982\u679c\u60a8\u60f3\u8ba9 catch \u5757\u80fd\u591f\u5904\u7406 try \u5757\u629b\u51fa\u7684\u4efb\u4f55\u7c7b\u578b\u7684\u5f02\u5e38\uff0c\u5219\u5fc5\u987b\u5728\u5f02\u5e38\u58f0\u660e\u7684\u62ec\u53f7\u5185\u4f7f\u7528\u7701\u7565\u53f7 ...\uff0c\u5982\u4e0b\u6240\u793a\uff1a try { // \u4fdd\u62a4\u4ee3\u7801 } catch (...) { // \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801 } \u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u629b\u51fa\u4e00\u4e2a\u9664\u4ee5\u96f6\u7684\u5f02\u5e38\uff0c\u5e76\u5728 catch \u5757\u4e2d\u6355\u83b7\u8be5\u5f02\u5e38\u3002 #include <iostream> using namespace std ; double division ( int a , int b ) { if ( b == 0 ) { throw \"Division by zero condition!\" ; } return ( a / b ); } int main () { int x = 50 ; int y = 0 ; double z = 0 ; try { z = division ( x , y ); cout << z << endl ; } catch ( const char * msg ) { cerr << msg << endl ; } return 0 ; } \u7531\u4e8e\u6211\u4eec\u629b\u51fa\u4e86\u4e00\u4e2a\u7c7b\u578b\u4e3a const char* \u7684\u5f02\u5e38\uff0c\u56e0\u6b64\uff0c\u5f53\u6355\u83b7\u8be5\u5f02\u5e38\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u5728 catch \u5757\u4e2d\u4f7f\u7528 const char*\u3002\u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a Division by zero condition !","title":"\u6355\u83b7\u5f02\u5e38"},{"location":"cpp/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#c","text":"C++ \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u6807\u51c6\u7684\u5f02\u5e38\uff0c\u5b9a\u4e49\u5728 \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u6807\u51c6\u7684\u5f02\u5e38\u3002\u5b83\u4eec\u662f\u4ee5\u7236\u5b50\u7c7b\u5c42\u6b21\u7ed3\u6784\u7ec4\u7ec7\u8d77\u6765\u7684\uff0c \u5982\u4e0b\u6240\u793a\uff1a \u4e0b\u8868\u662f\u5bf9\u4e0a\u9762\u5c42\u6b21\u7ed3\u6784\u4e2d\u51fa\u73b0\u7684\u6bcf\u4e2a\u5f02\u5e38\u7684\u8bf4\u660e\uff1a","title":"C++ \u6807\u51c6\u7684\u5f02\u5e38"},{"location":"cpp/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/#_3","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u548c\u91cd\u8f7d exception \u7c7b\u6765\u5b9a\u4e49\u65b0\u7684\u5f02\u5e38\u3002\u4e0b\u9762\u7684\u5b9e\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 std::exception \u7c7b\u6765\u5b9e\u73b0\u81ea\u5df1\u7684\u5f02\u5e38\uff1a #include <iostream> #include <exception> using namespace std ; struct MyException : public exception { const char * what () const throw () { return \"C++ Exception\" ; } }; int main () { try { throw MyException (); } catch ( MyException & e ) { std :: cout << \"MyException caught\" << std :: endl ; std :: cout << e . what () << std :: endl ; } catch ( std :: exception & e ) { //\u5176\u4ed6\u7684\u9519\u8bef } } \u8fd9\u5c06\u4ea7\u751f\u4ee5\u4e0b\u7ed3\u679c\uff1a MyException caught C ++ Exception \u5728\u8fd9\u91cc\uff0cwhat() \u662f\u5f02\u5e38\u7c7b\u63d0\u4f9b\u7684\u4e00\u4e2a\u516c\u5171\u65b9\u6cd5\uff0c\u5b83\u5df2\u88ab\u6240\u6709\u5b50\u5f02\u5e38\u7c7b\u91cd\u8f7d\u3002\u8fd9\u5c06\u8fd4\u56de\u5f02\u5e38\u4ea7\u751f\u7684\u539f\u56e0\u3002","title":"\u5b9a\u4e49\u65b0\u7684\u5f02\u5e38"},{"location":"cpp/%E5%BC%95%E7%94%A8/","text":"\u5f15\u7528\u53d8\u91cf\u662f\u4e00\u4e2a\u522b\u540d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u662f\u67d0\u4e2a\u5df2\u5b58\u5728\u53d8\u91cf\u7684\u53e6\u4e00\u4e2a\u540d\u5b57\u3002 \u4e00\u65e6\u628a\u5f15\u7528\u521d\u59cb\u5316\u4e3a\u67d0\u4e2a\u53d8\u91cf\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u5f15\u7528\u540d\u79f0\u6216\u53d8\u91cf\u540d\u79f0\u6765\u6307\u5411\u53d8\u91cf C++ \u5f15\u7528 vs \u6307\u9488 \u00b6 \u5f15\u7528\u5f88\u5bb9\u6613\u4e0e\u6307\u9488\u6df7\u6dc6\uff0c\u5b83\u4eec\u4e4b\u95f4\u6709\u4e09\u4e2a\u4e3b\u8981\u7684\u4e0d\u540c\uff1a \u4e0d\u5b58\u5728\u7a7a\u5f15\u7528\u3002\u5f15\u7528\u5fc5\u987b\u8fde\u63a5\u5230\u4e00\u5757\u5408\u6cd5\u7684\u5185\u5b58\u3002 \u4e00\u65e6\u5f15\u7528\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5c31\u4e0d\u80fd\u88ab\u6307\u5411\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u6307\u9488\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u6307\u5411\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002 \u5f15\u7528\u5fc5\u987b\u5728\u521b\u5efa\u65f6\u88ab\u521d\u59cb\u5316\u3002\u6307\u9488\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u95f4\u88ab\u521d\u59cb\u5316\u3002 C++ \u4e2d\u521b\u5efa\u5f15\u7528 \u00b6 \u8bd5\u60f3\u53d8\u91cf\u540d\u79f0\u662f\u53d8\u91cf\u9644\u5c5e\u5728\u5185\u5b58\u4f4d\u7f6e\u4e2d\u7684\u6807\u7b7e\uff0c\u60a8\u53ef\u4ee5\u628a\u5f15\u7528\u5f53\u6210\u662f\u53d8\u91cf\u9644\u5c5e\u5728\u5185\u5b58\u4f4d\u7f6e\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u6807\u7b7e\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u539f\u59cb\u53d8\u91cf\u540d\u79f0\u6216\u5f15\u7528\u6765\u8bbf\u95ee\u53d8\u91cf\u7684\u5185\u5bb9\u3002\u4f8b\u5982\uff1a int i = 17 ; \u6211\u4eec\u53ef\u4ee5\u4e3a i \u58f0\u660e\u5f15\u7528\u53d8\u91cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a int & r = i ; double & s = d ; \u5728\u8fd9\u4e9b\u58f0\u660e\u4e2d\uff0c& \u8bfb\u4f5c\u5f15\u7528\u3002\u56e0\u6b64\uff0c\u7b2c\u4e00\u4e2a\u58f0\u660e\u53ef\u4ee5\u8bfb\u4f5c \"r \u662f\u4e00\u4e2a\u521d\u59cb\u5316\u4e3a i \u7684\u6574\u578b\u5f15\u7528\"\uff0c\u7b2c\u4e8c\u4e2a\u58f0\u660e\u53ef\u4ee5\u8bfb\u4f5c \"s \u662f\u4e00\u4e2a\u521d\u59cb\u5316\u4e3a d \u7684 double \u578b\u5f15\u7528\"\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e86 int \u548c double \u5f15\u7528\uff1a #include <iostream> using namespace std ; int main () { // \u58f0\u660e\u7b80\u5355\u7684\u53d8\u91cf int i ; double d ; // \u58f0\u660e\u5f15\u7528\u53d8\u91cf int & r = i ; double & s = d ; i = 5 ; cout << \"Value of i : \" << i << endl ; cout << \"Value of i reference : \" << r << endl ; d = 11.7 ; cout << \"Value of d : \" << d << endl ; cout << \"Value of d reference : \" << s << endl ; return 0 ; } \u5f15\u7528\u901a\u5e38\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u5217\u8868\u548c\u51fd\u6570\u8fd4\u56de\u503c\u3002 \u628a\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570 \u00b6 \u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u5982\u4f55\u4f7f\u7528\u6307\u9488\u6765\u5b9e\u73b0\u5f15\u7528\u8c03\u7528\u51fd\u6570\u3002\u4e0b\u9762\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e86\u5f15\u7528\u6765\u5b9e\u73b0\u5f15\u7528\u8c03\u7528\u51fd\u6570\u3002 #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e void swap ( int & x , int & y ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; cout << \"\u4ea4\u6362\u524d\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u524d\uff0cb \u7684\u503c\uff1a\" << b << endl ; /* \u8c03\u7528\u51fd\u6570\u6765\u4ea4\u6362\u503c */ swap ( a , b ); cout << \"\u4ea4\u6362\u540e\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u540e\uff0cb \u7684\u503c\uff1a\" << b << endl ; return 0 ; } // \u51fd\u6570\u5b9a\u4e49 void swap ( int & x , int & y ) { int temp ; temp = x ; /* \u4fdd\u5b58\u5730\u5740 x \u7684\u503c */ x = y ; /* \u628a y \u8d4b\u503c\u7ed9 x */ y = temp ; /* \u628a x \u8d4b\u503c\u7ed9 y */ return ; } \u628a\u5f15\u7528\u4f5c\u4e3a\u8fd4\u56de\u503c \u00b6 \u901a\u8fc7\u4f7f\u7528\u5f15\u7528\u6765\u66ff\u4ee3\u6307\u9488\uff0c\u4f1a\u4f7f C++ \u7a0b\u5e8f\u66f4\u5bb9\u6613\u9605\u8bfb\u548c\u7ef4\u62a4\u3002C++ \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u65b9\u5f0f\u4e0e\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\u7c7b\u4f3c\u3002 \u5f53\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\u65f6\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd4\u56de\u503c\u7684\u9690\u5f0f\u6307\u9488\u3002\u8fd9\u6837\uff0c\u51fd\u6570\u5c31\u53ef\u4ee5\u653e\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u5de6\u8fb9\u3002 \u4f8b\u5982\uff0c\u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; double vals [] = { 10.1 , 12.6 , 33.1 , 24.1 , 50.0 }; double & setValues ( int i ) { return vals [ i ]; // \u8fd4\u56de\u7b2c i \u4e2a\u5143\u7d20\u7684\u5f15\u7528 } // \u8981\u8c03\u7528\u4e0a\u9762\u5b9a\u4e49\u51fd\u6570\u7684\u4e3b\u51fd\u6570 int main () { cout << \"\u6539\u53d8\u524d\u7684\u503c\" << endl ; for ( int i = 0 ; i < 5 ; i ++ ) { cout << \"vals[\" << i << \"] = \" ; cout << vals [ i ] << endl ; } setValues ( 1 ) = 20.23 ; // \u6539\u53d8\u7b2c 2 \u4e2a\u5143\u7d20 setValues ( 3 ) = 70.8 ; // \u6539\u53d8\u7b2c 4 \u4e2a\u5143\u7d20 cout << \"\u6539\u53d8\u540e\u7684\u503c\" << endl ; for ( int i = 0 ; i < 5 ; i ++ ) { cout << \"vals[\" << i << \"] = \" ; cout << vals [ i ] << endl ; } return 0 ; } \u5f53\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\u65f6\uff0c\u8981\u6ce8\u610f\u88ab\u5f15\u7528\u7684\u5bf9\u8c61\u4e0d\u80fd\u8d85\u51fa\u4f5c\u7528\u57df\u3002 \u6240\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u4f46\u662f\uff0c\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u9759\u6001\u53d8\u91cf\u7684\u5f15\u7528\u3002 int & func () { int q ; //! return q; // \u5728\u7f16\u8bd1\u65f6\u53d1\u751f\u9519\u8bef static int x ; return x ; // \u5b89\u5168\uff0cx \u5728\u51fd\u6570\u4f5c\u7528\u57df\u5916\u4f9d\u7136\u662f\u6709\u6548\u7684 }","title":"\u5f15\u7528"},{"location":"cpp/%E5%BC%95%E7%94%A8/#c-vs","text":"\u5f15\u7528\u5f88\u5bb9\u6613\u4e0e\u6307\u9488\u6df7\u6dc6\uff0c\u5b83\u4eec\u4e4b\u95f4\u6709\u4e09\u4e2a\u4e3b\u8981\u7684\u4e0d\u540c\uff1a \u4e0d\u5b58\u5728\u7a7a\u5f15\u7528\u3002\u5f15\u7528\u5fc5\u987b\u8fde\u63a5\u5230\u4e00\u5757\u5408\u6cd5\u7684\u5185\u5b58\u3002 \u4e00\u65e6\u5f15\u7528\u88ab\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5c31\u4e0d\u80fd\u88ab\u6307\u5411\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002\u6307\u9488\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u6307\u5411\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3002 \u5f15\u7528\u5fc5\u987b\u5728\u521b\u5efa\u65f6\u88ab\u521d\u59cb\u5316\u3002\u6307\u9488\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u95f4\u88ab\u521d\u59cb\u5316\u3002","title":"C++ \u5f15\u7528 vs \u6307\u9488"},{"location":"cpp/%E5%BC%95%E7%94%A8/#c","text":"\u8bd5\u60f3\u53d8\u91cf\u540d\u79f0\u662f\u53d8\u91cf\u9644\u5c5e\u5728\u5185\u5b58\u4f4d\u7f6e\u4e2d\u7684\u6807\u7b7e\uff0c\u60a8\u53ef\u4ee5\u628a\u5f15\u7528\u5f53\u6210\u662f\u53d8\u91cf\u9644\u5c5e\u5728\u5185\u5b58\u4f4d\u7f6e\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u6807\u7b7e\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u539f\u59cb\u53d8\u91cf\u540d\u79f0\u6216\u5f15\u7528\u6765\u8bbf\u95ee\u53d8\u91cf\u7684\u5185\u5bb9\u3002\u4f8b\u5982\uff1a int i = 17 ; \u6211\u4eec\u53ef\u4ee5\u4e3a i \u58f0\u660e\u5f15\u7528\u53d8\u91cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a int & r = i ; double & s = d ; \u5728\u8fd9\u4e9b\u58f0\u660e\u4e2d\uff0c& \u8bfb\u4f5c\u5f15\u7528\u3002\u56e0\u6b64\uff0c\u7b2c\u4e00\u4e2a\u58f0\u660e\u53ef\u4ee5\u8bfb\u4f5c \"r \u662f\u4e00\u4e2a\u521d\u59cb\u5316\u4e3a i \u7684\u6574\u578b\u5f15\u7528\"\uff0c\u7b2c\u4e8c\u4e2a\u58f0\u660e\u53ef\u4ee5\u8bfb\u4f5c \"s \u662f\u4e00\u4e2a\u521d\u59cb\u5316\u4e3a d \u7684 double \u578b\u5f15\u7528\"\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e86 int \u548c double \u5f15\u7528\uff1a #include <iostream> using namespace std ; int main () { // \u58f0\u660e\u7b80\u5355\u7684\u53d8\u91cf int i ; double d ; // \u58f0\u660e\u5f15\u7528\u53d8\u91cf int & r = i ; double & s = d ; i = 5 ; cout << \"Value of i : \" << i << endl ; cout << \"Value of i reference : \" << r << endl ; d = 11.7 ; cout << \"Value of d : \" << d << endl ; cout << \"Value of d reference : \" << s << endl ; return 0 ; } \u5f15\u7528\u901a\u5e38\u7528\u4e8e\u51fd\u6570\u53c2\u6570\u5217\u8868\u548c\u51fd\u6570\u8fd4\u56de\u503c\u3002","title":"C++ \u4e2d\u521b\u5efa\u5f15\u7528"},{"location":"cpp/%E5%BC%95%E7%94%A8/#_1","text":"\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u5982\u4f55\u4f7f\u7528\u6307\u9488\u6765\u5b9e\u73b0\u5f15\u7528\u8c03\u7528\u51fd\u6570\u3002\u4e0b\u9762\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e86\u5f15\u7528\u6765\u5b9e\u73b0\u5f15\u7528\u8c03\u7528\u51fd\u6570\u3002 #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e void swap ( int & x , int & y ); int main () { // \u5c40\u90e8\u53d8\u91cf\u58f0\u660e int a = 100 ; int b = 200 ; cout << \"\u4ea4\u6362\u524d\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u524d\uff0cb \u7684\u503c\uff1a\" << b << endl ; /* \u8c03\u7528\u51fd\u6570\u6765\u4ea4\u6362\u503c */ swap ( a , b ); cout << \"\u4ea4\u6362\u540e\uff0ca \u7684\u503c\uff1a\" << a << endl ; cout << \"\u4ea4\u6362\u540e\uff0cb \u7684\u503c\uff1a\" << b << endl ; return 0 ; } // \u51fd\u6570\u5b9a\u4e49 void swap ( int & x , int & y ) { int temp ; temp = x ; /* \u4fdd\u5b58\u5730\u5740 x \u7684\u503c */ x = y ; /* \u628a y \u8d4b\u503c\u7ed9 x */ y = temp ; /* \u628a x \u8d4b\u503c\u7ed9 y */ return ; }","title":"\u628a\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570"},{"location":"cpp/%E5%BC%95%E7%94%A8/#_2","text":"\u901a\u8fc7\u4f7f\u7528\u5f15\u7528\u6765\u66ff\u4ee3\u6307\u9488\uff0c\u4f1a\u4f7f C++ \u7a0b\u5e8f\u66f4\u5bb9\u6613\u9605\u8bfb\u548c\u7ef4\u62a4\u3002C++ \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u65b9\u5f0f\u4e0e\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\u7c7b\u4f3c\u3002 \u5f53\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\u65f6\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8fd4\u56de\u503c\u7684\u9690\u5f0f\u6307\u9488\u3002\u8fd9\u6837\uff0c\u51fd\u6570\u5c31\u53ef\u4ee5\u653e\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u5de6\u8fb9\u3002 \u4f8b\u5982\uff0c\u8bf7\u770b\u4e0b\u9762\u8fd9\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; double vals [] = { 10.1 , 12.6 , 33.1 , 24.1 , 50.0 }; double & setValues ( int i ) { return vals [ i ]; // \u8fd4\u56de\u7b2c i \u4e2a\u5143\u7d20\u7684\u5f15\u7528 } // \u8981\u8c03\u7528\u4e0a\u9762\u5b9a\u4e49\u51fd\u6570\u7684\u4e3b\u51fd\u6570 int main () { cout << \"\u6539\u53d8\u524d\u7684\u503c\" << endl ; for ( int i = 0 ; i < 5 ; i ++ ) { cout << \"vals[\" << i << \"] = \" ; cout << vals [ i ] << endl ; } setValues ( 1 ) = 20.23 ; // \u6539\u53d8\u7b2c 2 \u4e2a\u5143\u7d20 setValues ( 3 ) = 70.8 ; // \u6539\u53d8\u7b2c 4 \u4e2a\u5143\u7d20 cout << \"\u6539\u53d8\u540e\u7684\u503c\" << endl ; for ( int i = 0 ; i < 5 ; i ++ ) { cout << \"vals[\" << i << \"] = \" ; cout << vals [ i ] << endl ; } return 0 ; } \u5f53\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\u65f6\uff0c\u8981\u6ce8\u610f\u88ab\u5f15\u7528\u7684\u5bf9\u8c61\u4e0d\u80fd\u8d85\u51fa\u4f5c\u7528\u57df\u3002 \u6240\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u4f46\u662f\uff0c\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u5bf9\u9759\u6001\u53d8\u91cf\u7684\u5f15\u7528\u3002 int & func () { int q ; //! return q; // \u5728\u7f16\u8bd1\u65f6\u53d1\u751f\u9519\u8bef static int x ; return x ; // \u5b89\u5168\uff0cx \u5728\u51fd\u6570\u4f5c\u7528\u57df\u5916\u4f9d\u7136\u662f\u6709\u6548\u7684 }","title":"\u628a\u5f15\u7528\u4f5c\u4e3a\u8fd4\u56de\u503c"},{"location":"cpp/%E6%8C%87%E9%92%88/","text":"\u5b66\u4e60 C++ \u7684\u6307\u9488\u65e2\u7b80\u5355\u53c8\u6709\u8da3\u3002\u901a\u8fc7\u6307\u9488\uff0c\u53ef\u4ee5\u7b80\u5316\u4e00\u4e9b C++ \u7f16\u7a0b\u4efb\u52a1\u7684\u6267\u884c\uff0c\u8fd8\u6709\u4e00\u4e9b\u4efb\u52a1\uff0c\u5982\u52a8\u6001\u5185\u5b58\u5206\u914d\uff0c\u6ca1\u6709\u6307\u9488\u662f\u65e0\u6cd5\u6267\u884c\u7684\u3002 \u6240\u4ee5\uff0c\u60f3\u8981\u6210\u4e3a\u4e00\u540d\u4f18\u79c0\u7684 C++ \u7a0b\u5e8f\u5458\uff0c\u5b66\u4e60\u6307\u9488\u662f\u5f88\u6709\u5fc5\u8981\u7684\u3002 \u6b63\u5982\u60a8\u6240\u77e5\u9053\u7684\uff0c\u6bcf\u4e00\u4e2a\u53d8\u91cf\u90fd\u6709\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\uff0c\u6bcf\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u90fd\u5b9a\u4e49\u4e86\u53ef\u4f7f\u7528\u8fde\u5b57\u53f7\uff08&\uff09\u8fd0\u7b97\u7b26\u8bbf\u95ee\u7684\u5730\u5740\uff0c\u5b83\u8868\u793a\u4e86\u5728\u5185\u5b58\u4e2d\u7684\u4e00\u4e2a\u5730\u5740\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff0c\u5b83\u5c06\u8f93\u51fa\u5b9a\u4e49\u7684\u53d8\u91cf\u5730\u5740\uff1a #include <iostream> using namespace std ; int main () { int var1 ; char var2 [ 10 ]; cout << \"var1 \u53d8\u91cf\u7684\u5730\u5740\uff1a \" ; cout << & var1 << endl ; cout << \"var2 \u53d8\u91cf\u7684\u5730\u5740\uff1a \" ; cout << & var2 << endl ; return 0 ; } \u901a\u8fc7\u4e0a\u9762\u7684\u5b9e\u4f8b\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u4ec0\u4e48\u662f\u5185\u5b58\u5730\u5740\u4ee5\u53ca\u5982\u4f55\u8bbf\u95ee\u5b83\u3002\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u770b\u770b\u4ec0\u4e48\u662f\u6307\u9488\u3002 \u4ec0\u4e48\u662f\u6307\u9488\uff1f \u00b6 \u6307\u9488\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u5176\u503c\u4e3a\u53e6\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5373\uff0c\u5185\u5b58\u4f4d\u7f6e\u7684\u76f4\u63a5\u5730\u5740\u3002 \u5c31\u50cf\u5176\u4ed6\u53d8\u91cf\u6216\u5e38\u91cf\u4e00\u6837\uff0c\u60a8\u5fc5\u987b\u5728\u4f7f\u7528\u6307\u9488\u5b58\u50a8\u5176\u4ed6\u53d8\u91cf\u5730\u5740\u4e4b\u524d\uff0c\u5bf9\u5176\u8fdb\u884c\u58f0\u660e\u3002 \u6307\u9488\u53d8\u91cf\u58f0\u660e\u7684\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a type *var-name; type \u662f\u6307\u9488\u7684\u57fa\u7c7b\u578b\uff0c\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684 C++ \u6570\u636e\u7c7b\u578b\uff0cvar-name \u662f\u6307\u9488\u53d8\u91cf\u7684\u540d\u79f0\u3002 \u7528\u6765\u58f0\u660e\u6307\u9488\u7684\u661f\u53f7 * \u4e0e\u4e58\u6cd5\u4e2d\u4f7f\u7528\u7684\u661f\u53f7\u662f\u76f8\u540c\u7684\u3002\u4f46\u662f\uff0c\u5728\u8fd9\u4e2a\u8bed\u53e5\u4e2d\uff0c\u661f\u53f7\u662f\u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u662f\u6307\u9488\u3002\u4ee5\u4e0b\u662f\u6709\u6548\u7684\u6307\u9488\u58f0\u660e\uff1a int * ip ; /* \u4e00\u4e2a\u6574\u578b\u7684\u6307\u9488 */ double * dp ; /* \u4e00\u4e2a double \u578b\u7684\u6307\u9488 */ float * fp ; /* \u4e00\u4e2a\u6d6e\u70b9\u578b\u7684\u6307\u9488 */ char * ch ; /* \u4e00\u4e2a\u5b57\u7b26\u578b\u7684\u6307\u9488 */ \u6240\u6709\u6307\u9488\u7684\u503c\u7684\u5b9e\u9645\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u7ba1\u662f\u6574\u578b\u3001\u6d6e\u70b9\u578b\u3001\u5b57\u7b26\u578b\uff0c\u8fd8\u662f\u5176\u4ed6\u7684\u6570\u636e\u7c7b\u578b\uff0c\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u4e00\u4e2a\u4ee3\u8868\u5185\u5b58\u5730\u5740\u7684\u957f\u7684\u5341\u516d\u8fdb\u5236\u6570\u3002 \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\u4e4b\u95f4\u552f\u4e00\u7684\u4e0d\u540c\u662f\uff0c\u6307\u9488\u6240\u6307\u5411\u7684\u53d8\u91cf\u6216\u5e38\u91cf\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u540c\u3002 #include <iostream> using namespace std ; int main () { int var = 20 ; // \u5b9e\u9645\u53d8\u91cf\u7684\u58f0\u660e int * ip ; // \u6307\u9488\u53d8\u91cf\u7684\u58f0\u660e ip = & var ; // \u5728\u6307\u9488\u53d8\u91cf\u4e2d\u5b58\u50a8 var \u7684\u5730\u5740 cout << \"Value of var variable: \" ; cout << var << endl ; // \u8f93\u51fa\u5728\u6307\u9488\u53d8\u91cf\u4e2d\u5b58\u50a8\u7684\u5730\u5740 cout << \"Address stored in ip variable: \" ; cout << ip << endl ; // \u8bbf\u95ee\u6307\u9488\u4e2d\u5730\u5740\u7684\u503c cout << \"Value of *ip variable: \" ; cout << * ip << endl ; return 0 ; } Null \u6307\u9488 \u00b6 \u5728\u53d8\u91cf\u58f0\u660e\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ca1\u6709\u786e\u5207\u7684\u5730\u5740\u53ef\u4ee5\u8d4b\u503c\uff0c\u4e3a\u6307\u9488\u53d8\u91cf\u8d4b\u4e00\u4e2a NULL \u503c\u662f\u4e00\u4e2a\u826f\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\u3002 \u8d4b\u4e3a NULL \u503c\u7684\u6307\u9488\u88ab\u79f0\u4e3a\u7a7a\u6307\u9488\u3002 NULL \u6307\u9488\u662f\u4e00\u4e2a\u5b9a\u4e49\u5728\u6807\u51c6\u5e93\u4e2d\u7684\u503c\u4e3a\u96f6\u7684\u5e38\u91cf\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; int main () { int * ptr = NULL ; cout << \"ptr \u7684\u503c\u662f \" << ptr ; return 0 ; } \u5728\u5927\u591a\u6570\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u7a0b\u5e8f\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5730\u5740\u4e3a 0 \u7684\u5185\u5b58\uff0c\u56e0\u4e3a\u8be5\u5185\u5b58\u662f\u64cd\u4f5c\u7cfb\u7edf\u4fdd\u7559\u7684\u3002 \u7136\u800c\uff0c\u5185\u5b58\u5730\u5740 0 \u6709\u7279\u522b\u91cd\u8981\u7684\u610f\u4e49\uff0c\u5b83\u8868\u660e\u8be5\u6307\u9488\u4e0d\u6307\u5411\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u4f46\u6309\u7167\u60ef\u4f8b\uff0c\u5982\u679c\u6307\u9488\u5305\u542b\u7a7a\u503c\uff08\u96f6\u503c\uff09\uff0c\u5219\u5047\u5b9a\u5b83\u4e0d\u6307\u5411\u4efb\u4f55\u4e1c\u897f\u3002 \u5982\u9700\u68c0\u67e5\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 if \u8bed\u53e5\uff0c\u5982\u4e0b\u6240\u793a\uff1a if ( ptr ) /* \u5982\u679c ptr \u975e\u7a7a\uff0c\u5219\u5b8c\u6210 */ if ( ! ptr ) /* \u5982\u679c ptr \u4e3a\u7a7a\uff0c\u5219\u5b8c\u6210 */ \u56e0\u6b64\uff0c\u5982\u679c\u6240\u6709\u672a\u4f7f\u7528\u7684\u6307\u9488\u90fd\u88ab\u8d4b\u4e88\u7a7a\u503c\uff0c\u540c\u65f6\u907f\u514d\u4f7f\u7528\u7a7a\u6307\u9488\uff0c\u5c31\u53ef\u4ee5\u9632\u6b62\u8bef\u7528\u4e00\u4e2a\u672a\u521d\u59cb\u5316\u7684\u6307\u9488\u3002 \u5f88\u591a\u65f6\u5019\uff0c\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u5b58\u6709\u4e00\u4e9b\u5783\u573e\u503c\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u96be\u4ee5\u8c03\u8bd5\u3002 \u6307\u9488\u7684\u7b97\u672f\u8fd0\u7b97 \u00b6 \u6307\u9488\u662f\u4e00\u4e2a\u7528\u6570\u503c\u8868\u793a\u7684\u5730\u5740\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5bf9\u6307\u9488\u6267\u884c\u7b97\u672f\u8fd0\u7b97\u3002 \u53ef\u4ee5\u5bf9\u6307\u9488\u8fdb\u884c\u56db\u79cd\u7b97\u672f\u8fd0\u7b97\uff1a++\u3001--\u3001+\u3001-\u3002 \u5047\u8bbe ptr \u662f\u4e00\u4e2a\u6307\u5411\u5730\u5740 1000 \u7684\u6574\u578b\u6307\u9488\uff0c\u662f\u4e00\u4e2a 32 \u4f4d\u7684\u6574\u6570\uff0c\u8ba9\u6211\u4eec\u5bf9\u8be5\u6307\u9488\u6267\u884c\u4e0b\u5217\u7684\u7b97\u672f\u8fd0\u7b97\uff1a ptr ++ \u5728\u6267\u884c\u5b8c\u4e0a\u8ff0\u7684\u8fd0\u7b97\u4e4b\u540e\uff0cptr \u5c06\u6307\u5411\u4f4d\u7f6e 1004\uff0c\u56e0\u4e3a ptr \u6bcf\u589e\u52a0\u4e00\u6b21\uff0c\u5b83\u90fd\u5c06\u6307\u5411\u4e0b\u4e00\u4e2a\u6574\u6570\u4f4d\u7f6e\uff0c\u5373\u5f53\u524d\u4f4d\u7f6e\u5f80\u540e\u79fb 4 \u4e2a\u5b57\u8282\u3002 \u8fd9\u4e2a\u8fd0\u7b97\u4f1a\u5728\u4e0d\u5f71\u54cd\u5185\u5b58\u4f4d\u7f6e\u4e2d\u5b9e\u9645\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u79fb\u52a8\u6307\u9488\u5230\u4e0b\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002 \u5982\u679c ptr \u6307\u5411\u4e00\u4e2a\u5730\u5740\u4e3a 1000 \u7684\u5b57\u7b26\uff0c\u4e0a\u9762\u7684\u8fd0\u7b97\u4f1a\u5bfc\u81f4\u6307\u9488\u6307\u5411\u4f4d\u7f6e 1001\uff0c\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4f4d\u7f6e\u662f\u5728 1001\u3002 \u9012\u589e\u4e00\u4e2a\u6307\u9488 \u00b6 \u6211\u4eec\u559c\u6b22\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6307\u9488\u4ee3\u66ff\u6570\u7ec4\uff0c\u56e0\u4e3a\u53d8\u91cf\u6307\u9488\u53ef\u4ee5\u9012\u589e\uff0c\u800c\u6570\u7ec4\u4e0d\u80fd\u9012\u589e\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\u3002 \u4e0b\u9762\u7684\u7a0b\u5e8f\u9012\u589e\u53d8\u91cf\u6307\u9488\uff0c\u4ee5\u4fbf\u987a\u5e8f\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr ; // \u6307\u9488\u4e2d\u7684\u6570\u7ec4\u5730\u5740 ptr = var ; for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"Address of var[\" << i << \"] = \" ; cout << ptr << endl ; cout << \"Value of var[\" << i << \"] = \" ; cout << * ptr << endl ; // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e ptr ++ ; } return 0 ; } \u9012\u51cf\u4e00\u4e2a\u6307\u9488 \u00b6 \u540c\u6837\u5730\uff0c\u5bf9\u6307\u9488\u8fdb\u884c\u9012\u51cf\u8fd0\u7b97\uff0c\u5373\u628a\u503c\u51cf\u53bb\u5176\u6570\u636e\u7c7b\u578b\u7684\u5b57\u8282\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr ; // \u6307\u9488\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 ptr = & var [ MAX -1 ]; for ( int i = MAX ; i > 0 ; i -- ) { cout << \"Address of var[\" << i << \"] = \" ; cout << ptr << endl ; cout << \"Value of var[\" << i << \"] = \" ; cout << * ptr << endl ; // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e ptr -- ; } return 0 ; } \u6307\u9488\u7684\u6bd4\u8f83 \u00b6 \u6307\u9488\u53ef\u4ee5\u7528\u5173\u7cfb\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982 ==\u3001< \u548c >\u3002 \u5982\u679c p1 \u548c p2 \u6307\u5411\u4e24\u4e2a\u76f8\u5173\u7684\u53d8\u91cf\uff0c\u6bd4\u5982\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e0d\u540c\u5143\u7d20\uff0c\u5219\u53ef\u5bf9 p1 \u548c p2 \u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u3002 \u4e0b\u9762\u7684\u7a0b\u5e8f\u4fee\u6539\u4e86\u4e0a\u9762\u7684\u5b9e\u4f8b\uff0c\u53ea\u8981\u53d8\u91cf\u6307\u9488\u6240\u6307\u5411\u7684\u5730\u5740\u5c0f\u4e8e\u6216\u7b49\u4e8e\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 &var[MAX - 1]\uff0c\u5219\u628a\u53d8\u91cf\u6307\u9488\u8fdb\u884c\u9012\u589e\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr ; // \u6307\u9488\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 ptr = var ; int i = 0 ; while ( ptr <= & var [ MAX - 1 ] ) { cout << \"Address of var[\" << i << \"] = \" ; cout << ptr << endl ; cout << \"Value of var[\" << i << \"] = \" ; cout << * ptr << endl ; // \u6307\u5411\u4e0a\u4e00\u4e2a\u4f4d\u7f6e ptr ++ ; i ++ ; } return 0 ; } \u6307\u9488 vs \u6570\u7ec4 \u00b6 \u6307\u9488\u548c\u6570\u7ec4\u662f\u5bc6\u5207\u76f8\u5173\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6307\u9488\u548c\u6570\u7ec4\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u4e92\u6362\u7684\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u5f00\u5934\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6307\u9488\u7684\u7b97\u672f\u8fd0\u7b97\u6216\u6570\u7ec4\u7d22\u5f15\u6765\u8bbf\u95ee\u6570\u7ec4\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr ; // \u6307\u9488\u4e2d\u7684\u6570\u7ec4\u5730\u5740 ptr = var ; for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"var[\" << i << \"]\u7684\u5185\u5b58\u5730\u5740\u4e3a \" ; cout << ptr << endl ; cout << \"var[\" << i << \"] \u7684\u503c\u4e3a \" ; cout << * ptr << endl ; // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e ptr ++ ; } return 0 ; } \u7136\u800c\uff0c\u6307\u9488\u548c\u6570\u7ec4\u5e76\u4e0d\u662f\u5b8c\u5168\u4e92\u6362\u7684\u3002\u4f8b\u5982\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; for ( int i = 0 ; i < MAX ; i ++ ) { * var = i ; // \u8fd9\u662f\u6b63\u786e\u7684\u8bed\u6cd5 var ++ ; // \u8fd9\u662f\u4e0d\u6b63\u786e\u7684 } return 0 ; } \u628a\u6307\u9488\u8fd0\u7b97\u7b26 * \u5e94\u7528\u5230 var \u4e0a\u662f\u5b8c\u5168\u53ef\u4ee5\u7684\uff0c\u4f46\u4fee\u6539 var \u7684\u503c\u662f\u975e\u6cd5\u7684\u3002\u8fd9\u662f\u56e0\u4e3a var \u662f\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u5f00\u5934\u7684\u5e38\u91cf\uff0c\u4e0d\u80fd\u4f5c\u4e3a\u5de6\u503c\u3002 \u7531\u4e8e\u4e00\u4e2a\u6570\u7ec4\u540d\u5bf9\u5e94\u4e00\u4e2a\u6307\u9488\u5e38\u91cf\uff0c\u53ea\u8981\u4e0d\u6539\u53d8\u6570\u7ec4\u7684\u503c\uff0c\u4ecd\u7136\u53ef\u4ee5\u7528\u6307\u9488\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u6709\u6548\u7684\u8bed\u53e5\uff0c\u628a var[2] \u8d4b\u503c\u4e3a 500\uff1a * ( var + 2 ) = 500 ; \u4e0a\u9762\u7684\u8bed\u53e5\u662f\u6709\u6548\u7684\uff0c\u4e14\u80fd\u6210\u529f\u7f16\u8bd1\uff0c\u56e0\u4e3a var \u672a\u6539\u53d8\u3002 \u6307\u9488\u6570\u7ec4 \u00b6 \u5728\u6211\u4eec\u8bb2\u89e3\u6307\u9488\u6570\u7ec4\u7684\u6982\u5ff5\u4e4b\u524d\uff0c\u5148\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5b83\u7528\u5230\u4e86\u4e00\u4e2a\u7531 3 \u4e2a\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"Value of var[\" << i << \"] = \" ; cout << var [ i ] << endl ; } return 0 ; } \u53ef\u80fd\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u60f3\u8981\u8ba9\u6570\u7ec4\u5b58\u50a8\u6307\u5411 int \u6216 char \u6216\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6307\u5411\u6574\u6570\u7684\u6307\u9488\u6570\u7ec4\u7684\u58f0\u660e\uff1a int * ptr [ MAX ]; \u5728\u8fd9\u91cc\uff0c\u628a ptr \u58f0\u660e\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7531 MAX \u4e2a\u6574\u6570\u6307\u9488\u7ec4\u6210\u3002 \u56e0\u6b64\uff0cptr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90fd\u662f\u4e00\u4e2a\u6307\u5411 int \u503c\u7684\u6307\u9488\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u7528\u5230\u4e86\u4e09\u4e2a\u6574\u6570\uff0c\u5b83\u4eec\u5c06\u5b58\u50a8\u5728\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr [ MAX ]; for ( int i = 0 ; i < MAX ; i ++ ) { ptr [ i ] = & var [ i ]; // \u8d4b\u503c\u4e3a\u6574\u6570\u7684\u5730\u5740 } for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"Value of var[\" << i << \"] = \" ; cout << * ptr [ i ] << endl ; } return 0 ; } \u60a8\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\u6570\u7ec4\u6765\u5b58\u50a8\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5982\u4e0b\uff1a #include <iostream> using namespace std ; const int MAX = 4 ; int main () { const char * names [ MAX ] = { \"Zara Ali\" , \"Hina Ali\" , \"Nuha Ali\" , \"Sara Ali\" , }; for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"Value of names[\" << i << \"] = \" ; cout << names [ i ] << endl ; } return 0 ; } \u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff08\u591a\u7ea7\u95f4\u63a5\u5bfb\u5740\uff09 \u00b6 \u6307\u5411\u6307\u9488\u7684\u6307\u9488\u662f\u4e00\u79cd\u591a\u7ea7\u95f4\u63a5\u5bfb\u5740\u7684\u5f62\u5f0f\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u4e2a\u6307\u9488\u94fe\u3002 \u901a\u5e38\uff0c\u4e00\u4e2a\u6307\u9488\u5305\u542b\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002 \u5f53\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u65f6\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u5305\u542b\u4e86\u7b2c\u4e8c\u4e2a\u6307\u9488\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u5305\u542b\u5b9e\u9645\u503c\u7684\u4f4d\u7f6e\u3002 \u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u53d8\u91cf\u5fc5\u987b\u5982\u4e0b\u58f0\u660e\uff0c\u5373\u5728\u53d8\u91cf\u540d\u524d\u653e\u7f6e\u4e24\u4e2a\u661f\u53f7\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u5411 int \u7c7b\u578b\u6307\u9488\u7684\u6307\u9488\uff1a int ** var ; \u5f53\u4e00\u4e2a\u76ee\u6807\u503c\u88ab\u4e00\u4e2a\u6307\u9488\u95f4\u63a5\u6307\u5411\u5230\u53e6\u4e00\u4e2a\u6307\u9488\u65f6\uff0c\u8bbf\u95ee\u8fd9\u4e2a\u503c\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u661f\u53f7\u8fd0\u7b97\u7b26\uff0c\u5982\u4e0b\u9762\u5b9e\u4f8b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main () { int var ; int * ptr ; int ** pptr ; var = 3000 ; // \u83b7\u53d6 var \u7684\u5730\u5740 ptr = & var ; // \u4f7f\u7528\u8fd0\u7b97\u7b26 & \u83b7\u53d6 ptr \u7684\u5730\u5740 pptr = & ptr ; // \u4f7f\u7528 pptr \u83b7\u53d6\u503c cout << \"var \u503c\u4e3a :\" << var << endl ; cout << \"*ptr \u503c\u4e3a:\" << * ptr << endl ; cout << \"**pptr \u503c\u4e3a:\" << ** pptr << endl ; return 0 ; } \u4f20\u9012\u6307\u9488\u7ed9\u51fd\u6570 \u00b6 C++ \u5141\u8bb8\u60a8\u4f20\u9012\u6307\u9488\u7ed9\u51fd\u6570\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u58f0\u660e\u51fd\u6570\u53c2\u6570\u4e3a\u6307\u9488\u7c7b\u578b\u5373\u53ef\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 long \u578b\u6307\u9488\u7ed9\u51fd\u6570\uff0c\u5e76\u5728\u51fd\u6570\u5185\u6539\u53d8\u8fd9\u4e2a\u503c\uff1a #include <iostream> #include <ctime> using namespace std ; void getSeconds ( unsigned long * par ); int main () { unsigned long sec ; getSeconds ( & sec ); // \u8f93\u51fa\u5b9e\u9645\u503c cout << \"Number of seconds :\" << sec << endl ; return 0 ; } void getSeconds ( unsigned long * par ) { // \u83b7\u53d6\u5f53\u524d\u7684\u79d2\u6570 * par = time ( NULL ); return ; } \u80fd\u63a5\u53d7\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u4e5f\u80fd\u63a5\u53d7\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e double getAverage ( int * arr , int size ); int main () { // \u5e26\u6709 5 \u4e2a\u5143\u7d20\u7684\u6574\u578b\u6570\u7ec4 int balance [ 5 ] = { 1000 , 2 , 3 , 17 , 50 }; double avg ; // \u4f20\u9012\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570 avg = getAverage ( balance , 5 ) ; // \u8f93\u51fa\u8fd4\u56de\u503c cout << \"Average value is: \" << avg << endl ; return 0 ; } double getAverage ( int * arr , int size ) { int i , sum = 0 ; double avg ; for ( i = 0 ; i < size ; ++ i ) { sum += arr [ i ]; } avg = double ( sum ) / size ; return avg ; } \u4ece\u51fd\u6570\u8fd4\u56de\u6307\u9488 \u00b6 C++ \u5141\u8bb8\u60a8\u4ece\u51fd\u6570\u8fd4\u56de\u6307\u9488\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u70b9\uff0c\u60a8\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a\u8fd4\u56de\u6307\u9488\u7684\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a int * myFunction () { // . // . // . } \u53e6\u5916\uff0cC++ \u4e0d\u652f\u6301\u5728\u51fd\u6570\u5916\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\u7684\u5730\u5740\uff0c\u9664\u975e\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\u4e3a static \u53d8\u91cf\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u9762\u7684\u51fd\u6570\uff0c\u5b83\u4f1a\u751f\u6210 10 \u4e2a\u968f\u673a\u6570\uff0c\u5e76\u4f7f\u7528\u8868\u793a\u6307\u9488\u7684\u6570\u7ec4\u540d\uff08\u5373\u7b2c\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u5730\u5740\uff09\u6765\u8fd4\u56de\u5b83\u4eec\uff0c\u5177\u4f53\u5982\u4e0b\uff1a #include <iostream> #include <ctime> #include <cstdlib> using namespace std ; // \u8981\u751f\u6210\u548c\u8fd4\u56de\u968f\u673a\u6570\u7684\u51fd\u6570 int * getRandom ( ) { static int r [ 10 ]; // \u8bbe\u7f6e\u79cd\u5b50 srand ( ( unsigned ) time ( NULL ) ); for ( int i = 0 ; i < 10 ; ++ i ) { r [ i ] = rand (); cout << r [ i ] << endl ; } return r ; } // \u8981\u8c03\u7528\u4e0a\u9762\u5b9a\u4e49\u51fd\u6570\u7684\u4e3b\u51fd\u6570 int main () { // \u4e00\u4e2a\u6307\u5411\u6574\u6570\u7684\u6307\u9488 int * p ; p = getRandom (); for ( int i = 0 ; i < 10 ; i ++ ) { cout << \"*(p + \" << i << \") : \" ; cout << * ( p + i ) << endl ; } return 0 ; }","title":"\u6307\u9488"},{"location":"cpp/%E6%8C%87%E9%92%88/#_1","text":"\u6307\u9488\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u5176\u503c\u4e3a\u53e6\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5373\uff0c\u5185\u5b58\u4f4d\u7f6e\u7684\u76f4\u63a5\u5730\u5740\u3002 \u5c31\u50cf\u5176\u4ed6\u53d8\u91cf\u6216\u5e38\u91cf\u4e00\u6837\uff0c\u60a8\u5fc5\u987b\u5728\u4f7f\u7528\u6307\u9488\u5b58\u50a8\u5176\u4ed6\u53d8\u91cf\u5730\u5740\u4e4b\u524d\uff0c\u5bf9\u5176\u8fdb\u884c\u58f0\u660e\u3002 \u6307\u9488\u53d8\u91cf\u58f0\u660e\u7684\u4e00\u822c\u5f62\u5f0f\u4e3a\uff1a type *var-name; type \u662f\u6307\u9488\u7684\u57fa\u7c7b\u578b\uff0c\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u6709\u6548\u7684 C++ \u6570\u636e\u7c7b\u578b\uff0cvar-name \u662f\u6307\u9488\u53d8\u91cf\u7684\u540d\u79f0\u3002 \u7528\u6765\u58f0\u660e\u6307\u9488\u7684\u661f\u53f7 * \u4e0e\u4e58\u6cd5\u4e2d\u4f7f\u7528\u7684\u661f\u53f7\u662f\u76f8\u540c\u7684\u3002\u4f46\u662f\uff0c\u5728\u8fd9\u4e2a\u8bed\u53e5\u4e2d\uff0c\u661f\u53f7\u662f\u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u662f\u6307\u9488\u3002\u4ee5\u4e0b\u662f\u6709\u6548\u7684\u6307\u9488\u58f0\u660e\uff1a int * ip ; /* \u4e00\u4e2a\u6574\u578b\u7684\u6307\u9488 */ double * dp ; /* \u4e00\u4e2a double \u578b\u7684\u6307\u9488 */ float * fp ; /* \u4e00\u4e2a\u6d6e\u70b9\u578b\u7684\u6307\u9488 */ char * ch ; /* \u4e00\u4e2a\u5b57\u7b26\u578b\u7684\u6307\u9488 */ \u6240\u6709\u6307\u9488\u7684\u503c\u7684\u5b9e\u9645\u6570\u636e\u7c7b\u578b\uff0c\u4e0d\u7ba1\u662f\u6574\u578b\u3001\u6d6e\u70b9\u578b\u3001\u5b57\u7b26\u578b\uff0c\u8fd8\u662f\u5176\u4ed6\u7684\u6570\u636e\u7c7b\u578b\uff0c\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u4e00\u4e2a\u4ee3\u8868\u5185\u5b58\u5730\u5740\u7684\u957f\u7684\u5341\u516d\u8fdb\u5236\u6570\u3002 \u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\u4e4b\u95f4\u552f\u4e00\u7684\u4e0d\u540c\u662f\uff0c\u6307\u9488\u6240\u6307\u5411\u7684\u53d8\u91cf\u6216\u5e38\u91cf\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u540c\u3002 #include <iostream> using namespace std ; int main () { int var = 20 ; // \u5b9e\u9645\u53d8\u91cf\u7684\u58f0\u660e int * ip ; // \u6307\u9488\u53d8\u91cf\u7684\u58f0\u660e ip = & var ; // \u5728\u6307\u9488\u53d8\u91cf\u4e2d\u5b58\u50a8 var \u7684\u5730\u5740 cout << \"Value of var variable: \" ; cout << var << endl ; // \u8f93\u51fa\u5728\u6307\u9488\u53d8\u91cf\u4e2d\u5b58\u50a8\u7684\u5730\u5740 cout << \"Address stored in ip variable: \" ; cout << ip << endl ; // \u8bbf\u95ee\u6307\u9488\u4e2d\u5730\u5740\u7684\u503c cout << \"Value of *ip variable: \" ; cout << * ip << endl ; return 0 ; }","title":"\u4ec0\u4e48\u662f\u6307\u9488\uff1f"},{"location":"cpp/%E6%8C%87%E9%92%88/#null","text":"\u5728\u53d8\u91cf\u58f0\u660e\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ca1\u6709\u786e\u5207\u7684\u5730\u5740\u53ef\u4ee5\u8d4b\u503c\uff0c\u4e3a\u6307\u9488\u53d8\u91cf\u8d4b\u4e00\u4e2a NULL \u503c\u662f\u4e00\u4e2a\u826f\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\u3002 \u8d4b\u4e3a NULL \u503c\u7684\u6307\u9488\u88ab\u79f0\u4e3a\u7a7a\u6307\u9488\u3002 NULL \u6307\u9488\u662f\u4e00\u4e2a\u5b9a\u4e49\u5728\u6807\u51c6\u5e93\u4e2d\u7684\u503c\u4e3a\u96f6\u7684\u5e38\u91cf\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; int main () { int * ptr = NULL ; cout << \"ptr \u7684\u503c\u662f \" << ptr ; return 0 ; } \u5728\u5927\u591a\u6570\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u7a0b\u5e8f\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5730\u5740\u4e3a 0 \u7684\u5185\u5b58\uff0c\u56e0\u4e3a\u8be5\u5185\u5b58\u662f\u64cd\u4f5c\u7cfb\u7edf\u4fdd\u7559\u7684\u3002 \u7136\u800c\uff0c\u5185\u5b58\u5730\u5740 0 \u6709\u7279\u522b\u91cd\u8981\u7684\u610f\u4e49\uff0c\u5b83\u8868\u660e\u8be5\u6307\u9488\u4e0d\u6307\u5411\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u4f46\u6309\u7167\u60ef\u4f8b\uff0c\u5982\u679c\u6307\u9488\u5305\u542b\u7a7a\u503c\uff08\u96f6\u503c\uff09\uff0c\u5219\u5047\u5b9a\u5b83\u4e0d\u6307\u5411\u4efb\u4f55\u4e1c\u897f\u3002 \u5982\u9700\u68c0\u67e5\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 if \u8bed\u53e5\uff0c\u5982\u4e0b\u6240\u793a\uff1a if ( ptr ) /* \u5982\u679c ptr \u975e\u7a7a\uff0c\u5219\u5b8c\u6210 */ if ( ! ptr ) /* \u5982\u679c ptr \u4e3a\u7a7a\uff0c\u5219\u5b8c\u6210 */ \u56e0\u6b64\uff0c\u5982\u679c\u6240\u6709\u672a\u4f7f\u7528\u7684\u6307\u9488\u90fd\u88ab\u8d4b\u4e88\u7a7a\u503c\uff0c\u540c\u65f6\u907f\u514d\u4f7f\u7528\u7a7a\u6307\u9488\uff0c\u5c31\u53ef\u4ee5\u9632\u6b62\u8bef\u7528\u4e00\u4e2a\u672a\u521d\u59cb\u5316\u7684\u6307\u9488\u3002 \u5f88\u591a\u65f6\u5019\uff0c\u672a\u521d\u59cb\u5316\u7684\u53d8\u91cf\u5b58\u6709\u4e00\u4e9b\u5783\u573e\u503c\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u96be\u4ee5\u8c03\u8bd5\u3002","title":"Null \u6307\u9488"},{"location":"cpp/%E6%8C%87%E9%92%88/#_2","text":"\u6307\u9488\u662f\u4e00\u4e2a\u7528\u6570\u503c\u8868\u793a\u7684\u5730\u5740\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5bf9\u6307\u9488\u6267\u884c\u7b97\u672f\u8fd0\u7b97\u3002 \u53ef\u4ee5\u5bf9\u6307\u9488\u8fdb\u884c\u56db\u79cd\u7b97\u672f\u8fd0\u7b97\uff1a++\u3001--\u3001+\u3001-\u3002 \u5047\u8bbe ptr \u662f\u4e00\u4e2a\u6307\u5411\u5730\u5740 1000 \u7684\u6574\u578b\u6307\u9488\uff0c\u662f\u4e00\u4e2a 32 \u4f4d\u7684\u6574\u6570\uff0c\u8ba9\u6211\u4eec\u5bf9\u8be5\u6307\u9488\u6267\u884c\u4e0b\u5217\u7684\u7b97\u672f\u8fd0\u7b97\uff1a ptr ++ \u5728\u6267\u884c\u5b8c\u4e0a\u8ff0\u7684\u8fd0\u7b97\u4e4b\u540e\uff0cptr \u5c06\u6307\u5411\u4f4d\u7f6e 1004\uff0c\u56e0\u4e3a ptr \u6bcf\u589e\u52a0\u4e00\u6b21\uff0c\u5b83\u90fd\u5c06\u6307\u5411\u4e0b\u4e00\u4e2a\u6574\u6570\u4f4d\u7f6e\uff0c\u5373\u5f53\u524d\u4f4d\u7f6e\u5f80\u540e\u79fb 4 \u4e2a\u5b57\u8282\u3002 \u8fd9\u4e2a\u8fd0\u7b97\u4f1a\u5728\u4e0d\u5f71\u54cd\u5185\u5b58\u4f4d\u7f6e\u4e2d\u5b9e\u9645\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u79fb\u52a8\u6307\u9488\u5230\u4e0b\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002 \u5982\u679c ptr \u6307\u5411\u4e00\u4e2a\u5730\u5740\u4e3a 1000 \u7684\u5b57\u7b26\uff0c\u4e0a\u9762\u7684\u8fd0\u7b97\u4f1a\u5bfc\u81f4\u6307\u9488\u6307\u5411\u4f4d\u7f6e 1001\uff0c\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4f4d\u7f6e\u662f\u5728 1001\u3002","title":"\u6307\u9488\u7684\u7b97\u672f\u8fd0\u7b97"},{"location":"cpp/%E6%8C%87%E9%92%88/#_3","text":"\u6211\u4eec\u559c\u6b22\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6307\u9488\u4ee3\u66ff\u6570\u7ec4\uff0c\u56e0\u4e3a\u53d8\u91cf\u6307\u9488\u53ef\u4ee5\u9012\u589e\uff0c\u800c\u6570\u7ec4\u4e0d\u80fd\u9012\u589e\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\u3002 \u4e0b\u9762\u7684\u7a0b\u5e8f\u9012\u589e\u53d8\u91cf\u6307\u9488\uff0c\u4ee5\u4fbf\u987a\u5e8f\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr ; // \u6307\u9488\u4e2d\u7684\u6570\u7ec4\u5730\u5740 ptr = var ; for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"Address of var[\" << i << \"] = \" ; cout << ptr << endl ; cout << \"Value of var[\" << i << \"] = \" ; cout << * ptr << endl ; // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e ptr ++ ; } return 0 ; }","title":"\u9012\u589e\u4e00\u4e2a\u6307\u9488"},{"location":"cpp/%E6%8C%87%E9%92%88/#_4","text":"\u540c\u6837\u5730\uff0c\u5bf9\u6307\u9488\u8fdb\u884c\u9012\u51cf\u8fd0\u7b97\uff0c\u5373\u628a\u503c\u51cf\u53bb\u5176\u6570\u636e\u7c7b\u578b\u7684\u5b57\u8282\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr ; // \u6307\u9488\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 ptr = & var [ MAX -1 ]; for ( int i = MAX ; i > 0 ; i -- ) { cout << \"Address of var[\" << i << \"] = \" ; cout << ptr << endl ; cout << \"Value of var[\" << i << \"] = \" ; cout << * ptr << endl ; // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e ptr -- ; } return 0 ; }","title":"\u9012\u51cf\u4e00\u4e2a\u6307\u9488"},{"location":"cpp/%E6%8C%87%E9%92%88/#_5","text":"\u6307\u9488\u53ef\u4ee5\u7528\u5173\u7cfb\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982 ==\u3001< \u548c >\u3002 \u5982\u679c p1 \u548c p2 \u6307\u5411\u4e24\u4e2a\u76f8\u5173\u7684\u53d8\u91cf\uff0c\u6bd4\u5982\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e0d\u540c\u5143\u7d20\uff0c\u5219\u53ef\u5bf9 p1 \u548c p2 \u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u3002 \u4e0b\u9762\u7684\u7a0b\u5e8f\u4fee\u6539\u4e86\u4e0a\u9762\u7684\u5b9e\u4f8b\uff0c\u53ea\u8981\u53d8\u91cf\u6307\u9488\u6240\u6307\u5411\u7684\u5730\u5740\u5c0f\u4e8e\u6216\u7b49\u4e8e\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 &var[MAX - 1]\uff0c\u5219\u628a\u53d8\u91cf\u6307\u9488\u8fdb\u884c\u9012\u589e\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr ; // \u6307\u9488\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 ptr = var ; int i = 0 ; while ( ptr <= & var [ MAX - 1 ] ) { cout << \"Address of var[\" << i << \"] = \" ; cout << ptr << endl ; cout << \"Value of var[\" << i << \"] = \" ; cout << * ptr << endl ; // \u6307\u5411\u4e0a\u4e00\u4e2a\u4f4d\u7f6e ptr ++ ; i ++ ; } return 0 ; }","title":"\u6307\u9488\u7684\u6bd4\u8f83"},{"location":"cpp/%E6%8C%87%E9%92%88/#vs","text":"\u6307\u9488\u548c\u6570\u7ec4\u662f\u5bc6\u5207\u76f8\u5173\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6307\u9488\u548c\u6570\u7ec4\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u4e92\u6362\u7684\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u5f00\u5934\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6307\u9488\u7684\u7b97\u672f\u8fd0\u7b97\u6216\u6570\u7ec4\u7d22\u5f15\u6765\u8bbf\u95ee\u6570\u7ec4\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr ; // \u6307\u9488\u4e2d\u7684\u6570\u7ec4\u5730\u5740 ptr = var ; for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"var[\" << i << \"]\u7684\u5185\u5b58\u5730\u5740\u4e3a \" ; cout << ptr << endl ; cout << \"var[\" << i << \"] \u7684\u503c\u4e3a \" ; cout << * ptr << endl ; // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e ptr ++ ; } return 0 ; } \u7136\u800c\uff0c\u6307\u9488\u548c\u6570\u7ec4\u5e76\u4e0d\u662f\u5b8c\u5168\u4e92\u6362\u7684\u3002\u4f8b\u5982\uff0c\u8bf7\u770b\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; for ( int i = 0 ; i < MAX ; i ++ ) { * var = i ; // \u8fd9\u662f\u6b63\u786e\u7684\u8bed\u6cd5 var ++ ; // \u8fd9\u662f\u4e0d\u6b63\u786e\u7684 } return 0 ; } \u628a\u6307\u9488\u8fd0\u7b97\u7b26 * \u5e94\u7528\u5230 var \u4e0a\u662f\u5b8c\u5168\u53ef\u4ee5\u7684\uff0c\u4f46\u4fee\u6539 var \u7684\u503c\u662f\u975e\u6cd5\u7684\u3002\u8fd9\u662f\u56e0\u4e3a var \u662f\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u5f00\u5934\u7684\u5e38\u91cf\uff0c\u4e0d\u80fd\u4f5c\u4e3a\u5de6\u503c\u3002 \u7531\u4e8e\u4e00\u4e2a\u6570\u7ec4\u540d\u5bf9\u5e94\u4e00\u4e2a\u6307\u9488\u5e38\u91cf\uff0c\u53ea\u8981\u4e0d\u6539\u53d8\u6570\u7ec4\u7684\u503c\uff0c\u4ecd\u7136\u53ef\u4ee5\u7528\u6307\u9488\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u6709\u6548\u7684\u8bed\u53e5\uff0c\u628a var[2] \u8d4b\u503c\u4e3a 500\uff1a * ( var + 2 ) = 500 ; \u4e0a\u9762\u7684\u8bed\u53e5\u662f\u6709\u6548\u7684\uff0c\u4e14\u80fd\u6210\u529f\u7f16\u8bd1\uff0c\u56e0\u4e3a var \u672a\u6539\u53d8\u3002","title":"\u6307\u9488 vs \u6570\u7ec4"},{"location":"cpp/%E6%8C%87%E9%92%88/#_6","text":"\u5728\u6211\u4eec\u8bb2\u89e3\u6307\u9488\u6570\u7ec4\u7684\u6982\u5ff5\u4e4b\u524d\uff0c\u5148\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5b83\u7528\u5230\u4e86\u4e00\u4e2a\u7531 3 \u4e2a\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"Value of var[\" << i << \"] = \" ; cout << var [ i ] << endl ; } return 0 ; } \u53ef\u80fd\u6709\u4e00\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u60f3\u8981\u8ba9\u6570\u7ec4\u5b58\u50a8\u6307\u5411 int \u6216 char \u6216\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u6307\u9488\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6307\u5411\u6574\u6570\u7684\u6307\u9488\u6570\u7ec4\u7684\u58f0\u660e\uff1a int * ptr [ MAX ]; \u5728\u8fd9\u91cc\uff0c\u628a ptr \u58f0\u660e\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u7531 MAX \u4e2a\u6574\u6570\u6307\u9488\u7ec4\u6210\u3002 \u56e0\u6b64\uff0cptr \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90fd\u662f\u4e00\u4e2a\u6307\u5411 int \u503c\u7684\u6307\u9488\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u7528\u5230\u4e86\u4e09\u4e2a\u6574\u6570\uff0c\u5b83\u4eec\u5c06\u5b58\u50a8\u5728\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; const int MAX = 3 ; int main () { int var [ MAX ] = { 10 , 100 , 200 }; int * ptr [ MAX ]; for ( int i = 0 ; i < MAX ; i ++ ) { ptr [ i ] = & var [ i ]; // \u8d4b\u503c\u4e3a\u6574\u6570\u7684\u5730\u5740 } for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"Value of var[\" << i << \"] = \" ; cout << * ptr [ i ] << endl ; } return 0 ; } \u60a8\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\u6570\u7ec4\u6765\u5b58\u50a8\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5982\u4e0b\uff1a #include <iostream> using namespace std ; const int MAX = 4 ; int main () { const char * names [ MAX ] = { \"Zara Ali\" , \"Hina Ali\" , \"Nuha Ali\" , \"Sara Ali\" , }; for ( int i = 0 ; i < MAX ; i ++ ) { cout << \"Value of names[\" << i << \"] = \" ; cout << names [ i ] << endl ; } return 0 ; }","title":"\u6307\u9488\u6570\u7ec4"},{"location":"cpp/%E6%8C%87%E9%92%88/#_7","text":"\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u662f\u4e00\u79cd\u591a\u7ea7\u95f4\u63a5\u5bfb\u5740\u7684\u5f62\u5f0f\uff0c\u6216\u8005\u8bf4\u662f\u4e00\u4e2a\u6307\u9488\u94fe\u3002 \u901a\u5e38\uff0c\u4e00\u4e2a\u6307\u9488\u5305\u542b\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002 \u5f53\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u65f6\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u5305\u542b\u4e86\u7b2c\u4e8c\u4e2a\u6307\u9488\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u5305\u542b\u5b9e\u9645\u503c\u7684\u4f4d\u7f6e\u3002 \u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u53d8\u91cf\u5fc5\u987b\u5982\u4e0b\u58f0\u660e\uff0c\u5373\u5728\u53d8\u91cf\u540d\u524d\u653e\u7f6e\u4e24\u4e2a\u661f\u53f7\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u5411 int \u7c7b\u578b\u6307\u9488\u7684\u6307\u9488\uff1a int ** var ; \u5f53\u4e00\u4e2a\u76ee\u6807\u503c\u88ab\u4e00\u4e2a\u6307\u9488\u95f4\u63a5\u6307\u5411\u5230\u53e6\u4e00\u4e2a\u6307\u9488\u65f6\uff0c\u8bbf\u95ee\u8fd9\u4e2a\u503c\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u661f\u53f7\u8fd0\u7b97\u7b26\uff0c\u5982\u4e0b\u9762\u5b9e\u4f8b\u6240\u793a\uff1a #include <iostream> using namespace std ; int main () { int var ; int * ptr ; int ** pptr ; var = 3000 ; // \u83b7\u53d6 var \u7684\u5730\u5740 ptr = & var ; // \u4f7f\u7528\u8fd0\u7b97\u7b26 & \u83b7\u53d6 ptr \u7684\u5730\u5740 pptr = & ptr ; // \u4f7f\u7528 pptr \u83b7\u53d6\u503c cout << \"var \u503c\u4e3a :\" << var << endl ; cout << \"*ptr \u503c\u4e3a:\" << * ptr << endl ; cout << \"**pptr \u503c\u4e3a:\" << ** pptr << endl ; return 0 ; }","title":"\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff08\u591a\u7ea7\u95f4\u63a5\u5bfb\u5740\uff09"},{"location":"cpp/%E6%8C%87%E9%92%88/#_8","text":"C++ \u5141\u8bb8\u60a8\u4f20\u9012\u6307\u9488\u7ed9\u51fd\u6570\uff0c\u53ea\u9700\u8981\u7b80\u5355\u5730\u58f0\u660e\u51fd\u6570\u53c2\u6570\u4e3a\u6307\u9488\u7c7b\u578b\u5373\u53ef\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f20\u9012\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 long \u578b\u6307\u9488\u7ed9\u51fd\u6570\uff0c\u5e76\u5728\u51fd\u6570\u5185\u6539\u53d8\u8fd9\u4e2a\u503c\uff1a #include <iostream> #include <ctime> using namespace std ; void getSeconds ( unsigned long * par ); int main () { unsigned long sec ; getSeconds ( & sec ); // \u8f93\u51fa\u5b9e\u9645\u503c cout << \"Number of seconds :\" << sec << endl ; return 0 ; } void getSeconds ( unsigned long * par ) { // \u83b7\u53d6\u5f53\u524d\u7684\u79d2\u6570 * par = time ( NULL ); return ; } \u80fd\u63a5\u53d7\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u4e5f\u80fd\u63a5\u53d7\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e double getAverage ( int * arr , int size ); int main () { // \u5e26\u6709 5 \u4e2a\u5143\u7d20\u7684\u6574\u578b\u6570\u7ec4 int balance [ 5 ] = { 1000 , 2 , 3 , 17 , 50 }; double avg ; // \u4f20\u9012\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570 avg = getAverage ( balance , 5 ) ; // \u8f93\u51fa\u8fd4\u56de\u503c cout << \"Average value is: \" << avg << endl ; return 0 ; } double getAverage ( int * arr , int size ) { int i , sum = 0 ; double avg ; for ( i = 0 ; i < size ; ++ i ) { sum += arr [ i ]; } avg = double ( sum ) / size ; return avg ; }","title":"\u4f20\u9012\u6307\u9488\u7ed9\u51fd\u6570"},{"location":"cpp/%E6%8C%87%E9%92%88/#_9","text":"C++ \u5141\u8bb8\u60a8\u4ece\u51fd\u6570\u8fd4\u56de\u6307\u9488\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u70b9\uff0c\u60a8\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a\u8fd4\u56de\u6307\u9488\u7684\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a int * myFunction () { // . // . // . } \u53e6\u5916\uff0cC++ \u4e0d\u652f\u6301\u5728\u51fd\u6570\u5916\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\u7684\u5730\u5740\uff0c\u9664\u975e\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\u4e3a static \u53d8\u91cf\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u9762\u7684\u51fd\u6570\uff0c\u5b83\u4f1a\u751f\u6210 10 \u4e2a\u968f\u673a\u6570\uff0c\u5e76\u4f7f\u7528\u8868\u793a\u6307\u9488\u7684\u6570\u7ec4\u540d\uff08\u5373\u7b2c\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u5730\u5740\uff09\u6765\u8fd4\u56de\u5b83\u4eec\uff0c\u5177\u4f53\u5982\u4e0b\uff1a #include <iostream> #include <ctime> #include <cstdlib> using namespace std ; // \u8981\u751f\u6210\u548c\u8fd4\u56de\u968f\u673a\u6570\u7684\u51fd\u6570 int * getRandom ( ) { static int r [ 10 ]; // \u8bbe\u7f6e\u79cd\u5b50 srand ( ( unsigned ) time ( NULL ) ); for ( int i = 0 ; i < 10 ; ++ i ) { r [ i ] = rand (); cout << r [ i ] << endl ; } return r ; } // \u8981\u8c03\u7528\u4e0a\u9762\u5b9a\u4e49\u51fd\u6570\u7684\u4e3b\u51fd\u6570 int main () { // \u4e00\u4e2a\u6307\u5411\u6574\u6570\u7684\u6307\u9488 int * p ; p = getRandom (); for ( int i = 0 ; i < 10 ; i ++ ) { cout << \"*(p + \" << i << \") : \" ; cout << * ( p + i ) << endl ; } return 0 ; }","title":"\u4ece\u51fd\u6570\u8fd4\u56de\u6307\u9488"},{"location":"cpp/%E6%8E%A5%E5%8F%A3/","text":"\u63a5\u53e3\u63cf\u8ff0\u4e86\u7c7b\u7684\u884c\u4e3a\u548c\u529f\u80fd\uff0c\u800c\u4e0d\u9700\u8981\u5b8c\u6210\u7c7b\u7684\u7279\u5b9a\u5b9e\u73b0\u3002 C++ \u63a5\u53e3\u662f\u4f7f\u7528\u62bd\u8c61\u7c7b\u6765\u5b9e\u73b0\u7684\uff0c\u62bd\u8c61\u7c7b\u4e0e\u6570\u636e\u62bd\u8c61\u4e92\u4e0d\u6df7\u6dc6\uff0c\u6570\u636e\u62bd\u8c61\u662f\u4e00\u4e2a\u628a\u5b9e\u73b0\u7ec6\u8282\u4e0e\u76f8\u5173\u7684\u6570\u636e\u5206\u79bb\u5f00\u7684\u6982\u5ff5\u3002 \u5982\u679c\u7c7b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u51fd\u6570\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u5219\u8fd9\u4e2a\u7c7b\u5c31\u662f\u62bd\u8c61\u7c7b\u3002\u7eaf\u865a\u51fd\u6570\u662f\u901a\u8fc7\u5728\u58f0\u660e\u4e2d\u4f7f\u7528 \"= 0\" \u6765\u6307\u5b9a\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Box { public : // \u7eaf\u865a\u51fd\u6570 virtual double getVolume () = 0 ; private : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; \u8bbe\u8ba1\u62bd\u8c61\u7c7b\uff08\u901a\u5e38\u79f0\u4e3a ABC\uff09\u7684\u76ee\u7684\uff0c\u662f\u4e3a\u4e86\u7ed9\u5176\u4ed6\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u7ee7\u627f\u7684\u9002\u5f53\u7684\u57fa\u7c7b\u3002\u62bd\u8c61\u7c7b\u4e0d\u80fd\u88ab\u7528\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5b83\u53ea\u80fd\u4f5c\u4e3a\u63a5\u53e3\u4f7f\u7528\u3002\u5982\u679c\u8bd5\u56fe\u5b9e\u4f8b\u5316\u4e00\u4e2a\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61\uff0c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4e00\u4e2a ABC \u7684\u5b50\u7c7b\u9700\u8981\u88ab\u5b9e\u4f8b\u5316\uff0c\u5219\u5fc5\u987b\u5b9e\u73b0\u6bcf\u4e2a\u865a\u51fd\u6570\uff0c\u8fd9\u4e5f\u610f\u5473\u7740 C++ \u652f\u6301\u4f7f\u7528 ABC \u58f0\u660e\u63a5\u53e3\u3002\u5982\u679c\u6ca1\u6709\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u5199\u7eaf\u865a\u51fd\u6570\uff0c\u5c31\u5c1d\u8bd5\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61\uff0c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002 \u53ef\u7528\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u7c7b\u88ab\u79f0\u4e3a\u5177\u4f53\u7c7b\u3002 \u62bd\u8c61\u7c7b\u7684\u5b9e\u4f8b \u00b6 \u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff0c\u57fa\u7c7b Shape \u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u53e3 getArea()\uff0c\u5728\u4e24\u4e2a\u6d3e\u751f\u7c7b Rectangle \u548c Triangle \u4e2d\u5206\u522b\u5b9e\u73b0\u4e86 getArea()\uff1a #include <iostream> using namespace std ; // \u57fa\u7c7b class Shape { public : // \u63d0\u4f9b\u63a5\u53e3\u6846\u67b6\u7684\u7eaf\u865a\u51fd\u6570 virtual int getArea () = 0 ; void setWidth ( int w ) { width = w ; } void setHeight ( int h ) { height = h ; } protected : int width ; int height ; }; // \u6d3e\u751f\u7c7b class Rectangle : public Shape { public : int getArea () { return ( width * height ); } }; class Triangle : public Shape { public : int getArea () { return ( width * height ) / 2 ; } }; int main ( void ) { Rectangle Rect ; Triangle Tri ; Rect . setWidth ( 5 ); Rect . setHeight ( 7 ); // \u8f93\u51fa\u5bf9\u8c61\u7684\u9762\u79ef cout << \"Total Rectangle area: \" << Rect . getArea () << endl ; Tri . setWidth ( 5 ); Tri . setHeight ( 7 ); // \u8f93\u51fa\u5bf9\u8c61\u7684\u9762\u79ef cout << \"Total Triangle area: \" << Tri . getArea () << endl ; return 0 ; } \u4ece\u4e0a\u9762\u7684\u5b9e\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u62bd\u8c61\u7c7b\u662f\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3 getArea()\uff0c\u4e24\u4e2a\u6d3e\u751f\u7c7b\u662f\u5982\u4f55\u901a\u8fc7\u4e0d\u540c\u7684\u8ba1\u7b97\u9762\u79ef\u7684\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd9\u4e2a\u76f8\u540c\u7684\u51fd\u6570\u3002 \u8bbe\u8ba1\u7b56\u7565 \u00b6 \u9762\u5411\u5bf9\u8c61\u7684\u7cfb\u7edf\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\u4e3a\u6240\u6709\u7684\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u9002\u5f53\u7684\u3001\u901a\u7528\u7684\u3001\u6807\u51c6\u5316\u7684\u63a5\u53e3\u3002\u7136\u540e\uff0c\u6d3e\u751f\u7c7b\u901a\u8fc7\u7ee7\u627f\u62bd\u8c61\u57fa\u7c7b\uff0c\u5c31\u628a\u6240\u6709\u7c7b\u4f3c\u7684\u64cd\u4f5c\u90fd\u7ee7\u627f\u4e0b\u6765\u3002 \u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u529f\u80fd\uff08\u5373\u516c\u6709\u51fd\u6570\uff09\u5728\u62bd\u8c61\u57fa\u7c7b\u4e2d\u662f\u4ee5\u7eaf\u865a\u51fd\u6570\u7684\u5f62\u5f0f\u5b58\u5728\u7684\u3002\u8fd9\u4e9b\u7eaf\u865a\u51fd\u6570\u5728\u76f8\u5e94\u7684\u6d3e\u751f\u7c7b\u4e2d\u88ab\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u67b6\u6784\u4e5f\u4f7f\u5f97\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u88ab\u6dfb\u52a0\u5230\u7cfb\u7edf\u4e2d\uff0c\u5373\u4f7f\u662f\u5728\u7cfb\u7edf\u88ab\u5b9a\u4e49\u4e4b\u540e\u4f9d\u7136\u53ef\u4ee5\u5982\u6b64\u3002","title":"\u63a5\u53e3"},{"location":"cpp/%E6%8E%A5%E5%8F%A3/#_1","text":"\u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff0c\u57fa\u7c7b Shape \u63d0\u4f9b\u4e86\u4e00\u4e2a\u63a5\u53e3 getArea()\uff0c\u5728\u4e24\u4e2a\u6d3e\u751f\u7c7b Rectangle \u548c Triangle \u4e2d\u5206\u522b\u5b9e\u73b0\u4e86 getArea()\uff1a #include <iostream> using namespace std ; // \u57fa\u7c7b class Shape { public : // \u63d0\u4f9b\u63a5\u53e3\u6846\u67b6\u7684\u7eaf\u865a\u51fd\u6570 virtual int getArea () = 0 ; void setWidth ( int w ) { width = w ; } void setHeight ( int h ) { height = h ; } protected : int width ; int height ; }; // \u6d3e\u751f\u7c7b class Rectangle : public Shape { public : int getArea () { return ( width * height ); } }; class Triangle : public Shape { public : int getArea () { return ( width * height ) / 2 ; } }; int main ( void ) { Rectangle Rect ; Triangle Tri ; Rect . setWidth ( 5 ); Rect . setHeight ( 7 ); // \u8f93\u51fa\u5bf9\u8c61\u7684\u9762\u79ef cout << \"Total Rectangle area: \" << Rect . getArea () << endl ; Tri . setWidth ( 5 ); Tri . setHeight ( 7 ); // \u8f93\u51fa\u5bf9\u8c61\u7684\u9762\u79ef cout << \"Total Triangle area: \" << Tri . getArea () << endl ; return 0 ; } \u4ece\u4e0a\u9762\u7684\u5b9e\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u62bd\u8c61\u7c7b\u662f\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3 getArea()\uff0c\u4e24\u4e2a\u6d3e\u751f\u7c7b\u662f\u5982\u4f55\u901a\u8fc7\u4e0d\u540c\u7684\u8ba1\u7b97\u9762\u79ef\u7684\u7b97\u6cd5\u6765\u5b9e\u73b0\u8fd9\u4e2a\u76f8\u540c\u7684\u51fd\u6570\u3002","title":"\u62bd\u8c61\u7c7b\u7684\u5b9e\u4f8b"},{"location":"cpp/%E6%8E%A5%E5%8F%A3/#_2","text":"\u9762\u5411\u5bf9\u8c61\u7684\u7cfb\u7edf\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\u4e3a\u6240\u6709\u7684\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u9002\u5f53\u7684\u3001\u901a\u7528\u7684\u3001\u6807\u51c6\u5316\u7684\u63a5\u53e3\u3002\u7136\u540e\uff0c\u6d3e\u751f\u7c7b\u901a\u8fc7\u7ee7\u627f\u62bd\u8c61\u57fa\u7c7b\uff0c\u5c31\u628a\u6240\u6709\u7c7b\u4f3c\u7684\u64cd\u4f5c\u90fd\u7ee7\u627f\u4e0b\u6765\u3002 \u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7684\u529f\u80fd\uff08\u5373\u516c\u6709\u51fd\u6570\uff09\u5728\u62bd\u8c61\u57fa\u7c7b\u4e2d\u662f\u4ee5\u7eaf\u865a\u51fd\u6570\u7684\u5f62\u5f0f\u5b58\u5728\u7684\u3002\u8fd9\u4e9b\u7eaf\u865a\u51fd\u6570\u5728\u76f8\u5e94\u7684\u6d3e\u751f\u7c7b\u4e2d\u88ab\u5b9e\u73b0\u3002 \u8fd9\u4e2a\u67b6\u6784\u4e5f\u4f7f\u5f97\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u88ab\u6dfb\u52a0\u5230\u7cfb\u7edf\u4e2d\uff0c\u5373\u4f7f\u662f\u5728\u7cfb\u7edf\u88ab\u5b9a\u4e49\u4e4b\u540e\u4f9d\u7136\u53ef\u4ee5\u5982\u6b64\u3002","title":"\u8bbe\u8ba1\u7b56\u7565"},{"location":"cpp/%E6%95%B0%E5%AD%97/","text":"\u901a\u5e38\uff0c\u5f53\u6211\u4eec\u9700\u8981\u7528\u5230\u6570\u5b57\u65f6\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u539f\u59cb\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 int\u3001short\u3001long\u3001float \u548c double \u7b49\u7b49\u3002 C++ \u5b9a\u4e49\u6570\u5b57 \u00b6 \u6211\u4eec\u5df2\u7ecf\u5728\u4e4b\u524d\u7ae0\u8282\u7684\u5404\u79cd\u5b9e\u4f8b\u4e2d\u5b9a\u4e49\u8fc7\u6570\u5b57\u3002\u4e0b\u9762\u662f\u4e00\u4e2a C++ \u4e2d\u5b9a\u4e49\u5404\u79cd\u7c7b\u578b\u6570\u5b57\u7684\u7efc\u5408\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; int main () { // \u6570\u5b57\u5b9a\u4e49 short s ; int i ; long l ; float f ; double d ; // \u6570\u5b57\u8d4b\u503c s = 10 ; i = 1000 ; l = 1000000 ; f = 230.47 ; d = 30949.374 ; // \u6570\u5b57\u8f93\u51fa cout << \"short s :\" << s << endl ; cout << \"int i :\" << i << endl ; cout << \"long l :\" << l << endl ; cout << \"float f :\" << f << endl ; cout << \"double d :\" << d << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a short s : 10 int i : 1000 long l : 1000000 float f : 230.47 double d : 30949.4 C++ \u6570\u5b66\u8fd0\u7b97 \u00b6 \u5728 C++ \u4e2d\uff0c\u9664\u4e86\u53ef\u4ee5\u521b\u5efa\u5404\u79cd\u51fd\u6570\uff0c\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u6709\u7528\u7684\u51fd\u6570\u4f9b\u60a8\u4f7f\u7528\u3002\u8fd9\u4e9b\u51fd\u6570\u5199\u5728\u6807\u51c6 C \u548c C++ \u5e93\u4e2d\uff0c\u53eb\u505a\u5185\u7f6e\u51fd\u6570\u3002\u60a8\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528\u8fd9\u4e9b\u51fd\u6570\u3002 C++ \u5185\u7f6e\u4e86\u4e30\u5bcc\u7684\u6570\u5b66\u51fd\u6570\uff0c\u53ef\u5bf9\u5404\u79cd\u6570\u5b57\u8fdb\u884c\u8fd0\u7b97\u3002\u4e0b\u8868\u5217\u51fa\u4e86 C++ \u4e2d\u4e00\u4e9b\u6709\u7528\u7684\u5185\u7f6e\u7684\u6570\u5b66\u51fd\u6570\u3002 \u4e3a\u4e86\u5229\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u60a8\u9700\u8981\u5f15\u7528\u6570\u5b66\u5934\u6587\u4ef6 \u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5173\u4e8e\u6570\u5b66\u8fd0\u7b97\u7684\u7b80\u5355\u5b9e\u4f8b\uff1a #include <iostream> #include <cmath> using namespace std ; int main () { // \u6570\u5b57\u5b9a\u4e49 short s = 10 ; int i = -1000 ; long l = 100000 ; float f = 230.47 ; double d = 200.374 ; // \u6570\u5b66\u8fd0\u7b97 cout << \"sin(d) :\" << sin ( d ) << endl ; cout << \"abs(i) :\" << abs ( i ) << endl ; cout << \"floor(d) :\" << floor ( d ) << endl ; cout << \"sqrt(f) :\" << sqrt ( f ) << endl ; cout << \"pow( d, 2) :\" << pow ( d , 2 ) << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a sin ( d ) : -0.634939 abs ( i ) : 1000 floor ( d ) : 200 sqrt ( f ) : 15.1812 pow ( d , 2 ) : 40149.7 C++ \u968f\u673a\u6570 \u00b6 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u751f\u6210\u968f\u673a\u6570\u3002\u5173\u4e8e\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u6709\u4e24\u4e2a\u76f8\u5173\u7684\u51fd\u6570\u3002\u4e00\u4e2a\u662f rand()\uff0c\u8be5\u51fd\u6570\u53ea\u8fd4\u56de\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u3002\u751f\u6210\u968f\u673a\u6570\u4e4b\u524d\u5fc5\u987b\u5148\u8c03\u7528 srand() \u51fd\u6570\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5173\u4e8e\u751f\u6210\u968f\u673a\u6570\u7684\u7b80\u5355\u5b9e\u4f8b\u3002\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u4e86 time() \u51fd\u6570\u6765\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\u7684\u79d2\u6570\uff0c\u901a\u8fc7\u8c03\u7528 rand() \u51fd\u6570\u6765\u751f\u6210\u968f\u673a\u6570\uff1a #include <iostream> #include <ctime> #include <cstdlib> using namespace std ; int main () { int i , j ; // \u8bbe\u7f6e\u79cd\u5b50 srand ( ( unsigned ) time ( NULL ) ); /* \u751f\u6210 10 \u4e2a\u968f\u673a\u6570 */ for ( i = 0 ; i < 10 ; i ++ ) { // \u751f\u6210\u5b9e\u9645\u7684\u968f\u673a\u6570 j = rand (); cout << \"\u968f\u673a\u6570\uff1a \" << j << endl ; } return 0 ; }","title":"\u6570\u5b57"},{"location":"cpp/%E6%95%B0%E5%AD%97/#c","text":"\u6211\u4eec\u5df2\u7ecf\u5728\u4e4b\u524d\u7ae0\u8282\u7684\u5404\u79cd\u5b9e\u4f8b\u4e2d\u5b9a\u4e49\u8fc7\u6570\u5b57\u3002\u4e0b\u9762\u662f\u4e00\u4e2a C++ \u4e2d\u5b9a\u4e49\u5404\u79cd\u7c7b\u578b\u6570\u5b57\u7684\u7efc\u5408\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; int main () { // \u6570\u5b57\u5b9a\u4e49 short s ; int i ; long l ; float f ; double d ; // \u6570\u5b57\u8d4b\u503c s = 10 ; i = 1000 ; l = 1000000 ; f = 230.47 ; d = 30949.374 ; // \u6570\u5b57\u8f93\u51fa cout << \"short s :\" << s << endl ; cout << \"int i :\" << i << endl ; cout << \"long l :\" << l << endl ; cout << \"float f :\" << f << endl ; cout << \"double d :\" << d << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a short s : 10 int i : 1000 long l : 1000000 float f : 230.47 double d : 30949.4","title":"C++ \u5b9a\u4e49\u6570\u5b57"},{"location":"cpp/%E6%95%B0%E5%AD%97/#c_1","text":"\u5728 C++ \u4e2d\uff0c\u9664\u4e86\u53ef\u4ee5\u521b\u5efa\u5404\u79cd\u51fd\u6570\uff0c\u8fd8\u5305\u542b\u4e86\u5404\u79cd\u6709\u7528\u7684\u51fd\u6570\u4f9b\u60a8\u4f7f\u7528\u3002\u8fd9\u4e9b\u51fd\u6570\u5199\u5728\u6807\u51c6 C \u548c C++ \u5e93\u4e2d\uff0c\u53eb\u505a\u5185\u7f6e\u51fd\u6570\u3002\u60a8\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u5f15\u7528\u8fd9\u4e9b\u51fd\u6570\u3002 C++ \u5185\u7f6e\u4e86\u4e30\u5bcc\u7684\u6570\u5b66\u51fd\u6570\uff0c\u53ef\u5bf9\u5404\u79cd\u6570\u5b57\u8fdb\u884c\u8fd0\u7b97\u3002\u4e0b\u8868\u5217\u51fa\u4e86 C++ \u4e2d\u4e00\u4e9b\u6709\u7528\u7684\u5185\u7f6e\u7684\u6570\u5b66\u51fd\u6570\u3002 \u4e3a\u4e86\u5229\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u60a8\u9700\u8981\u5f15\u7528\u6570\u5b66\u5934\u6587\u4ef6 \u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5173\u4e8e\u6570\u5b66\u8fd0\u7b97\u7684\u7b80\u5355\u5b9e\u4f8b\uff1a #include <iostream> #include <cmath> using namespace std ; int main () { // \u6570\u5b57\u5b9a\u4e49 short s = 10 ; int i = -1000 ; long l = 100000 ; float f = 230.47 ; double d = 200.374 ; // \u6570\u5b66\u8fd0\u7b97 cout << \"sin(d) :\" << sin ( d ) << endl ; cout << \"abs(i) :\" << abs ( i ) << endl ; cout << \"floor(d) :\" << floor ( d ) << endl ; cout << \"sqrt(f) :\" << sqrt ( f ) << endl ; cout << \"pow( d, 2) :\" << pow ( d , 2 ) << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a sin ( d ) : -0.634939 abs ( i ) : 1000 floor ( d ) : 200 sqrt ( f ) : 15.1812 pow ( d , 2 ) : 40149.7","title":"C++ \u6570\u5b66\u8fd0\u7b97"},{"location":"cpp/%E6%95%B0%E5%AD%97/#c_2","text":"\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u751f\u6210\u968f\u673a\u6570\u3002\u5173\u4e8e\u968f\u673a\u6570\u751f\u6210\u5668\uff0c\u6709\u4e24\u4e2a\u76f8\u5173\u7684\u51fd\u6570\u3002\u4e00\u4e2a\u662f rand()\uff0c\u8be5\u51fd\u6570\u53ea\u8fd4\u56de\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u3002\u751f\u6210\u968f\u673a\u6570\u4e4b\u524d\u5fc5\u987b\u5148\u8c03\u7528 srand() \u51fd\u6570\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5173\u4e8e\u751f\u6210\u968f\u673a\u6570\u7684\u7b80\u5355\u5b9e\u4f8b\u3002\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u4e86 time() \u51fd\u6570\u6765\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\u7684\u79d2\u6570\uff0c\u901a\u8fc7\u8c03\u7528 rand() \u51fd\u6570\u6765\u751f\u6210\u968f\u673a\u6570\uff1a #include <iostream> #include <ctime> #include <cstdlib> using namespace std ; int main () { int i , j ; // \u8bbe\u7f6e\u79cd\u5b50 srand ( ( unsigned ) time ( NULL ) ); /* \u751f\u6210 10 \u4e2a\u968f\u673a\u6570 */ for ( i = 0 ; i < 10 ; i ++ ) { // \u751f\u6210\u5b9e\u9645\u7684\u968f\u673a\u6570 j = rand (); cout << \"\u968f\u673a\u6570\uff1a \" << j << endl ; } return 0 ; }","title":"C++ \u968f\u673a\u6570"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/","text":"\u6240\u6709\u7684 C++ \u7a0b\u5e8f\u90fd\u6709\u4ee5\u4e0b\u4e24\u4e2a\u57fa\u672c\u8981\u7d20\uff1a \u7a0b\u5e8f\u8bed\u53e5\uff08\u4ee3\u7801\uff09\uff1a\u8fd9\u662f\u7a0b\u5e8f\u4e2d\u6267\u884c\u52a8\u4f5c\u7684\u90e8\u5206\uff0c\u5b83\u4eec\u88ab\u79f0\u4e3a\u51fd\u6570\u3002 \u7a0b\u5e8f\u6570\u636e\uff1a\u6570\u636e\u662f\u7a0b\u5e8f\u7684\u4fe1\u606f\uff0c\u4f1a\u53d7\u5230\u7a0b\u5e8f\u51fd\u6570\u7684\u5f71\u54cd\u3002 \u5c01\u88c5\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7684\u628a\u6570\u636e\u548c\u64cd\u4f5c\u6570\u636e\u7684\u51fd\u6570\u7ed1\u5b9a\u5728\u4e00\u8d77\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u8fd9\u6837\u80fd\u907f\u514d\u53d7\u5230\u5916\u754c\u7684\u5e72\u6270\u548c\u8bef\u7528\uff0c\u4ece\u800c\u786e\u4fdd\u4e86\u5b89\u5168\u3002\u6570\u636e\u5c01\u88c5\u5f15\u7533\u51fa\u4e86\u53e6\u4e00\u4e2a\u91cd\u8981\u7684 OOP \u6982\u5ff5\uff0c\u5373\u6570\u636e\u9690\u85cf\u3002 \u6570\u636e\u5c01\u88c5\u662f\u4e00\u79cd\u628a\u6570\u636e\u548c\u64cd\u4f5c\u6570\u636e\u7684\u51fd\u6570\u6346\u7ed1\u5728\u4e00\u8d77\u7684\u673a\u5236\uff0c\u6570\u636e\u62bd\u8c61\u662f\u4e00\u79cd\u4ec5\u5411\u7528\u6237\u66b4\u9732\u63a5\u53e3\u800c\u628a\u5177\u4f53\u7684\u5b9e\u73b0\u7ec6\u8282\u9690\u85cf\u8d77\u6765\u7684\u673a\u5236\u3002 C++ \u901a\u8fc7\u521b\u5efa\u7c7b\u6765\u652f\u6301\u5c01\u88c5\u548c\u6570\u636e\u9690\u85cf\uff08public\u3001protected\u3001private\uff09\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u7c7b\u5305\u542b\u79c1\u6709\u6210\u5458\uff08private\uff09\u3001\u4fdd\u62a4\u6210\u5458\uff08protected\uff09\u548c\u516c\u6709\u6210\u5458\uff08public\uff09\u6210\u5458\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728\u7c7b\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u9879\u76ee\u90fd\u662f\u79c1\u6709\u7684\u3002\u4f8b\u5982\uff1a class Box { public : double getVolume ( void ) { return length * breadth * height ; } private : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; \u53d8\u91cf length\u3001breadth \u548c height \u90fd\u662f\u79c1\u6709\u7684\uff08private\uff09\u3002\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ea\u80fd\u88ab Box \u7c7b\u4e2d\u7684\u5176\u4ed6\u6210\u5458\u8bbf\u95ee\uff0c\u800c\u4e0d\u80fd\u88ab\u7a0b\u5e8f\u4e2d\u5176\u4ed6\u90e8\u5206\u8bbf\u95ee\u3002\u8fd9\u662f\u5b9e\u73b0\u5c01\u88c5\u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u4e3a\u4e86\u4f7f\u7c7b\u4e2d\u7684\u6210\u5458\u53d8\u6210\u516c\u6709\u7684\uff08\u5373\uff0c\u7a0b\u5e8f\u4e2d\u7684\u5176\u4ed6\u90e8\u5206\u4e5f\u80fd\u8bbf\u95ee\uff09\uff0c\u5fc5\u987b\u5728\u8fd9\u4e9b\u6210\u5458\u524d\u4f7f\u7528 public \u5173\u952e\u5b57\u8fdb\u884c\u58f0\u660e\u3002\u6240\u6709\u5b9a\u4e49\u5728 public \u6807\u8bc6\u7b26\u540e\u8fb9\u7684\u53d8\u91cf\u6216\u51fd\u6570\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u4e2d\u6240\u6709\u5176\u4ed6\u7684\u51fd\u6570\u8bbf\u95ee\u3002 \u628a\u4e00\u4e2a\u7c7b\u5b9a\u4e49\u4e3a\u53e6\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\u7c7b\uff0c\u4f1a\u66b4\u9732\u5b9e\u73b0\u7ec6\u8282\uff0c\u4ece\u800c\u964d\u4f4e\u4e86\u5c01\u88c5\u6027\u3002\u7406\u60f3\u7684\u505a\u6cd5\u662f\u5c3d\u53ef\u80fd\u5730\u5bf9\u5916\u9690\u85cf\u6bcf\u4e2a\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\u3002 \u6570\u636e\u5c01\u88c5\u7684\u5b9e\u4f8b \u00b6 C++ \u7a0b\u5e8f\u4e2d\uff0c\u4efb\u4f55\u5e26\u6709\u516c\u6709\u548c\u79c1\u6709\u6210\u5458\u7684\u7c7b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u5c01\u88c5\u548c\u6570\u636e\u62bd\u8c61\u7684\u5b9e\u4f8b\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; class Adder { public : // \u6784\u9020\u51fd\u6570 Adder ( int i = 0 ) { total = i ; } // \u5bf9\u5916\u7684\u63a5\u53e3 void addNum ( int number ) { total += number ; } // \u5bf9\u5916\u7684\u63a5\u53e3 int getTotal () { return total ; }; private : // \u5bf9\u5916\u9690\u85cf\u7684\u6570\u636e int total ; }; int main ( ) { Adder a ; a . addNum ( 10 ); a . addNum ( 20 ); a . addNum ( 30 ); cout << \"Total \" << a . getTotal () << endl ; return 0 ; } \u4e0a\u9762\u7684\u7c7b\u628a\u6570\u5b57\u76f8\u52a0\uff0c\u5e76\u8fd4\u56de\u603b\u548c\u3002\u516c\u6709\u6210\u5458 addNum \u548c getTotal \u662f\u5bf9\u5916\u7684\u63a5\u53e3\uff0c\u7528\u6237\u9700\u8981\u77e5\u9053\u5b83\u4eec\u4ee5\u4fbf\u4f7f\u7528\u7c7b\u3002\u79c1\u6709\u6210\u5458 total \u662f\u5bf9\u5916\u9690\u85cf\u7684\uff0c\u7528\u6237\u4e0d\u9700\u8981\u4e86\u89e3\u5b83\uff0c\u4f46\u5b83\u53c8\u662f\u7c7b\u80fd\u6b63\u5e38\u5de5\u4f5c\u6240\u5fc5\u9700\u7684\u3002 \u8bbe\u8ba1\u7b56\u7565 \u00b6 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u4f1a\u8bbe\u7f6e\u7c7b\u6210\u5458\u72b6\u6001\u4e3a\u79c1\u6709\uff08private\uff09\uff0c\u9664\u975e\u6211\u4eec\u771f\u7684\u9700\u8981\u5c06\u5176\u66b4\u9732\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u826f\u597d\u7684\u5c01\u88c5\u6027\u3002 \u8fd9\u901a\u5e38\u5e94\u7528\u4e8e\u6570\u636e\u6210\u5458\uff0c\u4f46\u5b83\u540c\u6837\u9002\u7528\u4e8e\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec\u865a\u51fd\u6570\u3002","title":"\u6570\u636e\u5c01\u88c5"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/#_1","text":"C++ \u7a0b\u5e8f\u4e2d\uff0c\u4efb\u4f55\u5e26\u6709\u516c\u6709\u548c\u79c1\u6709\u6210\u5458\u7684\u7c7b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u5c01\u88c5\u548c\u6570\u636e\u62bd\u8c61\u7684\u5b9e\u4f8b\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; class Adder { public : // \u6784\u9020\u51fd\u6570 Adder ( int i = 0 ) { total = i ; } // \u5bf9\u5916\u7684\u63a5\u53e3 void addNum ( int number ) { total += number ; } // \u5bf9\u5916\u7684\u63a5\u53e3 int getTotal () { return total ; }; private : // \u5bf9\u5916\u9690\u85cf\u7684\u6570\u636e int total ; }; int main ( ) { Adder a ; a . addNum ( 10 ); a . addNum ( 20 ); a . addNum ( 30 ); cout << \"Total \" << a . getTotal () << endl ; return 0 ; } \u4e0a\u9762\u7684\u7c7b\u628a\u6570\u5b57\u76f8\u52a0\uff0c\u5e76\u8fd4\u56de\u603b\u548c\u3002\u516c\u6709\u6210\u5458 addNum \u548c getTotal \u662f\u5bf9\u5916\u7684\u63a5\u53e3\uff0c\u7528\u6237\u9700\u8981\u77e5\u9053\u5b83\u4eec\u4ee5\u4fbf\u4f7f\u7528\u7c7b\u3002\u79c1\u6709\u6210\u5458 total \u662f\u5bf9\u5916\u9690\u85cf\u7684\uff0c\u7528\u6237\u4e0d\u9700\u8981\u4e86\u89e3\u5b83\uff0c\u4f46\u5b83\u53c8\u662f\u7c7b\u80fd\u6b63\u5e38\u5de5\u4f5c\u6240\u5fc5\u9700\u7684\u3002","title":"\u6570\u636e\u5c01\u88c5\u7684\u5b9e\u4f8b"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/#_2","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u4f1a\u8bbe\u7f6e\u7c7b\u6210\u5458\u72b6\u6001\u4e3a\u79c1\u6709\uff08private\uff09\uff0c\u9664\u975e\u6211\u4eec\u771f\u7684\u9700\u8981\u5c06\u5176\u66b4\u9732\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u826f\u597d\u7684\u5c01\u88c5\u6027\u3002 \u8fd9\u901a\u5e38\u5e94\u7528\u4e8e\u6570\u636e\u6210\u5458\uff0c\u4f46\u5b83\u540c\u6837\u9002\u7528\u4e8e\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec\u865a\u51fd\u6570\u3002","title":"\u8bbe\u8ba1\u7b56\u7565"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/","text":"\u6570\u636e\u62bd\u8c61\u662f\u6307\uff0c\u53ea\u5411\u5916\u754c\u63d0\u4f9b\u5173\u952e\u4fe1\u606f\uff0c\u5e76\u9690\u85cf\u5176\u540e\u53f0\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u5373\u53ea\u8868\u73b0\u5fc5\u8981\u7684\u4fe1\u606f\u800c\u4e0d\u5448\u73b0\u7ec6\u8282\u3002 \u6570\u636e\u62bd\u8c61\u662f\u4e00\u79cd\u4f9d\u8d56\u4e8e\u63a5\u53e3\u548c\u5b9e\u73b0\u5206\u79bb\u7684\u7f16\u7a0b\uff08\u8bbe\u8ba1\uff09\u6280\u672f\u3002 \u8ba9\u6211\u4eec\u4e3e\u4e00\u4e2a\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u771f\u5b9e\u4f8b\u5b50\uff0c\u6bd4\u5982\u4e00\u53f0\u7535\u89c6\u673a\uff0c\u60a8\u53ef\u4ee5\u6253\u5f00\u548c\u5173\u95ed\u3001\u5207\u6362\u9891\u9053\u3001\u8c03\u6574\u97f3\u91cf\u3001\u6dfb\u52a0\u5916\u90e8\u7ec4\u4ef6\uff08\u5982\u5587\u53ed\u3001\u5f55\u50cf\u673a\u3001DVD \u64ad\u653e\u5668\uff09\uff0c\u4f46\u662f\u60a8\u4e0d\u77e5\u9053\u5b83\u7684\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u5e76\u4e0d\u77e5\u9053\u5b83\u662f\u5982\u4f55\u901a\u8fc7\u7f06\u7ebf\u63a5\u6536\u4fe1\u53f7\uff0c\u5982\u4f55\u8f6c\u6362\u4fe1\u53f7\uff0c\u5e76\u6700\u7ec8\u663e\u793a\u5728\u5c4f\u5e55\u4e0a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u7535\u89c6\u628a\u5b83\u7684\u5185\u90e8\u5b9e\u73b0\u548c\u5916\u90e8\u63a5\u53e3\u5206\u79bb\u5f00\u4e86\uff0c\u60a8\u65e0\u9700\u77e5\u9053\u5b83\u7684\u5185\u90e8\u5b9e\u73b0\u539f\u7406\uff0c\u76f4\u63a5\u901a\u8fc7\u5b83\u7684\u5916\u90e8\u63a5\u53e3\uff08\u6bd4\u5982\u7535\u6e90\u6309\u94ae\u3001\u9065\u63a7\u5668\u3001\u58f0\u91cf\u63a7\u5236\u5668\uff09\u5c31\u53ef\u4ee5\u64cd\u63a7\u7535\u89c6\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8a00\u5f52\u6b63\u4f20\uff0c\u5c31 C++ \u7f16\u7a0b\u800c\u8a00\uff0cC++ \u7c7b\u4e3a\u6570\u636e\u62bd\u8c61\u63d0\u4f9b\u4e86\u53ef\u80fd\u3002\u5b83\u4eec\u5411\u5916\u754c\u63d0\u4f9b\u4e86\u5927\u91cf\u7528\u4e8e\u64cd\u4f5c\u5bf9\u8c61\u6570\u636e\u7684\u516c\u5171\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5916\u754c\u5b9e\u9645\u4e0a\u5e76\u4e0d\u6e05\u695a\u7c7b\u7684\u5185\u90e8\u5b9e\u73b0\u3002 \u4f8b\u5982\uff0c\u60a8\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528 sort() \u51fd\u6570\uff0c\u800c\u4e0d\u9700\u8981\u77e5\u9053\u51fd\u6570\u4e2d\u6392\u5e8f\u6570\u636e\u6240\u7528\u5230\u7684\u7b97\u6cd5\u3002\u5b9e\u9645\u4e0a\uff0c\u51fd\u6570\u6392\u5e8f\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u56e0\u5e93\u7684\u7248\u672c\u4e0d\u540c\u800c\u6709\u6240\u5dee\u5f02\uff0c\u53ea\u8981\u63a5\u53e3\u4e0d\u53d8\uff0c\u51fd\u6570\u8c03\u7528\u5c31\u53ef\u4ee5\u7167\u5e38\u5de5\u4f5c\u3002 \u5728 C++ \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7c7b\u6765\u5b9a\u4e49\u6211\u4eec\u81ea\u5df1\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08ADT\uff09\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7c7b iostream \u7684 cout \u5bf9\u8c61\u6765\u8f93\u51fa\u6570\u636e\u5230\u6807\u51c6\u8f93\u51fa\u3002 \u8bbf\u95ee\u6807\u7b7e\u5f3a\u5236\u62bd\u8c61 \u00b6 \u5728 C++ \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bbf\u95ee\u6807\u7b7e\u6765\u5b9a\u4e49\u7c7b\u7684\u62bd\u8c61\u63a5\u53e3\u3002\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u5305\u542b\u96f6\u4e2a\u6216\u591a\u4e2a\u8bbf\u95ee\u6807\u7b7e\uff1a \u4f7f\u7528\u516c\u5171\u6807\u7b7e\u5b9a\u4e49\u7684\u6210\u5458\u90fd\u53ef\u4ee5\u8bbf\u95ee\u8be5\u7a0b\u5e8f\u7684\u6240\u6709\u90e8\u5206\u3002\u4e00\u4e2a\u7c7b\u578b\u7684\u6570\u636e\u62bd\u8c61\u89c6\u56fe\u662f\u7531\u5b83\u7684\u516c\u5171\u6210\u5458\u6765\u5b9a\u4e49\u7684\u3002 \u4f7f\u7528\u79c1\u6709\u6807\u7b7e\u5b9a\u4e49\u7684\u6210\u5458\u65e0\u6cd5\u8bbf\u95ee\u5230\u4f7f\u7528\u7c7b\u7684\u4ee3\u7801\u3002\u79c1\u6709\u90e8\u5206\u5bf9\u4f7f\u7528\u7c7b\u578b\u7684\u4ee3\u7801\u9690\u85cf\u4e86\u5b9e\u73b0\u7ec6\u8282\u3002 \u8bbf\u95ee\u6807\u7b7e\u51fa\u73b0\u7684\u9891\u7387\u6ca1\u6709\u9650\u5236\u3002\u6bcf\u4e2a\u8bbf\u95ee\u6807\u7b7e\u6307\u5b9a\u4e86\u7d27\u968f\u5176\u540e\u7684\u6210\u5458\u5b9a\u4e49\u7684\u8bbf\u95ee\u7ea7\u522b\u3002\u6307\u5b9a\u7684\u8bbf\u95ee\u7ea7\u522b\u4f1a\u4e00\u76f4\u6709\u6548\uff0c\u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u8bbf\u95ee\u6807\u7b7e\u6216\u8005\u9047\u5230\u7c7b\u4e3b\u4f53\u7684\u5173\u95ed\u53f3\u62ec\u53f7\u4e3a\u6b62\u3002 \u6570\u636e\u62bd\u8c61\u7684\u597d\u5904 \u00b6 \u6570\u636e\u62bd\u8c61\u6709\u4e24\u4e2a\u91cd\u8981\u7684\u4f18\u52bf\uff1a \u7c7b\u7684\u5185\u90e8\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u4f1a\u56e0\u65e0\u610f\u7684\u7528\u6237\u7ea7\u9519\u8bef\u5bfc\u81f4\u5bf9\u8c61\u72b6\u6001\u53d7\u635f\u3002 \u7c7b\u5b9e\u73b0\u53ef\u80fd\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d1\u751f\u53d8\u5316\uff0c\u4ee5\u4fbf\u5e94\u5bf9\u4e0d\u65ad\u53d8\u5316\u7684\u9700\u6c42\uff0c\u6216\u8005\u5e94\u5bf9\u90a3\u4e9b\u8981\u6c42\u4e0d\u6539\u53d8\u7528\u6237\u7ea7\u4ee3\u7801\u7684\u9519\u8bef\u62a5\u544a\u3002 \u5982\u679c\u53ea\u5728\u7c7b\u7684\u79c1\u6709\u90e8\u5206\u5b9a\u4e49\u6570\u636e\u6210\u5458\uff0c\u7f16\u5199\u8be5\u7c7b\u7684\u4f5c\u8005\u5c31\u53ef\u4ee5\u968f\u610f\u66f4\u6539\u6570\u636e\u3002\u5982\u679c\u5b9e\u73b0\u53d1\u751f\u6539\u53d8\uff0c\u5219\u53ea\u9700\u8981\u68c0\u67e5\u7c7b\u7684\u4ee3\u7801\uff0c\u770b\u770b\u8fd9\u4e2a\u6539\u53d8\u4f1a\u5bfc\u81f4\u54ea\u4e9b\u5f71\u54cd\u3002\u5982\u679c\u6570\u636e\u662f\u516c\u6709\u7684\uff0c\u5219\u4efb\u4f55\u76f4\u63a5\u8bbf\u95ee\u65e7\u8868\u793a\u5f62\u5f0f\u7684\u6570\u636e\u6210\u5458\u7684\u51fd\u6570\u90fd\u53ef\u80fd\u53d7\u5230\u5f71\u54cd\u3002 \u6570\u636e\u62bd\u8c61\u7684\u5b9e\u4f8b \u00b6 C++ \u7a0b\u5e8f\u4e2d\uff0c\u4efb\u4f55\u5e26\u6709\u516c\u6709\u548c\u79c1\u6709\u6210\u5458\u7684\u7c7b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u62bd\u8c61\u7684\u5b9e\u4f8b\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; class Adder { public : // \u6784\u9020\u51fd\u6570 Adder ( int i = 0 ) { total = i ; } // \u5bf9\u5916\u7684\u63a5\u53e3 void addNum ( int number ) { total += number ; } // \u5bf9\u5916\u7684\u63a5\u53e3 int getTotal () { return total ; }; private : // \u5bf9\u5916\u9690\u85cf\u7684\u6570\u636e int total ; }; int main ( ) { Adder a ; a . addNum ( 10 ); a . addNum ( 20 ); a . addNum ( 30 ); cout << \"Total \" << a . getTotal () << endl ; return 0 ; } \u4e0a\u9762\u7684\u7c7b\u628a\u6570\u5b57\u76f8\u52a0\uff0c\u5e76\u8fd4\u56de\u603b\u548c\u3002\u516c\u6709\u6210\u5458 addNum \u548c getTotal \u662f\u5bf9\u5916\u7684\u63a5\u53e3\uff0c\u7528\u6237\u9700\u8981\u77e5\u9053\u5b83\u4eec\u4ee5\u4fbf\u4f7f\u7528\u7c7b\u3002\u79c1\u6709\u6210\u5458 total \u662f\u7528\u6237\u4e0d\u9700\u8981\u4e86\u89e3\u7684\uff0c\u4f46\u53c8\u662f\u7c7b\u80fd\u6b63\u5e38\u5de5\u4f5c\u6240\u5fc5\u9700\u7684\u3002 \u8bbe\u8ba1\u7b56\u7565 \u00b6 \u62bd\u8c61\u628a\u4ee3\u7801\u5206\u79bb\u4e3a\u63a5\u53e3\u548c\u5b9e\u73b0\u3002\u6240\u4ee5\u5728\u8bbe\u8ba1\u7ec4\u4ef6\u65f6\uff0c\u5fc5\u987b\u4fdd\u6301\u63a5\u53e3\u72ec\u7acb\u4e8e\u5b9e\u73b0\uff0c\u8fd9\u6837\uff0c\u5982\u679c\u6539\u53d8\u5e95\u5c42\u5b9e\u73b0\uff0c\u63a5\u53e3\u4e5f\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7ba1\u4efb\u4f55\u7a0b\u5e8f\u4f7f\u7528\u63a5\u53e3\uff0c\u63a5\u53e3\u90fd\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u53ea\u9700\u8981\u5c06\u6700\u65b0\u7684\u5b9e\u73b0\u91cd\u65b0\u7f16\u8bd1\u5373\u53ef\u3002","title":"\u6570\u636e\u62bd\u8c61"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/#_1","text":"\u5728 C++ \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bbf\u95ee\u6807\u7b7e\u6765\u5b9a\u4e49\u7c7b\u7684\u62bd\u8c61\u63a5\u53e3\u3002\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u5305\u542b\u96f6\u4e2a\u6216\u591a\u4e2a\u8bbf\u95ee\u6807\u7b7e\uff1a \u4f7f\u7528\u516c\u5171\u6807\u7b7e\u5b9a\u4e49\u7684\u6210\u5458\u90fd\u53ef\u4ee5\u8bbf\u95ee\u8be5\u7a0b\u5e8f\u7684\u6240\u6709\u90e8\u5206\u3002\u4e00\u4e2a\u7c7b\u578b\u7684\u6570\u636e\u62bd\u8c61\u89c6\u56fe\u662f\u7531\u5b83\u7684\u516c\u5171\u6210\u5458\u6765\u5b9a\u4e49\u7684\u3002 \u4f7f\u7528\u79c1\u6709\u6807\u7b7e\u5b9a\u4e49\u7684\u6210\u5458\u65e0\u6cd5\u8bbf\u95ee\u5230\u4f7f\u7528\u7c7b\u7684\u4ee3\u7801\u3002\u79c1\u6709\u90e8\u5206\u5bf9\u4f7f\u7528\u7c7b\u578b\u7684\u4ee3\u7801\u9690\u85cf\u4e86\u5b9e\u73b0\u7ec6\u8282\u3002 \u8bbf\u95ee\u6807\u7b7e\u51fa\u73b0\u7684\u9891\u7387\u6ca1\u6709\u9650\u5236\u3002\u6bcf\u4e2a\u8bbf\u95ee\u6807\u7b7e\u6307\u5b9a\u4e86\u7d27\u968f\u5176\u540e\u7684\u6210\u5458\u5b9a\u4e49\u7684\u8bbf\u95ee\u7ea7\u522b\u3002\u6307\u5b9a\u7684\u8bbf\u95ee\u7ea7\u522b\u4f1a\u4e00\u76f4\u6709\u6548\uff0c\u76f4\u5230\u9047\u5230\u4e0b\u4e00\u4e2a\u8bbf\u95ee\u6807\u7b7e\u6216\u8005\u9047\u5230\u7c7b\u4e3b\u4f53\u7684\u5173\u95ed\u53f3\u62ec\u53f7\u4e3a\u6b62\u3002","title":"\u8bbf\u95ee\u6807\u7b7e\u5f3a\u5236\u62bd\u8c61"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/#_2","text":"\u6570\u636e\u62bd\u8c61\u6709\u4e24\u4e2a\u91cd\u8981\u7684\u4f18\u52bf\uff1a \u7c7b\u7684\u5185\u90e8\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u4f1a\u56e0\u65e0\u610f\u7684\u7528\u6237\u7ea7\u9519\u8bef\u5bfc\u81f4\u5bf9\u8c61\u72b6\u6001\u53d7\u635f\u3002 \u7c7b\u5b9e\u73b0\u53ef\u80fd\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d1\u751f\u53d8\u5316\uff0c\u4ee5\u4fbf\u5e94\u5bf9\u4e0d\u65ad\u53d8\u5316\u7684\u9700\u6c42\uff0c\u6216\u8005\u5e94\u5bf9\u90a3\u4e9b\u8981\u6c42\u4e0d\u6539\u53d8\u7528\u6237\u7ea7\u4ee3\u7801\u7684\u9519\u8bef\u62a5\u544a\u3002 \u5982\u679c\u53ea\u5728\u7c7b\u7684\u79c1\u6709\u90e8\u5206\u5b9a\u4e49\u6570\u636e\u6210\u5458\uff0c\u7f16\u5199\u8be5\u7c7b\u7684\u4f5c\u8005\u5c31\u53ef\u4ee5\u968f\u610f\u66f4\u6539\u6570\u636e\u3002\u5982\u679c\u5b9e\u73b0\u53d1\u751f\u6539\u53d8\uff0c\u5219\u53ea\u9700\u8981\u68c0\u67e5\u7c7b\u7684\u4ee3\u7801\uff0c\u770b\u770b\u8fd9\u4e2a\u6539\u53d8\u4f1a\u5bfc\u81f4\u54ea\u4e9b\u5f71\u54cd\u3002\u5982\u679c\u6570\u636e\u662f\u516c\u6709\u7684\uff0c\u5219\u4efb\u4f55\u76f4\u63a5\u8bbf\u95ee\u65e7\u8868\u793a\u5f62\u5f0f\u7684\u6570\u636e\u6210\u5458\u7684\u51fd\u6570\u90fd\u53ef\u80fd\u53d7\u5230\u5f71\u54cd\u3002","title":"\u6570\u636e\u62bd\u8c61\u7684\u597d\u5904"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/#_3","text":"C++ \u7a0b\u5e8f\u4e2d\uff0c\u4efb\u4f55\u5e26\u6709\u516c\u6709\u548c\u79c1\u6709\u6210\u5458\u7684\u7c7b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u62bd\u8c61\u7684\u5b9e\u4f8b\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; class Adder { public : // \u6784\u9020\u51fd\u6570 Adder ( int i = 0 ) { total = i ; } // \u5bf9\u5916\u7684\u63a5\u53e3 void addNum ( int number ) { total += number ; } // \u5bf9\u5916\u7684\u63a5\u53e3 int getTotal () { return total ; }; private : // \u5bf9\u5916\u9690\u85cf\u7684\u6570\u636e int total ; }; int main ( ) { Adder a ; a . addNum ( 10 ); a . addNum ( 20 ); a . addNum ( 30 ); cout << \"Total \" << a . getTotal () << endl ; return 0 ; } \u4e0a\u9762\u7684\u7c7b\u628a\u6570\u5b57\u76f8\u52a0\uff0c\u5e76\u8fd4\u56de\u603b\u548c\u3002\u516c\u6709\u6210\u5458 addNum \u548c getTotal \u662f\u5bf9\u5916\u7684\u63a5\u53e3\uff0c\u7528\u6237\u9700\u8981\u77e5\u9053\u5b83\u4eec\u4ee5\u4fbf\u4f7f\u7528\u7c7b\u3002\u79c1\u6709\u6210\u5458 total \u662f\u7528\u6237\u4e0d\u9700\u8981\u4e86\u89e3\u7684\uff0c\u4f46\u53c8\u662f\u7c7b\u80fd\u6b63\u5e38\u5de5\u4f5c\u6240\u5fc5\u9700\u7684\u3002","title":"\u6570\u636e\u62bd\u8c61\u7684\u5b9e\u4f8b"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/#_4","text":"\u62bd\u8c61\u628a\u4ee3\u7801\u5206\u79bb\u4e3a\u63a5\u53e3\u548c\u5b9e\u73b0\u3002\u6240\u4ee5\u5728\u8bbe\u8ba1\u7ec4\u4ef6\u65f6\uff0c\u5fc5\u987b\u4fdd\u6301\u63a5\u53e3\u72ec\u7acb\u4e8e\u5b9e\u73b0\uff0c\u8fd9\u6837\uff0c\u5982\u679c\u6539\u53d8\u5e95\u5c42\u5b9e\u73b0\uff0c\u63a5\u53e3\u4e5f\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7ba1\u4efb\u4f55\u7a0b\u5e8f\u4f7f\u7528\u63a5\u53e3\uff0c\u63a5\u53e3\u90fd\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u53ea\u9700\u8981\u5c06\u6700\u65b0\u7684\u5b9e\u73b0\u91cd\u65b0\u7f16\u8bd1\u5373\u53ef\u3002","title":"\u8bbe\u8ba1\u7b56\u7565"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","text":"C/C++ \u6570\u7ec4\u5141\u8bb8\u5b9a\u4e49\u53ef\u5b58\u50a8\u76f8\u540c\u7c7b\u578b\u6570\u636e\u9879\u7684\u53d8\u91cf\uff0c\u4f46\u662f\u7ed3\u6784\u662f C++ \u4e2d\u53e6\u4e00\u79cd\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u53ef\u7528\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u5141\u8bb8\u60a8\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u9879\u3002 \u7ed3\u6784\u7528\u4e8e\u8868\u793a\u4e00\u6761\u8bb0\u5f55\uff0c\u5047\u8bbe\u60a8\u60f3\u8981\u8ddf\u8e2a\u56fe\u4e66\u9986\u4e2d\u4e66\u672c\u7684\u52a8\u6001\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8ddf\u8e2a\u6bcf\u672c\u4e66\u7684\u4e0b\u5217\u5c5e\u6027\uff1a Title \uff1a\u6807\u9898 Author \uff1a\u4f5c\u8005 Subject \uff1a\u7c7b\u76ee Book ID \uff1a\u4e66\u7684 ID \u5b9a\u4e49\u7ed3\u6784 \u00b6 \u4e3a\u4e86\u5b9a\u4e49\u7ed3\u6784\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528 struct \u8bed\u53e5\u3002struct \u8bed\u53e5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u6210\u5458\u7684\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0cstruct \u8bed\u53e5\u7684\u683c\u5f0f\u5982\u4e0b\uff1a struct type_name { member_type1 member_name1 ; member_type2 member_name2 ; member_type3 member_name3 ; } object_names ; type_name \u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u540d\u79f0\uff0cmember_type1 member_name1 \u662f\u6807\u51c6\u7684\u53d8\u91cf\u5b9a\u4e49\uff0c\u6bd4\u5982 int i; \u6216\u8005 float f; \u6216\u8005\u5176\u4ed6\u6709\u6548\u7684\u53d8\u91cf\u5b9a\u4e49\u3002 \u5728\u7ed3\u6784\u5b9a\u4e49\u7684\u672b\u5c3e\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u53f7\u4e4b\u524d\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u6216\u591a\u4e2a\u7ed3\u6784\u53d8\u91cf\uff0c\u8fd9\u662f\u53ef\u9009\u7684\u3002 \u4e0b\u9762\u662f\u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Books\uff0c\u53d8\u91cf\u4e3a book\uff1a struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; } book ; \u8bbf\u95ee\u7ed3\u6784\u6210\u5458 \u00b6 \u4e3a\u4e86\u8bbf\u95ee\u7ed3\u6784\u7684\u6210\u5458\uff0c\u6211\u4eec\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\uff08.\uff09\u3002 \u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u662f\u7ed3\u6784\u53d8\u91cf\u540d\u79f0\u548c\u6211\u4eec\u8981\u8bbf\u95ee\u7684\u7ed3\u6784\u6210\u5458\u4e4b\u95f4\u7684\u4e00\u4e2a\u53e5\u53f7\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u6f14\u793a\u4e86\u7ed3\u6784\u7684\u7528\u6cd5\uff1a #include <iostream> #include <cstring> using namespace std ; // \u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Books struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; }; int main ( ) { Books Book1 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book1 Books Book2 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book2 // Book1 \u8be6\u8ff0 strcpy ( Book1 . title , \"C++ \u6559\u7a0b\" ); strcpy ( Book1 . author , \"Runoob\" ); strcpy ( Book1 . subject , \"\u7f16\u7a0b\u8bed\u8a00\" ); Book1 . book_id = 12345 ; // Book2 \u8be6\u8ff0 strcpy ( Book2 . title , \"CSS \u6559\u7a0b\" ); strcpy ( Book2 . author , \"Runoob\" ); strcpy ( Book2 . subject , \"\u524d\u7aef\u6280\u672f\" ); Book2 . book_id = 12346 ; // \u8f93\u51fa Book1 \u4fe1\u606f cout << \"\u7b2c\u4e00\u672c\u4e66\u6807\u9898 : \" << Book1 . title << endl ; cout << \"\u7b2c\u4e00\u672c\u4e66\u4f5c\u8005 : \" << Book1 . author << endl ; cout << \"\u7b2c\u4e00\u672c\u4e66\u7c7b\u76ee : \" << Book1 . subject << endl ; cout << \"\u7b2c\u4e00\u672c\u4e66 ID : \" << Book1 . book_id << endl ; // \u8f93\u51fa Book2 \u4fe1\u606f cout << \"\u7b2c\u4e8c\u672c\u4e66\u6807\u9898 : \" << Book2 . title << endl ; cout << \"\u7b2c\u4e8c\u672c\u4e66\u4f5c\u8005 : \" << Book2 . author << endl ; cout << \"\u7b2c\u4e8c\u672c\u4e66\u7c7b\u76ee : \" << Book2 . subject << endl ; cout << \"\u7b2c\u4e8c\u672c\u4e66 ID : \" << Book2 . book_id << endl ; return 0 ; } \u5b9e\u4f8b\u4e2d\u5b9a\u4e49\u4e86\u7ed3\u6784\u4f53\u7c7b\u578b Books \u53ca\u5176\u4e24\u4e2a\u53d8\u91cf Book1 \u548c Book2\u3002 \u7ed3\u6784\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 \u00b6 \u60a8\u53ef\u4ee5\u628a\u7ed3\u6784\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\uff0c\u4f20\u53c2\u65b9\u5f0f\u4e0e\u5176\u4ed6\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u6307\u9488\u7c7b\u4f3c\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5b9e\u4f8b\u4e2d\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u7ed3\u6784\u53d8\u91cf\uff1a #include <iostream> #include <cstring> using namespace std ; void printBook ( struct Books book ); // \u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Books struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; }; int main ( ) { Books Book1 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book1 Books Book2 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book2 // Book1 \u8be6\u8ff0 strcpy ( Book1 . title , \"C++ \u6559\u7a0b\" ); strcpy ( Book1 . author , \"Runoob\" ); strcpy ( Book1 . subject , \"\u7f16\u7a0b\u8bed\u8a00\" ); Book1 . book_id = 12345 ; // Book2 \u8be6\u8ff0 strcpy ( Book2 . title , \"CSS \u6559\u7a0b\" ); strcpy ( Book2 . author , \"Runoob\" ); strcpy ( Book2 . subject , \"\u524d\u7aef\u6280\u672f\" ); Book2 . book_id = 12346 ; // \u8f93\u51fa Book1 \u4fe1\u606f printBook ( Book1 ); // \u8f93\u51fa Book2 \u4fe1\u606f printBook ( Book2 ); return 0 ; } void printBook ( struct Books book ) { cout << \"\u4e66\u6807\u9898 : \" << book . title << endl ; cout << \"\u4e66\u4f5c\u8005 : \" << book . author << endl ; cout << \"\u4e66\u7c7b\u76ee : \" << book . subject << endl ; cout << \"\u4e66 ID : \" << book . book_id << endl ; } \u6307\u5411\u7ed3\u6784\u7684\u6307\u9488 \u00b6 \u60a8\u53ef\u4ee5\u5b9a\u4e49\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\uff0c\u65b9\u5f0f\u4e0e\u5b9a\u4e49\u6307\u5411\u5176\u4ed6\u7c7b\u578b\u53d8\u91cf\u7684\u6307\u9488\u76f8\u4f3c\uff0c\u5982\u4e0b\u6240\u793a\uff1a struct Books * struct_pointer ; \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0a\u8ff0\u5b9a\u4e49\u7684\u6307\u9488\u53d8\u91cf\u4e2d\u5b58\u50a8\u7ed3\u6784\u53d8\u91cf\u7684\u5730\u5740\u3002\u4e3a\u4e86\u67e5\u627e\u7ed3\u6784\u53d8\u91cf\u7684\u5730\u5740\uff0c\u8bf7\u628a & \u8fd0\u7b97\u7b26\u653e\u5728\u7ed3\u6784\u540d\u79f0\u7684\u524d\u9762\uff0c\u5982\u4e0b\u6240\u793a\uff1a struct_pointer = & Book1 ; \u4e3a\u4e86\u4f7f\u7528\u6307\u5411\u8be5\u7ed3\u6784\u7684\u6307\u9488\u8bbf\u95ee\u7ed3\u6784\u7684\u6210\u5458\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528 -> \u8fd0\u7b97\u7b26\uff0c\u5982\u4e0b\u6240\u793a\uff1a struct_pointer -> title ; \u8ba9\u6211\u4eec\u4f7f\u7528\u7ed3\u6784\u6307\u9488\u6765\u91cd\u5199\u4e0a\u9762\u7684\u5b9e\u4f8b\uff0c\u8fd9\u5c06\u6709\u52a9\u4e8e\u60a8\u7406\u89e3\u7ed3\u6784\u6307\u9488\u7684\u6982\u5ff5\uff1a #include <iostream> #include <cstring> using namespace std ; void printBook ( struct Books * book ); struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; }; int main ( ) { Books Book1 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book1 Books Book2 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book2 // Book1 \u8be6\u8ff0 strcpy ( Book1 . title , \"C++ \u6559\u7a0b\" ); strcpy ( Book1 . author , \"Runoob\" ); strcpy ( Book1 . subject , \"\u7f16\u7a0b\u8bed\u8a00\" ); Book1 . book_id = 12345 ; // Book2 \u8be6\u8ff0 strcpy ( Book2 . title , \"CSS \u6559\u7a0b\" ); strcpy ( Book2 . author , \"Runoob\" ); strcpy ( Book2 . subject , \"\u524d\u7aef\u6280\u672f\" ); Book2 . book_id = 12346 ; // \u901a\u8fc7\u4f20 Book1 \u7684\u5730\u5740\u6765\u8f93\u51fa Book1 \u4fe1\u606f printBook ( & Book1 ); // \u901a\u8fc7\u4f20 Book2 \u7684\u5730\u5740\u6765\u8f93\u51fa Book2 \u4fe1\u606f printBook ( & Book2 ); return 0 ; } // \u8be5\u51fd\u6570\u4ee5\u7ed3\u6784\u6307\u9488\u4f5c\u4e3a\u53c2\u6570 void printBook ( struct Books * book ) { cout << \"\u4e66\u6807\u9898 : \" << book -> title << endl ; cout << \"\u4e66\u4f5c\u8005 : \" << book -> author << endl ; cout << \"\u4e66\u7c7b\u76ee : \" << book -> subject << endl ; cout << \"\u4e66 ID : \" << book -> book_id << endl ; } typedef \u5173\u952e\u5b57 \u00b6 \u4e0b\u9762\u662f\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u5b9a\u4e49\u7ed3\u6784\u7684\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u4e3a\u521b\u5efa\u7684\u7c7b\u578b\u53d6\u4e00\u4e2a\"\u522b\u540d\"\u3002\u4f8b\u5982\uff1a typedef struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; } Books ; \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Books \u6765\u5b9a\u4e49 Books \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528 struct \u5173\u952e\u5b57\u3002\u4e0b\u9762\u662f\u5b9e\u4f8b\uff1a Books Book1, Book2; \u60a8\u53ef\u4ee5\u4f7f\u7528 typedef \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u975e\u7ed3\u6784\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a typedef long int * pint32 ; pint32 x , y , z ; x, y \u548c z \u90fd\u662f\u6307\u5411\u957f\u6574\u578b long int \u7684\u6307\u9488\u3002","title":"\u6570\u636e\u7ed3\u6784"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_1","text":"\u4e3a\u4e86\u5b9a\u4e49\u7ed3\u6784\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528 struct \u8bed\u53e5\u3002struct \u8bed\u53e5\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u6210\u5458\u7684\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0cstruct \u8bed\u53e5\u7684\u683c\u5f0f\u5982\u4e0b\uff1a struct type_name { member_type1 member_name1 ; member_type2 member_name2 ; member_type3 member_name3 ; } object_names ; type_name \u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u540d\u79f0\uff0cmember_type1 member_name1 \u662f\u6807\u51c6\u7684\u53d8\u91cf\u5b9a\u4e49\uff0c\u6bd4\u5982 int i; \u6216\u8005 float f; \u6216\u8005\u5176\u4ed6\u6709\u6548\u7684\u53d8\u91cf\u5b9a\u4e49\u3002 \u5728\u7ed3\u6784\u5b9a\u4e49\u7684\u672b\u5c3e\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u53f7\u4e4b\u524d\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u6216\u591a\u4e2a\u7ed3\u6784\u53d8\u91cf\uff0c\u8fd9\u662f\u53ef\u9009\u7684\u3002 \u4e0b\u9762\u662f\u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Books\uff0c\u53d8\u91cf\u4e3a book\uff1a struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; } book ;","title":"\u5b9a\u4e49\u7ed3\u6784"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_2","text":"\u4e3a\u4e86\u8bbf\u95ee\u7ed3\u6784\u7684\u6210\u5458\uff0c\u6211\u4eec\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\uff08.\uff09\u3002 \u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u662f\u7ed3\u6784\u53d8\u91cf\u540d\u79f0\u548c\u6211\u4eec\u8981\u8bbf\u95ee\u7684\u7ed3\u6784\u6210\u5458\u4e4b\u95f4\u7684\u4e00\u4e2a\u53e5\u53f7\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u6f14\u793a\u4e86\u7ed3\u6784\u7684\u7528\u6cd5\uff1a #include <iostream> #include <cstring> using namespace std ; // \u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Books struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; }; int main ( ) { Books Book1 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book1 Books Book2 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book2 // Book1 \u8be6\u8ff0 strcpy ( Book1 . title , \"C++ \u6559\u7a0b\" ); strcpy ( Book1 . author , \"Runoob\" ); strcpy ( Book1 . subject , \"\u7f16\u7a0b\u8bed\u8a00\" ); Book1 . book_id = 12345 ; // Book2 \u8be6\u8ff0 strcpy ( Book2 . title , \"CSS \u6559\u7a0b\" ); strcpy ( Book2 . author , \"Runoob\" ); strcpy ( Book2 . subject , \"\u524d\u7aef\u6280\u672f\" ); Book2 . book_id = 12346 ; // \u8f93\u51fa Book1 \u4fe1\u606f cout << \"\u7b2c\u4e00\u672c\u4e66\u6807\u9898 : \" << Book1 . title << endl ; cout << \"\u7b2c\u4e00\u672c\u4e66\u4f5c\u8005 : \" << Book1 . author << endl ; cout << \"\u7b2c\u4e00\u672c\u4e66\u7c7b\u76ee : \" << Book1 . subject << endl ; cout << \"\u7b2c\u4e00\u672c\u4e66 ID : \" << Book1 . book_id << endl ; // \u8f93\u51fa Book2 \u4fe1\u606f cout << \"\u7b2c\u4e8c\u672c\u4e66\u6807\u9898 : \" << Book2 . title << endl ; cout << \"\u7b2c\u4e8c\u672c\u4e66\u4f5c\u8005 : \" << Book2 . author << endl ; cout << \"\u7b2c\u4e8c\u672c\u4e66\u7c7b\u76ee : \" << Book2 . subject << endl ; cout << \"\u7b2c\u4e8c\u672c\u4e66 ID : \" << Book2 . book_id << endl ; return 0 ; } \u5b9e\u4f8b\u4e2d\u5b9a\u4e49\u4e86\u7ed3\u6784\u4f53\u7c7b\u578b Books \u53ca\u5176\u4e24\u4e2a\u53d8\u91cf Book1 \u548c Book2\u3002","title":"\u8bbf\u95ee\u7ed3\u6784\u6210\u5458"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_3","text":"\u60a8\u53ef\u4ee5\u628a\u7ed3\u6784\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\uff0c\u4f20\u53c2\u65b9\u5f0f\u4e0e\u5176\u4ed6\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u6307\u9488\u7c7b\u4f3c\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u5b9e\u4f8b\u4e2d\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u7ed3\u6784\u53d8\u91cf\uff1a #include <iostream> #include <cstring> using namespace std ; void printBook ( struct Books book ); // \u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b Books struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; }; int main ( ) { Books Book1 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book1 Books Book2 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book2 // Book1 \u8be6\u8ff0 strcpy ( Book1 . title , \"C++ \u6559\u7a0b\" ); strcpy ( Book1 . author , \"Runoob\" ); strcpy ( Book1 . subject , \"\u7f16\u7a0b\u8bed\u8a00\" ); Book1 . book_id = 12345 ; // Book2 \u8be6\u8ff0 strcpy ( Book2 . title , \"CSS \u6559\u7a0b\" ); strcpy ( Book2 . author , \"Runoob\" ); strcpy ( Book2 . subject , \"\u524d\u7aef\u6280\u672f\" ); Book2 . book_id = 12346 ; // \u8f93\u51fa Book1 \u4fe1\u606f printBook ( Book1 ); // \u8f93\u51fa Book2 \u4fe1\u606f printBook ( Book2 ); return 0 ; } void printBook ( struct Books book ) { cout << \"\u4e66\u6807\u9898 : \" << book . title << endl ; cout << \"\u4e66\u4f5c\u8005 : \" << book . author << endl ; cout << \"\u4e66\u7c7b\u76ee : \" << book . subject << endl ; cout << \"\u4e66 ID : \" << book . book_id << endl ; }","title":"\u7ed3\u6784\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#_4","text":"\u60a8\u53ef\u4ee5\u5b9a\u4e49\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\uff0c\u65b9\u5f0f\u4e0e\u5b9a\u4e49\u6307\u5411\u5176\u4ed6\u7c7b\u578b\u53d8\u91cf\u7684\u6307\u9488\u76f8\u4f3c\uff0c\u5982\u4e0b\u6240\u793a\uff1a struct Books * struct_pointer ; \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0a\u8ff0\u5b9a\u4e49\u7684\u6307\u9488\u53d8\u91cf\u4e2d\u5b58\u50a8\u7ed3\u6784\u53d8\u91cf\u7684\u5730\u5740\u3002\u4e3a\u4e86\u67e5\u627e\u7ed3\u6784\u53d8\u91cf\u7684\u5730\u5740\uff0c\u8bf7\u628a & \u8fd0\u7b97\u7b26\u653e\u5728\u7ed3\u6784\u540d\u79f0\u7684\u524d\u9762\uff0c\u5982\u4e0b\u6240\u793a\uff1a struct_pointer = & Book1 ; \u4e3a\u4e86\u4f7f\u7528\u6307\u5411\u8be5\u7ed3\u6784\u7684\u6307\u9488\u8bbf\u95ee\u7ed3\u6784\u7684\u6210\u5458\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528 -> \u8fd0\u7b97\u7b26\uff0c\u5982\u4e0b\u6240\u793a\uff1a struct_pointer -> title ; \u8ba9\u6211\u4eec\u4f7f\u7528\u7ed3\u6784\u6307\u9488\u6765\u91cd\u5199\u4e0a\u9762\u7684\u5b9e\u4f8b\uff0c\u8fd9\u5c06\u6709\u52a9\u4e8e\u60a8\u7406\u89e3\u7ed3\u6784\u6307\u9488\u7684\u6982\u5ff5\uff1a #include <iostream> #include <cstring> using namespace std ; void printBook ( struct Books * book ); struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; }; int main ( ) { Books Book1 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book1 Books Book2 ; // \u5b9a\u4e49\u7ed3\u6784\u4f53\u7c7b\u578b Books \u7684\u53d8\u91cf Book2 // Book1 \u8be6\u8ff0 strcpy ( Book1 . title , \"C++ \u6559\u7a0b\" ); strcpy ( Book1 . author , \"Runoob\" ); strcpy ( Book1 . subject , \"\u7f16\u7a0b\u8bed\u8a00\" ); Book1 . book_id = 12345 ; // Book2 \u8be6\u8ff0 strcpy ( Book2 . title , \"CSS \u6559\u7a0b\" ); strcpy ( Book2 . author , \"Runoob\" ); strcpy ( Book2 . subject , \"\u524d\u7aef\u6280\u672f\" ); Book2 . book_id = 12346 ; // \u901a\u8fc7\u4f20 Book1 \u7684\u5730\u5740\u6765\u8f93\u51fa Book1 \u4fe1\u606f printBook ( & Book1 ); // \u901a\u8fc7\u4f20 Book2 \u7684\u5730\u5740\u6765\u8f93\u51fa Book2 \u4fe1\u606f printBook ( & Book2 ); return 0 ; } // \u8be5\u51fd\u6570\u4ee5\u7ed3\u6784\u6307\u9488\u4f5c\u4e3a\u53c2\u6570 void printBook ( struct Books * book ) { cout << \"\u4e66\u6807\u9898 : \" << book -> title << endl ; cout << \"\u4e66\u4f5c\u8005 : \" << book -> author << endl ; cout << \"\u4e66\u7c7b\u76ee : \" << book -> subject << endl ; cout << \"\u4e66 ID : \" << book -> book_id << endl ; }","title":"\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488"},{"location":"cpp/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/#typedef","text":"\u4e0b\u9762\u662f\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u5b9a\u4e49\u7ed3\u6784\u7684\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u4e3a\u521b\u5efa\u7684\u7c7b\u578b\u53d6\u4e00\u4e2a\"\u522b\u540d\"\u3002\u4f8b\u5982\uff1a typedef struct Books { char title [ 50 ]; char author [ 50 ]; char subject [ 100 ]; int book_id ; } Books ; \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Books \u6765\u5b9a\u4e49 Books \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528 struct \u5173\u952e\u5b57\u3002\u4e0b\u9762\u662f\u5b9e\u4f8b\uff1a Books Book1, Book2; \u60a8\u53ef\u4ee5\u4f7f\u7528 typedef \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u975e\u7ed3\u6784\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a typedef long int * pint32 ; pint32 x , y , z ; x, y \u548c z \u90fd\u662f\u6307\u5411\u957f\u6574\u578b long int \u7684\u6307\u9488\u3002","title":"typedef \u5173\u952e\u5b57"},{"location":"cpp/%E6%95%B0%E7%BB%84/","text":"\u58f0\u660e\u6570\u7ec4 \u00b6 \u5728 C++ \u4e2d\u8981\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\uff0c\u9700\u8981\u6307\u5b9a\u5143\u7d20\u7684\u7c7b\u578b\u548c\u5143\u7d20\u7684\u6570\u91cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a type arrayName [ arraySize ]; arraySize \u5fc5\u987b\u662f\u4e00\u4e2a\u5927\u4e8e\u96f6\u7684\u6574\u6570\u5e38\u91cf\uff0ctype \u53ef\u4ee5\u662f\u4efb\u610f\u6709\u6548\u7684 C++ \u6570\u636e\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u8981\u58f0\u660e\u4e00\u4e2a\u7c7b\u578b\u4e3a double \u7684\u5305\u542b 10 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4 balance\uff0c\u58f0\u660e\u8bed\u53e5\u5982\u4e0b\uff1a double balance [ 10 ]; \u521d\u59cb\u5316\u6570\u7ec4 \u00b6 \u5728 C++ \u4e2d\uff0c\u60a8\u53ef\u4ee5\u9010\u4e2a\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u521d\u59cb\u5316\u8bed\u53e5\uff0c\u5982\u4e0b\u6240\u793a\uff1a double balance [ 5 ] = { 1000.0 , 2.0 , 3.4 , 7.0 , 50.0 }; \u5927\u62ec\u53f7 { } \u4e4b\u95f4\u7684\u503c\u7684\u6570\u76ee\u4e0d\u80fd\u5927\u4e8e\u6211\u4eec\u5728\u6570\u7ec4\u58f0\u660e\u65f6\u5728\u65b9\u62ec\u53f7 [ ] \u4e2d\u6307\u5b9a\u7684\u5143\u7d20\u6570\u76ee\u3002 \u5982\u679c\u60a8\u7701\u7565\u6389\u4e86\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6570\u7ec4\u7684\u5927\u5c0f\u5219\u4e3a\u521d\u59cb\u5316\u65f6\u5143\u7d20\u7684\u4e2a\u6570\u3002\u56e0\u6b64\uff0c\u5982\u679c\uff1a double balance [] = { 1000.0 , 2.0 , 3.4 , 7.0 , 50.0 }; \u60a8\u5c06\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u4e0e\u524d\u4e00\u4e2a\u5b9e\u4f8b\u4e2d\u6240\u521b\u5efa\u7684\u6570\u7ec4\u662f\u5b8c\u5168\u76f8\u540c\u7684\u3002 \u8bbf\u95ee\u6570\u7ec4\u5143\u7d20 \u00b6 \u6570\u7ec4\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u540d\u79f0\u52a0\u7d22\u5f15\u8fdb\u884c\u8bbf\u95ee\u3002\u5143\u7d20\u7684\u7d22\u5f15\u662f\u653e\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u8ddf\u5728\u6570\u7ec4\u540d\u79f0\u7684\u540e\u8fb9\u3002\u4f8b\u5982\uff1a double salary = balance [ 9 ]; \u4e0a\u9762\u7684\u8bed\u53e5\u5c06\u628a\u6570\u7ec4\u4e2d\u7b2c 10 \u4e2a\u5143\u7d20\u7684\u503c\u8d4b\u7ed9 salary \u53d8\u91cf\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e86\u4e0a\u8ff0\u7684\u4e09\u4e2a\u6982\u5ff5\uff0c\u5373\uff0c\u58f0\u660e\u6570\u7ec4\u3001\u6570\u7ec4\u8d4b\u503c\u3001\u8bbf\u95ee\u6570\u7ec4\uff1a #include <iostream> using namespace std ; #include <iomanip> using std :: setw ; int main () { int n [ 10 ]; // n \u662f\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 // \u521d\u59cb\u5316\u6570\u7ec4\u5143\u7d20 for ( int i = 0 ; i < 10 ; i ++ ) { n [ i ] = i + 100 ; // \u8bbe\u7f6e\u5143\u7d20 i \u4e3a i + 100 } cout << \"Element\" << setw ( 13 ) << \"Value\" << endl ; // \u8f93\u51fa\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u503c for ( int j = 0 ; j < 10 ; j ++ ) { cout << setw ( 7 ) << j << setw ( 13 ) << n [ j ] << endl ; } return 0 ; } \u4e0a\u9762\u7684\u7a0b\u5e8f\u4f7f\u7528\u4e86 setw() \u51fd\u6570\u6765\u683c\u5f0f\u5316\u8f93\u51fa\u3002\u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a Element Value 0 100 1 101 2 102 3 103 4 104 5 105 6 106 7 107 8 108 9 109 \u4e8c\u7ef4\u6570\u7ec4 \u00b6 \u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5728\u672c\u8d28\u4e0a\uff0c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u5217\u8868\u3002\u58f0\u660e\u4e00\u4e2a x \u884c y \u5217\u7684\u4e8c\u7ef4\u6574\u578b\u6570\u7ec4\uff0c\u5f62\u5f0f\u5982\u4e0b\uff1a type arrayName [ x ][ y ]; \u521d\u59cb\u5316\u4e8c\u7ef4\u6570\u7ec4 \u00b6 \u591a\u7ef4\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5728\u62ec\u53f7\u5185\u4e3a\u6bcf\u884c\u6307\u5b9a\u503c\u6765\u8fdb\u884c\u521d\u59cb\u5316\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5e26\u6709 3 \u884c 4 \u5217\u7684\u6570\u7ec4\u3002 int a [ 3 ][ 4 ] = { { 0 , 1 , 2 , 3 } , /* \u521d\u59cb\u5316\u7d22\u5f15\u53f7\u4e3a 0 \u7684\u884c */ { 4 , 5 , 6 , 7 } , /* \u521d\u59cb\u5316\u7d22\u5f15\u53f7\u4e3a 1 \u7684\u884c */ { 8 , 9 , 10 , 11 } /* \u521d\u59cb\u5316\u7d22\u5f15\u53f7\u4e3a 2 \u7684\u884c */ }; \u5185\u90e8\u5d4c\u5957\u7684\u62ec\u53f7\u662f\u53ef\u9009\u7684\uff0c\u4e0b\u9762\u7684\u521d\u59cb\u5316\u4e0e\u4e0a\u9762\u662f\u7b49\u540c\u7684\uff1a int a [ 3 ][ 4 ] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 }; \u8bbf\u95ee\u4e8c\u7ef4\u6570\u7ec4\u5143\u7d20 \u00b6 int val = a [ 2 ][ 3 ]; \u6307\u5411\u6570\u7ec4\u7684\u6307\u9488 \u00b6 \u6570\u7ec4\u540d\u662f\u6307\u5411\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5e38\u91cf\u6307\u9488\u3002\u56e0\u6b64\uff0c\u5728\u4e0b\u9762\u7684\u58f0\u660e\u4e2d\uff1a double balance [ 50 ]; balance \u662f\u4e00\u4e2a\u6307\u5411 &balance[0] \u7684\u6307\u9488\uff0c\u5373\u6570\u7ec4 balance \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\u3002 \u56e0\u6b64\uff0c\u4e0b\u9762\u7684\u7a0b\u5e8f\u7247\u6bb5\u628a p \u8d4b\u503c\u4e3a balance \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff1a double * p ; double balance [ 10 ]; p = balance ; \u4f7f\u7528\u6570\u7ec4\u540d\u4f5c\u4e3a\u5e38\u91cf\u6307\u9488\u662f\u5408\u6cd5\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u56e0\u6b64\uff0c*(balance + 4) \u662f\u4e00\u79cd\u8bbf\u95ee balance[4] \u6570\u636e\u7684\u5408\u6cd5\u65b9\u5f0f\u3002 \u4e00\u65e6\u60a8\u628a\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\u5b58\u50a8\u5728 p \u4e2d\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528 p\u3001 (p+1)\u3001*(p+2) \u7b49\u6765\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u3002\u4e0b\u9762\u7684\u5b9e\u4f8b\u6f14\u793a\u4e86\u4e0a\u9762\u8ba8\u8bba\u5230\u7684\u8fd9\u4e9b\u6982\u5ff5\uff1a #include <iostream> using namespace std ; int main () { // \u5e26\u6709 5 \u4e2a\u5143\u7d20\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570\u7ec4 double balance [ 5 ] = { 1000.0 , 2.0 , 3.4 , 17.0 , 50.0 }; double * p ; p = balance ; // \u8f93\u51fa\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u503c cout << \"\u4f7f\u7528\u6307\u9488\u7684\u6570\u7ec4\u503c \" << endl ; for ( int i = 0 ; i < 5 ; i ++ ) { cout << \"*(p + \" << i << \") : \" ; cout << * ( p + i ) << endl ; } cout << \"\u4f7f\u7528 balance \u4f5c\u4e3a\u5730\u5740\u7684\u6570\u7ec4\u503c \" << endl ; for ( int i = 0 ; i < 5 ; i ++ ) { cout << \"*(balance + \" << i << \") : \" ; cout << * ( balance + i ) << endl ; } return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u4f7f\u7528\u6307\u9488\u7684\u6570\u7ec4\u503c * ( p + 0 ) : 1000 * ( p + 1 ) : 2 * ( p + 2 ) : 3.4 * ( p + 3 ) : 17 * ( p + 4 ) : 50 \u4f7f\u7528 balance \u4f5c\u4e3a\u5730\u5740\u7684\u6570\u7ec4\u503c * ( balance + 0 ) : 1000 * ( balance + 1 ) : 2 * ( balance + 2 ) : 3.4 * ( balance + 3 ) : 17 * ( balance + 4 ) : 50 \u4f20\u9012\u6570\u7ec4\u7ed9\u51fd\u6570 \u00b6 \u65b9\u5f0f 1 \u00b6 \u5f62\u5f0f\u53c2\u6570\u662f\u4e00\u4e2a\u6307\u9488\uff1a void myFunction ( int * param ) { // . // . // . } \u65b9\u6cd52 \u00b6 \u5f62\u5f0f\u53c2\u6570\u662f\u4e00\u4e2a\u5df2\u5b9a\u4e49\u5927\u5c0f\u7684\u6570\u7ec4\uff1a void myFunction ( int param [ 10 ]) { // . // . // . } \u65b9\u5f0f 3 \u00b6 \u5f62\u5f0f\u53c2\u6570\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u5927\u5c0f\u7684\u6570\u7ec4\uff1a void myFunction ( int param []) { // . // . // . } \u793a\u4f8b \u00b6 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\uff0c\u5b83\u628a\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\uff0c\u540c\u65f6\u8fd8\u4f20\u9012\u4e86\u53e6\u4e00\u4e2a\u53c2\u6570\uff0c\u6839\u636e\u6240\u4f20\u7684\u53c2\u6570\uff0c\u4f1a\u8fd4\u56de\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u7684\u5e73\u5747\u503c\uff1a double getAverage ( int arr [], int size ) { int i , sum = 0 ; double avg ; for ( i = 0 ; i < size ; ++ i ) { sum += arr [ i ]; } avg = double ( sum ) / size ; return avg ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8c03\u7528\u4e0a\u9762\u7684\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e double getAverage ( int arr [], int size ); int main () { // \u5e26\u6709 5 \u4e2a\u5143\u7d20\u7684\u6574\u578b\u6570\u7ec4 int balance [ 5 ] = { 1000 , 2 , 3 , 17 , 50 }; double avg ; // \u4f20\u9012\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570 avg = getAverage ( balance , 5 ) ; // \u8f93\u51fa\u8fd4\u56de\u503c cout << \"\u5e73\u5747\u503c\u662f\uff1a\" << avg << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u5e73\u5747\u503c\u662f\uff1a 214.4 \u4ece\u51fd\u6570\u8fd4\u56de\u6570\u7ec4 \u00b6 C++ \u4e0d\u5141\u8bb8\u8fd4\u56de\u4e00\u4e2a\u5b8c\u6574\u7684\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e0d\u5e26\u7d22\u5f15\u7684\u6570\u7ec4\u540d\u6765\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u3002 \u5982\u679c\u60a8\u60f3\u8981\u4ece\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u60a8\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a\u8fd4\u56de\u6307\u9488\u7684\u51fd\u6570\uff0c\u5982\u4e0b\uff1a int * myFunction () { // . // . // . } \u53e6\u5916\uff0cC++ \u4e0d\u652f\u6301\u5728\u51fd\u6570\u5916\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\u7684\u5730\u5740\uff0c\u9664\u975e\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\u4e3a static \u53d8\u91cf\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u9762\u7684\u51fd\u6570\uff0c\u5b83\u4f1a\u751f\u6210 10 \u4e2a\u968f\u673a\u6570\uff0c\u5e76\u4f7f\u7528\u6570\u7ec4\u6765\u8fd4\u56de\u5b83\u4eec\uff0c\u5177\u4f53\u5982\u4e0b\uff1a #include <iostream> #include <cstdlib> #include <ctime> using namespace std ; // \u8981\u751f\u6210\u548c\u8fd4\u56de\u968f\u673a\u6570\u7684\u51fd\u6570 int * getRandom ( ) { static int r [ 10 ]; // \u8bbe\u7f6e\u79cd\u5b50 srand ( ( unsigned ) time ( NULL ) ); for ( int i = 0 ; i < 10 ; ++ i ) { r [ i ] = rand (); cout << r [ i ] << endl ; } return r ; } // \u8981\u8c03\u7528\u4e0a\u9762\u5b9a\u4e49\u51fd\u6570\u7684\u4e3b\u51fd\u6570 int main () { // \u4e00\u4e2a\u6307\u5411\u6574\u6570\u7684\u6307\u9488 int * p ; p = getRandom (); for ( int i = 0 ; i < 10 ; i ++ ) { cout << \"*(p + \" << i << \") : \" ; cout << * ( p + i ) << endl ; } return 0 ; }","title":"\u6570\u7ec4"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_1","text":"\u5728 C++ \u4e2d\u8981\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\uff0c\u9700\u8981\u6307\u5b9a\u5143\u7d20\u7684\u7c7b\u578b\u548c\u5143\u7d20\u7684\u6570\u91cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a type arrayName [ arraySize ]; arraySize \u5fc5\u987b\u662f\u4e00\u4e2a\u5927\u4e8e\u96f6\u7684\u6574\u6570\u5e38\u91cf\uff0ctype \u53ef\u4ee5\u662f\u4efb\u610f\u6709\u6548\u7684 C++ \u6570\u636e\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u8981\u58f0\u660e\u4e00\u4e2a\u7c7b\u578b\u4e3a double \u7684\u5305\u542b 10 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4 balance\uff0c\u58f0\u660e\u8bed\u53e5\u5982\u4e0b\uff1a double balance [ 10 ];","title":"\u58f0\u660e\u6570\u7ec4"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_2","text":"\u5728 C++ \u4e2d\uff0c\u60a8\u53ef\u4ee5\u9010\u4e2a\u521d\u59cb\u5316\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u521d\u59cb\u5316\u8bed\u53e5\uff0c\u5982\u4e0b\u6240\u793a\uff1a double balance [ 5 ] = { 1000.0 , 2.0 , 3.4 , 7.0 , 50.0 }; \u5927\u62ec\u53f7 { } \u4e4b\u95f4\u7684\u503c\u7684\u6570\u76ee\u4e0d\u80fd\u5927\u4e8e\u6211\u4eec\u5728\u6570\u7ec4\u58f0\u660e\u65f6\u5728\u65b9\u62ec\u53f7 [ ] \u4e2d\u6307\u5b9a\u7684\u5143\u7d20\u6570\u76ee\u3002 \u5982\u679c\u60a8\u7701\u7565\u6389\u4e86\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u6570\u7ec4\u7684\u5927\u5c0f\u5219\u4e3a\u521d\u59cb\u5316\u65f6\u5143\u7d20\u7684\u4e2a\u6570\u3002\u56e0\u6b64\uff0c\u5982\u679c\uff1a double balance [] = { 1000.0 , 2.0 , 3.4 , 7.0 , 50.0 }; \u60a8\u5c06\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u4e0e\u524d\u4e00\u4e2a\u5b9e\u4f8b\u4e2d\u6240\u521b\u5efa\u7684\u6570\u7ec4\u662f\u5b8c\u5168\u76f8\u540c\u7684\u3002","title":"\u521d\u59cb\u5316\u6570\u7ec4"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_3","text":"\u6570\u7ec4\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u540d\u79f0\u52a0\u7d22\u5f15\u8fdb\u884c\u8bbf\u95ee\u3002\u5143\u7d20\u7684\u7d22\u5f15\u662f\u653e\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u8ddf\u5728\u6570\u7ec4\u540d\u79f0\u7684\u540e\u8fb9\u3002\u4f8b\u5982\uff1a double salary = balance [ 9 ]; \u4e0a\u9762\u7684\u8bed\u53e5\u5c06\u628a\u6570\u7ec4\u4e2d\u7b2c 10 \u4e2a\u5143\u7d20\u7684\u503c\u8d4b\u7ed9 salary \u53d8\u91cf\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e86\u4e0a\u8ff0\u7684\u4e09\u4e2a\u6982\u5ff5\uff0c\u5373\uff0c\u58f0\u660e\u6570\u7ec4\u3001\u6570\u7ec4\u8d4b\u503c\u3001\u8bbf\u95ee\u6570\u7ec4\uff1a #include <iostream> using namespace std ; #include <iomanip> using std :: setw ; int main () { int n [ 10 ]; // n \u662f\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 // \u521d\u59cb\u5316\u6570\u7ec4\u5143\u7d20 for ( int i = 0 ; i < 10 ; i ++ ) { n [ i ] = i + 100 ; // \u8bbe\u7f6e\u5143\u7d20 i \u4e3a i + 100 } cout << \"Element\" << setw ( 13 ) << \"Value\" << endl ; // \u8f93\u51fa\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u503c for ( int j = 0 ; j < 10 ; j ++ ) { cout << setw ( 7 ) << j << setw ( 13 ) << n [ j ] << endl ; } return 0 ; } \u4e0a\u9762\u7684\u7a0b\u5e8f\u4f7f\u7528\u4e86 setw() \u51fd\u6570\u6765\u683c\u5f0f\u5316\u8f93\u51fa\u3002\u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a Element Value 0 100 1 101 2 102 3 103 4 104 5 105 6 106 7 107 8 108 9 109","title":"\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_4","text":"\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5728\u672c\u8d28\u4e0a\uff0c\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u5217\u8868\u3002\u58f0\u660e\u4e00\u4e2a x \u884c y \u5217\u7684\u4e8c\u7ef4\u6574\u578b\u6570\u7ec4\uff0c\u5f62\u5f0f\u5982\u4e0b\uff1a type arrayName [ x ][ y ];","title":"\u4e8c\u7ef4\u6570\u7ec4"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_5","text":"\u591a\u7ef4\u6570\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5728\u62ec\u53f7\u5185\u4e3a\u6bcf\u884c\u6307\u5b9a\u503c\u6765\u8fdb\u884c\u521d\u59cb\u5316\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5e26\u6709 3 \u884c 4 \u5217\u7684\u6570\u7ec4\u3002 int a [ 3 ][ 4 ] = { { 0 , 1 , 2 , 3 } , /* \u521d\u59cb\u5316\u7d22\u5f15\u53f7\u4e3a 0 \u7684\u884c */ { 4 , 5 , 6 , 7 } , /* \u521d\u59cb\u5316\u7d22\u5f15\u53f7\u4e3a 1 \u7684\u884c */ { 8 , 9 , 10 , 11 } /* \u521d\u59cb\u5316\u7d22\u5f15\u53f7\u4e3a 2 \u7684\u884c */ }; \u5185\u90e8\u5d4c\u5957\u7684\u62ec\u53f7\u662f\u53ef\u9009\u7684\uff0c\u4e0b\u9762\u7684\u521d\u59cb\u5316\u4e0e\u4e0a\u9762\u662f\u7b49\u540c\u7684\uff1a int a [ 3 ][ 4 ] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 };","title":"\u521d\u59cb\u5316\u4e8c\u7ef4\u6570\u7ec4"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_6","text":"int val = a [ 2 ][ 3 ];","title":"\u8bbf\u95ee\u4e8c\u7ef4\u6570\u7ec4\u5143\u7d20"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_7","text":"\u6570\u7ec4\u540d\u662f\u6307\u5411\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5e38\u91cf\u6307\u9488\u3002\u56e0\u6b64\uff0c\u5728\u4e0b\u9762\u7684\u58f0\u660e\u4e2d\uff1a double balance [ 50 ]; balance \u662f\u4e00\u4e2a\u6307\u5411 &balance[0] \u7684\u6307\u9488\uff0c\u5373\u6570\u7ec4 balance \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\u3002 \u56e0\u6b64\uff0c\u4e0b\u9762\u7684\u7a0b\u5e8f\u7247\u6bb5\u628a p \u8d4b\u503c\u4e3a balance \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff1a double * p ; double balance [ 10 ]; p = balance ; \u4f7f\u7528\u6570\u7ec4\u540d\u4f5c\u4e3a\u5e38\u91cf\u6307\u9488\u662f\u5408\u6cd5\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u56e0\u6b64\uff0c*(balance + 4) \u662f\u4e00\u79cd\u8bbf\u95ee balance[4] \u6570\u636e\u7684\u5408\u6cd5\u65b9\u5f0f\u3002 \u4e00\u65e6\u60a8\u628a\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\u5b58\u50a8\u5728 p \u4e2d\uff0c\u60a8\u5c31\u53ef\u4ee5\u4f7f\u7528 p\u3001 (p+1)\u3001*(p+2) \u7b49\u6765\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u3002\u4e0b\u9762\u7684\u5b9e\u4f8b\u6f14\u793a\u4e86\u4e0a\u9762\u8ba8\u8bba\u5230\u7684\u8fd9\u4e9b\u6982\u5ff5\uff1a #include <iostream> using namespace std ; int main () { // \u5e26\u6709 5 \u4e2a\u5143\u7d20\u7684\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570\u7ec4 double balance [ 5 ] = { 1000.0 , 2.0 , 3.4 , 17.0 , 50.0 }; double * p ; p = balance ; // \u8f93\u51fa\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u503c cout << \"\u4f7f\u7528\u6307\u9488\u7684\u6570\u7ec4\u503c \" << endl ; for ( int i = 0 ; i < 5 ; i ++ ) { cout << \"*(p + \" << i << \") : \" ; cout << * ( p + i ) << endl ; } cout << \"\u4f7f\u7528 balance \u4f5c\u4e3a\u5730\u5740\u7684\u6570\u7ec4\u503c \" << endl ; for ( int i = 0 ; i < 5 ; i ++ ) { cout << \"*(balance + \" << i << \") : \" ; cout << * ( balance + i ) << endl ; } return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u4f7f\u7528\u6307\u9488\u7684\u6570\u7ec4\u503c * ( p + 0 ) : 1000 * ( p + 1 ) : 2 * ( p + 2 ) : 3.4 * ( p + 3 ) : 17 * ( p + 4 ) : 50 \u4f7f\u7528 balance \u4f5c\u4e3a\u5730\u5740\u7684\u6570\u7ec4\u503c * ( balance + 0 ) : 1000 * ( balance + 1 ) : 2 * ( balance + 2 ) : 3.4 * ( balance + 3 ) : 17 * ( balance + 4 ) : 50","title":"\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_8","text":"","title":"\u4f20\u9012\u6570\u7ec4\u7ed9\u51fd\u6570"},{"location":"cpp/%E6%95%B0%E7%BB%84/#1","text":"\u5f62\u5f0f\u53c2\u6570\u662f\u4e00\u4e2a\u6307\u9488\uff1a void myFunction ( int * param ) { // . // . // . }","title":"\u65b9\u5f0f 1"},{"location":"cpp/%E6%95%B0%E7%BB%84/#2","text":"\u5f62\u5f0f\u53c2\u6570\u662f\u4e00\u4e2a\u5df2\u5b9a\u4e49\u5927\u5c0f\u7684\u6570\u7ec4\uff1a void myFunction ( int param [ 10 ]) { // . // . // . }","title":"\u65b9\u6cd52"},{"location":"cpp/%E6%95%B0%E7%BB%84/#3","text":"\u5f62\u5f0f\u53c2\u6570\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u5927\u5c0f\u7684\u6570\u7ec4\uff1a void myFunction ( int param []) { // . // . // . }","title":"\u65b9\u5f0f 3"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_9","text":"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\uff0c\u5b83\u628a\u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\uff0c\u540c\u65f6\u8fd8\u4f20\u9012\u4e86\u53e6\u4e00\u4e2a\u53c2\u6570\uff0c\u6839\u636e\u6240\u4f20\u7684\u53c2\u6570\uff0c\u4f1a\u8fd4\u56de\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u7684\u5e73\u5747\u503c\uff1a double getAverage ( int arr [], int size ) { int i , sum = 0 ; double avg ; for ( i = 0 ; i < size ; ++ i ) { sum += arr [ i ]; } avg = double ( sum ) / size ; return avg ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8c03\u7528\u4e0a\u9762\u7684\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; // \u51fd\u6570\u58f0\u660e double getAverage ( int arr [], int size ); int main () { // \u5e26\u6709 5 \u4e2a\u5143\u7d20\u7684\u6574\u578b\u6570\u7ec4 int balance [ 5 ] = { 1000 , 2 , 3 , 17 , 50 }; double avg ; // \u4f20\u9012\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u4f5c\u4e3a\u53c2\u6570 avg = getAverage ( balance , 5 ) ; // \u8f93\u51fa\u8fd4\u56de\u503c cout << \"\u5e73\u5747\u503c\u662f\uff1a\" << avg << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a \u5e73\u5747\u503c\u662f\uff1a 214.4","title":"\u793a\u4f8b"},{"location":"cpp/%E6%95%B0%E7%BB%84/#_10","text":"C++ \u4e0d\u5141\u8bb8\u8fd4\u56de\u4e00\u4e2a\u5b8c\u6574\u7684\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e0d\u5e26\u7d22\u5f15\u7684\u6570\u7ec4\u540d\u6765\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u3002 \u5982\u679c\u60a8\u60f3\u8981\u4ece\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u60a8\u5fc5\u987b\u58f0\u660e\u4e00\u4e2a\u8fd4\u56de\u6307\u9488\u7684\u51fd\u6570\uff0c\u5982\u4e0b\uff1a int * myFunction () { // . // . // . } \u53e6\u5916\uff0cC++ \u4e0d\u652f\u6301\u5728\u51fd\u6570\u5916\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\u7684\u5730\u5740\uff0c\u9664\u975e\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\u4e3a static \u53d8\u91cf\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u9762\u7684\u51fd\u6570\uff0c\u5b83\u4f1a\u751f\u6210 10 \u4e2a\u968f\u673a\u6570\uff0c\u5e76\u4f7f\u7528\u6570\u7ec4\u6765\u8fd4\u56de\u5b83\u4eec\uff0c\u5177\u4f53\u5982\u4e0b\uff1a #include <iostream> #include <cstdlib> #include <ctime> using namespace std ; // \u8981\u751f\u6210\u548c\u8fd4\u56de\u968f\u673a\u6570\u7684\u51fd\u6570 int * getRandom ( ) { static int r [ 10 ]; // \u8bbe\u7f6e\u79cd\u5b50 srand ( ( unsigned ) time ( NULL ) ); for ( int i = 0 ; i < 10 ; ++ i ) { r [ i ] = rand (); cout << r [ i ] << endl ; } return r ; } // \u8981\u8c03\u7528\u4e0a\u9762\u5b9a\u4e49\u51fd\u6570\u7684\u4e3b\u51fd\u6570 int main () { // \u4e00\u4e2a\u6307\u5411\u6574\u6570\u7684\u6307\u9488 int * p ; p = getRandom (); for ( int i = 0 ; i < 10 ; i ++ ) { cout << \"*(p + \" << i << \") : \" ; cout << * ( p + i ) << endl ; } return 0 ; }","title":"\u4ece\u51fd\u6570\u8fd4\u56de\u6570\u7ec4"},{"location":"cpp/%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86 iostream \u6807\u51c6\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86 cin \u548c cout \u65b9\u6cd5\u5206\u522b\u7528\u4e8e\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6d41\u548c\u5411\u6807\u51c6\u8f93\u51fa\u5199\u5165\u6d41\u3002 \u672c\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4ece\u6587\u4ef6\u8bfb\u53d6\u6d41\u548c\u5411\u6587\u4ef6\u5199\u5165\u6d41\u3002\u8fd9\u5c31\u9700\u8981\u7528\u5230 C++ \u4e2d\u53e6\u4e00\u4e2a\u6807\u51c6\u5e93 fstream\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e09\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff1a ofstream \u8be5\u6570\u636e\u7c7b\u578b\u8868\u793a\u8f93\u51fa\u6587\u4ef6\u6d41\uff0c\u7528\u4e8e\u521b\u5efa\u6587\u4ef6\u5e76\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\u3002 ifstream \u8be5\u6570\u636e\u7c7b\u578b\u8868\u793a\u8f93\u5165\u6587\u4ef6\u6d41\uff0c\u7528\u4e8e\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u3002 fstream \u8be5\u6570\u636e\u7c7b\u578b\u901a\u5e38\u8868\u793a\u6587\u4ef6\u6d41\uff0c\u4e14\u540c\u65f6\u5177\u6709 ofstream \u548c ifstream \u4e24\u79cd\u529f\u80fd\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u521b\u5efa\u6587\u4ef6\uff0c\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\uff0c\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u3002 \u8981\u5728 C++ \u4e2d\u8fdb\u884c\u6587\u4ef6\u5904\u7406\uff0c\u5fc5\u987b\u5728 C++ \u6e90\u4ee3\u7801\u6587\u4ef6\u4e2d\u5305\u542b\u5934\u6587\u4ef6 \u548c \u3002 \u6253\u5f00\u6587\u4ef6 \u00b6 \u5728\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u6216\u8005\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u6253\u5f00\u6587\u4ef6\u3002ofstream \u548c fstream \u5bf9\u8c61\u90fd\u53ef\u4ee5\u7528\u6765\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u5982\u679c\u53ea\u9700\u8981\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u5219\u4f7f\u7528 ifstream \u5bf9\u8c61\u3002 \u4e0b\u9762\u662f open() \u51fd\u6570\u7684\u6807\u51c6\u8bed\u6cd5\uff0copen() \u51fd\u6570\u662f fstream\u3001ifstream \u548c ofstream \u5bf9\u8c61\u7684\u4e00\u4e2a\u6210\u5458\u3002 void open ( const char * filename , ios :: openmode mode ); \u5728\u8fd9\u91cc\uff0copen() \u6210\u5458\u51fd\u6570\u7684\u7b2c\u4e00\u53c2\u6570\u6307\u5b9a\u8981\u6253\u5f00\u7684\u6587\u4ef6\u7684\u540d\u79f0\u548c\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5b9a\u4e49\u6587\u4ef6\u88ab\u6253\u5f00\u7684\u6a21\u5f0f\u3002 ios::app \u8ffd\u52a0\u6a21\u5f0f\u3002\u6240\u6709\u5199\u5165\u90fd\u8ffd\u52a0\u5230\u6587\u4ef6\u672b\u5c3e\u3002 ios::ate \u6587\u4ef6\u6253\u5f00\u540e\u5b9a\u4f4d\u5230\u6587\u4ef6\u672b\u5c3e\u3002 ios::in \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u8bfb\u53d6\u3002 ios::out \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u5199\u5165\u3002 ios::trunc \u5982\u679c\u8be5\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\uff0c\u5176\u5185\u5bb9\u5c06\u5728\u6253\u5f00\u6587\u4ef6\u4e4b\u524d\u88ab\u622a\u65ad\uff0c\u5373\u628a\u6587\u4ef6\u957f\u5ea6\u8bbe\u4e3a 0\u3002 \u60a8\u53ef\u4ee5\u628a\u4ee5\u4e0a\u4e24\u79cd\u6216\u4e24\u79cd\u4ee5\u4e0a\u7684\u6a21\u5f0f\u7ed3\u5408\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u60f3\u8981\u4ee5\u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5e0c\u671b\u622a\u65ad\u6587\u4ef6\uff0c\u4ee5\u9632\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\uff1a ofstream outfile ; outfile . open ( \"file.dat\" , ios :: out | ios :: trunc ); \u7c7b\u4f3c\u5730\uff0c\u60a8\u5982\u679c\u60f3\u8981\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\uff1a ifstream afile ; afile . open ( \"file.dat\" , ios :: out | ios :: in ); \u5173\u95ed\u6587\u4ef6 \u00b6 \u5f53 C++ \u7a0b\u5e8f\u7ec8\u6b62\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5173\u95ed\u5237\u65b0\u6240\u6709\u6d41\uff0c\u91ca\u653e\u6240\u6709\u5206\u914d\u7684\u5185\u5b58\uff0c\u5e76\u5173\u95ed\u6240\u6709\u6253\u5f00\u7684\u6587\u4ef6\u3002\u4f46\u7a0b\u5e8f\u5458\u5e94\u8be5\u517b\u6210\u4e00\u4e2a\u597d\u4e60\u60ef\uff0c\u5728\u7a0b\u5e8f\u7ec8\u6b62\u524d\u5173\u95ed\u6240\u6709\u6253\u5f00\u7684\u6587\u4ef6\u3002 \u4e0b\u9762\u662f close() \u51fd\u6570\u7684\u6807\u51c6\u8bed\u6cd5\uff0cclose() \u51fd\u6570\u662f fstream\u3001ifstream \u548c ofstream \u5bf9\u8c61\u7684\u4e00\u4e2a\u6210\u5458\u3002 void close (); \u5199\u5165\u6587\u4ef6 \u00b6 \u5728 C++ \u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26\uff08 << \uff09\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\uff0c\u5c31\u50cf\u4f7f\u7528\u8be5\u8fd0\u7b97\u7b26\u8f93\u51fa\u4fe1\u606f\u5230\u5c4f\u5e55\u4e0a\u4e00\u6837\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u60a8\u4f7f\u7528\u7684\u662f ofstream \u6216 fstream \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f cout \u5bf9\u8c61\u3002 \u8bfb\u53d6\u6587\u4ef6 \u00b6 \u5728 C++ \u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\uff08 >> \uff09\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\uff0c\u5c31\u50cf\u4f7f\u7528\u8be5\u8fd0\u7b97\u7b26\u4ece\u952e\u76d8\u8f93\u5165\u4fe1\u606f\u4e00\u6837\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u60a8\u4f7f\u7528\u7684\u662f ifstream \u6216 fstream \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f cin \u5bf9\u8c61\u3002 \u8bfb\u53d6 & \u5199\u5165\u5b9e\u4f8b \u00b6 \u4e0b\u9762\u7684 C++ \u7a0b\u5e8f\u4ee5\u8bfb\u5199\u6a21\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002\u5728\u5411\u6587\u4ef6 afile.dat \u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u4fe1\u606f\u4e4b\u540e\uff0c\u7a0b\u5e8f\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\uff1a #include <fstream> #include <iostream> using namespace std ; int main () { char data [ 100 ]; // \u4ee5\u5199\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 ofstream outfile ; outfile . open ( \"afile.dat\" ); cout << \"Writing to the file\" << endl ; cout << \"Enter your name: \" ; cin . getline ( data , 100 ); // \u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e outfile << data << endl ; cout << \"Enter your age: \" ; cin >> data ; cin . ignore (); // \u518d\u6b21\u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e outfile << data << endl ; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6 outfile . close (); // \u4ee5\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 ifstream infile ; infile . open ( \"afile.dat\" ); cout << \"Reading from the file\" << endl ; infile >> data ; // \u5728\u5c4f\u5e55\u4e0a\u5199\u5165\u6570\u636e cout << data << endl ; // \u518d\u6b21\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u663e\u793a\u5b83 infile >> data ; cout << data << endl ; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6 infile . close (); return 0 ; } \u4e0a\u9762\u7684\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u4e86 cin \u5bf9\u8c61\u7684\u9644\u52a0\u51fd\u6570\uff0c\u6bd4\u5982 getline()\u51fd\u6570\u4ece\u5916\u90e8\u8bfb\u53d6\u4e00\u884c\uff0cignore() \u51fd\u6570\u4f1a\u5ffd\u7565\u6389\u4e4b\u524d\u8bfb\u8bed\u53e5\u7559\u4e0b\u7684\u591a\u4f59\u5b57\u7b26\u3002 \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488 \u00b6 istream \u548c ostream \u90fd\u63d0\u4f9b\u4e86\u7528\u4e8e\u91cd\u65b0\u5b9a\u4f4d\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u6210\u5458\u51fd\u6570\u3002\u8fd9\u4e9b\u6210\u5458\u51fd\u6570\u5305\u62ec\u5173\u4e8e istream \u7684 seekg\uff08\"seek get\"\uff09\u548c\u5173\u4e8e ostream \u7684 seekp\uff08\"seek put\"\uff09\u3002 seekg \u548c seekp \u7684\u53c2\u6570\u901a\u5e38\u662f\u4e00\u4e2a\u957f\u6574\u578b\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u67e5\u627e\u65b9\u5411\u3002\u67e5\u627e\u65b9\u5411\u53ef\u4ee5\u662f ios::beg\uff08\u9ed8\u8ba4\u7684\uff0c\u4ece\u6d41\u7684\u5f00\u5934\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::cur\uff08\u4ece\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::end\uff08\u4ece\u6d41\u7684\u672b\u5c3e\u5f00\u59cb\u5b9a\u4f4d\uff09\u3002 \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u662f\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u6307\u5b9a\u4e86\u4ece\u6587\u4ef6\u7684\u8d77\u59cb\u4f4d\u7f6e\u5230\u6307\u9488\u6240\u5728\u4f4d\u7f6e\u7684\u5b57\u8282\u6570\u3002\u4e0b\u9762\u662f\u5173\u4e8e\u5b9a\u4f4d \"get\" \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u5b9e\u4f8b\uff1a // \u5b9a\u4f4d\u5230 fileObject \u7684\u7b2c n \u4e2a\u5b57\u8282\uff08\u5047\u8bbe\u662f ios::beg\uff09 fileObject . seekg ( n ); // \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u5f53\u524d\u4f4d\u7f6e\u5411\u540e\u79fb n \u4e2a\u5b57\u8282 fileObject . seekg ( n , ios :: cur ); // \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u672b\u5c3e\u5f80\u56de\u79fb n \u4e2a\u5b57\u8282 fileObject . seekg ( n , ios :: end ); // \u5b9a\u4f4d\u5230 fileObject \u7684\u672b\u5c3e fileObject . seekg ( 0 , ios :: end );","title":"\u6587\u4ef6\u548c\u6d41"},{"location":"cpp/%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/#_1","text":"\u5728\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u6216\u8005\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u6253\u5f00\u6587\u4ef6\u3002ofstream \u548c fstream \u5bf9\u8c61\u90fd\u53ef\u4ee5\u7528\u6765\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u5199\u64cd\u4f5c\uff0c\u5982\u679c\u53ea\u9700\u8981\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u5219\u4f7f\u7528 ifstream \u5bf9\u8c61\u3002 \u4e0b\u9762\u662f open() \u51fd\u6570\u7684\u6807\u51c6\u8bed\u6cd5\uff0copen() \u51fd\u6570\u662f fstream\u3001ifstream \u548c ofstream \u5bf9\u8c61\u7684\u4e00\u4e2a\u6210\u5458\u3002 void open ( const char * filename , ios :: openmode mode ); \u5728\u8fd9\u91cc\uff0copen() \u6210\u5458\u51fd\u6570\u7684\u7b2c\u4e00\u53c2\u6570\u6307\u5b9a\u8981\u6253\u5f00\u7684\u6587\u4ef6\u7684\u540d\u79f0\u548c\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5b9a\u4e49\u6587\u4ef6\u88ab\u6253\u5f00\u7684\u6a21\u5f0f\u3002 ios::app \u8ffd\u52a0\u6a21\u5f0f\u3002\u6240\u6709\u5199\u5165\u90fd\u8ffd\u52a0\u5230\u6587\u4ef6\u672b\u5c3e\u3002 ios::ate \u6587\u4ef6\u6253\u5f00\u540e\u5b9a\u4f4d\u5230\u6587\u4ef6\u672b\u5c3e\u3002 ios::in \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u8bfb\u53d6\u3002 ios::out \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u5199\u5165\u3002 ios::trunc \u5982\u679c\u8be5\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\uff0c\u5176\u5185\u5bb9\u5c06\u5728\u6253\u5f00\u6587\u4ef6\u4e4b\u524d\u88ab\u622a\u65ad\uff0c\u5373\u628a\u6587\u4ef6\u957f\u5ea6\u8bbe\u4e3a 0\u3002 \u60a8\u53ef\u4ee5\u628a\u4ee5\u4e0a\u4e24\u79cd\u6216\u4e24\u79cd\u4ee5\u4e0a\u7684\u6a21\u5f0f\u7ed3\u5408\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u60f3\u8981\u4ee5\u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5e0c\u671b\u622a\u65ad\u6587\u4ef6\uff0c\u4ee5\u9632\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\uff1a ofstream outfile ; outfile . open ( \"file.dat\" , ios :: out | ios :: trunc ); \u7c7b\u4f3c\u5730\uff0c\u60a8\u5982\u679c\u60f3\u8981\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\uff1a ifstream afile ; afile . open ( \"file.dat\" , ios :: out | ios :: in );","title":"\u6253\u5f00\u6587\u4ef6"},{"location":"cpp/%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/#_2","text":"\u5f53 C++ \u7a0b\u5e8f\u7ec8\u6b62\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5173\u95ed\u5237\u65b0\u6240\u6709\u6d41\uff0c\u91ca\u653e\u6240\u6709\u5206\u914d\u7684\u5185\u5b58\uff0c\u5e76\u5173\u95ed\u6240\u6709\u6253\u5f00\u7684\u6587\u4ef6\u3002\u4f46\u7a0b\u5e8f\u5458\u5e94\u8be5\u517b\u6210\u4e00\u4e2a\u597d\u4e60\u60ef\uff0c\u5728\u7a0b\u5e8f\u7ec8\u6b62\u524d\u5173\u95ed\u6240\u6709\u6253\u5f00\u7684\u6587\u4ef6\u3002 \u4e0b\u9762\u662f close() \u51fd\u6570\u7684\u6807\u51c6\u8bed\u6cd5\uff0cclose() \u51fd\u6570\u662f fstream\u3001ifstream \u548c ofstream \u5bf9\u8c61\u7684\u4e00\u4e2a\u6210\u5458\u3002 void close ();","title":"\u5173\u95ed\u6587\u4ef6"},{"location":"cpp/%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/#_3","text":"\u5728 C++ \u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26\uff08 << \uff09\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\uff0c\u5c31\u50cf\u4f7f\u7528\u8be5\u8fd0\u7b97\u7b26\u8f93\u51fa\u4fe1\u606f\u5230\u5c4f\u5e55\u4e0a\u4e00\u6837\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u60a8\u4f7f\u7528\u7684\u662f ofstream \u6216 fstream \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f cout \u5bf9\u8c61\u3002","title":"\u5199\u5165\u6587\u4ef6"},{"location":"cpp/%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/#_4","text":"\u5728 C++ \u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\uff08 >> \uff09\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\uff0c\u5c31\u50cf\u4f7f\u7528\u8be5\u8fd0\u7b97\u7b26\u4ece\u952e\u76d8\u8f93\u5165\u4fe1\u606f\u4e00\u6837\u3002\u552f\u4e00\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8fd9\u91cc\u60a8\u4f7f\u7528\u7684\u662f ifstream \u6216 fstream \u5bf9\u8c61\uff0c\u800c\u4e0d\u662f cin \u5bf9\u8c61\u3002","title":"\u8bfb\u53d6\u6587\u4ef6"},{"location":"cpp/%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/#_5","text":"\u4e0b\u9762\u7684 C++ \u7a0b\u5e8f\u4ee5\u8bfb\u5199\u6a21\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002\u5728\u5411\u6587\u4ef6 afile.dat \u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u4fe1\u606f\u4e4b\u540e\uff0c\u7a0b\u5e8f\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u5230\u5c4f\u5e55\u4e0a\uff1a #include <fstream> #include <iostream> using namespace std ; int main () { char data [ 100 ]; // \u4ee5\u5199\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 ofstream outfile ; outfile . open ( \"afile.dat\" ); cout << \"Writing to the file\" << endl ; cout << \"Enter your name: \" ; cin . getline ( data , 100 ); // \u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e outfile << data << endl ; cout << \"Enter your age: \" ; cin >> data ; cin . ignore (); // \u518d\u6b21\u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e outfile << data << endl ; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6 outfile . close (); // \u4ee5\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 ifstream infile ; infile . open ( \"afile.dat\" ); cout << \"Reading from the file\" << endl ; infile >> data ; // \u5728\u5c4f\u5e55\u4e0a\u5199\u5165\u6570\u636e cout << data << endl ; // \u518d\u6b21\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u663e\u793a\u5b83 infile >> data ; cout << data << endl ; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6 infile . close (); return 0 ; } \u4e0a\u9762\u7684\u5b9e\u4f8b\u4e2d\u4f7f\u7528\u4e86 cin \u5bf9\u8c61\u7684\u9644\u52a0\u51fd\u6570\uff0c\u6bd4\u5982 getline()\u51fd\u6570\u4ece\u5916\u90e8\u8bfb\u53d6\u4e00\u884c\uff0cignore() \u51fd\u6570\u4f1a\u5ffd\u7565\u6389\u4e4b\u524d\u8bfb\u8bed\u53e5\u7559\u4e0b\u7684\u591a\u4f59\u5b57\u7b26\u3002","title":"\u8bfb\u53d6 &amp; \u5199\u5165\u5b9e\u4f8b"},{"location":"cpp/%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/#_6","text":"istream \u548c ostream \u90fd\u63d0\u4f9b\u4e86\u7528\u4e8e\u91cd\u65b0\u5b9a\u4f4d\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u6210\u5458\u51fd\u6570\u3002\u8fd9\u4e9b\u6210\u5458\u51fd\u6570\u5305\u62ec\u5173\u4e8e istream \u7684 seekg\uff08\"seek get\"\uff09\u548c\u5173\u4e8e ostream \u7684 seekp\uff08\"seek put\"\uff09\u3002 seekg \u548c seekp \u7684\u53c2\u6570\u901a\u5e38\u662f\u4e00\u4e2a\u957f\u6574\u578b\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u67e5\u627e\u65b9\u5411\u3002\u67e5\u627e\u65b9\u5411\u53ef\u4ee5\u662f ios::beg\uff08\u9ed8\u8ba4\u7684\uff0c\u4ece\u6d41\u7684\u5f00\u5934\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::cur\uff08\u4ece\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::end\uff08\u4ece\u6d41\u7684\u672b\u5c3e\u5f00\u59cb\u5b9a\u4f4d\uff09\u3002 \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u662f\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u6307\u5b9a\u4e86\u4ece\u6587\u4ef6\u7684\u8d77\u59cb\u4f4d\u7f6e\u5230\u6307\u9488\u6240\u5728\u4f4d\u7f6e\u7684\u5b57\u8282\u6570\u3002\u4e0b\u9762\u662f\u5173\u4e8e\u5b9a\u4f4d \"get\" \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u5b9e\u4f8b\uff1a // \u5b9a\u4f4d\u5230 fileObject \u7684\u7b2c n \u4e2a\u5b57\u8282\uff08\u5047\u8bbe\u662f ios::beg\uff09 fileObject . seekg ( n ); // \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u5f53\u524d\u4f4d\u7f6e\u5411\u540e\u79fb n \u4e2a\u5b57\u8282 fileObject . seekg ( n , ios :: cur ); // \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u672b\u5c3e\u5f80\u56de\u79fb n \u4e2a\u5b57\u8282 fileObject . seekg ( n , ios :: end ); // \u5b9a\u4f4d\u5230 fileObject \u7684\u672b\u5c3e fileObject . seekg ( 0 , ios :: end );","title":"\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488"},{"location":"cpp/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/","text":"C++ \u6807\u51c6\u5e93\u6ca1\u6709\u63d0\u4f9b\u6240\u8c13\u7684\u65e5\u671f\u7c7b\u578b\u3002 C++ \u7ee7\u627f\u4e86 C \u8bed\u8a00\u7528\u4e8e\u65e5\u671f\u548c\u65f6\u95f4\u64cd\u4f5c\u7684\u7ed3\u6784\u548c\u51fd\u6570\u3002 \u4e3a\u4e86\u4f7f\u7528\u65e5\u671f\u548c\u65f6\u95f4\u76f8\u5173\u7684\u51fd\u6570\u548c\u7ed3\u6784\uff0c\u9700\u8981\u5728 C++ \u7a0b\u5e8f\u4e2d\u5f15\u7528 \u5934\u6587\u4ef6\u3002 \u6709\u56db\u4e2a\u4e0e\u65f6\u95f4\u76f8\u5173\u7684\u7c7b\u578b\uff1aclock_t\u3001time_t\u3001size_t \u548c tm\u3002 \u7c7b\u578b clock_t\u3001size_t \u548c time_t \u80fd\u591f\u628a\u7cfb\u7edf\u65f6\u95f4\u548c\u65e5\u671f\u8868\u793a\u4e3a\u67d0\u79cd\u6574\u6570\u3002 \u7ed3\u6784\u7c7b\u578b tm \u628a\u65e5\u671f\u548c\u65f6\u95f4\u4ee5 C \u7ed3\u6784\u7684\u5f62\u5f0f\u4fdd\u5b58\uff0ctm \u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a struct tm { int tm_sec ; // \u79d2\uff0c\u6b63\u5e38\u8303\u56f4\u4ece 0 \u5230 59\uff0c\u4f46\u5141\u8bb8\u81f3 61 int tm_min ; // \u5206\uff0c\u8303\u56f4\u4ece 0 \u5230 59 int tm_hour ; // \u5c0f\u65f6\uff0c\u8303\u56f4\u4ece 0 \u5230 23 int tm_mday ; // \u4e00\u6708\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 1 \u5230 31 int tm_mon ; // \u6708\uff0c\u8303\u56f4\u4ece 0 \u5230 11 int tm_year ; // \u81ea 1900 \u5e74\u8d77\u7684\u5e74\u6570 int tm_wday ; // \u4e00\u5468\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 0 \u5230 6\uff0c\u4ece\u661f\u671f\u65e5\u7b97\u8d77 int tm_yday ; // \u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 0 \u5230 365\uff0c\u4ece 1 \u6708 1 \u65e5\u7b97\u8d77 int tm_isdst ; // \u590f\u4ee4\u65f6 } \u4e0b\u9762\u662f C/C++ \u4e2d\u5173\u4e8e\u65e5\u671f\u548c\u65f6\u95f4\u7684\u91cd\u8981\u51fd\u6570\u3002\u6240\u6709\u8fd9\u4e9b\u51fd\u6570\u90fd\u662f C/C++ \u6807\u51c6\u5e93\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u60a8\u53ef\u4ee5\u5728 C++ \u6807\u51c6\u5e93\u4e2d\u67e5\u770b\u4e00\u4e0b\u5404\u4e2a\u51fd\u6570\u7684\u7ec6\u8282\u3002 \u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4 \u00b6 \u4e0b\u9762\u7684\u5b9e\u4f8b\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u5305\u62ec\u672c\u5730\u65f6\u95f4\u548c\u534f\u8c03\u4e16\u754c\u65f6\uff08UTC\uff09\u3002 #include <iostream> #include <ctime> using namespace std ; int main ( ) { // \u57fa\u4e8e\u5f53\u524d\u7cfb\u7edf\u7684\u5f53\u524d\u65e5\u671f/\u65f6\u95f4 time_t now = time ( 0 ); // \u628a now \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f char * dt = ctime ( & now ); cout << \"\u672c\u5730\u65e5\u671f\u548c\u65f6\u95f4\uff1a\" << dt << endl ; // \u628a now \u8f6c\u6362\u4e3a tm \u7ed3\u6784 tm * gmtm = gmtime ( & now ); dt = asctime ( gmtm ); cout << \"UTC \u65e5\u671f\u548c\u65f6\u95f4\uff1a\" << dt << endl ; } \u4f7f\u7528\u7ed3\u6784 tm \u683c\u5f0f\u5316\u65f6\u95f4 \u00b6 tm \u7ed3\u6784\u5728 C/C++ \u4e2d\u5904\u7406\u65e5\u671f\u548c\u65f6\u95f4\u76f8\u5173\u7684\u64cd\u4f5c\u65f6\uff0c\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002tm \u7ed3\u6784\u4ee5 C \u7ed3\u6784\u7684\u5f62\u5f0f\u4fdd\u5b58\u65e5\u671f\u548c\u65f6\u95f4\u3002\u5927\u591a\u6570\u4e0e\u65f6\u95f4\u76f8\u5173\u7684\u51fd\u6570\u90fd\u4f7f\u7528\u4e86 tm \u7ed3\u6784\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e86 tm \u7ed3\u6784\u548c\u5404\u79cd\u4e0e\u65e5\u671f\u548c\u65f6\u95f4\u76f8\u5173\u7684\u51fd\u6570\u3002 \u5728\u7ec3\u4e60\u4f7f\u7528\u7ed3\u6784\u4e4b\u524d\uff0c\u9700\u8981\u5bf9 C \u7ed3\u6784\u6709\u57fa\u672c\u7684\u4e86\u89e3\uff0c\u5e76\u61c2\u5f97\u5982\u4f55\u4f7f\u7528\u7bad\u5934 -> \u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u7ed3\u6784\u6210\u5458\u3002 #include <iostream> #include <ctime> using namespace std ; int main ( ) { // \u57fa\u4e8e\u5f53\u524d\u7cfb\u7edf\u7684\u5f53\u524d\u65e5\u671f/\u65f6\u95f4 time_t now = time ( 0 ); cout << \"1970 \u5230\u76ee\u524d\u7ecf\u8fc7\u79d2\u6570:\" << now << endl ; tm * ltm = localtime ( & now ); // \u8f93\u51fa tm \u7ed3\u6784\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206 cout << \"\u5e74: \" << 1900 + ltm -> tm_year << endl ; cout << \"\u6708: \" << 1 + ltm -> tm_mon << endl ; cout << \"\u65e5: \" << ltm -> tm_mday << endl ; cout << \"\u65f6\u95f4: \" << ltm -> tm_hour << \":\" ; cout << ltm -> tm_min << \":\" ; cout << ltm -> tm_sec << endl ; }","title":"\u65e5\u671f\u548c\u65f6\u95f4"},{"location":"cpp/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#_1","text":"\u4e0b\u9762\u7684\u5b9e\u4f8b\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u5305\u62ec\u672c\u5730\u65f6\u95f4\u548c\u534f\u8c03\u4e16\u754c\u65f6\uff08UTC\uff09\u3002 #include <iostream> #include <ctime> using namespace std ; int main ( ) { // \u57fa\u4e8e\u5f53\u524d\u7cfb\u7edf\u7684\u5f53\u524d\u65e5\u671f/\u65f6\u95f4 time_t now = time ( 0 ); // \u628a now \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f char * dt = ctime ( & now ); cout << \"\u672c\u5730\u65e5\u671f\u548c\u65f6\u95f4\uff1a\" << dt << endl ; // \u628a now \u8f6c\u6362\u4e3a tm \u7ed3\u6784 tm * gmtm = gmtime ( & now ); dt = asctime ( gmtm ); cout << \"UTC \u65e5\u671f\u548c\u65f6\u95f4\uff1a\" << dt << endl ; }","title":"\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4"},{"location":"cpp/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#tm","text":"tm \u7ed3\u6784\u5728 C/C++ \u4e2d\u5904\u7406\u65e5\u671f\u548c\u65f6\u95f4\u76f8\u5173\u7684\u64cd\u4f5c\u65f6\uff0c\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002tm \u7ed3\u6784\u4ee5 C \u7ed3\u6784\u7684\u5f62\u5f0f\u4fdd\u5b58\u65e5\u671f\u548c\u65f6\u95f4\u3002\u5927\u591a\u6570\u4e0e\u65f6\u95f4\u76f8\u5173\u7684\u51fd\u6570\u90fd\u4f7f\u7528\u4e86 tm \u7ed3\u6784\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4f7f\u7528\u4e86 tm \u7ed3\u6784\u548c\u5404\u79cd\u4e0e\u65e5\u671f\u548c\u65f6\u95f4\u76f8\u5173\u7684\u51fd\u6570\u3002 \u5728\u7ec3\u4e60\u4f7f\u7528\u7ed3\u6784\u4e4b\u524d\uff0c\u9700\u8981\u5bf9 C \u7ed3\u6784\u6709\u57fa\u672c\u7684\u4e86\u89e3\uff0c\u5e76\u61c2\u5f97\u5982\u4f55\u4f7f\u7528\u7bad\u5934 -> \u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u7ed3\u6784\u6210\u5458\u3002 #include <iostream> #include <ctime> using namespace std ; int main ( ) { // \u57fa\u4e8e\u5f53\u524d\u7cfb\u7edf\u7684\u5f53\u524d\u65e5\u671f/\u65f6\u95f4 time_t now = time ( 0 ); cout << \"1970 \u5230\u76ee\u524d\u7ecf\u8fc7\u79d2\u6570:\" << now << endl ; tm * ltm = localtime ( & now ); // \u8f93\u51fa tm \u7ed3\u6784\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206 cout << \"\u5e74: \" << 1900 + ltm -> tm_year << endl ; cout << \"\u6708: \" << 1 + ltm -> tm_mon << endl ; cout << \"\u65e5: \" << ltm -> tm_mday << endl ; cout << \"\u65f6\u95f4: \" << ltm -> tm_hour << \":\" ; cout << ltm -> tm_min << \":\" ; cout << ltm -> tm_sec << endl ; }","title":"\u4f7f\u7528\u7ed3\u6784 tm \u683c\u5f0f\u5316\u65f6\u95f4"},{"location":"cpp/%E6%A8%A1%E6%9D%BF/","text":"\u6a21\u677f\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u6cdb\u578b\u7f16\u7a0b\u5373\u4ee5\u4e00\u79cd\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7c7b\u578b\u7684\u65b9\u5f0f\u7f16\u5199\u4ee3\u7801\u3002 \u6a21\u677f\u662f\u521b\u5efa\u6cdb\u578b\u7c7b\u6216\u51fd\u6570\u7684\u84dd\u56fe\u6216\u516c\u5f0f\u3002\u5e93\u5bb9\u5668\uff0c\u6bd4\u5982\u8fed\u4ee3\u5668\u548c\u7b97\u6cd5\uff0c\u90fd\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u4f8b\u5b50\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e86\u6a21\u677f\u7684\u6982\u5ff5\u3002 \u6bcf\u4e2a\u5bb9\u5668\u90fd\u6709\u4e00\u4e2a\u5355\u4e00\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982 \u5411\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u8bb8\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u5411\u91cf\uff0c\u6bd4\u5982 vector \u6216 vector \u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u6a21\u677f\u6765\u5b9a\u4e49\u51fd\u6570\u548c\u7c7b\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u770b\u770b\u5982\u4f55\u4f7f\u7528\u3002 \u51fd\u6570\u6a21\u677f \u00b6 template < typename type > ret - type func - name ( parameter list ) { // \u51fd\u6570\u7684\u4e3b\u4f53 } \u5728\u8fd9\u91cc\uff0ctype \u662f\u51fd\u6570\u6240\u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\u7684\u5360\u4f4d\u7b26\u540d\u79f0\u3002\u8fd9\u4e2a\u540d\u79f0\u53ef\u4ee5\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u4f7f\u7528\u3002 \u4e0b\u9762\u662f\u51fd\u6570\u6a21\u677f\u7684\u5b9e\u4f8b\uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u7684\u6700\u5927\u503c\uff1a #include <iostream> #include <string> using namespace std ; template < typename T > inline T const & Max ( T const & a , T const & b ) { return a < b ? b : a ; } int main () { int i = 39 ; int j = 20 ; cout << \"Max(i, j): \" << Max ( i , j ) << endl ; double f1 = 13.5 ; double f2 = 20.7 ; cout << \"Max(f1, f2): \" << Max ( f1 , f2 ) << endl ; string s1 = \"Hello\" ; string s2 = \"World\" ; cout << \"Max(s1, s2): \" << Max ( s1 , s2 ) << endl ; return 0 ; } \u7c7b\u6a21\u677f \u00b6 \u6b63\u5982\u6211\u4eec\u5b9a\u4e49\u51fd\u6570\u6a21\u677f\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u7c7b\u6a21\u677f\u3002\u6cdb\u578b\u7c7b\u58f0\u660e\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\uff1a template < class type > class class - name { // . // . // . } \u5728\u8fd9\u91cc\uff0ctype \u662f\u5360\u4f4d\u7b26\u7c7b\u578b\u540d\u79f0\uff0c\u53ef\u4ee5\u5728\u7c7b\u88ab\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u8fdb\u884c\u6307\u5b9a\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\u6765\u5b9a\u4e49\u591a\u4e2a\u6cdb\u578b\u6570\u636e\u7c7b\u578b\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u5b9a\u4e49\u4e86\u7c7b Stack<>\uff0c\u5e76\u5b9e\u73b0\u4e86\u6cdb\u578b\u65b9\u6cd5\u6765\u5bf9\u5143\u7d20\u8fdb\u884c\u5165\u6808\u51fa\u6808\u64cd\u4f5c\uff1a #include <iostream> #include <vector> #include <cstdlib> #include <string> #include <stdexcept> using namespace std ; template < class T > class Stack { private : vector < T > elems ; // \u5143\u7d20 public : void push ( T const & ); // \u5165\u6808 void pop (); // \u51fa\u6808 T top () const ; // \u8fd4\u56de\u6808\u9876\u5143\u7d20 bool empty () const { // \u5982\u679c\u4e3a\u7a7a\u5219\u8fd4\u56de\u771f\u3002 return elems . empty (); } }; template < class T > void Stack < T >:: push ( T const & elem ) { // \u8ffd\u52a0\u4f20\u5165\u5143\u7d20\u7684\u526f\u672c elems . push_back ( elem ); } template < class T > void Stack < T >:: pop () { if ( elems . empty ()) { throw out_of_range ( \"Stack<>::pop() : empty stack \") ; } // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20 elems . pop_back (); } template < class T > T Stack < T >:: top () const { if ( elems . empty ()) { throw out_of_range ( \"Stack<>::top() : empty stack \") ; } // \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u526f\u672c return elems . back (); } int main () { try { Stack < int > intStack ; // int \u7c7b\u578b\u7684\u6808 Stack < string > stringStack ; // string \u7c7b\u578b\u7684\u6808 // \u64cd\u4f5c int \u7c7b\u578b\u7684\u6808 intStack . push ( 7 ); cout << intStack . top () << endl ; // \u64cd\u4f5c string \u7c7b\u578b\u7684\u6808 stringStack . push ( \"hello\" ); cout << stringStack . top () << std :: endl ; stringStack . pop (); stringStack . pop (); } catch ( exception const & ex ) { cerr << \"Exception: \" << ex . what () << endl ; return -1 ; } }","title":"\u6a21\u677f"},{"location":"cpp/%E6%A8%A1%E6%9D%BF/#_1","text":"template < typename type > ret - type func - name ( parameter list ) { // \u51fd\u6570\u7684\u4e3b\u4f53 } \u5728\u8fd9\u91cc\uff0ctype \u662f\u51fd\u6570\u6240\u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\u7684\u5360\u4f4d\u7b26\u540d\u79f0\u3002\u8fd9\u4e2a\u540d\u79f0\u53ef\u4ee5\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u4f7f\u7528\u3002 \u4e0b\u9762\u662f\u51fd\u6570\u6a21\u677f\u7684\u5b9e\u4f8b\uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u7684\u6700\u5927\u503c\uff1a #include <iostream> #include <string> using namespace std ; template < typename T > inline T const & Max ( T const & a , T const & b ) { return a < b ? b : a ; } int main () { int i = 39 ; int j = 20 ; cout << \"Max(i, j): \" << Max ( i , j ) << endl ; double f1 = 13.5 ; double f2 = 20.7 ; cout << \"Max(f1, f2): \" << Max ( f1 , f2 ) << endl ; string s1 = \"Hello\" ; string s2 = \"World\" ; cout << \"Max(s1, s2): \" << Max ( s1 , s2 ) << endl ; return 0 ; }","title":"\u51fd\u6570\u6a21\u677f"},{"location":"cpp/%E6%A8%A1%E6%9D%BF/#_2","text":"\u6b63\u5982\u6211\u4eec\u5b9a\u4e49\u51fd\u6570\u6a21\u677f\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u7c7b\u6a21\u677f\u3002\u6cdb\u578b\u7c7b\u58f0\u660e\u7684\u4e00\u822c\u5f62\u5f0f\u5982\u4e0b\u6240\u793a\uff1a template < class type > class class - name { // . // . // . } \u5728\u8fd9\u91cc\uff0ctype \u662f\u5360\u4f4d\u7b26\u7c7b\u578b\u540d\u79f0\uff0c\u53ef\u4ee5\u5728\u7c7b\u88ab\u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u8fdb\u884c\u6307\u5b9a\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5217\u8868\u6765\u5b9a\u4e49\u591a\u4e2a\u6cdb\u578b\u6570\u636e\u7c7b\u578b\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u5b9a\u4e49\u4e86\u7c7b Stack<>\uff0c\u5e76\u5b9e\u73b0\u4e86\u6cdb\u578b\u65b9\u6cd5\u6765\u5bf9\u5143\u7d20\u8fdb\u884c\u5165\u6808\u51fa\u6808\u64cd\u4f5c\uff1a #include <iostream> #include <vector> #include <cstdlib> #include <string> #include <stdexcept> using namespace std ; template < class T > class Stack { private : vector < T > elems ; // \u5143\u7d20 public : void push ( T const & ); // \u5165\u6808 void pop (); // \u51fa\u6808 T top () const ; // \u8fd4\u56de\u6808\u9876\u5143\u7d20 bool empty () const { // \u5982\u679c\u4e3a\u7a7a\u5219\u8fd4\u56de\u771f\u3002 return elems . empty (); } }; template < class T > void Stack < T >:: push ( T const & elem ) { // \u8ffd\u52a0\u4f20\u5165\u5143\u7d20\u7684\u526f\u672c elems . push_back ( elem ); } template < class T > void Stack < T >:: pop () { if ( elems . empty ()) { throw out_of_range ( \"Stack<>::pop() : empty stack \") ; } // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20 elems . pop_back (); } template < class T > T Stack < T >:: top () const { if ( elems . empty ()) { throw out_of_range ( \"Stack<>::top() : empty stack \") ; } // \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u526f\u672c return elems . back (); } int main () { try { Stack < int > intStack ; // int \u7c7b\u578b\u7684\u6808 Stack < string > stringStack ; // string \u7c7b\u578b\u7684\u6808 // \u64cd\u4f5c int \u7c7b\u578b\u7684\u6808 intStack . push ( 7 ); cout << intStack . top () << endl ; // \u64cd\u4f5c string \u7c7b\u578b\u7684\u6808 stringStack . push ( \"hello\" ); cout << stringStack . top () << std :: endl ; stringStack . pop (); stringStack . pop (); } catch ( exception const & ex ) { cerr << \"Exception: \" << ex . what () << endl ; return -1 ; } }","title":"\u7c7b\u6a21\u677f"},{"location":"cpp/%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/","text":"\u672c\u5730\u73af\u5883\u8bbe\u7f6e \u00b6 \u5982\u679c\u60a8\u60f3\u8981\u8bbe\u7f6e C++ \u8bed\u8a00\u73af\u5883\uff0c\u60a8\u9700\u8981\u786e\u4fdd\u7535\u8111\u4e0a\u6709\u4ee5\u4e0b\u4e24\u6b3e\u53ef\u7528\u7684\u8f6f\u4ef6\uff0c\u6587\u672c\u7f16\u8f91\u5668\u548c C++ \u7f16\u8bd1\u5668\u3002 \u6587\u672c\u7f16\u8f91\u5668 \u00b6 \u8fd9\u5c06\u7528\u4e8e\u8f93\u5165\u60a8\u7684\u7a0b\u5e8f\u3002\u6587\u672c\u7f16\u8f91\u5668\u5305\u62ec Windows Notepad\u3001OS Edit command\u3001Brief\u3001Epsilon\u3001EMACS \u548c vim/vi\u3002 C++ \u7f16\u8bd1\u5668 \u00b6 \u5199\u5728\u6e90\u6587\u4ef6\u4e2d\u7684\u6e90\u4ee3\u7801\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\u6e90\u3002\u5b83\u9700\u8981\"\u7f16\u8bd1\"\uff0c\u8f6c\u4e3a\u673a\u5668\u8bed\u8a00\uff0c\u8fd9\u6837 CPU \u53ef\u4ee5\u6309\u7ed9\u5b9a\u6307\u4ee4\u6267\u884c\u7a0b\u5e8f\u3002 C++ \u7f16\u8bd1\u5668\u7528\u4e8e\u628a\u6e90\u4ee3\u7801\u7f16\u8bd1\u6210\u6700\u7ec8\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u5927\u591a\u6570\u7684 C++ \u7f16\u8bd1\u5668\u5e76\u4e0d\u5728\u4e4e\u6e90\u6587\u4ef6\u7684\u6269\u5c55\u540d\uff0c\u4f46\u662f\u5982\u679c\u60a8\u672a\u6307\u5b9a\u6269\u5c55\u540d\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 .cpp\u3002 \u5b89\u88c5 GNU \u7684 C/C++ \u7f16\u8bd1\u5668 \u00b6 UNIX/Linux \u4e0a\u7684\u5b89\u88c5 \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Linux \u6216 UNIX\uff0c\u8bf7\u5728\u547d\u4ee4\u884c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u68c0\u67e5\u60a8\u7684\u7cfb\u7edf\u4e0a\u662f\u5426\u5b89\u88c5\u4e86 GCC\uff1a $ g++ -v \u5982\u679c\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u5df2\u7ecf\u5b89\u88c5\u4e86 GNU \u7f16\u8bd1\u5668\uff0c\u5219\u4f1a\u663e\u793a\u5982\u4e0b\u6d88\u606f\uff1a Using built-in specs. Target: i386-redhat-linux Configured with: ../configure --prefix=/usr ....... Thread model: posix gcc version 4.1.2 20080704 (Red Hat 4.1.2-46) \u5982\u679c\u672a\u5b89\u88c5 GCC\uff0c\u90a3\u4e48\u8bf7\u6309\u7167 http://gcc.gnu.org/install/ \u4e0a\u7684\u8be6\u7ec6\u8bf4\u660e\u5b89\u88c5 GCC\u3002","title":"\u73af\u5883\u8bbe\u7f6e"},{"location":"cpp/%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/#_1","text":"\u5982\u679c\u60a8\u60f3\u8981\u8bbe\u7f6e C++ \u8bed\u8a00\u73af\u5883\uff0c\u60a8\u9700\u8981\u786e\u4fdd\u7535\u8111\u4e0a\u6709\u4ee5\u4e0b\u4e24\u6b3e\u53ef\u7528\u7684\u8f6f\u4ef6\uff0c\u6587\u672c\u7f16\u8f91\u5668\u548c C++ \u7f16\u8bd1\u5668\u3002","title":"\u672c\u5730\u73af\u5883\u8bbe\u7f6e"},{"location":"cpp/%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/#_2","text":"\u8fd9\u5c06\u7528\u4e8e\u8f93\u5165\u60a8\u7684\u7a0b\u5e8f\u3002\u6587\u672c\u7f16\u8f91\u5668\u5305\u62ec Windows Notepad\u3001OS Edit command\u3001Brief\u3001Epsilon\u3001EMACS \u548c vim/vi\u3002","title":"\u6587\u672c\u7f16\u8f91\u5668"},{"location":"cpp/%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/#c","text":"\u5199\u5728\u6e90\u6587\u4ef6\u4e2d\u7684\u6e90\u4ee3\u7801\u662f\u4eba\u7c7b\u53ef\u8bfb\u7684\u6e90\u3002\u5b83\u9700\u8981\"\u7f16\u8bd1\"\uff0c\u8f6c\u4e3a\u673a\u5668\u8bed\u8a00\uff0c\u8fd9\u6837 CPU \u53ef\u4ee5\u6309\u7ed9\u5b9a\u6307\u4ee4\u6267\u884c\u7a0b\u5e8f\u3002 C++ \u7f16\u8bd1\u5668\u7528\u4e8e\u628a\u6e90\u4ee3\u7801\u7f16\u8bd1\u6210\u6700\u7ec8\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 \u5927\u591a\u6570\u7684 C++ \u7f16\u8bd1\u5668\u5e76\u4e0d\u5728\u4e4e\u6e90\u6587\u4ef6\u7684\u6269\u5c55\u540d\uff0c\u4f46\u662f\u5982\u679c\u60a8\u672a\u6307\u5b9a\u6269\u5c55\u540d\uff0c\u5219\u9ed8\u8ba4\u4f7f\u7528 .cpp\u3002","title":"C++ \u7f16\u8bd1\u5668"},{"location":"cpp/%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/#gnu-cc","text":"UNIX/Linux \u4e0a\u7684\u5b89\u88c5 \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Linux \u6216 UNIX\uff0c\u8bf7\u5728\u547d\u4ee4\u884c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u68c0\u67e5\u60a8\u7684\u7cfb\u7edf\u4e0a\u662f\u5426\u5b89\u88c5\u4e86 GCC\uff1a $ g++ -v \u5982\u679c\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u5df2\u7ecf\u5b89\u88c5\u4e86 GNU \u7f16\u8bd1\u5668\uff0c\u5219\u4f1a\u663e\u793a\u5982\u4e0b\u6d88\u606f\uff1a Using built-in specs. Target: i386-redhat-linux Configured with: ../configure --prefix=/usr ....... Thread model: posix gcc version 4.1.2 20080704 (Red Hat 4.1.2-46) \u5982\u679c\u672a\u5b89\u88c5 GCC\uff0c\u90a3\u4e48\u8bf7\u6309\u7167 http://gcc.gnu.org/install/ \u4e0a\u7684\u8be6\u7ec6\u8bf4\u660e\u5b89\u88c5 GCC\u3002","title":"\u5b89\u88c5 GNU \u7684 C/C++ \u7f16\u8bd1\u5668"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/","text":"C++ \u5728 C \u8bed\u8a00\u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e86\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0cC++ \u652f\u6301\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u3002\u7c7b\u662f C++ \u7684\u6838\u5fc3\u7279\u6027\uff0c\u901a\u5e38\u88ab\u79f0\u4e3a\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u3002 \u7c7b\u7528\u4e8e\u6307\u5b9a\u5bf9\u8c61\u7684\u5f62\u5f0f\uff0c\u5b83\u5305\u542b\u4e86\u6570\u636e\u8868\u793a\u6cd5\u548c\u7528\u4e8e\u5904\u7406\u6570\u636e\u7684\u65b9\u6cd5\u3002\u7c7b\u4e2d\u7684\u6570\u636e\u548c\u65b9\u6cd5\u79f0\u4e3a\u7c7b\u7684\u6210\u5458\u3002\u51fd\u6570\u5728\u4e00\u4e2a\u7c7b\u4e2d\u88ab\u79f0\u4e3a\u7c7b\u7684\u6210\u5458\u3002 C++ \u7c7b\u5b9a\u4e49 \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u672c\u8d28\u4e0a\u662f\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u7684\u84dd\u56fe\u3002\u8fd9\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u6570\u636e\uff0c\u4f46\u5b83\u5b9a\u4e49\u4e86\u7c7b\u7684\u540d\u79f0\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5b9a\u4e49\u4e86\u7c7b\u7684\u5bf9\u8c61\u5305\u62ec\u4e86\u4ec0\u4e48\uff0c\u4ee5\u53ca\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u6267\u884c\u54ea\u4e9b\u64cd\u4f5c\u3002 \u7c7b\u5b9a\u4e49\u662f\u4ee5\u5173\u952e\u5b57 class \u5f00\u5934\uff0c\u540e\u8ddf\u7c7b\u7684\u540d\u79f0\u3002\u7c7b\u7684\u4e3b\u4f53\u662f\u5305\u542b\u5728\u4e00\u5bf9\u82b1\u62ec\u53f7\u4e2d\u3002 \u7c7b\u5b9a\u4e49\u540e\u5fc5\u987b\u8ddf\u7740\u4e00\u4e2a\u5206\u53f7\u6216\u4e00\u4e2a\u58f0\u660e\u5217\u8868\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u5173\u952e\u5b57 class \u5b9a\u4e49 Box \u6570\u636e\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Box { public : double length ; // \u76d2\u5b50\u7684\u957f\u5ea6 double weight ; // \u76d2\u5b50\u7684\u5bbd\u5ea6 double height ; // \u76d2\u5b50\u7684\u9ad8\u5ea6 }; \u5173\u952e\u5b57 public \u786e\u5b9a\u4e86\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u3002\u5728\u7c7b\u5bf9\u8c61\u4f5c\u7528\u57df\u5185\uff0c\u516c\u5171\u6210\u5458\u5728\u7c7b\u7684\u5916\u90e8\u662f\u53ef\u8bbf\u95ee\u7684\u3002 \u5b9a\u4e49 C++ \u5bf9\u8c61 \u00b6 \u7c7b\u63d0\u4f9b\u4e86\u5bf9\u8c61\u7684\u84dd\u56fe\uff0c\u6240\u4ee5\u57fa\u672c\u4e0a\uff0c\u5bf9\u8c61\u662f\u6839\u636e\u7c7b\u6765\u521b\u5efa\u7684\u3002\u58f0\u660e\u7c7b\u7684\u5bf9\u8c61\uff0c\u5c31\u50cf\u58f0\u660e\u57fa\u672c\u7c7b\u578b\u7684\u53d8\u91cf\u4e00\u6837\u3002 \u4e0b\u9762\u7684\u8bed\u53e5\u58f0\u660e\u4e86\u7c7b Box \u7684\u4e24\u4e2a\u5bf9\u8c61\uff1a Box Box1 ; // \u58f0\u660e Box1\uff0c\u7c7b\u578b\u4e3a Box Box Box2 ; // \u58f0\u660e Box2\uff0c\u7c7b\u578b\u4e3a Box \u8bbf\u95ee\u6570\u636e\u6210\u5458 \u00b6 \u7c7b\u7684\u5bf9\u8c61\u7684\u516c\u5171\u6570\u636e\u6210\u5458\u53ef\u4ee5\u4f7f\u7528\u76f4\u63a5\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26 (.) \u6765\u8bbf\u95ee\u3002 #include <iostream> using namespace std ; class Box { public : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; int main ( ) { Box Box1 ; // \u58f0\u660e Box1\uff0c\u7c7b\u578b\u4e3a Box Box Box2 ; // \u58f0\u660e Box2\uff0c\u7c7b\u578b\u4e3a Box double volume = 0.0 ; // \u7528\u4e8e\u5b58\u50a8\u4f53\u79ef // box 1 \u8be6\u8ff0 Box1 . height = 5.0 ; Box1 . length = 6.0 ; Box1 . breadth = 7.0 ; // box 2 \u8be6\u8ff0 Box2 . height = 10.0 ; Box2 . length = 12.0 ; Box2 . breadth = 13.0 ; // box 1 \u7684\u4f53\u79ef volume = Box1 . height * Box1 . length * Box1 . breadth ; cout << \"Box1 \u7684\u4f53\u79ef\uff1a\" << volume << endl ; // box 2 \u7684\u4f53\u79ef volume = Box2 . height * Box2 . length * Box2 . breadth ; cout << \"Box2 \u7684\u4f53\u79ef\uff1a\" << volume << endl ; return 0 ; } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u79c1\u6709\u7684\u6210\u5458\u548c\u53d7\u4fdd\u62a4\u7684\u6210\u5458\u4e0d\u80fd\u4f7f\u7528\u76f4\u63a5\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26 (.) \u6765\u76f4\u63a5\u8bbf\u95ee\u3002 \u7c7b\u6210\u5458\u51fd\u6570 \u00b6 \u7c7b\u7684\u6210\u5458\u51fd\u6570\u662f\u6307\u90a3\u4e9b\u628a\u5b9a\u4e49\u548c\u539f\u578b\u5199\u5728\u7c7b\u5b9a\u4e49\u5185\u90e8\u7684\u51fd\u6570\uff0c\u5c31\u50cf\u7c7b\u5b9a\u4e49\u4e2d\u7684\u5176\u4ed6\u53d8\u91cf\u4e00\u6837\u3002 \u7c7b\u6210\u5458\u51fd\u6570\u662f\u7c7b\u7684\u4e00\u4e2a\u6210\u5458\uff0c\u5b83\u53ef\u4ee5\u64cd\u4f5c\u7c7b\u7684\u4efb\u610f\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u6210\u5458\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4e4b\u524d\u5b9a\u4e49\u7684\u7c7b Box\uff0c\u73b0\u5728\u6211\u4eec\u8981\u4f7f\u7528\u6210\u5458\u51fd\u6570\u6765\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e9b\u7c7b\u7684\u6210\u5458\uff1a class Box { public : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 double getVolume ( void ); // \u8fd4\u56de\u4f53\u79ef }; \u6210\u5458\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u5728\u7c7b\u5b9a\u4e49\u5185\u90e8\uff0c\u6216\u8005\u5355\u72ec\u4f7f\u7528\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u6765\u5b9a\u4e49\u3002 \u5728\u7c7b\u5b9a\u4e49\u4e2d\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u628a\u51fd\u6570\u58f0\u660e\u4e3a\u5185\u8054\u7684\uff0c\u5373\u4fbf\u6ca1\u6709\u4f7f\u7528 inline \u6807\u8bc6\u7b26\u3002\u6240\u4ee5\u60a8\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49 Volume() \u51fd\u6570\uff1a class Box { public : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 double getVolume ( void ) { return length * breadth * height ; } }; \u60a8\u4e5f\u53ef\u4ee5\u5728\u7c7b\u7684\u5916\u90e8\u4f7f\u7528\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u5b9a\u4e49\u8be5\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a double Box :: getVolume ( void ) { return length * breadth * height ; } \u5728\u8fd9\u91cc\uff0c\u9700\u8981\u5f3a\u8c03\u4e00\u70b9\uff0c\u5728 :: \u8fd0\u7b97\u7b26\u4e4b\u524d\u5fc5\u987b\u4f7f\u7528\u7c7b\u540d\u3002\u8c03\u7528\u6210\u5458\u51fd\u6570\u662f\u5728\u5bf9\u8c61\u4e0a\u4f7f\u7528\u70b9\u8fd0\u7b97\u7b26\uff08.\uff09\uff0c\u8fd9\u6837\u5b83\u5c31\u80fd\u64cd\u4f5c\u4e0e\u8be5\u5bf9\u8c61\u76f8\u5173\u7684\u6570\u636e\uff0c \u5982\u4e0b\u6240\u793a\uff1a Box myBox ; // \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 myBox . getVolume (); // \u8c03\u7528\u8be5\u5bf9\u8c61\u7684\u6210\u5458\u51fd\u6570 \u8ba9\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u6982\u5ff5\u6765\u8bbe\u7f6e\u548c\u83b7\u53d6\u7c7b\u4e2d\u4e0d\u540c\u7684\u6210\u5458\u7684\u503c\uff1a #include <iostream> using namespace std ; class Box { public : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 // \u6210\u5458\u51fd\u6570\u58f0\u660e double getVolume ( void ); void setLength ( double len ); void setBreadth ( double bre ); void setHeight ( double hei ); }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49 double Box :: getVolume ( void ) { return length * breadth * height ; } void Box :: setLength ( double len ) { length = len ; } void Box :: setBreadth ( double bre ) { breadth = bre ; } void Box :: setHeight ( double hei ) { height = hei ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Box Box1 ; // \u58f0\u660e Box1\uff0c\u7c7b\u578b\u4e3a Box Box Box2 ; // \u58f0\u660e Box2\uff0c\u7c7b\u578b\u4e3a Box double volume = 0.0 ; // \u7528\u4e8e\u5b58\u50a8\u4f53\u79ef // box 1 \u8be6\u8ff0 Box1 . setLength ( 6.0 ); Box1 . setBreadth ( 7.0 ); Box1 . setHeight ( 5.0 ); // box 2 \u8be6\u8ff0 Box2 . setLength ( 12.0 ); Box2 . setBreadth ( 13.0 ); Box2 . setHeight ( 10.0 ); // box 1 \u7684\u4f53\u79ef volume = Box1 . getVolume (); cout << \"Box1 \u7684\u4f53\u79ef\uff1a\" << volume << endl ; // box 2 \u7684\u4f53\u79ef volume = Box2 . getVolume (); cout << \"Box2 \u7684\u4f53\u79ef\uff1a\" << volume << endl ; return 0 ; } \u7c7b\u8bbf\u95ee\u4fee\u9970\u7b26 \u00b6 \u6570\u636e\u5c01\u88c5\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff0c\u5b83\u9632\u6b62\u51fd\u6570\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7c7b\u578b\u7684\u5185\u90e8\u6210\u5458\u3002 \u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u9650\u5236\u662f\u901a\u8fc7\u5728\u7c7b\u4e3b\u4f53\u5185\u90e8\u5bf9\u5404\u4e2a\u533a\u57df\u6807\u8bb0 public\u3001private\u3001protected \u6765\u6307\u5b9a\u7684\u3002\u5173\u952e\u5b57 public\u3001private\u3001protected \u79f0\u4e3a\u8bbf\u95ee\u4fee\u9970\u7b26\u3002 \u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a public\u3001protected \u6216 private \u6807\u8bb0\u533a\u57df\u3002\u6bcf\u4e2a\u6807\u8bb0\u533a\u57df\u5728\u4e0b\u4e00\u4e2a\u6807\u8bb0\u533a\u57df\u5f00\u59cb\u4e4b\u524d\u6216\u8005\u5728\u9047\u5230\u7c7b\u4e3b\u4f53\u7ed3\u675f\u53f3\u62ec\u53f7\u4e4b\u524d\u90fd\u662f\u6709\u6548\u7684\u3002 \u6210\u5458\u548c\u7c7b\u7684\u9ed8\u8ba4\u8bbf\u95ee\u4fee\u9970\u7b26\u662f private\u3002 \u516c\u6709\uff08public\uff09\u6210\u5458 \u00b6 \u516c\u6709\u6210\u5458\u5728\u7a0b\u5e8f\u4e2d\u7c7b\u7684\u5916\u90e8\u662f\u53ef\u8bbf\u95ee\u7684\u3002\u60a8\u53ef\u4ee5\u4e0d\u4f7f\u7528\u4efb\u4f55\u6210\u5458\u51fd\u6570\u6765\u8bbe\u7f6e\u548c\u83b7\u53d6\u516c\u6709\u53d8\u91cf\u7684\u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; class Line { public : double length ; void setLength ( double len ); double getLength ( void ); }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49 double Line :: getLength ( void ) { return length ; } void Line :: setLength ( double len ) { length = len ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ; // \u8bbe\u7f6e\u957f\u5ea6 line . setLength ( 6.0 ); cout << \"Length of line : \" << line . getLength () << endl ; // \u4e0d\u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u957f\u5ea6 line . length = 10.0 ; // OK: \u56e0\u4e3a length \u662f\u516c\u6709\u7684 cout << \"Length of line : \" << line . length << endl ; return 0 ; } \u79c1\u6709\uff08private\uff09\u6210\u5458 \u00b6 \u79c1\u6709\u6210\u5458\u53d8\u91cf\u6216\u51fd\u6570\u5728\u7c7b\u7684\u5916\u90e8\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u67e5\u770b\u7684\u3002\u53ea\u6709\u7c7b\u548c\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u6210\u5458\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u7684\u6240\u6709\u6210\u5458\u90fd\u662f\u79c1\u6709\u7684\u3002 \u4f8b\u5982\u5728\u4e0b\u9762\u7684\u7c7b\u4e2d\uff0cwidth \u662f\u4e00\u4e2a\u79c1\u6709\u6210\u5458\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u60a8\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u7c7b\u7684\u6210\u5458\u5c06\u88ab\u5047\u5b9a\u4e3a\u79c1\u6709\u6210\u5458\uff1a class Box { double width ; public : double length ; void setWidth ( double wid ); double getWidth ( void ); }; \u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u5728\u79c1\u6709\u533a\u57df\u5b9a\u4e49\u6570\u636e\uff0c\u5728\u516c\u6709\u533a\u57df\u5b9a\u4e49\u76f8\u5173\u7684\u51fd\u6570\uff0c\u4ee5\u4fbf\u5728\u7c7b\u7684\u5916\u90e8\u4e5f\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; class Box { public : double length ; void setWidth ( double wid ); double getWidth ( void ); private : double width ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49 double Box :: getWidth ( void ) { return width ; } void Box :: setWidth ( double wid ) { width = wid ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Box box ; // \u4e0d\u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u957f\u5ea6 box . length = 10.0 ; // OK: \u56e0\u4e3a length \u662f\u516c\u6709\u7684 cout << \"Length of box : \" << box . length << endl ; // \u4e0d\u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u5bbd\u5ea6 // box.width = 10.0; // Error: \u56e0\u4e3a width \u662f\u79c1\u6709\u7684 box . setWidth ( 10.0 ); // \u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u5bbd\u5ea6 cout << \"Width of box : \" << box . getWidth () << endl ; return 0 ; } \u4fdd\u62a4\uff08protected\uff09\u6210\u5458 \u00b6 \u4fdd\u62a4\u6210\u5458\u53d8\u91cf\u6216\u51fd\u6570\u4e0e\u79c1\u6709\u6210\u5458\u5341\u5206\u76f8\u4f3c\uff0c\u4f46\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u4fdd\u62a4\u6210\u5458\u5728\u6d3e\u751f\u7c7b\uff08\u5373\u5b50\u7c7b\uff09\u4e2d\u662f\u53ef\u8bbf\u95ee\u7684\u3002 \u4ece\u7236\u7c7b Box \u6d3e\u751f\u4e86\u4e00\u4e2a\u5b50\u7c7b smallBox\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e0e\u524d\u9762\u7684\u5b9e\u4f8b\u7c7b\u4f3c\uff0c\u5728\u8fd9\u91cc width \u6210\u5458\u53ef\u88ab\u6d3e\u751f\u7c7b smallBox \u7684\u4efb\u4f55\u6210\u5458\u51fd\u6570\u8bbf\u95ee\u3002 #include <iostream> using namespace std ; class Box { protected : double width ; }; class SmallBox : Box // SmallBox \u662f\u6d3e\u751f\u7c7b { public : void setSmallWidth ( double wid ); double getSmallWidth ( void ); }; // \u5b50\u7c7b\u7684\u6210\u5458\u51fd\u6570 double SmallBox :: getSmallWidth ( void ) { return width ; } void SmallBox :: setSmallWidth ( double wid ) { width = wid ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { SmallBox box ; // \u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u5bbd\u5ea6 box . setSmallWidth ( 5.0 ); cout << \"Width of box : \" << box . getSmallWidth () << endl ; return 0 ; } \u7ee7\u627f\u4e2d\u7684\u7279\u70b9 \u00b6 \u6709public, protected, private\u4e09\u79cd\u7ee7\u627f\u65b9\u5f0f\uff0c\u5b83\u4eec\u76f8\u5e94\u5730\u6539\u53d8\u4e86\u57fa\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u3002 public \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\uff0cprotected \u6210\u5458\uff0cprivate \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1apublic, protected, private protected \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\uff0cprotected \u6210\u5458\uff0cprivate \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1aprotected, protected, private private \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\uff0cprotected \u6210\u5458\uff0cprivate \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1aprivate, private, private \u4f46\u65e0\u8bba\u54ea\u79cd\u7ee7\u627f\u65b9\u5f0f\uff0c\u4e0b\u9762\u4e24\u70b9\u90fd\u6ca1\u6709\u6539\u53d8\uff1a private \u6210\u5458\u53ea\u80fd\u88ab\u672c\u7c7b\u6210\u5458\uff08\u7c7b\u5185\uff09\u548c\u53cb\u5143\u8bbf\u95ee\uff0c\u4e0d\u80fd\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\uff1b protected \u6210\u5458\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 public \u7ee7\u627f \u00b6 #include <iostream> #include <assert.h> using namespace std ; class A { public : int a ; A (){ a1 = 1 ; a2 = 2 ; a3 = 3 ; a = 4 ; } void fun (){ cout << a << endl ; //\u6b63\u786e cout << a1 << endl ; //\u6b63\u786e cout << a2 << endl ; //\u6b63\u786e cout << a3 << endl ; //\u6b63\u786e } public : int a1 ; protected : int a2 ; private : int a3 ; }; class B : public A { public : int a ; B ( int i ){ A (); a = i ; } void fun (){ cout << a << endl ; //\u6b63\u786e\uff0cpublic\u6210\u5458 cout << a1 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684public\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u4ecd\u662fpublic\u6210\u5458\u3002 cout << a2 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684protected\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u4ecd\u662fprotected\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a3 << endl ; //\u9519\u8bef\uff0c\u57fa\u7c7b\u7684private\u6210\u5458\u4e0d\u80fd\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 } }; int main (){ B b ( 10 ); cout << b . a << endl ; cout << b . a1 << endl ; //\u6b63\u786e cout << b . a2 << endl ; //\u9519\u8bef\uff0c\u7c7b\u5916\u4e0d\u80fd\u8bbf\u95eeprotected\u6210\u5458 cout << b . a3 << endl ; //\u9519\u8bef\uff0c\u7c7b\u5916\u4e0d\u80fd\u8bbf\u95eeprivate\u6210\u5458 system ( \"pause\" ); return 0 ; } protected \u7ee7\u627f \u00b6 #include <iostream> #include <assert.h> using namespace std ; class A { public : int a ; A (){ a1 = 1 ; a2 = 2 ; a3 = 3 ; a = 4 ; } void fun (){ cout << a << endl ; //\u6b63\u786e cout << a1 << endl ; //\u6b63\u786e cout << a2 << endl ; //\u6b63\u786e cout << a3 << endl ; //\u6b63\u786e } public : int a1 ; protected : int a2 ; private : int a3 ; }; class B : protected A { public : int a ; B ( int i ){ A (); a = i ; } void fun (){ cout << a << endl ; //\u6b63\u786e\uff0cpublic\u6210\u5458\u3002 cout << a1 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684public\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u53d8\u6210\u4e86protected\uff0c\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a2 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684protected\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u8fd8\u662fprotected\uff0c\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a3 << endl ; //\u9519\u8bef\uff0c\u57fa\u7c7b\u7684private\u6210\u5458\u4e0d\u80fd\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 } }; int main (){ B b ( 10 ); cout << b . a << endl ; //\u6b63\u786e\u3002public\u6210\u5458 cout << b . a1 << endl ; //\u9519\u8bef\uff0cprotected\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 cout << b . a2 << endl ; //\u9519\u8bef\uff0cprotected\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 cout << b . a3 << endl ; //\u9519\u8bef\uff0cprivate\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 system ( \"pause\" ); return 0 ; private \u7ee7\u627f \u00b6 #include <iostream> #include <assert.h> using namespace std ; class A { public : int a ; A (){ a1 = 1 ; a2 = 2 ; a3 = 3 ; a = 4 ; } void fun (){ cout << a << endl ; //\u6b63\u786e cout << a1 << endl ; //\u6b63\u786e cout << a2 << endl ; //\u6b63\u786e cout << a3 << endl ; //\u6b63\u786e } public : int a1 ; protected : int a2 ; private : int a3 ; }; class B : private A { public : int a ; B ( int i ){ A (); a = i ; } void fun (){ cout << a << endl ; //\u6b63\u786e\uff0cpublic\u6210\u5458\u3002 cout << a1 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7bpublic\u6210\u5458,\u5728\u6d3e\u751f\u7c7b\u4e2d\u53d8\u6210\u4e86private,\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a2 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684protected\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u53d8\u6210\u4e86private,\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a3 << endl ; //\u9519\u8bef\uff0c\u57fa\u7c7b\u7684private\u6210\u5458\u4e0d\u80fd\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 } }; int main (){ B b ( 10 ); cout << b . a << endl ; //\u6b63\u786e\u3002public\u6210\u5458 cout << b . a1 << endl ; //\u9519\u8bef\uff0cprivate\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 cout << b . a2 << endl ; //\u9519\u8bef, private\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 cout << b . a3 << endl ; //\u9519\u8bef\uff0cprivate\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 system ( \"pause\" ); return 0 ; } \u7c7b\u6784\u9020\u51fd\u6570 & \u6790\u6784\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570 \u00b6 \u7c7b\u7684\u6784\u9020\u51fd\u6570\u662f\u7c7b\u7684\u4e00\u79cd\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u521b\u5efa\u7c7b\u7684\u65b0\u5bf9\u8c61\u65f6\u6267\u884c\u3002 \u6784\u9020\u51fd\u6570\u7684\u540d\u79f0\u4e0e\u7c7b\u7684\u540d\u79f0\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u7c7b\u578b\uff0c\u4e5f\u4e0d\u4f1a\u8fd4\u56de void\u3002\u6784\u9020\u51fd\u6570\u53ef\u7528\u4e8e\u4e3a\u67d0\u4e9b\u6210\u5458\u53d8\u91cf\u8bbe\u7f6e\u521d\u59cb\u503c\u3002 #include <iostream> using namespace std ; class Line { public : void setLength ( double len ); double getLength ( void ); Line (); // \u8fd9\u662f\u6784\u9020\u51fd\u6570 private : double length ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( void ) { cout << \"Object is being created\" << endl ; } void Line :: setLength ( double len ) { length = len ; } double Line :: getLength ( void ) { return length ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ; // \u8bbe\u7f6e\u957f\u5ea6 line . setLength ( 6.0 ); cout << \"Length of line : \" << line . getLength () << endl ; return 0 ; } \u5e26\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570 \u00b6 \u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0c\u4f46\u5982\u679c\u9700\u8981\uff0c\u6784\u9020\u51fd\u6570\u4e5f\u53ef\u4ee5\u5e26\u6709\u53c2\u6570\u3002\u8fd9\u6837\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5c31\u4f1a\u7ed9\u5bf9\u8c61\u8d4b\u521d\u59cb\u503c\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u6240\u793a\uff1a #include <iostream> using namespace std ; class Line { public : void setLength ( double len ); double getLength ( void ); Line ( double len ); // \u8fd9\u662f\u6784\u9020\u51fd\u6570 private : double length ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( double len ) { cout << \"Object is being created, length = \" << len << endl ; length = len ; } void Line :: setLength ( double len ) { length = len ; } double Line :: getLength ( void ) { return length ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ( 10.0 ); // \u83b7\u53d6\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u957f\u5ea6 cout << \"Length of line : \" << line . getLength () << endl ; // \u518d\u6b21\u8bbe\u7f6e\u957f\u5ea6 line . setLength ( 6.0 ); cout << \"Length of line : \" << line . getLength () << endl ; return 0 ; } \u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316\u5b57\u6bb5 \u00b6 Line :: Line ( double len ) : length ( len ) { cout << \"Object is being created, length = \" << len << endl ; } \u4e0a\u9762\u7684\u8bed\u6cd5\u7b49\u540c\u4e8e\u5982\u4e0b\u8bed\u6cd5\uff1a Line :: Line ( double len ) { length = len ; cout << \"Object is being created, length = \" << len << endl ; } \u5047\u8bbe\u6709\u4e00\u4e2a\u7c7b C\uff0c\u5177\u6709\u591a\u4e2a\u5b57\u6bb5 X\u3001Y\u3001Z \u7b49\u9700\u8981\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u540c\u7406\u5730\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u8bed\u6cd5\uff0c\u53ea\u9700\u8981\u5728\u4e0d\u540c\u7684\u5b57\u6bb5\u4f7f\u7528\u9017\u53f7\u8fdb\u884c\u5206\u9694\uff0c\u5982\u4e0b\u6240\u793a\uff1a C :: C ( double a , double b , double c ) : X ( a ), Y ( b ), Z ( c ) { //.... } \u6790\u6784\u51fd\u6570 \u00b6 \u7c7b\u7684\u6790\u6784\u51fd\u6570\u662f\u7c7b\u7684\u4e00\u79cd\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u5220\u9664\u6240\u521b\u5efa\u7684\u5bf9\u8c61\u65f6\u6267\u884c\u3002 \u6790\u6784\u51fd\u6570\u7684\u540d\u79f0\u4e0e\u7c7b\u7684\u540d\u79f0\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u662f\u5728\u524d\u9762\u52a0\u4e86\u4e2a\u6ce2\u6d6a\u53f7\uff08~\uff09\u4f5c\u4e3a\u524d\u7f00\uff0c\u5b83\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u503c\uff0c\u4e5f\u4e0d\u80fd\u5e26\u6709\u4efb\u4f55\u53c2\u6570\u3002 \u6790\u6784\u51fd\u6570\u6709\u52a9\u4e8e\u5728\u8df3\u51fa\u7a0b\u5e8f\uff08\u6bd4\u5982\u5173\u95ed\u6587\u4ef6\u3001\u91ca\u653e\u5185\u5b58\u7b49\uff09\u524d\u91ca\u653e\u8d44\u6e90\u3002 #include <iostream> using namespace std ; class Line { public : void setLength ( double len ); double getLength ( void ); Line (); // \u8fd9\u662f\u6784\u9020\u51fd\u6570\u58f0\u660e ~ Line (); // \u8fd9\u662f\u6790\u6784\u51fd\u6570\u58f0\u660e private : double length ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( void ) { cout << \"Object is being created\" << endl ; } Line ::~ Line ( void ) { cout << \"Object is being deleted\" << endl ; } void Line :: setLength ( double len ) { length = len ; } double Line :: getLength ( void ) { return length ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ; // \u8bbe\u7f6e\u957f\u5ea6 line . setLength ( 6.0 ); cout << \"Length of line : \" << line . getLength () << endl ; return 0 ; } \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u00b6 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6784\u9020\u51fd\u6570\uff0c\u5b83\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u662f\u4f7f\u7528\u540c\u4e00\u7c7b\u4e2d\u4e4b\u524d\u521b\u5efa\u7684\u5bf9\u8c61\u6765\u521d\u59cb\u5316\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\u901a\u5e38\u7528\u4e8e\uff1a \u901a\u8fc7\u4f7f\u7528\u53e6\u4e00\u4e2a\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6765\u521d\u59cb\u5316\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u590d\u5236\u5bf9\u8c61\u628a\u5b83\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u590d\u5236\u5bf9\u8c61\uff0c\u5e76\u4ece\u51fd\u6570\u8fd4\u56de\u8fd9\u4e2a\u5bf9\u8c61\u3002 \u5982\u679c\u5728\u7c7b\u4e2d\u6ca1\u6709\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u884c\u5b9a\u4e49\u4e00\u4e2a\u3002\u5982\u679c\u7c7b\u5e26\u6709\u6307\u9488\u53d8\u91cf\uff0c\u5e76\u6709\u52a8\u6001\u5185\u5b58\u5206\u914d\uff0c\u5219\u5b83\u5fc5\u987b\u6709\u4e00\u4e2a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u6700\u5e38\u89c1\u5f62\u5f0f\u5982\u4e0b\uff1a classname ( const classname & obj ) { // \u6784\u9020\u51fd\u6570\u7684\u4e3b\u4f53 } \u5728\u8fd9\u91cc\uff0cobj \u662f\u4e00\u4e2a\u5bf9\u8c61\u5f15\u7528\uff0c\u8be5\u5bf9\u8c61\u662f\u7528\u4e8e\u521d\u59cb\u5316\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u3002 #include <iostream> using namespace std ; class Line { public : int getLength ( void ); Line ( int len ); // \u7b80\u5355\u7684\u6784\u9020\u51fd\u6570 Line ( const Line & obj ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ Line (); // \u6790\u6784\u51fd\u6570 private : int * ptr ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( int len ) { cout << \"\u8c03\u7528\u6784\u9020\u51fd\u6570\" << endl ; // \u4e3a\u6307\u9488\u5206\u914d\u5185\u5b58 ptr = new int ; * ptr = len ; } Line :: Line ( const Line & obj ) { cout << \"\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u5e76\u4e3a\u6307\u9488 ptr \u5206\u914d\u5185\u5b58\" << endl ; ptr = new int ; * ptr = * obj . ptr ; // \u62f7\u8d1d\u503c } Line ::~ Line ( void ) { cout << \"\u91ca\u653e\u5185\u5b58\" << endl ; delete ptr ; } int Line :: getLength ( void ) { return * ptr ; } void display ( Line obj ) { cout << \"line \u5927\u5c0f : \" << obj . getLength () << endl ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ( 10 ); display ( line ); return 0 ; } \u4e0b\u9762\u7684\u5b9e\u4f8b\u5bf9\u4e0a\u9762\u7684\u5b9e\u4f8b\u7a0d\u4f5c\u4fee\u6539\uff0c\u901a\u8fc7\u4f7f\u7528\u5df2\u6709\u7684\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6765\u521d\u59cb\u5316\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\uff1a #include <iostream> using namespace std ; class Line { public : int getLength ( void ); Line ( int len ); // \u7b80\u5355\u7684\u6784\u9020\u51fd\u6570 Line ( const Line & obj ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ Line (); // \u6790\u6784\u51fd\u6570 private : int * ptr ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( int len ) { cout << \"\u8c03\u7528\u6784\u9020\u51fd\u6570\" << endl ; // \u4e3a\u6307\u9488\u5206\u914d\u5185\u5b58 ptr = new int ; * ptr = len ; } Line :: Line ( const Line & obj ) { cout << \"\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u5e76\u4e3a\u6307\u9488 ptr \u5206\u914d\u5185\u5b58\" << endl ; ptr = new int ; * ptr = * obj . ptr ; // \u62f7\u8d1d\u503c } Line ::~ Line ( void ) { cout << \"\u91ca\u653e\u5185\u5b58\" << endl ; delete ptr ; } int Line :: getLength ( void ) { return * ptr ; } void display ( Line obj ) { cout << \"line \u5927\u5c0f : \" << obj . getLength () << endl ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line1 ( 10 ); Line line2 = line1 ; // \u8fd9\u91cc\u4e5f\u8c03\u7528\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570 display ( line1 ); display ( line2 ); return 0 ; } \u53cb\u5143\u51fd\u6570 \u00b6 \u7c7b\u7684\u53cb\u5143\u51fd\u6570\u662f\u5b9a\u4e49\u5728\u7c7b\u5916\u90e8\uff0c\u4f46\u6709\u6743\u8bbf\u95ee\u7c7b\u7684\u6240\u6709\u79c1\u6709\uff08private\uff09\u6210\u5458\u548c\u4fdd\u62a4\uff08protected\uff09\u6210\u5458\u3002\u5c3d\u7ba1\u53cb\u5143\u51fd\u6570\u7684\u539f\u578b\u6709\u5728\u7c7b\u7684\u5b9a\u4e49\u4e2d\u51fa\u73b0\u8fc7\uff0c\u4f46\u662f\u53cb\u5143\u51fd\u6570\u5e76\u4e0d\u662f\u6210\u5458\u51fd\u6570\u3002 \u53cb\u5143\u53ef\u4ee5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u88ab\u79f0\u4e3a\u53cb\u5143\u51fd\u6570\uff1b\u53cb\u5143\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7c7b\uff0c\u8be5\u7c7b\u88ab\u79f0\u4e3a\u53cb\u5143\u7c7b\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6574\u4e2a\u7c7b\u53ca\u5176\u6240\u6709\u6210\u5458\u90fd\u662f\u53cb\u5143\u3002 \u5982\u679c\u8981\u58f0\u660e\u51fd\u6570\u4e3a\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\uff0c\u9700\u8981\u5728\u7c7b\u5b9a\u4e49\u4e2d\u8be5\u51fd\u6570\u539f\u578b\u524d\u4f7f\u7528\u5173\u952e\u5b57 friend\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Box { double width ; public : double length ; friend void printWidth ( Box box ); void setWidth ( double wid ); }; \u58f0\u660e\u7c7b ClassTwo \u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u4f5c\u4e3a\u7c7b ClassOne \u7684\u53cb\u5143\uff0c\u9700\u8981\u5728\u7c7b ClassOne \u7684\u5b9a\u4e49\u4e2d\u653e\u7f6e\u5982\u4e0b\u58f0\u660e\uff1a friend class ClassTwo ; #include <iostream> using namespace std ; class Box { double width ; public : friend void printWidth ( Box box ); void setWidth ( double wid ); }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49 void Box :: setWidth ( double wid ) { width = wid ; } // \u8bf7\u6ce8\u610f\uff1aprintWidth() \u4e0d\u662f\u4efb\u4f55\u7c7b\u7684\u6210\u5458\u51fd\u6570 void printWidth ( Box box ) { /* \u56e0\u4e3a printWidth() \u662f Box \u7684\u53cb\u5143\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8be5\u7c7b\u7684\u4efb\u4f55\u6210\u5458 */ cout << \"Width of box : \" << box . width << endl ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Box box ; // \u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u5bbd\u5ea6 box . setWidth ( 10.0 ); // \u4f7f\u7528\u53cb\u5143\u51fd\u6570\u8f93\u51fa\u5bbd\u5ea6 printWidth ( box ); return 0 ; } \u5185\u8054\u51fd\u6570 \u00b6 C++ \u5185\u8054\u51fd\u6570\u662f\u901a\u5e38\u4e0e\u7c7b\u4e00\u8d77\u4f7f\u7528\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u662f\u5185\u8054\u7684\uff0c\u90a3\u4e48\u5728\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u628a\u8be5\u51fd\u6570\u7684\u4ee3\u7801\u526f\u672c\u653e\u7f6e\u5728\u6bcf\u4e2a\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5730\u65b9\u3002 \u5bf9\u5185\u8054\u51fd\u6570\u8fdb\u884c\u4efb\u4f55\u4fee\u6539\uff0c\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u51fd\u6570\u7684\u6240\u6709\u5ba2\u6237\u7aef\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u9700\u8981\u91cd\u65b0\u66f4\u6362\u4e00\u6b21\u6240\u6709\u7684\u4ee3\u7801\uff0c\u5426\u5219\u5c06\u4f1a\u7ee7\u7eed\u4f7f\u7528\u65e7\u7684\u51fd\u6570\u3002 \u5982\u679c\u60f3\u628a\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5219\u9700\u8981\u5728\u51fd\u6570\u540d\u524d\u9762\u653e\u7f6e\u5173\u952e\u5b57 inline\uff0c\u5728\u8c03\u7528\u51fd\u6570\u4e4b\u524d\u9700\u8981\u5bf9\u51fd\u6570\u8fdb\u884c\u5b9a\u4e49\u3002\u5982\u679c\u5df2\u5b9a\u4e49\u7684\u51fd\u6570\u591a\u4e8e\u4e00\u884c\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565 inline \u9650\u5b9a\u7b26\u3002 \u5728\u7c7b\u5b9a\u4e49\u4e2d\u7684\u5b9a\u4e49\u7684\u51fd\u6570\u90fd\u662f\u5185\u8054\u51fd\u6570\uff0c\u5373\u4f7f\u6ca1\u6709\u4f7f\u7528 inline \u8bf4\u660e\u7b26\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f7f\u7528\u5185\u8054\u51fd\u6570\u6765\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u7684\u6700\u5927\u503c\uff1a #include <iostream> using namespace std ; inline int Max ( int x , int y ) { return ( x > y ) ? x : y ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { cout << \"Max (20,10): \" << Max ( 20 , 10 ) << endl ; cout << \"Max (0,200): \" << Max ( 0 , 200 ) << endl ; cout << \"Max (100,1010): \" << Max ( 100 , 1010 ) << endl ; return 0 ; } \u5f15\u5165\u5185\u8054\u51fd\u6570\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u7a0b\u5e8f\u4e2d\u51fd\u6570\u8c03\u7528\u7684\u6548\u7387\u95ee\u9898\uff0c\u8fd9\u4e48\u8bf4\u5427\uff0c\u7a0b\u5e8f\u5728\u7f16\u8bd1\u5668\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u5c06\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u5185\u8054\u51fd\u6570\u7684\u8c03\u7528\u8868\u8fbe\u5f0f\u7528\u5185\u8054\u51fd\u6570\u7684\u51fd\u6570\u4f53\u8fdb\u884c\u66ff\u6362\uff0c\u800c\u5bf9\u4e8e\u5176\u4ed6\u7684\u51fd\u6570\uff0c\u90fd\u662f\u5728\u8fd0\u884c\u65f6\u5019\u624d\u88ab\u66ff\u4ee3\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u4e2a\u7a7a\u95f4\u4ee3\u4ef7\u6362\u65f6\u95f4\u7684i\u8282\u7701\u3002\u6240\u4ee5\u5185\u8054\u51fd\u6570\u4e00\u822c\u90fd\u662f1-5\u884c\u7684\u5c0f\u51fd\u6570\u3002\u5728\u4f7f\u7528\u5185\u8054\u51fd\u6570\u65f6\u8981\u7559\u795e\uff1a \u5728\u5185\u8054\u51fd\u6570\u5185\u4e0d\u5141\u8bb8\u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u548c\u5f00\u5173\u8bed\u53e5\uff1b \u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u5fc5\u987b\u51fa\u73b0\u5728\u5185\u8054\u51fd\u6570\u7b2c\u4e00\u6b21\u8c03\u7528\u4e4b\u524d\uff1b \u7c7b\u7ed3\u6784\u4e2d\u6240\u5728\u7684\u7c7b\u8bf4\u660e\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u5185\u8054\u51fd\u6570\u3002 this \u6307\u9488 \u00b6 \u5728 C++ \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u80fd\u901a\u8fc7 this \u6307\u9488\u6765\u8bbf\u95ee\u81ea\u5df1\u7684\u5730\u5740\u3002this \u6307\u9488\u662f\u6240\u6709\u6210\u5458\u51fd\u6570\u7684\u9690\u542b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u6307\u5411\u8c03\u7528\u5bf9\u8c61\u3002 \u53cb\u5143\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u56e0\u4e3a\u53cb\u5143\u4e0d\u662f\u7c7b\u7684\u6210\u5458\u3002\u53ea\u6709\u6210\u5458\u51fd\u6570\u624d\u6709 this \u6307\u9488\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u7406\u89e3 this \u6307\u9488\u7684\u6982\u5ff5\uff1a #include <iostream> using namespace std ; class Box { public : // \u6784\u9020\u51fd\u6570\u5b9a\u4e49 Box ( double l = 2.0 , double b = 2.0 , double h = 2.0 ) { cout << \"Constructor called.\" << endl ; length = l ; breadth = b ; height = h ; } double Volume () { return length * breadth * height ; } int compare ( Box box ) { return this -> Volume () > box . Volume (); } private : double length ; // Length of a box double breadth ; // Breadth of a box double height ; // Height of a box }; int main ( void ) { Box Box1 ( 3.3 , 1.2 , 1.5 ); // Declare box1 Box Box2 ( 8.5 , 6.0 , 2.0 ); // Declare box2 if ( Box1 . compare ( Box2 )) { cout << \"Box2 is smaller than Box1\" << endl ; } else { cout << \"Box2 is equal to or larger than Box1\" << endl ; } return 0 ; } \u6307\u5411\u7c7b\u7684\u6307\u9488 \u00b6 \u4e00\u4e2a\u6307\u5411 C++ \u7c7b\u7684\u6307\u9488\u4e0e\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\u7c7b\u4f3c\uff0c\u8bbf\u95ee\u6307\u5411\u7c7b\u7684\u6307\u9488\u7684\u6210\u5458\uff0c\u9700\u8981\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26 ->\uff0c\u5c31\u50cf\u8bbf\u95ee\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\u4e00\u6837\u3002\u4e0e\u6240\u6709\u7684\u6307\u9488\u4e00\u6837\uff0c\u60a8\u5fc5\u987b\u5728\u4f7f\u7528\u6307\u9488\u4e4b\u524d\uff0c\u5bf9\u6307\u9488\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u7406\u89e3\u6307\u5411\u7c7b\u7684\u6307\u9488\u7684\u6982\u5ff5\uff1a #include <iostream> using namespace std ; class Box { public : // \u6784\u9020\u51fd\u6570\u5b9a\u4e49 Box ( double l = 2.0 , double b = 2.0 , double h = 2.0 ) { cout << \"Constructor called.\" << endl ; length = l ; breadth = b ; height = h ; } double Volume () { return length * breadth * height ; } private : double length ; // Length of a box double breadth ; // Breadth of a box double height ; // Height of a box }; int main ( void ) { Box Box1 ( 3.3 , 1.2 , 1.5 ); // Declare box1 Box Box2 ( 8.5 , 6.0 , 2.0 ); // Declare box2 Box * ptrBox ; // Declare pointer to a class. // \u4fdd\u5b58\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u7684\u5730\u5740 ptrBox = & Box1 ; // \u73b0\u5728\u5c1d\u8bd5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u6210\u5458 cout << \"Volume of Box1: \" << ptrBox -> Volume () << endl ; // \u4fdd\u5b58\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u7684\u5730\u5740 ptrBox = & Box2 ; // \u73b0\u5728\u5c1d\u8bd5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u6210\u5458 cout << \"Volume of Box2: \" << ptrBox -> Volume () << endl ; return 0 ; } \u7c7b\u7684\u9759\u6001\u6210\u5458 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 static \u5173\u952e\u5b57\u6765\u628a\u7c7b\u6210\u5458\u5b9a\u4e49\u4e3a\u9759\u6001\u7684\u3002\u5f53\u6211\u4eec\u58f0\u660e\u7c7b\u7684\u6210\u5458\u4e3a\u9759\u6001\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u65e0\u8bba\u521b\u5efa\u591a\u5c11\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u9759\u6001\u6210\u5458\u90fd\u53ea\u6709\u4e00\u4e2a\u526f\u672c\u3002 \u9759\u6001\u6210\u5458\u5728\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u4e2d\u662f\u5171\u4eab\u7684\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5176\u4ed6\u7684\u521d\u59cb\u5316\u8bed\u53e5\uff0c\u5728\u521b\u5efa\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u6240\u6709\u7684\u9759\u6001\u6570\u636e\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u4e3a\u96f6\u3002 \u6211\u4eec\u4e0d\u80fd\u628a\u9759\u6001\u6210\u5458\u7684\u521d\u59cb\u5316\u653e\u7f6e\u5728\u7c7b\u7684\u5b9a\u4e49\u4e2d\uff0c\u4f46\u662f\u53ef\u4ee5\u5728\u7c7b\u7684\u5916\u90e8\u901a\u8fc7\u4f7f\u7528\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u6765\u91cd\u65b0\u58f0\u660e\u9759\u6001\u53d8\u91cf\u4ece\u800c\u5bf9\u5b83\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u9762\u7684\u5b9e\u4f8b\u6240\u793a\u3002 #include <iostream> using namespace std ; class Box { public : static int objectCount ; // \u6784\u9020\u51fd\u6570\u5b9a\u4e49 Box ( double l = 2.0 , double b = 2.0 , double h = 2.0 ) { cout << \"Constructor called.\" << endl ; length = l ; breadth = b ; height = h ; // \u6bcf\u6b21\u521b\u5efa\u5bf9\u8c61\u65f6\u589e\u52a0 1 objectCount ++ ; } double Volume () { return length * breadth * height ; } private : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; // \u521d\u59cb\u5316\u7c7b Box \u7684\u9759\u6001\u6210\u5458 int Box :: objectCount = 0 ; int main ( void ) { Box Box1 ( 3.3 , 1.2 , 1.5 ); // \u58f0\u660e box1 Box Box2 ( 8.5 , 6.0 , 2.0 ); // \u58f0\u660e box2 // \u8f93\u51fa\u5bf9\u8c61\u7684\u603b\u6570 cout << \"Total objects: \" << Box :: objectCount << endl ; return 0 ; } \u9759\u6001\u6210\u5458\u51fd\u6570 \u00b6 \u5982\u679c\u628a\u51fd\u6570\u6210\u5458\u58f0\u660e\u4e3a\u9759\u6001\u7684\uff0c\u5c31\u53ef\u4ee5\u628a\u51fd\u6570\u4e0e\u7c7b\u7684\u4efb\u4f55\u7279\u5b9a\u5bf9\u8c61\u72ec\u7acb\u5f00\u6765\u3002\u9759\u6001\u6210\u5458\u51fd\u6570\u5373\u4f7f\u5728\u7c7b\u5bf9\u8c61\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u88ab\u8c03\u7528\uff0c\u9759\u6001\u51fd\u6570\u53ea\u8981\u4f7f\u7528\u7c7b\u540d\u52a0\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u5c31\u53ef\u4ee5\u8bbf\u95ee\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\u6570\u636e\u3001\u5176\u4ed6\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u7c7b\u5916\u90e8\u7684\u5176\u4ed6\u51fd\u6570\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u6709\u4e00\u4e2a\u7c7b\u8303\u56f4\uff0c\u4ed6\u4eec\u4e0d\u80fd\u8bbf\u95ee\u7c7b\u7684 this \u6307\u9488\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u6765\u5224\u65ad\u7c7b\u7684\u67d0\u4e9b\u5bf9\u8c61\u662f\u5426\u5df2\u88ab\u521b\u5efa\u3002 Notice \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u666e\u901a\u6210\u5458\u51fd\u6570\u7684\u533a\u522b \u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff08\u5305\u62ec\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\uff09\u3002 \u666e\u901a\u6210\u5458\u51fd\u6570\u6709 this \u6307\u9488\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2d\u7684\u4efb\u610f\u6210\u5458\uff1b\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u7406\u89e3\u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u6982\u5ff5\uff1a #include <iostream> using namespace std ; class Box { public : static int objectCount ; // \u6784\u9020\u51fd\u6570\u5b9a\u4e49 Box ( double l = 2.0 , double b = 2.0 , double h = 2.0 ) { cout << \"Constructor called.\" << endl ; length = l ; breadth = b ; height = h ; // \u6bcf\u6b21\u521b\u5efa\u5bf9\u8c61\u65f6\u589e\u52a0 1 objectCount ++ ; } double Volume () { return length * breadth * height ; } static int getCount () { return objectCount ; } private : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; // \u521d\u59cb\u5316\u7c7b Box \u7684\u9759\u6001\u6210\u5458 int Box :: objectCount = 0 ; int main ( void ) { // \u5728\u521b\u5efa\u5bf9\u8c61\u4e4b\u524d\u8f93\u51fa\u5bf9\u8c61\u7684\u603b\u6570 cout << \"Inital Stage Count: \" << Box :: getCount () << endl ; Box Box1 ( 3.3 , 1.2 , 1.5 ); // \u58f0\u660e box1 Box Box2 ( 8.5 , 6.0 , 2.0 ); // \u58f0\u660e box2 // \u5728\u521b\u5efa\u5bf9\u8c61\u4e4b\u540e\u8f93\u51fa\u5bf9\u8c61\u7684\u603b\u6570 cout << \"Final Stage Count: \" << Box :: getCount () << endl ; return 0 ; }","title":"\u7c7b\u548c\u5bf9\u8c61"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#c","text":"\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u672c\u8d28\u4e0a\u662f\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u7684\u84dd\u56fe\u3002\u8fd9\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u6570\u636e\uff0c\u4f46\u5b83\u5b9a\u4e49\u4e86\u7c7b\u7684\u540d\u79f0\u610f\u5473\u7740\u4ec0\u4e48\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5b9a\u4e49\u4e86\u7c7b\u7684\u5bf9\u8c61\u5305\u62ec\u4e86\u4ec0\u4e48\uff0c\u4ee5\u53ca\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e0a\u6267\u884c\u54ea\u4e9b\u64cd\u4f5c\u3002 \u7c7b\u5b9a\u4e49\u662f\u4ee5\u5173\u952e\u5b57 class \u5f00\u5934\uff0c\u540e\u8ddf\u7c7b\u7684\u540d\u79f0\u3002\u7c7b\u7684\u4e3b\u4f53\u662f\u5305\u542b\u5728\u4e00\u5bf9\u82b1\u62ec\u53f7\u4e2d\u3002 \u7c7b\u5b9a\u4e49\u540e\u5fc5\u987b\u8ddf\u7740\u4e00\u4e2a\u5206\u53f7\u6216\u4e00\u4e2a\u58f0\u660e\u5217\u8868\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u5173\u952e\u5b57 class \u5b9a\u4e49 Box \u6570\u636e\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Box { public : double length ; // \u76d2\u5b50\u7684\u957f\u5ea6 double weight ; // \u76d2\u5b50\u7684\u5bbd\u5ea6 double height ; // \u76d2\u5b50\u7684\u9ad8\u5ea6 }; \u5173\u952e\u5b57 public \u786e\u5b9a\u4e86\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u3002\u5728\u7c7b\u5bf9\u8c61\u4f5c\u7528\u57df\u5185\uff0c\u516c\u5171\u6210\u5458\u5728\u7c7b\u7684\u5916\u90e8\u662f\u53ef\u8bbf\u95ee\u7684\u3002","title":"C++ \u7c7b\u5b9a\u4e49"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#c_1","text":"\u7c7b\u63d0\u4f9b\u4e86\u5bf9\u8c61\u7684\u84dd\u56fe\uff0c\u6240\u4ee5\u57fa\u672c\u4e0a\uff0c\u5bf9\u8c61\u662f\u6839\u636e\u7c7b\u6765\u521b\u5efa\u7684\u3002\u58f0\u660e\u7c7b\u7684\u5bf9\u8c61\uff0c\u5c31\u50cf\u58f0\u660e\u57fa\u672c\u7c7b\u578b\u7684\u53d8\u91cf\u4e00\u6837\u3002 \u4e0b\u9762\u7684\u8bed\u53e5\u58f0\u660e\u4e86\u7c7b Box \u7684\u4e24\u4e2a\u5bf9\u8c61\uff1a Box Box1 ; // \u58f0\u660e Box1\uff0c\u7c7b\u578b\u4e3a Box Box Box2 ; // \u58f0\u660e Box2\uff0c\u7c7b\u578b\u4e3a Box","title":"\u5b9a\u4e49 C++ \u5bf9\u8c61"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_1","text":"\u7c7b\u7684\u5bf9\u8c61\u7684\u516c\u5171\u6570\u636e\u6210\u5458\u53ef\u4ee5\u4f7f\u7528\u76f4\u63a5\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26 (.) \u6765\u8bbf\u95ee\u3002 #include <iostream> using namespace std ; class Box { public : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; int main ( ) { Box Box1 ; // \u58f0\u660e Box1\uff0c\u7c7b\u578b\u4e3a Box Box Box2 ; // \u58f0\u660e Box2\uff0c\u7c7b\u578b\u4e3a Box double volume = 0.0 ; // \u7528\u4e8e\u5b58\u50a8\u4f53\u79ef // box 1 \u8be6\u8ff0 Box1 . height = 5.0 ; Box1 . length = 6.0 ; Box1 . breadth = 7.0 ; // box 2 \u8be6\u8ff0 Box2 . height = 10.0 ; Box2 . length = 12.0 ; Box2 . breadth = 13.0 ; // box 1 \u7684\u4f53\u79ef volume = Box1 . height * Box1 . length * Box1 . breadth ; cout << \"Box1 \u7684\u4f53\u79ef\uff1a\" << volume << endl ; // box 2 \u7684\u4f53\u79ef volume = Box2 . height * Box2 . length * Box2 . breadth ; cout << \"Box2 \u7684\u4f53\u79ef\uff1a\" << volume << endl ; return 0 ; } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u79c1\u6709\u7684\u6210\u5458\u548c\u53d7\u4fdd\u62a4\u7684\u6210\u5458\u4e0d\u80fd\u4f7f\u7528\u76f4\u63a5\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26 (.) \u6765\u76f4\u63a5\u8bbf\u95ee\u3002","title":"\u8bbf\u95ee\u6570\u636e\u6210\u5458"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_2","text":"\u7c7b\u7684\u6210\u5458\u51fd\u6570\u662f\u6307\u90a3\u4e9b\u628a\u5b9a\u4e49\u548c\u539f\u578b\u5199\u5728\u7c7b\u5b9a\u4e49\u5185\u90e8\u7684\u51fd\u6570\uff0c\u5c31\u50cf\u7c7b\u5b9a\u4e49\u4e2d\u7684\u5176\u4ed6\u53d8\u91cf\u4e00\u6837\u3002 \u7c7b\u6210\u5458\u51fd\u6570\u662f\u7c7b\u7684\u4e00\u4e2a\u6210\u5458\uff0c\u5b83\u53ef\u4ee5\u64cd\u4f5c\u7c7b\u7684\u4efb\u610f\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u6210\u5458\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4e4b\u524d\u5b9a\u4e49\u7684\u7c7b Box\uff0c\u73b0\u5728\u6211\u4eec\u8981\u4f7f\u7528\u6210\u5458\u51fd\u6570\u6765\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e9b\u7c7b\u7684\u6210\u5458\uff1a class Box { public : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 double getVolume ( void ); // \u8fd4\u56de\u4f53\u79ef }; \u6210\u5458\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u5728\u7c7b\u5b9a\u4e49\u5185\u90e8\uff0c\u6216\u8005\u5355\u72ec\u4f7f\u7528\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u6765\u5b9a\u4e49\u3002 \u5728\u7c7b\u5b9a\u4e49\u4e2d\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u628a\u51fd\u6570\u58f0\u660e\u4e3a\u5185\u8054\u7684\uff0c\u5373\u4fbf\u6ca1\u6709\u4f7f\u7528 inline \u6807\u8bc6\u7b26\u3002\u6240\u4ee5\u60a8\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u5b9a\u4e49 Volume() \u51fd\u6570\uff1a class Box { public : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 double getVolume ( void ) { return length * breadth * height ; } }; \u60a8\u4e5f\u53ef\u4ee5\u5728\u7c7b\u7684\u5916\u90e8\u4f7f\u7528\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u5b9a\u4e49\u8be5\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a double Box :: getVolume ( void ) { return length * breadth * height ; } \u5728\u8fd9\u91cc\uff0c\u9700\u8981\u5f3a\u8c03\u4e00\u70b9\uff0c\u5728 :: \u8fd0\u7b97\u7b26\u4e4b\u524d\u5fc5\u987b\u4f7f\u7528\u7c7b\u540d\u3002\u8c03\u7528\u6210\u5458\u51fd\u6570\u662f\u5728\u5bf9\u8c61\u4e0a\u4f7f\u7528\u70b9\u8fd0\u7b97\u7b26\uff08.\uff09\uff0c\u8fd9\u6837\u5b83\u5c31\u80fd\u64cd\u4f5c\u4e0e\u8be5\u5bf9\u8c61\u76f8\u5173\u7684\u6570\u636e\uff0c \u5982\u4e0b\u6240\u793a\uff1a Box myBox ; // \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 myBox . getVolume (); // \u8c03\u7528\u8be5\u5bf9\u8c61\u7684\u6210\u5458\u51fd\u6570 \u8ba9\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u6982\u5ff5\u6765\u8bbe\u7f6e\u548c\u83b7\u53d6\u7c7b\u4e2d\u4e0d\u540c\u7684\u6210\u5458\u7684\u503c\uff1a #include <iostream> using namespace std ; class Box { public : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 // \u6210\u5458\u51fd\u6570\u58f0\u660e double getVolume ( void ); void setLength ( double len ); void setBreadth ( double bre ); void setHeight ( double hei ); }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49 double Box :: getVolume ( void ) { return length * breadth * height ; } void Box :: setLength ( double len ) { length = len ; } void Box :: setBreadth ( double bre ) { breadth = bre ; } void Box :: setHeight ( double hei ) { height = hei ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Box Box1 ; // \u58f0\u660e Box1\uff0c\u7c7b\u578b\u4e3a Box Box Box2 ; // \u58f0\u660e Box2\uff0c\u7c7b\u578b\u4e3a Box double volume = 0.0 ; // \u7528\u4e8e\u5b58\u50a8\u4f53\u79ef // box 1 \u8be6\u8ff0 Box1 . setLength ( 6.0 ); Box1 . setBreadth ( 7.0 ); Box1 . setHeight ( 5.0 ); // box 2 \u8be6\u8ff0 Box2 . setLength ( 12.0 ); Box2 . setBreadth ( 13.0 ); Box2 . setHeight ( 10.0 ); // box 1 \u7684\u4f53\u79ef volume = Box1 . getVolume (); cout << \"Box1 \u7684\u4f53\u79ef\uff1a\" << volume << endl ; // box 2 \u7684\u4f53\u79ef volume = Box2 . getVolume (); cout << \"Box2 \u7684\u4f53\u79ef\uff1a\" << volume << endl ; return 0 ; }","title":"\u7c7b\u6210\u5458\u51fd\u6570"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_3","text":"\u6570\u636e\u5c01\u88c5\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff0c\u5b83\u9632\u6b62\u51fd\u6570\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7c7b\u578b\u7684\u5185\u90e8\u6210\u5458\u3002 \u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u9650\u5236\u662f\u901a\u8fc7\u5728\u7c7b\u4e3b\u4f53\u5185\u90e8\u5bf9\u5404\u4e2a\u533a\u57df\u6807\u8bb0 public\u3001private\u3001protected \u6765\u6307\u5b9a\u7684\u3002\u5173\u952e\u5b57 public\u3001private\u3001protected \u79f0\u4e3a\u8bbf\u95ee\u4fee\u9970\u7b26\u3002 \u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a public\u3001protected \u6216 private \u6807\u8bb0\u533a\u57df\u3002\u6bcf\u4e2a\u6807\u8bb0\u533a\u57df\u5728\u4e0b\u4e00\u4e2a\u6807\u8bb0\u533a\u57df\u5f00\u59cb\u4e4b\u524d\u6216\u8005\u5728\u9047\u5230\u7c7b\u4e3b\u4f53\u7ed3\u675f\u53f3\u62ec\u53f7\u4e4b\u524d\u90fd\u662f\u6709\u6548\u7684\u3002 \u6210\u5458\u548c\u7c7b\u7684\u9ed8\u8ba4\u8bbf\u95ee\u4fee\u9970\u7b26\u662f private\u3002","title":"\u7c7b\u8bbf\u95ee\u4fee\u9970\u7b26"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#public","text":"\u516c\u6709\u6210\u5458\u5728\u7a0b\u5e8f\u4e2d\u7c7b\u7684\u5916\u90e8\u662f\u53ef\u8bbf\u95ee\u7684\u3002\u60a8\u53ef\u4ee5\u4e0d\u4f7f\u7528\u4efb\u4f55\u6210\u5458\u51fd\u6570\u6765\u8bbe\u7f6e\u548c\u83b7\u53d6\u516c\u6709\u53d8\u91cf\u7684\u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; class Line { public : double length ; void setLength ( double len ); double getLength ( void ); }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49 double Line :: getLength ( void ) { return length ; } void Line :: setLength ( double len ) { length = len ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ; // \u8bbe\u7f6e\u957f\u5ea6 line . setLength ( 6.0 ); cout << \"Length of line : \" << line . getLength () << endl ; // \u4e0d\u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u957f\u5ea6 line . length = 10.0 ; // OK: \u56e0\u4e3a length \u662f\u516c\u6709\u7684 cout << \"Length of line : \" << line . length << endl ; return 0 ; }","title":"\u516c\u6709\uff08public\uff09\u6210\u5458"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#private","text":"\u79c1\u6709\u6210\u5458\u53d8\u91cf\u6216\u51fd\u6570\u5728\u7c7b\u7684\u5916\u90e8\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u67e5\u770b\u7684\u3002\u53ea\u6709\u7c7b\u548c\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u6210\u5458\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u7684\u6240\u6709\u6210\u5458\u90fd\u662f\u79c1\u6709\u7684\u3002 \u4f8b\u5982\u5728\u4e0b\u9762\u7684\u7c7b\u4e2d\uff0cwidth \u662f\u4e00\u4e2a\u79c1\u6709\u6210\u5458\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u60a8\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u7c7b\u7684\u6210\u5458\u5c06\u88ab\u5047\u5b9a\u4e3a\u79c1\u6709\u6210\u5458\uff1a class Box { double width ; public : double length ; void setWidth ( double wid ); double getWidth ( void ); }; \u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u5728\u79c1\u6709\u533a\u57df\u5b9a\u4e49\u6570\u636e\uff0c\u5728\u516c\u6709\u533a\u57df\u5b9a\u4e49\u76f8\u5173\u7684\u51fd\u6570\uff0c\u4ee5\u4fbf\u5728\u7c7b\u7684\u5916\u90e8\u4e5f\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; class Box { public : double length ; void setWidth ( double wid ); double getWidth ( void ); private : double width ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49 double Box :: getWidth ( void ) { return width ; } void Box :: setWidth ( double wid ) { width = wid ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Box box ; // \u4e0d\u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u957f\u5ea6 box . length = 10.0 ; // OK: \u56e0\u4e3a length \u662f\u516c\u6709\u7684 cout << \"Length of box : \" << box . length << endl ; // \u4e0d\u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u5bbd\u5ea6 // box.width = 10.0; // Error: \u56e0\u4e3a width \u662f\u79c1\u6709\u7684 box . setWidth ( 10.0 ); // \u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u5bbd\u5ea6 cout << \"Width of box : \" << box . getWidth () << endl ; return 0 ; }","title":"\u79c1\u6709\uff08private\uff09\u6210\u5458"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#protected","text":"\u4fdd\u62a4\u6210\u5458\u53d8\u91cf\u6216\u51fd\u6570\u4e0e\u79c1\u6709\u6210\u5458\u5341\u5206\u76f8\u4f3c\uff0c\u4f46\u6709\u4e00\u70b9\u4e0d\u540c\uff0c\u4fdd\u62a4\u6210\u5458\u5728\u6d3e\u751f\u7c7b\uff08\u5373\u5b50\u7c7b\uff09\u4e2d\u662f\u53ef\u8bbf\u95ee\u7684\u3002 \u4ece\u7236\u7c7b Box \u6d3e\u751f\u4e86\u4e00\u4e2a\u5b50\u7c7b smallBox\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e0e\u524d\u9762\u7684\u5b9e\u4f8b\u7c7b\u4f3c\uff0c\u5728\u8fd9\u91cc width \u6210\u5458\u53ef\u88ab\u6d3e\u751f\u7c7b smallBox \u7684\u4efb\u4f55\u6210\u5458\u51fd\u6570\u8bbf\u95ee\u3002 #include <iostream> using namespace std ; class Box { protected : double width ; }; class SmallBox : Box // SmallBox \u662f\u6d3e\u751f\u7c7b { public : void setSmallWidth ( double wid ); double getSmallWidth ( void ); }; // \u5b50\u7c7b\u7684\u6210\u5458\u51fd\u6570 double SmallBox :: getSmallWidth ( void ) { return width ; } void SmallBox :: setSmallWidth ( double wid ) { width = wid ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { SmallBox box ; // \u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u5bbd\u5ea6 box . setSmallWidth ( 5.0 ); cout << \"Width of box : \" << box . getSmallWidth () << endl ; return 0 ; }","title":"\u4fdd\u62a4\uff08protected\uff09\u6210\u5458"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_4","text":"\u6709public, protected, private\u4e09\u79cd\u7ee7\u627f\u65b9\u5f0f\uff0c\u5b83\u4eec\u76f8\u5e94\u5730\u6539\u53d8\u4e86\u57fa\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u3002 public \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\uff0cprotected \u6210\u5458\uff0cprivate \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1apublic, protected, private protected \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\uff0cprotected \u6210\u5458\uff0cprivate \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1aprotected, protected, private private \u7ee7\u627f\uff1a\u57fa\u7c7b public \u6210\u5458\uff0cprotected \u6210\u5458\uff0cprivate \u6210\u5458\u7684\u8bbf\u95ee\u5c5e\u6027\u5728\u6d3e\u751f\u7c7b\u4e2d\u5206\u522b\u53d8\u6210\uff1aprivate, private, private \u4f46\u65e0\u8bba\u54ea\u79cd\u7ee7\u627f\u65b9\u5f0f\uff0c\u4e0b\u9762\u4e24\u70b9\u90fd\u6ca1\u6709\u6539\u53d8\uff1a private \u6210\u5458\u53ea\u80fd\u88ab\u672c\u7c7b\u6210\u5458\uff08\u7c7b\u5185\uff09\u548c\u53cb\u5143\u8bbf\u95ee\uff0c\u4e0d\u80fd\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\uff1b protected \u6210\u5458\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002","title":"\u7ee7\u627f\u4e2d\u7684\u7279\u70b9"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#public_1","text":"#include <iostream> #include <assert.h> using namespace std ; class A { public : int a ; A (){ a1 = 1 ; a2 = 2 ; a3 = 3 ; a = 4 ; } void fun (){ cout << a << endl ; //\u6b63\u786e cout << a1 << endl ; //\u6b63\u786e cout << a2 << endl ; //\u6b63\u786e cout << a3 << endl ; //\u6b63\u786e } public : int a1 ; protected : int a2 ; private : int a3 ; }; class B : public A { public : int a ; B ( int i ){ A (); a = i ; } void fun (){ cout << a << endl ; //\u6b63\u786e\uff0cpublic\u6210\u5458 cout << a1 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684public\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u4ecd\u662fpublic\u6210\u5458\u3002 cout << a2 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684protected\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u4ecd\u662fprotected\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a3 << endl ; //\u9519\u8bef\uff0c\u57fa\u7c7b\u7684private\u6210\u5458\u4e0d\u80fd\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 } }; int main (){ B b ( 10 ); cout << b . a << endl ; cout << b . a1 << endl ; //\u6b63\u786e cout << b . a2 << endl ; //\u9519\u8bef\uff0c\u7c7b\u5916\u4e0d\u80fd\u8bbf\u95eeprotected\u6210\u5458 cout << b . a3 << endl ; //\u9519\u8bef\uff0c\u7c7b\u5916\u4e0d\u80fd\u8bbf\u95eeprivate\u6210\u5458 system ( \"pause\" ); return 0 ; }","title":"public \u7ee7\u627f"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#protected_1","text":"#include <iostream> #include <assert.h> using namespace std ; class A { public : int a ; A (){ a1 = 1 ; a2 = 2 ; a3 = 3 ; a = 4 ; } void fun (){ cout << a << endl ; //\u6b63\u786e cout << a1 << endl ; //\u6b63\u786e cout << a2 << endl ; //\u6b63\u786e cout << a3 << endl ; //\u6b63\u786e } public : int a1 ; protected : int a2 ; private : int a3 ; }; class B : protected A { public : int a ; B ( int i ){ A (); a = i ; } void fun (){ cout << a << endl ; //\u6b63\u786e\uff0cpublic\u6210\u5458\u3002 cout << a1 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684public\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u53d8\u6210\u4e86protected\uff0c\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a2 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684protected\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u8fd8\u662fprotected\uff0c\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a3 << endl ; //\u9519\u8bef\uff0c\u57fa\u7c7b\u7684private\u6210\u5458\u4e0d\u80fd\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 } }; int main (){ B b ( 10 ); cout << b . a << endl ; //\u6b63\u786e\u3002public\u6210\u5458 cout << b . a1 << endl ; //\u9519\u8bef\uff0cprotected\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 cout << b . a2 << endl ; //\u9519\u8bef\uff0cprotected\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 cout << b . a3 << endl ; //\u9519\u8bef\uff0cprivate\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 system ( \"pause\" ); return 0 ;","title":"protected \u7ee7\u627f"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#private_1","text":"#include <iostream> #include <assert.h> using namespace std ; class A { public : int a ; A (){ a1 = 1 ; a2 = 2 ; a3 = 3 ; a = 4 ; } void fun (){ cout << a << endl ; //\u6b63\u786e cout << a1 << endl ; //\u6b63\u786e cout << a2 << endl ; //\u6b63\u786e cout << a3 << endl ; //\u6b63\u786e } public : int a1 ; protected : int a2 ; private : int a3 ; }; class B : private A { public : int a ; B ( int i ){ A (); a = i ; } void fun (){ cout << a << endl ; //\u6b63\u786e\uff0cpublic\u6210\u5458\u3002 cout << a1 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7bpublic\u6210\u5458,\u5728\u6d3e\u751f\u7c7b\u4e2d\u53d8\u6210\u4e86private,\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a2 << endl ; //\u6b63\u786e\uff0c\u57fa\u7c7b\u7684protected\u6210\u5458\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u53d8\u6210\u4e86private,\u53ef\u4ee5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 cout << a3 << endl ; //\u9519\u8bef\uff0c\u57fa\u7c7b\u7684private\u6210\u5458\u4e0d\u80fd\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\u3002 } }; int main (){ B b ( 10 ); cout << b . a << endl ; //\u6b63\u786e\u3002public\u6210\u5458 cout << b . a1 << endl ; //\u9519\u8bef\uff0cprivate\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 cout << b . a2 << endl ; //\u9519\u8bef, private\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 cout << b . a3 << endl ; //\u9519\u8bef\uff0cprivate\u6210\u5458\u4e0d\u80fd\u5728\u7c7b\u5916\u8bbf\u95ee\u3002 system ( \"pause\" ); return 0 ; }","title":"private \u7ee7\u627f"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_5","text":"","title":"\u7c7b\u6784\u9020\u51fd\u6570 &amp; \u6790\u6784\u51fd\u6570"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_6","text":"\u7c7b\u7684\u6784\u9020\u51fd\u6570\u662f\u7c7b\u7684\u4e00\u79cd\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u521b\u5efa\u7c7b\u7684\u65b0\u5bf9\u8c61\u65f6\u6267\u884c\u3002 \u6784\u9020\u51fd\u6570\u7684\u540d\u79f0\u4e0e\u7c7b\u7684\u540d\u79f0\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u7c7b\u578b\uff0c\u4e5f\u4e0d\u4f1a\u8fd4\u56de void\u3002\u6784\u9020\u51fd\u6570\u53ef\u7528\u4e8e\u4e3a\u67d0\u4e9b\u6210\u5458\u53d8\u91cf\u8bbe\u7f6e\u521d\u59cb\u503c\u3002 #include <iostream> using namespace std ; class Line { public : void setLength ( double len ); double getLength ( void ); Line (); // \u8fd9\u662f\u6784\u9020\u51fd\u6570 private : double length ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( void ) { cout << \"Object is being created\" << endl ; } void Line :: setLength ( double len ) { length = len ; } double Line :: getLength ( void ) { return length ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ; // \u8bbe\u7f6e\u957f\u5ea6 line . setLength ( 6.0 ); cout << \"Length of line : \" << line . getLength () << endl ; return 0 ; }","title":"\u6784\u9020\u51fd\u6570"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_7","text":"\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0c\u4f46\u5982\u679c\u9700\u8981\uff0c\u6784\u9020\u51fd\u6570\u4e5f\u53ef\u4ee5\u5e26\u6709\u53c2\u6570\u3002\u8fd9\u6837\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5c31\u4f1a\u7ed9\u5bf9\u8c61\u8d4b\u521d\u59cb\u503c\uff0c\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u6240\u793a\uff1a #include <iostream> using namespace std ; class Line { public : void setLength ( double len ); double getLength ( void ); Line ( double len ); // \u8fd9\u662f\u6784\u9020\u51fd\u6570 private : double length ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( double len ) { cout << \"Object is being created, length = \" << len << endl ; length = len ; } void Line :: setLength ( double len ) { length = len ; } double Line :: getLength ( void ) { return length ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ( 10.0 ); // \u83b7\u53d6\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u957f\u5ea6 cout << \"Length of line : \" << line . getLength () << endl ; // \u518d\u6b21\u8bbe\u7f6e\u957f\u5ea6 line . setLength ( 6.0 ); cout << \"Length of line : \" << line . getLength () << endl ; return 0 ; }","title":"\u5e26\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_8","text":"Line :: Line ( double len ) : length ( len ) { cout << \"Object is being created, length = \" << len << endl ; } \u4e0a\u9762\u7684\u8bed\u6cd5\u7b49\u540c\u4e8e\u5982\u4e0b\u8bed\u6cd5\uff1a Line :: Line ( double len ) { length = len ; cout << \"Object is being created, length = \" << len << endl ; } \u5047\u8bbe\u6709\u4e00\u4e2a\u7c7b C\uff0c\u5177\u6709\u591a\u4e2a\u5b57\u6bb5 X\u3001Y\u3001Z \u7b49\u9700\u8981\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u540c\u7406\u5730\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u7684\u8bed\u6cd5\uff0c\u53ea\u9700\u8981\u5728\u4e0d\u540c\u7684\u5b57\u6bb5\u4f7f\u7528\u9017\u53f7\u8fdb\u884c\u5206\u9694\uff0c\u5982\u4e0b\u6240\u793a\uff1a C :: C ( double a , double b , double c ) : X ( a ), Y ( b ), Z ( c ) { //.... }","title":"\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316\u5b57\u6bb5"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_9","text":"\u7c7b\u7684\u6790\u6784\u51fd\u6570\u662f\u7c7b\u7684\u4e00\u79cd\u7279\u6b8a\u7684\u6210\u5458\u51fd\u6570\uff0c\u5b83\u4f1a\u5728\u6bcf\u6b21\u5220\u9664\u6240\u521b\u5efa\u7684\u5bf9\u8c61\u65f6\u6267\u884c\u3002 \u6790\u6784\u51fd\u6570\u7684\u540d\u79f0\u4e0e\u7c7b\u7684\u540d\u79f0\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u662f\u5728\u524d\u9762\u52a0\u4e86\u4e2a\u6ce2\u6d6a\u53f7\uff08~\uff09\u4f5c\u4e3a\u524d\u7f00\uff0c\u5b83\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u503c\uff0c\u4e5f\u4e0d\u80fd\u5e26\u6709\u4efb\u4f55\u53c2\u6570\u3002 \u6790\u6784\u51fd\u6570\u6709\u52a9\u4e8e\u5728\u8df3\u51fa\u7a0b\u5e8f\uff08\u6bd4\u5982\u5173\u95ed\u6587\u4ef6\u3001\u91ca\u653e\u5185\u5b58\u7b49\uff09\u524d\u91ca\u653e\u8d44\u6e90\u3002 #include <iostream> using namespace std ; class Line { public : void setLength ( double len ); double getLength ( void ); Line (); // \u8fd9\u662f\u6784\u9020\u51fd\u6570\u58f0\u660e ~ Line (); // \u8fd9\u662f\u6790\u6784\u51fd\u6570\u58f0\u660e private : double length ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( void ) { cout << \"Object is being created\" << endl ; } Line ::~ Line ( void ) { cout << \"Object is being deleted\" << endl ; } void Line :: setLength ( double len ) { length = len ; } double Line :: getLength ( void ) { return length ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ; // \u8bbe\u7f6e\u957f\u5ea6 line . setLength ( 6.0 ); cout << \"Length of line : \" << line . getLength () << endl ; return 0 ; }","title":"\u6790\u6784\u51fd\u6570"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_10","text":"\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6784\u9020\u51fd\u6570\uff0c\u5b83\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u662f\u4f7f\u7528\u540c\u4e00\u7c7b\u4e2d\u4e4b\u524d\u521b\u5efa\u7684\u5bf9\u8c61\u6765\u521d\u59cb\u5316\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\u901a\u5e38\u7528\u4e8e\uff1a \u901a\u8fc7\u4f7f\u7528\u53e6\u4e00\u4e2a\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6765\u521d\u59cb\u5316\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u3002 \u590d\u5236\u5bf9\u8c61\u628a\u5b83\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u590d\u5236\u5bf9\u8c61\uff0c\u5e76\u4ece\u51fd\u6570\u8fd4\u56de\u8fd9\u4e2a\u5bf9\u8c61\u3002 \u5982\u679c\u5728\u7c7b\u4e2d\u6ca1\u6709\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u884c\u5b9a\u4e49\u4e00\u4e2a\u3002\u5982\u679c\u7c7b\u5e26\u6709\u6307\u9488\u53d8\u91cf\uff0c\u5e76\u6709\u52a8\u6001\u5185\u5b58\u5206\u914d\uff0c\u5219\u5b83\u5fc5\u987b\u6709\u4e00\u4e2a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u6700\u5e38\u89c1\u5f62\u5f0f\u5982\u4e0b\uff1a classname ( const classname & obj ) { // \u6784\u9020\u51fd\u6570\u7684\u4e3b\u4f53 } \u5728\u8fd9\u91cc\uff0cobj \u662f\u4e00\u4e2a\u5bf9\u8c61\u5f15\u7528\uff0c\u8be5\u5bf9\u8c61\u662f\u7528\u4e8e\u521d\u59cb\u5316\u53e6\u4e00\u4e2a\u5bf9\u8c61\u7684\u3002 #include <iostream> using namespace std ; class Line { public : int getLength ( void ); Line ( int len ); // \u7b80\u5355\u7684\u6784\u9020\u51fd\u6570 Line ( const Line & obj ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ Line (); // \u6790\u6784\u51fd\u6570 private : int * ptr ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( int len ) { cout << \"\u8c03\u7528\u6784\u9020\u51fd\u6570\" << endl ; // \u4e3a\u6307\u9488\u5206\u914d\u5185\u5b58 ptr = new int ; * ptr = len ; } Line :: Line ( const Line & obj ) { cout << \"\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u5e76\u4e3a\u6307\u9488 ptr \u5206\u914d\u5185\u5b58\" << endl ; ptr = new int ; * ptr = * obj . ptr ; // \u62f7\u8d1d\u503c } Line ::~ Line ( void ) { cout << \"\u91ca\u653e\u5185\u5b58\" << endl ; delete ptr ; } int Line :: getLength ( void ) { return * ptr ; } void display ( Line obj ) { cout << \"line \u5927\u5c0f : \" << obj . getLength () << endl ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line ( 10 ); display ( line ); return 0 ; } \u4e0b\u9762\u7684\u5b9e\u4f8b\u5bf9\u4e0a\u9762\u7684\u5b9e\u4f8b\u7a0d\u4f5c\u4fee\u6539\uff0c\u901a\u8fc7\u4f7f\u7528\u5df2\u6709\u7684\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\u6765\u521d\u59cb\u5316\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\uff1a #include <iostream> using namespace std ; class Line { public : int getLength ( void ); Line ( int len ); // \u7b80\u5355\u7684\u6784\u9020\u51fd\u6570 Line ( const Line & obj ); // \u62f7\u8d1d\u6784\u9020\u51fd\u6570 ~ Line (); // \u6790\u6784\u51fd\u6570 private : int * ptr ; }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49\uff0c\u5305\u62ec\u6784\u9020\u51fd\u6570 Line :: Line ( int len ) { cout << \"\u8c03\u7528\u6784\u9020\u51fd\u6570\" << endl ; // \u4e3a\u6307\u9488\u5206\u914d\u5185\u5b58 ptr = new int ; * ptr = len ; } Line :: Line ( const Line & obj ) { cout << \"\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u5e76\u4e3a\u6307\u9488 ptr \u5206\u914d\u5185\u5b58\" << endl ; ptr = new int ; * ptr = * obj . ptr ; // \u62f7\u8d1d\u503c } Line ::~ Line ( void ) { cout << \"\u91ca\u653e\u5185\u5b58\" << endl ; delete ptr ; } int Line :: getLength ( void ) { return * ptr ; } void display ( Line obj ) { cout << \"line \u5927\u5c0f : \" << obj . getLength () << endl ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Line line1 ( 10 ); Line line2 = line1 ; // \u8fd9\u91cc\u4e5f\u8c03\u7528\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570 display ( line1 ); display ( line2 ); return 0 ; }","title":"\u62f7\u8d1d\u6784\u9020\u51fd\u6570"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_11","text":"\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u662f\u5b9a\u4e49\u5728\u7c7b\u5916\u90e8\uff0c\u4f46\u6709\u6743\u8bbf\u95ee\u7c7b\u7684\u6240\u6709\u79c1\u6709\uff08private\uff09\u6210\u5458\u548c\u4fdd\u62a4\uff08protected\uff09\u6210\u5458\u3002\u5c3d\u7ba1\u53cb\u5143\u51fd\u6570\u7684\u539f\u578b\u6709\u5728\u7c7b\u7684\u5b9a\u4e49\u4e2d\u51fa\u73b0\u8fc7\uff0c\u4f46\u662f\u53cb\u5143\u51fd\u6570\u5e76\u4e0d\u662f\u6210\u5458\u51fd\u6570\u3002 \u53cb\u5143\u53ef\u4ee5\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u88ab\u79f0\u4e3a\u53cb\u5143\u51fd\u6570\uff1b\u53cb\u5143\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7c7b\uff0c\u8be5\u7c7b\u88ab\u79f0\u4e3a\u53cb\u5143\u7c7b\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6574\u4e2a\u7c7b\u53ca\u5176\u6240\u6709\u6210\u5458\u90fd\u662f\u53cb\u5143\u3002 \u5982\u679c\u8981\u58f0\u660e\u51fd\u6570\u4e3a\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\uff0c\u9700\u8981\u5728\u7c7b\u5b9a\u4e49\u4e2d\u8be5\u51fd\u6570\u539f\u578b\u524d\u4f7f\u7528\u5173\u952e\u5b57 friend\uff0c\u5982\u4e0b\u6240\u793a\uff1a class Box { double width ; public : double length ; friend void printWidth ( Box box ); void setWidth ( double wid ); }; \u58f0\u660e\u7c7b ClassTwo \u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u4f5c\u4e3a\u7c7b ClassOne \u7684\u53cb\u5143\uff0c\u9700\u8981\u5728\u7c7b ClassOne \u7684\u5b9a\u4e49\u4e2d\u653e\u7f6e\u5982\u4e0b\u58f0\u660e\uff1a friend class ClassTwo ; #include <iostream> using namespace std ; class Box { double width ; public : friend void printWidth ( Box box ); void setWidth ( double wid ); }; // \u6210\u5458\u51fd\u6570\u5b9a\u4e49 void Box :: setWidth ( double wid ) { width = wid ; } // \u8bf7\u6ce8\u610f\uff1aprintWidth() \u4e0d\u662f\u4efb\u4f55\u7c7b\u7684\u6210\u5458\u51fd\u6570 void printWidth ( Box box ) { /* \u56e0\u4e3a printWidth() \u662f Box \u7684\u53cb\u5143\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u8be5\u7c7b\u7684\u4efb\u4f55\u6210\u5458 */ cout << \"Width of box : \" << box . width << endl ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Box box ; // \u4f7f\u7528\u6210\u5458\u51fd\u6570\u8bbe\u7f6e\u5bbd\u5ea6 box . setWidth ( 10.0 ); // \u4f7f\u7528\u53cb\u5143\u51fd\u6570\u8f93\u51fa\u5bbd\u5ea6 printWidth ( box ); return 0 ; }","title":"\u53cb\u5143\u51fd\u6570"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_12","text":"C++ \u5185\u8054\u51fd\u6570\u662f\u901a\u5e38\u4e0e\u7c7b\u4e00\u8d77\u4f7f\u7528\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u662f\u5185\u8054\u7684\uff0c\u90a3\u4e48\u5728\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u628a\u8be5\u51fd\u6570\u7684\u4ee3\u7801\u526f\u672c\u653e\u7f6e\u5728\u6bcf\u4e2a\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5730\u65b9\u3002 \u5bf9\u5185\u8054\u51fd\u6570\u8fdb\u884c\u4efb\u4f55\u4fee\u6539\uff0c\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u51fd\u6570\u7684\u6240\u6709\u5ba2\u6237\u7aef\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u9700\u8981\u91cd\u65b0\u66f4\u6362\u4e00\u6b21\u6240\u6709\u7684\u4ee3\u7801\uff0c\u5426\u5219\u5c06\u4f1a\u7ee7\u7eed\u4f7f\u7528\u65e7\u7684\u51fd\u6570\u3002 \u5982\u679c\u60f3\u628a\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5219\u9700\u8981\u5728\u51fd\u6570\u540d\u524d\u9762\u653e\u7f6e\u5173\u952e\u5b57 inline\uff0c\u5728\u8c03\u7528\u51fd\u6570\u4e4b\u524d\u9700\u8981\u5bf9\u51fd\u6570\u8fdb\u884c\u5b9a\u4e49\u3002\u5982\u679c\u5df2\u5b9a\u4e49\u7684\u51fd\u6570\u591a\u4e8e\u4e00\u884c\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565 inline \u9650\u5b9a\u7b26\u3002 \u5728\u7c7b\u5b9a\u4e49\u4e2d\u7684\u5b9a\u4e49\u7684\u51fd\u6570\u90fd\u662f\u5185\u8054\u51fd\u6570\uff0c\u5373\u4f7f\u6ca1\u6709\u4f7f\u7528 inline \u8bf4\u660e\u7b26\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u4f7f\u7528\u5185\u8054\u51fd\u6570\u6765\u8fd4\u56de\u4e24\u4e2a\u6570\u4e2d\u7684\u6700\u5927\u503c\uff1a #include <iostream> using namespace std ; inline int Max ( int x , int y ) { return ( x > y ) ? x : y ; } // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { cout << \"Max (20,10): \" << Max ( 20 , 10 ) << endl ; cout << \"Max (0,200): \" << Max ( 0 , 200 ) << endl ; cout << \"Max (100,1010): \" << Max ( 100 , 1010 ) << endl ; return 0 ; } \u5f15\u5165\u5185\u8054\u51fd\u6570\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u7a0b\u5e8f\u4e2d\u51fd\u6570\u8c03\u7528\u7684\u6548\u7387\u95ee\u9898\uff0c\u8fd9\u4e48\u8bf4\u5427\uff0c\u7a0b\u5e8f\u5728\u7f16\u8bd1\u5668\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u5c06\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u7684\u5185\u8054\u51fd\u6570\u7684\u8c03\u7528\u8868\u8fbe\u5f0f\u7528\u5185\u8054\u51fd\u6570\u7684\u51fd\u6570\u4f53\u8fdb\u884c\u66ff\u6362\uff0c\u800c\u5bf9\u4e8e\u5176\u4ed6\u7684\u51fd\u6570\uff0c\u90fd\u662f\u5728\u8fd0\u884c\u65f6\u5019\u624d\u88ab\u66ff\u4ee3\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u4e2a\u7a7a\u95f4\u4ee3\u4ef7\u6362\u65f6\u95f4\u7684i\u8282\u7701\u3002\u6240\u4ee5\u5185\u8054\u51fd\u6570\u4e00\u822c\u90fd\u662f1-5\u884c\u7684\u5c0f\u51fd\u6570\u3002\u5728\u4f7f\u7528\u5185\u8054\u51fd\u6570\u65f6\u8981\u7559\u795e\uff1a \u5728\u5185\u8054\u51fd\u6570\u5185\u4e0d\u5141\u8bb8\u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u548c\u5f00\u5173\u8bed\u53e5\uff1b \u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u5fc5\u987b\u51fa\u73b0\u5728\u5185\u8054\u51fd\u6570\u7b2c\u4e00\u6b21\u8c03\u7528\u4e4b\u524d\uff1b \u7c7b\u7ed3\u6784\u4e2d\u6240\u5728\u7684\u7c7b\u8bf4\u660e\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u5185\u8054\u51fd\u6570\u3002","title":"\u5185\u8054\u51fd\u6570"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#this","text":"\u5728 C++ \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5bf9\u8c61\u90fd\u80fd\u901a\u8fc7 this \u6307\u9488\u6765\u8bbf\u95ee\u81ea\u5df1\u7684\u5730\u5740\u3002this \u6307\u9488\u662f\u6240\u6709\u6210\u5458\u51fd\u6570\u7684\u9690\u542b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u6307\u5411\u8c03\u7528\u5bf9\u8c61\u3002 \u53cb\u5143\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u56e0\u4e3a\u53cb\u5143\u4e0d\u662f\u7c7b\u7684\u6210\u5458\u3002\u53ea\u6709\u6210\u5458\u51fd\u6570\u624d\u6709 this \u6307\u9488\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u7406\u89e3 this \u6307\u9488\u7684\u6982\u5ff5\uff1a #include <iostream> using namespace std ; class Box { public : // \u6784\u9020\u51fd\u6570\u5b9a\u4e49 Box ( double l = 2.0 , double b = 2.0 , double h = 2.0 ) { cout << \"Constructor called.\" << endl ; length = l ; breadth = b ; height = h ; } double Volume () { return length * breadth * height ; } int compare ( Box box ) { return this -> Volume () > box . Volume (); } private : double length ; // Length of a box double breadth ; // Breadth of a box double height ; // Height of a box }; int main ( void ) { Box Box1 ( 3.3 , 1.2 , 1.5 ); // Declare box1 Box Box2 ( 8.5 , 6.0 , 2.0 ); // Declare box2 if ( Box1 . compare ( Box2 )) { cout << \"Box2 is smaller than Box1\" << endl ; } else { cout << \"Box2 is equal to or larger than Box1\" << endl ; } return 0 ; }","title":"this \u6307\u9488"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_13","text":"\u4e00\u4e2a\u6307\u5411 C++ \u7c7b\u7684\u6307\u9488\u4e0e\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\u7c7b\u4f3c\uff0c\u8bbf\u95ee\u6307\u5411\u7c7b\u7684\u6307\u9488\u7684\u6210\u5458\uff0c\u9700\u8981\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26 ->\uff0c\u5c31\u50cf\u8bbf\u95ee\u6307\u5411\u7ed3\u6784\u7684\u6307\u9488\u4e00\u6837\u3002\u4e0e\u6240\u6709\u7684\u6307\u9488\u4e00\u6837\uff0c\u60a8\u5fc5\u987b\u5728\u4f7f\u7528\u6307\u9488\u4e4b\u524d\uff0c\u5bf9\u6307\u9488\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u7406\u89e3\u6307\u5411\u7c7b\u7684\u6307\u9488\u7684\u6982\u5ff5\uff1a #include <iostream> using namespace std ; class Box { public : // \u6784\u9020\u51fd\u6570\u5b9a\u4e49 Box ( double l = 2.0 , double b = 2.0 , double h = 2.0 ) { cout << \"Constructor called.\" << endl ; length = l ; breadth = b ; height = h ; } double Volume () { return length * breadth * height ; } private : double length ; // Length of a box double breadth ; // Breadth of a box double height ; // Height of a box }; int main ( void ) { Box Box1 ( 3.3 , 1.2 , 1.5 ); // Declare box1 Box Box2 ( 8.5 , 6.0 , 2.0 ); // Declare box2 Box * ptrBox ; // Declare pointer to a class. // \u4fdd\u5b58\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u7684\u5730\u5740 ptrBox = & Box1 ; // \u73b0\u5728\u5c1d\u8bd5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u6210\u5458 cout << \"Volume of Box1: \" << ptrBox -> Volume () << endl ; // \u4fdd\u5b58\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u7684\u5730\u5740 ptrBox = & Box2 ; // \u73b0\u5728\u5c1d\u8bd5\u4f7f\u7528\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26\u6765\u8bbf\u95ee\u6210\u5458 cout << \"Volume of Box2: \" << ptrBox -> Volume () << endl ; return 0 ; }","title":"\u6307\u5411\u7c7b\u7684\u6307\u9488"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_14","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 static \u5173\u952e\u5b57\u6765\u628a\u7c7b\u6210\u5458\u5b9a\u4e49\u4e3a\u9759\u6001\u7684\u3002\u5f53\u6211\u4eec\u58f0\u660e\u7c7b\u7684\u6210\u5458\u4e3a\u9759\u6001\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u65e0\u8bba\u521b\u5efa\u591a\u5c11\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u9759\u6001\u6210\u5458\u90fd\u53ea\u6709\u4e00\u4e2a\u526f\u672c\u3002 \u9759\u6001\u6210\u5458\u5728\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u4e2d\u662f\u5171\u4eab\u7684\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5176\u4ed6\u7684\u521d\u59cb\u5316\u8bed\u53e5\uff0c\u5728\u521b\u5efa\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u6240\u6709\u7684\u9759\u6001\u6570\u636e\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u4e3a\u96f6\u3002 \u6211\u4eec\u4e0d\u80fd\u628a\u9759\u6001\u6210\u5458\u7684\u521d\u59cb\u5316\u653e\u7f6e\u5728\u7c7b\u7684\u5b9a\u4e49\u4e2d\uff0c\u4f46\u662f\u53ef\u4ee5\u5728\u7c7b\u7684\u5916\u90e8\u901a\u8fc7\u4f7f\u7528\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u6765\u91cd\u65b0\u58f0\u660e\u9759\u6001\u53d8\u91cf\u4ece\u800c\u5bf9\u5b83\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u9762\u7684\u5b9e\u4f8b\u6240\u793a\u3002 #include <iostream> using namespace std ; class Box { public : static int objectCount ; // \u6784\u9020\u51fd\u6570\u5b9a\u4e49 Box ( double l = 2.0 , double b = 2.0 , double h = 2.0 ) { cout << \"Constructor called.\" << endl ; length = l ; breadth = b ; height = h ; // \u6bcf\u6b21\u521b\u5efa\u5bf9\u8c61\u65f6\u589e\u52a0 1 objectCount ++ ; } double Volume () { return length * breadth * height ; } private : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; // \u521d\u59cb\u5316\u7c7b Box \u7684\u9759\u6001\u6210\u5458 int Box :: objectCount = 0 ; int main ( void ) { Box Box1 ( 3.3 , 1.2 , 1.5 ); // \u58f0\u660e box1 Box Box2 ( 8.5 , 6.0 , 2.0 ); // \u58f0\u660e box2 // \u8f93\u51fa\u5bf9\u8c61\u7684\u603b\u6570 cout << \"Total objects: \" << Box :: objectCount << endl ; return 0 ; }","title":"\u7c7b\u7684\u9759\u6001\u6210\u5458"},{"location":"cpp/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/#_15","text":"\u5982\u679c\u628a\u51fd\u6570\u6210\u5458\u58f0\u660e\u4e3a\u9759\u6001\u7684\uff0c\u5c31\u53ef\u4ee5\u628a\u51fd\u6570\u4e0e\u7c7b\u7684\u4efb\u4f55\u7279\u5b9a\u5bf9\u8c61\u72ec\u7acb\u5f00\u6765\u3002\u9759\u6001\u6210\u5458\u51fd\u6570\u5373\u4f7f\u5728\u7c7b\u5bf9\u8c61\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u88ab\u8c03\u7528\uff0c\u9759\u6001\u51fd\u6570\u53ea\u8981\u4f7f\u7528\u7c7b\u540d\u52a0\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u5c31\u53ef\u4ee5\u8bbf\u95ee\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\u6570\u636e\u3001\u5176\u4ed6\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u7c7b\u5916\u90e8\u7684\u5176\u4ed6\u51fd\u6570\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u6709\u4e00\u4e2a\u7c7b\u8303\u56f4\uff0c\u4ed6\u4eec\u4e0d\u80fd\u8bbf\u95ee\u7c7b\u7684 this \u6307\u9488\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u6765\u5224\u65ad\u7c7b\u7684\u67d0\u4e9b\u5bf9\u8c61\u662f\u5426\u5df2\u88ab\u521b\u5efa\u3002 Notice \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u666e\u901a\u6210\u5458\u51fd\u6570\u7684\u533a\u522b \u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff08\u5305\u62ec\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\uff09\u3002 \u666e\u901a\u6210\u5458\u51fd\u6570\u6709 this \u6307\u9488\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2d\u7684\u4efb\u610f\u6210\u5458\uff1b\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u7406\u89e3\u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u6982\u5ff5\uff1a #include <iostream> using namespace std ; class Box { public : static int objectCount ; // \u6784\u9020\u51fd\u6570\u5b9a\u4e49 Box ( double l = 2.0 , double b = 2.0 , double h = 2.0 ) { cout << \"Constructor called.\" << endl ; length = l ; breadth = b ; height = h ; // \u6bcf\u6b21\u521b\u5efa\u5bf9\u8c61\u65f6\u589e\u52a0 1 objectCount ++ ; } double Volume () { return length * breadth * height ; } static int getCount () { return objectCount ; } private : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; // \u521d\u59cb\u5316\u7c7b Box \u7684\u9759\u6001\u6210\u5458 int Box :: objectCount = 0 ; int main ( void ) { // \u5728\u521b\u5efa\u5bf9\u8c61\u4e4b\u524d\u8f93\u51fa\u5bf9\u8c61\u7684\u603b\u6570 cout << \"Inital Stage Count: \" << Box :: getCount () << endl ; Box Box1 ( 3.3 , 1.2 , 1.5 ); // \u58f0\u660e box1 Box Box2 ( 8.5 , 6.0 , 2.0 ); // \u58f0\u660e box2 // \u5728\u521b\u5efa\u5bf9\u8c61\u4e4b\u540e\u8f93\u51fa\u5bf9\u8c61\u7684\u603b\u6570 cout << \"Final Stage Count: \" << Box :: getCount () << endl ; return 0 ; }","title":"\u9759\u6001\u6210\u5458\u51fd\u6570"},{"location":"cpp/%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/","text":"1. \u7eaf\u865a\u51fd\u6570\u4e0e\u62bd\u8c61\u7c7b \u00b6 C++\u4e2d\u7684\u7eaf\u865a\u51fd\u6570(\u6216\u62bd\u8c61\u51fd\u6570)\u662f\u6211\u4eec\u6ca1\u6709\u5b9e\u73b0\u7684\u865a\u51fd\u6570\uff01\u6211\u4eec\u53ea\u9700\u58f0\u660e\u5b83!\u901a\u8fc7\u58f0\u660e\u4e2d\u8d4b\u503c0\u6765\u58f0\u660e\u7eaf\u865a\u51fd\u6570\uff01 class Test { // Data members of class public : // Pure Virtual Function virtual void show () = 0 ; /* Other members */ }; \u7eaf\u865a\u51fd\u6570\uff1a\u6ca1\u6709\u51fd\u6570\u4f53\u7684\u865a\u51fd\u6570 \u62bd\u8c61\u7c7b\uff1a\u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b \u62bd\u8c61\u7c7b\u53ea\u80fd\u4f5c\u4e3a\u57fa\u7c7b\u6765\u6d3e\u751f\u65b0\u7c7b\u4f7f\u7528\uff0c\u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61,\u62bd\u8c61\u7c7b\u7684\u6307\u9488\u548c\u5f15\u7528->\u7531\u62bd\u8c61\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u7c7b\u7684\u5bf9\u8c61\uff01 #include <iostream> using namespace std ; class A { private : int a ; public : virtual void show () = 0 ; // \u7eaf\u865a\u51fd\u6570 }; int main () { /* * 1. \u62bd\u8c61\u7c7b\u53ea\u80fd\u4f5c\u4e3a\u57fa\u7c7b\u6765\u6d3e\u751f\u65b0\u7c7b\u4f7f\u7528 * 2. \u62bd\u8c61\u7c7b\u7684\u6307\u9488\u548c\u5f15\u7528->\u7531\u62bd\u8c61\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u7c7b\u7684\u5bf9\u8c61\uff01 */ A a ; // error \u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u5bf9\u8c61 A * a1 ; // ok \u53ef\u4ee5\u5b9a\u4e49\u62bd\u8c61\u7c7b\u7684\u6307\u9488 A * a2 = new A (); // error, A\u662f\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u5bf9\u8c61 } 2. \u5b9e\u73b0\u62bd\u8c61\u7c7b \u00b6 \u62bd\u8c61\u7c7b\u4e2d\uff1a\u5728\u6210\u5458\u51fd\u6570\u5185\u53ef\u4ee5\u8c03\u7528\u7eaf\u865a\u51fd\u6570\uff0c\u5728\u6784\u9020\u51fd\u6570/\u6790\u6784\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u4f7f\u7528\u7eaf\u865a\u51fd\u6570\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u4ece\u62bd\u8c61\u7c7b\u6d3e\u751f\u800c\u6765\uff0c\u5b83\u5fc5\u987b\u5b9e\u73b0\u4e86\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u7eaf\u865a\u51fd\u6570\uff0c\u624d\u80fd\u6210\u4e3a\u975e\u62bd\u8c61\u7c7b\u3002 #include <iostream> using namespace std ; class A { public : virtual void f () = 0 ; // \u7eaf\u865a\u51fd\u6570 void g (){ this -> f (); } A (){} }; class B : public A { public : void f (){ cout << \"B:f()\" << endl ;} }; int main (){ B b ; b . g (); return 0 ; } 3. \u91cd\u8981\u70b9 \u00b6 \u7eaf\u865a\u51fd\u6570\u4f7f\u4e00\u4e2a\u7c7b\u53d8\u6210\u62bd\u8c61\u7c7b #include <iostream> using namespace std ; /** * @brief \u62bd\u8c61\u7c7b\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570 */ class Test { int x ; public : virtual void show () = 0 ; int getX () { return x ; } }; int main ( void ) { Test t ; //error! \u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61 return 0 ; } \u62bd\u8c61\u7c7b\u7c7b\u578b\u7684\u6307\u9488\u548c\u5f15\u7528 #include <iostream> using namespace std ; /** * @brief \u62bd\u8c61\u7c7b\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570 */ class Base { int x ; public : virtual void show () = 0 ; int getX () { return x ; } }; class Derived : public Base { public : void show () { cout << \"In Derived \\n \" ; } Derived (){} }; int main ( void ) { //Base b; //error! \u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61 //Base *b = new Base(); error! Base * bp = new Derived (); // \u62bd\u8c61\u7c7b\u7684\u6307\u9488\u548c\u5f15\u7528 -> \u7531\u62bd\u8c61\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u7c7b\u7684\u5bf9\u8c61 bp -> show (); return 0 ; } \u5982\u679c\u6211\u4eec\u4e0d\u5728\u6d3e\u751f\u7c7b\u4e2d\u8986\u76d6\u7eaf\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u6d3e\u751f\u7c7b\u4e5f\u4f1a\u53d8\u6210\u62bd\u8c61\u7c7b\u3002 #include <iostream> using namespace std ; class Base { int x ; public : virtual void show () = 0 ; int getX () { return x ; } }; class Derived : public Base { public : // void show() { } }; int main ( void ) { Derived d ; //error! \u6d3e\u751f\u7c7b\u6ca1\u6709\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u6d3e\u751f\u7c7b\u4e5f\u4f1a\u53d8\u4e3a\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61 return 0 ; } \u62bd\u8c61\u7c7b\u53ef\u4ee5\u6709\u6784\u9020\u51fd\u6570 #include <iostream> using namespace std ; // An abstract class with constructor class Base { protected : int x ; public : virtual void fun () = 0 ; Base ( int i ) { x = i ; } }; class Derived : public Base { int y ; public : Derived ( int i , int j ) : Base ( i ) { y = j ; } void fun () { cout << \"x = \" << x << \", y = \" << y ; } }; int main ( void ) { Derived d ( 4 , 5 ); d . fun (); return 0 ; } \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\uff0c\u800c\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u662f\u865a\u6790\u6784\u51fd\u6570\u3002 #include <iostream> using namespace std ; class Base { public : Base () { cout << \"Constructor: Base\" << endl ; } virtual ~ Base () { cout << \"Destructor : Base\" << endl ; } }; class Derived : public Base { public : Derived () { cout << \"Constructor: Derived\" << endl ; } ~ Derived () { cout << \"Destructor : Derived\" << endl ; } }; int main () { Base * Var = new Derived (); delete Var ; return 0 ; } \u5f53\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u5e76\u5220\u9664\u5bf9\u8c61\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u8c03\u7528\u9002\u5f53\u7684\u6790\u6784\u51fd\u6570\u3002 \u5982\u679c\u6790\u6784\u51fd\u6570\u4e0d\u662f\u865a\u62df\u7684\uff0c\u5219\u53ea\u80fd\u8c03\u7528\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002 4. \u5b8c\u6574\u5b9e\u4f8b \u00b6 \u62bd\u8c61\u7c7b\u7531\u6d3e\u751f\u7c7b\u7ee7\u627f\u5b9e\u73b0\uff01 #include <iostream> using namespace std ; class Base { int x ; public : virtual void fun () = 0 ; int getX () { return x ; } }; class Derived : public Base { int y ; public : void fun () { cout << \"fun() called\" ; } // \u5b9e\u73b0\u4e86fun()\u51fd\u6570 }; int main ( void ) { Derived d ; d . fun (); return 0 ; }","title":"\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b"},{"location":"cpp/%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/#1","text":"C++\u4e2d\u7684\u7eaf\u865a\u51fd\u6570(\u6216\u62bd\u8c61\u51fd\u6570)\u662f\u6211\u4eec\u6ca1\u6709\u5b9e\u73b0\u7684\u865a\u51fd\u6570\uff01\u6211\u4eec\u53ea\u9700\u58f0\u660e\u5b83!\u901a\u8fc7\u58f0\u660e\u4e2d\u8d4b\u503c0\u6765\u58f0\u660e\u7eaf\u865a\u51fd\u6570\uff01 class Test { // Data members of class public : // Pure Virtual Function virtual void show () = 0 ; /* Other members */ }; \u7eaf\u865a\u51fd\u6570\uff1a\u6ca1\u6709\u51fd\u6570\u4f53\u7684\u865a\u51fd\u6570 \u62bd\u8c61\u7c7b\uff1a\u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b \u62bd\u8c61\u7c7b\u53ea\u80fd\u4f5c\u4e3a\u57fa\u7c7b\u6765\u6d3e\u751f\u65b0\u7c7b\u4f7f\u7528\uff0c\u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61,\u62bd\u8c61\u7c7b\u7684\u6307\u9488\u548c\u5f15\u7528->\u7531\u62bd\u8c61\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u7c7b\u7684\u5bf9\u8c61\uff01 #include <iostream> using namespace std ; class A { private : int a ; public : virtual void show () = 0 ; // \u7eaf\u865a\u51fd\u6570 }; int main () { /* * 1. \u62bd\u8c61\u7c7b\u53ea\u80fd\u4f5c\u4e3a\u57fa\u7c7b\u6765\u6d3e\u751f\u65b0\u7c7b\u4f7f\u7528 * 2. \u62bd\u8c61\u7c7b\u7684\u6307\u9488\u548c\u5f15\u7528->\u7531\u62bd\u8c61\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u7c7b\u7684\u5bf9\u8c61\uff01 */ A a ; // error \u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u5bf9\u8c61 A * a1 ; // ok \u53ef\u4ee5\u5b9a\u4e49\u62bd\u8c61\u7c7b\u7684\u6307\u9488 A * a2 = new A (); // error, A\u662f\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u5bf9\u8c61 }","title":"1. \u7eaf\u865a\u51fd\u6570\u4e0e\u62bd\u8c61\u7c7b"},{"location":"cpp/%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/#2","text":"\u62bd\u8c61\u7c7b\u4e2d\uff1a\u5728\u6210\u5458\u51fd\u6570\u5185\u53ef\u4ee5\u8c03\u7528\u7eaf\u865a\u51fd\u6570\uff0c\u5728\u6784\u9020\u51fd\u6570/\u6790\u6784\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u4f7f\u7528\u7eaf\u865a\u51fd\u6570\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u4ece\u62bd\u8c61\u7c7b\u6d3e\u751f\u800c\u6765\uff0c\u5b83\u5fc5\u987b\u5b9e\u73b0\u4e86\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u7eaf\u865a\u51fd\u6570\uff0c\u624d\u80fd\u6210\u4e3a\u975e\u62bd\u8c61\u7c7b\u3002 #include <iostream> using namespace std ; class A { public : virtual void f () = 0 ; // \u7eaf\u865a\u51fd\u6570 void g (){ this -> f (); } A (){} }; class B : public A { public : void f (){ cout << \"B:f()\" << endl ;} }; int main (){ B b ; b . g (); return 0 ; }","title":"2. \u5b9e\u73b0\u62bd\u8c61\u7c7b"},{"location":"cpp/%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/#3","text":"\u7eaf\u865a\u51fd\u6570\u4f7f\u4e00\u4e2a\u7c7b\u53d8\u6210\u62bd\u8c61\u7c7b #include <iostream> using namespace std ; /** * @brief \u62bd\u8c61\u7c7b\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570 */ class Test { int x ; public : virtual void show () = 0 ; int getX () { return x ; } }; int main ( void ) { Test t ; //error! \u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61 return 0 ; } \u62bd\u8c61\u7c7b\u7c7b\u578b\u7684\u6307\u9488\u548c\u5f15\u7528 #include <iostream> using namespace std ; /** * @brief \u62bd\u8c61\u7c7b\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u7eaf\u865a\u51fd\u6570 */ class Base { int x ; public : virtual void show () = 0 ; int getX () { return x ; } }; class Derived : public Base { public : void show () { cout << \"In Derived \\n \" ; } Derived (){} }; int main ( void ) { //Base b; //error! \u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61 //Base *b = new Base(); error! Base * bp = new Derived (); // \u62bd\u8c61\u7c7b\u7684\u6307\u9488\u548c\u5f15\u7528 -> \u7531\u62bd\u8c61\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u7c7b\u7684\u5bf9\u8c61 bp -> show (); return 0 ; } \u5982\u679c\u6211\u4eec\u4e0d\u5728\u6d3e\u751f\u7c7b\u4e2d\u8986\u76d6\u7eaf\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u6d3e\u751f\u7c7b\u4e5f\u4f1a\u53d8\u6210\u62bd\u8c61\u7c7b\u3002 #include <iostream> using namespace std ; class Base { int x ; public : virtual void show () = 0 ; int getX () { return x ; } }; class Derived : public Base { public : // void show() { } }; int main ( void ) { Derived d ; //error! \u6d3e\u751f\u7c7b\u6ca1\u6709\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u6d3e\u751f\u7c7b\u4e5f\u4f1a\u53d8\u4e3a\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61 return 0 ; } \u62bd\u8c61\u7c7b\u53ef\u4ee5\u6709\u6784\u9020\u51fd\u6570 #include <iostream> using namespace std ; // An abstract class with constructor class Base { protected : int x ; public : virtual void fun () = 0 ; Base ( int i ) { x = i ; } }; class Derived : public Base { int y ; public : Derived ( int i , int j ) : Base ( i ) { y = j ; } void fun () { cout << \"x = \" << x << \", y = \" << y ; } }; int main ( void ) { Derived d ( 4 , 5 ); d . fun (); return 0 ; } \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\uff0c\u800c\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u662f\u865a\u6790\u6784\u51fd\u6570\u3002 #include <iostream> using namespace std ; class Base { public : Base () { cout << \"Constructor: Base\" << endl ; } virtual ~ Base () { cout << \"Destructor : Base\" << endl ; } }; class Derived : public Base { public : Derived () { cout << \"Constructor: Derived\" << endl ; } ~ Derived () { cout << \"Destructor : Derived\" << endl ; } }; int main () { Base * Var = new Derived (); delete Var ; return 0 ; } \u5f53\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u5e76\u5220\u9664\u5bf9\u8c61\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u8c03\u7528\u9002\u5f53\u7684\u6790\u6784\u51fd\u6570\u3002 \u5982\u679c\u6790\u6784\u51fd\u6570\u4e0d\u662f\u865a\u62df\u7684\uff0c\u5219\u53ea\u80fd\u8c03\u7528\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002","title":"3. \u91cd\u8981\u70b9"},{"location":"cpp/%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/#4","text":"\u62bd\u8c61\u7c7b\u7531\u6d3e\u751f\u7c7b\u7ee7\u627f\u5b9e\u73b0\uff01 #include <iostream> using namespace std ; class Base { int x ; public : virtual void fun () = 0 ; int getX () { return x ; } }; class Derived : public Base { int y ; public : void fun () { cout << \"fun() called\" ; } // \u5b9e\u73b0\u4e86fun()\u51fd\u6570 }; int main ( void ) { Derived d ; d . fun (); return 0 ; }","title":"4. \u5b8c\u6574\u5b9e\u4f8b"},{"location":"cpp/%E7%BB%86%E8%8A%82/","text":"delete \u00b6 delete\u5904\u7406\u5355\u4e2a\u7c7b\u7c7b\u578b\uff0c\u5148\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u91ca\u653e\u5b83\u6240\u5360\u8d44\u6e90\uff0c\u7136\u540e\u91ca\u653e\u5b83\u6240\u5360\u5185\u5b58\u7a7a\u95f4\u3002 delete\u5904\u7406\u6570\u7ec4\u7c7b\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u4f1a\u5bf9\u6bcf\u4e00\u4e2a\u6570\u7ec4\u5bf9\u8c61\u90fd\u8c03\u7528\u5b83\u4eec\u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u91ca\u653e\u5b83\u4eec\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u6240\u4ee5\u5bf9\u4e8e\u7c7b\u7c7b\u578b\u7684\u6570\u7ec4\u5982\u679c\u4e0d\u8c03\u7528delete[],\u90a3\u5c31\u53ea\u8c03\u7528\u4e86\u4e0b\u6807\u4e3a0\u7684\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u95ee\u9898\u3002 c \u8bed\u8a00\u548cc++\u7533\u8bf7\u7a7a\u95f4\u548c\u91ca\u653e\u7684\u533a\u522b \u00b6 new delete \u53ef\u4ee5\u89e6\u53d1\u6784\u9020\u548c\u6790\u6784\u51fd\u6570\uff0cc\u8bed\u8a00\u4e2d\u7684malloc\uff0cfree\u5219\u4e0d\u4f1a #include <iostream> using namespace std ; int main ( int argc , char const * argv []) { // new \u7533\u8bf7\u5185\u5b58 int * p1 = new int ; // c++ * p1 = 12 ; // \u5199 cout << * p1 << endl ; // \u8bfb delete p1 ; // delete + \u6307\u9488 // \u7533\u8bf7\u5e76\u521d\u59cb\u5316 int * p2 = new int ( 123 ); cout << * p2 << endl ; delete p2 ; // \u7533\u8bf7\u6570\u7ec4\u7a7a\u95f4\uff0c\u8fd4\u56de\u7a7a\u95f4\u7684\u9996\u5730\u5740 int * p = new int [ 5 ]; p [ 0 ] = 0 ; p [ 1 ] = 1 ; p [ 2 ] = 2 ; p [ 3 ] = 3 ; p [ 4 ] = 4 ; cout << p << endl ; delete [] p ; // \u91ca\u653e\u6570\u7ec4\u8981\u52a0[] return 0 ; } \u5f15\u7528 \u00b6 #include <iostream> using namespace std ; int main ( int argc , char const * argv []) { int a = 0 ; int & c = a ; // \u58f0\u660e\u53d8\u91cfa\u7684\u4e00\u4e2a\u5f15\u7528c, \u5f15\u7528\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u8d4b\u503c cout << a << ' ' << c << endl ; c = 13 ; cout << a << endl ; // \u5f15\u7528\u4e00\u65e6\u7ed1\u5b9a\u5c31\u662f\u552f\u4e00\u7684 int f = 14 ; c = f ; // \u628af\u7684\u503c\u8d4b\u503c\u7ed9c\uff0c\u5e76\u4e0d\u662fc\u5f15\u7528\u81f3f\uff0cc\u5df2\u7ecf\u5f15\u7528\u4e8ea\u4e86 cout << a << endl ; // \u5e38\u91cf\u7684\u5f15\u7528 const int & aa = 12 ; cout << 12 << endl ; // \u6570\u7ec4\u7684\u5f15\u7528 int arr [ 12 ]; int ( & p )[ 12 ] = arr ; // \u4e8c\u7ef4\u6570\u7ec4\u7684\u5f15\u7528 int arr2 [ 2 ][ 3 ]; int ( & p2 )[ 2 ][ 3 ] = arr2 ; // \u6307\u9488\u7684\u5f15\u7528 int b = 12 ; int * point = & b ; int * ( & p3 ) = point ; * p3 = 23 ; cout << * point << endl ; return 0 ; } \u5f15\u7528\u548c\u6307\u9488\u7684\u533a\u522b \u00b6 \u5f15\u7528\u58f0\u660e\u5c31\u8981\u521d\u59cb\u5316\uff0c\u6307\u9488\u4e0d\u7528\u3002 \u5f15\u7528\u521d\u59cb\u5316\u4e4b\u540e\u5c31\u4e0d\u80fd\u5f15\u7528\u5176\u4ed6\u7a7a\u95f4\uff0c\u6307\u9488\u53ef\u4ee5\u6307\u5411\u5176\u4ed6\u7a7a\u95f4 \u5f15\u7528\u4e0d\u5360\u5b58\u50a8\u7a7a\u95f4\uff0c\u6307\u9488\u5360\u7a7a\u95f4 \u5f15\u7528\u6548\u7387\u66f4\u9ad8\uff0c\u6307\u9488\u95f4\u63a5\u64cd\u4f5c \u5f15\u7528\u66f4\u5b89\u5168\uff0c\u6307\u9488\u53ef\u4ee5\u504f\u79fb \u6307\u9488\u66f4\u7075\u6d3b\uff0c\u76f4\u63a5\u64cd\u4f5c\u5730\u5740\u3002 #include <iostream> using namespace std ; class T { public : T (); ~ T (); private : int a = 0 ; }; T :: T () { } T ::~ T () { } int main ( int argc , const char * argv ) { T * t = new T ; // \u6808\u7a7a\u95f4\u7684\u6307\u9488t\u6307\u5411\u5806\u7a7a\u95f4new\u51fa\u7684\u5bf9\u8c61 T & r = * t ; // \u6808\u7a7a\u95f4\u7684\u5f15\u7528\u53d8\u91cf\u6307\u5411new T\u5bf9\u8c61 T tt = r ; // tt\u6808\u7a7a\u95f4\u6307\u5411\u5806\u7a7a\u95f4\u7684new T\u62f7\u8d1d\u51fa\u6765\u7684\u5bf9\u8c61 T * t1 = & tt ; // t1\u6307\u9488\u6307\u5411tt\u6307\u9488\u7684\u5730\u5740 cout << t << endl << & r << endl ; return 0 ; } \u53c2\u8003\u94fe\u63a5: https://www.zhihu.com/question/37608201 \u521d\u59cb\u5316\u548c\u8d4b\u503c \u00b6 #include <iostream> using namespace std ; int main ( int argc , char const * argv []) { int a = 0 ; // \u521d\u59cb\u5316 cout << a << endl ; int b ; b = 1 ; // \u8d4b\u503c cout << b << endl ; // \u6570\u7ec4\u521d\u59cb\u5316\u548c\u8d4b\u503c int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; // \u521d\u59cb\u5316 cout << arr [ 0 ] << ' ' << arr [ 1 ] << endl ; int arr2 [ 5 ]; arr2 [ 0 ] = 1 ; //\u8d4b\u503c arr2 [ 1 ] = 2 ; cout << arr2 [ 0 ] << ' ' << arr2 [ 1 ] << endl ; // \u5f15\u7528: \u53ea\u80fd\u521d\u59cb\u5316 int & c = a ; cout << c << endl ; // const\u5e38\u91cf: \u53ea\u80fd\u521d\u59cb\u5316 const int d = 100 ; cout << d << endl ; return 0 ; } \u521d\u59cb\u5316\u7684\u987a\u5e8f \u00b6 \u6210\u5458\u521d\u59cb\u5316\u987a\u5e8f\u53ea\u4e0e\u58f0\u660e\u987a\u5e8f\u6709\u5173\uff0c\u8ddf\u521d\u59cb\u5316\u4e66\u5199\u987a\u5e8f\u65e0\u5173 #include <iostream> using namespace std ; class Stu { private : int a ; int b ; public : Stu () : b ( 10 ), a ( b ) // \u7528b\u7684\u503c\u7ed9a\u521d\u59cb\u5316\uff0c\u518d\u628ab\u521d\u59cb\u5316\u4e3a10 { } ~ Stu (){} void show () { cout << \"a:\" << a << ' ' << \"b:\" << b << endl ; } }; int main ( int argc , char const * argv []) { Stu stu ; stu . show (); // a:0 b:10 return 0 ; } #include <iostream> using namespace std ; class Stu { private : int a ; int b ; public : Stu () : b ( a ), a ( 10 ) // a\u521d\u59cb\u5316\u4e3a10\uff0c\u518d\u628ab\u7684\u503c\u521d\u59cb\u5316\u4e3aa { } ~ Stu (){} void show () { cout << \"a:\" << a << ' ' << \"b:\" << b << endl ; } }; int main ( int argc , char const * argv []) { Stu stu ; stu . show (); // a:10 b:10 return 0 ; } \u5185\u8054\u51fd\u6570\u8981\u6ce8\u610f\u7684\u70b9 \u00b6 \u5185\u8054\u51fd\u6570\u548c\u5b8f\u5b9a\u4e49 \u00b6 #include <iostream> using namespace std ; #define SUM(x) x*x inline int func ( int x ) { cout << \"func:\" << x * x << endl ; return 0 ; } int main ( int argv , const char * argc ) { cout << \"SUM:\" << SUM ( 2 + 3 ) << endl ; // 2+3 * 2+3 = 11 func ( 2 + 3 ); // (2+3) * (2+3) = 25 return 0 ; } \u7ed3\u8bba\uff1a \u5b8f\u5b9a\u4e49\u662f\u5355\u7eaf\u7684\u53d8\u91cf\u66ff\u6362\u3002 \u7c7b\u4e0e\u5185\u8054\u51fd\u6570 \u00b6 \u7c7b\u5185\u5b9a\u4e49\uff0c\u4e0d\u8bba\u52a0\u4e0d\u52a0inline \u90fd\u662f\u5185\u8054\u51fd\u6570 \u7c7b\u5916\u5b9a\u4e49\uff0c\u6709inline\u662f\u5185\u8054\uff0c\u6ca1\u7528\u4e0d\u662f\u5185\u8054 \u5185\u8054\u51fd\u6570\u548c\u5934\u6587\u4ef6 \u00b6 \u5185\u8054\u51fd\u6570\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9a\u4e49\uff0c\u591a\u4e2a\u5b9a\u4e49\u5fc5\u987b\u5b8c\u5168\u4e00\u81f4 \u6240\u4ee5\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5185\u8054\u51fd\u6570\u5199\u5728\u5934\u6587\u4ef6\u91cc\uff0c \u8054\u7f16 \u00b6 \u6a21\u5757\u6216\u8005\u51fd\u6570\u5408\u5e76\u5728\u4e00\u8d77\u751f\u6210\u53ef\u6267\u884c\u4ee3\u7801\u7684\u8fc7\u7a0b\u3002 \u6309\u7167\u8054\u7f16\u6240\u8fdb\u884c\u7684\u9636\u6bb5\u4e0d\u540c\uff0c\u53ef\u5206\u4e3a\u9759\u6001\u8054\u7f16\uff0c\u52a8\u6001\u8054\u7f16 \u52a8\u6001\u8054\u7f16\u662f\u9488\u5bf9c++\u591a\u6001\u7684, C\u8bed\u8a00\u91cc\u5168\u90e8\u90fd\u662f\u9759\u6001\u8054\u7f16. #include <iostream> using namespace std ; class A { public : A () {} ~ A () {} // \u865a\u51fd\u6570 \u662f\u5728\u57fa\u7c7b\u4e2d\u4f7f\u7528\u5173\u952e\u5b57 virtual \u58f0\u660e\u7684\u51fd\u6570\u3002 // \u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u865a\u51fd\u6570\u65f6\uff0c\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u9759\u6001\u94fe\u63a5\u5230\u8be5\u51fd\u6570\u3002 virtual void func () { cout << \"A func\" << endl ; } }; class B : public A { public : B () {} ~ B () {} void func () { cout << \"B func\" << endl ; } }; int main ( int argv , const char * argc ) { A * a = nullptr ; int b ; cin >> b ; switch ( b ) { case 1 : a = new A ; break ; case 2 : a = new B ; break ; default : break ; } a -> func (); } \u7a7a\u7c7b\u4e3a\u4ec0\u4e48\u4f1a\u5360\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f \u00b6 \u6240\u8c13\u7c7b\u7684\u5b9e\u4f8b\u5316\u5c31\u662f\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u5757\u5730\u5740\uff0e\uff08\u7a7a\u7c7b\u540c\u6837\u53ef\u4ee5\u88ab\u5b9e\u4f8b\u5316\uff09\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u5728\u5185\u5b58\u4e2d\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u5730\u5740\uff0c\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\uff0c\u7f16\u8bd1\u5668\u5f80\u5f80\u4f1a\u7ed9\u4e00\u4e2a\u7a7a\u7c7b\u9690\u542b\u7684\u52a0\u4e00\u4e2a\u5b57\u8282\uff0c\u8fd9\u6837\u7a7a\u7c7b\u5728\u5b9e\u4f8b\u5316\u540e\u5728\u5185\u5b58\u5f97\u5230\u4e86\u72ec\u4e00\u65e0\u4e8c\u7684\u5730\u5740\uff0e\u56e0\u4e3a\u5982\u679c\u7a7a\u7c7b\u4e0d\u9690\u542b\u52a0\u4e00\u4e2a\u5b57\u8282\u7684\u8bdd\uff0c\u5219\u7a7a\u7c7b\u65e0\u6240\u8c13\u5b9e\u4f8b\u5316\u4e86\uff08\u56e0\u4e3a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5c31\u662f\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u5757\u5730\u5740\u3002 \u7ee7\u627f\u8fd9\u4e2a\u7c7b\u540e\u8fd9\u4e2a\u7c7b\u5927\u5c0f\u5c31\u4f18\u5316\u4e3a0\u4e86\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u7a7a\u767d\u57fa\u7c7b\u6700\u4f18\u5316\u3002","title":"c++ \u4e2d\u7684\u7ec6\u8282\u70b9"},{"location":"cpp/%E7%BB%86%E8%8A%82/#delete","text":"delete\u5904\u7406\u5355\u4e2a\u7c7b\u7c7b\u578b\uff0c\u5148\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u91ca\u653e\u5b83\u6240\u5360\u8d44\u6e90\uff0c\u7136\u540e\u91ca\u653e\u5b83\u6240\u5360\u5185\u5b58\u7a7a\u95f4\u3002 delete\u5904\u7406\u6570\u7ec4\u7c7b\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u4f1a\u5bf9\u6bcf\u4e00\u4e2a\u6570\u7ec4\u5bf9\u8c61\u90fd\u8c03\u7528\u5b83\u4eec\u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u91ca\u653e\u5b83\u4eec\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u6240\u4ee5\u5bf9\u4e8e\u7c7b\u7c7b\u578b\u7684\u6570\u7ec4\u5982\u679c\u4e0d\u8c03\u7528delete[],\u90a3\u5c31\u53ea\u8c03\u7528\u4e86\u4e0b\u6807\u4e3a0\u7684\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u95ee\u9898\u3002","title":"delete"},{"location":"cpp/%E7%BB%86%E8%8A%82/#c-c","text":"new delete \u53ef\u4ee5\u89e6\u53d1\u6784\u9020\u548c\u6790\u6784\u51fd\u6570\uff0cc\u8bed\u8a00\u4e2d\u7684malloc\uff0cfree\u5219\u4e0d\u4f1a #include <iostream> using namespace std ; int main ( int argc , char const * argv []) { // new \u7533\u8bf7\u5185\u5b58 int * p1 = new int ; // c++ * p1 = 12 ; // \u5199 cout << * p1 << endl ; // \u8bfb delete p1 ; // delete + \u6307\u9488 // \u7533\u8bf7\u5e76\u521d\u59cb\u5316 int * p2 = new int ( 123 ); cout << * p2 << endl ; delete p2 ; // \u7533\u8bf7\u6570\u7ec4\u7a7a\u95f4\uff0c\u8fd4\u56de\u7a7a\u95f4\u7684\u9996\u5730\u5740 int * p = new int [ 5 ]; p [ 0 ] = 0 ; p [ 1 ] = 1 ; p [ 2 ] = 2 ; p [ 3 ] = 3 ; p [ 4 ] = 4 ; cout << p << endl ; delete [] p ; // \u91ca\u653e\u6570\u7ec4\u8981\u52a0[] return 0 ; }","title":"c \u8bed\u8a00\u548cc++\u7533\u8bf7\u7a7a\u95f4\u548c\u91ca\u653e\u7684\u533a\u522b"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_1","text":"#include <iostream> using namespace std ; int main ( int argc , char const * argv []) { int a = 0 ; int & c = a ; // \u58f0\u660e\u53d8\u91cfa\u7684\u4e00\u4e2a\u5f15\u7528c, \u5f15\u7528\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u8d4b\u503c cout << a << ' ' << c << endl ; c = 13 ; cout << a << endl ; // \u5f15\u7528\u4e00\u65e6\u7ed1\u5b9a\u5c31\u662f\u552f\u4e00\u7684 int f = 14 ; c = f ; // \u628af\u7684\u503c\u8d4b\u503c\u7ed9c\uff0c\u5e76\u4e0d\u662fc\u5f15\u7528\u81f3f\uff0cc\u5df2\u7ecf\u5f15\u7528\u4e8ea\u4e86 cout << a << endl ; // \u5e38\u91cf\u7684\u5f15\u7528 const int & aa = 12 ; cout << 12 << endl ; // \u6570\u7ec4\u7684\u5f15\u7528 int arr [ 12 ]; int ( & p )[ 12 ] = arr ; // \u4e8c\u7ef4\u6570\u7ec4\u7684\u5f15\u7528 int arr2 [ 2 ][ 3 ]; int ( & p2 )[ 2 ][ 3 ] = arr2 ; // \u6307\u9488\u7684\u5f15\u7528 int b = 12 ; int * point = & b ; int * ( & p3 ) = point ; * p3 = 23 ; cout << * point << endl ; return 0 ; }","title":"\u5f15\u7528"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_2","text":"\u5f15\u7528\u58f0\u660e\u5c31\u8981\u521d\u59cb\u5316\uff0c\u6307\u9488\u4e0d\u7528\u3002 \u5f15\u7528\u521d\u59cb\u5316\u4e4b\u540e\u5c31\u4e0d\u80fd\u5f15\u7528\u5176\u4ed6\u7a7a\u95f4\uff0c\u6307\u9488\u53ef\u4ee5\u6307\u5411\u5176\u4ed6\u7a7a\u95f4 \u5f15\u7528\u4e0d\u5360\u5b58\u50a8\u7a7a\u95f4\uff0c\u6307\u9488\u5360\u7a7a\u95f4 \u5f15\u7528\u6548\u7387\u66f4\u9ad8\uff0c\u6307\u9488\u95f4\u63a5\u64cd\u4f5c \u5f15\u7528\u66f4\u5b89\u5168\uff0c\u6307\u9488\u53ef\u4ee5\u504f\u79fb \u6307\u9488\u66f4\u7075\u6d3b\uff0c\u76f4\u63a5\u64cd\u4f5c\u5730\u5740\u3002 #include <iostream> using namespace std ; class T { public : T (); ~ T (); private : int a = 0 ; }; T :: T () { } T ::~ T () { } int main ( int argc , const char * argv ) { T * t = new T ; // \u6808\u7a7a\u95f4\u7684\u6307\u9488t\u6307\u5411\u5806\u7a7a\u95f4new\u51fa\u7684\u5bf9\u8c61 T & r = * t ; // \u6808\u7a7a\u95f4\u7684\u5f15\u7528\u53d8\u91cf\u6307\u5411new T\u5bf9\u8c61 T tt = r ; // tt\u6808\u7a7a\u95f4\u6307\u5411\u5806\u7a7a\u95f4\u7684new T\u62f7\u8d1d\u51fa\u6765\u7684\u5bf9\u8c61 T * t1 = & tt ; // t1\u6307\u9488\u6307\u5411tt\u6307\u9488\u7684\u5730\u5740 cout << t << endl << & r << endl ; return 0 ; } \u53c2\u8003\u94fe\u63a5: https://www.zhihu.com/question/37608201","title":"\u5f15\u7528\u548c\u6307\u9488\u7684\u533a\u522b"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_3","text":"#include <iostream> using namespace std ; int main ( int argc , char const * argv []) { int a = 0 ; // \u521d\u59cb\u5316 cout << a << endl ; int b ; b = 1 ; // \u8d4b\u503c cout << b << endl ; // \u6570\u7ec4\u521d\u59cb\u5316\u548c\u8d4b\u503c int arr [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; // \u521d\u59cb\u5316 cout << arr [ 0 ] << ' ' << arr [ 1 ] << endl ; int arr2 [ 5 ]; arr2 [ 0 ] = 1 ; //\u8d4b\u503c arr2 [ 1 ] = 2 ; cout << arr2 [ 0 ] << ' ' << arr2 [ 1 ] << endl ; // \u5f15\u7528: \u53ea\u80fd\u521d\u59cb\u5316 int & c = a ; cout << c << endl ; // const\u5e38\u91cf: \u53ea\u80fd\u521d\u59cb\u5316 const int d = 100 ; cout << d << endl ; return 0 ; }","title":"\u521d\u59cb\u5316\u548c\u8d4b\u503c"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_4","text":"\u6210\u5458\u521d\u59cb\u5316\u987a\u5e8f\u53ea\u4e0e\u58f0\u660e\u987a\u5e8f\u6709\u5173\uff0c\u8ddf\u521d\u59cb\u5316\u4e66\u5199\u987a\u5e8f\u65e0\u5173 #include <iostream> using namespace std ; class Stu { private : int a ; int b ; public : Stu () : b ( 10 ), a ( b ) // \u7528b\u7684\u503c\u7ed9a\u521d\u59cb\u5316\uff0c\u518d\u628ab\u521d\u59cb\u5316\u4e3a10 { } ~ Stu (){} void show () { cout << \"a:\" << a << ' ' << \"b:\" << b << endl ; } }; int main ( int argc , char const * argv []) { Stu stu ; stu . show (); // a:0 b:10 return 0 ; } #include <iostream> using namespace std ; class Stu { private : int a ; int b ; public : Stu () : b ( a ), a ( 10 ) // a\u521d\u59cb\u5316\u4e3a10\uff0c\u518d\u628ab\u7684\u503c\u521d\u59cb\u5316\u4e3aa { } ~ Stu (){} void show () { cout << \"a:\" << a << ' ' << \"b:\" << b << endl ; } }; int main ( int argc , char const * argv []) { Stu stu ; stu . show (); // a:10 b:10 return 0 ; }","title":"\u521d\u59cb\u5316\u7684\u987a\u5e8f"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_5","text":"","title":"\u5185\u8054\u51fd\u6570\u8981\u6ce8\u610f\u7684\u70b9"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_6","text":"#include <iostream> using namespace std ; #define SUM(x) x*x inline int func ( int x ) { cout << \"func:\" << x * x << endl ; return 0 ; } int main ( int argv , const char * argc ) { cout << \"SUM:\" << SUM ( 2 + 3 ) << endl ; // 2+3 * 2+3 = 11 func ( 2 + 3 ); // (2+3) * (2+3) = 25 return 0 ; } \u7ed3\u8bba\uff1a \u5b8f\u5b9a\u4e49\u662f\u5355\u7eaf\u7684\u53d8\u91cf\u66ff\u6362\u3002","title":"\u5185\u8054\u51fd\u6570\u548c\u5b8f\u5b9a\u4e49"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_7","text":"\u7c7b\u5185\u5b9a\u4e49\uff0c\u4e0d\u8bba\u52a0\u4e0d\u52a0inline \u90fd\u662f\u5185\u8054\u51fd\u6570 \u7c7b\u5916\u5b9a\u4e49\uff0c\u6709inline\u662f\u5185\u8054\uff0c\u6ca1\u7528\u4e0d\u662f\u5185\u8054","title":"\u7c7b\u4e0e\u5185\u8054\u51fd\u6570"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_8","text":"\u5185\u8054\u51fd\u6570\u53ef\u4ee5\u6709\u591a\u4e2a\u5b9a\u4e49\uff0c\u591a\u4e2a\u5b9a\u4e49\u5fc5\u987b\u5b8c\u5168\u4e00\u81f4 \u6240\u4ee5\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5185\u8054\u51fd\u6570\u5199\u5728\u5934\u6587\u4ef6\u91cc\uff0c","title":"\u5185\u8054\u51fd\u6570\u548c\u5934\u6587\u4ef6"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_9","text":"\u6a21\u5757\u6216\u8005\u51fd\u6570\u5408\u5e76\u5728\u4e00\u8d77\u751f\u6210\u53ef\u6267\u884c\u4ee3\u7801\u7684\u8fc7\u7a0b\u3002 \u6309\u7167\u8054\u7f16\u6240\u8fdb\u884c\u7684\u9636\u6bb5\u4e0d\u540c\uff0c\u53ef\u5206\u4e3a\u9759\u6001\u8054\u7f16\uff0c\u52a8\u6001\u8054\u7f16 \u52a8\u6001\u8054\u7f16\u662f\u9488\u5bf9c++\u591a\u6001\u7684, C\u8bed\u8a00\u91cc\u5168\u90e8\u90fd\u662f\u9759\u6001\u8054\u7f16. #include <iostream> using namespace std ; class A { public : A () {} ~ A () {} // \u865a\u51fd\u6570 \u662f\u5728\u57fa\u7c7b\u4e2d\u4f7f\u7528\u5173\u952e\u5b57 virtual \u58f0\u660e\u7684\u51fd\u6570\u3002 // \u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u7684\u865a\u51fd\u6570\u65f6\uff0c\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u9759\u6001\u94fe\u63a5\u5230\u8be5\u51fd\u6570\u3002 virtual void func () { cout << \"A func\" << endl ; } }; class B : public A { public : B () {} ~ B () {} void func () { cout << \"B func\" << endl ; } }; int main ( int argv , const char * argc ) { A * a = nullptr ; int b ; cin >> b ; switch ( b ) { case 1 : a = new A ; break ; case 2 : a = new B ; break ; default : break ; } a -> func (); }","title":"\u8054\u7f16"},{"location":"cpp/%E7%BB%86%E8%8A%82/#_10","text":"\u6240\u8c13\u7c7b\u7684\u5b9e\u4f8b\u5316\u5c31\u662f\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u5757\u5730\u5740\uff0e\uff08\u7a7a\u7c7b\u540c\u6837\u53ef\u4ee5\u88ab\u5b9e\u4f8b\u5316\uff09\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u5728\u5185\u5b58\u4e2d\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u5730\u5740\uff0c\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\uff0c\u7f16\u8bd1\u5668\u5f80\u5f80\u4f1a\u7ed9\u4e00\u4e2a\u7a7a\u7c7b\u9690\u542b\u7684\u52a0\u4e00\u4e2a\u5b57\u8282\uff0c\u8fd9\u6837\u7a7a\u7c7b\u5728\u5b9e\u4f8b\u5316\u540e\u5728\u5185\u5b58\u5f97\u5230\u4e86\u72ec\u4e00\u65e0\u4e8c\u7684\u5730\u5740\uff0e\u56e0\u4e3a\u5982\u679c\u7a7a\u7c7b\u4e0d\u9690\u542b\u52a0\u4e00\u4e2a\u5b57\u8282\u7684\u8bdd\uff0c\u5219\u7a7a\u7c7b\u65e0\u6240\u8c13\u5b9e\u4f8b\u5316\u4e86\uff08\u56e0\u4e3a\u7c7b\u7684\u5b9e\u4f8b\u5316\u5c31\u662f\u5728\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u5757\u5730\u5740\u3002 \u7ee7\u627f\u8fd9\u4e2a\u7c7b\u540e\u8fd9\u4e2a\u7c7b\u5927\u5c0f\u5c31\u4f18\u5316\u4e3a0\u4e86\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u7a7a\u767d\u57fa\u7c7b\u6700\u4f18\u5316\u3002","title":"\u7a7a\u7c7b\u4e3a\u4ec0\u4e48\u4f1a\u5360\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f"},{"location":"cpp/%E7%BB%A7%E6%89%BF/","text":"\u7ee7\u627f\u5141\u8bb8\u6211\u4eec\u4f9d\u636e\u53e6\u4e00\u4e2a\u7c7b\u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u4f7f\u5f97\u521b\u5efa\u548c\u7ef4\u62a4\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u8fd9\u6837\u505a\uff0c\u4e5f\u8fbe\u5230\u4e86\u91cd\u7528\u4ee3\u7801\u529f\u80fd\u548c\u63d0\u9ad8\u6267\u884c\u6548\u7387\u7684\u6548\u679c\u3002 \u5f53\u521b\u5efa\u4e00\u4e2a\u7c7b\u65f6\uff0c\u60a8\u4e0d\u9700\u8981\u91cd\u65b0\u7f16\u5199\u65b0\u7684\u6570\u636e\u6210\u5458\u548c\u6210\u5458\u51fd\u6570\uff0c\u53ea\u9700\u6307\u5b9a\u65b0\u5efa\u7684\u7c7b\u7ee7\u627f\u4e86\u4e00\u4e2a\u5df2\u6709\u7684\u7c7b\u7684\u6210\u5458\u5373\u53ef\u3002\u8fd9\u4e2a\u5df2\u6709\u7684\u7c7b\u79f0\u4e3a\u57fa\u7c7b\uff0c\u65b0\u5efa\u7684\u7c7b\u79f0\u4e3a\u6d3e\u751f\u7c7b\u3002 \u7ee7\u627f\u4ee3\u8868\u4e86 is a \u5173\u7cfb\u3002\u4f8b\u5982\uff0c\u54fa\u4e73\u52a8\u7269\u662f\u52a8\u7269\uff0c\u72d7\u662f\u54fa\u4e73\u52a8\u7269\uff0c\u56e0\u6b64\uff0c\u72d7\u662f\u52a8\u7269\uff0c\u7b49\u7b49\u3002 \u57fa\u7c7b & \u6d3e\u751f\u7c7b \u00b6 \u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6d3e\u751f\u81ea\u591a\u4e2a\u7c7b\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u5b83\u53ef\u4ee5\u4ece\u591a\u4e2a\u57fa\u7c7b\u7ee7\u627f\u6570\u636e\u548c\u51fd\u6570\u3002\u5b9a\u4e49\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u7c7b\u6d3e\u751f\u5217\u8868\u6765\u6307\u5b9a\u57fa\u7c7b\u3002\u7c7b\u6d3e\u751f\u5217\u8868\u4ee5\u4e00\u4e2a\u6216\u591a\u4e2a\u57fa\u7c7b\u547d\u540d\uff0c\u5f62\u5f0f\u5982\u4e0b\uff1a class derived - class : access - specifier base - class \u5176\u4e2d\uff0c\u8bbf\u95ee\u4fee\u9970\u7b26 access-specifier \u662f public\u3001protected \u6216 private \u5176\u4e2d\u7684\u4e00\u4e2a\uff0c base-class \u662f\u4e4b\u524d\u5b9a\u4e49\u8fc7\u7684\u67d0\u4e2a\u7c7b\u7684\u540d\u79f0\u3002 \u5982\u679c\u672a\u4f7f\u7528\u8bbf\u95ee\u4fee\u9970\u7b26 access-specifier\uff0c\u5219\u9ed8\u8ba4\u4e3a private\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u57fa\u7c7b Shape\uff0cRectangle \u662f\u5b83\u7684\u6d3e\u751f\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; // \u57fa\u7c7b class Shape { public : void setWidth ( int w ) { width = w ; } void setHeight ( int h ) { height = h ; } protected : int width ; int height ; }; // \u6d3e\u751f\u7c7b class Rectangle : public Shape { public : int getArea () { return ( width * height ); } }; int main ( void ) { Rectangle Rect ; Rect . setWidth ( 5 ); Rect . setHeight ( 7 ); // \u8f93\u51fa\u5bf9\u8c61\u7684\u9762\u79ef cout << \"Total area: \" << Rect . getArea () << endl ; return 0 ; } \u8bbf\u95ee\u63a7\u5236\u548c\u7ee7\u627f \u00b6 \u6d3e\u751f\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u57fa\u7c7b\u4e2d\u6240\u6709\u7684\u975e\u79c1\u6709\u6210\u5458\u3002\u56e0\u6b64\u57fa\u7c7b\u6210\u5458\u5982\u679c\u4e0d\u60f3\u88ab\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u8bbf\u95ee\uff0c\u5219\u5e94\u5728\u57fa\u7c7b\u4e2d\u58f0\u660e\u4e3a private\u3002 \u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8bbf\u95ee\u6743\u9650\u603b\u7ed3\u51fa\u4e0d\u540c\u7684\u8bbf\u95ee\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u4e00\u4e2a\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u6240\u6709\u7684\u57fa\u7c7b\u65b9\u6cd5\uff0c\u4f46\u4e0b\u5217\u60c5\u51b5\u9664\u5916\uff1a \u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u548c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u57fa\u7c7b\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002 \u57fa\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u3002 \u7ee7\u627f\u7c7b\u578b \u00b6 \u5f53\u4e00\u4e2a\u7c7b\u6d3e\u751f\u81ea\u57fa\u7c7b\uff0c\u8be5\u57fa\u7c7b\u53ef\u4ee5\u88ab\u7ee7\u627f\u4e3a public\u3001protected \u6216 private \u51e0\u79cd\u7c7b\u578b\u3002\u7ee7\u627f\u7c7b\u578b\u662f\u901a\u8fc7\u4e0a\u9762\u8bb2\u89e3\u7684\u8bbf\u95ee\u4fee\u9970\u7b26 access-specifier \u6765\u6307\u5b9a\u7684\u3002 \u6211\u4eec\u51e0\u4e4e\u4e0d\u4f7f\u7528 protected \u6216 private \u7ee7\u627f\uff0c\u901a\u5e38\u4f7f\u7528 public \u7ee7\u627f\u3002\u5f53\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u7ee7\u627f\u65f6\uff0c\u9075\u5faa\u4ee5\u4e0b\u51e0\u4e2a\u89c4\u5219\uff1a \u516c\u6709\u7ee7\u627f\uff08public\uff09\uff1a\u5f53\u4e00\u4e2a\u7c7b\u6d3e\u751f\u81ea\u516c\u6709\u57fa\u7c7b\u65f6\uff0c\u57fa\u7c7b\u7684\u516c\u6709\u6210\u5458\u4e5f\u662f\u6d3e\u751f\u7c7b\u7684\u516c\u6709\u6210\u5458\uff0c\u57fa\u7c7b\u7684\u4fdd\u62a4\u6210\u5458\u4e5f\u662f\u6d3e\u751f\u7c7b\u7684\u4fdd\u62a4\u6210\u5458\uff0c\u57fa\u7c7b\u7684\u79c1\u6709\u6210\u5458\u4e0d\u80fd\u76f4\u63a5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u57fa\u7c7b\u7684\u516c\u6709\u548c\u4fdd\u62a4\u6210\u5458\u6765\u8bbf\u95ee\u3002 \u4fdd\u62a4\u7ee7\u627f\uff08protected\uff09\uff1a \u5f53\u4e00\u4e2a\u7c7b\u6d3e\u751f\u81ea\u4fdd\u62a4\u57fa\u7c7b\u65f6\uff0c\u57fa\u7c7b\u7684\u516c\u6709\u548c\u4fdd\u62a4\u6210\u5458\u5c06\u6210\u4e3a\u6d3e\u751f\u7c7b\u7684\u4fdd\u62a4\u6210\u5458\u3002 \u79c1\u6709\u7ee7\u627f\uff08private\uff09\uff1a\u5f53\u4e00\u4e2a\u7c7b\u6d3e\u751f\u81ea\u79c1\u6709\u57fa\u7c7b\u65f6\uff0c\u57fa\u7c7b\u7684\u516c\u6709\u548c\u4fdd\u62a4\u6210\u5458\u5c06\u6210\u4e3a\u6d3e\u751f\u7c7b\u7684\u79c1\u6709\u6210\u5458\u3002 \u591a\u7ee7\u627f \u00b6 \u591a\u7ee7\u627f\u5373\u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a\u7236\u7c7b\uff0c\u5b83\u7ee7\u627f\u4e86\u591a\u4e2a\u7236\u7c7b\u7684\u7279\u6027\u3002 C++ \u7c7b\u53ef\u4ee5\u4ece\u591a\u4e2a\u7c7b\u7ee7\u627f\u6210\u5458\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a class < \u6d3e\u751f\u7c7b\u540d >:< \u7ee7\u627f\u65b9\u5f0f 1 >< \u57fa\u7c7b\u540d 1 > , < \u7ee7\u627f\u65b9\u5f0f 2 >< \u57fa\u7c7b\u540d 2 > , \u2026 { < \u6d3e\u751f\u7c7b\u7c7b\u4f53 > }; \u5176\u4e2d\uff0c\u8bbf\u95ee\u4fee\u9970\u7b26\u7ee7\u627f\u65b9\u5f0f\u662f public\u3001protected \u6216 private \u5176\u4e2d\u7684\u4e00\u4e2a\uff0c\u7528\u6765\u4fee\u9970\u6bcf\u4e2a\u57fa\u7c7b\uff0c\u5404\u4e2a\u57fa\u7c7b\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\u4e0a\u6240\u793a\u3002 #include <iostream> using namespace std ; // \u57fa\u7c7b Shape class Shape { public : void setWidth ( int w ) { width = w ; } void setHeight ( int h ) { height = h ; } protected : int width ; int height ; }; // \u57fa\u7c7b PaintCost class PaintCost { public : int getCost ( int area ) { return area * 70 ; } }; // \u6d3e\u751f\u7c7b class Rectangle : public Shape , public PaintCost { public : int getArea () { return ( width * height ); } }; int main ( void ) { Rectangle Rect ; int area ; Rect . setWidth ( 5 ); Rect . setHeight ( 7 ); area = Rect . getArea (); // \u8f93\u51fa\u5bf9\u8c61\u7684\u9762\u79ef cout << \"Total area: \" << Rect . getArea () << endl ; // \u8f93\u51fa\u603b\u82b1\u8d39 cout << \"Total paint cost: $\" << Rect . getCost ( area ) << endl ; return 0 ; }","title":"\u7ee7\u627f"},{"location":"cpp/%E7%BB%A7%E6%89%BF/#_1","text":"\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6d3e\u751f\u81ea\u591a\u4e2a\u7c7b\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u5b83\u53ef\u4ee5\u4ece\u591a\u4e2a\u57fa\u7c7b\u7ee7\u627f\u6570\u636e\u548c\u51fd\u6570\u3002\u5b9a\u4e49\u4e00\u4e2a\u6d3e\u751f\u7c7b\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u7c7b\u6d3e\u751f\u5217\u8868\u6765\u6307\u5b9a\u57fa\u7c7b\u3002\u7c7b\u6d3e\u751f\u5217\u8868\u4ee5\u4e00\u4e2a\u6216\u591a\u4e2a\u57fa\u7c7b\u547d\u540d\uff0c\u5f62\u5f0f\u5982\u4e0b\uff1a class derived - class : access - specifier base - class \u5176\u4e2d\uff0c\u8bbf\u95ee\u4fee\u9970\u7b26 access-specifier \u662f public\u3001protected \u6216 private \u5176\u4e2d\u7684\u4e00\u4e2a\uff0c base-class \u662f\u4e4b\u524d\u5b9a\u4e49\u8fc7\u7684\u67d0\u4e2a\u7c7b\u7684\u540d\u79f0\u3002 \u5982\u679c\u672a\u4f7f\u7528\u8bbf\u95ee\u4fee\u9970\u7b26 access-specifier\uff0c\u5219\u9ed8\u8ba4\u4e3a private\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u57fa\u7c7b Shape\uff0cRectangle \u662f\u5b83\u7684\u6d3e\u751f\u7c7b\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; // \u57fa\u7c7b class Shape { public : void setWidth ( int w ) { width = w ; } void setHeight ( int h ) { height = h ; } protected : int width ; int height ; }; // \u6d3e\u751f\u7c7b class Rectangle : public Shape { public : int getArea () { return ( width * height ); } }; int main ( void ) { Rectangle Rect ; Rect . setWidth ( 5 ); Rect . setHeight ( 7 ); // \u8f93\u51fa\u5bf9\u8c61\u7684\u9762\u79ef cout << \"Total area: \" << Rect . getArea () << endl ; return 0 ; }","title":"\u57fa\u7c7b &amp; \u6d3e\u751f\u7c7b"},{"location":"cpp/%E7%BB%A7%E6%89%BF/#_2","text":"\u6d3e\u751f\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u57fa\u7c7b\u4e2d\u6240\u6709\u7684\u975e\u79c1\u6709\u6210\u5458\u3002\u56e0\u6b64\u57fa\u7c7b\u6210\u5458\u5982\u679c\u4e0d\u60f3\u88ab\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u8bbf\u95ee\uff0c\u5219\u5e94\u5728\u57fa\u7c7b\u4e2d\u58f0\u660e\u4e3a private\u3002 \u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8bbf\u95ee\u6743\u9650\u603b\u7ed3\u51fa\u4e0d\u540c\u7684\u8bbf\u95ee\u7c7b\u578b\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u4e00\u4e2a\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u6240\u6709\u7684\u57fa\u7c7b\u65b9\u6cd5\uff0c\u4f46\u4e0b\u5217\u60c5\u51b5\u9664\u5916\uff1a \u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u548c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 \u57fa\u7c7b\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002 \u57fa\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u3002","title":"\u8bbf\u95ee\u63a7\u5236\u548c\u7ee7\u627f"},{"location":"cpp/%E7%BB%A7%E6%89%BF/#_3","text":"\u5f53\u4e00\u4e2a\u7c7b\u6d3e\u751f\u81ea\u57fa\u7c7b\uff0c\u8be5\u57fa\u7c7b\u53ef\u4ee5\u88ab\u7ee7\u627f\u4e3a public\u3001protected \u6216 private \u51e0\u79cd\u7c7b\u578b\u3002\u7ee7\u627f\u7c7b\u578b\u662f\u901a\u8fc7\u4e0a\u9762\u8bb2\u89e3\u7684\u8bbf\u95ee\u4fee\u9970\u7b26 access-specifier \u6765\u6307\u5b9a\u7684\u3002 \u6211\u4eec\u51e0\u4e4e\u4e0d\u4f7f\u7528 protected \u6216 private \u7ee7\u627f\uff0c\u901a\u5e38\u4f7f\u7528 public \u7ee7\u627f\u3002\u5f53\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u7ee7\u627f\u65f6\uff0c\u9075\u5faa\u4ee5\u4e0b\u51e0\u4e2a\u89c4\u5219\uff1a \u516c\u6709\u7ee7\u627f\uff08public\uff09\uff1a\u5f53\u4e00\u4e2a\u7c7b\u6d3e\u751f\u81ea\u516c\u6709\u57fa\u7c7b\u65f6\uff0c\u57fa\u7c7b\u7684\u516c\u6709\u6210\u5458\u4e5f\u662f\u6d3e\u751f\u7c7b\u7684\u516c\u6709\u6210\u5458\uff0c\u57fa\u7c7b\u7684\u4fdd\u62a4\u6210\u5458\u4e5f\u662f\u6d3e\u751f\u7c7b\u7684\u4fdd\u62a4\u6210\u5458\uff0c\u57fa\u7c7b\u7684\u79c1\u6709\u6210\u5458\u4e0d\u80fd\u76f4\u63a5\u88ab\u6d3e\u751f\u7c7b\u8bbf\u95ee\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u57fa\u7c7b\u7684\u516c\u6709\u548c\u4fdd\u62a4\u6210\u5458\u6765\u8bbf\u95ee\u3002 \u4fdd\u62a4\u7ee7\u627f\uff08protected\uff09\uff1a \u5f53\u4e00\u4e2a\u7c7b\u6d3e\u751f\u81ea\u4fdd\u62a4\u57fa\u7c7b\u65f6\uff0c\u57fa\u7c7b\u7684\u516c\u6709\u548c\u4fdd\u62a4\u6210\u5458\u5c06\u6210\u4e3a\u6d3e\u751f\u7c7b\u7684\u4fdd\u62a4\u6210\u5458\u3002 \u79c1\u6709\u7ee7\u627f\uff08private\uff09\uff1a\u5f53\u4e00\u4e2a\u7c7b\u6d3e\u751f\u81ea\u79c1\u6709\u57fa\u7c7b\u65f6\uff0c\u57fa\u7c7b\u7684\u516c\u6709\u548c\u4fdd\u62a4\u6210\u5458\u5c06\u6210\u4e3a\u6d3e\u751f\u7c7b\u7684\u79c1\u6709\u6210\u5458\u3002","title":"\u7ee7\u627f\u7c7b\u578b"},{"location":"cpp/%E7%BB%A7%E6%89%BF/#_4","text":"\u591a\u7ee7\u627f\u5373\u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u6709\u591a\u4e2a\u7236\u7c7b\uff0c\u5b83\u7ee7\u627f\u4e86\u591a\u4e2a\u7236\u7c7b\u7684\u7279\u6027\u3002 C++ \u7c7b\u53ef\u4ee5\u4ece\u591a\u4e2a\u7c7b\u7ee7\u627f\u6210\u5458\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a class < \u6d3e\u751f\u7c7b\u540d >:< \u7ee7\u627f\u65b9\u5f0f 1 >< \u57fa\u7c7b\u540d 1 > , < \u7ee7\u627f\u65b9\u5f0f 2 >< \u57fa\u7c7b\u540d 2 > , \u2026 { < \u6d3e\u751f\u7c7b\u7c7b\u4f53 > }; \u5176\u4e2d\uff0c\u8bbf\u95ee\u4fee\u9970\u7b26\u7ee7\u627f\u65b9\u5f0f\u662f public\u3001protected \u6216 private \u5176\u4e2d\u7684\u4e00\u4e2a\uff0c\u7528\u6765\u4fee\u9970\u6bcf\u4e2a\u57fa\u7c7b\uff0c\u5404\u4e2a\u57fa\u7c7b\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982\u4e0a\u6240\u793a\u3002 #include <iostream> using namespace std ; // \u57fa\u7c7b Shape class Shape { public : void setWidth ( int w ) { width = w ; } void setHeight ( int h ) { height = h ; } protected : int width ; int height ; }; // \u57fa\u7c7b PaintCost class PaintCost { public : int getCost ( int area ) { return area * 70 ; } }; // \u6d3e\u751f\u7c7b class Rectangle : public Shape , public PaintCost { public : int getArea () { return ( width * height ); } }; int main ( void ) { Rectangle Rect ; int area ; Rect . setWidth ( 5 ); Rect . setHeight ( 7 ); area = Rect . getArea (); // \u8f93\u51fa\u5bf9\u8c61\u7684\u9762\u79ef cout << \"Total area: \" << Rect . getArea () << endl ; // \u8f93\u51fa\u603b\u82b1\u8d39 cout << \"Total paint cost: $\" << Rect . getCost ( area ) << endl ; return 0 ; }","title":"\u591a\u7ee7\u627f"},{"location":"cpp/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/","text":"C++ \u5141\u8bb8\u5728\u540c\u4e00\u4f5c\u7528\u57df\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u548c\u8fd0\u7b97\u7b26\u6307\u5b9a\u591a\u4e2a\u5b9a\u4e49\uff0c\u5206\u522b\u79f0\u4e3a\u51fd\u6570\u91cd\u8f7d\u548c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u3002 \u91cd\u8f7d\u58f0\u660e\u662f\u6307\u4e00\u4e2a\u4e0e\u4e4b\u524d\u5df2\u7ecf\u5728\u8be5\u4f5c\u7528\u57df\u5185\u58f0\u660e\u8fc7\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u58f0\u660e\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u53c2\u6570\u5217\u8868\u548c\u5b9a\u4e49\uff08\u5b9e\u73b0\uff09\u4e0d\u76f8\u540c\u3002 \u5f53\u60a8\u8c03\u7528\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\u6216\u91cd\u8f7d\u8fd0\u7b97\u7b26\u65f6\uff0c\u7f16\u8bd1\u5668\u901a\u8fc7\u628a\u60a8\u6240\u4f7f\u7528\u7684\u53c2\u6570\u7c7b\u578b\u4e0e\u5b9a\u4e49\u4e2d\u7684\u53c2\u6570\u7c7b\u578b\u8fdb\u884c\u6bd4\u8f83\uff0c\u51b3\u5b9a\u9009\u7528\u6700\u5408\u9002\u7684\u5b9a\u4e49\u3002\u9009\u62e9\u6700\u5408\u9002\u7684\u91cd\u8f7d\u51fd\u6570\u6216\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u8fc7\u7a0b\uff0c\u79f0\u4e3a\u91cd\u8f7d\u51b3\u7b56\u3002 C++ \u4e2d\u7684\u51fd\u6570\u91cd\u8f7d \u00b6 \u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c\u53ef\u4ee5\u58f0\u660e\u51e0\u4e2a\u529f\u80fd\u7c7b\u4f3c\u7684\u540c\u540d\u51fd\u6570\uff0c\u4f46\u662f\u8fd9\u4e9b\u540c\u540d\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\uff08\u6307\u53c2\u6570\u7684\u4e2a\u6570\u3001\u7c7b\u578b\u6216\u8005\u987a\u5e8f\uff09\u5fc5\u987b\u4e0d\u540c\u3002\u60a8\u4e0d\u80fd\u4ec5\u901a\u8fc7\u8fd4\u56de\u7c7b\u578b\u7684\u4e0d\u540c\u6765\u91cd\u8f7d\u51fd\u6570\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e2d\uff0c\u540c\u540d\u51fd\u6570 print() \u88ab\u7528\u4e8e\u8f93\u51fa\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff1a #include <iostream> using namespace std ; class printData { public : void print ( int i ) { cout << \"\u6574\u6570\u4e3a: \" << i << endl ; } void print ( double f ) { cout << \"\u6d6e\u70b9\u6570\u4e3a: \" << f << endl ; } void print ( char c []) { cout << \"\u5b57\u7b26\u4e32\u4e3a: \" << c << endl ; } }; int main ( void ) { printData pd ; // \u8f93\u51fa\u6574\u6570 pd . print ( 5 ); // \u8f93\u51fa\u6d6e\u70b9\u6570 pd . print ( 500.263 ); // \u8f93\u51fa\u5b57\u7b26\u4e32 char c [] = \"Hello C++\" ; pd . print ( c ); return 0 ; } C++ \u4e2d\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d \u00b6 \u60a8\u53ef\u4ee5\u91cd\u5b9a\u4e49\u6216\u91cd\u8f7d\u5927\u90e8\u5206 C++ \u5185\u7f6e\u7684\u8fd0\u7b97\u7b26\u3002\u8fd9\u6837\uff0c\u60a8\u5c31\u80fd\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u8fd0\u7b97\u7b26\u3002 \u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u662f\u5e26\u6709\u7279\u6b8a\u540d\u79f0\u7684\u51fd\u6570\uff0c\u51fd\u6570\u540d\u662f\u7531\u5173\u952e\u5b57 operator \u548c\u5176\u540e\u8981\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u7b26\u53f7\u6784\u6210\u7684\u3002\u4e0e\u5176\u4ed6\u51fd\u6570\u4e00\u6837\uff0c\u91cd\u8f7d\u8fd0\u7b97\u7b26\u6709\u4e00\u4e2a\u8fd4\u56de\u7c7b\u578b\u548c\u4e00\u4e2a\u53c2\u6570\u5217\u8868\u3002 #include <iostream> using namespace std ; class Box { public : double getVolume ( void ) { return length * breadth * height ; } void setLength ( double len ) { length = len ; } void setBreadth ( double bre ) { breadth = bre ; } void setHeight ( double hei ) { height = hei ; } // \u91cd\u8f7d + \u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u628a\u4e24\u4e2a Box \u5bf9\u8c61\u76f8\u52a0 Box operator + ( const Box & b ) { Box box ; box . length = this -> length + b . length ; box . breadth = this -> breadth + b . breadth ; box . height = this -> height + b . height ; return box ; } private : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Box Box1 ; // \u58f0\u660e Box1\uff0c\u7c7b\u578b\u4e3a Box Box Box2 ; // \u58f0\u660e Box2\uff0c\u7c7b\u578b\u4e3a Box Box Box3 ; // \u58f0\u660e Box3\uff0c\u7c7b\u578b\u4e3a Box double volume = 0.0 ; // \u628a\u4f53\u79ef\u5b58\u50a8\u5728\u8be5\u53d8\u91cf\u4e2d // Box1 \u8be6\u8ff0 Box1 . setLength ( 6.0 ); Box1 . setBreadth ( 7.0 ); Box1 . setHeight ( 5.0 ); // Box2 \u8be6\u8ff0 Box2 . setLength ( 12.0 ); Box2 . setBreadth ( 13.0 ); Box2 . setHeight ( 10.0 ); // Box1 \u7684\u4f53\u79ef volume = Box1 . getVolume (); cout << \"Volume of Box1 : \" << volume << endl ; // Box2 \u7684\u4f53\u79ef volume = Box2 . getVolume (); cout << \"Volume of Box2 : \" << volume << endl ; // \u628a\u4e24\u4e2a\u5bf9\u8c61\u76f8\u52a0\uff0c\u5f97\u5230 Box3 Box3 = Box1 + Box2 ; // Box3 \u7684\u4f53\u79ef volume = Box3 . getVolume (); cout << \"Volume of Box3 : \" << volume << endl ; return 0 ; } \u53ef\u91cd\u8f7d\u8fd0\u7b97\u7b26/\u4e0d\u53ef\u91cd\u8f7d\u8fd0\u7b97\u7b26 \u00b6 \u4e0b\u9762\u662f\u53ef\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u5217\u8868\uff1a \u4e0b\u9762\u662f\u4e0d\u53ef\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u5217\u8868\uff1a .\uff1a\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26 . , -> \uff1a\u6210\u5458\u6307\u9488\u8bbf\u95ee\u8fd0\u7b97\u7b26 ::\uff1a\u57df\u8fd0\u7b97\u7b26 sizeof\uff1a\u957f\u5ea6\u8fd0\u7b97\u7b26 ?:\uff1a\u6761\u4ef6\u8fd0\u7b97\u7b26 \uff1a \u9884\u5904\u7406\u7b26\u53f7 \u00b6","title":"\u91cd\u8f7d\u8fd0\u7b97\u7b26\u548c\u91cd\u8f7d\u51fd\u6570"},{"location":"cpp/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/#c","text":"\u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c\u53ef\u4ee5\u58f0\u660e\u51e0\u4e2a\u529f\u80fd\u7c7b\u4f3c\u7684\u540c\u540d\u51fd\u6570\uff0c\u4f46\u662f\u8fd9\u4e9b\u540c\u540d\u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\uff08\u6307\u53c2\u6570\u7684\u4e2a\u6570\u3001\u7c7b\u578b\u6216\u8005\u987a\u5e8f\uff09\u5fc5\u987b\u4e0d\u540c\u3002\u60a8\u4e0d\u80fd\u4ec5\u901a\u8fc7\u8fd4\u56de\u7c7b\u578b\u7684\u4e0d\u540c\u6765\u91cd\u8f7d\u51fd\u6570\u3002 \u4e0b\u9762\u7684\u5b9e\u4f8b\u4e2d\uff0c\u540c\u540d\u51fd\u6570 print() \u88ab\u7528\u4e8e\u8f93\u51fa\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff1a #include <iostream> using namespace std ; class printData { public : void print ( int i ) { cout << \"\u6574\u6570\u4e3a: \" << i << endl ; } void print ( double f ) { cout << \"\u6d6e\u70b9\u6570\u4e3a: \" << f << endl ; } void print ( char c []) { cout << \"\u5b57\u7b26\u4e32\u4e3a: \" << c << endl ; } }; int main ( void ) { printData pd ; // \u8f93\u51fa\u6574\u6570 pd . print ( 5 ); // \u8f93\u51fa\u6d6e\u70b9\u6570 pd . print ( 500.263 ); // \u8f93\u51fa\u5b57\u7b26\u4e32 char c [] = \"Hello C++\" ; pd . print ( c ); return 0 ; }","title":"C++ \u4e2d\u7684\u51fd\u6570\u91cd\u8f7d"},{"location":"cpp/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/#c_1","text":"\u60a8\u53ef\u4ee5\u91cd\u5b9a\u4e49\u6216\u91cd\u8f7d\u5927\u90e8\u5206 C++ \u5185\u7f6e\u7684\u8fd0\u7b97\u7b26\u3002\u8fd9\u6837\uff0c\u60a8\u5c31\u80fd\u4f7f\u7528\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u8fd0\u7b97\u7b26\u3002 \u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u662f\u5e26\u6709\u7279\u6b8a\u540d\u79f0\u7684\u51fd\u6570\uff0c\u51fd\u6570\u540d\u662f\u7531\u5173\u952e\u5b57 operator \u548c\u5176\u540e\u8981\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u7b26\u53f7\u6784\u6210\u7684\u3002\u4e0e\u5176\u4ed6\u51fd\u6570\u4e00\u6837\uff0c\u91cd\u8f7d\u8fd0\u7b97\u7b26\u6709\u4e00\u4e2a\u8fd4\u56de\u7c7b\u578b\u548c\u4e00\u4e2a\u53c2\u6570\u5217\u8868\u3002 #include <iostream> using namespace std ; class Box { public : double getVolume ( void ) { return length * breadth * height ; } void setLength ( double len ) { length = len ; } void setBreadth ( double bre ) { breadth = bre ; } void setHeight ( double hei ) { height = hei ; } // \u91cd\u8f7d + \u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u628a\u4e24\u4e2a Box \u5bf9\u8c61\u76f8\u52a0 Box operator + ( const Box & b ) { Box box ; box . length = this -> length + b . length ; box . breadth = this -> breadth + b . breadth ; box . height = this -> height + b . height ; return box ; } private : double length ; // \u957f\u5ea6 double breadth ; // \u5bbd\u5ea6 double height ; // \u9ad8\u5ea6 }; // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Box Box1 ; // \u58f0\u660e Box1\uff0c\u7c7b\u578b\u4e3a Box Box Box2 ; // \u58f0\u660e Box2\uff0c\u7c7b\u578b\u4e3a Box Box Box3 ; // \u58f0\u660e Box3\uff0c\u7c7b\u578b\u4e3a Box double volume = 0.0 ; // \u628a\u4f53\u79ef\u5b58\u50a8\u5728\u8be5\u53d8\u91cf\u4e2d // Box1 \u8be6\u8ff0 Box1 . setLength ( 6.0 ); Box1 . setBreadth ( 7.0 ); Box1 . setHeight ( 5.0 ); // Box2 \u8be6\u8ff0 Box2 . setLength ( 12.0 ); Box2 . setBreadth ( 13.0 ); Box2 . setHeight ( 10.0 ); // Box1 \u7684\u4f53\u79ef volume = Box1 . getVolume (); cout << \"Volume of Box1 : \" << volume << endl ; // Box2 \u7684\u4f53\u79ef volume = Box2 . getVolume (); cout << \"Volume of Box2 : \" << volume << endl ; // \u628a\u4e24\u4e2a\u5bf9\u8c61\u76f8\u52a0\uff0c\u5f97\u5230 Box3 Box3 = Box1 + Box2 ; // Box3 \u7684\u4f53\u79ef volume = Box3 . getVolume (); cout << \"Volume of Box3 : \" << volume << endl ; return 0 ; }","title":"C++ \u4e2d\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"cpp/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/#_1","text":"\u4e0b\u9762\u662f\u53ef\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u5217\u8868\uff1a \u4e0b\u9762\u662f\u4e0d\u53ef\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u5217\u8868\uff1a .\uff1a\u6210\u5458\u8bbf\u95ee\u8fd0\u7b97\u7b26 . , -> \uff1a\u6210\u5458\u6307\u9488\u8bbf\u95ee\u8fd0\u7b97\u7b26 ::\uff1a\u57df\u8fd0\u7b97\u7b26 sizeof\uff1a\u957f\u5ea6\u8fd0\u7b97\u7b26 ?:\uff1a\u6761\u4ef6\u8fd0\u7b97\u7b26","title":"\u53ef\u91cd\u8f7d\u8fd0\u7b97\u7b26/\u4e0d\u53ef\u91cd\u8f7d\u8fd0\u7b97\u7b26"},{"location":"cpp/%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/#_2","text":"","title":"\uff1a \u9884\u5904\u7406\u7b26\u53f7"},{"location":"cpp/%E9%93%BE%E8%A1%A8/","text":"\u94fe\u8868\u5e94\u8be5\u662f\u9762\u8bd5\u65f6\u88ab\u63d0\u53ca\u6700\u9891\u7e41\u7684\u6570\u636e\u7ed3\u6784\u3002 \u94fe\u8868\u7684\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u5b83\u7531\u6307\u9488\u628a\u82e5\u5e72\u4e2a\u8282\u70b9\u8fde\u63a5\u6210\u94fe\u72b6\u7ed3\u6784\u3002 \u94fe\u8868\u7684\u521b\u5efa\uff0c\u63d2\u5165\u8282\u70b9\uff0c\u5220\u9664\u8282\u70b9\u7b49\u64cd\u4f5c\u90fd\u53ea\u9700\u898120\u884c\u5de6\u53f3\u7684\u4ee3\u7801\u5c31\u80fd\u5b9e\u73b0\uff0c\u5176\u4ee3\u7801\u91cf\u6bd4\u8f83\u9002\u5408\u9762\u8bd5\u3002 \u800c\u50cf\u54c8\u5e0c\u8868\uff0c\u6709\u5411\u56fe\u7b49\u590d\u6742\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u5b83\u4eec\u7684\u4e00\u4e2a\u64cd\u4f5c\u9700\u8981\u7684\u4ee3\u7801\u91cf\u90fd\u6bd4\u8f83\u5927\uff0c\u5f88\u96be\u5728\u51e0\u5341\u5206\u949f\u7684\u9762\u8bd5\u4e2d\u5b8c\u6210\u3002 \u53e6\u5916\uff0c\u7531\u4e8e\u94fe\u8868\u662f\u4e00\u79cd\u52a8\u6001\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u9700\u8981\u5bf9\u6307\u9488\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64\u5e94\u8058\u8005\u9700\u8981\u5f88\u597d\u7684\u7f16\u7a0b\u529f\u5e95\u624d\u80fd\u5199\u51fa\u5b8c\u6574\u7684\u64cd\u4f5c\u94fe\u8868\u7684\u4ee3\u7801\u3002 \u800c\u4e14\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5f88\u7075\u6d3b\uff0c\u9762\u8bd5\u5b98\u53ef\u4ee5\u7528\u94fe\u8868\u6765\u8bbe\u8ba1\u5177\u6709\u6311\u6218\u6027\u7684\u9762\u8bd5\u9898\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u51e0\u4e2a\u539f\u56e0\uff0c\u5f88\u591a\u9762\u8bd5\u5b98\u90fd\u7279\u522b\u9752\u7750\u4e0e\u94fe\u8868\u76f8\u5173\u7684\u9898\u76ee\u3002 \u6211\u4eec\u8bf4\u94fe\u8868\u662f\u4e00\u79cd\u52a8\u6001\u6570\u636e\u7ed3\u6784\uff0c\u662f\u56e0\u4e3a\u5728\u521b\u5efa\u94fe\u8868\u65f6\uff0c\u65e0\u987b\u77e5\u9053\u94fe\u8868\u957f\u5ea6\uff0c\u5f53\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e3a\u65b0\u8282\u70b9\u5206\u914d\u5185\u5b58\uff0c\u7136\u540e\u8c03\u6574\u6307\u9488\u6307\u5411\u6765\u786e\u4fdd\u65b0\u8282\u70b9\u88ab\u94fe\u63a5\u5230\u94fe\u8868\u5f53\u4e2d\u3002 \u5185\u5b58\u5206\u914d\u4e0d\u662f\u5728\u521b\u5efa\u94fe\u8868\u65f6\u4e00\u6b21\u6027\u5b8c\u6210\u7684\uff0c\u800c\u662f\u6bcf\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\u5206\u914d\u4e00\u6b21\u5185\u5b58\u3002 \u7531\u4e8e\u6ca1\u6709\u95f2\u7f6e\u7684\u5185\u5b58\uff0c\u94fe\u8868\u7684\u7a7a\u95f4\u6548\u7387\u6bd4\u6570\u7ec4\u9ad8\u3002 \u5982\u679c\u5355\u5411\u94fe\u8868\u7684\u8282\u70b9\u5b9a\u4e49\u5982\u4e0b\uff1a struct Node { int value ; Node * next ; }; \u90a3\u4e48\u5f80\u8be5\u94fe\u8868\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\u7684c++\u4ee3\u7801\u5982\u4e0b\uff1a void AddToTail ( Node ** pHead , int value ) { Node * node = new Node (); node -> value = value ; node -> next = nullptr ; // \u5982\u679chead\u4e3anullptr, \u5219\u8ffd\u52a0\u7684\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20 if ( * pHead == nullptr ) { * pHead = node ; } else { Node * cur = * pHead ; while ( cur -> next != nullptr ) cur = cur -> next ; cur -> next = node ; } } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u8981\u7279\u522b\u6ce8\u610f\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570pHead\u662f\u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u3002\u5f53\u6211\u4eec\u5f80\u4e00\u4e2a\u7a7a\u94fe\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u65b0\u63d2\u5165\u7684\u8282\u70b9\u5c31\u662f\u94fe\u8868\u7684\u5934\u6307\u9488\u3002 \u7531\u4e8e\u6b64\u65f6\u4f1a\u6539\u52a8\u5934\u6307\u9488\uff0c\u56e0\u6b64\u5fc5\u987b\u628apHead\u53c2\u6570\u8bbe\u4e3a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff0c\u5426\u5219\u51fa\u4e86\u8fd9\u4e2a\u51fd\u6570pHead\u4ecd\u7136\u662f\u4e00\u4e2a\u7a7a\u6307\u9488\u3002 \u7531\u4e8e\u94fe\u8868\u4e2d\u7684\u5185\u5b58\u4e0d\u662f\u4e00\u6b21\u6027\u5206\u914d\u7684\uff0c\u56e0\u800c\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u94fe\u8868\u7684\u5185\u5b58\u548c\u6570\u7ec4\u4e00\u6837\u662f\u8fde\u7eed\u7684\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u60f3\u5728\u94fe\u8868\u4e2d\u627e\u5230\u5b83\u7684\u7b2ci\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u6cbf\u7740\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u904d\u5386\u94fe\u8868\uff0c\u5b83\u7684\u65f6\u95f4\u6548\u7387\u4e3aO(n)\u3002 \u4e0b\u9762\u662f\u5728\u94fe\u8868\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u542b\u6709\u67d0\u503c\u7684\u8282\u70b9\u5e76\u5220\u9664\u8be5\u8282\u70b9\u7684\u4ee3\u7801\u3002 void RemoveNode ( Node ** pHead , int value ) { // \u7a7a\u94fe\u8868 if ( pHead == nullptr || * pHead == nullptr ) return ; Node * pre = * pHead ; if ( pre -> value == value ) { if ( pre -> next != nullptr ) * pHead = pre -> next ; else * pHead = nullptr ; return ; } if ( pre -> next == nullptr ) return ; Node * cur = pre -> next ; while ( cur != nullptr ) { if ( cur -> value == value ) { pre -> next = cur -> next ; return ; } else { pre = pre -> next ; cur = pre -> next ; } } } \u5b8c\u6574\u7684\u53c2\u8003\u4ee3\u7801: LinkList.cpp","title":"\u94fe\u8868"},{"location":"cpp/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/","text":"\u9884\u5904\u7406\u5668\u662f\u4e00\u4e9b\u6307\u4ee4\uff0c\u6307\u793a\u7f16\u8bd1\u5668\u5728\u5b9e\u9645\u7f16\u8bd1\u4e4b\u524d\u6240\u9700\u5b8c\u6210\u7684\u9884\u5904\u7406\u3002 \u6240\u6709\u7684\u9884\u5904\u7406\u5668\u6307\u4ee4\u90fd\u662f\u4ee5\u4e95\u53f7\uff08#\uff09\u5f00\u5934\uff0c\u53ea\u6709\u7a7a\u683c\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u5728\u9884\u5904\u7406\u6307\u4ee4\u4e4b\u524d\u3002\u9884\u5904\u7406\u6307\u4ee4\u4e0d\u662f C++ \u8bed\u53e5\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0d\u4f1a\u4ee5\u5206\u53f7\uff08;\uff09\u7ed3\u5c3e\u3002 \u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u4e4b\u524d\u6240\u6709\u7684\u5b9e\u4f8b\u4e2d\u90fd\u6709 #include \u6307\u4ee4\u3002\u8fd9\u4e2a\u5b8f\u7528\u4e8e\u628a\u5934\u6587\u4ef6\u5305\u542b\u5230\u6e90\u6587\u4ef6\u4e2d\u3002 C++ \u8fd8\u652f\u6301\u5f88\u591a\u9884\u5904\u7406\u6307\u4ee4\uff0c\u6bd4\u5982 #include\u3001#define\u3001#if\u3001#else\u3001#line \u7b49\uff0c\u8ba9\u6211\u4eec\u4e00\u8d77\u770b\u770b\u8fd9\u4e9b\u91cd\u8981\u6307\u4ee4\u3002 #define \u9884\u5904\u7406 \u00b6 #define \u9884\u5904\u7406\u6307\u4ee4\u7528\u4e8e\u521b\u5efa\u7b26\u53f7\u5e38\u91cf\u3002\u8be5\u7b26\u53f7\u5e38\u91cf\u901a\u5e38\u79f0\u4e3a\u5b8f\uff0c\u6307\u4ee4\u7684\u4e00\u822c\u5f62\u5f0f\u662f\uff1a #define macro-name replacement-text \u5f53\u8fd9\u4e00\u884c\u4ee3\u7801\u51fa\u73b0\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u65f6\uff0c\u5728\u8be5\u6587\u4ef6\u4e2d\u540e\u7eed\u51fa\u73b0\u7684\u6240\u6709\u5b8f\u90fd\u5c06\u4f1a\u5728\u7a0b\u5e8f\u7f16\u8bd1\u4e4b\u524d\u88ab\u66ff\u6362\u4e3a replacement-text\u3002\u4f8b\u5982\uff1a #include <iostream> using namespace std ; #define PI 3.14159 int main () { cout << \"Value of PI :\" << PI << endl ; return 0 ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6d4b\u8bd5\u8fd9\u6bb5\u4ee3\u7801\uff0c\u770b\u770b\u9884\u5904\u7406\u7684\u7ed3\u679c\u3002 \u5047\u8bbe\u6e90\u4ee3\u7801\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\uff0c\u63a5\u4e0b\u6765\u4f7f\u7528 -E \u9009\u9879\u8fdb\u884c\u7f16\u8bd1\uff0c\u5e76\u628a\u7ed3\u679c\u91cd\u5b9a\u5411\u5230 test.p\u3002 \u73b0\u5728\uff0c\u5982\u679c\u60a8\u67e5\u770b test.p \u6587\u4ef6\uff0c\u5c06\u4f1a\u770b\u5230\u5b83\u5df2\u7ecf\u5305\u542b\u5927\u91cf\u7684\u4fe1\u606f\uff0c\u800c\u4e14\u5728\u6587\u4ef6\u5e95\u90e8\u7684\u503c\u88ab\u6539\u4e3a\u5982\u4e0b\uff1a $ gcc - E test . cpp > test . p ... int main () { cout << \"Value of PI :\" << 3.14159 << endl ; return 0 ; } \u53c2\u6570\u5b8f \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528 #define \u6765\u5b9a\u4e49\u4e00\u4e2a\u5e26\u6709\u53c2\u6570\u7684\u5b8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; #define MIN(a,b) (a<b ? a : b) int main () { int i , j ; i = 100 ; j = 30 ; cout << \"\u8f83\u5c0f\u7684\u503c\u4e3a\uff1a\" << MIN ( i , j ) << endl ; return 0 ; } \u6761\u4ef6\u7f16\u8bd1 \u00b6 \u6709\u51e0\u4e2a\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u6709\u9009\u62e9\u5730\u5bf9\u90e8\u5206\u7a0b\u5e8f\u6e90\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u6761\u4ef6\u7f16\u8bd1\u3002 \u6761\u4ef6\u9884\u5904\u7406\u5668\u7684\u7ed3\u6784\u4e0e if \u9009\u62e9\u7ed3\u6784\u5f88\u50cf\u3002\u8bf7\u770b\u4e0b\u9762\u8fd9\u6bb5\u9884\u5904\u7406\u5668\u7684\u4ee3\u7801\uff1a #ifdef NULL #define NULL 0 #endif \u60a8\u53ef\u4ee5\u53ea\u5728\u8c03\u8bd5\u65f6\u8fdb\u884c\u7f16\u8bd1\uff0c\u8c03\u8bd5\u5f00\u5173\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5b8f\u6765\u5b9e\u73b0\uff0c\u5982\u4e0b\u6240\u793a\uff1a #ifdef DEBUG cerr << \"Variable x = \" << x << endl ; #endif \u5982\u679c\u5728\u6307\u4ee4 #ifdef DEBUG \u4e4b\u524d\u5df2\u7ecf\u5b9a\u4e49\u4e86\u7b26\u53f7\u5e38\u91cf DEBUG\uff0c\u5219\u4f1a\u5bf9\u7a0b\u5e8f\u4e2d\u7684 cerr \u8bed\u53e5\u8fdb\u884c\u7f16\u8bd1\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 #if 0 \u8bed\u53e5\u6ce8\u91ca\u6389\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u5982\u4e0b\u6240\u793a\uff1a #if 0 \u4e0d\u8fdb\u884c\u7f16\u8bd1\u7684\u4ee3\u7801 #endif \u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; #define DEBUG #define MIN(a,b) (((a)<(b)) ? a : b) int main () { int i , j ; i = 100 ; j = 30 ; #ifdef DEBUG cerr << \"Trace: Inside main function\" << endl ; #endif #if 0 /* \u8fd9\u662f\u6ce8\u91ca\u90e8\u5206 */ cout << MKSTR(HELLO C++) << endl; #endif cout << \"The minimum is \" << MIN ( i , j ) << endl ; #ifdef DEBUG cerr << \"Trace: Coming out of main function\" << endl ; #endif return 0 ; } # \u548c ## \u8fd0\u7b97\u7b26 \u00b6 # \u548c ## \u9884\u5904\u7406\u8fd0\u7b97\u7b26\u5728 C++ \u548c ANSI/ISO C \u4e2d\u90fd\u662f\u53ef\u7528\u7684\u3002# \u8fd0\u7b97\u7b26\u4f1a\u628a replacement-text \u4ee4\u724c\u8f6c\u6362\u4e3a\u7528\u5f15\u53f7\u5f15\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u5b8f\u5b9a\u4e49\uff1a #include <iostream> using namespace std ; #define MKSTR( x ) #x int main () { cout << MKSTR ( HELLO C ++ ) << endl ; return 0 ; } \u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u4e0d\u96be\u7406\u89e3\uff0cC++ \u9884\u5904\u7406\u5668\u628a\u4e0b\u9762\u8fd9\u884c\uff1a cout << MKSTR ( HELLO C ++ ) << endl ; cout << \"HELLO C++\" << endl ; ## \u8fd0\u7b97\u7b26\u7528\u4e8e\u8fde\u63a5\u4e24\u4e2a\u4ee4\u724c\u3002 \u00b6 \u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff1a #define CONCAT( x, y ) x ## y \u5f53 CONCAT \u51fa\u73b0\u5728\u7a0b\u5e8f\u4e2d\u65f6\uff0c\u5b83\u7684\u53c2\u6570\u4f1a\u88ab\u8fde\u63a5\u8d77\u6765\uff0c\u5e76\u7528\u6765\u53d6\u4ee3\u5b8f\u3002 \u4f8b\u5982\uff0c\u7a0b\u5e8f\u4e2d CONCAT(HELLO, C++) \u4f1a\u88ab\u66ff\u6362\u4e3a \"HELLO C++\"\uff0c\u5982\u4e0b\u9762\u5b9e\u4f8b\u6240\u793a\u3002 #include <iostream> using namespace std ; #define concat(a, b) a ## b int main () { int xy = 100 ; cout << concat ( x , y ); return 0 ; } \u4e0d\u96be\u7406\u89e3\uff0cC++ \u9884\u5904\u7406\u5668\u628a\u4e0b\u9762\u8fd9\u884c\uff1a cout << concat ( x , y ); \u8f6c\u6362\u6210\u4e86\uff1a cout << xy ; C++ \u4e2d\u7684\u9884\u5b9a\u4e49\u5b8f \u00b6 __LINE__ \u8fd9\u4f1a\u5728\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u5305\u542b\u5f53\u524d\u884c\u53f7\u3002 __FILE__ \u8fd9\u4f1a\u5728\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u5305\u542b\u5f53\u524d\u6587\u4ef6\u540d\u3002 __DATE__ \u8fd9\u4f1a\u5305\u542b\u4e00\u4e2a\u5f62\u5f0f\u4e3a month/day/year \u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u8868\u793a\u628a\u6e90\u6587\u4ef6\u8f6c\u6362\u4e3a\u76ee\u6807\u4ee3\u7801\u7684\u65e5\u671f\u3002 __TIME__ \u8fd9\u4f1a\u5305\u542b\u4e00\u4e2a\u5f62\u5f0f\u4e3a hour:minute:second \u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u8868\u793a\u7a0b\u5e8f\u88ab\u7f16\u8bd1\u7684\u65f6\u95f4\u3002 #include <iostream> using namespace std ; int main () { cout << \"Value of __LINE__ : \" << __LINE__ << endl ; cout << \"Value of __FILE__ : \" << __FILE__ << endl ; cout << \"Value of __DATE__ : \" << __DATE__ << endl ; cout << \"Value of __TIME__ : \" << __TIME__ << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a Value of __LINE__ : 6 Value of __FILE__ : test . cpp Value of __DATE__ : Feb 28 2011 Value of __TIME__ : 18 : 52 : 48","title":"\u9884\u5904\u7406\u5668"},{"location":"cpp/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#define","text":"#define \u9884\u5904\u7406\u6307\u4ee4\u7528\u4e8e\u521b\u5efa\u7b26\u53f7\u5e38\u91cf\u3002\u8be5\u7b26\u53f7\u5e38\u91cf\u901a\u5e38\u79f0\u4e3a\u5b8f\uff0c\u6307\u4ee4\u7684\u4e00\u822c\u5f62\u5f0f\u662f\uff1a #define macro-name replacement-text \u5f53\u8fd9\u4e00\u884c\u4ee3\u7801\u51fa\u73b0\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u65f6\uff0c\u5728\u8be5\u6587\u4ef6\u4e2d\u540e\u7eed\u51fa\u73b0\u7684\u6240\u6709\u5b8f\u90fd\u5c06\u4f1a\u5728\u7a0b\u5e8f\u7f16\u8bd1\u4e4b\u524d\u88ab\u66ff\u6362\u4e3a replacement-text\u3002\u4f8b\u5982\uff1a #include <iostream> using namespace std ; #define PI 3.14159 int main () { cout << \"Value of PI :\" << PI << endl ; return 0 ; } \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6d4b\u8bd5\u8fd9\u6bb5\u4ee3\u7801\uff0c\u770b\u770b\u9884\u5904\u7406\u7684\u7ed3\u679c\u3002 \u5047\u8bbe\u6e90\u4ee3\u7801\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\uff0c\u63a5\u4e0b\u6765\u4f7f\u7528 -E \u9009\u9879\u8fdb\u884c\u7f16\u8bd1\uff0c\u5e76\u628a\u7ed3\u679c\u91cd\u5b9a\u5411\u5230 test.p\u3002 \u73b0\u5728\uff0c\u5982\u679c\u60a8\u67e5\u770b test.p \u6587\u4ef6\uff0c\u5c06\u4f1a\u770b\u5230\u5b83\u5df2\u7ecf\u5305\u542b\u5927\u91cf\u7684\u4fe1\u606f\uff0c\u800c\u4e14\u5728\u6587\u4ef6\u5e95\u90e8\u7684\u503c\u88ab\u6539\u4e3a\u5982\u4e0b\uff1a $ gcc - E test . cpp > test . p ... int main () { cout << \"Value of PI :\" << 3.14159 << endl ; return 0 ; }","title":"#define \u9884\u5904\u7406"},{"location":"cpp/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#_1","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 #define \u6765\u5b9a\u4e49\u4e00\u4e2a\u5e26\u6709\u53c2\u6570\u7684\u5b8f\uff0c\u5982\u4e0b\u6240\u793a\uff1a #include <iostream> using namespace std ; #define MIN(a,b) (a<b ? a : b) int main () { int i , j ; i = 100 ; j = 30 ; cout << \"\u8f83\u5c0f\u7684\u503c\u4e3a\uff1a\" << MIN ( i , j ) << endl ; return 0 ; }","title":"\u53c2\u6570\u5b8f"},{"location":"cpp/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#_2","text":"\u6709\u51e0\u4e2a\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u6709\u9009\u62e9\u5730\u5bf9\u90e8\u5206\u7a0b\u5e8f\u6e90\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u6761\u4ef6\u7f16\u8bd1\u3002 \u6761\u4ef6\u9884\u5904\u7406\u5668\u7684\u7ed3\u6784\u4e0e if \u9009\u62e9\u7ed3\u6784\u5f88\u50cf\u3002\u8bf7\u770b\u4e0b\u9762\u8fd9\u6bb5\u9884\u5904\u7406\u5668\u7684\u4ee3\u7801\uff1a #ifdef NULL #define NULL 0 #endif \u60a8\u53ef\u4ee5\u53ea\u5728\u8c03\u8bd5\u65f6\u8fdb\u884c\u7f16\u8bd1\uff0c\u8c03\u8bd5\u5f00\u5173\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5b8f\u6765\u5b9e\u73b0\uff0c\u5982\u4e0b\u6240\u793a\uff1a #ifdef DEBUG cerr << \"Variable x = \" << x << endl ; #endif \u5982\u679c\u5728\u6307\u4ee4 #ifdef DEBUG \u4e4b\u524d\u5df2\u7ecf\u5b9a\u4e49\u4e86\u7b26\u53f7\u5e38\u91cf DEBUG\uff0c\u5219\u4f1a\u5bf9\u7a0b\u5e8f\u4e2d\u7684 cerr \u8bed\u53e5\u8fdb\u884c\u7f16\u8bd1\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 #if 0 \u8bed\u53e5\u6ce8\u91ca\u6389\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\uff0c\u5982\u4e0b\u6240\u793a\uff1a #if 0 \u4e0d\u8fdb\u884c\u7f16\u8bd1\u7684\u4ee3\u7801 #endif \u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e0b\u9762\u7684\u5b9e\u4f8b\uff1a #include <iostream> using namespace std ; #define DEBUG #define MIN(a,b) (((a)<(b)) ? a : b) int main () { int i , j ; i = 100 ; j = 30 ; #ifdef DEBUG cerr << \"Trace: Inside main function\" << endl ; #endif #if 0 /* \u8fd9\u662f\u6ce8\u91ca\u90e8\u5206 */ cout << MKSTR(HELLO C++) << endl; #endif cout << \"The minimum is \" << MIN ( i , j ) << endl ; #ifdef DEBUG cerr << \"Trace: Coming out of main function\" << endl ; #endif return 0 ; }","title":"\u6761\u4ef6\u7f16\u8bd1"},{"location":"cpp/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#_3","text":"# \u548c ## \u9884\u5904\u7406\u8fd0\u7b97\u7b26\u5728 C++ \u548c ANSI/ISO C \u4e2d\u90fd\u662f\u53ef\u7528\u7684\u3002# \u8fd0\u7b97\u7b26\u4f1a\u628a replacement-text \u4ee4\u724c\u8f6c\u6362\u4e3a\u7528\u5f15\u53f7\u5f15\u8d77\u6765\u7684\u5b57\u7b26\u4e32\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u5b8f\u5b9a\u4e49\uff1a #include <iostream> using namespace std ; #define MKSTR( x ) #x int main () { cout << MKSTR ( HELLO C ++ ) << endl ; return 0 ; } \u8ba9\u6211\u4eec\u6765\u770b\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u4e0d\u96be\u7406\u89e3\uff0cC++ \u9884\u5904\u7406\u5668\u628a\u4e0b\u9762\u8fd9\u884c\uff1a cout << MKSTR ( HELLO C ++ ) << endl ; cout << \"HELLO C++\" << endl ;","title":"# \u548c ## \u8fd0\u7b97\u7b26"},{"location":"cpp/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#_4","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u4f8b\uff1a #define CONCAT( x, y ) x ## y \u5f53 CONCAT \u51fa\u73b0\u5728\u7a0b\u5e8f\u4e2d\u65f6\uff0c\u5b83\u7684\u53c2\u6570\u4f1a\u88ab\u8fde\u63a5\u8d77\u6765\uff0c\u5e76\u7528\u6765\u53d6\u4ee3\u5b8f\u3002 \u4f8b\u5982\uff0c\u7a0b\u5e8f\u4e2d CONCAT(HELLO, C++) \u4f1a\u88ab\u66ff\u6362\u4e3a \"HELLO C++\"\uff0c\u5982\u4e0b\u9762\u5b9e\u4f8b\u6240\u793a\u3002 #include <iostream> using namespace std ; #define concat(a, b) a ## b int main () { int xy = 100 ; cout << concat ( x , y ); return 0 ; } \u4e0d\u96be\u7406\u89e3\uff0cC++ \u9884\u5904\u7406\u5668\u628a\u4e0b\u9762\u8fd9\u884c\uff1a cout << concat ( x , y ); \u8f6c\u6362\u6210\u4e86\uff1a cout << xy ;","title":"## \u8fd0\u7b97\u7b26\u7528\u4e8e\u8fde\u63a5\u4e24\u4e2a\u4ee4\u724c\u3002"},{"location":"cpp/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/#c","text":"__LINE__ \u8fd9\u4f1a\u5728\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u5305\u542b\u5f53\u524d\u884c\u53f7\u3002 __FILE__ \u8fd9\u4f1a\u5728\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u5305\u542b\u5f53\u524d\u6587\u4ef6\u540d\u3002 __DATE__ \u8fd9\u4f1a\u5305\u542b\u4e00\u4e2a\u5f62\u5f0f\u4e3a month/day/year \u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u8868\u793a\u628a\u6e90\u6587\u4ef6\u8f6c\u6362\u4e3a\u76ee\u6807\u4ee3\u7801\u7684\u65e5\u671f\u3002 __TIME__ \u8fd9\u4f1a\u5305\u542b\u4e00\u4e2a\u5f62\u5f0f\u4e3a hour:minute:second \u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u8868\u793a\u7a0b\u5e8f\u88ab\u7f16\u8bd1\u7684\u65f6\u95f4\u3002 #include <iostream> using namespace std ; int main () { cout << \"Value of __LINE__ : \" << __LINE__ << endl ; cout << \"Value of __FILE__ : \" << __FILE__ << endl ; cout << \"Value of __DATE__ : \" << __DATE__ << endl ; cout << \"Value of __TIME__ : \" << __TIME__ << endl ; return 0 ; } \u5f53\u4e0a\u9762\u7684\u4ee3\u7801\u88ab\u7f16\u8bd1\u548c\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u4ea7\u751f\u4e0b\u5217\u7ed3\u679c\uff1a Value of __LINE__ : 6 Value of __FILE__ : test . cpp Value of __DATE__ : Feb 28 2011 Value of __TIME__ : 18 : 52 : 48","title":"C++ \u4e2d\u7684\u9884\u5b9a\u4e49\u5b8f"},{"location":"django/1_django%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/","text":"django\u4ecb\u7ecd\u53ca\u5b89\u88c5 \u00b6 \u6846\u67b6\u4ecb\u7ecd Django\u662f\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\uff0c2005\u5e74\u5f00\u53d1\uff0c\u91c7\u7528python\u8bed\u8a00\u7f16\u5199\u7684\u3002 \u65e9\u671f\u662f\u4e3b\u8981\u505a\u65b0\u95fb\u548c\u5185\u5bb9\u7ba1\u7406\u7684\u7f51\u7ad9 Django\u672c\u8eab\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\u7684\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf \u5b98\u7f51 http://www.djangoproject.com \u4e2d\u6587\u6587\u6863 http://djangobook.py3k.cn/2.0/ \u7248\u672c\u4ecb\u7ecd \u00b6 \u7248\u672c\u8def\u7ebf\u56fe \u00b6 \u6a2a\u8f74\u4ee3\u8868\u53d1\u884c\u5e74\u4efd\u3002 ***LTS***\u662f\u957f\u671f\u652f\u6301(Long Term Support)\u7684\u7f29\u5199 \uff0c\u9009\u7528django\u5f00\u53d1\u65f6\uff0c\u4e00\u822c\u9009\u7528\u957f\u671f\u652f\u6301\u7248\u3002 django1.8 2019\u5e74\u5c31\u4e0d\u518d\u652f\u6301\u7ef4\u62a4\u4e86\u3002 django1.11 2021\u5e74 \u4e0d\u518d\u652f\u6301\u7ef4\u62a4\u3002 \u7b14\u8005\u5b66\u4e60\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662fdjango1.11\u7248\uff0c\u73b0\u5728\u63a8\u8350\u4f7f\u7528\u7684\u662fdjango2.2 \u4ee5\u540e\u7248\u672c\u3002 \u6846\u67b6\u6a21\u5f0f \u00b6 MTV M Models - \u6a21\u578b\uff08\u6570\u636e\u5e93\uff09 T Templates - \u6a21\u677f\uff08\u7f51\u9875\uff09 V Views - \u89c6\u56fe\uff08\u903b\u8f91\uff09 Django\u6846\u67b6\u7684\u5b89\u88c5 \u00b6 \u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684django pip install django \u5b89\u88c5\u6307\u5b9a\u7248\u672c\u7684django pip install django == 2.2 . 6 \u79bb\u7ebf\u5b89\u88c5 django\u5b98\u7f51\u4e0b\u8f7dtar.gz\u6587\u4ef6\uff0c\u6839\u636e\u5b98\u7f51\u6587\u6863\u5b89\u88c5","title":"1. django\u4ecb\u7ecd\u53ca\u5b89\u88c5"},{"location":"django/1_django%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/#django","text":"\u6846\u67b6\u4ecb\u7ecd Django\u662f\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\uff0c2005\u5e74\u5f00\u53d1\uff0c\u91c7\u7528python\u8bed\u8a00\u7f16\u5199\u7684\u3002 \u65e9\u671f\u662f\u4e3b\u8981\u505a\u65b0\u95fb\u548c\u5185\u5bb9\u7ba1\u7406\u7684\u7f51\u7ad9 Django\u672c\u8eab\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\u7684\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf \u5b98\u7f51 http://www.djangoproject.com \u4e2d\u6587\u6587\u6863 http://djangobook.py3k.cn/2.0/","title":"django\u4ecb\u7ecd\u53ca\u5b89\u88c5"},{"location":"django/1_django%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/#_1","text":"","title":"\u7248\u672c\u4ecb\u7ecd"},{"location":"django/1_django%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/#_2","text":"\u6a2a\u8f74\u4ee3\u8868\u53d1\u884c\u5e74\u4efd\u3002 ***LTS***\u662f\u957f\u671f\u652f\u6301(Long Term Support)\u7684\u7f29\u5199 \uff0c\u9009\u7528django\u5f00\u53d1\u65f6\uff0c\u4e00\u822c\u9009\u7528\u957f\u671f\u652f\u6301\u7248\u3002 django1.8 2019\u5e74\u5c31\u4e0d\u518d\u652f\u6301\u7ef4\u62a4\u4e86\u3002 django1.11 2021\u5e74 \u4e0d\u518d\u652f\u6301\u7ef4\u62a4\u3002 \u7b14\u8005\u5b66\u4e60\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662fdjango1.11\u7248\uff0c\u73b0\u5728\u63a8\u8350\u4f7f\u7528\u7684\u662fdjango2.2 \u4ee5\u540e\u7248\u672c\u3002","title":"\u7248\u672c\u8def\u7ebf\u56fe"},{"location":"django/1_django%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/#_3","text":"MTV M Models - \u6a21\u578b\uff08\u6570\u636e\u5e93\uff09 T Templates - \u6a21\u677f\uff08\u7f51\u9875\uff09 V Views - \u89c6\u56fe\uff08\u903b\u8f91\uff09","title":"\u6846\u67b6\u6a21\u5f0f"},{"location":"django/1_django%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/#django_1","text":"\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684django pip install django \u5b89\u88c5\u6307\u5b9a\u7248\u672c\u7684django pip install django == 2.2 . 6 \u79bb\u7ebf\u5b89\u88c5 django\u5b98\u7f51\u4e0b\u8f7dtar.gz\u6587\u4ef6\uff0c\u6839\u636e\u5b98\u7f51\u6587\u6863\u5b89\u88c5","title":"Django\u6846\u67b6\u7684\u5b89\u88c5"},{"location":"django/2_django%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1/","text":"django\u6846\u67b6\u7684\u4f7f\u7528 \u00b6 \u521b\u5efa\u9879\u76ee \u00b6 \u4f7f\u7528 django-admin \u521b\u5efa Django \u9879\u76ee \uff0c\u5728\u63a7\u5236\u53f0\u8f93\u5165\u3002 \u200b \u8bed\u6cd5\uff1a django - admin startproject \u9879\u76ee\u540d\u79f0 \u200b \u5982: django - admin startproject django_test Django\u9879\u76ee\u7ed3\u6784 \u00b6 manage.py \u529f\u80fd\uff1a \u5305\u542b\u6267\u884cdjango\u4e2d\u7684\u5404\u9879\u64cd\u4f5c\u7684\u6307\u4ee4 \u5982\uff1a \u542f\u52a8\u670d\u52a1 runserver \u4e3b\u76ee\u5f55 django_test/django_test __init__.py \u9879\u76ee\u7684\u521d\u59cb\u5316\u6587\u4ef6\uff0c\u81ea\u52a8\u8fd0\u884c urls.py \u9879\u76ee\u7684\u57fa\u7840\u8def\u7531\u914d\u7f6e\u6587\u4ef6 wsgi.py Web Server Gateway Interface Web \u670d\u52a1\u7f51\u5173\u63a5\u53e3 settings.py \u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6 1. BASE_DIR \u9879\u76ee\u6839\u76ee\u5f55 2. ALLOWED_HOSTS \u8bbe\u7f6e\u5141\u8bb8\u8bbf\u95ee\u5230\u672c\u9879\u76ee\u7684\u5730\u5740\u5217\u8868 \u5982\u679c\u5141\u8bb8\u5728\u7f51\u7edc\u4e2d\u88ab\u5176\u4ed6\u7684\u673a\u5668\u8bbf\u95ee\u5230\u7684\u8bdd \u63a8\u8350\u5199 [ \"*\" ], \u8868\u793a\u4efb\u4f55\u80fd\u591f\u8868\u793a\u8be5\u673a\u5668\u7684\u5730\u5740\u90fd\u80fd\u8bbf\u95ee\u5230\u8be5\u9879\u76ee \u540c\u65f6\u5728\u542f\u52a8\u670d\u52a1\u65f6\u8fd8\u9700\u8981\u6307\u5b9a\u5730\u5740\u548c\u7aef\u53e3 python3 manage . py runserver 0.0 . 0.0 : 8000 3. INSTALLED_APPS \u6307\u5b9a\u5df2\u5b89\u88c5\u7684\u5e94\u7528 \uff0c \u5982\u679c\u7531\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u7684\u8bdd\u9700\u8981\u5728\u6b64\u6ce8\u518c 4. MIDDLEWARE \u4e2d\u95f4\u4ef6 \uff0c \u5982\u679c\u6709\u81ea\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6 \uff0c \u9700\u8981\u5728\u6b64\u6ce8\u518c 5. ROOT_URLCONF \u6307\u5b9a\u9879\u76ee\u7684\u57fa\u7840\u8def\u7531\u914d\u7f6e\u6587\u4ef6 6. TEMPLATES \u914d\u7f6e\u6a21\u677f\u7684\u76f8\u5e94\u4fe1\u606f 7. DATABASES \u914d\u7f6e\u6570\u636e\u5e93\u7684\u4fe1\u606f 8. LANGUAGE_CODE \u8bbe\u7f6e\u8bed\u8a00 \uff0c \u4e3b\u8981\u8bbe\u7f6e\u4e2d\u6587\u7684\u8bdd \uff0c \u5141\u8bb8\u5c06\u503c\u6539\u4e3a 'zh-Hans' 9. TIME_ZONE \u6307\u5b9a\u65f6\u533a \uff0c \u9ed8\u8ba4\u65f6\u533a \uff0c \u5141\u8bb8\u5c06\u503c\u66f4\u6539\u4e3a \"Asia/Shanghai\" url\u7684\u4f7f\u7528 \u00b6 urls.py \u9ed8\u8ba4\u5728\u4e3b\u76ee\u5f55\u4e2d\uff0c\u4e3b\u8def\u7531\u914d\u7f6e\u6587\u4ef6\uff0c\u4f1a\u5305\u542b\u6700\u57fa\u672c\u7684\u5730\u5740\u6620\u5c04\uff0c\u6bcf\u4e2a\u5730\u5740\u8bbf\u95ee\u90fd\u5fc5\u987b\u8981\u5148\u7ecf\u8fc7\u8be5\u6587\u4ef6 \u4f5c\u7528\uff1a\u901a\u8fc7urls\u4e2d\u5b9a\u4e49\u597d\u7684\u5730\u5740\u627e\u5230\u5bf9\u5e94\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570 urlpatterns = [ path ( 'admin/' , admin . site . urls ), ] path() \u4f5c\u7528\uff1a\u4e3a\u4e86\u5339\u914d\u7528\u6237\u7684\u8bbf\u95ee\u8def\u5f84 \u8bed\u6cd5: from django.urls import path path(route, view, kwargs=None, name=None) route: \u5339\u914d\u8bf7\u6c42\u7684url view: \u5730\u5740\u5339\u914d\u4e0a\u4e4b\u540e\u8981\u6267\u884c\u64cd\u4f5c\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570 kwargs: \u5b57\u5178\uff0c\u7528\u6765\u60f3view\u4f20\u53c2\u7684\uff0c\u53ef\u4ee5\u7701\u7565 name: \u4e3aurl\u8d77\u522b\u540d, \u5728\u5730\u5740\u53cd\u5411\u89e3\u6790\u65f6\u4f7f\u7528 \u5411url\u4f20\u9012\u53c2\u6570 \u65b9\u5f0f\u4e00\uff1a\u901a\u8fc7path\u7684\u53c2\u6570kwargs\u7684\u65b9\u5f0f\u4f20\u9012\uff0c\u4e0d\u63a8\u8350\uff0c\u8fd9\u91cc\u4f9d\u8d56\u4e86django\u6846\u67b6\uff0c\u4e0d\u901a\u7528\u3002 \u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7http\u534f\u8bae\u8fdb\u884c\u4f20\u53c2 get\u8bf7\u6c42 http:// xxxx.com/login?id=1&token=xxx post\u8bf7\u6c42 http:// xxx.com/login \u6570\u636e\u653e\u5728 form-data\u91cc\uff0c\u8be6\u7ec6\u4e00\u70b9\u7684\u8bdd\u5c31\u662f\u653e\u5728http\u8bf7\u6c42\u7684\u8bf7\u6c42\u4f53\u91cc\uff08\u53ef\u4ee5\u53bb\u770b\u770bhttp\u534f\u8bae\u7684\u5185\u5bb9\uff09 \u6570\u636e\u600e\u4e48\u53d6\uff1f\uff1f \u540e\u9762\u7684\u6559\u7a0b\u4f1a\u8bb2\u5230\u3002 Django\u4e2d\u7684\u5e94\u7528 \u00b6 \u4ec0\u4e48\u662f\u5e94\u7528 \uff1f \u5e94\u7528\u5c31\u662f\u7f51\u7ad9\u4e2d\u7684\u4e00\u4e2a\u72ec\u7acb\u7684\u6a21\u5757 \u5982: \u7f51\u6613\u7f51\u7ad9\u53ef\u5206\u4e3a\u82e5\u5e72\u5e94\u7528\u7ec4\u6210 \u200b \u65b0\u95fb\u5e94\u7528: \u4e0e\u65b0\u95fb\u76f8\u5173\u7684\u5185\u5bb9 \u200b \u8f66\u5e94\u7528: \u4e0e\u6c7d\u8f66\u76f8\u5173\u7684\u5185\u5bb9 \u200b \u79d1\u6280\u5e94\u7528: \u4e0e\u79d1\u6280\u76f8\u5173\u7684\u5185\u5bb9 \u5728django\u4e2d, \u4e3b\u76ee\u5f55\u4e00\u822c\u4e0d\u5904\u7406\u5177\u4f53\u7684\u8bf7\u6c42, \u4e3b\u76ee\u5f55\u4e00\u822c\u5904\u7406\u7684\u662f\u9879\u76ee\u7684\u521d\u59cb\u5316\u64cd\u4f5c \u5904\u7406\u7684\u662f\u521d\u59cb\u5316\u64cd\u4f5c, \u4ee5\u53ca\u8bf7\u6c42\u7684\u5206\u53d1(\u5206\u5e03\u5f0f\u8bf7\u6c42\u5904\u7406), \u800c\u5177\u4f53\u7684\u8bf7\u6c42\u662f\u7531\u5404\u4e2a\u5e94\u7528\u53bb\u5904\u7406. \u521b\u5efa\u5e94\u7528 \u547d\u4ee4 python manage . py startapp \u5e94\u7528\u7684\u540d\u79f0 \u9700\u8981\u5728settings.py \u4e2d\u8fdb\u884c\u6ce8\u518c \uff0c \u5728INSTALLED_APPS \u4e2d\u8ffd\u52a0\u5e94\u7528\u7684\u540d\u79f0\u6765\u6ce8\u518c\u5e94\u7528 INSTALLED_APPS = [ 'django.contrib.admin' , ... ... '\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u540d\u79f0' ] \u5e94\u7528\u7684\u89e3\u6790\u7ec4\u6210 migrations \u6587\u4ef6\u5939 : \u5b58\u653e\u6570\u636e\u5e93\u7684\u4e2d\u95f4\u6587\u4ef6 __init__.py : \u5e94\u7528\u7684\u521d\u59cb\u5316\u6587\u4ef6 admin.py : \u5e94\u7528\u7684\u540e\u53f0\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 apps.py : \u548c\u5e94\u7528\u7684\u5c5e\u6027\u914d\u7f6e\u6587\u4ef6 models.py : Models \u4e0e \u6a21\u578b\u76f8\u5173\u7684\u6620\u5c04\u6587\u4ef6 tests.py : \u5e94\u7528\u7684\u5355\u5143\u6d4b\u8bd5\u6587\u4ef6 views.py : \u89c6\u56fe\u5904\u7406\u51fd\u6570\u7684\u6587\u4ef6 \u5206\u90e8\u5f0f\u7684\u8def\u7531\u7cfb\u7edf \u5728\u6bcf\u4e2a\u5e94\u7528\u4e2d\u5206\u522b\u521b\u5efaurls.py, \u683c\u5f0f\u53c2\u8003\u4e3b\u8def\u7531\u6587\u4ef6 \u76ee\u7684: \u4e3a\u4e86\u5904\u7406\u5404\u4e2a\u5e94\u7528\u4e2d\u7684\u8bf7\u6c42\u8def\u7531 \u7528\u6cd5: (\u8fd9\u91cc\u76f4\u63a5\u5f15\u7528django\u5b98\u65b9\u7684\u4f8b\u5b50) \u521b\u5efa\u4e00\u4e2apolls\u5e94\u7528\uff1a python manage . py startapp polls django_test/setting.py \u58f0\u660epolls\u6a21\u5757 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'polls' # <- \u8fd9\u91cc ] \u5728polls\u5305\u4e0b\u521b\u5efa urls.py \u6a21\u5757\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2ahttp://127.0.0.1:8000/ \u8def\u7531\u3002 from django.urls import path from .views import index_view urlpatterns = [ path ( '' , index_view , name = 'index' ), ] \u7f16\u5199\u8bd5\u56fe\u51fd\u6570 polls/views.py from django.http import HttpResponse from django.shortcuts import render # Create your views here. def index_view ( request ): return HttpResponse ( 'index' ) \u5c06polls\u5e94\u7528\u7684urls\u6ce8\u518c\u5230\u4e3b\u8def\u7531\u7cfb\u7edf\u4e2d\uff0c django_test/urls.py from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( '' , include ( \"polls.urls\" )), ] \u542f\u52a8\u670d\u52a1\uff0c\u8bbf\u95ee\u4e3b\u9875\uff1a http://127.0.0.1:8000/","title":"2. django\u4e2d\u7684\u8def\u7531"},{"location":"django/2_django%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1/#django","text":"","title":"django\u6846\u67b6\u7684\u4f7f\u7528"},{"location":"django/2_django%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1/#_1","text":"\u4f7f\u7528 django-admin \u521b\u5efa Django \u9879\u76ee \uff0c\u5728\u63a7\u5236\u53f0\u8f93\u5165\u3002 \u200b \u8bed\u6cd5\uff1a django - admin startproject \u9879\u76ee\u540d\u79f0 \u200b \u5982: django - admin startproject django_test","title":"\u521b\u5efa\u9879\u76ee"},{"location":"django/2_django%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1/#django_1","text":"manage.py \u529f\u80fd\uff1a \u5305\u542b\u6267\u884cdjango\u4e2d\u7684\u5404\u9879\u64cd\u4f5c\u7684\u6307\u4ee4 \u5982\uff1a \u542f\u52a8\u670d\u52a1 runserver \u4e3b\u76ee\u5f55 django_test/django_test __init__.py \u9879\u76ee\u7684\u521d\u59cb\u5316\u6587\u4ef6\uff0c\u81ea\u52a8\u8fd0\u884c urls.py \u9879\u76ee\u7684\u57fa\u7840\u8def\u7531\u914d\u7f6e\u6587\u4ef6 wsgi.py Web Server Gateway Interface Web \u670d\u52a1\u7f51\u5173\u63a5\u53e3 settings.py \u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6 1. BASE_DIR \u9879\u76ee\u6839\u76ee\u5f55 2. ALLOWED_HOSTS \u8bbe\u7f6e\u5141\u8bb8\u8bbf\u95ee\u5230\u672c\u9879\u76ee\u7684\u5730\u5740\u5217\u8868 \u5982\u679c\u5141\u8bb8\u5728\u7f51\u7edc\u4e2d\u88ab\u5176\u4ed6\u7684\u673a\u5668\u8bbf\u95ee\u5230\u7684\u8bdd \u63a8\u8350\u5199 [ \"*\" ], \u8868\u793a\u4efb\u4f55\u80fd\u591f\u8868\u793a\u8be5\u673a\u5668\u7684\u5730\u5740\u90fd\u80fd\u8bbf\u95ee\u5230\u8be5\u9879\u76ee \u540c\u65f6\u5728\u542f\u52a8\u670d\u52a1\u65f6\u8fd8\u9700\u8981\u6307\u5b9a\u5730\u5740\u548c\u7aef\u53e3 python3 manage . py runserver 0.0 . 0.0 : 8000 3. INSTALLED_APPS \u6307\u5b9a\u5df2\u5b89\u88c5\u7684\u5e94\u7528 \uff0c \u5982\u679c\u7531\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u7684\u8bdd\u9700\u8981\u5728\u6b64\u6ce8\u518c 4. MIDDLEWARE \u4e2d\u95f4\u4ef6 \uff0c \u5982\u679c\u6709\u81ea\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6 \uff0c \u9700\u8981\u5728\u6b64\u6ce8\u518c 5. ROOT_URLCONF \u6307\u5b9a\u9879\u76ee\u7684\u57fa\u7840\u8def\u7531\u914d\u7f6e\u6587\u4ef6 6. TEMPLATES \u914d\u7f6e\u6a21\u677f\u7684\u76f8\u5e94\u4fe1\u606f 7. DATABASES \u914d\u7f6e\u6570\u636e\u5e93\u7684\u4fe1\u606f 8. LANGUAGE_CODE \u8bbe\u7f6e\u8bed\u8a00 \uff0c \u4e3b\u8981\u8bbe\u7f6e\u4e2d\u6587\u7684\u8bdd \uff0c \u5141\u8bb8\u5c06\u503c\u6539\u4e3a 'zh-Hans' 9. TIME_ZONE \u6307\u5b9a\u65f6\u533a \uff0c \u9ed8\u8ba4\u65f6\u533a \uff0c \u5141\u8bb8\u5c06\u503c\u66f4\u6539\u4e3a \"Asia/Shanghai\"","title":"Django\u9879\u76ee\u7ed3\u6784"},{"location":"django/2_django%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1/#url","text":"urls.py \u9ed8\u8ba4\u5728\u4e3b\u76ee\u5f55\u4e2d\uff0c\u4e3b\u8def\u7531\u914d\u7f6e\u6587\u4ef6\uff0c\u4f1a\u5305\u542b\u6700\u57fa\u672c\u7684\u5730\u5740\u6620\u5c04\uff0c\u6bcf\u4e2a\u5730\u5740\u8bbf\u95ee\u90fd\u5fc5\u987b\u8981\u5148\u7ecf\u8fc7\u8be5\u6587\u4ef6 \u4f5c\u7528\uff1a\u901a\u8fc7urls\u4e2d\u5b9a\u4e49\u597d\u7684\u5730\u5740\u627e\u5230\u5bf9\u5e94\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570 urlpatterns = [ path ( 'admin/' , admin . site . urls ), ] path() \u4f5c\u7528\uff1a\u4e3a\u4e86\u5339\u914d\u7528\u6237\u7684\u8bbf\u95ee\u8def\u5f84 \u8bed\u6cd5: from django.urls import path path(route, view, kwargs=None, name=None) route: \u5339\u914d\u8bf7\u6c42\u7684url view: \u5730\u5740\u5339\u914d\u4e0a\u4e4b\u540e\u8981\u6267\u884c\u64cd\u4f5c\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570 kwargs: \u5b57\u5178\uff0c\u7528\u6765\u60f3view\u4f20\u53c2\u7684\uff0c\u53ef\u4ee5\u7701\u7565 name: \u4e3aurl\u8d77\u522b\u540d, \u5728\u5730\u5740\u53cd\u5411\u89e3\u6790\u65f6\u4f7f\u7528 \u5411url\u4f20\u9012\u53c2\u6570 \u65b9\u5f0f\u4e00\uff1a\u901a\u8fc7path\u7684\u53c2\u6570kwargs\u7684\u65b9\u5f0f\u4f20\u9012\uff0c\u4e0d\u63a8\u8350\uff0c\u8fd9\u91cc\u4f9d\u8d56\u4e86django\u6846\u67b6\uff0c\u4e0d\u901a\u7528\u3002 \u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7http\u534f\u8bae\u8fdb\u884c\u4f20\u53c2 get\u8bf7\u6c42 http:// xxxx.com/login?id=1&token=xxx post\u8bf7\u6c42 http:// xxx.com/login \u6570\u636e\u653e\u5728 form-data\u91cc\uff0c\u8be6\u7ec6\u4e00\u70b9\u7684\u8bdd\u5c31\u662f\u653e\u5728http\u8bf7\u6c42\u7684\u8bf7\u6c42\u4f53\u91cc\uff08\u53ef\u4ee5\u53bb\u770b\u770bhttp\u534f\u8bae\u7684\u5185\u5bb9\uff09 \u6570\u636e\u600e\u4e48\u53d6\uff1f\uff1f \u540e\u9762\u7684\u6559\u7a0b\u4f1a\u8bb2\u5230\u3002","title":"url\u7684\u4f7f\u7528"},{"location":"django/2_django%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1/#django_2","text":"\u4ec0\u4e48\u662f\u5e94\u7528 \uff1f \u5e94\u7528\u5c31\u662f\u7f51\u7ad9\u4e2d\u7684\u4e00\u4e2a\u72ec\u7acb\u7684\u6a21\u5757 \u5982: \u7f51\u6613\u7f51\u7ad9\u53ef\u5206\u4e3a\u82e5\u5e72\u5e94\u7528\u7ec4\u6210 \u200b \u65b0\u95fb\u5e94\u7528: \u4e0e\u65b0\u95fb\u76f8\u5173\u7684\u5185\u5bb9 \u200b \u8f66\u5e94\u7528: \u4e0e\u6c7d\u8f66\u76f8\u5173\u7684\u5185\u5bb9 \u200b \u79d1\u6280\u5e94\u7528: \u4e0e\u79d1\u6280\u76f8\u5173\u7684\u5185\u5bb9 \u5728django\u4e2d, \u4e3b\u76ee\u5f55\u4e00\u822c\u4e0d\u5904\u7406\u5177\u4f53\u7684\u8bf7\u6c42, \u4e3b\u76ee\u5f55\u4e00\u822c\u5904\u7406\u7684\u662f\u9879\u76ee\u7684\u521d\u59cb\u5316\u64cd\u4f5c \u5904\u7406\u7684\u662f\u521d\u59cb\u5316\u64cd\u4f5c, \u4ee5\u53ca\u8bf7\u6c42\u7684\u5206\u53d1(\u5206\u5e03\u5f0f\u8bf7\u6c42\u5904\u7406), \u800c\u5177\u4f53\u7684\u8bf7\u6c42\u662f\u7531\u5404\u4e2a\u5e94\u7528\u53bb\u5904\u7406. \u521b\u5efa\u5e94\u7528 \u547d\u4ee4 python manage . py startapp \u5e94\u7528\u7684\u540d\u79f0 \u9700\u8981\u5728settings.py \u4e2d\u8fdb\u884c\u6ce8\u518c \uff0c \u5728INSTALLED_APPS \u4e2d\u8ffd\u52a0\u5e94\u7528\u7684\u540d\u79f0\u6765\u6ce8\u518c\u5e94\u7528 INSTALLED_APPS = [ 'django.contrib.admin' , ... ... '\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u540d\u79f0' ] \u5e94\u7528\u7684\u89e3\u6790\u7ec4\u6210 migrations \u6587\u4ef6\u5939 : \u5b58\u653e\u6570\u636e\u5e93\u7684\u4e2d\u95f4\u6587\u4ef6 __init__.py : \u5e94\u7528\u7684\u521d\u59cb\u5316\u6587\u4ef6 admin.py : \u5e94\u7528\u7684\u540e\u53f0\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 apps.py : \u548c\u5e94\u7528\u7684\u5c5e\u6027\u914d\u7f6e\u6587\u4ef6 models.py : Models \u4e0e \u6a21\u578b\u76f8\u5173\u7684\u6620\u5c04\u6587\u4ef6 tests.py : \u5e94\u7528\u7684\u5355\u5143\u6d4b\u8bd5\u6587\u4ef6 views.py : \u89c6\u56fe\u5904\u7406\u51fd\u6570\u7684\u6587\u4ef6 \u5206\u90e8\u5f0f\u7684\u8def\u7531\u7cfb\u7edf \u5728\u6bcf\u4e2a\u5e94\u7528\u4e2d\u5206\u522b\u521b\u5efaurls.py, \u683c\u5f0f\u53c2\u8003\u4e3b\u8def\u7531\u6587\u4ef6 \u76ee\u7684: \u4e3a\u4e86\u5904\u7406\u5404\u4e2a\u5e94\u7528\u4e2d\u7684\u8bf7\u6c42\u8def\u7531 \u7528\u6cd5: (\u8fd9\u91cc\u76f4\u63a5\u5f15\u7528django\u5b98\u65b9\u7684\u4f8b\u5b50) \u521b\u5efa\u4e00\u4e2apolls\u5e94\u7528\uff1a python manage . py startapp polls django_test/setting.py \u58f0\u660epolls\u6a21\u5757 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'polls' # <- \u8fd9\u91cc ] \u5728polls\u5305\u4e0b\u521b\u5efa urls.py \u6a21\u5757\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2ahttp://127.0.0.1:8000/ \u8def\u7531\u3002 from django.urls import path from .views import index_view urlpatterns = [ path ( '' , index_view , name = 'index' ), ] \u7f16\u5199\u8bd5\u56fe\u51fd\u6570 polls/views.py from django.http import HttpResponse from django.shortcuts import render # Create your views here. def index_view ( request ): return HttpResponse ( 'index' ) \u5c06polls\u5e94\u7528\u7684urls\u6ce8\u518c\u5230\u4e3b\u8def\u7531\u7cfb\u7edf\u4e2d\uff0c django_test/urls.py from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( '' , include ( \"polls.urls\" )), ] \u542f\u52a8\u670d\u52a1\uff0c\u8bbf\u95ee\u4e3b\u9875\uff1a http://127.0.0.1:8000/","title":"Django\u4e2d\u7684\u5e94\u7528"},{"location":"django/3_django%E4%B8%AD%E7%9A%84HttpRequest%E5%AF%B9%E8%B1%A1/","text":"django\u4e2d\u7684HttpRequest\u5bf9\u8c61 \u00b6 \u4ec0\u4e48\u662fHttpRequest \u00b6 HttpRequest \u5bf9\u8bf7\u6c42\u5bf9\u8c61\u7684\u5c01\u88c5\uff0c \u91cc\u9762\u5c01\u88c5\u7684\u662f\u8bf7\u6c42\u8fc7\u7a0b\u4e2d\u7684\u6240\u6709\u4fe1\u606f\uff0c\u5728Django\u4e2dHttpRequest \u88ab\u5c01\u88c5\u6210 request \u5bf9\u8c61\u5e76\u5c01\u88c5\u5230\u89c6\u56fe\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u5728\u8c03\u7528\u89c6\u56fe\u65f6\u81ea\u52a8\u5bfc\u5165 HttpRequest \u4e2d\u7684\u4e3b\u8981\u5185\u5bb9 \u00b6 1. request . scheme : \u8868\u793a\u8bf7\u6c42\u65b9\u6848 \uff08 http\u6216https \u901a\u5e38 \uff09 \u7684\u5b57\u7b26\u4e32 2. request . post : \u8bf7\u6c42\u4e3b\u4f53 3. request . path : \u8bf7\u6c42\u8def\u5f84 4. request . get_full_path : \u8bf7\u6c42\u5b8c\u6574\u8def\u5f84 5. request . get_host (): \u8bf7\u6c42\u4e3b\u673a\u5730\u5740 / \u57df\u540d 6. request . method : \u8bf7\u6c42\u65b9\u6cd5 7. request . GET : \u5c01\u88dd\u4e86get\u8acb\u6c42\u65b9\u5f0f\u63d0\u4ea4\u7684\u6578\u64da 8. request . POST : \u5c01\u88dd\u4e86POST\u8acb\u6c42\u65b9\u5f0f\u63d0\u4ea4\u7684\u6578\u64da 9. request . cookies : \u5c01\u88dd\u4e86 cookies\u4e2d\u7684\u6240\u6709\u6578\u64da 10. request . META : \u5c01\u88dd\u4e86\u8acb\u6c42\u7684\u5143\u6578\u64da request . META . HTTP_REFERER : \u5c01\u88dd\u4e86\u8acb\u6c42\u7684\u6e90\u5730\u5740 11. request . FILES : \u4e0a\u4f20\u6587\u4ef6\u7684\u7c7b\u5b57\u5178\u5bf9\u8c61 12. request . is_secure (): True\u5982\u679c\u8bf7\u6c42\u662f\u5b89\u5168\u7684 \uff0c \u5219\u8fd4\u56de ; \u4e5f\u5c31\u662f\u8bf4 \uff0c \u5982\u679c\u5b83\u662f\u7528HTTPS\u5236\u4f5c\u7684 13. request . is_ajax (): \u8fd4\u56deTrue\u5982\u679c\u8bf7\u6c42\u88ab\u7ecf\u7531\u5236\u6210XMLHttpRequest \u83b7\u53d6\u8bf7\u6c42\u63d0\u4ea4\u7684\u6570\u636e \u00b6 get \u8bf7\u6c42 \u00b6 \u83b7\u53d6\u6570\u636e request . GET [ '\u540d\u79f0' ] request . GET . get ( '\u540d\u79f0' ) request . GET . getlist ( '\u540d\u79f0' ) POST\u8bf7\u6c42 \u00b6 \u83b7\u53d6\u6570\u636e request . GET [ '\u540d\u79f0' ] request . GET . get ( '\u540d\u79f0' ) request . GET . getlist ( '\u540d\u79f0' ) request.META \u00b6 \u5305\u542b\u6240\u6709\u53ef\u7528HTTP\u6807\u5934\u7684\u5b57\u5178\u3002\u53ef\u7528\u7684\u6807\u5934\u53d6\u51b3\u4e8e\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u793a\u4f8b CONTENT_LENGTH - \u8bf7\u6c42\u6b63\u6587\u7684\u957f\u5ea6\uff08\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\u3002 CONTENT_TYPE - \u8bf7\u6c42\u6b63\u6587\u7684MIME\u7c7b\u578b\u3002 HTTP_ACCEPT - \u54cd\u5e94\u7684\u53ef\u63a5\u53d7\u5185\u5bb9\u7c7b\u578b\u3002 HTTP_ACCEPT_ENCODING - \u53ef\u63a5\u53d7\u7684\u54cd\u5e94\u7f16\u7801\u3002 HTTP_ACCEPT_LANGUAGE - \u54cd\u5e94\u7684\u53ef\u63a5\u53d7\u8bed\u8a00\u3002 HTTP_HOST - \u5ba2\u6237\u7aef\u53d1\u9001\u7684HTTP\u4e3b\u673a\u5934\u3002 HTTP_REFERER - \u5f15\u7528\u9875\u9762\uff0c\u5982\u679c\u6709\u7684\u8bdd\u3002 HTTP_USER_AGENT - \u5ba2\u6237\u7aef\u7684\u7528\u6237\u4ee3\u7406\u5b57\u7b26\u4e32\u3002 QUERY_STRING - \u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u4f5c\u4e3a\u5355\u4e2a\uff08\u672a\u89e3\u6790\u7684\uff09\u5b57\u7b26\u4e32\u3002 REMOTE_ADDR - \u5ba2\u6237\u7aef\u7684IP\u5730\u5740\u3002 REMOTE_HOST - \u5ba2\u6237\u7aef\u7684\u4e3b\u673a\u540d\u3002 REMOTE_USER - Web\u670d\u52a1\u5668\u9a8c\u8bc1\u7684\u7528\u6237\uff08\u5982\u679c\u6709\uff09\u3002 REQUEST_METHOD- \u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\"GET\"\u6216\"POST\"\u3002 SERVER_NAME - \u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d\u3002 SERVER_PORT - \u670d\u52a1\u5668\u7684\u7aef\u53e3\uff08\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\u3002 \u9664\u4e86CONTENT_LENGTH\u548c\u4e4b\u5916CONTENT_TYPE\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u8bf7\u6c42\u4e2d\u7684\u4efb\u4f55HTTP\u5934\u90fd\u5c06\u8f6c\u6362\u4e3aMETA\u952e\uff0c\u65b9\u6cd5\u662f\u5c06\u6240\u6709\u5b57\u7b26\u8f6c\u6362\u4e3a\u5927\u5199\uff0c\u7528\u4e0b\u5212\u7ebf\u66ff\u6362\u4efb\u4f55\u8fde\u5b57\u7b26\u5e76HTTP_\u5728\u540d\u79f0\u4e2d\u6dfb\u52a0\u524d\u7f00\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u8c03\u7528\u7684\u6807\u5934X-Bender\u5c06\u6620\u5c04\u5230META\u5bc6\u94a5 HTTP_X_BENDER\u3002","title":"3. HttpRequest\u5bf9\u8c61"},{"location":"django/3_django%E4%B8%AD%E7%9A%84HttpRequest%E5%AF%B9%E8%B1%A1/#djangohttprequest","text":"","title":"django\u4e2d\u7684HttpRequest\u5bf9\u8c61"},{"location":"django/3_django%E4%B8%AD%E7%9A%84HttpRequest%E5%AF%B9%E8%B1%A1/#httprequest","text":"HttpRequest \u5bf9\u8bf7\u6c42\u5bf9\u8c61\u7684\u5c01\u88c5\uff0c \u91cc\u9762\u5c01\u88c5\u7684\u662f\u8bf7\u6c42\u8fc7\u7a0b\u4e2d\u7684\u6240\u6709\u4fe1\u606f\uff0c\u5728Django\u4e2dHttpRequest \u88ab\u5c01\u88c5\u6210 request \u5bf9\u8c61\u5e76\u5c01\u88c5\u5230\u89c6\u56fe\u5904\u7406\u51fd\u6570\u4e2d\uff0c\u5728\u8c03\u7528\u89c6\u56fe\u65f6\u81ea\u52a8\u5bfc\u5165","title":"\u4ec0\u4e48\u662fHttpRequest"},{"location":"django/3_django%E4%B8%AD%E7%9A%84HttpRequest%E5%AF%B9%E8%B1%A1/#httprequest_1","text":"1. request . scheme : \u8868\u793a\u8bf7\u6c42\u65b9\u6848 \uff08 http\u6216https \u901a\u5e38 \uff09 \u7684\u5b57\u7b26\u4e32 2. request . post : \u8bf7\u6c42\u4e3b\u4f53 3. request . path : \u8bf7\u6c42\u8def\u5f84 4. request . get_full_path : \u8bf7\u6c42\u5b8c\u6574\u8def\u5f84 5. request . get_host (): \u8bf7\u6c42\u4e3b\u673a\u5730\u5740 / \u57df\u540d 6. request . method : \u8bf7\u6c42\u65b9\u6cd5 7. request . GET : \u5c01\u88dd\u4e86get\u8acb\u6c42\u65b9\u5f0f\u63d0\u4ea4\u7684\u6578\u64da 8. request . POST : \u5c01\u88dd\u4e86POST\u8acb\u6c42\u65b9\u5f0f\u63d0\u4ea4\u7684\u6578\u64da 9. request . cookies : \u5c01\u88dd\u4e86 cookies\u4e2d\u7684\u6240\u6709\u6578\u64da 10. request . META : \u5c01\u88dd\u4e86\u8acb\u6c42\u7684\u5143\u6578\u64da request . META . HTTP_REFERER : \u5c01\u88dd\u4e86\u8acb\u6c42\u7684\u6e90\u5730\u5740 11. request . FILES : \u4e0a\u4f20\u6587\u4ef6\u7684\u7c7b\u5b57\u5178\u5bf9\u8c61 12. request . is_secure (): True\u5982\u679c\u8bf7\u6c42\u662f\u5b89\u5168\u7684 \uff0c \u5219\u8fd4\u56de ; \u4e5f\u5c31\u662f\u8bf4 \uff0c \u5982\u679c\u5b83\u662f\u7528HTTPS\u5236\u4f5c\u7684 13. request . is_ajax (): \u8fd4\u56deTrue\u5982\u679c\u8bf7\u6c42\u88ab\u7ecf\u7531\u5236\u6210XMLHttpRequest","title":"HttpRequest \u4e2d\u7684\u4e3b\u8981\u5185\u5bb9"},{"location":"django/3_django%E4%B8%AD%E7%9A%84HttpRequest%E5%AF%B9%E8%B1%A1/#_1","text":"","title":"\u83b7\u53d6\u8bf7\u6c42\u63d0\u4ea4\u7684\u6570\u636e"},{"location":"django/3_django%E4%B8%AD%E7%9A%84HttpRequest%E5%AF%B9%E8%B1%A1/#get","text":"\u83b7\u53d6\u6570\u636e request . GET [ '\u540d\u79f0' ] request . GET . get ( '\u540d\u79f0' ) request . GET . getlist ( '\u540d\u79f0' )","title":"get \u8bf7\u6c42"},{"location":"django/3_django%E4%B8%AD%E7%9A%84HttpRequest%E5%AF%B9%E8%B1%A1/#post","text":"\u83b7\u53d6\u6570\u636e request . GET [ '\u540d\u79f0' ] request . GET . get ( '\u540d\u79f0' ) request . GET . getlist ( '\u540d\u79f0' )","title":"POST\u8bf7\u6c42"},{"location":"django/3_django%E4%B8%AD%E7%9A%84HttpRequest%E5%AF%B9%E8%B1%A1/#requestmeta","text":"\u5305\u542b\u6240\u6709\u53ef\u7528HTTP\u6807\u5934\u7684\u5b57\u5178\u3002\u53ef\u7528\u7684\u6807\u5934\u53d6\u51b3\u4e8e\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u793a\u4f8b CONTENT_LENGTH - \u8bf7\u6c42\u6b63\u6587\u7684\u957f\u5ea6\uff08\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\u3002 CONTENT_TYPE - \u8bf7\u6c42\u6b63\u6587\u7684MIME\u7c7b\u578b\u3002 HTTP_ACCEPT - \u54cd\u5e94\u7684\u53ef\u63a5\u53d7\u5185\u5bb9\u7c7b\u578b\u3002 HTTP_ACCEPT_ENCODING - \u53ef\u63a5\u53d7\u7684\u54cd\u5e94\u7f16\u7801\u3002 HTTP_ACCEPT_LANGUAGE - \u54cd\u5e94\u7684\u53ef\u63a5\u53d7\u8bed\u8a00\u3002 HTTP_HOST - \u5ba2\u6237\u7aef\u53d1\u9001\u7684HTTP\u4e3b\u673a\u5934\u3002 HTTP_REFERER - \u5f15\u7528\u9875\u9762\uff0c\u5982\u679c\u6709\u7684\u8bdd\u3002 HTTP_USER_AGENT - \u5ba2\u6237\u7aef\u7684\u7528\u6237\u4ee3\u7406\u5b57\u7b26\u4e32\u3002 QUERY_STRING - \u67e5\u8be2\u5b57\u7b26\u4e32\uff0c\u4f5c\u4e3a\u5355\u4e2a\uff08\u672a\u89e3\u6790\u7684\uff09\u5b57\u7b26\u4e32\u3002 REMOTE_ADDR - \u5ba2\u6237\u7aef\u7684IP\u5730\u5740\u3002 REMOTE_HOST - \u5ba2\u6237\u7aef\u7684\u4e3b\u673a\u540d\u3002 REMOTE_USER - Web\u670d\u52a1\u5668\u9a8c\u8bc1\u7684\u7528\u6237\uff08\u5982\u679c\u6709\uff09\u3002 REQUEST_METHOD- \u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\"GET\"\u6216\"POST\"\u3002 SERVER_NAME - \u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d\u3002 SERVER_PORT - \u670d\u52a1\u5668\u7684\u7aef\u53e3\uff08\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\u3002 \u9664\u4e86CONTENT_LENGTH\u548c\u4e4b\u5916CONTENT_TYPE\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u8bf7\u6c42\u4e2d\u7684\u4efb\u4f55HTTP\u5934\u90fd\u5c06\u8f6c\u6362\u4e3aMETA\u952e\uff0c\u65b9\u6cd5\u662f\u5c06\u6240\u6709\u5b57\u7b26\u8f6c\u6362\u4e3a\u5927\u5199\uff0c\u7528\u4e0b\u5212\u7ebf\u66ff\u6362\u4efb\u4f55\u8fde\u5b57\u7b26\u5e76HTTP_\u5728\u540d\u79f0\u4e2d\u6dfb\u52a0\u524d\u7f00\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u8c03\u7528\u7684\u6807\u5934X-Bender\u5c06\u6620\u5c04\u5230META\u5bc6\u94a5 HTTP_X_BENDER\u3002","title":"request.META"},{"location":"django/4_django%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/","text":"session \u548c cookie \u00b6 django \u4e2d\u4f7f\u7528 cookies \u00b6 \u8bbe\u7f6ecookies \u7684\u503c\uff08\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u5ba2\u6237\u7aef\uff09 \u8bed\u6cd5\uff1a \u54cd\u5e94\u5bf9\u8c61.set_cookie(key, value, expires) # \u4e0d\u4f7f\u7528\u6a21\u677f resp = HttpResponse ( 'xxx' ) resp . set_cookie ( key , value , expires ) return resp # \u4f7f\u7528\u6a21\u677f resp = render ( request , 'xxx.html' , context ) resp . set_cookie ( key , value , expires ) return resp # \u4f7f\u7528\u91cd\u5b9a\u5411 resp = redirect ( request , 'xxx.html' ) resp . set_cookie ( key , value , expires ) return resp \u83b7\u53d6cookies \u7684\u503c \u4f34\u968f\u8bf7\u6c42\u5bf9\u8c61\u5230\u8fbe\u670d\u52a1\u5668\u540e\u518d\u83b7\u53d6cookie\u7684\u503c request.COOKIES: \u5c01\u88c5\u4e86\u5f53\u524d\u8bbf\u95ee\u7ad9\u70b9\u4e0b\u6240\u6709cookie\u7684\u4fe1\u606f \u5220\u9664cookie \u7684\u503c \u5ba2\u6237\u7aef\uff1a\u6e05\u9664\u6d4f\u89c8\u5668cookie \u670d\u52a1\u7aef\uff1aresp.delete_cookie(key) django \u4e2d\u4f7f\u7528 session \u00b6 \u8bbe\u7f6esession\u7684\u503c\uff08\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u670d\u52a1\u7aef\uff09 \u8bed\u6cd5\uff1a request.session['key'] = value \u83b7\u53d6session \u7684\u503c request . session [ 'key' ] request . session . get ( 'key' ) \u5220\u9664session\u7684\u503c del request . session [ 'key' ] \u6709\u5173 session \u7684\u914d\u7f6e \u5728 settings.py \u4e2d\u6709\u5173session\u7684\u8bbe\u7f6e SESSION_COOKIE_AGE \u8bbe\u7f6esessionID\u5728cookies\u4e2d\u7684\u5b58\u6d3b\u65f6\u95f4 SESSION_COOKIE_AGE = 60 * 30 # 30s SESSION_EXPIRE_AT_BROWSER_CLOSE \u8bbe\u7f6e\u6d4f\u89c8\u5668\u5173\u95ed\u65f6\u5219\u6e05\u9664\u670d\u52a1\u5668\u4e0a\u5bf9\u5e94\u7684session\u7a7a\u95f4 SESSION_EXPIRE_AT_BROWSER_CLOSE = True","title":"4. session\u548ccookie"},{"location":"django/4_django%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/#session-cookie","text":"","title":"session \u548c cookie"},{"location":"django/4_django%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/#django-cookies","text":"\u8bbe\u7f6ecookies \u7684\u503c\uff08\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u5ba2\u6237\u7aef\uff09 \u8bed\u6cd5\uff1a \u54cd\u5e94\u5bf9\u8c61.set_cookie(key, value, expires) # \u4e0d\u4f7f\u7528\u6a21\u677f resp = HttpResponse ( 'xxx' ) resp . set_cookie ( key , value , expires ) return resp # \u4f7f\u7528\u6a21\u677f resp = render ( request , 'xxx.html' , context ) resp . set_cookie ( key , value , expires ) return resp # \u4f7f\u7528\u91cd\u5b9a\u5411 resp = redirect ( request , 'xxx.html' ) resp . set_cookie ( key , value , expires ) return resp \u83b7\u53d6cookies \u7684\u503c \u4f34\u968f\u8bf7\u6c42\u5bf9\u8c61\u5230\u8fbe\u670d\u52a1\u5668\u540e\u518d\u83b7\u53d6cookie\u7684\u503c request.COOKIES: \u5c01\u88c5\u4e86\u5f53\u524d\u8bbf\u95ee\u7ad9\u70b9\u4e0b\u6240\u6709cookie\u7684\u4fe1\u606f \u5220\u9664cookie \u7684\u503c \u5ba2\u6237\u7aef\uff1a\u6e05\u9664\u6d4f\u89c8\u5668cookie \u670d\u52a1\u7aef\uff1aresp.delete_cookie(key)","title":"django \u4e2d\u4f7f\u7528 cookies"},{"location":"django/4_django%E4%B8%AD%E7%9A%84session%E5%92%8Ccookie/#django-session","text":"\u8bbe\u7f6esession\u7684\u503c\uff08\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u670d\u52a1\u7aef\uff09 \u8bed\u6cd5\uff1a request.session['key'] = value \u83b7\u53d6session \u7684\u503c request . session [ 'key' ] request . session . get ( 'key' ) \u5220\u9664session\u7684\u503c del request . session [ 'key' ] \u6709\u5173 session \u7684\u914d\u7f6e \u5728 settings.py \u4e2d\u6709\u5173session\u7684\u8bbe\u7f6e SESSION_COOKIE_AGE \u8bbe\u7f6esessionID\u5728cookies\u4e2d\u7684\u5b58\u6d3b\u65f6\u95f4 SESSION_COOKIE_AGE = 60 * 30 # 30s SESSION_EXPIRE_AT_BROWSER_CLOSE \u8bbe\u7f6e\u6d4f\u89c8\u5668\u5173\u95ed\u65f6\u5219\u6e05\u9664\u670d\u52a1\u5668\u4e0a\u5bf9\u5e94\u7684session\u7a7a\u95f4 SESSION_EXPIRE_AT_BROWSER_CLOSE = True","title":"django \u4e2d\u4f7f\u7528 session"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/","text":"django \u4e2d\u7684\u6a21\u677f\uff0cTemplates \u00b6 \u6a21\u677f\u7684\u5b9a\u4e49 \u00b6 \u6a21\u677f\u5c31\u662f\u8981\u52a8\u6001\u5448\u73b0\u7ed9\u7528\u6237\u7684\u7f51\u9875 \u6a21\u677f\u7684\u672c\u8d28\u5c31\u662f\u7f51\u9875\uff0c\u524d\u540e\u7aef\uff0c \u52a8\u9759\u7ed3\u5408\u7684\u7f51\u9875 django\u4e2d\u7684\u6a21\u677f\u5f15\u64ce\u662f\u7531django\u81ea\u5df1\u63d0\u4f9b\u7684\uff0c\u800c\u5e76\u975eJinja2\uff0c\u6240\u4ee5Django\u4e2d\u7684\u6a21\u677f\u7684\u8bed\u6cd5\u4e0eflask(Jinja2)\u7684\u8bed\u6cd5\u4f1a\u7a0d\u6709\u4e0d\u540c Django\u6a21\u677f\u7684\u8bbe\u7f6e \u00b6 \u5728setting.py\u4e2d\u8bbe\u7f6e TEMPLATES \u7684\u53d8\u91cf TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] \u53c2\u6570\u8bf4\u660e BACKEND \uff1a \u6307\u5b9a\u4f7f\u7528\u7684\u6a21\u677f\u7684\u5f15\u64ce DIRS \uff1a \u6307\u5b9a\u6a21\u677f\u7684\u5b58\u653e\u76ee\u5f55\u4eec\uff0c\u4e00\u822c\u7528\u6839\u76ee\u5f55\u4e0b\u7684\u8fd9\u79cd\uff08\u7b2c\u4e00\u79cd\uff09 # \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u7684templates\u76ee\u5f55\u4e2d\u5b58\u653e\u6240\u6709\u6a21\u677f DIRS = [ os . path . join ( BASE_DIR , 'templates' )] # \u5728\u9879\u76ee\u7684index\u5e94\u7528\u4e2d\u7684temp\u76ee\u5f55\u4e2d\u5b58\u653e\u6a21\u677f\uff0c\u4ee5\u53ca\u5728\u9879\u76ee\u7684music\u5e94\u7528\u4e2d\u7684temp\u76ee\u5f55\u4e2d\u5b58\u653e\u6a21\u677f DIRS = [ 'index.temp' , 'music.temp' ] APP_DIRS \uff1a \u8868\u793a\u662f\u5426\u81ea\u52a8\u641c\u7d22\u5e94\u7528\u4e2d\u7684\u76ee\u5f55 \uff0c True: \u8868\u793a\u8981\u81ea\u52a8\u641c\u7d22\u5e94\u7528\u4e2d\u7684templates\u7684\u76ee\u5f55\u3002 \u6a21\u677f\u7684\u52a0\u8f7d\u65b9\u5f0f \u00b6 \u901a\u8fc7loader \u5bf9\u8c61\u83b7\u53d6\u6a21\u677f\uff0c\u518d\u901a\u8fc7HttpResponse\u8fdb\u884c\u54cd\u5e94 # \u5148\u5bfc\u5165loader # \u901a\u8fc7loader\u52a0\u8f7d\u6a21\u677f # \u5c06\u52a0\u8f7d\u597d\u7684\u6a21\u677f\u6e32\u67d3\u6210\u5b57\u7b26\u4e32 # \u901a\u8fc7HttpResponse \u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u54cd\u5e94 from django.template import loader def index_view ( self , request , * args , ** kwargs ): template = loader . get_template ( 'index.html' ) template = template . render () return HttpResponse ( template ) \u4f7f\u7528render \u76f4\u63a5\u52a0\u8f7d\u5e76\u54cd\u5e94\u6a21\u677f return render ( request , \"name\" ) \u6a21\u677f\u7684\u8bed\u6cd5 \u00b6 \u53d8\u91cf \u00b6 \u4f5c\u7528\uff1a \u5c06\u540e\u7aef\u7684\u6570\u636e\u4f20\u9012\u5230\u6a21\u677f\u4e0a\u8fdb\u884c\u663e\u793a\u3002 \u6570\u636e\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32, \u6574\u6570, \u5217\u8868, \u5143\u7956, \u5b57\u5178, \u51fd\u6570\u5bf9\u8c61\u3002 \u8bed\u6cd5\u89c4\u8303\uff1a\u53d8\u91cf\u5fc5\u987b\u8981\u5c01\u88c5\u5230\u5b57\u5178\u4e2d\u53c2\u80fd\u4f20\u9012\u7ed9\u6a21\u677f\u3002 # views.py def var ( request ): context = { 'name' : '\u738b\u8001\u5e08' , 'age' : 30 , 'gender' : '\u7537' , \"message\" : '\u5929\u4e0b\u6ca1\u6709\u5403\u4e0d\u6563\u7684\u5bb4\u5e2d' , 'tuple' : ( '\u738b\u8001\u5e08' , 'MrRang' , 'Rap Wang' ), 'list' : [ '!!!!!' , '@@@@@' , '#####' ], 'dic' : { 'bj' : '\u5317\u4eac' , 'sy' : '\u6c88\u9633' , 'cc' : '\u957f\u6625' , }, 'show_message' : show_message , 'dog' : Dog ( name = '\u65fa\u8d22' ), 'lst' : [ 1 , 2 , 3 , 4 , 5 , 6 ] } return render ( request , \"two_day/var.html\" , context ) #var.html < ! DOCTYPE html > < html > < head > < meta charset = \"UTF-8\" > < title > \u53d8\u91cf\u6f14\u793a </ title > </ head > < body > { % comment \"\u6ce8\u91caname\" % } < h3 > \u559c\u6b22\u7684\u4e00\u53e5\u8bdd : {{ message }} </ h3 > { % endcomment % } < h3 > \u59d3\u540d \uff1a {{ name }} </ h3 > < h3 > \u5e74\u9f84 \uff1a {{ age }} </ h3 > < h3 > \u6027\u522b \uff1a {{ gender }} </ h3 > < h3 > tuple [ 0 ]: {{ tuple . 0 }} </ h3 > < h3 > tuple [ 1 ]: {{ tuple . 1 }} </ h3 > < h3 > tuple [ 2 ]: {{ tuple . 2 }} </ h3 > < h3 > list [ 0 ]: {{ list . 0 }} </ h3 > < h3 > {{ dic . bj }} </ h3 > < h3 > {{ show_message }} </ h3 > < h3 > {{ dog . name }} </ h3 > < h3 > {{ dog . age }} </ h3 > < h3 > {{ dog . eat }} </ h3 > { % for l in list % } { % if forloop . first % } < h2 style = \"background: red;\" > { % elif forloop . last % } < h2 style = \"background-color: yellow;\" > { % else % } < h2 style = \"background-color: pink;\" > { % endif % } < p > \u59d3\u540d {{ l }} </ p > < p > counter : {{ forloop . counter }} </ p > < p > counter0 : {{ forloop . counter0 }} </ p > < p > revcounter : {{ forloop . revcounter }} </ p > < p > revcounter0 : {{ forloop . revcounter0 }} </ p > </ h2 > { % endfor % } { % for l in lst % } { % if forloop . counter | divisibleby : \"2\" % } < p style = \"background-color: red\" > {{ l }} </ p > { % else % } < p > {{ l }} </ p > { % endif % } { % endfor % } </ body > </ html > \u6807\u7b7e \u00b6 \u4f5c\u7528\uff1a\u5c06\u670d\u52a1\u5668\u7684\u529f\u80fd\u5d4c\u5165\u5230\u6a21\u677f\u4e2d\u3002 \u8bed\u6cd5\uff1a { % \u6807\u7b7e\u540d % } { % end\u6807\u7b7e\u540d % } \u5e38\u7528\u7684\u6807\u7b7e if { % if % } { % elif % } { % else % } { % endif % } for { % for \u53d8\u91cf in iterable % } { % endfor % } \u5185\u7f6e\u53d8\u91cf forloop \u5728\u5faa\u73af\u4e2d\u5141\u8bb8\u4f7f\u7528forloop\u5185\u7f6e\u53d8\u91cf\u6765\u83b7\u53d6\u5faa\u73af\u7684\u4fe1\u606f forloop . counter : \u8bb0\u5f55\u5f53\u524d\u5faa\u73af\u904d\u5386\u7684\u6b21\u6570 forloop . counter0 : \u8bb0\u5f55\u5f53\u524d\u5faa\u73af\u904d\u5386\u7684\u6b21\u6570 \uff0c \u4ece0\u5f00\u59cb forloop . revcounter : \u8bb0\u5f55\u5f53\u524d\u5143\u7d20\u4ece\u540e\u5411\u524d\u7b97\u7684\u4f4d\u7f6e forloop . revcounter0 : \u8bb0\u5f55\u5f53\u524d\u5143\u7d20\u4ece\u540e\u5411\u524d\u7b97\u7684 forloop . first : \u5224\u65ad\u662f\u5426\u662f\u7b2c\u4e00\u6b21\u7684\u5faa\u73af forloop . last : \u5224\u65ad\u662f\u5426\u662f\u6700\u540e\u4e00\u6b21\u7684\u5faa\u73af \u8fc7\u6ee4\u5668 \u00b6 \u4f5c\u7528\uff1a \u5728\u53d8\u91cf\u8f93\u51fa\u4e4b\u524d\uff0c\u5bf9\u53d8\u91cf\u7684\u6570\u636e\u8fdb\u884c\u7b5b\u9009\u548c\u8fc7\u6ee4 \u3002 \u8bed\u6cd5\uff1a {{ \u53d8\u91cf|\u8fc7\u6ee4\u5668:\u53c2\u6570 }} \u5e38\u7528\u8fc7\u6ee4\u5668: \u200b (\u5176\u4ed6\u9700\u6c42\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u8fc7\u6ee4\u5668) {{ value | upper }} \u5c06value\u8f6c\u4e3a\u5927\u5199 {{ value | lower }} \u5c06value\u8f6c\u4e3a\u5c0f\u5199 {{ value | add : num }} \u5c06num\u8ffd\u52a0\u5230value\u4e4b\u540e , value \u548c num \u53ef\u4ee5\u662f\u5217\u8868 {{ value | truncatechars : n }} \u5c06value\u622a\u53d6n\u4e3a\u5b57\u7b26 \uff0c \u540e\u9762\u4ee5 ... \u6765\u663e\u793a \u9759\u6001\u6587\u4ef6\u7684\u5904\u7406 \u00b6 \u5b9a\u4e49\uff1a\u65e0\u6cd5\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u52a8\u6001\u4ea4\u4e92\u7684\u6587\u4ef6\u3002 django\u4e2d\u9759\u6001\u6587\u4ef6\u7684\u5904\u7406\uff1a\u5728 setting.py \u4e2d\u8bbe\u7f6e\u6709\u5173\u9759\u6001\u6587\u4ef6\u7684\u4fe1\u606f \u8bbe\u7f6e\u9759\u6001\u6587\u4ef6\u7684\u8bbf\u95ee\u8def\u5f84 \u5728\u6d4f\u89c8\u5668\u4e2d\u901a\u8fc7\u90a3\u4e2a\u5730\u5740\u80fd\u591f\u627e\u5230\u9759\u6001\u6587\u4ef6 STATIC_URL = '/static/' \u5982\u679c\u8bbf\u95ee\u8def\u5f84\u662f http://localhost:8000/static/ ...\uff0c\u4e00\u5f8b\u90fd\u6309\u7167\u9759\u6001\u6587\u4ef6\u7684\u65b9\u5f0f\u53bb\u67e5\u627e\uff0c\u4e0d\u7ecf\u8fc7\u8def\u7531 \u8bbe\u7f6e\u9759\u6001\u6587\u4ef6\u7684\u5b58\u50a8\u8def\u5f84 \u6307\u5b9a\u9759\u6001\u6587\u4ef6\u8981\u4fdd\u5b58\u5728\u670d\u52a1\u5668\u4e0a\u54ea\u4e2a\u76ee\u5f55\u5904 STATICFILES_DIRS = ( os . path . join ( BASE_DIR , 'static' ),) \u9759\u6001\u6587\u4ef6\u76ee\u5f55\u7684\u5b58\u653e\u4f4d\u7f6e : \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u53bb\u521b\u5efa\u4e00\u4e2astatic\uff0c\u7528\u6765\u4fdd\u5b58\u9759\u6001\u6587\u4ef6 \u8bbf\u95ee\u9759\u6001\u6587\u4ef6 \u76f4\u63a5\u4f7f\u7528\u9759\u6001\u6587\u4ef6\u8bbf\u95ee\u8def\u5f84\u8fdb\u884c\u8bbf\u95ee http://localhost:8000/static/ ... \u4f7f\u7528{% static %} \u8bbf\u95ee\u9759\u6001\u8d44\u6e90 \u5728\u4f7f\u7528\u4e4b\u524d\u9700\u8981\u901a\u8fc7{% load static %} \u52a0\u8f7dstatic \u4f7f\u7528\u9759\u6001\u8d44\u6e90\u65f6: <img src=\"{% static \"images/1.jpg\" %}\"> \u6a21\u677f\u7684\u7ee7\u627f \u00b6 \u4f5c\u7528\uff1a\u4e0d\u540c\u7684\u6a21\u677fblock\u6807\u7b7e\u91cc\u5185\u5bb9\u6709\u5dee\u522b\uff0c\u4e0d\u5728block\u91cc\u7684\u5185\u5bb9\u539f\u6837\u8f93\u51fa\uff0c\u53c2\u6570\u7c7b\u7ee7\u627f\u5c31\u660e\u767d\u4e86\u3002 \u7ee7\u627f\u8bed\u6cd5\uff1a # \u7236\u6a21\u677f { % block \u540d\u79f0 % } { % endblock % } # \u5b50\u6a21\u677f { % extends \"\u7236\u6a21\u677f\u7684\u540d\u79f0\" % } \u53cd\u5411\u89e3\u6790: \u8def\u7531\u5339\u914d\u662f\u901a\u8fc7url\u627e\u5bf9\u5e94\u7684\u8bd5\u56fe\u51fd\u6570\uff0c\u53cd\u5411\u89e3\u6790\u5219\u76f8\u53cd\u3002 # \u6a21\u677f\u91cc\u7684\u53cd\u5411\u89e3\u6790 { % url \"name\" \"arg\" \"\" % } # \u89c6\u56fe\u91cc\u7684\u53cd\u5411\u89e3\u6790 reverse ( name , agrs = ( arg1 , arg2 ))","title":"5. django\u4e2d\u7684\u6a21\u677f"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#django-templates","text":"","title":"django \u4e2d\u7684\u6a21\u677f\uff0cTemplates"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#_1","text":"\u6a21\u677f\u5c31\u662f\u8981\u52a8\u6001\u5448\u73b0\u7ed9\u7528\u6237\u7684\u7f51\u9875 \u6a21\u677f\u7684\u672c\u8d28\u5c31\u662f\u7f51\u9875\uff0c\u524d\u540e\u7aef\uff0c \u52a8\u9759\u7ed3\u5408\u7684\u7f51\u9875 django\u4e2d\u7684\u6a21\u677f\u5f15\u64ce\u662f\u7531django\u81ea\u5df1\u63d0\u4f9b\u7684\uff0c\u800c\u5e76\u975eJinja2\uff0c\u6240\u4ee5Django\u4e2d\u7684\u6a21\u677f\u7684\u8bed\u6cd5\u4e0eflask(Jinja2)\u7684\u8bed\u6cd5\u4f1a\u7a0d\u6709\u4e0d\u540c","title":"\u6a21\u677f\u7684\u5b9a\u4e49"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#django","text":"\u5728setting.py\u4e2d\u8bbe\u7f6e TEMPLATES \u7684\u53d8\u91cf TEMPLATES = [ { 'BACKEND' : 'django.template.backends.django.DjangoTemplates' , 'DIRS' : [], 'APP_DIRS' : True , 'OPTIONS' : { 'context_processors' : [ 'django.template.context_processors.debug' , 'django.template.context_processors.request' , 'django.contrib.auth.context_processors.auth' , 'django.contrib.messages.context_processors.messages' , ], }, }, ] \u53c2\u6570\u8bf4\u660e BACKEND \uff1a \u6307\u5b9a\u4f7f\u7528\u7684\u6a21\u677f\u7684\u5f15\u64ce DIRS \uff1a \u6307\u5b9a\u6a21\u677f\u7684\u5b58\u653e\u76ee\u5f55\u4eec\uff0c\u4e00\u822c\u7528\u6839\u76ee\u5f55\u4e0b\u7684\u8fd9\u79cd\uff08\u7b2c\u4e00\u79cd\uff09 # \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u7684templates\u76ee\u5f55\u4e2d\u5b58\u653e\u6240\u6709\u6a21\u677f DIRS = [ os . path . join ( BASE_DIR , 'templates' )] # \u5728\u9879\u76ee\u7684index\u5e94\u7528\u4e2d\u7684temp\u76ee\u5f55\u4e2d\u5b58\u653e\u6a21\u677f\uff0c\u4ee5\u53ca\u5728\u9879\u76ee\u7684music\u5e94\u7528\u4e2d\u7684temp\u76ee\u5f55\u4e2d\u5b58\u653e\u6a21\u677f DIRS = [ 'index.temp' , 'music.temp' ] APP_DIRS \uff1a \u8868\u793a\u662f\u5426\u81ea\u52a8\u641c\u7d22\u5e94\u7528\u4e2d\u7684\u76ee\u5f55 \uff0c True: \u8868\u793a\u8981\u81ea\u52a8\u641c\u7d22\u5e94\u7528\u4e2d\u7684templates\u7684\u76ee\u5f55\u3002","title":"Django\u6a21\u677f\u7684\u8bbe\u7f6e"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#_2","text":"\u901a\u8fc7loader \u5bf9\u8c61\u83b7\u53d6\u6a21\u677f\uff0c\u518d\u901a\u8fc7HttpResponse\u8fdb\u884c\u54cd\u5e94 # \u5148\u5bfc\u5165loader # \u901a\u8fc7loader\u52a0\u8f7d\u6a21\u677f # \u5c06\u52a0\u8f7d\u597d\u7684\u6a21\u677f\u6e32\u67d3\u6210\u5b57\u7b26\u4e32 # \u901a\u8fc7HttpResponse \u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u54cd\u5e94 from django.template import loader def index_view ( self , request , * args , ** kwargs ): template = loader . get_template ( 'index.html' ) template = template . render () return HttpResponse ( template ) \u4f7f\u7528render \u76f4\u63a5\u52a0\u8f7d\u5e76\u54cd\u5e94\u6a21\u677f return render ( request , \"name\" )","title":"\u6a21\u677f\u7684\u52a0\u8f7d\u65b9\u5f0f"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#_3","text":"","title":"\u6a21\u677f\u7684\u8bed\u6cd5"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#_4","text":"\u4f5c\u7528\uff1a \u5c06\u540e\u7aef\u7684\u6570\u636e\u4f20\u9012\u5230\u6a21\u677f\u4e0a\u8fdb\u884c\u663e\u793a\u3002 \u6570\u636e\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32, \u6574\u6570, \u5217\u8868, \u5143\u7956, \u5b57\u5178, \u51fd\u6570\u5bf9\u8c61\u3002 \u8bed\u6cd5\u89c4\u8303\uff1a\u53d8\u91cf\u5fc5\u987b\u8981\u5c01\u88c5\u5230\u5b57\u5178\u4e2d\u53c2\u80fd\u4f20\u9012\u7ed9\u6a21\u677f\u3002 # views.py def var ( request ): context = { 'name' : '\u738b\u8001\u5e08' , 'age' : 30 , 'gender' : '\u7537' , \"message\" : '\u5929\u4e0b\u6ca1\u6709\u5403\u4e0d\u6563\u7684\u5bb4\u5e2d' , 'tuple' : ( '\u738b\u8001\u5e08' , 'MrRang' , 'Rap Wang' ), 'list' : [ '!!!!!' , '@@@@@' , '#####' ], 'dic' : { 'bj' : '\u5317\u4eac' , 'sy' : '\u6c88\u9633' , 'cc' : '\u957f\u6625' , }, 'show_message' : show_message , 'dog' : Dog ( name = '\u65fa\u8d22' ), 'lst' : [ 1 , 2 , 3 , 4 , 5 , 6 ] } return render ( request , \"two_day/var.html\" , context ) #var.html < ! DOCTYPE html > < html > < head > < meta charset = \"UTF-8\" > < title > \u53d8\u91cf\u6f14\u793a </ title > </ head > < body > { % comment \"\u6ce8\u91caname\" % } < h3 > \u559c\u6b22\u7684\u4e00\u53e5\u8bdd : {{ message }} </ h3 > { % endcomment % } < h3 > \u59d3\u540d \uff1a {{ name }} </ h3 > < h3 > \u5e74\u9f84 \uff1a {{ age }} </ h3 > < h3 > \u6027\u522b \uff1a {{ gender }} </ h3 > < h3 > tuple [ 0 ]: {{ tuple . 0 }} </ h3 > < h3 > tuple [ 1 ]: {{ tuple . 1 }} </ h3 > < h3 > tuple [ 2 ]: {{ tuple . 2 }} </ h3 > < h3 > list [ 0 ]: {{ list . 0 }} </ h3 > < h3 > {{ dic . bj }} </ h3 > < h3 > {{ show_message }} </ h3 > < h3 > {{ dog . name }} </ h3 > < h3 > {{ dog . age }} </ h3 > < h3 > {{ dog . eat }} </ h3 > { % for l in list % } { % if forloop . first % } < h2 style = \"background: red;\" > { % elif forloop . last % } < h2 style = \"background-color: yellow;\" > { % else % } < h2 style = \"background-color: pink;\" > { % endif % } < p > \u59d3\u540d {{ l }} </ p > < p > counter : {{ forloop . counter }} </ p > < p > counter0 : {{ forloop . counter0 }} </ p > < p > revcounter : {{ forloop . revcounter }} </ p > < p > revcounter0 : {{ forloop . revcounter0 }} </ p > </ h2 > { % endfor % } { % for l in lst % } { % if forloop . counter | divisibleby : \"2\" % } < p style = \"background-color: red\" > {{ l }} </ p > { % else % } < p > {{ l }} </ p > { % endif % } { % endfor % } </ body > </ html >","title":"\u53d8\u91cf"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#_5","text":"\u4f5c\u7528\uff1a\u5c06\u670d\u52a1\u5668\u7684\u529f\u80fd\u5d4c\u5165\u5230\u6a21\u677f\u4e2d\u3002 \u8bed\u6cd5\uff1a { % \u6807\u7b7e\u540d % } { % end\u6807\u7b7e\u540d % } \u5e38\u7528\u7684\u6807\u7b7e if { % if % } { % elif % } { % else % } { % endif % } for { % for \u53d8\u91cf in iterable % } { % endfor % } \u5185\u7f6e\u53d8\u91cf forloop \u5728\u5faa\u73af\u4e2d\u5141\u8bb8\u4f7f\u7528forloop\u5185\u7f6e\u53d8\u91cf\u6765\u83b7\u53d6\u5faa\u73af\u7684\u4fe1\u606f forloop . counter : \u8bb0\u5f55\u5f53\u524d\u5faa\u73af\u904d\u5386\u7684\u6b21\u6570 forloop . counter0 : \u8bb0\u5f55\u5f53\u524d\u5faa\u73af\u904d\u5386\u7684\u6b21\u6570 \uff0c \u4ece0\u5f00\u59cb forloop . revcounter : \u8bb0\u5f55\u5f53\u524d\u5143\u7d20\u4ece\u540e\u5411\u524d\u7b97\u7684\u4f4d\u7f6e forloop . revcounter0 : \u8bb0\u5f55\u5f53\u524d\u5143\u7d20\u4ece\u540e\u5411\u524d\u7b97\u7684 forloop . first : \u5224\u65ad\u662f\u5426\u662f\u7b2c\u4e00\u6b21\u7684\u5faa\u73af forloop . last : \u5224\u65ad\u662f\u5426\u662f\u6700\u540e\u4e00\u6b21\u7684\u5faa\u73af","title":"\u6807\u7b7e"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#_6","text":"\u4f5c\u7528\uff1a \u5728\u53d8\u91cf\u8f93\u51fa\u4e4b\u524d\uff0c\u5bf9\u53d8\u91cf\u7684\u6570\u636e\u8fdb\u884c\u7b5b\u9009\u548c\u8fc7\u6ee4 \u3002 \u8bed\u6cd5\uff1a {{ \u53d8\u91cf|\u8fc7\u6ee4\u5668:\u53c2\u6570 }} \u5e38\u7528\u8fc7\u6ee4\u5668: \u200b (\u5176\u4ed6\u9700\u6c42\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\uff0c\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u8fc7\u6ee4\u5668) {{ value | upper }} \u5c06value\u8f6c\u4e3a\u5927\u5199 {{ value | lower }} \u5c06value\u8f6c\u4e3a\u5c0f\u5199 {{ value | add : num }} \u5c06num\u8ffd\u52a0\u5230value\u4e4b\u540e , value \u548c num \u53ef\u4ee5\u662f\u5217\u8868 {{ value | truncatechars : n }} \u5c06value\u622a\u53d6n\u4e3a\u5b57\u7b26 \uff0c \u540e\u9762\u4ee5 ... \u6765\u663e\u793a","title":"\u8fc7\u6ee4\u5668"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#_7","text":"\u5b9a\u4e49\uff1a\u65e0\u6cd5\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u52a8\u6001\u4ea4\u4e92\u7684\u6587\u4ef6\u3002 django\u4e2d\u9759\u6001\u6587\u4ef6\u7684\u5904\u7406\uff1a\u5728 setting.py \u4e2d\u8bbe\u7f6e\u6709\u5173\u9759\u6001\u6587\u4ef6\u7684\u4fe1\u606f \u8bbe\u7f6e\u9759\u6001\u6587\u4ef6\u7684\u8bbf\u95ee\u8def\u5f84 \u5728\u6d4f\u89c8\u5668\u4e2d\u901a\u8fc7\u90a3\u4e2a\u5730\u5740\u80fd\u591f\u627e\u5230\u9759\u6001\u6587\u4ef6 STATIC_URL = '/static/' \u5982\u679c\u8bbf\u95ee\u8def\u5f84\u662f http://localhost:8000/static/ ...\uff0c\u4e00\u5f8b\u90fd\u6309\u7167\u9759\u6001\u6587\u4ef6\u7684\u65b9\u5f0f\u53bb\u67e5\u627e\uff0c\u4e0d\u7ecf\u8fc7\u8def\u7531 \u8bbe\u7f6e\u9759\u6001\u6587\u4ef6\u7684\u5b58\u50a8\u8def\u5f84 \u6307\u5b9a\u9759\u6001\u6587\u4ef6\u8981\u4fdd\u5b58\u5728\u670d\u52a1\u5668\u4e0a\u54ea\u4e2a\u76ee\u5f55\u5904 STATICFILES_DIRS = ( os . path . join ( BASE_DIR , 'static' ),) \u9759\u6001\u6587\u4ef6\u76ee\u5f55\u7684\u5b58\u653e\u4f4d\u7f6e : \u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u53bb\u521b\u5efa\u4e00\u4e2astatic\uff0c\u7528\u6765\u4fdd\u5b58\u9759\u6001\u6587\u4ef6 \u8bbf\u95ee\u9759\u6001\u6587\u4ef6 \u76f4\u63a5\u4f7f\u7528\u9759\u6001\u6587\u4ef6\u8bbf\u95ee\u8def\u5f84\u8fdb\u884c\u8bbf\u95ee http://localhost:8000/static/ ... \u4f7f\u7528{% static %} \u8bbf\u95ee\u9759\u6001\u8d44\u6e90 \u5728\u4f7f\u7528\u4e4b\u524d\u9700\u8981\u901a\u8fc7{% load static %} \u52a0\u8f7dstatic \u4f7f\u7528\u9759\u6001\u8d44\u6e90\u65f6: <img src=\"{% static \"images/1.jpg\" %}\">","title":"\u9759\u6001\u6587\u4ef6\u7684\u5904\u7406"},{"location":"django/5_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E6%9D%BF/#_8","text":"\u4f5c\u7528\uff1a\u4e0d\u540c\u7684\u6a21\u677fblock\u6807\u7b7e\u91cc\u5185\u5bb9\u6709\u5dee\u522b\uff0c\u4e0d\u5728block\u91cc\u7684\u5185\u5bb9\u539f\u6837\u8f93\u51fa\uff0c\u53c2\u6570\u7c7b\u7ee7\u627f\u5c31\u660e\u767d\u4e86\u3002 \u7ee7\u627f\u8bed\u6cd5\uff1a # \u7236\u6a21\u677f { % block \u540d\u79f0 % } { % endblock % } # \u5b50\u6a21\u677f { % extends \"\u7236\u6a21\u677f\u7684\u540d\u79f0\" % } \u53cd\u5411\u89e3\u6790: \u8def\u7531\u5339\u914d\u662f\u901a\u8fc7url\u627e\u5bf9\u5e94\u7684\u8bd5\u56fe\u51fd\u6570\uff0c\u53cd\u5411\u89e3\u6790\u5219\u76f8\u53cd\u3002 # \u6a21\u677f\u91cc\u7684\u53cd\u5411\u89e3\u6790 { % url \"name\" \"arg\" \"\" % } # \u89c6\u56fe\u91cc\u7684\u53cd\u5411\u89e3\u6790 reverse ( name , agrs = ( arg1 , arg2 ))","title":"\u6a21\u677f\u7684\u7ee7\u627f"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/","text":"Django\u4e2d\u7684\u6a21\u578b \u00b6 ORM \u00b6 \u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\uff08Object Relational Mapping\uff09\uff1a\u901a\u8fc7\u4f7f\u7528\u63cf\u8ff0\u5bf9\u8c61\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u6620\u5c04\u7684\u5143\u6570\u636e\uff0c\u5c06\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7a0b\u5e8f\u4e2d\u7684\u5bf9\u8c61\u81ea\u52a8\u6301\u4e45\u5316\u5230\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u3002 \u6620\u5c04\u5173\u7cfb model db \u5b9e\u4f53\u7c7b \u8868\u540d \u7c7b\u5c5e\u6027 \u8868\u5b57\u6bb5 \u7c7b\u5b9e\u4f8b \u8868\u8bb0\u5f55 \u6570\u636e\u5e93\u914d\u7f6e \u00b6 \u5728 setting.py \u4e2d\u914d\u7f6e\u6570\u636e\u5e93\u4fe1\u606f DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'db_name' , 'USER' : 'root' , 'PASSWORD' : '123456' , 'HOST' : '127.0.0.1' , 'PORT' : 3306 , } } \u53c2\u6570\u8bf4\u660e\uff1a ENGINE \uff1a # \u53ef\u9009\u503c\u6709\uff0c\u5206\u522b\u5bf9\u5e94\u4e0d\u540c\u7684\u6570\u636e\u5e93 django.db.backends.sqlite3 django.db.backends.postgresql django.db.backends.mysql django.db.backends.oracle NAME \uff1a\u6570\u636e\u5e93\u7684\u540d\u79f0\u3002\u5982\u679c\u4f7f\u7528\u7684\u662f SQLite\uff0c\u6570\u636e\u5e93\u5c06\u662f\u4f60\u7535\u8111\u4e0a\u7684\u4e00\u4e2a\u6587\u4ef6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c NAME \u5e94\u8be5\u662f\u6b64\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u5305\u62ec\u6587\u4ef6\u540d\u3002 \u5982\u679c\u4f60\u4e0d\u4f7f\u7528 SQLite\uff0c\u5219\u5fc5\u987b\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u8bbe\u7f6e\uff0c\u6bd4\u5982 USER \u3001 PASSWORD \u3001 HOST \u7b49\u7b49\u3002 \u60f3\u4e86\u89e3\u66f4\u591a\u6570\u636e\u5e93\u8bbe\u7f6e\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u8bf7\u770b\u6587\u6863\uff1a DATABASES \u521b\u5efa\u6a21\u578b \u00b6 \u8bed\u6cd5\uff1a class ModelName ( models . Model ): \u5c5e\u6027\u540d = models . \u5b57\u6bb5\u7c7b\u578b ( \u5b57\u6bb5\u9009\u9879 ) \u5b57\u6bb5\u7c7b\u578b: \u200b \u5206\u522b\u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7c7b\u578b CharField () varchar () EmailField () varchar () URLField () varchar () ImageField () varchar () IntegerField () int FloatField () float DecimalField () decimal BolleanField () boolean DateField () data DateTimeField () datetime TextField () text \u5b57\u6bb5\u9009\u9879: 1. default 2. null: True \u6216 False 3. db_column: \u6307\u5b9a\u5217\u540d 4. db_index: True \u6216 False \u521b\u5efa\u7d22\u5f15 5. max_length: \u6700\u5927\u957f\u5ea6 # models.py from django.db import models from django.db.models import CharField class TestModel ( models . Model ): name = CharField ( max_length = 50 ) \u521b\u5efa\u597d\u6a21\u578b\u4e4b\u540e\u9700\u8981\u540c\u6b65\u6570\u636e\u5e93 \u00b6 # 1. \u5c06models.py\u4e2d\u7684\u5185\u5bb9\u751f\u6210\u4e2d\u95f4\u6587\u4ef6 python manage . py makemigrations # 2. \u5c06\u4e2d\u95f4\u6587\u4ef6\u6620\u5c04\u5230\u6570\u636e\u5e93\u4e2d python manage . py migrate \u6267\u884c\u5b8c\u7b2c\u4e00\u6761\u4e4b\u540e\u4f1a\u53d1\u73b0\u5e94\u7528\u76ee\u5f55\u4e0b\u591a\u4e86\u4e00\u4e2a\u4e2d\u95f4\u6587\u4ef6\u3002(\u9047\u5230\u95ee\u9898\u53ef\u4ee5\u770b\u8fd9\u7bc7\u6587\u7ae0\uff1a https://kongping.net/blog/post/5538/ ) \u6b64\u65f6\u53ea\u662f\u751f\u6210\u4e86\u4e2d\u95f4\u6587\u4ef6\uff0c\u6570\u636e\u5e93\u4e2d\u662f\u6ca1\u6709\u8868\u7684\uff08\u56e0\u4e3a\u8fd8\u6ca1\u6709\u540c\u6b65\u5230\u6570\u636e\u5e93\uff09 \u6267\u884c\u7b2c\u4e8c\u6761\u8bed\u53e5\uff1apython manage.py migrate \u6210\u529f\u540c\u6b65\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u770b\u4e0b\u56fe\u3002 tips: \u6bcf\u6b21\u4fee\u6539\u6a21\u578b\u90fd\u8981\u540c\u6b65\u4e00\u4e0b\uff01 \u7248\u672c\u7684\u5207\u6362\u6307\u4ee4 \u00b6 0001-initial.py 0002-xxxx.py 0003-xxxx.py python manage.py migrate \u5e94\u7528\u7684\u540d\u79f0 \u7248\u672c\u53f7 \u6a21\u578b\u4e2d\u7684CRUD (create read update delete) \u00b6 \u589e\u52a0\u6570\u636e create \u00b6 Entry.objects.create(\u5c5e\u6027=\u503c\uff0c\u5c5e\u6027=\u503c) \u8fd4\u56de\u503c \u200b \u63d2\u5165\u6210\u529f\uff1a\u8fd4\u56de\u521b\u5efa\u597d\u7684\u5b9e\u4f53\u5bf9\u8c61 \u200b \u63d2\u5165\u5931\u8d25\uff1a\u8fd4\u56deNone\uff0c\u4ea7\u751f\u5f02\u5e38 \u521b\u5efa\u4e00\u4e2aEntry\u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7save()\u8fdb\u884c\u4fdd\u5b58 obj = Entry(\u5c5e\u6027=\u503c, \u5c5e\u6027=\u503c) obj.\u5c5e\u6027 = \u503c obj.save() \u65e0\u8fd4\u56de\u503c\uff0c\u4fdd\u5b58\u6210\u529f\u540e\uff0cobj\u4f1a\u88ab\u91cd\u65b0\u8d4b\u503c**(obj\u591a\u4e86\u4e00\u4e2aid\u5c5e\u6027)** def index_view ( request ): obj = TestModel () obj . name = 'xxx' print ( obj . id ) obj . save () print ( obj . id ) return HttpResponse ( 'index' ) # \u6267\u884c\u7ed3\u679c None 1 \u67e5\u8be2\u6570\u636e read \u00b6 \u901a\u8fc7Entry.objects \u8c03\u7528\u67e5\u8be2\u63a5\u53e3\u51fd\u6570 Entry.objects \u63d0\u4f9b\u4e86\u5bf9\u8be5\u5b9e\u4f53\u7684\u6240\u6709\u7684\u6570\u636e\u7684\u67e5\u8be2 \u83b7\u53d6\u6240\u6709\u67e5\u8be2\u7ed3\u679c\u7684\u65b9\u6cd5 \u65b9\u6cd5\uff1a all() Enrty . objects . all () \u8fd4\u56de\uff1aQuerySet(\u67e5\u8be2\u7ed3\u679c\u96c6\uff0c\u672c\u8d28\u662f\u4e00\u4e2a\u5c01\u88c5\u4e86\u82e5\u5e72\u5bf9\u8c61\u7684\u5217\u8868) \u67e5\u8be2\u8fd4\u56de\u6307\u5b9a\u5217 \u65b9\u6cd5\uff1a values() \u6216 values('\u5217\u540d1', '\u5217\u540d2') \u4f5c\u7528\uff1a \u67e5\u8be2\u8868\u4e2d\u6570\u636e\u7684\u90e8\u5206\u5217\uff0c\u5c01\u88c5\u5230\u5b57\u5178\u4e2d\uff0c\u518d\u5c01\u88c5\u5230QuerySet\u4e2d \u8fd4\u56de\uff1aQuerySet(\u67e5\u8be2\u7ed3\u679c\u96c6\uff0c\u672c\u8d28\u662f\u4e00\u4e2a\u5c01\u88c5\u4e86\u82e5\u5e72\u5b57\u6bb5\u7684\u5217\u8868) \u67e5\u8be2\u8fd4\u56de\u6307\u5b9a\u5217 \u65b9\u6cd5: values_list() \u4f5c\u7528\uff1a\u5c06\u6570\u636e\u5c01\u88c5\u5230\u5143\u7ec4\u4e2d\u518d\u5c01\u88c5\u5230\u5217\u8868\u4e2d \u6392\u5e8f\u65b9\u6cd5 \u65b9\u6cd5\uff1a order_by() \u8bed\u6cd5\uff1a Entry.objects.order_by('col1', '-col2') \u9ed8\u8ba4\u662f\u5347\u5e8f\u6392\u5e8f\uff0c\u5217\u540d\u524d\u52a0-\uff0c\u5219\u8868\u793a\u964d\u5e8f\u6392\u5e8f \u67e5\u8be2\u53ea\u8fd4\u56de\u4e00\u6761\u6570\u636e \u65b9\u6cd5\uff1a get(\u6761\u4ef6) \u8fd4\u56de\uff1a\u5355\u4e2a\u5b9e\u4f53\u5bf9\u8c61 \u6ce8\u610f\uff1a \u200b \u8be5\u65b9\u6cd5\u53ea\u4f7f\u7528\u4e8e\u53ea\u80fd\u67e5\u8be2\u51fa\u4e00\u6761\u7ed3\u679c\u7684\u573a\u5408 \u200b \u5982\u679c\u67e5\u8be2\u591a\u4e8e\u4e00\u6761\u6570\u636e\u6216\u6ca1\u67e5\u8be2\u51fa\u7ed3\u679c\u90fd\u4f1a\u629b\u51fa\u5f02\u5e38 \u6839\u636e\u6761\u4ef6\u67e5\u8be2\u90e8\u5206\u884c \u65b9\u6cd5\uff1a filter(\u6761\u4ef6) \u8fd4\u56de\uff1a QuerySet # \u67e5\u8be2Author\u5b9e\u4f53\u4e2did=1\u7684\u4fe1\u606f authors = Author . objects . filter ( id = 1 ) \u975e\u7b49\u503c\u6761\u4ef6\u9700\u8981\u4f7f\u7528\u67e5\u8be2\u8c13\u8bcd Field Lookup \u8bed\u6cd5\uff1a \u200b Entry.objects.filter(\u5c5e\u6027__\u67e5\u8be2\u8c13\u8bcd=\u503c) \u6ce8\u610f\uff1a # \u6bcf\u4e2a\u67e5\u8be2\u8c13\u8bcd\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u529f\u80fd\u6761\u4ef6 __exact : \u7b49\u503c\u6761\u4ef6\u5224\u65ad __gt : \u5927\u4e8e\u6761\u4ef6\u5224\u65ad __year : \u5f97\u5230\u65e5\u671f\u4e2d\u7684\u5e74\u4efd\u518d\u8fdb\u4e00\u6b65\u5224\u65ad __contains : \u6a21\u7cca\u67e5\u8be2 ' %x xx%' __range : \u6a21\u7cca\u67e5\u8be2 between add ... ... # \u6240\u6709\u652f\u6301\u6761\u4ef6\u67e5\u8be2\u7684\u4f4d\u7f6e\u5904\u90fd\u652f\u6301\u67e5\u8be2\u8c13\u8bcd filter () get () exclude () \u5bf9\u6761\u4ef6\u53d6\u53cd \u65b9\u6cd5\uff1a exclude(\u6761\u4ef6) Author . objects . exclude ( id = 1 ) select * from author where not ( id = 1 ) \u805a\u5408\u67e5\u8be2\uff08\u4e0d\u5e26\u5206\u7ec4\uff09 \u65b9\u6cd5\uff1a aggregate(\u5217\u540d=\u805a\u5408\u51fd\u6570('\u5217')) Author . objects . aggregate ( sumAge = Avg ( 'age' )) \u805a\u5408\u51fd\u6570: 1. Avg(): \u5e73\u5747\u503c 2. Count(): \u6570\u91cf 3. Sum(): \u6c42\u548c 4. Min(): \u6c42\u6700\u5c0f\u503c 5. Max(): \u6c42\u6700\u5927\u503c \u805a\u5408\u67e5\u8be2\uff08\u5e26\u5206\u7ec4\uff09 \u65b9\u6cd5\uff1a nnotate(\u540d\u5b57=\u805a\u5408\u51fd\u6570('\u5217')) # \u6309id\u5206\u7ec4\u67e5\u8be2\u5e73\u5747\u5e74\u9f84 Author . objects . values ( 'id' ) . annotate ( avg_age = Avg ( 'age' )) \u96c6\u7ed3 where \uff0c \u5206\u7ec4\u67e5\u8be2 \uff0c having \u4e8e\u4e00\u4f53\u7684\u67e5\u8be2\u63a5\u53e3 Author . objects . filter ( id__gte = 3 ) # where\u5b50\u53e5 . values ( 'age' ) # group by . annotate ( avgAge = Avg ( 'age' )) # \u67e5\u8be2\u805a\u5408\u51fd\u6570 . filter ( avgAge__gte > 20 ) # having\u5b50\u53e5 . order_by ( '' ) # \u5b50\u53e5 \u6240\u6709\u7684\u67e5\u8be2\u63a5\u53e3\u51fd\u6570\u90fd\u53ef\u4ee5\u901a\u8fc7query\u5c5e\u6027\u6765\u5f97\u5230\u5bf9\u5e94\u7684sql\u8bed\u53e5 \u4f8b\u5982\uff1a Entry.objects.all().query \u4fee\u6539\u6570\u636e update \u00b6 \u4fee\u6539\u5355\u4e2a\u5b9e\u4f53 # \u67e5\uff0c \u6539\uff0c \u4fdd\u5b58 obj = TestModel . objects . filter ( id = 1 ) . first () obj . name = 'wwww' obj . save () \u6279\u91cf\u4fee\u6539\u6570\u636e # \u8c03\u7528QuerySet\u7684update(\u5c5e\u6027=\u503c, \u5c5e\u6027=\u503c)\u5b9e\u73b0\u6279\u91cf\u4fee\u6539 objs = TestModel . objects . all () objs . update ( name = 'xxx' ) \u5220\u9664\u6570\u636e delete \u00b6 \u8c03\u7528\u5b9e\u4f53\u5bf9\u8c61\u6216\u67e5\u8be2\u7ed3\u679c\u96c6\u7684delete()\u65b9\u6cd5\u6765\u5b8c\u6210\u5220\u9664 \u5220\u9664\u5355\u4e2a\u5bf9\u8c61 au = Author . objects . get ( id = 1 ) au . delete () \u6279\u91cf\u5220\u9664 Author . objects . all () . delete () F\u67e5\u8be2 Q\u67e5\u8be2 \u00b6 F(): \u00b6 \u4f5c\u7528\uff1a\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u67d0\u5217\u7684\u503c \u8bed\u6cd5\uff1a \u200b from django.db.models import F \u200b F('\u5217\u540d'): \u5f97\u5230\u67d0\u5217\u7684\u503c # \u628a\u6240\u6709\u7684Author\u7684age\u589e\u52a010 Author . objects . all () . update ( age = F ( 'age' ) + 10 ) Q() \u00b6 \u4f5c\u7528\uff1a\u5728\u67e5\u8be2\u6761\u4ef6\u4e2d\u53ef\u4ee5\u5b8c\u6210or\u64cd\u4f5c \u8bed\u6cd5\uff1a \u200b from django.db.models import Q \u200b Q(\u6761\u4ef61)|Q(\u6761\u4ef62) # \u67e5\u8be2id>=3 \u6216 \u5e74\u9f84\u5c0f\u4e8e60\u7684\u4fe1\u606f authors = Author . objects . filter ( Q ( id__gte = 3 ) | Q ( age__lt = 60 )) . all () \u539f\u751f\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u65b9\u6cd5 \u00b6 \u67e5\u8be2 Entry . objects . raw ( sql ) \u8fd4\u56de\u503c:QuerySet() \u589e\u5220\u6539 from django.db import connection def do_sql ( request ): with connection . curso () as cursor : sql = '...' ; cursor . execute ( sql ) # \u5f71\u54cd\u7684\u884c\u6570 return xx \u81ea\u5b9a\u4e49\u67e5\u8be2\u5bf9\u8c61 - objects \u00b6 objects \u7684 \u5c5e\u6027\u7684\u7c7b\u578b\u4e3a models.Manager \u58f0\u660e EntryManager \u7c7b\uff0c\u7ee7\u627f\u81eamodels.Manager, \u5141\u8bb8\u5728 EntryManager \u4e2d\u589e\u52a0\u81ea\u5b9a\u4e49\u51fd\u6570 class EntryManager ( models . Manager ): def \u51fd\u6570\u540d ( self ): ... ... return ... \u4f7f\u7528\u7ed9EntryManager \u8986\u76d6Models\u7c7b\u4e2d\u8986\u76d6\u539f\u6709\u7684objects class Entry ( models . Model ): objects = EntryManager ()","title":"6. django\u4e2d\u7684\u6a21\u578b"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#django","text":"","title":"Django\u4e2d\u7684\u6a21\u578b"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#orm","text":"\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\uff08Object Relational Mapping\uff09\uff1a\u901a\u8fc7\u4f7f\u7528\u63cf\u8ff0\u5bf9\u8c61\u548c\u6570\u636e\u5e93\u4e4b\u95f4\u6620\u5c04\u7684\u5143\u6570\u636e\uff0c\u5c06\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7a0b\u5e8f\u4e2d\u7684\u5bf9\u8c61\u81ea\u52a8\u6301\u4e45\u5316\u5230\u5173\u7cfb\u6570\u636e\u5e93\u4e2d\u3002 \u6620\u5c04\u5173\u7cfb model db \u5b9e\u4f53\u7c7b \u8868\u540d \u7c7b\u5c5e\u6027 \u8868\u5b57\u6bb5 \u7c7b\u5b9e\u4f8b \u8868\u8bb0\u5f55","title":"ORM"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#_1","text":"\u5728 setting.py \u4e2d\u914d\u7f6e\u6570\u636e\u5e93\u4fe1\u606f DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , 'NAME' : 'db_name' , 'USER' : 'root' , 'PASSWORD' : '123456' , 'HOST' : '127.0.0.1' , 'PORT' : 3306 , } } \u53c2\u6570\u8bf4\u660e\uff1a ENGINE \uff1a # \u53ef\u9009\u503c\u6709\uff0c\u5206\u522b\u5bf9\u5e94\u4e0d\u540c\u7684\u6570\u636e\u5e93 django.db.backends.sqlite3 django.db.backends.postgresql django.db.backends.mysql django.db.backends.oracle NAME \uff1a\u6570\u636e\u5e93\u7684\u540d\u79f0\u3002\u5982\u679c\u4f7f\u7528\u7684\u662f SQLite\uff0c\u6570\u636e\u5e93\u5c06\u662f\u4f60\u7535\u8111\u4e0a\u7684\u4e00\u4e2a\u6587\u4ef6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c NAME \u5e94\u8be5\u662f\u6b64\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u5305\u62ec\u6587\u4ef6\u540d\u3002 \u5982\u679c\u4f60\u4e0d\u4f7f\u7528 SQLite\uff0c\u5219\u5fc5\u987b\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u8bbe\u7f6e\uff0c\u6bd4\u5982 USER \u3001 PASSWORD \u3001 HOST \u7b49\u7b49\u3002 \u60f3\u4e86\u89e3\u66f4\u591a\u6570\u636e\u5e93\u8bbe\u7f6e\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u8bf7\u770b\u6587\u6863\uff1a DATABASES","title":"\u6570\u636e\u5e93\u914d\u7f6e"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#_2","text":"\u8bed\u6cd5\uff1a class ModelName ( models . Model ): \u5c5e\u6027\u540d = models . \u5b57\u6bb5\u7c7b\u578b ( \u5b57\u6bb5\u9009\u9879 ) \u5b57\u6bb5\u7c7b\u578b: \u200b \u5206\u522b\u5bf9\u5e94\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7c7b\u578b CharField () varchar () EmailField () varchar () URLField () varchar () ImageField () varchar () IntegerField () int FloatField () float DecimalField () decimal BolleanField () boolean DateField () data DateTimeField () datetime TextField () text \u5b57\u6bb5\u9009\u9879: 1. default 2. null: True \u6216 False 3. db_column: \u6307\u5b9a\u5217\u540d 4. db_index: True \u6216 False \u521b\u5efa\u7d22\u5f15 5. max_length: \u6700\u5927\u957f\u5ea6 # models.py from django.db import models from django.db.models import CharField class TestModel ( models . Model ): name = CharField ( max_length = 50 )","title":"\u521b\u5efa\u6a21\u578b"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#_3","text":"# 1. \u5c06models.py\u4e2d\u7684\u5185\u5bb9\u751f\u6210\u4e2d\u95f4\u6587\u4ef6 python manage . py makemigrations # 2. \u5c06\u4e2d\u95f4\u6587\u4ef6\u6620\u5c04\u5230\u6570\u636e\u5e93\u4e2d python manage . py migrate \u6267\u884c\u5b8c\u7b2c\u4e00\u6761\u4e4b\u540e\u4f1a\u53d1\u73b0\u5e94\u7528\u76ee\u5f55\u4e0b\u591a\u4e86\u4e00\u4e2a\u4e2d\u95f4\u6587\u4ef6\u3002(\u9047\u5230\u95ee\u9898\u53ef\u4ee5\u770b\u8fd9\u7bc7\u6587\u7ae0\uff1a https://kongping.net/blog/post/5538/ ) \u6b64\u65f6\u53ea\u662f\u751f\u6210\u4e86\u4e2d\u95f4\u6587\u4ef6\uff0c\u6570\u636e\u5e93\u4e2d\u662f\u6ca1\u6709\u8868\u7684\uff08\u56e0\u4e3a\u8fd8\u6ca1\u6709\u540c\u6b65\u5230\u6570\u636e\u5e93\uff09 \u6267\u884c\u7b2c\u4e8c\u6761\u8bed\u53e5\uff1apython manage.py migrate \u6210\u529f\u540c\u6b65\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u770b\u4e0b\u56fe\u3002 tips: \u6bcf\u6b21\u4fee\u6539\u6a21\u578b\u90fd\u8981\u540c\u6b65\u4e00\u4e0b\uff01","title":"\u521b\u5efa\u597d\u6a21\u578b\u4e4b\u540e\u9700\u8981\u540c\u6b65\u6570\u636e\u5e93"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#_4","text":"0001-initial.py 0002-xxxx.py 0003-xxxx.py python manage.py migrate \u5e94\u7528\u7684\u540d\u79f0 \u7248\u672c\u53f7","title":"\u7248\u672c\u7684\u5207\u6362\u6307\u4ee4"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#crud-create-read-update-delete","text":"","title":"\u6a21\u578b\u4e2d\u7684CRUD (create read update delete)"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#create","text":"Entry.objects.create(\u5c5e\u6027=\u503c\uff0c\u5c5e\u6027=\u503c) \u8fd4\u56de\u503c \u200b \u63d2\u5165\u6210\u529f\uff1a\u8fd4\u56de\u521b\u5efa\u597d\u7684\u5b9e\u4f53\u5bf9\u8c61 \u200b \u63d2\u5165\u5931\u8d25\uff1a\u8fd4\u56deNone\uff0c\u4ea7\u751f\u5f02\u5e38 \u521b\u5efa\u4e00\u4e2aEntry\u5bf9\u8c61\uff0c\u5e76\u901a\u8fc7save()\u8fdb\u884c\u4fdd\u5b58 obj = Entry(\u5c5e\u6027=\u503c, \u5c5e\u6027=\u503c) obj.\u5c5e\u6027 = \u503c obj.save() \u65e0\u8fd4\u56de\u503c\uff0c\u4fdd\u5b58\u6210\u529f\u540e\uff0cobj\u4f1a\u88ab\u91cd\u65b0\u8d4b\u503c**(obj\u591a\u4e86\u4e00\u4e2aid\u5c5e\u6027)** def index_view ( request ): obj = TestModel () obj . name = 'xxx' print ( obj . id ) obj . save () print ( obj . id ) return HttpResponse ( 'index' ) # \u6267\u884c\u7ed3\u679c None 1","title":"\u589e\u52a0\u6570\u636e create"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#read","text":"\u901a\u8fc7Entry.objects \u8c03\u7528\u67e5\u8be2\u63a5\u53e3\u51fd\u6570 Entry.objects \u63d0\u4f9b\u4e86\u5bf9\u8be5\u5b9e\u4f53\u7684\u6240\u6709\u7684\u6570\u636e\u7684\u67e5\u8be2 \u83b7\u53d6\u6240\u6709\u67e5\u8be2\u7ed3\u679c\u7684\u65b9\u6cd5 \u65b9\u6cd5\uff1a all() Enrty . objects . all () \u8fd4\u56de\uff1aQuerySet(\u67e5\u8be2\u7ed3\u679c\u96c6\uff0c\u672c\u8d28\u662f\u4e00\u4e2a\u5c01\u88c5\u4e86\u82e5\u5e72\u5bf9\u8c61\u7684\u5217\u8868) \u67e5\u8be2\u8fd4\u56de\u6307\u5b9a\u5217 \u65b9\u6cd5\uff1a values() \u6216 values('\u5217\u540d1', '\u5217\u540d2') \u4f5c\u7528\uff1a \u67e5\u8be2\u8868\u4e2d\u6570\u636e\u7684\u90e8\u5206\u5217\uff0c\u5c01\u88c5\u5230\u5b57\u5178\u4e2d\uff0c\u518d\u5c01\u88c5\u5230QuerySet\u4e2d \u8fd4\u56de\uff1aQuerySet(\u67e5\u8be2\u7ed3\u679c\u96c6\uff0c\u672c\u8d28\u662f\u4e00\u4e2a\u5c01\u88c5\u4e86\u82e5\u5e72\u5b57\u6bb5\u7684\u5217\u8868) \u67e5\u8be2\u8fd4\u56de\u6307\u5b9a\u5217 \u65b9\u6cd5: values_list() \u4f5c\u7528\uff1a\u5c06\u6570\u636e\u5c01\u88c5\u5230\u5143\u7ec4\u4e2d\u518d\u5c01\u88c5\u5230\u5217\u8868\u4e2d \u6392\u5e8f\u65b9\u6cd5 \u65b9\u6cd5\uff1a order_by() \u8bed\u6cd5\uff1a Entry.objects.order_by('col1', '-col2') \u9ed8\u8ba4\u662f\u5347\u5e8f\u6392\u5e8f\uff0c\u5217\u540d\u524d\u52a0-\uff0c\u5219\u8868\u793a\u964d\u5e8f\u6392\u5e8f \u67e5\u8be2\u53ea\u8fd4\u56de\u4e00\u6761\u6570\u636e \u65b9\u6cd5\uff1a get(\u6761\u4ef6) \u8fd4\u56de\uff1a\u5355\u4e2a\u5b9e\u4f53\u5bf9\u8c61 \u6ce8\u610f\uff1a \u200b \u8be5\u65b9\u6cd5\u53ea\u4f7f\u7528\u4e8e\u53ea\u80fd\u67e5\u8be2\u51fa\u4e00\u6761\u7ed3\u679c\u7684\u573a\u5408 \u200b \u5982\u679c\u67e5\u8be2\u591a\u4e8e\u4e00\u6761\u6570\u636e\u6216\u6ca1\u67e5\u8be2\u51fa\u7ed3\u679c\u90fd\u4f1a\u629b\u51fa\u5f02\u5e38 \u6839\u636e\u6761\u4ef6\u67e5\u8be2\u90e8\u5206\u884c \u65b9\u6cd5\uff1a filter(\u6761\u4ef6) \u8fd4\u56de\uff1a QuerySet # \u67e5\u8be2Author\u5b9e\u4f53\u4e2did=1\u7684\u4fe1\u606f authors = Author . objects . filter ( id = 1 ) \u975e\u7b49\u503c\u6761\u4ef6\u9700\u8981\u4f7f\u7528\u67e5\u8be2\u8c13\u8bcd Field Lookup \u8bed\u6cd5\uff1a \u200b Entry.objects.filter(\u5c5e\u6027__\u67e5\u8be2\u8c13\u8bcd=\u503c) \u6ce8\u610f\uff1a # \u6bcf\u4e2a\u67e5\u8be2\u8c13\u8bcd\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u529f\u80fd\u6761\u4ef6 __exact : \u7b49\u503c\u6761\u4ef6\u5224\u65ad __gt : \u5927\u4e8e\u6761\u4ef6\u5224\u65ad __year : \u5f97\u5230\u65e5\u671f\u4e2d\u7684\u5e74\u4efd\u518d\u8fdb\u4e00\u6b65\u5224\u65ad __contains : \u6a21\u7cca\u67e5\u8be2 ' %x xx%' __range : \u6a21\u7cca\u67e5\u8be2 between add ... ... # \u6240\u6709\u652f\u6301\u6761\u4ef6\u67e5\u8be2\u7684\u4f4d\u7f6e\u5904\u90fd\u652f\u6301\u67e5\u8be2\u8c13\u8bcd filter () get () exclude () \u5bf9\u6761\u4ef6\u53d6\u53cd \u65b9\u6cd5\uff1a exclude(\u6761\u4ef6) Author . objects . exclude ( id = 1 ) select * from author where not ( id = 1 ) \u805a\u5408\u67e5\u8be2\uff08\u4e0d\u5e26\u5206\u7ec4\uff09 \u65b9\u6cd5\uff1a aggregate(\u5217\u540d=\u805a\u5408\u51fd\u6570('\u5217')) Author . objects . aggregate ( sumAge = Avg ( 'age' )) \u805a\u5408\u51fd\u6570: 1. Avg(): \u5e73\u5747\u503c 2. Count(): \u6570\u91cf 3. Sum(): \u6c42\u548c 4. Min(): \u6c42\u6700\u5c0f\u503c 5. Max(): \u6c42\u6700\u5927\u503c \u805a\u5408\u67e5\u8be2\uff08\u5e26\u5206\u7ec4\uff09 \u65b9\u6cd5\uff1a nnotate(\u540d\u5b57=\u805a\u5408\u51fd\u6570('\u5217')) # \u6309id\u5206\u7ec4\u67e5\u8be2\u5e73\u5747\u5e74\u9f84 Author . objects . values ( 'id' ) . annotate ( avg_age = Avg ( 'age' )) \u96c6\u7ed3 where \uff0c \u5206\u7ec4\u67e5\u8be2 \uff0c having \u4e8e\u4e00\u4f53\u7684\u67e5\u8be2\u63a5\u53e3 Author . objects . filter ( id__gte = 3 ) # where\u5b50\u53e5 . values ( 'age' ) # group by . annotate ( avgAge = Avg ( 'age' )) # \u67e5\u8be2\u805a\u5408\u51fd\u6570 . filter ( avgAge__gte > 20 ) # having\u5b50\u53e5 . order_by ( '' ) # \u5b50\u53e5 \u6240\u6709\u7684\u67e5\u8be2\u63a5\u53e3\u51fd\u6570\u90fd\u53ef\u4ee5\u901a\u8fc7query\u5c5e\u6027\u6765\u5f97\u5230\u5bf9\u5e94\u7684sql\u8bed\u53e5 \u4f8b\u5982\uff1a Entry.objects.all().query","title":"\u67e5\u8be2\u6570\u636e read"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#update","text":"\u4fee\u6539\u5355\u4e2a\u5b9e\u4f53 # \u67e5\uff0c \u6539\uff0c \u4fdd\u5b58 obj = TestModel . objects . filter ( id = 1 ) . first () obj . name = 'wwww' obj . save () \u6279\u91cf\u4fee\u6539\u6570\u636e # \u8c03\u7528QuerySet\u7684update(\u5c5e\u6027=\u503c, \u5c5e\u6027=\u503c)\u5b9e\u73b0\u6279\u91cf\u4fee\u6539 objs = TestModel . objects . all () objs . update ( name = 'xxx' )","title":"\u4fee\u6539\u6570\u636e update"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#delete","text":"\u8c03\u7528\u5b9e\u4f53\u5bf9\u8c61\u6216\u67e5\u8be2\u7ed3\u679c\u96c6\u7684delete()\u65b9\u6cd5\u6765\u5b8c\u6210\u5220\u9664 \u5220\u9664\u5355\u4e2a\u5bf9\u8c61 au = Author . objects . get ( id = 1 ) au . delete () \u6279\u91cf\u5220\u9664 Author . objects . all () . delete ()","title":"\u5220\u9664\u6570\u636e delete"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#f-q","text":"","title":"F\u67e5\u8be2  Q\u67e5\u8be2"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#f","text":"\u4f5c\u7528\uff1a\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u67d0\u5217\u7684\u503c \u8bed\u6cd5\uff1a \u200b from django.db.models import F \u200b F('\u5217\u540d'): \u5f97\u5230\u67d0\u5217\u7684\u503c # \u628a\u6240\u6709\u7684Author\u7684age\u589e\u52a010 Author . objects . all () . update ( age = F ( 'age' ) + 10 )","title":"F():"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#q","text":"\u4f5c\u7528\uff1a\u5728\u67e5\u8be2\u6761\u4ef6\u4e2d\u53ef\u4ee5\u5b8c\u6210or\u64cd\u4f5c \u8bed\u6cd5\uff1a \u200b from django.db.models import Q \u200b Q(\u6761\u4ef61)|Q(\u6761\u4ef62) # \u67e5\u8be2id>=3 \u6216 \u5e74\u9f84\u5c0f\u4e8e60\u7684\u4fe1\u606f authors = Author . objects . filter ( Q ( id__gte = 3 ) | Q ( age__lt = 60 )) . all ()","title":"Q()"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#_5","text":"\u67e5\u8be2 Entry . objects . raw ( sql ) \u8fd4\u56de\u503c:QuerySet() \u589e\u5220\u6539 from django.db import connection def do_sql ( request ): with connection . curso () as cursor : sql = '...' ; cursor . execute ( sql ) # \u5f71\u54cd\u7684\u884c\u6570 return xx","title":"\u539f\u751f\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u65b9\u6cd5"},{"location":"django/6_django%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B/#-objects","text":"objects \u7684 \u5c5e\u6027\u7684\u7c7b\u578b\u4e3a models.Manager \u58f0\u660e EntryManager \u7c7b\uff0c\u7ee7\u627f\u81eamodels.Manager, \u5141\u8bb8\u5728 EntryManager \u4e2d\u589e\u52a0\u81ea\u5b9a\u4e49\u51fd\u6570 class EntryManager ( models . Manager ): def \u51fd\u6570\u540d ( self ): ... ... return ... \u4f7f\u7528\u7ed9EntryManager \u8986\u76d6Models\u7c7b\u4e2d\u8986\u76d6\u539f\u6709\u7684objects class Entry ( models . Model ): objects = EntryManager ()","title":"\u81ea\u5b9a\u4e49\u67e5\u8be2\u5bf9\u8c61 - objects"},{"location":"django/7_django%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/","text":"django\u6a21\u578b\u4e2d\u7684\u5173\u7cfb\u6620\u5c04 \u00b6 \u4e00\u5bf9\u4e00\u6620\u5c04 \u00b6 \u8bed\u6cd5\uff1a\u5728\u5173\u8054\u7684\u4e24\u4e2a\u7c7b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7c7b\u90fd\u53ef\u4ee5\u589e\u52a0\u5bf9\u53e6\u4e00\u4e2a\u7c7b\u7684\u5f15\u7528 \u5c5e\u6027 = modles.OneToOneField(Entry) # \u5728Wife\u5b9e\u4f53\u7c7b\u4e2d\u589e\u52a0\u5bf9Author\u5b9e\u4f53\u7c7b\u7684\u4e00\u5bf9\u4e00\u5f15\u7528 class Author ( models . Model ): ... ... class Wife ( models . Model ): ... ... # \u589e\u52a0\u4e00\u5bf9\u4e00\u7684\u5f15\u7528 author = modles . OneToOneField ( Author ) \u6570\u636e\u5e93\u4e2d\u4f1a\u751f\u6210\u4e00\u4e2a\u5916\u952e(author_id)\u5217\u5728wife\u8868\u4e2d, \u4f1a\u5f15\u7528\u5728author\u8868\u7684\u4e3b\u952e \u5728Author\u4e2d\uff0c\u4f1a\u589e\u52a0\u4e00\u4e2a\u9690\u5f0f\u5c5e\u6027\uff0c\u6765\u8868\u793aauthor\u6240\u5bf9\u5e94\u7684wife\uff08\u5176\u5b9e\u53cd\u5411\u5f15\u7528\u5c5e\u6027\uff09 \u67e5\u8be2 \u6b63\u5411\u67e5\u8be2\uff1a \u901a\u8fc7wife \u627e author # \u7279\u70b9\uff1a \u901a\u8fc7\u81ea\u5b9a\u4e49\u7684\u5173\u8054\u5c5e\u6027\u53bb\u67e5\u627e\u5bf9\u5e94\u7684\u5b9e\u4f53 wife = Wife . objects . get ( id = 1 ) author = wife . author \u53cd\u5411\u67e5\u8be2\uff1a\u901a\u8fc7author \u627e wife # \u7279\u70b9\uff1a \u901a\u8fc7\u53cd\u5411\u5f15\u7528\u5c5e\u6027\u53bb\u67e5\u627e\u5bf9\u5e94\u7684\u5b9e\u4f53 author = Author . objects . get ( id = 1 ) wife = author . wife \u4e00\u5bf9\u591a\u6620\u5c04 \u00b6 \u8bed\u6cd5 \u5728'\u591a'\u8868\u4e2d\u589e\u52a0\u5bf9'\u4e00'\u8868\u7684\u5916\u952e\u5f15\u7528\uff08\u6570\u636e\u5e93\u4e2d\u8868\u73b0\uff09 \u5728'\u591a'\u5b9e\u4f53\u4e2d\u589e\u52a0\u5bf9'\u4e00'\u5b9e\u4f53\u7684\u5f15\u7528\uff08django\u6a21\u578b\u4e2d\u64cd\u4f5c\uff09 \u5c5e\u6027 = models.ForeignKey(Entry) # \u4e00\u4e2a\u51fa\u7248\u793e\u5bf9\u5e94\u591a\u672c\u4e66 # Book Publisher # \u591a \u4e00 class Book ( models . Model ): ... ... publisher = models . ForeignKey ( Publisher ) Book \u8868\u4e2d\u589e\u52a0\u4e00\u4e2a\u5916\u952e\u5217 publisher_id, \u5f15\u7528\u81eaPublisher \u8868\u4e2d\u7684\u4e3b\u952e Publisher \u4e2d\u4f1a\u7531\u4e00\u4e2a\u9690\u5f0f\u5c5e\u6027 book_set, \u7528\u6765\u8868\u793a\u8be5publisher\u5bf9\u5e94\u7684\u6240\u6709\u7684Book\u5bf9\u8c61\u7684\u67e5\u8be2 \u591a\u5bf9\u591a\u6620\u5c04 \u00b6 \u8bed\u6cd5 \u5728\u5173\u8054\u7684\u4e24\u4e2a\u7c7b\u7684\u4efb\u610f\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u589e\u52a0 \u5c5e\u6027 = models.ManyToManyField(Entry) # Author Book \u53ef\u4ee5\u7684\u662f\u591a\u5bf9\u591a\u5173\u8054\u5173\u7cfb # \u4e00\u4e2aauthor \u53ef\u4ee5\u51fa\u7248\u591a\u672cbook # \u4e00\u672cbook \u53ef\u4ee5\u7531\u591a\u4f4d author \u8054\u5408\u7f16\u5199 class Author ( models . Model ): ... ... class Book ( models . Model ): ... ... authors = models . ManyToManyField ( Author ) Book \u8868\u4e2d\u589e\u52a0\u4e00\u4e2a\u5916\u952e\u5217 publisher_id, \u5f15\u7528\u81eaPublisher \u8868\u4e2d\u7684\u4e3b\u952e Publisher \u4e2d\u4f1a\u7531\u4e00\u4e2a\u9690\u5f0f\u5c5e\u6027 book_set, \u7528\u6765\u8868\u793a\u8be5publisher\u5bf9\u5e94\u7684\u6240\u6709\u7684Book\u5bf9\u8c61\u7684\u67e5\u8be2 \u67e5\u8be2 \u901a\u8fc7 Book \u67e5\u8be2 authors: authors = book . authors . all () \u53cd\u5411\u67e5\u8be2\uff1a books = author . book_set . all ()","title":"7. \u6a21\u578b\u4e2d\u7684\u5173\u7cfb\u6620\u5c04"},{"location":"django/7_django%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/#django","text":"","title":"django\u6a21\u578b\u4e2d\u7684\u5173\u7cfb\u6620\u5c04"},{"location":"django/7_django%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/#_1","text":"\u8bed\u6cd5\uff1a\u5728\u5173\u8054\u7684\u4e24\u4e2a\u7c7b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u7c7b\u90fd\u53ef\u4ee5\u589e\u52a0\u5bf9\u53e6\u4e00\u4e2a\u7c7b\u7684\u5f15\u7528 \u5c5e\u6027 = modles.OneToOneField(Entry) # \u5728Wife\u5b9e\u4f53\u7c7b\u4e2d\u589e\u52a0\u5bf9Author\u5b9e\u4f53\u7c7b\u7684\u4e00\u5bf9\u4e00\u5f15\u7528 class Author ( models . Model ): ... ... class Wife ( models . Model ): ... ... # \u589e\u52a0\u4e00\u5bf9\u4e00\u7684\u5f15\u7528 author = modles . OneToOneField ( Author ) \u6570\u636e\u5e93\u4e2d\u4f1a\u751f\u6210\u4e00\u4e2a\u5916\u952e(author_id)\u5217\u5728wife\u8868\u4e2d, \u4f1a\u5f15\u7528\u5728author\u8868\u7684\u4e3b\u952e \u5728Author\u4e2d\uff0c\u4f1a\u589e\u52a0\u4e00\u4e2a\u9690\u5f0f\u5c5e\u6027\uff0c\u6765\u8868\u793aauthor\u6240\u5bf9\u5e94\u7684wife\uff08\u5176\u5b9e\u53cd\u5411\u5f15\u7528\u5c5e\u6027\uff09 \u67e5\u8be2 \u6b63\u5411\u67e5\u8be2\uff1a \u901a\u8fc7wife \u627e author # \u7279\u70b9\uff1a \u901a\u8fc7\u81ea\u5b9a\u4e49\u7684\u5173\u8054\u5c5e\u6027\u53bb\u67e5\u627e\u5bf9\u5e94\u7684\u5b9e\u4f53 wife = Wife . objects . get ( id = 1 ) author = wife . author \u53cd\u5411\u67e5\u8be2\uff1a\u901a\u8fc7author \u627e wife # \u7279\u70b9\uff1a \u901a\u8fc7\u53cd\u5411\u5f15\u7528\u5c5e\u6027\u53bb\u67e5\u627e\u5bf9\u5e94\u7684\u5b9e\u4f53 author = Author . objects . get ( id = 1 ) wife = author . wife","title":"\u4e00\u5bf9\u4e00\u6620\u5c04"},{"location":"django/7_django%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/#_2","text":"\u8bed\u6cd5 \u5728'\u591a'\u8868\u4e2d\u589e\u52a0\u5bf9'\u4e00'\u8868\u7684\u5916\u952e\u5f15\u7528\uff08\u6570\u636e\u5e93\u4e2d\u8868\u73b0\uff09 \u5728'\u591a'\u5b9e\u4f53\u4e2d\u589e\u52a0\u5bf9'\u4e00'\u5b9e\u4f53\u7684\u5f15\u7528\uff08django\u6a21\u578b\u4e2d\u64cd\u4f5c\uff09 \u5c5e\u6027 = models.ForeignKey(Entry) # \u4e00\u4e2a\u51fa\u7248\u793e\u5bf9\u5e94\u591a\u672c\u4e66 # Book Publisher # \u591a \u4e00 class Book ( models . Model ): ... ... publisher = models . ForeignKey ( Publisher ) Book \u8868\u4e2d\u589e\u52a0\u4e00\u4e2a\u5916\u952e\u5217 publisher_id, \u5f15\u7528\u81eaPublisher \u8868\u4e2d\u7684\u4e3b\u952e Publisher \u4e2d\u4f1a\u7531\u4e00\u4e2a\u9690\u5f0f\u5c5e\u6027 book_set, \u7528\u6765\u8868\u793a\u8be5publisher\u5bf9\u5e94\u7684\u6240\u6709\u7684Book\u5bf9\u8c61\u7684\u67e5\u8be2","title":"\u4e00\u5bf9\u591a\u6620\u5c04"},{"location":"django/7_django%E6%A8%A1%E5%9E%8B%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/#_3","text":"\u8bed\u6cd5 \u5728\u5173\u8054\u7684\u4e24\u4e2a\u7c7b\u7684\u4efb\u610f\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u589e\u52a0 \u5c5e\u6027 = models.ManyToManyField(Entry) # Author Book \u53ef\u4ee5\u7684\u662f\u591a\u5bf9\u591a\u5173\u8054\u5173\u7cfb # \u4e00\u4e2aauthor \u53ef\u4ee5\u51fa\u7248\u591a\u672cbook # \u4e00\u672cbook \u53ef\u4ee5\u7531\u591a\u4f4d author \u8054\u5408\u7f16\u5199 class Author ( models . Model ): ... ... class Book ( models . Model ): ... ... authors = models . ManyToManyField ( Author ) Book \u8868\u4e2d\u589e\u52a0\u4e00\u4e2a\u5916\u952e\u5217 publisher_id, \u5f15\u7528\u81eaPublisher \u8868\u4e2d\u7684\u4e3b\u952e Publisher \u4e2d\u4f1a\u7531\u4e00\u4e2a\u9690\u5f0f\u5c5e\u6027 book_set, \u7528\u6765\u8868\u793a\u8be5publisher\u5bf9\u5e94\u7684\u6240\u6709\u7684Book\u5bf9\u8c61\u7684\u67e5\u8be2 \u67e5\u8be2 \u901a\u8fc7 Book \u67e5\u8be2 authors: authors = book . authors . all () \u53cd\u5411\u67e5\u8be2\uff1a books = author . book_set . all ()","title":"\u591a\u5bf9\u591a\u6620\u5c04"},{"location":"django/8_django%E8%87%AA%E5%B8%A6%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/","text":"\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf \u00b6 \u540e\u53f0\u914d\u7f6e \u00b6 \u767b\u9646\u5730\u5740\uff1a /admin/ \u521b\u5efa\u540e\u53f0\u7ba1\u7406\u5458\uff08\u8d85\u7ea7\u7528\u6237\uff09 python manage . py createsuperuser Models \u7684\u57fa\u672c\u7ba1\u7406 \u00b6 \u5728\u5e94\u7528\u4e2d\u7684 admin.py \u4e2d\u6ce8\u518c\u8981\u7ba1\u7406\u7684\u5b9e\u4f53\u7c7b admin.py\u4f5c\u7528\uff1a \u6ce8\u518c\u8981\u7ba1\u7406\u7684Models\u7c7b\uff0c\u53ea\u6709\u6ce8\u518c\u4e4b\u540e\u624d\u80fd\u7ba1\u7406 \u6ce8\u518cModels admin.site.register() \u7c7b\u8bbe\u7f6e \u91cd\u5199\u6bcf\u4e2a\u5b9e\u4f53\u7c7b\u4e2d\u7684 __str__() \u65b9\u6cd5\uff0c\u540e\u53f0\u663e\u793a\u7684\u5c06\u4ee5 __str__() \u7684\u8fd4\u56de\u503c\u4e3a\u51c6 \u4e3a\u5b9e\u4f53\u7c7b\u4e2d\u7684\u5c5e\u6027\u4eec\u6dfb\u52a0\u5b57\u6bb5\u9009\u9879 verbose_name\uff0c\u7528\u4e8e\u4fee\u6539\u663e\u793a\u7684\u5b57\u6bb5\u540d \u901a\u8fc7Model\u7c7b\u7684\u5185\u90e8\u7c7bMeta\u5b9a\u4e49\u5176\u5c55\u73b0\u5f62\u5f0f class Author ( models . Model ): name = models . CharField ( max_length = 20 ) class Meta (): 1. db_table = '' # \u6307\u5b9a\u8be5\u5b9e\u4f53\u7c7b\u6620\u5c04\u5230\u8868\u7684\u540d\u79f0\uff0c\u8be5\u5c5e\u6027\u8bbe\u7f6e\u5b8c\u6210\u540e\u9700\u8981\u540c\u6b65\u56de\u6570\u636e\u5e93 2. verbose_name = '' # \u5b9a\u4e49\u7c7b\u5728admin\u4e2d\u663e\u793a\u7684\u540d\u5b57(\u5355\u6570) 3. varbose_name_plural # \u5b9a\u4e49\u7c7b\u5728admin\u4e2d\u663e\u793a\u7684\u540d\u5b57(\u590d\u6570) 4. ordering # \u6307\u5b9a\u6570\u636e\u5728\u540e\u53f0\u7ba1\u7406\u4e2d\u7684\u6392\u5e8f\u65b9\u5f0f # \u53d6\u503c\u4e00\u4e2a\u5217\u8868\uff0c\u6307\u5b9a\u6392\u5e8f\u5217\uff0c\u9ed8\u8ba4\u5347\u5e8f\uff0c\u964d\u5e8f\u4f7f\u7528 Models \u7684\u9ad8\u7ea7\u7ba1\u7406 \u00b6 \u5728admin.py\u4e2d\u521b\u5efa\u9ad8\u7ea7\u7ba1\u7406\u7c7b\u5e76\u6ce8\u518c # \u521b\u5efa EntryAdmin\u7c7b\uff0c\u7ee7\u627f\u81eaadmin.ModelAdmin class AuthorAdmin ( admin . ModelAdmin ): pass # \u6ce8\u518c\u9ad8\u7ea7\u7ba1\u7406\u7c7b admin . site . register ( Entry , EntryAdmin ) # ex: admin . site . register ( Author , AuthorAdmin ) \u5141\u8bb8\u5728EntryAdmin\u4e2d\u589e\u52a0\u7684\u5c5e\u6027 # list_display \u4f5c\u7528 \u5b9a\u4e49\u5728\u5217\u8868\u4e5f\u4e0a\u663e\u793a\u7684\u5b57\u6bb5\u4eec \u53d6\u503c \uff1a \u7531\u6a21\u578b\u7c7b\u4e2d\u5bf9\u8c61\u7684\u5c5e\u6027\u540d\u7ec4\u6210\u7684\u5143\u7ec4\u6216\u5217\u8868 # list_display_links \u4f5c\u7528 \u5b9a\u4e49\u5728\u5217\u8868\u9875\u4e0a\u4e5f\u80fd\u591f\u94fe\u63a5\u5230\u8be6\u60c5\u9875\u7684\u5b57\u6bb5\u4eec # list_editable \u4f5c\u7528 \u5b9a\u4e49\u5728\u5217\u8868\u9875\u4e0a\u5c31\u80fd\u591f\u4fee\u6539\u7684\u5b57\u6bb5\u4eec \u53d6\u503c \u53ea\u80fd\u51fa\u73b0\u5728list_display\u4e2d \uff0c \u4e0d\u80fd\u51fa\u73b0\u5728list_display_links\u4e2d # search_fields \u4f5c\u7528 \u5728\u5217\u8868\u9875\u7684\u504f\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u641c\u7d22\u680f \uff0c\u3001 \u5b9a\u4e49\u641c\u7d22\u680f\u4e2d\u5141\u8bb8\u641c\u7d22\u7684\u5b57\u6bb5\u503c\u4eec # list_filter \u4f5c\u7528 \u5728\u5217\u8868\u9875\u7684\u53f3\u4fa7\u589e\u52a0\u8fc7\u6ee4\u5668\u6765\u5b9e\u73b0\u5feb\u901f\u7b5b\u9009 # date_hierarchy \u4f5c\u7528 \u5728\u5217\u8868\u9875\u7684\u9876\u90e8\u4f1a\u589e\u52a0\u4e00\u4e2a\u65f6\u95f4\u9009\u62e9\u5668 \uff0c \u53d6\u503c\u5c5e\u6027\u5fc5\u987b\u662fDateField \u6216 DateTimeField\u7684\u5217 # fields \u4f5c\u7528 \u5728\u8be6\u60c5\u9875\u9762\u4e2d \uff0c \u6307\u5b9a\u8981\u663e\u793a\u90a3\u4e9b\u5b57\u6bb5\u5e76\u6309\u7167\u4ec0\u4e48\u987a\u5e8f\u663e\u793a # fieldsets \u4f5c\u7528 \u5728\u8be6\u60c5\u9875\u4e2d\u5bf9\u5b57\u6bb5\u4eec\u8fdb\u884c\u5206\u7ec4\u663e\u793a \u6ce8\u610f fieldssets \u4e0e fields \u4e0d\u80fd\u5171\u5b58 \u53d6\u503c fieldssets = [ # \u5206\u7ec41 ( '\u5206\u7ec4\u540d\u79f0' , { 'fields' : ( '\u5c5e\u60271' , '\u5c5e\u60272' ), 'classes' : ( 'collapse' ,) # collapse \u6298\u53e0 }), # \u5206\u7ec42 ]","title":"8. \u81ea\u5e26\u7684\u540e\u53f0\u7ba1\u7406"},{"location":"django/8_django%E8%87%AA%E5%B8%A6%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/#_1","text":"","title":"\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf"},{"location":"django/8_django%E8%87%AA%E5%B8%A6%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/#_2","text":"\u767b\u9646\u5730\u5740\uff1a /admin/ \u521b\u5efa\u540e\u53f0\u7ba1\u7406\u5458\uff08\u8d85\u7ea7\u7528\u6237\uff09 python manage . py createsuperuser","title":"\u540e\u53f0\u914d\u7f6e"},{"location":"django/8_django%E8%87%AA%E5%B8%A6%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/#models","text":"\u5728\u5e94\u7528\u4e2d\u7684 admin.py \u4e2d\u6ce8\u518c\u8981\u7ba1\u7406\u7684\u5b9e\u4f53\u7c7b admin.py\u4f5c\u7528\uff1a \u6ce8\u518c\u8981\u7ba1\u7406\u7684Models\u7c7b\uff0c\u53ea\u6709\u6ce8\u518c\u4e4b\u540e\u624d\u80fd\u7ba1\u7406 \u6ce8\u518cModels admin.site.register() \u7c7b\u8bbe\u7f6e \u91cd\u5199\u6bcf\u4e2a\u5b9e\u4f53\u7c7b\u4e2d\u7684 __str__() \u65b9\u6cd5\uff0c\u540e\u53f0\u663e\u793a\u7684\u5c06\u4ee5 __str__() \u7684\u8fd4\u56de\u503c\u4e3a\u51c6 \u4e3a\u5b9e\u4f53\u7c7b\u4e2d\u7684\u5c5e\u6027\u4eec\u6dfb\u52a0\u5b57\u6bb5\u9009\u9879 verbose_name\uff0c\u7528\u4e8e\u4fee\u6539\u663e\u793a\u7684\u5b57\u6bb5\u540d \u901a\u8fc7Model\u7c7b\u7684\u5185\u90e8\u7c7bMeta\u5b9a\u4e49\u5176\u5c55\u73b0\u5f62\u5f0f class Author ( models . Model ): name = models . CharField ( max_length = 20 ) class Meta (): 1. db_table = '' # \u6307\u5b9a\u8be5\u5b9e\u4f53\u7c7b\u6620\u5c04\u5230\u8868\u7684\u540d\u79f0\uff0c\u8be5\u5c5e\u6027\u8bbe\u7f6e\u5b8c\u6210\u540e\u9700\u8981\u540c\u6b65\u56de\u6570\u636e\u5e93 2. verbose_name = '' # \u5b9a\u4e49\u7c7b\u5728admin\u4e2d\u663e\u793a\u7684\u540d\u5b57(\u5355\u6570) 3. varbose_name_plural # \u5b9a\u4e49\u7c7b\u5728admin\u4e2d\u663e\u793a\u7684\u540d\u5b57(\u590d\u6570) 4. ordering # \u6307\u5b9a\u6570\u636e\u5728\u540e\u53f0\u7ba1\u7406\u4e2d\u7684\u6392\u5e8f\u65b9\u5f0f # \u53d6\u503c\u4e00\u4e2a\u5217\u8868\uff0c\u6307\u5b9a\u6392\u5e8f\u5217\uff0c\u9ed8\u8ba4\u5347\u5e8f\uff0c\u964d\u5e8f\u4f7f\u7528","title":"Models \u7684\u57fa\u672c\u7ba1\u7406"},{"location":"django/8_django%E8%87%AA%E5%B8%A6%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/#models_1","text":"\u5728admin.py\u4e2d\u521b\u5efa\u9ad8\u7ea7\u7ba1\u7406\u7c7b\u5e76\u6ce8\u518c # \u521b\u5efa EntryAdmin\u7c7b\uff0c\u7ee7\u627f\u81eaadmin.ModelAdmin class AuthorAdmin ( admin . ModelAdmin ): pass # \u6ce8\u518c\u9ad8\u7ea7\u7ba1\u7406\u7c7b admin . site . register ( Entry , EntryAdmin ) # ex: admin . site . register ( Author , AuthorAdmin ) \u5141\u8bb8\u5728EntryAdmin\u4e2d\u589e\u52a0\u7684\u5c5e\u6027 # list_display \u4f5c\u7528 \u5b9a\u4e49\u5728\u5217\u8868\u4e5f\u4e0a\u663e\u793a\u7684\u5b57\u6bb5\u4eec \u53d6\u503c \uff1a \u7531\u6a21\u578b\u7c7b\u4e2d\u5bf9\u8c61\u7684\u5c5e\u6027\u540d\u7ec4\u6210\u7684\u5143\u7ec4\u6216\u5217\u8868 # list_display_links \u4f5c\u7528 \u5b9a\u4e49\u5728\u5217\u8868\u9875\u4e0a\u4e5f\u80fd\u591f\u94fe\u63a5\u5230\u8be6\u60c5\u9875\u7684\u5b57\u6bb5\u4eec # list_editable \u4f5c\u7528 \u5b9a\u4e49\u5728\u5217\u8868\u9875\u4e0a\u5c31\u80fd\u591f\u4fee\u6539\u7684\u5b57\u6bb5\u4eec \u53d6\u503c \u53ea\u80fd\u51fa\u73b0\u5728list_display\u4e2d \uff0c \u4e0d\u80fd\u51fa\u73b0\u5728list_display_links\u4e2d # search_fields \u4f5c\u7528 \u5728\u5217\u8868\u9875\u7684\u504f\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u641c\u7d22\u680f \uff0c\u3001 \u5b9a\u4e49\u641c\u7d22\u680f\u4e2d\u5141\u8bb8\u641c\u7d22\u7684\u5b57\u6bb5\u503c\u4eec # list_filter \u4f5c\u7528 \u5728\u5217\u8868\u9875\u7684\u53f3\u4fa7\u589e\u52a0\u8fc7\u6ee4\u5668\u6765\u5b9e\u73b0\u5feb\u901f\u7b5b\u9009 # date_hierarchy \u4f5c\u7528 \u5728\u5217\u8868\u9875\u7684\u9876\u90e8\u4f1a\u589e\u52a0\u4e00\u4e2a\u65f6\u95f4\u9009\u62e9\u5668 \uff0c \u53d6\u503c\u5c5e\u6027\u5fc5\u987b\u662fDateField \u6216 DateTimeField\u7684\u5217 # fields \u4f5c\u7528 \u5728\u8be6\u60c5\u9875\u9762\u4e2d \uff0c \u6307\u5b9a\u8981\u663e\u793a\u90a3\u4e9b\u5b57\u6bb5\u5e76\u6309\u7167\u4ec0\u4e48\u987a\u5e8f\u663e\u793a # fieldsets \u4f5c\u7528 \u5728\u8be6\u60c5\u9875\u4e2d\u5bf9\u5b57\u6bb5\u4eec\u8fdb\u884c\u5206\u7ec4\u663e\u793a \u6ce8\u610f fieldssets \u4e0e fields \u4e0d\u80fd\u5171\u5b58 \u53d6\u503c fieldssets = [ # \u5206\u7ec41 ( '\u5206\u7ec4\u540d\u79f0' , { 'fields' : ( '\u5c5e\u60271' , '\u5c5e\u60272' ), 'classes' : ( 'collapse' ,) # collapse \u6298\u53e0 }), # \u5206\u7ec42 ]","title":"Models \u7684\u9ad8\u7ea7\u7ba1\u7406"},{"location":"django/Django2%20DEBUG%3DFalse%E5%90%8E%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/","text":"\u51fa\u73b0\u7684\u95ee\u9898\u6839\u672c\u539f\u56e0\u662f\uff1a\u5f53\u6211\u4eec\u5728\u5f00\u53d1django\u5e94\u7528\u65f6\u5982\u679c\u8bbe\u7f6e\u4e86 DEBUG = True\uff0c\u90a3\u4e48django\u4fbf\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5bf9\u9759\u6001\u6587\u4ef6\u8fdb\u884c\u8def\u7531\uff1b \u4f46\u662f\u5f53\u6211\u4eec\u8bbe\u7f6eDEBUG = False\u540e\uff0c\u8fd9\u4e00\u529f\u80fd\u4fbf\u6ca1\u6709\u4e86\uff0c\u6b64\u65f6\u9759\u6001\u6587\u4ef6\u5c31\u4f1a\u51fa\u73b0\u52a0\u8f7d\u5931\u8d25\u7684\u60c5\u51b5\uff0c\u60f3\u8981\u8ba9\u9759\u6001\u6587\u4ef6\u6b63\u5e38\u663e\u793a\uff0c \u6211\u4eec\u5c31\u9700\u8981\u914d\u7f6e\u9759\u6001\u6587\u4ef6\u670d\u52a1\u4e86\u3002 \u53c2\u8003\u5b98\u65b9\u6587\u6863 https://docs.djangoproject.com/en/2.0/howto/static-files/ \u9996\u5148\u4fee\u6539\u9879\u76ee\u7684setting.py\u6587\u4ef6 \u00b6 STATIC_URL = '/static/' STATIC_ROOT = 'static' ## \u65b0\u589e\u884c \u4fee\u6539urls.py \u00b6 from django.views import static # \u65b0\u589e from django.conf import settings # \u65b0\u589e from django.conf.urls import url # \u65b0\u589e urlpatterns = [ path ( '' , include ( 'user.urls' )), # \u4ee5\u4e0b\u662f\u65b0\u589e url ( r '^static/(?P<path>.*)$' , static . serve , { 'document_root' : settings . STATIC_ROOT }, name = 'static' ), ]","title":"Django2 DEBUG=False\u540e\u9759\u6001\u6587\u4ef6\u65e0\u6cd5\u52a0\u8f7d"},{"location":"django/Django2%20DEBUG%3DFalse%E5%90%8E%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/#settingpy","text":"STATIC_URL = '/static/' STATIC_ROOT = 'static' ## \u65b0\u589e\u884c","title":"\u9996\u5148\u4fee\u6539\u9879\u76ee\u7684setting.py\u6587\u4ef6"},{"location":"django/Django2%20DEBUG%3DFalse%E5%90%8E%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD/#urlspy","text":"from django.views import static # \u65b0\u589e from django.conf import settings # \u65b0\u589e from django.conf.urls import url # \u65b0\u589e urlpatterns = [ path ( '' , include ( 'user.urls' )), # \u4ee5\u4e0b\u662f\u65b0\u589e url ( r '^static/(?P<path>.*)$' , static . serve , { 'document_root' : settings . STATIC_ROOT }, name = 'static' ), ]","title":"\u4fee\u6539urls.py"},{"location":"django/Django%E4%B9%8B%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/","text":"\u901a\u8fc7django\u81ea\u5e26\u7684\u7c7b\u5e93\uff0c\u6765\u52a0\u5bc6\u89e3\u5bc6\u5f88\u65b9\u4fbf\uff0c\u4e0b\u9762\u6765\u7b80\u5355\u4ecb\u7ecd\u4e0b \u5bfc\u5165\u5305 \u00b6 from django.contrib.auth.hashers import make_password , check_password \u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\u4ed6\u4eec\u7684\u4f5c\u7528\u4e86\u3002 \u4e00\u4e2a\u662f\u751f\u6210\u5bc6\u7801\uff0c\u4e00\u4e2a\u662f\u6838\u5bf9\u5bc6\u7801\u3002 \u6ce8\u610f\uff1a \u76f4\u63a5\u5728python\u547d\u4ee4\u89e3\u91ca\u5668\u5bfc\u5165\u4f1a\u62a5\u9519: django . core . exceptions . ImproperlyConfigured : Requested setting DEFAULT_INDEX_TABLESPACE , but settings are not configured . You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings . configure () before accessing settings . \u539f\u56e0: python\u542f\u52a8\u65b9\u5f0fpython\uff0c\u4f1a\u542f\u52a8\u4ea4\u4e92\u89e3\u91ca\u5668\uff0c\u9700\u8981\u544a\u8bc9Django\u4f7f\u7528\u54ea\u4e2a\u8bbe\u7f6e\u6587\u4ef6\uff0cDjango\u4f1a\u641c\u7d22DJANGO_SETTINGS_MODULE\u73af\u5883\u53d8\u91cf,\u5b83\u88ab\u8bbe\u7f6e\u5728settings.py\u4e2d\uff0c \u9700\u8981\u8bbe\u7f6e\u4e3a:multiDatabase.settings \u89e3\u51b3\u65b9\u6cd5\uff1a\u7528python manage.py shell \u6765\u542f\u52a8\u547d\u4ee4\u89e3\u91ca\u5668\u800c\u4e0d\u662fpython\uff0c\u56e0\u4e3apython manage.py shell\u4e2d\u5305\u542b\u4e86Django\u4f7f\u7528\u54ea\u4e2asettings.py\u6587\u4ef6 \u751f\u6210\u5bc6\u7801 \u00b6 make_password ( \"123456\" ) \u5f97\u5230\u7ed3\u679c\uff1a u 'pbkdf2_sha25615000MAjic3nDGFoi$qbclz+peplspCbRF6uoPZZ42aJIIkMpGt6lQ+Iq8nfQ=' \u53e6\u5916\u4e5f\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u6765\u751f\u6210\u5bc6\u7801\uff1a >>> make_password ( \"123456\" , None, 'pbkdf2_sha256' ) \u6821\u9a8c\u5bc6\u7801 \u00b6 \u6821\u9a8c\u5c31\u662f\u901a\u8fc7check_password(\u539f\u59cb\u503c, \u751f\u6210\u7684\u5bc6\u6587)\u6765\u6821\u9a8c\u5bc6\u7801\u7684\u3002 >>> check_password ( \"123456\" , \"pbkdf2_sha25615000MAjic3nDGFoi $qbclz +peplspCbRF6uoPZZ42aJIIkMpGt6lQ+Iq8nfQ=\" ) True","title":"Django\u4e4b\u5bc6\u7801\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6"},{"location":"django/Django%E4%B9%8B%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/#_1","text":"from django.contrib.auth.hashers import make_password , check_password \u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\u4ed6\u4eec\u7684\u4f5c\u7528\u4e86\u3002 \u4e00\u4e2a\u662f\u751f\u6210\u5bc6\u7801\uff0c\u4e00\u4e2a\u662f\u6838\u5bf9\u5bc6\u7801\u3002 \u6ce8\u610f\uff1a \u76f4\u63a5\u5728python\u547d\u4ee4\u89e3\u91ca\u5668\u5bfc\u5165\u4f1a\u62a5\u9519: django . core . exceptions . ImproperlyConfigured : Requested setting DEFAULT_INDEX_TABLESPACE , but settings are not configured . You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings . configure () before accessing settings . \u539f\u56e0: python\u542f\u52a8\u65b9\u5f0fpython\uff0c\u4f1a\u542f\u52a8\u4ea4\u4e92\u89e3\u91ca\u5668\uff0c\u9700\u8981\u544a\u8bc9Django\u4f7f\u7528\u54ea\u4e2a\u8bbe\u7f6e\u6587\u4ef6\uff0cDjango\u4f1a\u641c\u7d22DJANGO_SETTINGS_MODULE\u73af\u5883\u53d8\u91cf,\u5b83\u88ab\u8bbe\u7f6e\u5728settings.py\u4e2d\uff0c \u9700\u8981\u8bbe\u7f6e\u4e3a:multiDatabase.settings \u89e3\u51b3\u65b9\u6cd5\uff1a\u7528python manage.py shell \u6765\u542f\u52a8\u547d\u4ee4\u89e3\u91ca\u5668\u800c\u4e0d\u662fpython\uff0c\u56e0\u4e3apython manage.py shell\u4e2d\u5305\u542b\u4e86Django\u4f7f\u7528\u54ea\u4e2asettings.py\u6587\u4ef6","title":"\u5bfc\u5165\u5305"},{"location":"django/Django%E4%B9%8B%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/#_2","text":"make_password ( \"123456\" ) \u5f97\u5230\u7ed3\u679c\uff1a u 'pbkdf2_sha25615000MAjic3nDGFoi$qbclz+peplspCbRF6uoPZZ42aJIIkMpGt6lQ+Iq8nfQ=' \u53e6\u5916\u4e5f\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u6765\u751f\u6210\u5bc6\u7801\uff1a >>> make_password ( \"123456\" , None, 'pbkdf2_sha256' )","title":"\u751f\u6210\u5bc6\u7801"},{"location":"django/Django%E4%B9%8B%E5%AF%86%E7%A0%81%E7%9A%84%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/#_3","text":"\u6821\u9a8c\u5c31\u662f\u901a\u8fc7check_password(\u539f\u59cb\u503c, \u751f\u6210\u7684\u5bc6\u6587)\u6765\u6821\u9a8c\u5bc6\u7801\u7684\u3002 >>> check_password ( \"123456\" , \"pbkdf2_sha25615000MAjic3nDGFoi $qbclz +peplspCbRF6uoPZZ42aJIIkMpGt6lQ+Iq8nfQ=\" ) True","title":"\u6821\u9a8c\u5bc6\u7801"},{"location":"django/django/","text":"1. django\u4ecb\u7ecd\u53ca\u5b89\u88c5 \u00b6 1.1 \u7248\u672c\u4ecb\u7ecd \u00b6 \u6846\u67b6\u4ecb\u7ecd Django\u662f\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\uff0c2005\u5e74\u5f00\u53d1\uff0c\u91c7\u7528python\u8bed\u8a00\u7f16\u5199\u7684\u3002 \u65e9\u671f\u662f\u4e3b\u8981\u505a\u65b0\u95fb\u548c\u5185\u5bb9\u7ba1\u7406\u7684\u7f51\u7ad9 Django\u672c\u8eab\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\u7684\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf \u5b98\u7f51 http://www.djangoproject.com \u4e2d\u6587\u6587\u6863 http://djangobook.py3k.cn/2.0/ \u7248\u672c\u8def\u7ebf\u56fe \u00b6 \u6a2a\u8f74\u4ee3\u8868\u53d1\u884c\u5e74\u4efd\u3002 ***LTS***\u662f\u957f\u671f\u652f\u6301(Long Term Support)\u7684\u7f29\u5199 \uff0c\u9009\u7528django\u5f00\u53d1\u65f6\uff0c\u4e00\u822c\u9009\u7528\u957f\u671f\u652f\u6301\u7248\u3002 django1.8 2019\u5e74\u5c31\u4e0d\u518d\u652f\u6301\u7ef4\u62a4\u4e86\u3002 django1.11 2021\u5e74 \u4e0d\u518d\u652f\u6301\u7ef4\u62a4\u3002 \u7b14\u8005\u5b66\u4e60\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662fdjango1.11\u7248\uff0c\u73b0\u5728\u63a8\u8350\u4f7f\u7528\u7684\u662fdjango2.2 \u4ee5\u540e\u7248\u672c\u3002 \u6846\u67b6\u6a21\u5f0f \u00b6 MTV M Models - \u6a21\u578b\uff08\u6570\u636e\u5e93\uff09 T Templates - \u6a21\u677f\uff08\u7f51\u9875\uff09 V Views - \u89c6\u56fe\uff08\u903b\u8f91\uff09 Django\u6846\u67b6\u7684\u5b89\u88c5 \u00b6 \u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684django pip install django \u5b89\u88c5\u6307\u5b9a\u7248\u672c\u7684django pip install django == 2.2 . 6 \u79bb\u7ebf\u5b89\u88c5 django\u5b98\u7f51\u4e0b\u8f7dtar.gz\u6587\u4ef6\uff0c\u6839\u636e\u5b98\u7f51\u6587\u6863\u5b89\u88c5 django\u6846\u67b6\u7684\u4f7f\u7528 \u00b6 \u521b\u5efa\u9879\u76ee \u00b6 \u4f7f\u7528 django-admin \u521b\u5efa Django \u9879\u76ee \uff0c\u5728\u63a7\u5236\u53f0\u8f93\u5165\u3002 \u200b \u8bed\u6cd5\uff1a django - admin startproject \u9879\u76ee\u540d\u79f0 \u200b \u5982: django - admin startproject django_test Django\u9879\u76ee\u7ed3\u6784 \u00b6 manage.py \u529f\u80fd\uff1a \u5305\u542b\u6267\u884cdjango\u4e2d\u7684\u5404\u9879\u64cd\u4f5c\u7684\u6307\u4ee4 \u5982\uff1a \u542f\u52a8\u670d\u52a1 runserver \u4e3b\u76ee\u5f55 django_test/django_test __init__.py \u9879\u76ee\u7684\u521d\u59cb\u5316\u6587\u4ef6\uff0c\u81ea\u52a8\u8fd0\u884c urls.py \u9879\u76ee\u7684\u57fa\u7840\u8def\u7531\u914d\u7f6e\u6587\u4ef6 wsgi.py Web Server Gateway Interface Web \u670d\u52a1\u7f51\u5173\u63a5\u53e3 settings.py \u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6 1. BASE_DIR \u9879\u76ee\u6839\u76ee\u5f55 2. ALLOWED_HOSTS \u8bbe\u7f6e\u5141\u8bb8\u8bbf\u95ee\u5230\u672c\u9879\u76ee\u7684\u5730\u5740\u5217\u8868 \u5982\u679c\u5141\u8bb8\u5728\u7f51\u7edc\u4e2d\u88ab\u5176\u4ed6\u7684\u673a\u5668\u8bbf\u95ee\u5230\u7684\u8bdd \u63a8\u8350\u5199 [ \"*\" ], \u8868\u793a\u4efb\u4f55\u80fd\u591f\u8868\u793a\u8be5\u673a\u5668\u7684\u5730\u5740\u90fd\u80fd\u8bbf\u95ee\u5230\u8be5\u9879\u76ee \u540c\u65f6\u5728\u542f\u52a8\u670d\u52a1\u65f6\u8fd8\u9700\u8981\u6307\u5b9a\u5730\u5740\u548c\u7aef\u53e3 python3 manage . py runserver 0.0 . 0.0 : 8000 3. INSTALLED_APPS \u6307\u5b9a\u5df2\u5b89\u88c5\u7684\u5e94\u7528 \uff0c \u5982\u679c\u7531\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u7684\u8bdd\u9700\u8981\u5728\u6b64\u6ce8\u518c 4. MIDDLEWARE \u4e2d\u95f4\u4ef6 \uff0c \u5982\u679c\u6709\u81ea\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6 \uff0c \u9700\u8981\u5728\u6b64\u6ce8\u518c 5. ROOT_URLCONF \u6307\u5b9a\u9879\u76ee\u7684\u57fa\u7840\u8def\u7531\u914d\u7f6e\u6587\u4ef6 6. TEMPLATES \u914d\u7f6e\u6a21\u677f\u7684\u76f8\u5e94\u4fe1\u606f 7. DATABASES \u914d\u7f6e\u6570\u636e\u5e93\u7684\u4fe1\u606f 8. LANGUAGE_CODE \u8bbe\u7f6e\u8bed\u8a00 \uff0c \u4e3b\u8981\u8bbe\u7f6e\u4e2d\u6587\u7684\u8bdd \uff0c \u5141\u8bb8\u5c06\u503c\u6539\u4e3a 'zh-Hans' 9. TIME_ZONE \u6307\u5b9a\u65f6\u533a \uff0c \u9ed8\u8ba4\u65f6\u533a \uff0c \u5141\u8bb8\u5c06\u503c\u66f4\u6539\u4e3a \"Asia/Shanghai\" url\u7684\u4f7f\u7528 \u00b6 urls.py \u9ed8\u8ba4\u5728\u4e3b\u76ee\u5f55\u4e2d\uff0c\u4e3b\u8def\u7531\u914d\u7f6e\u6587\u4ef6\uff0c\u4f1a\u5305\u542b\u6700\u57fa\u672c\u7684\u5730\u5740\u6620\u5c04\uff0c\u6bcf\u4e2a\u5730\u5740\u8bbf\u95ee\u90fd\u5fc5\u987b\u8981\u5148\u7ecf\u8fc7\u8be5\u6587\u4ef6 \u4f5c\u7528\uff1a\u901a\u8fc7urls\u4e2d\u5b9a\u4e49\u597d\u7684\u5730\u5740\u627e\u5230\u5bf9\u5e94\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570 urlpatterns = [ path ( 'admin/' , admin . site . urls ), ] path() \u4f5c\u7528\uff1a\u4e3a\u4e86\u5339\u914d\u7528\u6237\u7684\u8bbf\u95ee\u8def\u5f84 \u8bed\u6cd5: from django.urls import path path(route, view, kwargs=None, name=None) route: \u5339\u914d\u8bf7\u6c42\u7684url view: \u5730\u5740\u5339\u914d\u4e0a\u4e4b\u540e\u8981\u6267\u884c\u64cd\u4f5c\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570 kwargs: \u5b57\u5178\uff0c\u7528\u6765\u60f3view\u4f20\u53c2\u7684\uff0c\u53ef\u4ee5\u7701\u7565 name: \u4e3aurl\u8d77\u522b\u540d, \u5728\u5730\u5740\u53cd\u5411\u89e3\u6790\u65f6\u4f7f\u7528 \u5411url\u4f20\u9012\u53c2\u6570 \u65b9\u5f0f\u4e00\uff1a\u901a\u8fc7path\u7684\u53c2\u6570kwargs\u7684\u65b9\u5f0f\u4f20\u9012\uff0c\u4e0d\u63a8\u8350\uff0c\u8fd9\u91cc\u4f9d\u8d56\u4e86django\u6846\u67b6\uff0c\u4e0d\u901a\u7528\u3002 \u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7http\u534f\u8bae\u8fdb\u884c\u4f20\u53c2 get\u8bf7\u6c42 http:// xxxx.com/login?id=1&token=xxx post\u8bf7\u6c42 http:// xxx.com/login \u6570\u636e\u653e\u5728 form-data\u91cc\uff0c\u8be6\u7ec6\u4e00\u70b9\u7684\u8bdd\u5c31\u662f\u653e\u5728http\u8bf7\u6c42\u7684\u8bf7\u6c42\u4f53\u91cc\uff08\u53ef\u4ee5\u53bb\u770b\u770bhttp\u534f\u8bae\u7684\u5185\u5bb9\uff09 \u6570\u636e\u600e\u4e48\u53d6\uff1f\uff1f \u540e\u9762\u7684\u6559\u7a0b\u4f1a\u8bb2\u5230\u3002 Django\u4e2d\u7684\u5e94\u7528 \u00b6 \u4ec0\u4e48\u662f\u5e94\u7528 \uff1f \u5e94\u7528\u5c31\u662f\u7f51\u7ad9\u4e2d\u7684\u4e00\u4e2a\u72ec\u7acb\u7684\u6a21\u5757 \u5982: \u7f51\u6613\u7f51\u7ad9\u53ef\u5206\u4e3a\u82e5\u5e72\u5e94\u7528\u7ec4\u6210 \u200b \u65b0\u95fb\u5e94\u7528: \u4e0e\u65b0\u95fb\u76f8\u5173\u7684\u5185\u5bb9 \u200b \u8f66\u5e94\u7528: \u4e0e\u6c7d\u8f66\u76f8\u5173\u7684\u5185\u5bb9 \u200b \u79d1\u6280\u5e94\u7528: \u4e0e\u79d1\u6280\u76f8\u5173\u7684\u5185\u5bb9 \u5728django\u4e2d, \u4e3b\u76ee\u5f55\u4e00\u822c\u4e0d\u5904\u7406\u5177\u4f53\u7684\u8bf7\u6c42, \u4e3b\u76ee\u5f55\u4e00\u822c\u5904\u7406\u7684\u662f\u9879\u76ee\u7684\u521d\u59cb\u5316\u64cd\u4f5c \u5904\u7406\u7684\u662f\u521d\u59cb\u5316\u64cd\u4f5c, \u4ee5\u53ca\u8bf7\u6c42\u7684\u5206\u53d1(\u5206\u5e03\u5f0f\u8bf7\u6c42\u5904\u7406), \u800c\u5177\u4f53\u7684\u8bf7\u6c42\u662f\u7531\u5404\u4e2a\u5e94\u7528\u53bb\u5904\u7406. \u521b\u5efa\u5e94\u7528 \u547d\u4ee4 python manage . py startapp \u5e94\u7528\u7684\u540d\u79f0 \u9700\u8981\u5728settings.py \u4e2d\u8fdb\u884c\u6ce8\u518c \uff0c \u5728INSTALLED_APPS \u4e2d\u8ffd\u52a0\u5e94\u7528\u7684\u540d\u79f0\u6765\u6ce8\u518c\u5e94\u7528 INSTALLED_APPS = [ 'django.contrib.admin' , ... ... '\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u540d\u79f0' ] \u5e94\u7528\u7684\u89e3\u6790\u7ec4\u6210 migrations \u6587\u4ef6\u5939 : \u5b58\u653e\u6570\u636e\u5e93\u7684\u4e2d\u95f4\u6587\u4ef6 __init__.py : \u5e94\u7528\u7684\u521d\u59cb\u5316\u6587\u4ef6 admin.py : \u5e94\u7528\u7684\u540e\u53f0\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 apps.py : \u548c\u5e94\u7528\u7684\u5c5e\u6027\u914d\u7f6e\u6587\u4ef6 models.py : Models \u4e0e \u6a21\u578b\u76f8\u5173\u7684\u6620\u5c04\u6587\u4ef6 tests.py : \u5e94\u7528\u7684\u5355\u5143\u6d4b\u8bd5\u6587\u4ef6 views.py : \u89c6\u56fe\u5904\u7406\u51fd\u6570\u7684\u6587\u4ef6 \u5206\u90e8\u5f0f\u7684\u8def\u7531\u7cfb\u7edf \u5728\u6bcf\u4e2a\u5e94\u7528\u4e2d\u5206\u522b\u521b\u5efaurls.py, \u683c\u5f0f\u53c2\u8003\u4e3b\u8def\u7531\u6587\u4ef6 \u76ee\u7684: \u4e3a\u4e86\u5904\u7406\u5404\u4e2a\u5e94\u7528\u4e2d\u7684\u8bf7\u6c42\u8def\u7531 \u7528\u6cd5: (\u8fd9\u91cc\u76f4\u63a5\u5f15\u7528django\u5b98\u65b9\u7684\u4f8b\u5b50) \u521b\u5efa\u4e00\u4e2apolls\u5e94\u7528\uff1a python manage . py startapp polls django_test/setting.py \u58f0\u660epolls\u6a21\u5757 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'polls' # <- \u8fd9\u91cc ] \u5728polls\u5305\u4e0b\u521b\u5efa urls.py \u6a21\u5757\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2ahttp://127.0.0.1:8000/ \u8def\u7531\u3002 from django.urls import path from .views import index_view urlpatterns = [ path ( '' , index_view , name = 'index' ), ] \u7f16\u5199\u8bd5\u56fe\u51fd\u6570 polls/views.py from django.http import HttpResponse from django.shortcuts import render # Create your views here. def index_view ( request ): return HttpResponse ( 'index' ) \u5c06polls\u5e94\u7528\u7684urls\u6ce8\u518c\u5230\u4e3b\u8def\u7531\u7cfb\u7edf\u4e2d\uff0c django_test/urls.py from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( '' , include ( \"polls.urls\" )), ] \u542f\u52a8\u670d\u52a1\uff0c\u8bbf\u95ee\u4e3b\u9875\uff1a http://127.0.0.1:8000/","title":"1. django\u4ecb\u7ecd\u53ca\u5b89\u88c5"},{"location":"django/django/#1-django","text":"","title":"1. django\u4ecb\u7ecd\u53ca\u5b89\u88c5"},{"location":"django/django/#11","text":"\u6846\u67b6\u4ecb\u7ecd Django\u662f\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\uff0c2005\u5e74\u5f00\u53d1\uff0c\u91c7\u7528python\u8bed\u8a00\u7f16\u5199\u7684\u3002 \u65e9\u671f\u662f\u4e3b\u8981\u505a\u65b0\u95fb\u548c\u5185\u5bb9\u7ba1\u7406\u7684\u7f51\u7ad9 Django\u672c\u8eab\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\u7684\u540e\u53f0\u7ba1\u7406\u7cfb\u7edf \u5b98\u7f51 http://www.djangoproject.com \u4e2d\u6587\u6587\u6863 http://djangobook.py3k.cn/2.0/","title":"1.1 \u7248\u672c\u4ecb\u7ecd"},{"location":"django/django/#_1","text":"\u6a2a\u8f74\u4ee3\u8868\u53d1\u884c\u5e74\u4efd\u3002 ***LTS***\u662f\u957f\u671f\u652f\u6301(Long Term Support)\u7684\u7f29\u5199 \uff0c\u9009\u7528django\u5f00\u53d1\u65f6\uff0c\u4e00\u822c\u9009\u7528\u957f\u671f\u652f\u6301\u7248\u3002 django1.8 2019\u5e74\u5c31\u4e0d\u518d\u652f\u6301\u7ef4\u62a4\u4e86\u3002 django1.11 2021\u5e74 \u4e0d\u518d\u652f\u6301\u7ef4\u62a4\u3002 \u7b14\u8005\u5b66\u4e60\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662fdjango1.11\u7248\uff0c\u73b0\u5728\u63a8\u8350\u4f7f\u7528\u7684\u662fdjango2.2 \u4ee5\u540e\u7248\u672c\u3002","title":"\u7248\u672c\u8def\u7ebf\u56fe"},{"location":"django/django/#_2","text":"MTV M Models - \u6a21\u578b\uff08\u6570\u636e\u5e93\uff09 T Templates - \u6a21\u677f\uff08\u7f51\u9875\uff09 V Views - \u89c6\u56fe\uff08\u903b\u8f91\uff09","title":"\u6846\u67b6\u6a21\u5f0f"},{"location":"django/django/#django","text":"\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684django pip install django \u5b89\u88c5\u6307\u5b9a\u7248\u672c\u7684django pip install django == 2.2 . 6 \u79bb\u7ebf\u5b89\u88c5 django\u5b98\u7f51\u4e0b\u8f7dtar.gz\u6587\u4ef6\uff0c\u6839\u636e\u5b98\u7f51\u6587\u6863\u5b89\u88c5","title":"Django\u6846\u67b6\u7684\u5b89\u88c5"},{"location":"django/django/#django_1","text":"","title":"django\u6846\u67b6\u7684\u4f7f\u7528"},{"location":"django/django/#_3","text":"\u4f7f\u7528 django-admin \u521b\u5efa Django \u9879\u76ee \uff0c\u5728\u63a7\u5236\u53f0\u8f93\u5165\u3002 \u200b \u8bed\u6cd5\uff1a django - admin startproject \u9879\u76ee\u540d\u79f0 \u200b \u5982: django - admin startproject django_test","title":"\u521b\u5efa\u9879\u76ee"},{"location":"django/django/#django_2","text":"manage.py \u529f\u80fd\uff1a \u5305\u542b\u6267\u884cdjango\u4e2d\u7684\u5404\u9879\u64cd\u4f5c\u7684\u6307\u4ee4 \u5982\uff1a \u542f\u52a8\u670d\u52a1 runserver \u4e3b\u76ee\u5f55 django_test/django_test __init__.py \u9879\u76ee\u7684\u521d\u59cb\u5316\u6587\u4ef6\uff0c\u81ea\u52a8\u8fd0\u884c urls.py \u9879\u76ee\u7684\u57fa\u7840\u8def\u7531\u914d\u7f6e\u6587\u4ef6 wsgi.py Web Server Gateway Interface Web \u670d\u52a1\u7f51\u5173\u63a5\u53e3 settings.py \u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6 1. BASE_DIR \u9879\u76ee\u6839\u76ee\u5f55 2. ALLOWED_HOSTS \u8bbe\u7f6e\u5141\u8bb8\u8bbf\u95ee\u5230\u672c\u9879\u76ee\u7684\u5730\u5740\u5217\u8868 \u5982\u679c\u5141\u8bb8\u5728\u7f51\u7edc\u4e2d\u88ab\u5176\u4ed6\u7684\u673a\u5668\u8bbf\u95ee\u5230\u7684\u8bdd \u63a8\u8350\u5199 [ \"*\" ], \u8868\u793a\u4efb\u4f55\u80fd\u591f\u8868\u793a\u8be5\u673a\u5668\u7684\u5730\u5740\u90fd\u80fd\u8bbf\u95ee\u5230\u8be5\u9879\u76ee \u540c\u65f6\u5728\u542f\u52a8\u670d\u52a1\u65f6\u8fd8\u9700\u8981\u6307\u5b9a\u5730\u5740\u548c\u7aef\u53e3 python3 manage . py runserver 0.0 . 0.0 : 8000 3. INSTALLED_APPS \u6307\u5b9a\u5df2\u5b89\u88c5\u7684\u5e94\u7528 \uff0c \u5982\u679c\u7531\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u7684\u8bdd\u9700\u8981\u5728\u6b64\u6ce8\u518c 4. MIDDLEWARE \u4e2d\u95f4\u4ef6 \uff0c \u5982\u679c\u6709\u81ea\u5b9a\u4e49\u7684\u4e2d\u95f4\u4ef6 \uff0c \u9700\u8981\u5728\u6b64\u6ce8\u518c 5. ROOT_URLCONF \u6307\u5b9a\u9879\u76ee\u7684\u57fa\u7840\u8def\u7531\u914d\u7f6e\u6587\u4ef6 6. TEMPLATES \u914d\u7f6e\u6a21\u677f\u7684\u76f8\u5e94\u4fe1\u606f 7. DATABASES \u914d\u7f6e\u6570\u636e\u5e93\u7684\u4fe1\u606f 8. LANGUAGE_CODE \u8bbe\u7f6e\u8bed\u8a00 \uff0c \u4e3b\u8981\u8bbe\u7f6e\u4e2d\u6587\u7684\u8bdd \uff0c \u5141\u8bb8\u5c06\u503c\u6539\u4e3a 'zh-Hans' 9. TIME_ZONE \u6307\u5b9a\u65f6\u533a \uff0c \u9ed8\u8ba4\u65f6\u533a \uff0c \u5141\u8bb8\u5c06\u503c\u66f4\u6539\u4e3a \"Asia/Shanghai\"","title":"Django\u9879\u76ee\u7ed3\u6784"},{"location":"django/django/#url","text":"urls.py \u9ed8\u8ba4\u5728\u4e3b\u76ee\u5f55\u4e2d\uff0c\u4e3b\u8def\u7531\u914d\u7f6e\u6587\u4ef6\uff0c\u4f1a\u5305\u542b\u6700\u57fa\u672c\u7684\u5730\u5740\u6620\u5c04\uff0c\u6bcf\u4e2a\u5730\u5740\u8bbf\u95ee\u90fd\u5fc5\u987b\u8981\u5148\u7ecf\u8fc7\u8be5\u6587\u4ef6 \u4f5c\u7528\uff1a\u901a\u8fc7urls\u4e2d\u5b9a\u4e49\u597d\u7684\u5730\u5740\u627e\u5230\u5bf9\u5e94\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570 urlpatterns = [ path ( 'admin/' , admin . site . urls ), ] path() \u4f5c\u7528\uff1a\u4e3a\u4e86\u5339\u914d\u7528\u6237\u7684\u8bbf\u95ee\u8def\u5f84 \u8bed\u6cd5: from django.urls import path path(route, view, kwargs=None, name=None) route: \u5339\u914d\u8bf7\u6c42\u7684url view: \u5730\u5740\u5339\u914d\u4e0a\u4e4b\u540e\u8981\u6267\u884c\u64cd\u4f5c\u7684\u89c6\u56fe\u5904\u7406\u51fd\u6570 kwargs: \u5b57\u5178\uff0c\u7528\u6765\u60f3view\u4f20\u53c2\u7684\uff0c\u53ef\u4ee5\u7701\u7565 name: \u4e3aurl\u8d77\u522b\u540d, \u5728\u5730\u5740\u53cd\u5411\u89e3\u6790\u65f6\u4f7f\u7528 \u5411url\u4f20\u9012\u53c2\u6570 \u65b9\u5f0f\u4e00\uff1a\u901a\u8fc7path\u7684\u53c2\u6570kwargs\u7684\u65b9\u5f0f\u4f20\u9012\uff0c\u4e0d\u63a8\u8350\uff0c\u8fd9\u91cc\u4f9d\u8d56\u4e86django\u6846\u67b6\uff0c\u4e0d\u901a\u7528\u3002 \u65b9\u5f0f\u4e8c\uff1a\u901a\u8fc7http\u534f\u8bae\u8fdb\u884c\u4f20\u53c2 get\u8bf7\u6c42 http:// xxxx.com/login?id=1&token=xxx post\u8bf7\u6c42 http:// xxx.com/login \u6570\u636e\u653e\u5728 form-data\u91cc\uff0c\u8be6\u7ec6\u4e00\u70b9\u7684\u8bdd\u5c31\u662f\u653e\u5728http\u8bf7\u6c42\u7684\u8bf7\u6c42\u4f53\u91cc\uff08\u53ef\u4ee5\u53bb\u770b\u770bhttp\u534f\u8bae\u7684\u5185\u5bb9\uff09 \u6570\u636e\u600e\u4e48\u53d6\uff1f\uff1f \u540e\u9762\u7684\u6559\u7a0b\u4f1a\u8bb2\u5230\u3002","title":"url\u7684\u4f7f\u7528"},{"location":"django/django/#django_3","text":"\u4ec0\u4e48\u662f\u5e94\u7528 \uff1f \u5e94\u7528\u5c31\u662f\u7f51\u7ad9\u4e2d\u7684\u4e00\u4e2a\u72ec\u7acb\u7684\u6a21\u5757 \u5982: \u7f51\u6613\u7f51\u7ad9\u53ef\u5206\u4e3a\u82e5\u5e72\u5e94\u7528\u7ec4\u6210 \u200b \u65b0\u95fb\u5e94\u7528: \u4e0e\u65b0\u95fb\u76f8\u5173\u7684\u5185\u5bb9 \u200b \u8f66\u5e94\u7528: \u4e0e\u6c7d\u8f66\u76f8\u5173\u7684\u5185\u5bb9 \u200b \u79d1\u6280\u5e94\u7528: \u4e0e\u79d1\u6280\u76f8\u5173\u7684\u5185\u5bb9 \u5728django\u4e2d, \u4e3b\u76ee\u5f55\u4e00\u822c\u4e0d\u5904\u7406\u5177\u4f53\u7684\u8bf7\u6c42, \u4e3b\u76ee\u5f55\u4e00\u822c\u5904\u7406\u7684\u662f\u9879\u76ee\u7684\u521d\u59cb\u5316\u64cd\u4f5c \u5904\u7406\u7684\u662f\u521d\u59cb\u5316\u64cd\u4f5c, \u4ee5\u53ca\u8bf7\u6c42\u7684\u5206\u53d1(\u5206\u5e03\u5f0f\u8bf7\u6c42\u5904\u7406), \u800c\u5177\u4f53\u7684\u8bf7\u6c42\u662f\u7531\u5404\u4e2a\u5e94\u7528\u53bb\u5904\u7406. \u521b\u5efa\u5e94\u7528 \u547d\u4ee4 python manage . py startapp \u5e94\u7528\u7684\u540d\u79f0 \u9700\u8981\u5728settings.py \u4e2d\u8fdb\u884c\u6ce8\u518c \uff0c \u5728INSTALLED_APPS \u4e2d\u8ffd\u52a0\u5e94\u7528\u7684\u540d\u79f0\u6765\u6ce8\u518c\u5e94\u7528 INSTALLED_APPS = [ 'django.contrib.admin' , ... ... '\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u540d\u79f0' ] \u5e94\u7528\u7684\u89e3\u6790\u7ec4\u6210 migrations \u6587\u4ef6\u5939 : \u5b58\u653e\u6570\u636e\u5e93\u7684\u4e2d\u95f4\u6587\u4ef6 __init__.py : \u5e94\u7528\u7684\u521d\u59cb\u5316\u6587\u4ef6 admin.py : \u5e94\u7528\u7684\u540e\u53f0\u7ba1\u7406\u914d\u7f6e\u6587\u4ef6 apps.py : \u548c\u5e94\u7528\u7684\u5c5e\u6027\u914d\u7f6e\u6587\u4ef6 models.py : Models \u4e0e \u6a21\u578b\u76f8\u5173\u7684\u6620\u5c04\u6587\u4ef6 tests.py : \u5e94\u7528\u7684\u5355\u5143\u6d4b\u8bd5\u6587\u4ef6 views.py : \u89c6\u56fe\u5904\u7406\u51fd\u6570\u7684\u6587\u4ef6 \u5206\u90e8\u5f0f\u7684\u8def\u7531\u7cfb\u7edf \u5728\u6bcf\u4e2a\u5e94\u7528\u4e2d\u5206\u522b\u521b\u5efaurls.py, \u683c\u5f0f\u53c2\u8003\u4e3b\u8def\u7531\u6587\u4ef6 \u76ee\u7684: \u4e3a\u4e86\u5904\u7406\u5404\u4e2a\u5e94\u7528\u4e2d\u7684\u8bf7\u6c42\u8def\u7531 \u7528\u6cd5: (\u8fd9\u91cc\u76f4\u63a5\u5f15\u7528django\u5b98\u65b9\u7684\u4f8b\u5b50) \u521b\u5efa\u4e00\u4e2apolls\u5e94\u7528\uff1a python manage . py startapp polls django_test/setting.py \u58f0\u660epolls\u6a21\u5757 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'polls' # <- \u8fd9\u91cc ] \u5728polls\u5305\u4e0b\u521b\u5efa urls.py \u6a21\u5757\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2ahttp://127.0.0.1:8000/ \u8def\u7531\u3002 from django.urls import path from .views import index_view urlpatterns = [ path ( '' , index_view , name = 'index' ), ] \u7f16\u5199\u8bd5\u56fe\u51fd\u6570 polls/views.py from django.http import HttpResponse from django.shortcuts import render # Create your views here. def index_view ( request ): return HttpResponse ( 'index' ) \u5c06polls\u5e94\u7528\u7684urls\u6ce8\u518c\u5230\u4e3b\u8def\u7531\u7cfb\u7edf\u4e2d\uff0c django_test/urls.py from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( '' , include ( \"polls.urls\" )), ] \u542f\u52a8\u670d\u52a1\uff0c\u8bbf\u95ee\u4e3b\u9875\uff1a http://127.0.0.1:8000/","title":"Django\u4e2d\u7684\u5e94\u7528"},{"location":"django/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/","text":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668 \u00b6 \u9996\u5148\u5728app\u5e95\u4e0b\u65b0\u5efa\u4e00\u4e2atemplatetags\u76ee\u5f55\uff0c\u91cc\u9762\u6dfb\u52a0\u4e24\u4e2a\u6587\u4ef6, __init__.py extratags.py \u7136\u540e\u5728settings.py\u4e2d\u628atemplatetags\u76ee\u5f55\u4f5c\u4e3aapp\u6ce8\u518c INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'myapp.apps.MyappConfig' , 'myapp.templatetags' , # \u4f5c\u4e3aapp\u6ce8\u518c ] \u7136\u540e\u5728extratags.py\u6587\u4ef6\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u5668\uff1a from django import template register = template . Library () @register . filter ( name = 'cut' ) # \u8fc7\u6ee4\u5668\u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u65f6\u7684name def myCut ( value , arg ): # \u628a\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570arg\u66ff\u6362\u4e3a'~' return value . replace ( arg , '~' ) \u7f16\u8f91\u89c6\u56fe\u51fd\u6570\uff0c\u628avalue\u4f20\u9012\u7ed9\u6a21\u677f\u6587\u4ef6\uff1a def index ( request ): return render ( request , 'one.html' , { 'value' : 'Hello, dandan!' }) \u5728\u6a21\u677f\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u8981\u5148\u5bfc\u5165extratags.py\u6587\u4ef6\uff1a {% load extratags %} <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > {# \u628avalue\u4e2d\u7684\u201c\uff01\u201d\u66ff\u6362\u6389#} {{ value | cut:'!' }} </ body > </ html > \u7f16\u8f91\u597durls.py\u6587\u4ef6\uff0c\u542f\u52a8\u670d\u52a1\u5668\uff0c\u5728\u6d4f\u89c8\u5668\u8bbf\u95ee\u5c31\u53ef\u4ee5\u770b\u5230\u66ff\u6362\u540e\u7684\u6548\u679c\u4e86 \u81ea\u5b9a\u4e49\u6807\u7b7e \u00b6 \u81ea\u5b9a\u4e49\u6807\u7b7e\u548c\u4e0a\u9762\u7684\u6b65\u9aa4\u4e00\u6837\uff0c\u53ea\u662f\u5b9a\u4e49\u7684\u5f62\u5f0f\u6709\u6240\u6539\u53d8(\u81ea\u5b9a\u4e49\u6807\u7b7e\uff0c\u683c\u5f0f\u5316\u8fd4\u56de\u5f53\u524d\u65f6\u95f4)\uff1a # extra_tags.py # \u81ea\u5b9a\u4e49\u6807\u7b7e\uff0c\u683c\u5f0f\u5316\u8fd4\u56de\u5f53\u524d\u65f6\u95f4 from django import template register = template . Library () @register . tag ( name = 'current_time' ) def do_current_time ( parse , token ): # parse\u89e3\u6790\u5668\u5bf9\u8c61\uff0ctoken\u88ab\u89e3\u6790\u7684\u5bf9\u8c61\uff0c\u5305\u542b\u6807\u7b7e\u7684\u540d\u5b57\u548c\u683c\u5f0f\u5316\u7684\u683c\u5f0f try : tag_name , format_string = token . split_contents () except : raise template . TemplateSyntaxError ( 'syntax' ) return CurrentNode ( format_string [ 1 : - 1 ]) # \u4f20\u5165\u6a21\u677f\u4e2d\u7684\u8282\u70b9\u7c7b import datetime class CurrentNode ( template . Node ): def __init__ ( self , format ): self . format_string = str ( format ) # \u628a\u5f53\u524d\u65f6\u95f4\u683c\u5f0f\u5316\u540e\u8fd4\u56de def render ( self , context ): now = datetime . datetime . now () return now . strftime ( self . format_string ) \u5728\u6a21\u677f\u4e2d\u4f7f\u7528\uff1a {% current_time \"%Y-%m-%d %H:%M:%S\" %}","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u548c\u81ea\u5b9a\u4e49\u6807\u7b7e"},{"location":"django/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/#_1","text":"\u9996\u5148\u5728app\u5e95\u4e0b\u65b0\u5efa\u4e00\u4e2atemplatetags\u76ee\u5f55\uff0c\u91cc\u9762\u6dfb\u52a0\u4e24\u4e2a\u6587\u4ef6, __init__.py extratags.py \u7136\u540e\u5728settings.py\u4e2d\u628atemplatetags\u76ee\u5f55\u4f5c\u4e3aapp\u6ce8\u518c INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'myapp.apps.MyappConfig' , 'myapp.templatetags' , # \u4f5c\u4e3aapp\u6ce8\u518c ] \u7136\u540e\u5728extratags.py\u6587\u4ef6\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u5668\uff1a from django import template register = template . Library () @register . filter ( name = 'cut' ) # \u8fc7\u6ee4\u5668\u5728\u6a21\u677f\u4e2d\u4f7f\u7528\u65f6\u7684name def myCut ( value , arg ): # \u628a\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570arg\u66ff\u6362\u4e3a'~' return value . replace ( arg , '~' ) \u7f16\u8f91\u89c6\u56fe\u51fd\u6570\uff0c\u628avalue\u4f20\u9012\u7ed9\u6a21\u677f\u6587\u4ef6\uff1a def index ( request ): return render ( request , 'one.html' , { 'value' : 'Hello, dandan!' }) \u5728\u6a21\u677f\u6587\u4ef6\u4e2d\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u8981\u5148\u5bfc\u5165extratags.py\u6587\u4ef6\uff1a {% load extratags %} <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > </ head > < body > {# \u628avalue\u4e2d\u7684\u201c\uff01\u201d\u66ff\u6362\u6389#} {{ value | cut:'!' }} </ body > </ html > \u7f16\u8f91\u597durls.py\u6587\u4ef6\uff0c\u542f\u52a8\u670d\u52a1\u5668\uff0c\u5728\u6d4f\u89c8\u5668\u8bbf\u95ee\u5c31\u53ef\u4ee5\u770b\u5230\u66ff\u6362\u540e\u7684\u6548\u679c\u4e86","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668"},{"location":"django/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/#_2","text":"\u81ea\u5b9a\u4e49\u6807\u7b7e\u548c\u4e0a\u9762\u7684\u6b65\u9aa4\u4e00\u6837\uff0c\u53ea\u662f\u5b9a\u4e49\u7684\u5f62\u5f0f\u6709\u6240\u6539\u53d8(\u81ea\u5b9a\u4e49\u6807\u7b7e\uff0c\u683c\u5f0f\u5316\u8fd4\u56de\u5f53\u524d\u65f6\u95f4)\uff1a # extra_tags.py # \u81ea\u5b9a\u4e49\u6807\u7b7e\uff0c\u683c\u5f0f\u5316\u8fd4\u56de\u5f53\u524d\u65f6\u95f4 from django import template register = template . Library () @register . tag ( name = 'current_time' ) def do_current_time ( parse , token ): # parse\u89e3\u6790\u5668\u5bf9\u8c61\uff0ctoken\u88ab\u89e3\u6790\u7684\u5bf9\u8c61\uff0c\u5305\u542b\u6807\u7b7e\u7684\u540d\u5b57\u548c\u683c\u5f0f\u5316\u7684\u683c\u5f0f try : tag_name , format_string = token . split_contents () except : raise template . TemplateSyntaxError ( 'syntax' ) return CurrentNode ( format_string [ 1 : - 1 ]) # \u4f20\u5165\u6a21\u677f\u4e2d\u7684\u8282\u70b9\u7c7b import datetime class CurrentNode ( template . Node ): def __init__ ( self , format ): self . format_string = str ( format ) # \u628a\u5f53\u524d\u65f6\u95f4\u683c\u5f0f\u5316\u540e\u8fd4\u56de def render ( self , context ): now = datetime . datetime . now () return now . strftime ( self . format_string ) \u5728\u6a21\u677f\u4e2d\u4f7f\u7528\uff1a {% current_time \"%Y-%m-%d %H:%M:%S\" %}","title":"\u81ea\u5b9a\u4e49\u6807\u7b7e"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/","text":"\u8fd9\u662f\u672c\u4e13\u680f\u7684\u7b2c\u4e00\u90e8\u5206\uff1aDocker \u5165\u95e8\uff0c\u5171 3 \u7bc7\uff0c\u5e2e\u52a9\u5927\u5bb6\u8fdb\u5165 Docker \u7684\u4e16\u754c\u3002\u4e0a\u4e00\u7bc7\uff0c\u6211\u5e26\u5927\u5bb6\u4e86\u89e3\u4e86 Docker \u5165\u95e8\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u77e5\u9053\u4e86\u5982\u4f55\u8fd0\u884c\u548c\u64cd\u4f5c\u5bb9\u5668\u3002\u4e0b\u9762\u6211\u4eec\u4e00\u8d77\u8fdb\u5165\u7b2c\u4e09\u7bc7\u7684\u5185\u5bb9\u3002 Docker \u7684\u7248\u672c\u5386\u7a0b \u00b6 \u5feb\u901f\u8fed\u4ee3\u671f \u00b6 \u5728\u7b2c\u4e00\u7bc7\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 Docker \u662f\u5728 2013 \u5e74\u9996\u6b21\u4eae\u76f8\uff0c\u5728 2014 \u5e74 6 \u6708 9 \u65e5\u53d1\u5e03\u4e86 1.0.0 \u7248\u672c\uff1b**\u76f4\u5230 2017 \u5e74\uff0cDocker \u7684\u7248\u672c\u53f7\u90fd\u662f X.Y.Z \u8fd9\u6837\u7684\u683c\u5f0f\u3002**\u5dee\u4e0d\u591a\u6bcf 2~3 \u4e2a\u6708\u4f1a\u5347\u4e00\u6b21 Y \u7684\u7248\u672c\u53f7\uff0c\u6bd4\u5982\uff1a1.3.0 \u662f 2014 \u5e74 10 \u6708\u53d1\u5e03\u7684\uff0c1.4.0 \u5219\u662f 2014 \u5e74 12 \u6708\u53d1\u5e03\u3002 2017 \u5e74 2 \u6708 8 \u65e5 Docker \u53d1\u5e03\u4e86 1.13.1 \u7248\u672c\uff0c\u8fd9\u662f **\u6700\u540e\u4e00\u4e2a \u4ee5 X.Y.Z \u683c\u5f0f\u547d\u540d\u7684\u7248\u672c**\u4e86\u3002 \u5728\u8fd9\u4e2a\u9636\u6bb5\uff0cDocker \u5728\u4e3b\u6d41 Linux \u53d1\u884c\u7248\u4e0a\u7684\u5b89\u88c5\u5305\u4e00\u822c\u53eb\u505a docker\u3001docker-engine \u6216 docker.io\uff0c\u6240\u4ee5\u73b0\u5728\u5982\u679c\u4f60\u9700\u8981\u5b89\u88c5\u65b0\u7248\u672c Docker \u7684\u8bdd\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86\u4e0a\u8ff0\u5305\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u4e00\u822c\u4f1a\u5efa\u8bae\u4f60\u5148\u5220\u9664\u6389\u3002 \u540c\u5e74 Docker \u5ba3\u5e03\u5c06\u539f GitHub \u4e0a\u5f00\u6e90\u7684 Docker \u9879\u76ee \u66f4\u540d\u4e3a Moby \uff0c\u8fd9\u6b21\u66f4\u540d\u4e4b\u540e\uff0c\u4ea7\u751f\u4e86\u51e0\u4e2a\u91cd\u8981\u7684\u53d8\u5316\uff1a Moby \u9879\u76ee\u5c06\u4f5c\u4e3a\u4e0a\u6e38\u7684\u5f00\u6e90\u5f00\u53d1\u9879\u76ee Docker CE \u662f\u57fa\u4e8e Moby \u7684\u514d\u8d39\u53d1\u5e03\u7248\u672c\uff08\u4e5f\u662f\u73b0\u5728\u5927\u5bb6\u6700\u5e38\u7528\u7684\uff09 Docker EE \u662f\u57fa\u4e8e Docker CE \u7684\u5546\u4e1a\u4ea7\u54c1\u7248\u672c \u73b0\u5728\u5bf9\u4e8e\u6211\u4eec\u800c\u8a00\uff0c\u53ef\u80fd\u4e0a\u6e38\u9879\u76ee\u53eb Docker \u6216\u8005\u53eb Moby \u5df2\u7ecf\u4e0d\u4f1a\u592a\u5728\u610f\u4e86\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e9b\u6539\u52a8\u5e26\u6765\u7684\u5f71\u54cd\u662f\u5c06\u539f\u672c\u7edf\u4e00\u7684\u9879\u76ee\u5206\u62c6\u6210\u4e86\u5f88\u591a\u4e0d\u540c\u7684\u7ec4\u4ef6\uff0c\u4e4b\u540e\u518d\u8fdb\u884c\u7ec4\u7ec7\uff0c\u8fd9\u5f53\u7136\u4e5f\u4f1a\u4e3a\u7406\u89e3 Docker \u4ee3\u7801\u7b49\u5e26\u6765\u4e00\u5b9a\u7684\u590d\u6742\u5ea6\u3002\u5728\u672c\u6b21\u4e13\u680f\u7684\u6700\u540e\u4e00\u90e8\u5206\uff0c\u6211\u4f1a\u4e0e\u4f60\u5206\u4eab Docker \u4e0a\u6e38\u9879\u76ee\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u53c2\u4e0e\u5230 Docker \u9879\u76ee\u4e2d\u53bb\u3002 \u84ec\u52c3\u53d1\u5c55\u671f \u00b6 \u5230 2017 \u5e74\u65f6\uff0cDocker \u5df2\u7ecf\u9762\u4e16 4 \u5e74\u5de6\u53f3\u7684\u65f6\u95f4\uff0c\u8fd9\u671f\u95f4 Docker \u8fc5\u901f\u6500\u5347\u6210\u4e86\u65b0\u65f6\u4ee3\u7684\u6280\u672f\u8d8b\u52bf\u3002\u800c Docker \u7684\u4e3b\u4f53\u529f\u80fd\u4e5f\u5df2\u7ecf\u76f8\u5bf9\u5b8c\u5584\u3002\u968f\u7740 Docker Inc. \u6709\u4e86\u4f01\u4e1a\u7ea7\u4ea7\u54c1\uff0c\u8fd9\u65f6\u5019 Docker \u7684\u7248\u672c\u53f7\u547d\u540d\u89c4\u5219\u4e5f\u968f\u4e4b\u53d1\u751f\u4e86\u53d8\u5316\u3002 2017 \u5e74 3 \u6708\uff0cDocker \u53d1\u5e03\u4e86 Docker CE 17.03.0-ce \u548c Docker EE 17.03.0-ee-1\u3002\u4ece\u6b64\u4e4b\u540e\uff0cDocker \u5f00\u59cb\u4e86\u84ec\u52c3\u53d1\u5c55\u671f\uff0c \u53d1\u5e03\u5468\u671f\u6539\u6210\u4e86\u6bcf\u6708\u4e00\u6b21\uff0c\u540c\u65f6\u7248\u672c\u547d\u540d\u4e5f\u6362\u6210\u4e86 YY.MM. \u7684\u5f62\u5f0f \uff0c\u5f53\u7136\u4e5f\u4e3a\u4e86\u8003\u8651\u5230\u793e\u533a\u7528\u6237\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u53ef\u80fd\u4e0d\u4f1a\u5f88\u9891\u7e41\u7684\u5347\u7ea7\uff0c\u6240\u4ee5\u63d0\u4f9b\u8fc7\u4e86\u4e24\u79cd\u6e20\u9053\uff1a \u6708\u5ea6\u66f4\u65b0\uff1a\u8fd9\u4fbf\u662f\u6211\u521a\u624d\u6240\u8bf4\u7684\u90a3\u79cd\u65b9\u5f0f\uff0c\u6bcf\u6708\u66f4\u65b0\uff0c\u4f46\u662f\u6bcf\u6708\u66f4\u65b0\u7684\u8fd9\u4e2a\u7248\u672c\u53ea\u4f1a\u5728\u4e0b\u4e2a\u7248\u672c\u53d1\u5e03\u4e4b\u524d\u5f97\u5230\u5b89\u5168\u66f4\u65b0\u548c\u9519\u8bef\u4fee\u6b63\uff1b\u5728\u4e0b\u4e2a\u7248\u672c\u53d1\u5e03\u540e\uff0c\u4fbf\u4e0d\u518d\u66f4\u65b0\u4e86\u3002\u4f8b\u5982\uff1a17.04.0-ce \u5728 17.05.0-ce \u53d1\u5e03\u524d\u90fd\u80fd\u5f97\u5230\u5b89\u5168\u66f4\u65b0\u548c\u9519\u8bef\u4fee\u6b63\u7684\u652f\u6301\uff0c\u4e00\u65e6 17.05.0-ce \u53d1\u5e03\u540e\uff0c17.04.0-ce \u5c31\u5c06\u7ed3\u675f\u751f\u547d\u5468\u671f\uff0c\u4e0d\u518d\u66f4\u65b0\u3002 \u5b63\u5ea6\u66f4\u65b0\uff1a\u6307\u7684\u662f\u6bcf\u4e2a\u5b63\u5ea6\u7684\u9996\u4e2a\u7248\u672c\uff0c\u5728\u53d1\u5e03\u4e4b\u540e\uff0c\u5728 4 \u4e2a\u6708\u5185\u90fd\u5c06\u6536\u5230\u5b89\u5168\u66f4\u65b0\u548c\u9519\u8bef\u4fee\u6b63\u3002\u4f8b\u5982\uff1a17.06.0-ce \u5728 17.09.0-ce \u53d1\u5e03\u4e4b\u524d\uff0c\u8fd9 4 \u4e2a\u6708\u5185\u90fd\u53ef\u4ee5\u5f97\u5230\u5b89\u5168\u66f4\u65b0\u548c\u9519\u8bef\u4fee\u6b63\uff0c\u4e00\u65e6 17.09.0-ce \u53d1\u5e03\u540e\uff0c17.06.0-ce \u5c31\u5c06\u7ed3\u675f\u751f\u547d\u5468\u671f\uff0c\u4e0d\u518d\u66f4\u65b0\u3002 \u6240\u4ee5 \u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u6211\u4f1a\u5efa\u8bae\u4f60\u9009\u62e9\u5b63\u5ea6\u66f4\u65b0\u7684\u7248\u672c \uff0c\u56e0\u4e3a\u5176\u80fd\u5f97\u5230\u7684\u652f\u6301\u65f6\u95f4\u6700\u957f\uff0c\u4e5f\u4e0d\u81f3\u4e8e\u603b\u662f\u9700\u8981\u66f4\u65b0\u3002 \u7a33\u6b65\u63d0\u5347\u671f \u00b6 \u4e4b\u540e\u65f6\u95f4\u7ebf\u5230\u4e86 2018 \u5e74\uff0c\u6b64\u65f6 Docker \u7531\u4e8e\u4e4b\u524d\u51e0\u5e74\u7684\u84ec\u52c3\u53d1\u5c55\uff0c\u5bb9\u5668\u5316\u5df2\u6210\u4e3a\u4e3b\u6d41\uff1b\u52a0\u4e0a Docker \u81ea\u8eab\u4e5f\u65e5\u76ca\u6210\u719f\uff0c\u6210\u4e3a\u4e86\u529f\u80fd\u5b8c\u5907\u7684\u201c\u5bb9\u5668\u5e73\u53f0\u201d\uff0c Docker \u73b0\u5728\u9700\u8981\u63d0\u4f9b\u66f4\u52a0\u7a33\u5b9a\u53ef\u9760\u7684\u7248\u672c \u3002 \u6240\u4ee5\u5728 2018 \u5e74 6 \u6708 Docker \u516c\u53f8\u5ba3\u5e03\uff0c\u5c06 Docker \u7684\u53d1\u5e03\u5468\u671f\u4fee\u6539\u4e3a\u534a\u5e74\u66f4\u65b0\u3002Docker 18.06 CE \u7248\u672c\u5c06\u4f1a\u662f\u6700\u540e\u4e00\u4e2a\u6709 4 \u4e2a\u6708\u7ef4\u62a4\u5468\u671f\u7684\u7248\u672c\uff0c\u4e0b\u4e00\u4e2a\u7248\u672c Docker 18.09 CE \u4f1a\u6709 7 \u4e2a\u6708\u7684\u7ef4\u62a4\u671f\u3002\u4e4b\u540e\u5728 2019 \u5e74 7 \u6708\u4efd\u53d1\u5e03\u4e86 Docker 19.03\uff0c\u5728\u8fd9\u4e2a\u7248\u672c\u6b63\u5f0f\u53d1\u5e03\u4e4b\u524d\uff0c\u7ecf\u5386\u4e86 5 \u4e2a beta \u7248\u672c\u30013 \u4e2a rc \u7248\u672c\uff0c\u53ef\u4ee5\u770b\u5230\u7ecf\u8fc7\u8fd9\u6b21\u6539\u53d8\u540e\uff0cDocker \u53d1\u5e03\u65b0\u7248\u672c\u662f\u975e\u5e38\u614e\u91cd\u7684\u3002 \u6240\u4ee5\u5728 2018 \u5e74 6 \u6708 Docker \u516c\u53f8\u5ba3\u5e03\uff0c\u5c06 Docker \u7684\u53d1\u5e03\u5468\u671f\u4fee\u6539\u4e3a\u534a\u5e74\u66f4\u65b0\u3002Docker 18.06 CE \u7248\u672c\u5c06\u4f1a\u662f\u6700\u540e\u4e00\u4e2a\u6709 4 \u4e2a\u6708\u7ef4\u62a4\u5468\u671f\u7684\u7248\u672c\uff0c\u4e0b\u4e00\u4e2a\u7248\u672c Docker 18.09 CE \u4f1a\u6709 7 \u4e2a\u6708\u7684\u7ef4\u62a4\u671f\u3002\u4e4b\u540e\u5728 2019 \u5e74 7 \u6708\u4efd\u53d1\u5e03\u4e86 Docker 19.03\uff0c\u5728\u8fd9\u4e2a\u7248\u672c\u6b63\u5f0f\u53d1\u5e03\u4e4b\u524d\uff0c\u7ecf\u5386\u4e86 5 \u4e2a beta \u7248\u672c\u30013 \u4e2a rc \u7248\u672c\uff0c\u53ef\u4ee5\u770b\u5230\u7ecf\u8fc7\u8fd9\u6b21\u6539\u53d8\u540e\uff0cDocker \u53d1\u5e03\u65b0\u7248\u672c\u662f\u975e\u5e38\u614e\u91cd\u7684\u3002 \u4f60\u53ef\u80fd\u4f1a\u6709\u51e0\u4e2a\u56f0\u60d1\uff1a 1. \u4e3a\u4ec0\u4e48\u7248\u672c\u53f7\u662f 19.03 \u800c\u5b83\u5374\u5728 7 \u6708\u53d1\u5e03\uff1f \u8fd9\u662f\u56e0\u4e3a Docker \u4f7f\u7528 YY.MM \u7684\u7248\u672c\u683c\u5f0f\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u8bf4\u660e\u8282\u594f\uff0c\u4fdd\u8bc1\u4e00\u822c\u53ef\u7528\u7684\u201c\u671f\u671b\u65e5\u671f\u201d\uff0c\u4f46\u5e76\u4e0d\u4f1a\u4e3a\u4e86\u8be5\u65e5\u671f\u800c\u63d0\u524d\u53d1\u5e03\u4e00\u4e2a\u4e0d\u53ef\u9760\u6216\u8005\u529f\u80fd\u4e0d\u5b8c\u5907\u7684\u7248\u672c\u3002 \u53e6\u5916\uff0c\u65b0\u7248\u672c\u53d1\u5e03\u65f6\uff0c\u4f1a\u5c3d\u53ef\u80fd\u5c06\u6240\u6709\u7684\u4f9d\u8d56\u66f4\u65b0\u5230\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u672c\uff0c\u4ee5\u4fdd\u8bc1\u5728 Docker \u7684\u4e0b\u4e00\u4e2a\u7248\u672c\u53d1\u5e03\u4e4b\u524d\uff0c\u7528\u6237\u6240\u7528\u7684 Docker \u7248\u672c\u4e2d\u4e0d\u5305\u542b\u592a\u843d\u540e\u7684\u4ee3\u7801\u5305\u3002 2. \u4e3a\u4ec0\u4e48 18.09 \u7248\u672c\u53d1\u5e03\u65e5\u671f\u662f 2018 \u5e74 11 \u6708\uff0c\u4f46\u662f\u76f4\u5230 2019 \u5e74 8 \u6708\u5b83\u4ecd\u7136\u5728\u66f4\u65b0\u5c0f\u7248\u672c\uff1f \u56e0\u4e3a Docker \u7684\u6700\u65b0\u7248\u672c 19.03 \u662f 2019 \u5e74 7 \u6708\u53d1\u5e03\u7684\uff0cDocker \u901a\u5e38\u4f1a\u4fdd\u6301\u524d\u4e00\u4e2a\u7248\u672c\u4e0e\u65b0\u7248\u672c\u7684\u7ef4\u62a4\u5468\u671f\u4e4b\u95f4\u91cd\u5408\u4e00\u4e2a\u6708\u5de6\u53f3\uff0c\u4ee5\u4fbf\u7ed9\u7528\u6237\u8db3\u591f\u591a\u7684\u65f6\u95f4\u6765\u8fdb\u884c\u5347\u7ea7\uff0c\u4ee5\u53ca\u53ef\u7528\u4e8e\u56de\u5f52\u6d4b\u8bd5\uff0c\u8ba9\u7528\u6237\u77e5\u9053\u4e0d\u4f1a\u56e0\u4e3a\u5347\u7ea7\u5230\u4e0b\u4e00\u4e2a\u7248\u672c\u800c\u9020\u6210\u4ec0\u4e48\u4e25\u91cd\u95ee\u9898\u3002 \u5c0f\u7ed3 \u00b6 \u4e0a\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86 Docker \u7248\u672c\u7684\u53d1\u5c55\u5386\u7a0b\uff0c\u5982\u679c\u4f60\u73b0\u5728\u9700\u8981\u65b0\u5b89\u88c5 Docker \u6216\u662f\u60f3\u8981\u5bf9\u73b0\u6709 Docker \u7248\u672c\u8fdb\u884c\u5347\u7ea7\uff0c\u6211\u4f1a\u5f3a\u70c8\u63a8\u8350\u4f60\u9009\u62e9 Docker 19.03\uff08\u622a\u81f3\u5f53\u524d\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u672c\uff09\u3002 \u4e3b\u8981\u539f\u56e0\u5982\u4e0b\uff1a \u5b83\u662f 2019 \u5e74 7 \u6708\u4efd\u53d1\u5e03\u7684\uff0c\u79bb\u793e\u533a\u7ed3\u675f\u7ef4\u62a4\u5468\u671f\u8fd8\u6709\u5f88\u957f\u65f6\u95f4\u3002\u5728\u6b64\u671f\u95f4\u4f60\u9047\u5230\u7684\u5404\u79cd\u95ee\u9898\u5747\u53ef\u53cd\u9988\u81f3\u793e\u533a\uff0c\u5e76\u4f1a\u5f97\u5230\u793e\u533a\u7684\u5e2e\u52a9\u3002 19.03 \u5305\u542b\u4e86\u66f4\u591a\u7279\u6027\uff0c\u8fd9\u4e9b\u7279\u6027\u7684\u4ecb\u7ecd\u4e0d\u662f\u672c\u7bc7\u7684\u91cd\u70b9\uff0c\u6211\u4eec\u5728\u540e\u7eed\u5185\u5bb9\u4e2d\u4f1a\u6d89\u53ca\u5e76\u8ba8\u8bba\u3002 \u5185\u6838\u517c\u5bb9\u6027 \u00b6 \u5982\u679c\u4f60\u662f\u521a\u63a5\u89e6 Docker\uff0c\u5e76\u4e14\u8981\u5728\u4e00\u53f0\u81ea\u5df1\u53ef\u81ea\u7531\u9009\u62e9\u5185\u6838\u7248\u672c\u6216\u7cfb\u7edf\u7248\u672c\u7684\u673a\u5668\u4e0a\u5b89\u88c5 Docker\uff0c\u90a3\u4f60\u53ef\u4ee5\u9009\u62e9\u8df3\u8fc7\u672c\u7bc7\u5269\u4f59\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u770b\u6211\u8fd9\u91cc\u7ed9\u51fa\u7684\u5efa\u8bae\uff08\u5269\u4f59\u5185\u5bb9\u4e2d\u4f1a\u6d89\u53ca\u4e00\u4e9b Docker \u7248\u672c\u4e0e\u5185\u6838\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u73b0\u5728\u8df3\u8fc7\u5e76\u4e0d\u5f71\u54cd\u540e\u7eed\u5185\u5bb9\uff09\uff1a \u5c3d\u53ef\u80fd\u5730\u4f7f\u7528\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u5185\u6838\u548c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4ee5\u53ca\u5b89\u88c5\u6700\u65b0\u4e14\u7a33\u5b9a\u7684 Docker \u7248\u672c\u3002 \u8fd9\u4e2a\u5efa\u8bae\u4e2d\u5305\u542b\u4e86\u4e24\u4e2a\u4fe1\u606f\uff1a \u9009\u62e9\u6700\u65b0\u4e14\u7a33\u5b9a\u7684 Docker \u7248\u672c\uff0c\u5173\u4e8e\u7248\u672c\u7684\u95ee\u9898\u524d\u9762\u5df2\u8fdb\u884c\u4e86\u8bf4\u660e\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\uff1b \u4f7f\u7528\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u5185\u6838\u548c\u64cd\u4f5c\u7cfb\u7edf\u3002 \u6ce8\uff1a\u8fd9\u90e8\u5206\u7684\u8ba8\u8bba\u53ea\u6d89\u53ca Docker CE \u4e0e Linux \u7cfb\u7edf\uff0c\u4e0d\u8ba8\u8bba Docker Desktop for Mac \u6216 Docker Desktop for Windows\u3002 \u6982\u89c8 \u00b6 \u8fd9\u91cc\u4ee5\u6211\u4eec\u5e73\u65f6\u6700\u5e38\u63a5\u89e6\u7684 x86_64/amd64 \u7684\u67b6\u6784\u4e3a\u4f8b\u3002 Docker \u9ed8\u8ba4\u63d0\u4f9b\u4e86 CentOS\u3001Debian\u3001Fedora\u3001Ubuntu \u7b49\u56db\u79cd Linux \u53d1\u884c\u7248\u4e0a\u7684\u5b98\u65b9\u5b89\u88c5\u6e90\uff0c\u5982\u679c\u4f60\u662f\u5728\u8fd9\u56db\u79cd\u53d1\u884c\u7248\u4e0a\u5b89\u88c5 Docker \u6211\u63a8\u8350\u4f60\u76f4\u63a5\u4f7f\u7528\u5b98\u65b9\u6e90\uff0c\u5e76\u5229\u7528\u7cfb\u7edf\u4e0a\u81ea\u5e26\u7684\u5305\u7ba1\u7406\u5668\u8fdb\u884c\u5b89\u88c5\uff0c\u6216\u8005\u5982\u540c\u7b2c\u4e8c\u7bc7\u4ecb\u7ecd\u7684\uff0c\u76f4\u63a5\u4f7f\u7528 https://get.docker.com/ \u63d0\u4f9b\u7684\u811a\u672c\u8fdb\u884c\u5b89\u88c5\u3002 \u5b98\u65b9\u6587\u6863 \u4e2d\u7b80\u8981\u7684\u5199\u4e86\u4e00\u4e9b\u5b89\u88c5 Docker \u7684\u5fc5\u987b\u9879\uff1a 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf 3.10 \u4ee5\u4e0a\u7684\u5185\u6838 iptables\u3001Git\u3001xz \u6216\u8005\u6302\u8f7d\u6b63\u786e\u7684 Cgroupfs \u4f46\u5199\u7684\u5176\u5b9e\u5f88\u6a21\u7cca\uff0c\u6211\u4eec\u5148\u770b\u770b**\u5185\u6838**\u76f8\u5173\u7684\u4fe1\u606f\u3002 \u5185\u6838 \u00b6 \u4e3a\u4ec0\u4e48\u4f1a\u9009\u62e9 3.10 \u7248\u672c\u7248\u672c\u7684\u5185\u6838\u5462\uff1f\u603b\u7684\u6765\u8bf4\u662f\u56e0\u4e3a 3.10 \u4e2d\u5305\u542b\u4e86 Docker \u6240\u9700\u7684\u5927\u591a\u6570\u7279\u6027\uff0c\u800c\u4e14 3.10 \u662f\u4e00\u4e2a LTS \u7248\u672c\uff0c\u8fd9\u91cc\u5148\u4e0d\u5177\u4f53\u5c55\u5f00\u4e86\uff0c\u6211\u4eec\u8fd8\u662f\u805a\u7126\u4e8e\u5185\u6838\u517c\u5bb9\u6027\u7684\u95ee\u9898\u4e0a\u3002 Linux 3.10 \u7248\u672c\u662f\u5728 2013 \u5e74 6 \u6708\u5e95\u53d1\u5e03\u7684\uff0c\u6211\u4eec\u6765\u770b\u770b\u4e0a\u8ff0\u51e0\u4e2a Linux \u53d1\u884c\u7248\u4f55\u65f6\u5f00\u59cb\u4f7f\u7528\u8be5\u5185\u6838\u7248\u672c\u7684\uff1a \u53d1\u884c\u7248 \u7248\u672c \u53d1\u5e03\u65e5\u671f \u5185\u6838\u7248\u672c CentOS 7.0-1406 2014 \u5e74 7 \u6708 3.10.0-123 Debian 8.0 2014 \u5e74 7 \u6708 3.10.0-123 Fedora 20 2013 \u5e74 12 \u6708 3.11 Ubuntu 13.10 2013 \u5e74 10 \u6708 Linux 3.11 \u53ef\u4ee5\u770b\u5230\uff0c\u4e0d\u540c\u7684\u53d1\u884c\u7248\u4f1a\u9009\u62e9\u4e0d\u540c\u7248\u672c\u7684\u5185\u6838\u3002\u6211\u4eec\u6765\u770b\u770b\u73b0\u5728\u8fd9\u4e9b\u53d1\u884c\u7248\u6240\u7528\u7684\u5185\u6838\u7248\u672c\uff1a \u53d1\u884c\u7248 \u7248\u672c \u53d1\u5e03\u65e5\u671f \u5185\u6838\u7248\u672c CentOS 7.7-1908 2019 \u5e74 9 \u6708 3.10.0-1062 CentOS 8.0-1905 2019 \u5e74 9 \u6708 4.18.0-80 Debian 10.0 2019 \u5e74 7 \u6708 Linux 4.19 Fedora 30 2019 \u5e74 4 \u6708 Linux 5.0 Ubuntu 19.04 2019 \u5e74 4 \u6708 Linux 5.0 \u53ef\u4ee5\u770b\u5230\u5185\u6838\u7248\u672c\u66f4\u65b0\u6700\u6162\u7684\u662f CentOS\uff0c\u800c\u4e00\u4e2a\u5f88\u503c\u5f97\u6ce8\u610f\u7684\u70b9\u662f\uff0cLinux 3.10 \u622a\u81f3 Linux 3.10.108 \u5c31\u5df2\u7ecf EOL\uff08End Of Life\uff09\u4e86\uff0c CentOS \u4f7f\u7528\u7684\u5185\u6838\u5176\u5b9e\u79fb\u690d\u4e86\u5f88\u591a\u9ad8\u7248\u672c Linux \u4e2d\u7684\u7279\u6027 \u3002 \u5176\u5b9e Docker \u548c\u5185\u6838\u517c\u5bb9\u6027\u95ee\u9898\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8bdd\u9898\uff0c\u53c2\u8003\u4e0a\u9762\u63d0\u4f9b\u7684\u8868\u683c\uff0cDebian\u3001Fedora\u3001Ubuntu \u7b49\u53d1\u884c\u7248\u7684\u5185\u6838\u66f4\u65b0\u90fd\u76f8\u5bf9\u53ca\u65f6\uff0c\u53ea\u8981\u4f60\u4e0d\u9009\u62e9\u592a\u8fc7\u65f6\u6216\u8005\u592a\u65e7\u7684\u7248\u672c\uff0cDocker \u5728\u53d1\u5e03\u4e4b\u524d\uff0c\u90fd\u4f1a\u5728\u8fd9\u51e0\u4e2a\u53d1\u884c\u7248\u7684\u6700\u65b0\u7248\u4e0a\u7ecf\u8fc7\u5927\u91cf\u6d4b\u8bd5\uff0c\u82e5\u6709\u95ee\u9898\u4e5f\u4f1a\u5c3d\u65e9\u4fee\u590d\u7684\u3002 \u6211\u4eec\u6765\u5355\u72ec\u8bf4\u4e0b CentOS\u3002 \u5982\u679c\u4f60\u4f7f\u7528 CentOS\uff0c\u8bf7\u52a1\u5fc5\u9009\u62e9 CentOS 7.6 \u53ca\u4ee5\u4e0a\u7248\u672c\uff0c\u6216\u662f\u5c06\u5185\u6838\u5347\u7ea7\u5230 3.10.0-957 \u53ca\u66f4\u9ad8\u7248\u672c \uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a\u5efa\u8bae\u5462\uff1f \u6211\u4eec\u4e3e\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\uff1aDocker \u7684\u5b58\u50a8\u9a71\u52a8\uff0c\u5728\u65e9\u5148\u7248\u672c\u4e2d\u5176\u5b9e\u5bf9\u4e8e CentOS \u7cfb\u7edf\u4e0a\u4e00\u76f4\u662f\u9ed8\u8ba4\u4f7f\u7528 Devicemapper \u7684\u5b58\u50a8\u9a71\u52a8\uff0c\u4f46\u6700\u8fd1\u7684 Docker \u7248\u672c\u4e2d\u5df2\u7ecf\u5c06 Devicemapper \u6807\u8bb0\u4e3a\u4e86\u5e9f\u5f03\u3002\u6240\u4ee5\u6211\u4eec\u63a8\u8350\u9009\u62e9 Overlay2 \u5b58\u50a8\u9a71\u52a8\uff0c\u5173\u4e8e\u8fd9\u4e2a\u5b58\u50a8\u9a71\u52a8\uff0c\u5728\u4e4b\u540e\u7684\u5b58\u50a8\u7bc7\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002 Docker \u7684 Overlay2 \u5b58\u50a8\u9a71\u52a8\u9700\u8981\u5185\u6838\u7684 Multiple lower layers \u652f\u6301\uff0c\u800c OverlayFS \u662f\u5728 Linux 3.18 \u65f6\u5408\u5e76\u8fdb\u5165\u5185\u6838\u7684\uff0c\u4f46\u5728 Linux 3.19 \u7248\u672c\u65f6\u624d\u6dfb\u52a0\u4e86 Multiple lower layers \u7684\u652f\u6301\u3002 Linux 3.19 \u6070\u597d\u662f 3.x \u7cfb\u5217\u7684\u6700\u540e\u4e00\u4e2a\u7248\u672c\uff0c\u4e24\u4e2a\u6708\u540e 4.0 \u4fbf\u53d1\u5e03\u4e86\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u4f1a\u66f4\u63a8\u8350\u91c7\u7528 4.0\u3002\u6240\u4ee5 \u5b98\u65b9\u6587\u6863 \u4e0a\u5bf9\u4e8e\u4f7f\u7528 Overlay2 \u5b58\u50a8\u9a71\u52a8\u7684\u5efa\u8bae\u662f\u4f7f\u7528 Linux 4.0 \u53ca\u66f4\u9ad8\u7248\u672c\u7684\u5185\u6838\u3002 \u800c CentOS \u7684\u5185\u6838\u4e2d\u5b58\u5728\u5927\u91cf\u7684\u53cd\u5411\u79fb\u690d\uff0cMmultiple lower layers \u7684\u7279\u6027\u4e5f\u88ab\u79fb\u690d\u5230\u4e86 CentOS 7.4 \u7684\u5185\u6838\u4e4b\u4e0a\u3002\u6240\u4ee5\u5982\u679c\u4f60\u53ea\u662f\u8003\u8651\u4f7f\u7528 Overlay2 \u4f5c\u4e3a\u5b58\u50a8\u9a71\u52a8\u7684\u8bdd\uff0c\u5219\u81f3\u5c11\u9700\u8981\u9009\u62e9 CentOS 7.4 \u5185\u6838\u7248\u672c\u4e3a 3.10.0-693 \u6216\u8005\u66f4\u65b0\u7248\u672c\u7684\u5185\u6838\u3002 \u5907\u6ce8\uff1aCentOS 7.x \u4e0e 8.x \u533a\u522b\u8f83\u591a\uff0c\u6240\u4ee5\u5355\u72ec\u5c06 CentOS \u7684 7 \u548c 8 \u7248\u672c\u5217\u4e86\u51fa\u6765\u3002 \u603b\u7ed3 \u00b6 \u901a\u8fc7\u672c\u7bc7\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Docker \u7248\u672c\u53ca\u5185\u6838\u517c\u5bb9\u6027\u76f8\u5173\u7684\u5185\u5bb9\u3002Docker \u5728\u73b0\u9636\u6bb5\u4f7f\u7528 YY.MM \u5f62\u5f0f\u7684\u7248\u672c\u53f7\uff0c\u4e00\u5e74\u53d1\u5e03\u4e24\u6b21\u7248\u672c\uff0c\u901a\u5e38\u5177\u6709 7 \u4e2a\u6708\u5de6\u53f3\u7684\u7ef4\u62a4\u5468\u671f\u3002\u5982\u679c\u5728\u8fdb\u884c Docker \u7248\u672c\u7684\u9009\u62e9\uff0c\u6211\u63a8\u8350\u4f60\u9009\u62e9\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u3002 \u5173\u4e8e\u5185\u6838\u65b9\u9762\uff0c\u5176\u5b9e\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8bdd\u9898\uff0c\u8fd9\u91cc\u53ea\u662f\u7b80\u5355\u7684\u4ecb\u7ecd\u4e86\u4e00\u4e0b\u3002\u800c\u4e14\u8003\u8651\u5185\u6838\u517c\u5bb9\u6027\u65f6\u4e0d\u4ec5\u9700\u8981\u8003\u8651 Docker \u81ea\u8eab\u76f8\u5173\u7684\u517c\u5bb9\u6027\uff0c\u8fd8\u9700\u8981\u8003\u8651 Docker \u4f9d\u8d56\u7684\u76f8\u5173\u5e95\u5c42\u7ec4\u4ef6\u4e0e\u5185\u6838\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002 \u6bd4\u5982\uff0cDocker \u5e95\u5c42\u7684\u5bb9\u5668\u8fd0\u884c\u65f6 RunC\u30022019 \u5e74 2 \u6708\uff0c\u6709\u4e00\u4e2a\u5173\u4e8e RunC \u7684\u63d0\u6743\u6f0f\u6d1e CVE-2019-5736 \uff0c\u7531\u4e8e\u662f\u4e00\u4e2a\u7d27\u6025\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u6240\u4ee5 RunC \u7684\u7ef4\u62a4\u8005\u8fdb\u884c\u4e86\u5feb\u901f\u4fee\u590d\uff0c\u800c\u5f53\u65f6\u7684\u4fee\u590d\u65b9\u5f0f\u662f\u589e\u52a0\u4e86\u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528 memfd_create(2) \u548c fcntl(2)\u3002\u800c\u8fd9\u4e24\u4e2a\u7684\u7cfb\u7edf\u8c03\u7528\u662f\u5728 Linux 3.17 \u65f6\u88ab\u52a0\u5165\u5185\u6838\u4e2d\u7684\u3002 \u9020\u6210\u7684\u5f71\u54cd\u5c31\u662f\u51e1\u662f\u5185\u6838\u4e0d\u652f\u6301\u8fd9\u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\uff0c\u5747\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002\u4f46\u4e5f\u6709\u90e8\u5206\u4f8b\u5916\uff0c\u6bd4\u5982 CentOS \u7684 3.10.0-514 \u5185\u6838\u53cd\u5411\u79fb\u690d\u4e86\u6b64\u7279\u6027\u3002 \u4e0d\u8fc7\u4e0a\u8ff0\u63d0\u5230\u7684\u4fee\u6b63\uff0c\u5728\u540e\u6765\u7684\u7248\u672c\u4e2d\u4fee\u6539\u4e86\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6240\u4ee5\u517c\u5bb9\u6027\u4e5f\u5f97\u5230\u4e86\u6539\u5584\u3002\u5173\u4e8e\u8fd9\u4e9b\u5e95\u5c42\u7ec4\u4ef6\uff0c\u6211\u5728\u540e\u7eed\u7684\u67b6\u6784\u7bc7\u4e2d\u4e5f\u90fd\u4f1a\u6709\u4ecb\u7ecd\u3002 \u6240\u4ee5\u5982\u679c\u4f60\u5bf9\u5185\u6838\u65b9\u9762\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u591a\u8fdb\u884c\u6b64\u65b9\u9762\u7684\u7814\u7a76\u548c\u79ef\u7d2f\uff0c\u4f46\u5982\u679c\u5bf9\u8fd9\u4e9b\u5185\u5bb9\u4e0d\u751a\u4e86\u89e3\u6216\u8005\u6ca1\u4ec0\u4e48\u5174\u8da3\uff0c\u90a3\u6211\u63a8\u8350\u4f60**\u5c3d\u53ef\u80fd\u5730\u9009\u62e9\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u5185\u6838\u548c\u7cfb\u7edf**\uff0c\u53ef\u4ee5\u514d\u9664\u5f88\u591a\u56e0\u4e3a\u5185\u6838\u517c\u5bb9\u6027\u65b9\u9762\u9020\u6210\u7684\u5f02\u5e38\u3002 \u53e6\u5916\uff1a Docker \u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c \u7528\u4e8e\u68c0\u67e5\u7cfb\u7edf\u7684\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u786e\u5b9a\u81ea\u5df1\u5f53\u524d\u7cfb\u7edf\u7684\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u53ef\u5148\u8fd0\u884c\u6b64\u811a\u672c\u8fdb\u884c\u68c0\u67e5\u3002 \u76f8\u5173\u5185\u5bb9\uff1a A new upstream project to break up Docker into independent components","title":"Docker \u7248\u672c\u53ca\u5185\u6838\u517c\u5bb9\u6027\u9009\u62e9"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#docker","text":"","title":"Docker \u7684\u7248\u672c\u5386\u7a0b"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#_1","text":"\u5728\u7b2c\u4e00\u7bc7\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 Docker \u662f\u5728 2013 \u5e74\u9996\u6b21\u4eae\u76f8\uff0c\u5728 2014 \u5e74 6 \u6708 9 \u65e5\u53d1\u5e03\u4e86 1.0.0 \u7248\u672c\uff1b**\u76f4\u5230 2017 \u5e74\uff0cDocker \u7684\u7248\u672c\u53f7\u90fd\u662f X.Y.Z \u8fd9\u6837\u7684\u683c\u5f0f\u3002**\u5dee\u4e0d\u591a\u6bcf 2~3 \u4e2a\u6708\u4f1a\u5347\u4e00\u6b21 Y \u7684\u7248\u672c\u53f7\uff0c\u6bd4\u5982\uff1a1.3.0 \u662f 2014 \u5e74 10 \u6708\u53d1\u5e03\u7684\uff0c1.4.0 \u5219\u662f 2014 \u5e74 12 \u6708\u53d1\u5e03\u3002 2017 \u5e74 2 \u6708 8 \u65e5 Docker \u53d1\u5e03\u4e86 1.13.1 \u7248\u672c\uff0c\u8fd9\u662f **\u6700\u540e\u4e00\u4e2a \u4ee5 X.Y.Z \u683c\u5f0f\u547d\u540d\u7684\u7248\u672c**\u4e86\u3002 \u5728\u8fd9\u4e2a\u9636\u6bb5\uff0cDocker \u5728\u4e3b\u6d41 Linux \u53d1\u884c\u7248\u4e0a\u7684\u5b89\u88c5\u5305\u4e00\u822c\u53eb\u505a docker\u3001docker-engine \u6216 docker.io\uff0c\u6240\u4ee5\u73b0\u5728\u5982\u679c\u4f60\u9700\u8981\u5b89\u88c5\u65b0\u7248\u672c Docker \u7684\u8bdd\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u5b89\u88c5\u4e86\u4e0a\u8ff0\u5305\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u4e00\u822c\u4f1a\u5efa\u8bae\u4f60\u5148\u5220\u9664\u6389\u3002 \u540c\u5e74 Docker \u5ba3\u5e03\u5c06\u539f GitHub \u4e0a\u5f00\u6e90\u7684 Docker \u9879\u76ee \u66f4\u540d\u4e3a Moby \uff0c\u8fd9\u6b21\u66f4\u540d\u4e4b\u540e\uff0c\u4ea7\u751f\u4e86\u51e0\u4e2a\u91cd\u8981\u7684\u53d8\u5316\uff1a Moby \u9879\u76ee\u5c06\u4f5c\u4e3a\u4e0a\u6e38\u7684\u5f00\u6e90\u5f00\u53d1\u9879\u76ee Docker CE \u662f\u57fa\u4e8e Moby \u7684\u514d\u8d39\u53d1\u5e03\u7248\u672c\uff08\u4e5f\u662f\u73b0\u5728\u5927\u5bb6\u6700\u5e38\u7528\u7684\uff09 Docker EE \u662f\u57fa\u4e8e Docker CE \u7684\u5546\u4e1a\u4ea7\u54c1\u7248\u672c \u73b0\u5728\u5bf9\u4e8e\u6211\u4eec\u800c\u8a00\uff0c\u53ef\u80fd\u4e0a\u6e38\u9879\u76ee\u53eb Docker \u6216\u8005\u53eb Moby \u5df2\u7ecf\u4e0d\u4f1a\u592a\u5728\u610f\u4e86\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u4e9b\u6539\u52a8\u5e26\u6765\u7684\u5f71\u54cd\u662f\u5c06\u539f\u672c\u7edf\u4e00\u7684\u9879\u76ee\u5206\u62c6\u6210\u4e86\u5f88\u591a\u4e0d\u540c\u7684\u7ec4\u4ef6\uff0c\u4e4b\u540e\u518d\u8fdb\u884c\u7ec4\u7ec7\uff0c\u8fd9\u5f53\u7136\u4e5f\u4f1a\u4e3a\u7406\u89e3 Docker \u4ee3\u7801\u7b49\u5e26\u6765\u4e00\u5b9a\u7684\u590d\u6742\u5ea6\u3002\u5728\u672c\u6b21\u4e13\u680f\u7684\u6700\u540e\u4e00\u90e8\u5206\uff0c\u6211\u4f1a\u4e0e\u4f60\u5206\u4eab Docker \u4e0a\u6e38\u9879\u76ee\u7684\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u53c2\u4e0e\u5230 Docker \u9879\u76ee\u4e2d\u53bb\u3002","title":"\u5feb\u901f\u8fed\u4ee3\u671f"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#_2","text":"\u5230 2017 \u5e74\u65f6\uff0cDocker \u5df2\u7ecf\u9762\u4e16 4 \u5e74\u5de6\u53f3\u7684\u65f6\u95f4\uff0c\u8fd9\u671f\u95f4 Docker \u8fc5\u901f\u6500\u5347\u6210\u4e86\u65b0\u65f6\u4ee3\u7684\u6280\u672f\u8d8b\u52bf\u3002\u800c Docker \u7684\u4e3b\u4f53\u529f\u80fd\u4e5f\u5df2\u7ecf\u76f8\u5bf9\u5b8c\u5584\u3002\u968f\u7740 Docker Inc. \u6709\u4e86\u4f01\u4e1a\u7ea7\u4ea7\u54c1\uff0c\u8fd9\u65f6\u5019 Docker \u7684\u7248\u672c\u53f7\u547d\u540d\u89c4\u5219\u4e5f\u968f\u4e4b\u53d1\u751f\u4e86\u53d8\u5316\u3002 2017 \u5e74 3 \u6708\uff0cDocker \u53d1\u5e03\u4e86 Docker CE 17.03.0-ce \u548c Docker EE 17.03.0-ee-1\u3002\u4ece\u6b64\u4e4b\u540e\uff0cDocker \u5f00\u59cb\u4e86\u84ec\u52c3\u53d1\u5c55\u671f\uff0c \u53d1\u5e03\u5468\u671f\u6539\u6210\u4e86\u6bcf\u6708\u4e00\u6b21\uff0c\u540c\u65f6\u7248\u672c\u547d\u540d\u4e5f\u6362\u6210\u4e86 YY.MM. \u7684\u5f62\u5f0f \uff0c\u5f53\u7136\u4e5f\u4e3a\u4e86\u8003\u8651\u5230\u793e\u533a\u7528\u6237\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u53ef\u80fd\u4e0d\u4f1a\u5f88\u9891\u7e41\u7684\u5347\u7ea7\uff0c\u6240\u4ee5\u63d0\u4f9b\u8fc7\u4e86\u4e24\u79cd\u6e20\u9053\uff1a \u6708\u5ea6\u66f4\u65b0\uff1a\u8fd9\u4fbf\u662f\u6211\u521a\u624d\u6240\u8bf4\u7684\u90a3\u79cd\u65b9\u5f0f\uff0c\u6bcf\u6708\u66f4\u65b0\uff0c\u4f46\u662f\u6bcf\u6708\u66f4\u65b0\u7684\u8fd9\u4e2a\u7248\u672c\u53ea\u4f1a\u5728\u4e0b\u4e2a\u7248\u672c\u53d1\u5e03\u4e4b\u524d\u5f97\u5230\u5b89\u5168\u66f4\u65b0\u548c\u9519\u8bef\u4fee\u6b63\uff1b\u5728\u4e0b\u4e2a\u7248\u672c\u53d1\u5e03\u540e\uff0c\u4fbf\u4e0d\u518d\u66f4\u65b0\u4e86\u3002\u4f8b\u5982\uff1a17.04.0-ce \u5728 17.05.0-ce \u53d1\u5e03\u524d\u90fd\u80fd\u5f97\u5230\u5b89\u5168\u66f4\u65b0\u548c\u9519\u8bef\u4fee\u6b63\u7684\u652f\u6301\uff0c\u4e00\u65e6 17.05.0-ce \u53d1\u5e03\u540e\uff0c17.04.0-ce \u5c31\u5c06\u7ed3\u675f\u751f\u547d\u5468\u671f\uff0c\u4e0d\u518d\u66f4\u65b0\u3002 \u5b63\u5ea6\u66f4\u65b0\uff1a\u6307\u7684\u662f\u6bcf\u4e2a\u5b63\u5ea6\u7684\u9996\u4e2a\u7248\u672c\uff0c\u5728\u53d1\u5e03\u4e4b\u540e\uff0c\u5728 4 \u4e2a\u6708\u5185\u90fd\u5c06\u6536\u5230\u5b89\u5168\u66f4\u65b0\u548c\u9519\u8bef\u4fee\u6b63\u3002\u4f8b\u5982\uff1a17.06.0-ce \u5728 17.09.0-ce \u53d1\u5e03\u4e4b\u524d\uff0c\u8fd9 4 \u4e2a\u6708\u5185\u90fd\u53ef\u4ee5\u5f97\u5230\u5b89\u5168\u66f4\u65b0\u548c\u9519\u8bef\u4fee\u6b63\uff0c\u4e00\u65e6 17.09.0-ce \u53d1\u5e03\u540e\uff0c17.06.0-ce \u5c31\u5c06\u7ed3\u675f\u751f\u547d\u5468\u671f\uff0c\u4e0d\u518d\u66f4\u65b0\u3002 \u6240\u4ee5 \u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u6211\u4f1a\u5efa\u8bae\u4f60\u9009\u62e9\u5b63\u5ea6\u66f4\u65b0\u7684\u7248\u672c \uff0c\u56e0\u4e3a\u5176\u80fd\u5f97\u5230\u7684\u652f\u6301\u65f6\u95f4\u6700\u957f\uff0c\u4e5f\u4e0d\u81f3\u4e8e\u603b\u662f\u9700\u8981\u66f4\u65b0\u3002","title":"\u84ec\u52c3\u53d1\u5c55\u671f"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#_3","text":"\u4e4b\u540e\u65f6\u95f4\u7ebf\u5230\u4e86 2018 \u5e74\uff0c\u6b64\u65f6 Docker \u7531\u4e8e\u4e4b\u524d\u51e0\u5e74\u7684\u84ec\u52c3\u53d1\u5c55\uff0c\u5bb9\u5668\u5316\u5df2\u6210\u4e3a\u4e3b\u6d41\uff1b\u52a0\u4e0a Docker \u81ea\u8eab\u4e5f\u65e5\u76ca\u6210\u719f\uff0c\u6210\u4e3a\u4e86\u529f\u80fd\u5b8c\u5907\u7684\u201c\u5bb9\u5668\u5e73\u53f0\u201d\uff0c Docker \u73b0\u5728\u9700\u8981\u63d0\u4f9b\u66f4\u52a0\u7a33\u5b9a\u53ef\u9760\u7684\u7248\u672c \u3002 \u6240\u4ee5\u5728 2018 \u5e74 6 \u6708 Docker \u516c\u53f8\u5ba3\u5e03\uff0c\u5c06 Docker \u7684\u53d1\u5e03\u5468\u671f\u4fee\u6539\u4e3a\u534a\u5e74\u66f4\u65b0\u3002Docker 18.06 CE \u7248\u672c\u5c06\u4f1a\u662f\u6700\u540e\u4e00\u4e2a\u6709 4 \u4e2a\u6708\u7ef4\u62a4\u5468\u671f\u7684\u7248\u672c\uff0c\u4e0b\u4e00\u4e2a\u7248\u672c Docker 18.09 CE \u4f1a\u6709 7 \u4e2a\u6708\u7684\u7ef4\u62a4\u671f\u3002\u4e4b\u540e\u5728 2019 \u5e74 7 \u6708\u4efd\u53d1\u5e03\u4e86 Docker 19.03\uff0c\u5728\u8fd9\u4e2a\u7248\u672c\u6b63\u5f0f\u53d1\u5e03\u4e4b\u524d\uff0c\u7ecf\u5386\u4e86 5 \u4e2a beta \u7248\u672c\u30013 \u4e2a rc \u7248\u672c\uff0c\u53ef\u4ee5\u770b\u5230\u7ecf\u8fc7\u8fd9\u6b21\u6539\u53d8\u540e\uff0cDocker \u53d1\u5e03\u65b0\u7248\u672c\u662f\u975e\u5e38\u614e\u91cd\u7684\u3002 \u6240\u4ee5\u5728 2018 \u5e74 6 \u6708 Docker \u516c\u53f8\u5ba3\u5e03\uff0c\u5c06 Docker \u7684\u53d1\u5e03\u5468\u671f\u4fee\u6539\u4e3a\u534a\u5e74\u66f4\u65b0\u3002Docker 18.06 CE \u7248\u672c\u5c06\u4f1a\u662f\u6700\u540e\u4e00\u4e2a\u6709 4 \u4e2a\u6708\u7ef4\u62a4\u5468\u671f\u7684\u7248\u672c\uff0c\u4e0b\u4e00\u4e2a\u7248\u672c Docker 18.09 CE \u4f1a\u6709 7 \u4e2a\u6708\u7684\u7ef4\u62a4\u671f\u3002\u4e4b\u540e\u5728 2019 \u5e74 7 \u6708\u4efd\u53d1\u5e03\u4e86 Docker 19.03\uff0c\u5728\u8fd9\u4e2a\u7248\u672c\u6b63\u5f0f\u53d1\u5e03\u4e4b\u524d\uff0c\u7ecf\u5386\u4e86 5 \u4e2a beta \u7248\u672c\u30013 \u4e2a rc \u7248\u672c\uff0c\u53ef\u4ee5\u770b\u5230\u7ecf\u8fc7\u8fd9\u6b21\u6539\u53d8\u540e\uff0cDocker \u53d1\u5e03\u65b0\u7248\u672c\u662f\u975e\u5e38\u614e\u91cd\u7684\u3002 \u4f60\u53ef\u80fd\u4f1a\u6709\u51e0\u4e2a\u56f0\u60d1\uff1a 1. \u4e3a\u4ec0\u4e48\u7248\u672c\u53f7\u662f 19.03 \u800c\u5b83\u5374\u5728 7 \u6708\u53d1\u5e03\uff1f \u8fd9\u662f\u56e0\u4e3a Docker \u4f7f\u7528 YY.MM \u7684\u7248\u672c\u683c\u5f0f\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u8bf4\u660e\u8282\u594f\uff0c\u4fdd\u8bc1\u4e00\u822c\u53ef\u7528\u7684\u201c\u671f\u671b\u65e5\u671f\u201d\uff0c\u4f46\u5e76\u4e0d\u4f1a\u4e3a\u4e86\u8be5\u65e5\u671f\u800c\u63d0\u524d\u53d1\u5e03\u4e00\u4e2a\u4e0d\u53ef\u9760\u6216\u8005\u529f\u80fd\u4e0d\u5b8c\u5907\u7684\u7248\u672c\u3002 \u53e6\u5916\uff0c\u65b0\u7248\u672c\u53d1\u5e03\u65f6\uff0c\u4f1a\u5c3d\u53ef\u80fd\u5c06\u6240\u6709\u7684\u4f9d\u8d56\u66f4\u65b0\u5230\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u672c\uff0c\u4ee5\u4fdd\u8bc1\u5728 Docker \u7684\u4e0b\u4e00\u4e2a\u7248\u672c\u53d1\u5e03\u4e4b\u524d\uff0c\u7528\u6237\u6240\u7528\u7684 Docker \u7248\u672c\u4e2d\u4e0d\u5305\u542b\u592a\u843d\u540e\u7684\u4ee3\u7801\u5305\u3002 2. \u4e3a\u4ec0\u4e48 18.09 \u7248\u672c\u53d1\u5e03\u65e5\u671f\u662f 2018 \u5e74 11 \u6708\uff0c\u4f46\u662f\u76f4\u5230 2019 \u5e74 8 \u6708\u5b83\u4ecd\u7136\u5728\u66f4\u65b0\u5c0f\u7248\u672c\uff1f \u56e0\u4e3a Docker \u7684\u6700\u65b0\u7248\u672c 19.03 \u662f 2019 \u5e74 7 \u6708\u53d1\u5e03\u7684\uff0cDocker \u901a\u5e38\u4f1a\u4fdd\u6301\u524d\u4e00\u4e2a\u7248\u672c\u4e0e\u65b0\u7248\u672c\u7684\u7ef4\u62a4\u5468\u671f\u4e4b\u95f4\u91cd\u5408\u4e00\u4e2a\u6708\u5de6\u53f3\uff0c\u4ee5\u4fbf\u7ed9\u7528\u6237\u8db3\u591f\u591a\u7684\u65f6\u95f4\u6765\u8fdb\u884c\u5347\u7ea7\uff0c\u4ee5\u53ca\u53ef\u7528\u4e8e\u56de\u5f52\u6d4b\u8bd5\uff0c\u8ba9\u7528\u6237\u77e5\u9053\u4e0d\u4f1a\u56e0\u4e3a\u5347\u7ea7\u5230\u4e0b\u4e00\u4e2a\u7248\u672c\u800c\u9020\u6210\u4ec0\u4e48\u4e25\u91cd\u95ee\u9898\u3002","title":"\u7a33\u6b65\u63d0\u5347\u671f"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#_4","text":"\u4e0a\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86 Docker \u7248\u672c\u7684\u53d1\u5c55\u5386\u7a0b\uff0c\u5982\u679c\u4f60\u73b0\u5728\u9700\u8981\u65b0\u5b89\u88c5 Docker \u6216\u662f\u60f3\u8981\u5bf9\u73b0\u6709 Docker \u7248\u672c\u8fdb\u884c\u5347\u7ea7\uff0c\u6211\u4f1a\u5f3a\u70c8\u63a8\u8350\u4f60\u9009\u62e9 Docker 19.03\uff08\u622a\u81f3\u5f53\u524d\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u672c\uff09\u3002 \u4e3b\u8981\u539f\u56e0\u5982\u4e0b\uff1a \u5b83\u662f 2019 \u5e74 7 \u6708\u4efd\u53d1\u5e03\u7684\uff0c\u79bb\u793e\u533a\u7ed3\u675f\u7ef4\u62a4\u5468\u671f\u8fd8\u6709\u5f88\u957f\u65f6\u95f4\u3002\u5728\u6b64\u671f\u95f4\u4f60\u9047\u5230\u7684\u5404\u79cd\u95ee\u9898\u5747\u53ef\u53cd\u9988\u81f3\u793e\u533a\uff0c\u5e76\u4f1a\u5f97\u5230\u793e\u533a\u7684\u5e2e\u52a9\u3002 19.03 \u5305\u542b\u4e86\u66f4\u591a\u7279\u6027\uff0c\u8fd9\u4e9b\u7279\u6027\u7684\u4ecb\u7ecd\u4e0d\u662f\u672c\u7bc7\u7684\u91cd\u70b9\uff0c\u6211\u4eec\u5728\u540e\u7eed\u5185\u5bb9\u4e2d\u4f1a\u6d89\u53ca\u5e76\u8ba8\u8bba\u3002","title":"\u5c0f\u7ed3"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#_5","text":"\u5982\u679c\u4f60\u662f\u521a\u63a5\u89e6 Docker\uff0c\u5e76\u4e14\u8981\u5728\u4e00\u53f0\u81ea\u5df1\u53ef\u81ea\u7531\u9009\u62e9\u5185\u6838\u7248\u672c\u6216\u7cfb\u7edf\u7248\u672c\u7684\u673a\u5668\u4e0a\u5b89\u88c5 Docker\uff0c\u90a3\u4f60\u53ef\u4ee5\u9009\u62e9\u8df3\u8fc7\u672c\u7bc7\u5269\u4f59\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u770b\u6211\u8fd9\u91cc\u7ed9\u51fa\u7684\u5efa\u8bae\uff08\u5269\u4f59\u5185\u5bb9\u4e2d\u4f1a\u6d89\u53ca\u4e00\u4e9b Docker \u7248\u672c\u4e0e\u5185\u6838\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u73b0\u5728\u8df3\u8fc7\u5e76\u4e0d\u5f71\u54cd\u540e\u7eed\u5185\u5bb9\uff09\uff1a \u5c3d\u53ef\u80fd\u5730\u4f7f\u7528\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u5185\u6838\u548c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4ee5\u53ca\u5b89\u88c5\u6700\u65b0\u4e14\u7a33\u5b9a\u7684 Docker \u7248\u672c\u3002 \u8fd9\u4e2a\u5efa\u8bae\u4e2d\u5305\u542b\u4e86\u4e24\u4e2a\u4fe1\u606f\uff1a \u9009\u62e9\u6700\u65b0\u4e14\u7a33\u5b9a\u7684 Docker \u7248\u672c\uff0c\u5173\u4e8e\u7248\u672c\u7684\u95ee\u9898\u524d\u9762\u5df2\u8fdb\u884c\u4e86\u8bf4\u660e\uff0c\u6b64\u5904\u4e0d\u518d\u8d58\u8ff0\uff1b \u4f7f\u7528\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u5185\u6838\u548c\u64cd\u4f5c\u7cfb\u7edf\u3002 \u6ce8\uff1a\u8fd9\u90e8\u5206\u7684\u8ba8\u8bba\u53ea\u6d89\u53ca Docker CE \u4e0e Linux \u7cfb\u7edf\uff0c\u4e0d\u8ba8\u8bba Docker Desktop for Mac \u6216 Docker Desktop for Windows\u3002","title":"\u5185\u6838\u517c\u5bb9\u6027"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#_6","text":"\u8fd9\u91cc\u4ee5\u6211\u4eec\u5e73\u65f6\u6700\u5e38\u63a5\u89e6\u7684 x86_64/amd64 \u7684\u67b6\u6784\u4e3a\u4f8b\u3002 Docker \u9ed8\u8ba4\u63d0\u4f9b\u4e86 CentOS\u3001Debian\u3001Fedora\u3001Ubuntu \u7b49\u56db\u79cd Linux \u53d1\u884c\u7248\u4e0a\u7684\u5b98\u65b9\u5b89\u88c5\u6e90\uff0c\u5982\u679c\u4f60\u662f\u5728\u8fd9\u56db\u79cd\u53d1\u884c\u7248\u4e0a\u5b89\u88c5 Docker \u6211\u63a8\u8350\u4f60\u76f4\u63a5\u4f7f\u7528\u5b98\u65b9\u6e90\uff0c\u5e76\u5229\u7528\u7cfb\u7edf\u4e0a\u81ea\u5e26\u7684\u5305\u7ba1\u7406\u5668\u8fdb\u884c\u5b89\u88c5\uff0c\u6216\u8005\u5982\u540c\u7b2c\u4e8c\u7bc7\u4ecb\u7ecd\u7684\uff0c\u76f4\u63a5\u4f7f\u7528 https://get.docker.com/ \u63d0\u4f9b\u7684\u811a\u672c\u8fdb\u884c\u5b89\u88c5\u3002 \u5b98\u65b9\u6587\u6863 \u4e2d\u7b80\u8981\u7684\u5199\u4e86\u4e00\u4e9b\u5b89\u88c5 Docker \u7684\u5fc5\u987b\u9879\uff1a 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf 3.10 \u4ee5\u4e0a\u7684\u5185\u6838 iptables\u3001Git\u3001xz \u6216\u8005\u6302\u8f7d\u6b63\u786e\u7684 Cgroupfs \u4f46\u5199\u7684\u5176\u5b9e\u5f88\u6a21\u7cca\uff0c\u6211\u4eec\u5148\u770b\u770b**\u5185\u6838**\u76f8\u5173\u7684\u4fe1\u606f\u3002","title":"\u6982\u89c8"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#_7","text":"\u4e3a\u4ec0\u4e48\u4f1a\u9009\u62e9 3.10 \u7248\u672c\u7248\u672c\u7684\u5185\u6838\u5462\uff1f\u603b\u7684\u6765\u8bf4\u662f\u56e0\u4e3a 3.10 \u4e2d\u5305\u542b\u4e86 Docker \u6240\u9700\u7684\u5927\u591a\u6570\u7279\u6027\uff0c\u800c\u4e14 3.10 \u662f\u4e00\u4e2a LTS \u7248\u672c\uff0c\u8fd9\u91cc\u5148\u4e0d\u5177\u4f53\u5c55\u5f00\u4e86\uff0c\u6211\u4eec\u8fd8\u662f\u805a\u7126\u4e8e\u5185\u6838\u517c\u5bb9\u6027\u7684\u95ee\u9898\u4e0a\u3002 Linux 3.10 \u7248\u672c\u662f\u5728 2013 \u5e74 6 \u6708\u5e95\u53d1\u5e03\u7684\uff0c\u6211\u4eec\u6765\u770b\u770b\u4e0a\u8ff0\u51e0\u4e2a Linux \u53d1\u884c\u7248\u4f55\u65f6\u5f00\u59cb\u4f7f\u7528\u8be5\u5185\u6838\u7248\u672c\u7684\uff1a \u53d1\u884c\u7248 \u7248\u672c \u53d1\u5e03\u65e5\u671f \u5185\u6838\u7248\u672c CentOS 7.0-1406 2014 \u5e74 7 \u6708 3.10.0-123 Debian 8.0 2014 \u5e74 7 \u6708 3.10.0-123 Fedora 20 2013 \u5e74 12 \u6708 3.11 Ubuntu 13.10 2013 \u5e74 10 \u6708 Linux 3.11 \u53ef\u4ee5\u770b\u5230\uff0c\u4e0d\u540c\u7684\u53d1\u884c\u7248\u4f1a\u9009\u62e9\u4e0d\u540c\u7248\u672c\u7684\u5185\u6838\u3002\u6211\u4eec\u6765\u770b\u770b\u73b0\u5728\u8fd9\u4e9b\u53d1\u884c\u7248\u6240\u7528\u7684\u5185\u6838\u7248\u672c\uff1a \u53d1\u884c\u7248 \u7248\u672c \u53d1\u5e03\u65e5\u671f \u5185\u6838\u7248\u672c CentOS 7.7-1908 2019 \u5e74 9 \u6708 3.10.0-1062 CentOS 8.0-1905 2019 \u5e74 9 \u6708 4.18.0-80 Debian 10.0 2019 \u5e74 7 \u6708 Linux 4.19 Fedora 30 2019 \u5e74 4 \u6708 Linux 5.0 Ubuntu 19.04 2019 \u5e74 4 \u6708 Linux 5.0 \u53ef\u4ee5\u770b\u5230\u5185\u6838\u7248\u672c\u66f4\u65b0\u6700\u6162\u7684\u662f CentOS\uff0c\u800c\u4e00\u4e2a\u5f88\u503c\u5f97\u6ce8\u610f\u7684\u70b9\u662f\uff0cLinux 3.10 \u622a\u81f3 Linux 3.10.108 \u5c31\u5df2\u7ecf EOL\uff08End Of Life\uff09\u4e86\uff0c CentOS \u4f7f\u7528\u7684\u5185\u6838\u5176\u5b9e\u79fb\u690d\u4e86\u5f88\u591a\u9ad8\u7248\u672c Linux \u4e2d\u7684\u7279\u6027 \u3002 \u5176\u5b9e Docker \u548c\u5185\u6838\u517c\u5bb9\u6027\u95ee\u9898\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8bdd\u9898\uff0c\u53c2\u8003\u4e0a\u9762\u63d0\u4f9b\u7684\u8868\u683c\uff0cDebian\u3001Fedora\u3001Ubuntu \u7b49\u53d1\u884c\u7248\u7684\u5185\u6838\u66f4\u65b0\u90fd\u76f8\u5bf9\u53ca\u65f6\uff0c\u53ea\u8981\u4f60\u4e0d\u9009\u62e9\u592a\u8fc7\u65f6\u6216\u8005\u592a\u65e7\u7684\u7248\u672c\uff0cDocker \u5728\u53d1\u5e03\u4e4b\u524d\uff0c\u90fd\u4f1a\u5728\u8fd9\u51e0\u4e2a\u53d1\u884c\u7248\u7684\u6700\u65b0\u7248\u4e0a\u7ecf\u8fc7\u5927\u91cf\u6d4b\u8bd5\uff0c\u82e5\u6709\u95ee\u9898\u4e5f\u4f1a\u5c3d\u65e9\u4fee\u590d\u7684\u3002 \u6211\u4eec\u6765\u5355\u72ec\u8bf4\u4e0b CentOS\u3002 \u5982\u679c\u4f60\u4f7f\u7528 CentOS\uff0c\u8bf7\u52a1\u5fc5\u9009\u62e9 CentOS 7.6 \u53ca\u4ee5\u4e0a\u7248\u672c\uff0c\u6216\u662f\u5c06\u5185\u6838\u5347\u7ea7\u5230 3.10.0-957 \u53ca\u66f4\u9ad8\u7248\u672c \uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u4e2a\u5efa\u8bae\u5462\uff1f \u6211\u4eec\u4e3e\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\uff1aDocker \u7684\u5b58\u50a8\u9a71\u52a8\uff0c\u5728\u65e9\u5148\u7248\u672c\u4e2d\u5176\u5b9e\u5bf9\u4e8e CentOS \u7cfb\u7edf\u4e0a\u4e00\u76f4\u662f\u9ed8\u8ba4\u4f7f\u7528 Devicemapper \u7684\u5b58\u50a8\u9a71\u52a8\uff0c\u4f46\u6700\u8fd1\u7684 Docker \u7248\u672c\u4e2d\u5df2\u7ecf\u5c06 Devicemapper \u6807\u8bb0\u4e3a\u4e86\u5e9f\u5f03\u3002\u6240\u4ee5\u6211\u4eec\u63a8\u8350\u9009\u62e9 Overlay2 \u5b58\u50a8\u9a71\u52a8\uff0c\u5173\u4e8e\u8fd9\u4e2a\u5b58\u50a8\u9a71\u52a8\uff0c\u5728\u4e4b\u540e\u7684\u5b58\u50a8\u7bc7\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002 Docker \u7684 Overlay2 \u5b58\u50a8\u9a71\u52a8\u9700\u8981\u5185\u6838\u7684 Multiple lower layers \u652f\u6301\uff0c\u800c OverlayFS \u662f\u5728 Linux 3.18 \u65f6\u5408\u5e76\u8fdb\u5165\u5185\u6838\u7684\uff0c\u4f46\u5728 Linux 3.19 \u7248\u672c\u65f6\u624d\u6dfb\u52a0\u4e86 Multiple lower layers \u7684\u652f\u6301\u3002 Linux 3.19 \u6070\u597d\u662f 3.x \u7cfb\u5217\u7684\u6700\u540e\u4e00\u4e2a\u7248\u672c\uff0c\u4e24\u4e2a\u6708\u540e 4.0 \u4fbf\u53d1\u5e03\u4e86\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u4f1a\u66f4\u63a8\u8350\u91c7\u7528 4.0\u3002\u6240\u4ee5 \u5b98\u65b9\u6587\u6863 \u4e0a\u5bf9\u4e8e\u4f7f\u7528 Overlay2 \u5b58\u50a8\u9a71\u52a8\u7684\u5efa\u8bae\u662f\u4f7f\u7528 Linux 4.0 \u53ca\u66f4\u9ad8\u7248\u672c\u7684\u5185\u6838\u3002 \u800c CentOS \u7684\u5185\u6838\u4e2d\u5b58\u5728\u5927\u91cf\u7684\u53cd\u5411\u79fb\u690d\uff0cMmultiple lower layers \u7684\u7279\u6027\u4e5f\u88ab\u79fb\u690d\u5230\u4e86 CentOS 7.4 \u7684\u5185\u6838\u4e4b\u4e0a\u3002\u6240\u4ee5\u5982\u679c\u4f60\u53ea\u662f\u8003\u8651\u4f7f\u7528 Overlay2 \u4f5c\u4e3a\u5b58\u50a8\u9a71\u52a8\u7684\u8bdd\uff0c\u5219\u81f3\u5c11\u9700\u8981\u9009\u62e9 CentOS 7.4 \u5185\u6838\u7248\u672c\u4e3a 3.10.0-693 \u6216\u8005\u66f4\u65b0\u7248\u672c\u7684\u5185\u6838\u3002 \u5907\u6ce8\uff1aCentOS 7.x \u4e0e 8.x \u533a\u522b\u8f83\u591a\uff0c\u6240\u4ee5\u5355\u72ec\u5c06 CentOS \u7684 7 \u548c 8 \u7248\u672c\u5217\u4e86\u51fa\u6765\u3002","title":"\u5185\u6838"},{"location":"docker/Docker%20%E7%89%88%E6%9C%AC%E5%8F%8A%E5%86%85%E6%A0%B8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%80%89%E6%8B%A9/#_8","text":"\u901a\u8fc7\u672c\u7bc7\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Docker \u7248\u672c\u53ca\u5185\u6838\u517c\u5bb9\u6027\u76f8\u5173\u7684\u5185\u5bb9\u3002Docker \u5728\u73b0\u9636\u6bb5\u4f7f\u7528 YY.MM \u5f62\u5f0f\u7684\u7248\u672c\u53f7\uff0c\u4e00\u5e74\u53d1\u5e03\u4e24\u6b21\u7248\u672c\uff0c\u901a\u5e38\u5177\u6709 7 \u4e2a\u6708\u5de6\u53f3\u7684\u7ef4\u62a4\u5468\u671f\u3002\u5982\u679c\u5728\u8fdb\u884c Docker \u7248\u672c\u7684\u9009\u62e9\uff0c\u6211\u63a8\u8350\u4f60\u9009\u62e9\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u3002 \u5173\u4e8e\u5185\u6838\u65b9\u9762\uff0c\u5176\u5b9e\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8bdd\u9898\uff0c\u8fd9\u91cc\u53ea\u662f\u7b80\u5355\u7684\u4ecb\u7ecd\u4e86\u4e00\u4e0b\u3002\u800c\u4e14\u8003\u8651\u5185\u6838\u517c\u5bb9\u6027\u65f6\u4e0d\u4ec5\u9700\u8981\u8003\u8651 Docker \u81ea\u8eab\u76f8\u5173\u7684\u517c\u5bb9\u6027\uff0c\u8fd8\u9700\u8981\u8003\u8651 Docker \u4f9d\u8d56\u7684\u76f8\u5173\u5e95\u5c42\u7ec4\u4ef6\u4e0e\u5185\u6838\u7684\u517c\u5bb9\u6027\u95ee\u9898\u3002 \u6bd4\u5982\uff0cDocker \u5e95\u5c42\u7684\u5bb9\u5668\u8fd0\u884c\u65f6 RunC\u30022019 \u5e74 2 \u6708\uff0c\u6709\u4e00\u4e2a\u5173\u4e8e RunC \u7684\u63d0\u6743\u6f0f\u6d1e CVE-2019-5736 \uff0c\u7531\u4e8e\u662f\u4e00\u4e2a\u7d27\u6025\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u6240\u4ee5 RunC \u7684\u7ef4\u62a4\u8005\u8fdb\u884c\u4e86\u5feb\u901f\u4fee\u590d\uff0c\u800c\u5f53\u65f6\u7684\u4fee\u590d\u65b9\u5f0f\u662f\u589e\u52a0\u4e86\u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528 memfd_create(2) \u548c fcntl(2)\u3002\u800c\u8fd9\u4e24\u4e2a\u7684\u7cfb\u7edf\u8c03\u7528\u662f\u5728 Linux 3.17 \u65f6\u88ab\u52a0\u5165\u5185\u6838\u4e2d\u7684\u3002 \u9020\u6210\u7684\u5f71\u54cd\u5c31\u662f\u51e1\u662f\u5185\u6838\u4e0d\u652f\u6301\u8fd9\u4e24\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\uff0c\u5747\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c\u3002\u4f46\u4e5f\u6709\u90e8\u5206\u4f8b\u5916\uff0c\u6bd4\u5982 CentOS \u7684 3.10.0-514 \u5185\u6838\u53cd\u5411\u79fb\u690d\u4e86\u6b64\u7279\u6027\u3002 \u4e0d\u8fc7\u4e0a\u8ff0\u63d0\u5230\u7684\u4fee\u6b63\uff0c\u5728\u540e\u6765\u7684\u7248\u672c\u4e2d\u4fee\u6539\u4e86\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6240\u4ee5\u517c\u5bb9\u6027\u4e5f\u5f97\u5230\u4e86\u6539\u5584\u3002\u5173\u4e8e\u8fd9\u4e9b\u5e95\u5c42\u7ec4\u4ef6\uff0c\u6211\u5728\u540e\u7eed\u7684\u67b6\u6784\u7bc7\u4e2d\u4e5f\u90fd\u4f1a\u6709\u4ecb\u7ecd\u3002 \u6240\u4ee5\u5982\u679c\u4f60\u5bf9\u5185\u6838\u65b9\u9762\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u591a\u8fdb\u884c\u6b64\u65b9\u9762\u7684\u7814\u7a76\u548c\u79ef\u7d2f\uff0c\u4f46\u5982\u679c\u5bf9\u8fd9\u4e9b\u5185\u5bb9\u4e0d\u751a\u4e86\u89e3\u6216\u8005\u6ca1\u4ec0\u4e48\u5174\u8da3\uff0c\u90a3\u6211\u63a8\u8350\u4f60**\u5c3d\u53ef\u80fd\u5730\u9009\u62e9\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u5185\u6838\u548c\u7cfb\u7edf**\uff0c\u53ef\u4ee5\u514d\u9664\u5f88\u591a\u56e0\u4e3a\u5185\u6838\u517c\u5bb9\u6027\u65b9\u9762\u9020\u6210\u7684\u5f02\u5e38\u3002 \u53e6\u5916\uff1a Docker \u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u811a\u672c \u7528\u4e8e\u68c0\u67e5\u7cfb\u7edf\u7684\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u786e\u5b9a\u81ea\u5df1\u5f53\u524d\u7cfb\u7edf\u7684\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff0c\u53ef\u5148\u8fd0\u884c\u6b64\u811a\u672c\u8fdb\u884c\u68c0\u67e5\u3002 \u76f8\u5173\u5185\u5bb9\uff1a A new upstream project to break up Docker into independent components","title":"\u603b\u7ed3"},{"location":"docker/Docker%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/","text":"Docker \u5165\u95e8\uff0c\u5171 3 \u7bc7\uff0c\u5c06\u5e26\u5927\u5bb6\u8fdb\u5165 Docker \u7684\u4e16\u754c\u3002 \u9996\u5148\u4e86\u89e3 Docker \u7684\u53d1\u5c55\u5386\u7a0b\uff0c \u7136\u540e\u5feb\u901f\u638c\u63e1 Docker \u7684\u57fa\u672c\u4f7f\u7528\uff1b Docker \u7248\u672c\u53ca\u5185\u6838\u517c\u5bb9\u6027\u9009\u62e9\u662f\u8fd9\u90e8\u5206\u7684\u91cd\u70b9\u5185\u5bb9\u3002\u5927\u5bb6\u5982\u679c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u9700\u8981\u4f7f\u7528 Docker \u7684\u8bdd\uff0c\u5efa\u8bae\u91cd\u70b9\u5173\u6ce8\u8fd9\u4e00\u7bc7\u3002 \u4e0b\u9762\u6211\u4eec\u5c31\u8fdb\u5165\u7b2c\u4e00\u7bc7\u7684\u5185\u5bb9\u3002 Docker \u5728\u5927\u591a\u6570\u4eba\u773c\u4e2d\u51e0\u4e4e\u662f\u5bb9\u5668\uff08container\uff09\u7684\u4ee3\u540d\u8bcd\uff0c\u5373\u4f7f\u662f\u73b0\u5728\u6211\u4e5f\u5e38\u4f1a\u542c\u5230\u6709\u4eba\u8bf4\u201c\u6211\u5728\u670d\u52a1\u5668\u4e0a\u542f\u52a8\u4e86 N \u4e2a docker \u5728\u8dd1 XX \u670d\u52a1\u201d \u4e4b\u7c7b\u7684\u8bdd\u3002 \u6211\u4eec\u6765\u770b\u770b\u4e3a\u4f55 Docker \u80fd\u6210\u4e3a\u5bb9\u5668\u7684\u4ee3\u540d\u8bcd\uff0c\u5f15\u9886\u5bb9\u5668\u7684\u65f6\u4ee3\u3002 \u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55 \u00b6 chroot \u00b6 \u5728\u6211\u770b\u6765\uff0c\u8981\u68b3\u7406\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\uff0c\u6700\u65e9\u53ef\u4ee5\u8ffd\u6eaf\u5230 1979 \u5e74\uff0c\u90a3\u65f6\u5019 chroot \u7cfb\u7edf\u8c03\u7528\u9996\u6b21\u95ee\u4e16\u3002 \u4e4b\u540e 1982 \u5e74 chroot \u673a\u5236\u88ab\u79fb\u690d\u5230\u4e86 BSD \u7cfb\u7edf\u4e0a\uff0c\u518d\u540e\u6765\u4fbf\u662f\u6211\u4eec\u6240\u719f\u77e5\u7684 Linux \u7cfb\u7edf\u4e0a\u7684 chroot \u4e86\u3002 \u6211\u4eec\u6709\u65f6\u4f1a\u4f7f\u7528 chroot \u6539\u53d8\u67d0\u8fdb\u7a0b\u7684\u6839\u76ee\u5f55\uff0c\u4f7f\u5b83\u4e0d\u80fd\u8bbf\u95ee\u8be5\u76ee\u5f55\u4e4b\u5916\u7684\u5176\u4ed6\u76ee\u5f55\u3002 \u8fd9\u548c\u6211\u4eec\u5728\u4e00\u4e2a\u5bb9\u5668\u5185\u7684\u611f\u89c9\u5f88\u50cf\u4e86\u3002\u4e8b\u5b9e\u4e0a\u5728\u51e0\u5e74\u524d\u786e\u5b9e\u6709\u4eba\u7528\u4e00\u767e\u591a\u884c\u7684 bash \u5229\u7528 chroot \u5199\u4e86\u4e00\u4e2a\u6a21\u62df Docker \u521b\u5efa\u5bb9\u5668\u7684\u5b9e\u73b0\uff0c\u79f0\u4e4b\u4e3a bocker , \u6709\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u53bb\u770b\u770b\u8be5\u9879\u76ee\u7684\u4ee3\u7801\u3002 \u8fd9\u91cc\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e2a\u5b9e\u9645\u4f7f\u7528 chroot \u521b\u5efa\u9694\u79bb\u73af\u5883\u7684\u4f8b\u5b50\uff1a \u6bd4\u65b9\u8bf4\u6211\u4eec\u60f3\u521b\u5efa\u4e00\u4e2a Debian \u7684\u9694\u79bb\u73af\u5883\uff0c\u90a3\u53ef\u4ee5\u4f7f\u7528 chroot \u5c06 Debian \u7684 rootfs \u6839\u6587\u4ef6\u7cfb\u7edf\u4f5c\u4e3a\u65b0\u8fdb\u7a0b\u7684\u6839\u3002 \u81f3\u4e8e rootfs \u5982\u4f55\u83b7\u5f97\uff0c\u6211\u4eec\u8fd9\u91cc\u7528 Docker \u6765\u5b8c\u6210\uff0c\u4f46\u8fd9\u4e0d\u662f\u672c\u8282\u7684\u91cd\u70b9\uff0c\u53ef\u4ee5\u6682\u65f6\u5ffd\u7565\u5b83\uff0c\u5728\u4ee5\u540e\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002 # \u521b\u5efa\u4e00\u4e2a\u7a7a\u6587\u4ef6\u5939 (MoeLove) \u279c ~ mkdir chroot-dir (MoeLove) \u279c ~ cd chroot-dir # \u4f7f\u7528 Docker \u6765\u63d0\u53d6 Debian \u7684 rootfs (MoeLove) \u279c chroot-dir docker save -o debian.tar debian:buster (MoeLove) \u279c chroot-dir ls debian.tar (MoeLove) \u279c chroot-dir tar -xf debian.tar (MoeLove) \u279c chroot-dir ls 098963abf3c3b87b8114ff67d164097dfac2d5659e39f9beb5604db91585f375.json debian.tar repositories 0f28619fe69181d3af529d56692f1362b7a7c8a6bf8dc9ab0d6d4f9ef9b0004d manifest.json (MoeLove) \u279c chroot-dir mkdir -p debian (MoeLove) \u279c chroot-dir tar -C debian -xf 0f28619fe69181d3af529d56692f1362b7a7c8a6bf8dc9ab0d6d4f9ef9b0004d/layer.tar (MoeLove) \u279c chroot-dir ls debian bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var \u7ecf\u8fc7\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u5c31\u62ff\u5230\u4e86 Debian \u7684 rootfs\uff0c\u63a5\u4e0b\u6765\u770b\u770b chroot \u7684\u80fd\u529b\uff1a # \u4f7f\u7528 debian \u6587\u4ef6\u5939\u4f5c\u4e3a\u5bb9\u5668\u7684\u6839 (MoeLove) \u279c chroot-dir sudo chroot debian /bin/bash -i [sudo] tao \u7684\u5bc6\u7801\uff1a root@localhost:/# whoami root root@localhost:/# cat /etc/os-release PRETTY_NAME=\"Debian GNU/Linux 10 (buster)\" NAME=\"Debian GNU/Linux\" VERSION_ID=\"10\" VERSION=\"10 (buster)\" VERSION_CODENAME=buster ID=debian HOME_URL=\"https://www.debian.org/\" SUPPORT_URL=\"https://www.debian.org/support\" BUG_REPORT_URL=\"https://bugs.debian.org/\" \u6b64\u65f6\u6211\u4eec\u5c31\u5df2\u7ecf\u5728\u4e00\u4e2a\u201c\u5bb9\u5668\u201d\u5185\u4e86\uff0c\u6765\u770b\u4e0b\u4f7f\u7528\u8fd9\u4e2a\u201c\u5bb9\u5668\u201d\u80fd\u505a\u4e9b\u4ec0\u4e48\u3002 \u9996\u5148\u770b\u770b\u5f53\u524d\u201c\u5bb9\u5668\u201d\u5185\u7684\u8def\u7531\u8868\uff1a root@localhost:/# mkdir -p /sys root@localhost:/# mount -t sysfs sys /sys root@localhost:/# ip r default via 192.168.0.1 dev wlp2s0 proto dhcp metric 600 172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown 192.168.0.0/24 dev wlp2s0 proto kernel scope link src 192.168.0.108 metric 600 192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 linkdown \u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06 /proc \u4e5f\u6302\u8f7d\u8fdb\u53bb\uff1a root@localhost:/# mkdir -p /proc root@localhost:/# mount -t proc proc /proc # \u8fd9\u91cc\u662f\u968f\u610f\u627e\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u67e5\u770b root@localhost:/# ls -al /proc/31730/ns/pid lrwxrwxrwx. 1 1000 1000 0 Jul 29 16:47 /proc/31730/ns/pid -> 'pid:[4026531836]' \u53ef\u4ee5\u770b\u5230\u5728\u8fd9\u4e2a\u201c\u5bb9\u5668\u201d\u5185\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5230\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\u4fe1\u606f\uff0c\u8fd9\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u7684\u8fdb\u7a0b\u9694\u79bb\uff0c\u5e26\u6765\u7684\u5371\u9669\u662f\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728\u8fd9\u4e2a\u201c\u5bb9\u5668\u201d\u5185\u6740\u6389\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\uff0c\u6216\u8005\u901a\u8fc7\u201c\u5bb9\u5668\u201d\u6765\u653b\u51fb\u4e3b\u673a\u3002 \u4e3a\u4e86\u80fd\u66f4\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u51fa\u73b0\u4e86\u53e6\u4e00\u4e2a\u6280\u672f\uff1aNamespace\u3002 Namespace \u00b6 Namespace \u662f\u5728 2002 \u5e74\u7531 Linux 2.4.19 \u5f00\u59cb\u52a0\u5165\u5185\u6838\u7684\u7279\u6027\uff0c\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u505a\u4e86\u4e00\u5c42\u62bd\u8c61\u548c\u9694\u79bb\uff0c\u4f7f\u5f97\u5728 namespace \u4e2d\u7684\u8fdb\u7a0b / \u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u770b\u8d77\u6765\u62e5\u6709\u81ea\u5df1\u7684\u72ec\u7acb\u8d44\u6e90\uff0c\u5177\u4f53\u7684\u201c\u8d44\u6e90\u201d\u8868\u73b0\u5f62\u5f0f\u53d6\u51b3\u4e8e\u7ed9\u5b83\u8d4b\u4e88\u4e86\u54ea\u4e9b namespace\u3002 \u968f\u7740 2013 \u5e74 Linux 3.8 \u4e2d user namespace \u7684\u5f15\u5165\uff0c\u5bf9\u4e8e\u6211\u4eec\u73b0\u5728\u6240\u719f\u77e5\u7684\u5bb9\u5668\u6240\u9700\u7684\u5168\u90e8 namespace \u5c31\u90fd\u5b9e\u73b0\u4e86\uff1amnt\u3001pid\u3001net\u3001ipc\u3001uts\u3001user \u548c cgroup \u5bf9\u4e8e\u8fd9\u4e9b Namespace \u548c Docker \u7684\u5173\u7cfb\uff0c\u6211\u4eec\u5728\u4ee5\u540e\u7684\u7ae0\u8282\u4e2d\u90fd\u4f1a\u6df1\u5165\u5b66\u4e60\uff0c\u8fd9\u91cc\u5148\u5bf9 Namespace \u505a\u4e0b\u4ecb\u7ecd\uff0c\u4fbf\u4e8e\u5927\u5bb6\u4e86\u89e3\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u76f4\u63a5\u64cd\u4f5c Namespace\uff0c\u8fd9\u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u5206\u522b\u662f\uff1a clone\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e0d\u540c namespace \u7684\u6807\u5fd7\u6765\u4e3a\u65b0\u7684\uff08\u5b50\uff09\u8fdb\u7a0b\u6307\u5b9a\u5176\u6240\u5c5e\u7684 namespace\uff1b unshare\uff0c\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u53d6\u6d88\u5f53\u524d\u4e0e\u5176\u4ed6\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u5171\u4eab\u7684\u6267\u884c\u4e0a\u4e0b\u6587\uff1b setns\uff0c\u8fdb\u5165\u6587\u4ef6\u63cf\u8ff0\u7b26\u6307\u5b9a\u7684 namespace\u3002 \u77e5\u9053\u4e86\u8fd9\u4e9b\u57fa\u7840\u77e5\u8bc6\u540e\uff0c\u6211\u4eec\u56de\u5230\u524d\u9762\u201c\u5bb9\u5668\u201d\u7684\u5185\u5bb9\u4e2d\u3002 \u6211\u4eec\u5728\u524d\u9762 chroot \u7684\u4f8b\u5b50\u4e2d\u770b\u5230\u6ca1\u80fd\u505a\u5230\u8fdb\u7a0b\u9694\u79bb\uff0c\u73b0\u5728\u6765\u8bd5\u8bd5\u770b\u7528 namespace \u5b8c\u6210\u8be5\u9700\u6c42\u3002 (MoeLove) \u279c ~ sudo unshare -fp --mount-proc -n [sudo] tao \u7684\u5bc6\u7801\uff1a [root@localhost]/home/tao# ps -a PID TTY TIME CMD 1 pts/15 00:00:00 zsh 33 pts/15 00:00:00 ps \u8fd9\u91cc\u5f88\u660e\u663e\uff0c\u6211\u4eec\u5f53\u524d\u6240\u5728\u8fdb\u7a0b\u7684 PID \u4e3a 1 \u5e76\u4e14\u770b\u4e0d\u5230\u5bbf\u4e3b\u673a\u4e0a\u7684\u5176\u4ed6\u8fdb\u7a0b\uff0c\u8fbe\u5230\u4e86\u57fa\u7840\u7684\u9694\u79bb\u6548\u679c\u3002 cgroups \u548c LXC \u00b6 \u53e6\u4e00\u6761\u5173\u952e\u7684\u65f6\u95f4\u7ebf\u5728 2008 \u5e74\uff0ccgroups \u8fdb\u5165 Linux 2.6.24 \u540e\uff0c\u57fa\u4e8e\u5b83\u5e76\u4e14\u7784\u51c6\u5bb9\u5668\u4e16\u754c\u7684\u4e00\u4e2a\u9879\u76ee\u8bde\u751f\u4e86\u3002 Linux Container \uff08LXC\uff09\u7ed3\u5408\u4e86 namespace \u548c cgroups \u7b49\u6280\u672f\uff0c\u76ee\u6807\u5c31\u662f\u8981\u521b\u9020\u51fa\u8fd0\u884c\u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u5e76\u4e14\u9694\u79bb\u6027\u826f\u597d\u7684\u5bb9\u5668\u73af\u5883\u3002 LXC \u7684\u53d1\u5e03\u5728 2008 \u5e74\uff0c\u4f46\u503c\u5f97\u6ce8\u610f\u7684\u662f cgroups \u6700\u521d\u662f\u7531 Google \u7684\u5de5\u7a0b\u5e08\u5f00\u53d1\u7684\uff0c\u6700\u65e9\u7684\u8bb0\u5f55\u662f\u5728 2006 \u5e74\uff0c\u4e8b\u5b9e\u4e0a\u5f53\u65f6 Google \u786e\u5b9e\u4e5f\u5728\u505a\u7c7b\u4f3c\u7684\u5bb9\u5668\u5316\u9879\u76ee\u3002 Docker \u7684\u53d1\u5c55 \u00b6 \u65f6\u95f4\u4e00\u6643\u800c\u8fc7\uff0c\u5c31\u5230\u4e86 2013 \u5e74\u7684 PyCon \u4e0a\uff0c\u5728\u8fd9\u6b21\u5927\u4f1a\u4e0a Docker \u6b63\u5f0f\u9762\u4e16\u3002\u800c\u5b83\u5f53\u65f6\u5176\u5b9e\u4e5f\u53ea\u662f\u6784\u5efa\u5728 LXC \u4e4b\u4e0a\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u5c4f\u853d\u6389\u4e86 LXC \u7684\u4f7f\u7528\u7ec6\u8282\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u4e00\u53e5 docker run \u547d\u4ee4\u884c\u4fbf\u521b\u5efa\u51fa\u81ea\u5df1\u7684\u5bb9\u5668\u73af\u5883\u3002 \u540c\u65f6\uff0c\u5b83\u5141\u8bb8\u7528\u6237\u5c06\u5bb9\u5668\u73af\u5883\u6253\u5305\u6210\u4e3a\u4e00\u4e2a Docker \u955c\u50cf\u8fdb\u884c\u5206\u53d1\uff0c\u8fd9\u4e5f\u5927\u5927\u964d\u4f4e\u4e86\u7528\u6237\u4f7f\u7528\u7684\u95e8\u69db\u3002 Docker \u955c\u50cf\u5206\u53d1\u53ef\u4ee5\u8bf4\u662f Docker \u6210\u529f\u7684\u4e00\u4e2a\u5173\u952e\u8981\u7d20\u4e86\u3002 \u53e6\u4e00\u4e2a\u5173\u952e\u8981\u7d20\uff0c\u6211\u8ba4\u4e3a\u662f\u5f00\u6e90\u751f\u6001\uff0cDocker \u5728\u9996\u6b21\u4eae\u76f8\u4e4b\u540e\u4e0d\u4e45\uff0c\u5c31\u5b8c\u5168\u5f00\u6e90\u4e86\uff0c\u5438\u5f15\u4e86\u6765\u81ea\u4e16\u754c\u5404\u5730\u5f00\u53d1\u8005\u7684\u5173\u6ce8\u548c\u79ef\u6781\u8d21\u732e\u3002 2014 \u5e74 Docker \u53d1\u5e03 1.0 \u6b63\u5f0f\u8fdb\u5165\u751f\u4ea7\u5c31\u7eea\u7684\u72b6\u6001\u3002\u5728\u6b64\u4e4b\u524d\u5b83\u4e5f\u5c06 LXC \u9010\u6b65\u4ece\u5b83\u7684\u5e95\u5c42\u79fb\u9664\uff0c\u6362\u6210\u4e86\u81ea\u5df1\u5b9e\u73b0\u7684 libcontainer\u3002 \u6b64\u540e Docker \u4fbf\u6210\u4e3a\u4e86\u98ce\u9761\u6280\u672f\u754c\u7684\u65b0\u70ed\u6f6e\u3002 \u518d\u540e\u6765\u4e5f\u51fa\u73b0\u8fc7 Swarm Mesos \u548c Kubernetes \u7b49\u4f17\u591a\u5bb9\u5668\u7f16\u6392\u7cfb\u7edf\u4e89\u593a\u5e02\u573a\u4efd\u989d\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0cKubernetes \u6210\u4e3a\u4e86\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\uff0c\u56fd\u5185\u5916\u5404\u4e2a\u516c\u53f8\u4e5f\u90fd\u5728\u63a8\u8fdb Kubernetes \u7684\u843d\u5730\u548c\u5b9e\u65bd\u3002\u800c Docker \u4f5c\u4e3a\u5bb9\u5668\u8fd0\u884c\u65f6\uff0c\u4e5f\u6b63\u662f\u6781\u5176\u5173\u952e\u7684\u4e00\u73af\u3002 \u603b\u7ed3 \u00b6 \u4ece\u6700\u5148\u7684 chroot \u5230\u540e\u6765\u7684 namespace \u548c cgroups \u7b49\uff0c\u518d\u5230\u540e\u6765\u7684 LXC \u548c Docker \u7b49\u6280\u672f\u7684\u51fa\u73b0\uff0c\u8fd9\u90fd\u662f\u5728\u5bb9\u5668\u6280\u672f\u9886\u57df\u7684\u4e00\u79cd\u63a2\u7d22\u548c\u524d\u8fdb\u3002 \u5f53\u7136\uff0c\u6211\u8fd9\u91cc\u53ea\u5217\u51fa\u4e86\u6211\u8ba4\u4e3a\u6700\u6838\u5fc3\u548c\u5173\u952e\u7684\u5185\u5bb9\uff0c\u4e8b\u5b9e\u4e0a\u5f53\u65f6\u6280\u672f\u5708\u9664\u4e86\u8fd9\u6761\u4e3b\u5e72\u4e4b\u5916\uff0c\u4e5f\u6709\u7740\u5f88\u591a\u652f\u7ebf\u5267\u60c5\uff0c\u6bd4\u5982\u4ece\u5404\u7c7b PaaS \uff08Platform as a Service\uff09\u5382\u5546\u7684\u7ade\u4e89\u5230\u5168\u9762\u62e5\u62b1 Docker \uff0c\u8fd9\u4e9b\u5185\u5bb9\u4e5f\u4ece\u4fa7\u9762\u6765\u53cd\u6620\u51fa\u4e86 Docker \u7684\u706b\u70ed\u3002","title":"Docker \u7684\u524d\u4e16\u4eca\u751f"},{"location":"docker/Docker%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/#_1","text":"","title":"\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55"},{"location":"docker/Docker%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/#chroot","text":"\u5728\u6211\u770b\u6765\uff0c\u8981\u68b3\u7406\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\uff0c\u6700\u65e9\u53ef\u4ee5\u8ffd\u6eaf\u5230 1979 \u5e74\uff0c\u90a3\u65f6\u5019 chroot \u7cfb\u7edf\u8c03\u7528\u9996\u6b21\u95ee\u4e16\u3002 \u4e4b\u540e 1982 \u5e74 chroot \u673a\u5236\u88ab\u79fb\u690d\u5230\u4e86 BSD \u7cfb\u7edf\u4e0a\uff0c\u518d\u540e\u6765\u4fbf\u662f\u6211\u4eec\u6240\u719f\u77e5\u7684 Linux \u7cfb\u7edf\u4e0a\u7684 chroot \u4e86\u3002 \u6211\u4eec\u6709\u65f6\u4f1a\u4f7f\u7528 chroot \u6539\u53d8\u67d0\u8fdb\u7a0b\u7684\u6839\u76ee\u5f55\uff0c\u4f7f\u5b83\u4e0d\u80fd\u8bbf\u95ee\u8be5\u76ee\u5f55\u4e4b\u5916\u7684\u5176\u4ed6\u76ee\u5f55\u3002 \u8fd9\u548c\u6211\u4eec\u5728\u4e00\u4e2a\u5bb9\u5668\u5185\u7684\u611f\u89c9\u5f88\u50cf\u4e86\u3002\u4e8b\u5b9e\u4e0a\u5728\u51e0\u5e74\u524d\u786e\u5b9e\u6709\u4eba\u7528\u4e00\u767e\u591a\u884c\u7684 bash \u5229\u7528 chroot \u5199\u4e86\u4e00\u4e2a\u6a21\u62df Docker \u521b\u5efa\u5bb9\u5668\u7684\u5b9e\u73b0\uff0c\u79f0\u4e4b\u4e3a bocker , \u6709\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u53bb\u770b\u770b\u8be5\u9879\u76ee\u7684\u4ee3\u7801\u3002 \u8fd9\u91cc\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e2a\u5b9e\u9645\u4f7f\u7528 chroot \u521b\u5efa\u9694\u79bb\u73af\u5883\u7684\u4f8b\u5b50\uff1a \u6bd4\u65b9\u8bf4\u6211\u4eec\u60f3\u521b\u5efa\u4e00\u4e2a Debian \u7684\u9694\u79bb\u73af\u5883\uff0c\u90a3\u53ef\u4ee5\u4f7f\u7528 chroot \u5c06 Debian \u7684 rootfs \u6839\u6587\u4ef6\u7cfb\u7edf\u4f5c\u4e3a\u65b0\u8fdb\u7a0b\u7684\u6839\u3002 \u81f3\u4e8e rootfs \u5982\u4f55\u83b7\u5f97\uff0c\u6211\u4eec\u8fd9\u91cc\u7528 Docker \u6765\u5b8c\u6210\uff0c\u4f46\u8fd9\u4e0d\u662f\u672c\u8282\u7684\u91cd\u70b9\uff0c\u53ef\u4ee5\u6682\u65f6\u5ffd\u7565\u5b83\uff0c\u5728\u4ee5\u540e\u7684\u7ae0\u8282\u4e2d\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002 # \u521b\u5efa\u4e00\u4e2a\u7a7a\u6587\u4ef6\u5939 (MoeLove) \u279c ~ mkdir chroot-dir (MoeLove) \u279c ~ cd chroot-dir # \u4f7f\u7528 Docker \u6765\u63d0\u53d6 Debian \u7684 rootfs (MoeLove) \u279c chroot-dir docker save -o debian.tar debian:buster (MoeLove) \u279c chroot-dir ls debian.tar (MoeLove) \u279c chroot-dir tar -xf debian.tar (MoeLove) \u279c chroot-dir ls 098963abf3c3b87b8114ff67d164097dfac2d5659e39f9beb5604db91585f375.json debian.tar repositories 0f28619fe69181d3af529d56692f1362b7a7c8a6bf8dc9ab0d6d4f9ef9b0004d manifest.json (MoeLove) \u279c chroot-dir mkdir -p debian (MoeLove) \u279c chroot-dir tar -C debian -xf 0f28619fe69181d3af529d56692f1362b7a7c8a6bf8dc9ab0d6d4f9ef9b0004d/layer.tar (MoeLove) \u279c chroot-dir ls debian bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var \u7ecf\u8fc7\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u5c31\u62ff\u5230\u4e86 Debian \u7684 rootfs\uff0c\u63a5\u4e0b\u6765\u770b\u770b chroot \u7684\u80fd\u529b\uff1a # \u4f7f\u7528 debian \u6587\u4ef6\u5939\u4f5c\u4e3a\u5bb9\u5668\u7684\u6839 (MoeLove) \u279c chroot-dir sudo chroot debian /bin/bash -i [sudo] tao \u7684\u5bc6\u7801\uff1a root@localhost:/# whoami root root@localhost:/# cat /etc/os-release PRETTY_NAME=\"Debian GNU/Linux 10 (buster)\" NAME=\"Debian GNU/Linux\" VERSION_ID=\"10\" VERSION=\"10 (buster)\" VERSION_CODENAME=buster ID=debian HOME_URL=\"https://www.debian.org/\" SUPPORT_URL=\"https://www.debian.org/support\" BUG_REPORT_URL=\"https://bugs.debian.org/\" \u6b64\u65f6\u6211\u4eec\u5c31\u5df2\u7ecf\u5728\u4e00\u4e2a\u201c\u5bb9\u5668\u201d\u5185\u4e86\uff0c\u6765\u770b\u4e0b\u4f7f\u7528\u8fd9\u4e2a\u201c\u5bb9\u5668\u201d\u80fd\u505a\u4e9b\u4ec0\u4e48\u3002 \u9996\u5148\u770b\u770b\u5f53\u524d\u201c\u5bb9\u5668\u201d\u5185\u7684\u8def\u7531\u8868\uff1a root@localhost:/# mkdir -p /sys root@localhost:/# mount -t sysfs sys /sys root@localhost:/# ip r default via 192.168.0.1 dev wlp2s0 proto dhcp metric 600 172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown 192.168.0.0/24 dev wlp2s0 proto kernel scope link src 192.168.0.108 metric 600 192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 linkdown \u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06 /proc \u4e5f\u6302\u8f7d\u8fdb\u53bb\uff1a root@localhost:/# mkdir -p /proc root@localhost:/# mount -t proc proc /proc # \u8fd9\u91cc\u662f\u968f\u610f\u627e\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u67e5\u770b root@localhost:/# ls -al /proc/31730/ns/pid lrwxrwxrwx. 1 1000 1000 0 Jul 29 16:47 /proc/31730/ns/pid -> 'pid:[4026531836]' \u53ef\u4ee5\u770b\u5230\u5728\u8fd9\u4e2a\u201c\u5bb9\u5668\u201d\u5185\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5230\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\u4fe1\u606f\uff0c\u8fd9\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u7684\u8fdb\u7a0b\u9694\u79bb\uff0c\u5e26\u6765\u7684\u5371\u9669\u662f\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728\u8fd9\u4e2a\u201c\u5bb9\u5668\u201d\u5185\u6740\u6389\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\uff0c\u6216\u8005\u901a\u8fc7\u201c\u5bb9\u5668\u201d\u6765\u653b\u51fb\u4e3b\u673a\u3002 \u4e3a\u4e86\u80fd\u66f4\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u51fa\u73b0\u4e86\u53e6\u4e00\u4e2a\u6280\u672f\uff1aNamespace\u3002","title":"chroot"},{"location":"docker/Docker%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/#namespace","text":"Namespace \u662f\u5728 2002 \u5e74\u7531 Linux 2.4.19 \u5f00\u59cb\u52a0\u5165\u5185\u6838\u7684\u7279\u6027\uff0c\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u505a\u4e86\u4e00\u5c42\u62bd\u8c61\u548c\u9694\u79bb\uff0c\u4f7f\u5f97\u5728 namespace \u4e2d\u7684\u8fdb\u7a0b / \u8fdb\u7a0b\u7ec4\u53ef\u4ee5\u770b\u8d77\u6765\u62e5\u6709\u81ea\u5df1\u7684\u72ec\u7acb\u8d44\u6e90\uff0c\u5177\u4f53\u7684\u201c\u8d44\u6e90\u201d\u8868\u73b0\u5f62\u5f0f\u53d6\u51b3\u4e8e\u7ed9\u5b83\u8d4b\u4e88\u4e86\u54ea\u4e9b namespace\u3002 \u968f\u7740 2013 \u5e74 Linux 3.8 \u4e2d user namespace \u7684\u5f15\u5165\uff0c\u5bf9\u4e8e\u6211\u4eec\u73b0\u5728\u6240\u719f\u77e5\u7684\u5bb9\u5668\u6240\u9700\u7684\u5168\u90e8 namespace \u5c31\u90fd\u5b9e\u73b0\u4e86\uff1amnt\u3001pid\u3001net\u3001ipc\u3001uts\u3001user \u548c cgroup \u5bf9\u4e8e\u8fd9\u4e9b Namespace \u548c Docker \u7684\u5173\u7cfb\uff0c\u6211\u4eec\u5728\u4ee5\u540e\u7684\u7ae0\u8282\u4e2d\u90fd\u4f1a\u6df1\u5165\u5b66\u4e60\uff0c\u8fd9\u91cc\u5148\u5bf9 Namespace \u505a\u4e0b\u4ecb\u7ecd\uff0c\u4fbf\u4e8e\u5927\u5bb6\u4e86\u89e3\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u76f4\u63a5\u64cd\u4f5c Namespace\uff0c\u8fd9\u4e09\u4e2a\u7cfb\u7edf\u8c03\u7528\u5206\u522b\u662f\uff1a clone\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u4e0d\u540c namespace \u7684\u6807\u5fd7\u6765\u4e3a\u65b0\u7684\uff08\u5b50\uff09\u8fdb\u7a0b\u6307\u5b9a\u5176\u6240\u5c5e\u7684 namespace\uff1b unshare\uff0c\u5141\u8bb8\u4e00\u4e2a\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u53d6\u6d88\u5f53\u524d\u4e0e\u5176\u4ed6\u8fdb\u7a0b\uff08\u6216\u7ebf\u7a0b\uff09\u5171\u4eab\u7684\u6267\u884c\u4e0a\u4e0b\u6587\uff1b setns\uff0c\u8fdb\u5165\u6587\u4ef6\u63cf\u8ff0\u7b26\u6307\u5b9a\u7684 namespace\u3002 \u77e5\u9053\u4e86\u8fd9\u4e9b\u57fa\u7840\u77e5\u8bc6\u540e\uff0c\u6211\u4eec\u56de\u5230\u524d\u9762\u201c\u5bb9\u5668\u201d\u7684\u5185\u5bb9\u4e2d\u3002 \u6211\u4eec\u5728\u524d\u9762 chroot \u7684\u4f8b\u5b50\u4e2d\u770b\u5230\u6ca1\u80fd\u505a\u5230\u8fdb\u7a0b\u9694\u79bb\uff0c\u73b0\u5728\u6765\u8bd5\u8bd5\u770b\u7528 namespace \u5b8c\u6210\u8be5\u9700\u6c42\u3002 (MoeLove) \u279c ~ sudo unshare -fp --mount-proc -n [sudo] tao \u7684\u5bc6\u7801\uff1a [root@localhost]/home/tao# ps -a PID TTY TIME CMD 1 pts/15 00:00:00 zsh 33 pts/15 00:00:00 ps \u8fd9\u91cc\u5f88\u660e\u663e\uff0c\u6211\u4eec\u5f53\u524d\u6240\u5728\u8fdb\u7a0b\u7684 PID \u4e3a 1 \u5e76\u4e14\u770b\u4e0d\u5230\u5bbf\u4e3b\u673a\u4e0a\u7684\u5176\u4ed6\u8fdb\u7a0b\uff0c\u8fbe\u5230\u4e86\u57fa\u7840\u7684\u9694\u79bb\u6548\u679c\u3002","title":"Namespace"},{"location":"docker/Docker%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/#cgroups-lxc","text":"\u53e6\u4e00\u6761\u5173\u952e\u7684\u65f6\u95f4\u7ebf\u5728 2008 \u5e74\uff0ccgroups \u8fdb\u5165 Linux 2.6.24 \u540e\uff0c\u57fa\u4e8e\u5b83\u5e76\u4e14\u7784\u51c6\u5bb9\u5668\u4e16\u754c\u7684\u4e00\u4e2a\u9879\u76ee\u8bde\u751f\u4e86\u3002 Linux Container \uff08LXC\uff09\u7ed3\u5408\u4e86 namespace \u548c cgroups \u7b49\u6280\u672f\uff0c\u76ee\u6807\u5c31\u662f\u8981\u521b\u9020\u51fa\u8fd0\u884c\u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u5e76\u4e14\u9694\u79bb\u6027\u826f\u597d\u7684\u5bb9\u5668\u73af\u5883\u3002 LXC \u7684\u53d1\u5e03\u5728 2008 \u5e74\uff0c\u4f46\u503c\u5f97\u6ce8\u610f\u7684\u662f cgroups \u6700\u521d\u662f\u7531 Google \u7684\u5de5\u7a0b\u5e08\u5f00\u53d1\u7684\uff0c\u6700\u65e9\u7684\u8bb0\u5f55\u662f\u5728 2006 \u5e74\uff0c\u4e8b\u5b9e\u4e0a\u5f53\u65f6 Google \u786e\u5b9e\u4e5f\u5728\u505a\u7c7b\u4f3c\u7684\u5bb9\u5668\u5316\u9879\u76ee\u3002","title":"cgroups \u548c LXC"},{"location":"docker/Docker%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/#docker","text":"\u65f6\u95f4\u4e00\u6643\u800c\u8fc7\uff0c\u5c31\u5230\u4e86 2013 \u5e74\u7684 PyCon \u4e0a\uff0c\u5728\u8fd9\u6b21\u5927\u4f1a\u4e0a Docker \u6b63\u5f0f\u9762\u4e16\u3002\u800c\u5b83\u5f53\u65f6\u5176\u5b9e\u4e5f\u53ea\u662f\u6784\u5efa\u5728 LXC \u4e4b\u4e0a\u7684\u4e00\u4e2a\u5de5\u5177\uff0c\u5c4f\u853d\u6389\u4e86 LXC \u7684\u4f7f\u7528\u7ec6\u8282\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u4e00\u53e5 docker run \u547d\u4ee4\u884c\u4fbf\u521b\u5efa\u51fa\u81ea\u5df1\u7684\u5bb9\u5668\u73af\u5883\u3002 \u540c\u65f6\uff0c\u5b83\u5141\u8bb8\u7528\u6237\u5c06\u5bb9\u5668\u73af\u5883\u6253\u5305\u6210\u4e3a\u4e00\u4e2a Docker \u955c\u50cf\u8fdb\u884c\u5206\u53d1\uff0c\u8fd9\u4e5f\u5927\u5927\u964d\u4f4e\u4e86\u7528\u6237\u4f7f\u7528\u7684\u95e8\u69db\u3002 Docker \u955c\u50cf\u5206\u53d1\u53ef\u4ee5\u8bf4\u662f Docker \u6210\u529f\u7684\u4e00\u4e2a\u5173\u952e\u8981\u7d20\u4e86\u3002 \u53e6\u4e00\u4e2a\u5173\u952e\u8981\u7d20\uff0c\u6211\u8ba4\u4e3a\u662f\u5f00\u6e90\u751f\u6001\uff0cDocker \u5728\u9996\u6b21\u4eae\u76f8\u4e4b\u540e\u4e0d\u4e45\uff0c\u5c31\u5b8c\u5168\u5f00\u6e90\u4e86\uff0c\u5438\u5f15\u4e86\u6765\u81ea\u4e16\u754c\u5404\u5730\u5f00\u53d1\u8005\u7684\u5173\u6ce8\u548c\u79ef\u6781\u8d21\u732e\u3002 2014 \u5e74 Docker \u53d1\u5e03 1.0 \u6b63\u5f0f\u8fdb\u5165\u751f\u4ea7\u5c31\u7eea\u7684\u72b6\u6001\u3002\u5728\u6b64\u4e4b\u524d\u5b83\u4e5f\u5c06 LXC \u9010\u6b65\u4ece\u5b83\u7684\u5e95\u5c42\u79fb\u9664\uff0c\u6362\u6210\u4e86\u81ea\u5df1\u5b9e\u73b0\u7684 libcontainer\u3002 \u6b64\u540e Docker \u4fbf\u6210\u4e3a\u4e86\u98ce\u9761\u6280\u672f\u754c\u7684\u65b0\u70ed\u6f6e\u3002 \u518d\u540e\u6765\u4e5f\u51fa\u73b0\u8fc7 Swarm Mesos \u548c Kubernetes \u7b49\u4f17\u591a\u5bb9\u5668\u7f16\u6392\u7cfb\u7edf\u4e89\u593a\u5e02\u573a\u4efd\u989d\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0cKubernetes \u6210\u4e3a\u4e86\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\uff0c\u56fd\u5185\u5916\u5404\u4e2a\u516c\u53f8\u4e5f\u90fd\u5728\u63a8\u8fdb Kubernetes \u7684\u843d\u5730\u548c\u5b9e\u65bd\u3002\u800c Docker \u4f5c\u4e3a\u5bb9\u5668\u8fd0\u884c\u65f6\uff0c\u4e5f\u6b63\u662f\u6781\u5176\u5173\u952e\u7684\u4e00\u73af\u3002","title":"Docker \u7684\u53d1\u5c55"},{"location":"docker/Docker%20%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/#_2","text":"\u4ece\u6700\u5148\u7684 chroot \u5230\u540e\u6765\u7684 namespace \u548c cgroups \u7b49\uff0c\u518d\u5230\u540e\u6765\u7684 LXC \u548c Docker \u7b49\u6280\u672f\u7684\u51fa\u73b0\uff0c\u8fd9\u90fd\u662f\u5728\u5bb9\u5668\u6280\u672f\u9886\u57df\u7684\u4e00\u79cd\u63a2\u7d22\u548c\u524d\u8fdb\u3002 \u5f53\u7136\uff0c\u6211\u8fd9\u91cc\u53ea\u5217\u51fa\u4e86\u6211\u8ba4\u4e3a\u6700\u6838\u5fc3\u548c\u5173\u952e\u7684\u5185\u5bb9\uff0c\u4e8b\u5b9e\u4e0a\u5f53\u65f6\u6280\u672f\u5708\u9664\u4e86\u8fd9\u6761\u4e3b\u5e72\u4e4b\u5916\uff0c\u4e5f\u6709\u7740\u5f88\u591a\u652f\u7ebf\u5267\u60c5\uff0c\u6bd4\u5982\u4ece\u5404\u7c7b PaaS \uff08Platform as a Service\uff09\u5382\u5546\u7684\u7ade\u4e89\u5230\u5168\u9762\u62e5\u62b1 Docker \uff0c\u8fd9\u4e9b\u5185\u5bb9\u4e5f\u4ece\u4fa7\u9762\u6765\u53cd\u6620\u51fa\u4e86 Docker \u7684\u706b\u70ed\u3002","title":"\u603b\u7ed3"},{"location":"docker/Docker%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","text":"\u8fd9\u662f\u672c\u4e13\u680f\u7684\u7b2c\u4e00\u90e8\u5206\uff1aDocker \u5165\u95e8\uff0c\u5171 3 \u7bc7\uff0c\u5e26\u5927\u5bb6\u8fdb\u5165 Docker \u7684\u4e16\u754c\u3002\u4e0a\u4e00\u8282\uff0c\u6211\u5e26\u5927\u5bb6\u4e86\u89e3\u4e86 Docker \u548c\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\u5386\u7a0b\uff0c\u77e5\u9053\u4e86\u5b83\u7684\u57fa\u7840\u6280\u672f\u53d1\u5c55\u8def\u7ebf\u3002\u4e0b\u9762\u4e00\u8d77\u8fdb\u5165\u7b2c\u4e8c\u8282\u7684\u5185\u5bb9\u3002 Docker \u5b89\u88c5 \u00b6 Docker \u652f\u6301 Linux\u3001MacOS \u548c Windows \u7b49\u7cfb\u7edf\uff0c\u4e14\u5728 Linux \u7684\u5404\u53d1\u884c\u7248\u4e2d\u7684\u5b89\u88c5\u6b65\u9aa4\u4e5f\u90fd\u7565\u6709\u5dee\u5f02\u3002 \u8fd9\u91cc\u6211\u4e0d\u4f1a\u5217\u51fa\u5b83\u5728\u5404\u4e2a\u7cfb\u7edf\u5e73\u53f0\u4e0a\u7684\u5177\u4f53\u5b89\u88c5\u6b65\u9aa4\uff0c\u56e0\u4e3a Docker \u7684\u6587\u6863\u63cf\u8ff0 \u7684\u5f88\u8be6\u7ec6\u4e86\uff0c\u6ca1\u5fc5\u8981\u8d58\u8ff0\u3002 \u8fd9\u91cc\u6211\u5bf9\u5728 Linux \u5e73\u53f0\u4e0b\u7684\u5b89\u88c5\u591a\u8bf4\u4e00\u70b9\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u53d1\u884c\u7248\uff0c\u5982 Debian\u3001Ubuntu\u3001CentOS\u3001Fedora \u7b49\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 https://get.docker.com/ \u4e2d\u63d0\u4f9b\u7684\u811a\u672c\u6765\u4e00\u952e\u5b8c\u6210\u5b89\u88c5\u3002 # \u4e0b\u8f7d\u811a\u672c $ curl -fsSL https://get.docker.com -o get-docker.sh \u811a\u672c\u4e2d\u5185\u7f6e\u4e86\u4f7f\u7528\u56fd\u5185\u6e90\u8fdb\u884c\u52a0\u901f\uff1a # \u4f7f\u7528 Azure \u8fdb\u884c\u52a0\u901f $ sh get-docker.sh --mirror AzureChinaCloud \u6216 # \u4f7f\u7528 Aliyun \u8fdb\u884c\u52a0\u901f $ sh get-docker.sh --mirror Aliyun \u5728\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u5f3a\u70c8\u5efa\u8bae\u9605\u8bfb \u5b98\u65b9\u6587\u6863 \uff0c\u5bf9\u5df2\u7ecf\u5b89\u88c5\u7684 Docker \u8fdb\u884c\u914d\u7f6e\uff0c\u6bd4\u5982\u914d\u7f6e Docker \u7684\u5f00\u673a\u81ea\u542f\u52a8\u3002 \u7b2c\u4e00\u4e2a\u5bb9\u5668 \u5728\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u6b63\u5f0f\u5f00\u59cb\u3002 \u7ecf\u8fc7\u4e0a\u4e00\u8282\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u4e5f\u77e5\u9053 Docker \u4e00\u5f00\u59cb\u80fd\u80dc\u51fa\uff0c\u800c\u4e14\u5438\u5f15\u65e0\u6570\u5f00\u53d1\u8005\uff0c\u4e0e\u5b83\u7684\u6613\u7528\u6027\u662f\u5bc6\u4e0d\u53ef\u5206\u7684\u3002 \u4f7f\u7528 Docker \u542f\u52a8\u5bb9\u5668\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4e00\u53e5 docker run \u547d\u4ee4\u884c\u5373\u53ef\u641e\u5b9a\u3002 \u4f8b\u5982\uff0c\u5f53\u6211\u60f3\u8981\u8fd0\u884c\u6700\u65b0\u7248\u672c\u7684 Python \u89e3\u91ca\u5668\u65f6\uff0c\u53ea\u9700\u8981\u4e00\u53e5 docker run -it python \u5373\u53ef\u3002 ( MoeLove ) \u279c ~ docker run -it python Unable to find image 'python:latest' locally latest: Pulling from library/python 4ae16bd47783: Pull complete bbab4ec87ac4: Pull complete 2ea1f7804402: Pull complete 96465440c208: Pull complete 6ac892e64b94: Pull complete 5b3ec9e84adf: Pull complete 317202007d7c: Pull complete ba1ee226143f: Pull complete cba5f4ed3782: Pull complete Digest: sha256:4432d65bd7da4693bb9365c3369ed5c7f0cb472195a294c54d1b766751098f7b Status: Downloaded newer image for python:latest Python 3 .7.4 ( default, Aug 14 2019 , 12 :09:51 ) [ GCC 8 .3.0 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> import sys >>> sys.version '3.7.4 (default, Aug 14 2019, 12:09:51) \\n[GCC 8.3.0]' \u770b\u5427\u771f\u7684\u5f88\u7b80\u5355\uff0c\u73b0\u5728\u5df2\u7ecf\u8fd0\u884c\u4e86\u4e00\u4e2a\u5bb9\u5668\uff0c\u5e76\u5728\u5bb9\u5668\u4e2d\u5b8c\u6210\u4e86\u64cd\u4f5c\u3002 \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\uff0c\u6211\u4eec\u5728 docker run \u547d\u4ee4\u4e0e python \u955c\u50cf\u4e4b\u95f4\u52a0\u4e86 -it \u7684\u53c2\u6570\u3002 \u8fd9\u662f\u4e00\u79cd\u7b80\u5199\uff0c\u5b9e\u9645\u4e0a\u8fd9\u6761\u547d\u4ee4\u7684\u5b8c\u6574\u5199\u6cd5\u662f docker run --interactive --tty python \u3002 \u5176\u4e2d\uff1a --interactive \u5c31\u5982\u540c\u5b83\u5b57\u9762\u4e0a\u7684\u610f\u601d\uff0c\u4f7f\u7528\u6b64\u9009\u9879\u8868\u793a\u4f1a\u4fdd\u6301\u6807\u51c6\u8f93\u5165\uff08STDIN\uff09\u6253\u5f00\uff0c\u4ece\u6807\u51c6\u8f93\u5165\u6765\u63a5\u6536\u8f93\u5165\u4fe1\u53f7\uff1b --tty \u53c2\u6570\u5219\u8868\u793a\u5206\u914d\u4e00\u4e2a\u4f2a\u7ec8\u7aef\u7ed9\u5bb9\u5668\u3002 \u8fd9\u4e24\u4e2a\u9009\u9879\u5e38\u5e38\u4e00\u8d77\u4f7f\u7528\uff0c\u7528\u4e8e\u4e0e\u5bb9\u5668\u5185\u7a0b\u5e8f\u76f4\u63a5\u8fdb\u884c\u4ea4\u4e92\u3002 \u7406\u89e3\u4e86\u4e0a\u8ff0\u5185\u5bb9\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5bb9\u5668\u5b9e\u9a8c\u4e5f\u5c31\u987a\u5229\u7ed3\u675f\u4e86\u3002 \u540e\u53f0\u8fd0\u884c\u5bb9\u5668 \u00b6 \u6211\u4eec\u5e76\u4e0d\u603b\u662f\u5e0c\u671b\u4e00\u76f4\u4fdd\u6301\u4e0e\u5bb9\u5668\u8fdb\u884c\u4ea4\u4e92\uff0c\u5982 Redis\u3001NGINX \u4e4b\u7c7b\u7684\u8fd9\u79cd\u53ef\u63d0\u4f9b\u670d\u52a1\u7684\u5bb9\u5668\uff0c\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u53ea\u662f\u5e0c\u671b\u5b83\u53ef\u4ee5\u8fd0\u884c\u5728\u540e\u53f0\u63d0\u4f9b\u670d\u52a1\u5373\u53ef\u3002 \u7ecf\u8fc7\u524d\u9762\u5185\u5bb9\u7684\u4ecb\u7ecd\uff0c\u4e5f\u8bb8\u4f1a\u6709\u4eba\u5f88\u81ea\u7136\u7684\u8ba4\u4e3a\uff0c\u65e2\u7136\u589e\u52a0 --interactive \u548c --tty \u53c2\u6570\u53ef\u4ee5\u8ba9\u6211\u4eec\u76f4\u63a5\u4e0e\u5bb9\u5668\u8fdb\u884c\u4ea4\u4e92\uff0c\u90a3\u5982\u679c\u53bb\u6389\u8fd9\u4e24\u4e2a\u53c2\u6570\uff0c\u662f\u5426\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5bb9\u5668\u4e0d\u4e0e\u6211\u4eec\u4ea4\u4e92\uff0c\u8fd0\u884c\u5728\u540e\u53f0\u5462\uff1f\u4e0d\u59a8\u6765\u8bd5\u8bd5\u770b\uff1a ( MoeLove ) \u279c ~ docker run python ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7a803976d0a4 python \"python3\" 10 seconds ago Exited ( 0 ) 9 seconds ago flamboyant_yalow \u6267\u884c\u5b8c docker run python \u540e\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\u6216\u53cd\u9988\uff0c\u901a\u8fc7 docker ps \u6765\u67e5\u770b\u5bb9\u5668\u7684\u72b6\u6001\u3002\u5176\u4e2d\uff0c-l \u53c2\u6570\u662f --latest \u7684\u7f29\u5199\uff0c\u8868\u793a\u6700\u65b0\u7684\u5bb9\u5668\uff08\u5305\u542b\u6240\u6709\u72b6\u6001\uff09\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5bb9\u5668\u7684\u72b6\u6001\u662f\u5df2\u7ecf\u9000\u51fa\u4e86\u3002 \u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u56de\u5fc6\u4e0b\u521a\u624d\u5e26\u7740 --interactive \u548c --tty \u7684\u65f6\u5019\uff0c\u542f\u52a8\u5bb9\u5668\u540e\uff0c\u76f4\u63a5\u8fdb\u5165\u4e86 Python \u7684\u53ef\u4ea4\u4e92\u5f0f\u7ec8\u7aef\u5185\u3002\u800c\u73b0\u5728\u6211\u4eec\u6ca1\u6709\u643a\u5e26\u4efb\u4f55\u53c2\u6570\uff0c\u90a3\u81ea\u7136\u5728\u542f\u52a8\u65f6 Python \u7684\u7ec8\u7aef\u77e5\u9053\u5373\u4f7f\u7b49\u5f85\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u7ed3\u679c\uff0c\u56e0\u6b64\u5c31\u9000\u51fa\u4e86\u3002 \u90a3\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\u6539\u53d8\u8fd9\u4e00\u60c5\u51b5\u5462\uff1f \u6709\uff0c\u6211\u4eec\u7ed9\u547d\u4ee4\u7684\u6700\u540e\u589e\u52a0\u4e00\u4e9b\u53c2\u6570\u6765\u89e3\u51b3\u3002 ( MoeLove ) \u279c ~ docker run python sleep 60 \u52a0\u4e86\u4e00\u53e5 sleep 60\uff0c\u73b0\u5728\u6574\u4e2a\u7ec8\u7aef\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff0c\u4e5f\u65e0\u6cd5\u8fdb\u884c\u4ea4\u4e92\uff08\u6bd5\u7adf\u6211\u4eec\u6ca1\u6709\u4f20\u9012\u8fc7 --interactive \u7684\u53c2\u6570\uff0c\u56e0\u6b64\u8f93\u5165\u662f\u65e0\u6548\u7684\uff09\u3002\u53e6\u5916\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u6267\u884c\u521a\u624d\u7684 docker ps -l \u547d\u4ee4\u8fdb\u884c\u67e5\u770b\u3002 ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 82686b276ec4 python \"sleep 60\" 6 seconds ago Up 5 seconds cranky_banach \u53ef\u4ee5\u770b\u5230\u8be5\u5bb9\u5668\u662f Up \u7684\u72b6\u6001\uff0c\u4e14\u6b63\u5728\u6267\u884c sleep 60 \u7684\u547d\u4ee4\uff0c\u8fd9\u8bf4\u660e\u6211\u4eec\u5728\u6700\u540e\u4f20\u9012\u7684\u547d\u4ee4\u662f\u53ef\u6267\u884c\u7684\u3002 \u73b0\u5728\u5bb9\u5668\u7684\u884c\u4e3a\u5e76\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\uff0c\u90a3\u5982\u4f55\u5b9e\u73b0\u9884\u671f\u5462\uff1f \u7b54\u6848\u662f\u53ef\u4ee5\u7ed9 docker run \u547d\u4ee4\u4f20\u9012 -d \u6216\u8005\u5b8c\u6574\u7684 --detach \u53c2\u6570\uff0c\u8fd9\u8868\u793a\u5c06\u5bb9\u5668\u8fd0\u884c\u4e8e\u540e\u53f0\u3002\u6765\u8bd5\u8bd5\u770b\u3002 ( MoeLove ) \u279c ~ docker run -d python sleep 60 9f2b81e85893b1f8402247867344c9ab6bde92f377ec9949bd491e857b570048 \u8be5\u547d\u4ee4\u6267\u884c\u540e\uff0c\u8f93\u51fa\u4e86\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u7ec8\u7aef\u5e76\u6ca1\u6709\u88ab\u5360\u7528\uff0c\u6765\u6267\u884c docker ps -l \u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9f2b81e85893 python \"sleep 60\" 5 seconds ago Up 4 seconds pensive_fermat \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u4e5f\u6b63\u5728\u8fd0\u884c\uff0c\u7b26\u5408\u6211\u4eec\u9884\u671f\u7684 \u201c\u540e\u53f0\u8fd0\u884c\u5bb9\u5668\u201d \u3002 \u5c0f\u7ed3 \u00b6 \u4f7f\u7528 docker run \u955c\u50cf\u540d \u547d\u4ee4\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728\u6267\u884c\u8be5\u547d\u4ee4\u65f6\u7ec4\u5408\u4f7f\u7528 --interactive \u548c --tty \u53ef\u76f4\u63a5\u4e0e\u5bb9\u5668\u5185\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002 \u5bb9\u5668\u542f\u52a8\u65f6\uff0c\u5728\u955c\u50cf\u540d\u4e4b\u540e\u5199\u547d\u4ee4\uff0c\u53ef\u4f20\u9012\u81f3\u6211\u4eec\u5b9e\u9a8c\u7684\u5bb9\u5668\u5185\uff08\u5177\u4f53\u539f\u56e0\u4f1a\u653e\u5728\u4e0b\u4e00\u4e2a\u90e8\u5206\u7684\u7ae0\u8282\u8bb2\uff09\u3002 \u540c\u6837\u5730\uff0c\u5f53\u6211\u4eec\u542f\u52a8\u5bb9\u5668\u65f6\uff0c\u4f20\u9012\u4e86 --detach \u53c2\u6570\uff0c\u5e76\u4e14\u5bb9\u5668\u5185\u6267\u884c\u7684\u7a0b\u5e8f\u65e0\u9700\u7b49\u5f85\u4ea4\u4e92\uff0c\u5219\u5bb9\u5668\u53ef\u4ee5\u542f\u52a8\u5728\u540e\u53f0\u3002 \u8fdb\u5165\u5bb9\u5668 \u00b6 \u521a\u624d\u6211\u4eec\u7684\u5bb9\u5668\u5df2\u7ecf\u542f\u52a8\u5728\u4e86\u540e\u53f0\uff0c\u5982\u679c\u6b64\u65f6\u60f3\u8981\u5728\u5bb9\u5668\u5185\u6267\u884c\u4e00\u6761\u547d\u4ee4\uff0c\u6216\u8005\u60f3\u8981\u8fd0\u884c Python \u7684\u89e3\u91ca\u5668\u8be5\u5982\u4f55\u64cd\u4f5c\u5462\uff1f \u7b54\u6848\u662f\u7528 docker exec\uff1a ( MoeLove ) \u279c ~ docker run -d python sleep 60 10aad6e0af4fad2405c420a90fbf56f9689f033608e6f22d987c2f18d644eda9 ( MoeLove ) \u279c ~ docker exec -it 10aad6e0af4fad2405c420a90fbf56f9689f033608e6f22d987c2f18d644eda9 python Python 3 .7.4 ( default, Aug 14 2019 , 12 :09:51 ) [ GCC 8 .3.0 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> import sys >>> sys.version '3.7.4 (default, Aug 14 2019, 12:09:51) \\n[GCC 8.3.0]' \u5982\u4e0a\u6240\u8ff0\uff0c -it \u4ecd\u7136\u662f --interactive \u548c --tty \u7684\u7f29\u5199\uff0c\u6700\u540e\u7684 python \u662f\u6211\u4eec\u9884\u671f\u8981\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5f53\u7136\u6362\u6210 bash \u6216\u8005\u5176\u4ed6\u547d\u4ee4\u4e5f\u53ef\u4ee5\u3002 ( MoeLove ) \u279c ~ docker exec -it 10aad6e0af4fad2405c420a90fbf56f9689f033608e6f22d987c2f18d644eda9 bash root@f396422ae58d:/# ls bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var \u603b\u7ed3 \u00b6 \u901a\u8fc7\u672c\u8282\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4f7f\u7528 docker run \u955c\u50cf \u6765\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u53ef\u4ee5\u7ed9\u6b64\u547d\u4ee4\u4f20\u9012 --interactive \u548c --tty \uff08\u7b80\u5199\u7ec4\u5408\u4e3a -it\uff09\u53c2\u6570\uff0c\u4ee5\u8fbe\u5230\u76f4\u63a5\u4e0e\u5bb9\u5668\u5185\u5e94\u7528\u7a0b\u5e8f\u76f4\u63a5\u4ea4\u4e92\u7684\u76ee\u7684\u3002 \u53e6\u5916\u4e5f\u53ef\u4ee5\u5728 docker run \u955c\u50cf \u4e4b\u540e\u4f20\u9012\u547d\u4ee4\u548c\u53c2\u6570\uff0c\u4ee5\u6539\u53d8\u4f7f\u7528\u955c\u50cf\u542f\u52a8\u5bb9\u5668\u540e\u7684\u9ed8\u8ba4\u884c\u4e3a\uff08\u7531\u4e8e\u672c\u7bc7\u662f Docker \u5165\u95e8\u7684\u5185\u5bb9\uff0c\u4e3a\u4e86\u8ba9\u8bfb\u8005\u66f4\u6613\u7406\u89e3\uff0c\u6b64\u5904\u7684\u8868\u8ff0\u4e0d\u662f\u5f88\u4e25\u8c28\uff0c\u5728\u4e0b\u4e00\u90e8\u5206\u7684\u7ae0\u8282\u4e2d\u4f1a\u8fdb\u884c\u8865\u5145\uff09\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012 sleep 60 \u8ba9\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 Python \u5bb9\u5668\u542f\u52a8\u540e\u4f11\u7720 60s\uff1b\u914d\u5408\u7740\u7ed9 docker run \u4f20\u9012\u7684 --detach \u53c2\u6570\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5c06\u5bb9\u5668\u542f\u52a8\u5728\u540e\u53f0\u7684\u76ee\u7684\u3002 \u9664\u4e86\u4ee5\u4e0a\u5185\u5bb9\uff0c\u8fd8\u4ecb\u7ecd\u4e86\u4f7f\u7528 docker ps \u53ef\u5217\u51fa\u5bb9\u5668\u8bb0\u5f55\uff0c\u901a\u8fc7\u7ed9\u5b83\u4f20\u9012 -l \u53c2\u6570\u53ef\u5f97\u5230\u6700\u8fd1\u7684\u4e00\u6761\u8bb0\u5f55\u3002 \u5982\u679c\u662f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7 docker exec -it \u5bb9\u5668 ID/\u540d\u79f0 \u547d\u4ee4 \u7684\u65b9\u5f0f\u8fdb\u5165\u8be5\u5bb9\u5668\u5185\u3002 \u4ee5\u4e0a\u4fbf\u662f\u672c\u8282\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u5c31\u662f\u201cDocker \u5165\u95e8\u201d\u5417\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u662f\u7684\u3002 Docker \u4e00\u76f4\u4ee5\u6613\u7528\u6027\u8457\u79f0\uff0c\u4e14 Docker \u4e5f\u4e00\u76f4\u5f88\u6ce8\u610f\u7528\u6237\u4f53\u9a8c\uff0c\u4ece Docker \u7684\u9996\u6b21\u9762\u4e16\u5230\u73b0\u5728\uff0c\u4e00\u76f4\u90fd\u662f\u7528 docker run \u955c\u50cf \u8fd9\u6837\u7b80\u5355\u7684\u4e00\u53e5\u547d\u4ee4\u5373\u53ef\u542f\u52a8\u5bb9\u5668\u3002 Docker \u7684\u5176\u4ed6\u77e5\u8bc6\uff0c\u540e\u7eed\u7ae0\u8282\u4e2d\u4f1a\u901a\u8fc7\u5b9e\u8df5\u52a0\u6df1\u5165\u539f\u7406\u7684\u65b9\u5f0f\uff0c\u9010\u5c42\u9012\u8fdb\uff0c\u5e26\u4f60\u638c\u63e1 Docker \u7684\u6838\u5fc3\u77e5\u8bc6\uff01","title":"Docker \u7684\u57fa\u672c\u4f7f\u7528"},{"location":"docker/Docker%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#docker","text":"Docker \u652f\u6301 Linux\u3001MacOS \u548c Windows \u7b49\u7cfb\u7edf\uff0c\u4e14\u5728 Linux \u7684\u5404\u53d1\u884c\u7248\u4e2d\u7684\u5b89\u88c5\u6b65\u9aa4\u4e5f\u90fd\u7565\u6709\u5dee\u5f02\u3002 \u8fd9\u91cc\u6211\u4e0d\u4f1a\u5217\u51fa\u5b83\u5728\u5404\u4e2a\u7cfb\u7edf\u5e73\u53f0\u4e0a\u7684\u5177\u4f53\u5b89\u88c5\u6b65\u9aa4\uff0c\u56e0\u4e3a Docker \u7684\u6587\u6863\u63cf\u8ff0 \u7684\u5f88\u8be6\u7ec6\u4e86\uff0c\u6ca1\u5fc5\u8981\u8d58\u8ff0\u3002 \u8fd9\u91cc\u6211\u5bf9\u5728 Linux \u5e73\u53f0\u4e0b\u7684\u5b89\u88c5\u591a\u8bf4\u4e00\u70b9\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\u53d1\u884c\u7248\uff0c\u5982 Debian\u3001Ubuntu\u3001CentOS\u3001Fedora \u7b49\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 https://get.docker.com/ \u4e2d\u63d0\u4f9b\u7684\u811a\u672c\u6765\u4e00\u952e\u5b8c\u6210\u5b89\u88c5\u3002 # \u4e0b\u8f7d\u811a\u672c $ curl -fsSL https://get.docker.com -o get-docker.sh \u811a\u672c\u4e2d\u5185\u7f6e\u4e86\u4f7f\u7528\u56fd\u5185\u6e90\u8fdb\u884c\u52a0\u901f\uff1a # \u4f7f\u7528 Azure \u8fdb\u884c\u52a0\u901f $ sh get-docker.sh --mirror AzureChinaCloud \u6216 # \u4f7f\u7528 Aliyun \u8fdb\u884c\u52a0\u901f $ sh get-docker.sh --mirror Aliyun \u5728\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u5f3a\u70c8\u5efa\u8bae\u9605\u8bfb \u5b98\u65b9\u6587\u6863 \uff0c\u5bf9\u5df2\u7ecf\u5b89\u88c5\u7684 Docker \u8fdb\u884c\u914d\u7f6e\uff0c\u6bd4\u5982\u914d\u7f6e Docker \u7684\u5f00\u673a\u81ea\u542f\u52a8\u3002 \u7b2c\u4e00\u4e2a\u5bb9\u5668 \u5728\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u6b63\u5f0f\u5f00\u59cb\u3002 \u7ecf\u8fc7\u4e0a\u4e00\u8282\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u4e5f\u77e5\u9053 Docker \u4e00\u5f00\u59cb\u80fd\u80dc\u51fa\uff0c\u800c\u4e14\u5438\u5f15\u65e0\u6570\u5f00\u53d1\u8005\uff0c\u4e0e\u5b83\u7684\u6613\u7528\u6027\u662f\u5bc6\u4e0d\u53ef\u5206\u7684\u3002 \u4f7f\u7528 Docker \u542f\u52a8\u5bb9\u5668\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u4e00\u53e5 docker run \u547d\u4ee4\u884c\u5373\u53ef\u641e\u5b9a\u3002 \u4f8b\u5982\uff0c\u5f53\u6211\u60f3\u8981\u8fd0\u884c\u6700\u65b0\u7248\u672c\u7684 Python \u89e3\u91ca\u5668\u65f6\uff0c\u53ea\u9700\u8981\u4e00\u53e5 docker run -it python \u5373\u53ef\u3002 ( MoeLove ) \u279c ~ docker run -it python Unable to find image 'python:latest' locally latest: Pulling from library/python 4ae16bd47783: Pull complete bbab4ec87ac4: Pull complete 2ea1f7804402: Pull complete 96465440c208: Pull complete 6ac892e64b94: Pull complete 5b3ec9e84adf: Pull complete 317202007d7c: Pull complete ba1ee226143f: Pull complete cba5f4ed3782: Pull complete Digest: sha256:4432d65bd7da4693bb9365c3369ed5c7f0cb472195a294c54d1b766751098f7b Status: Downloaded newer image for python:latest Python 3 .7.4 ( default, Aug 14 2019 , 12 :09:51 ) [ GCC 8 .3.0 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> import sys >>> sys.version '3.7.4 (default, Aug 14 2019, 12:09:51) \\n[GCC 8.3.0]' \u770b\u5427\u771f\u7684\u5f88\u7b80\u5355\uff0c\u73b0\u5728\u5df2\u7ecf\u8fd0\u884c\u4e86\u4e00\u4e2a\u5bb9\u5668\uff0c\u5e76\u5728\u5bb9\u5668\u4e2d\u5b8c\u6210\u4e86\u64cd\u4f5c\u3002 \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\uff0c\u6211\u4eec\u5728 docker run \u547d\u4ee4\u4e0e python \u955c\u50cf\u4e4b\u95f4\u52a0\u4e86 -it \u7684\u53c2\u6570\u3002 \u8fd9\u662f\u4e00\u79cd\u7b80\u5199\uff0c\u5b9e\u9645\u4e0a\u8fd9\u6761\u547d\u4ee4\u7684\u5b8c\u6574\u5199\u6cd5\u662f docker run --interactive --tty python \u3002 \u5176\u4e2d\uff1a --interactive \u5c31\u5982\u540c\u5b83\u5b57\u9762\u4e0a\u7684\u610f\u601d\uff0c\u4f7f\u7528\u6b64\u9009\u9879\u8868\u793a\u4f1a\u4fdd\u6301\u6807\u51c6\u8f93\u5165\uff08STDIN\uff09\u6253\u5f00\uff0c\u4ece\u6807\u51c6\u8f93\u5165\u6765\u63a5\u6536\u8f93\u5165\u4fe1\u53f7\uff1b --tty \u53c2\u6570\u5219\u8868\u793a\u5206\u914d\u4e00\u4e2a\u4f2a\u7ec8\u7aef\u7ed9\u5bb9\u5668\u3002 \u8fd9\u4e24\u4e2a\u9009\u9879\u5e38\u5e38\u4e00\u8d77\u4f7f\u7528\uff0c\u7528\u4e8e\u4e0e\u5bb9\u5668\u5185\u7a0b\u5e8f\u76f4\u63a5\u8fdb\u884c\u4ea4\u4e92\u3002 \u7406\u89e3\u4e86\u4e0a\u8ff0\u5185\u5bb9\uff0c\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u5bb9\u5668\u5b9e\u9a8c\u4e5f\u5c31\u987a\u5229\u7ed3\u675f\u4e86\u3002","title":"Docker \u5b89\u88c5"},{"location":"docker/Docker%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#_1","text":"\u6211\u4eec\u5e76\u4e0d\u603b\u662f\u5e0c\u671b\u4e00\u76f4\u4fdd\u6301\u4e0e\u5bb9\u5668\u8fdb\u884c\u4ea4\u4e92\uff0c\u5982 Redis\u3001NGINX \u4e4b\u7c7b\u7684\u8fd9\u79cd\u53ef\u63d0\u4f9b\u670d\u52a1\u7684\u5bb9\u5668\uff0c\u5728\u591a\u6570\u60c5\u51b5\u4e0b\u53ea\u662f\u5e0c\u671b\u5b83\u53ef\u4ee5\u8fd0\u884c\u5728\u540e\u53f0\u63d0\u4f9b\u670d\u52a1\u5373\u53ef\u3002 \u7ecf\u8fc7\u524d\u9762\u5185\u5bb9\u7684\u4ecb\u7ecd\uff0c\u4e5f\u8bb8\u4f1a\u6709\u4eba\u5f88\u81ea\u7136\u7684\u8ba4\u4e3a\uff0c\u65e2\u7136\u589e\u52a0 --interactive \u548c --tty \u53c2\u6570\u53ef\u4ee5\u8ba9\u6211\u4eec\u76f4\u63a5\u4e0e\u5bb9\u5668\u8fdb\u884c\u4ea4\u4e92\uff0c\u90a3\u5982\u679c\u53bb\u6389\u8fd9\u4e24\u4e2a\u53c2\u6570\uff0c\u662f\u5426\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5bb9\u5668\u4e0d\u4e0e\u6211\u4eec\u4ea4\u4e92\uff0c\u8fd0\u884c\u5728\u540e\u53f0\u5462\uff1f\u4e0d\u59a8\u6765\u8bd5\u8bd5\u770b\uff1a ( MoeLove ) \u279c ~ docker run python ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7a803976d0a4 python \"python3\" 10 seconds ago Exited ( 0 ) 9 seconds ago flamboyant_yalow \u6267\u884c\u5b8c docker run python \u540e\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\u6216\u53cd\u9988\uff0c\u901a\u8fc7 docker ps \u6765\u67e5\u770b\u5bb9\u5668\u7684\u72b6\u6001\u3002\u5176\u4e2d\uff0c-l \u53c2\u6570\u662f --latest \u7684\u7f29\u5199\uff0c\u8868\u793a\u6700\u65b0\u7684\u5bb9\u5668\uff08\u5305\u542b\u6240\u6709\u72b6\u6001\uff09\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5bb9\u5668\u7684\u72b6\u6001\u662f\u5df2\u7ecf\u9000\u51fa\u4e86\u3002 \u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u56de\u5fc6\u4e0b\u521a\u624d\u5e26\u7740 --interactive \u548c --tty \u7684\u65f6\u5019\uff0c\u542f\u52a8\u5bb9\u5668\u540e\uff0c\u76f4\u63a5\u8fdb\u5165\u4e86 Python \u7684\u53ef\u4ea4\u4e92\u5f0f\u7ec8\u7aef\u5185\u3002\u800c\u73b0\u5728\u6211\u4eec\u6ca1\u6709\u643a\u5e26\u4efb\u4f55\u53c2\u6570\uff0c\u90a3\u81ea\u7136\u5728\u542f\u52a8\u65f6 Python \u7684\u7ec8\u7aef\u77e5\u9053\u5373\u4f7f\u7b49\u5f85\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u7ed3\u679c\uff0c\u56e0\u6b64\u5c31\u9000\u51fa\u4e86\u3002 \u90a3\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\u6539\u53d8\u8fd9\u4e00\u60c5\u51b5\u5462\uff1f \u6709\uff0c\u6211\u4eec\u7ed9\u547d\u4ee4\u7684\u6700\u540e\u589e\u52a0\u4e00\u4e9b\u53c2\u6570\u6765\u89e3\u51b3\u3002 ( MoeLove ) \u279c ~ docker run python sleep 60 \u52a0\u4e86\u4e00\u53e5 sleep 60\uff0c\u73b0\u5728\u6574\u4e2a\u7ec8\u7aef\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\uff0c\u4e5f\u65e0\u6cd5\u8fdb\u884c\u4ea4\u4e92\uff08\u6bd5\u7adf\u6211\u4eec\u6ca1\u6709\u4f20\u9012\u8fc7 --interactive \u7684\u53c2\u6570\uff0c\u56e0\u6b64\u8f93\u5165\u662f\u65e0\u6548\u7684\uff09\u3002\u53e6\u5916\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\uff0c\u6267\u884c\u521a\u624d\u7684 docker ps -l \u547d\u4ee4\u8fdb\u884c\u67e5\u770b\u3002 ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 82686b276ec4 python \"sleep 60\" 6 seconds ago Up 5 seconds cranky_banach \u53ef\u4ee5\u770b\u5230\u8be5\u5bb9\u5668\u662f Up \u7684\u72b6\u6001\uff0c\u4e14\u6b63\u5728\u6267\u884c sleep 60 \u7684\u547d\u4ee4\uff0c\u8fd9\u8bf4\u660e\u6211\u4eec\u5728\u6700\u540e\u4f20\u9012\u7684\u547d\u4ee4\u662f\u53ef\u6267\u884c\u7684\u3002 \u73b0\u5728\u5bb9\u5668\u7684\u884c\u4e3a\u5e76\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\uff0c\u90a3\u5982\u4f55\u5b9e\u73b0\u9884\u671f\u5462\uff1f \u7b54\u6848\u662f\u53ef\u4ee5\u7ed9 docker run \u547d\u4ee4\u4f20\u9012 -d \u6216\u8005\u5b8c\u6574\u7684 --detach \u53c2\u6570\uff0c\u8fd9\u8868\u793a\u5c06\u5bb9\u5668\u8fd0\u884c\u4e8e\u540e\u53f0\u3002\u6765\u8bd5\u8bd5\u770b\u3002 ( MoeLove ) \u279c ~ docker run -d python sleep 60 9f2b81e85893b1f8402247867344c9ab6bde92f377ec9949bd491e857b570048 \u8be5\u547d\u4ee4\u6267\u884c\u540e\uff0c\u8f93\u51fa\u4e86\u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u7ec8\u7aef\u5e76\u6ca1\u6709\u88ab\u5360\u7528\uff0c\u6765\u6267\u884c docker ps -l \u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 9f2b81e85893 python \"sleep 60\" 5 seconds ago Up 4 seconds pensive_fermat \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u4e5f\u6b63\u5728\u8fd0\u884c\uff0c\u7b26\u5408\u6211\u4eec\u9884\u671f\u7684 \u201c\u540e\u53f0\u8fd0\u884c\u5bb9\u5668\u201d \u3002","title":"\u540e\u53f0\u8fd0\u884c\u5bb9\u5668"},{"location":"docker/Docker%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#_2","text":"\u4f7f\u7528 docker run \u955c\u50cf\u540d \u547d\u4ee4\u53ef\u4ee5\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728\u6267\u884c\u8be5\u547d\u4ee4\u65f6\u7ec4\u5408\u4f7f\u7528 --interactive \u548c --tty \u53ef\u76f4\u63a5\u4e0e\u5bb9\u5668\u5185\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002 \u5bb9\u5668\u542f\u52a8\u65f6\uff0c\u5728\u955c\u50cf\u540d\u4e4b\u540e\u5199\u547d\u4ee4\uff0c\u53ef\u4f20\u9012\u81f3\u6211\u4eec\u5b9e\u9a8c\u7684\u5bb9\u5668\u5185\uff08\u5177\u4f53\u539f\u56e0\u4f1a\u653e\u5728\u4e0b\u4e00\u4e2a\u90e8\u5206\u7684\u7ae0\u8282\u8bb2\uff09\u3002 \u540c\u6837\u5730\uff0c\u5f53\u6211\u4eec\u542f\u52a8\u5bb9\u5668\u65f6\uff0c\u4f20\u9012\u4e86 --detach \u53c2\u6570\uff0c\u5e76\u4e14\u5bb9\u5668\u5185\u6267\u884c\u7684\u7a0b\u5e8f\u65e0\u9700\u7b49\u5f85\u4ea4\u4e92\uff0c\u5219\u5bb9\u5668\u53ef\u4ee5\u542f\u52a8\u5728\u540e\u53f0\u3002","title":"\u5c0f\u7ed3"},{"location":"docker/Docker%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#_3","text":"\u521a\u624d\u6211\u4eec\u7684\u5bb9\u5668\u5df2\u7ecf\u542f\u52a8\u5728\u4e86\u540e\u53f0\uff0c\u5982\u679c\u6b64\u65f6\u60f3\u8981\u5728\u5bb9\u5668\u5185\u6267\u884c\u4e00\u6761\u547d\u4ee4\uff0c\u6216\u8005\u60f3\u8981\u8fd0\u884c Python \u7684\u89e3\u91ca\u5668\u8be5\u5982\u4f55\u64cd\u4f5c\u5462\uff1f \u7b54\u6848\u662f\u7528 docker exec\uff1a ( MoeLove ) \u279c ~ docker run -d python sleep 60 10aad6e0af4fad2405c420a90fbf56f9689f033608e6f22d987c2f18d644eda9 ( MoeLove ) \u279c ~ docker exec -it 10aad6e0af4fad2405c420a90fbf56f9689f033608e6f22d987c2f18d644eda9 python Python 3 .7.4 ( default, Aug 14 2019 , 12 :09:51 ) [ GCC 8 .3.0 ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> import sys >>> sys.version '3.7.4 (default, Aug 14 2019, 12:09:51) \\n[GCC 8.3.0]' \u5982\u4e0a\u6240\u8ff0\uff0c -it \u4ecd\u7136\u662f --interactive \u548c --tty \u7684\u7f29\u5199\uff0c\u6700\u540e\u7684 python \u662f\u6211\u4eec\u9884\u671f\u8981\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5f53\u7136\u6362\u6210 bash \u6216\u8005\u5176\u4ed6\u547d\u4ee4\u4e5f\u53ef\u4ee5\u3002 ( MoeLove ) \u279c ~ docker exec -it 10aad6e0af4fad2405c420a90fbf56f9689f033608e6f22d987c2f18d644eda9 bash root@f396422ae58d:/# ls bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var","title":"\u8fdb\u5165\u5bb9\u5668"},{"location":"docker/Docker%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#_4","text":"\u901a\u8fc7\u672c\u8282\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4f7f\u7528 docker run \u955c\u50cf \u6765\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u53ef\u4ee5\u7ed9\u6b64\u547d\u4ee4\u4f20\u9012 --interactive \u548c --tty \uff08\u7b80\u5199\u7ec4\u5408\u4e3a -it\uff09\u53c2\u6570\uff0c\u4ee5\u8fbe\u5230\u76f4\u63a5\u4e0e\u5bb9\u5668\u5185\u5e94\u7528\u7a0b\u5e8f\u76f4\u63a5\u4ea4\u4e92\u7684\u76ee\u7684\u3002 \u53e6\u5916\u4e5f\u53ef\u4ee5\u5728 docker run \u955c\u50cf \u4e4b\u540e\u4f20\u9012\u547d\u4ee4\u548c\u53c2\u6570\uff0c\u4ee5\u6539\u53d8\u4f7f\u7528\u955c\u50cf\u542f\u52a8\u5bb9\u5668\u540e\u7684\u9ed8\u8ba4\u884c\u4e3a\uff08\u7531\u4e8e\u672c\u7bc7\u662f Docker \u5165\u95e8\u7684\u5185\u5bb9\uff0c\u4e3a\u4e86\u8ba9\u8bfb\u8005\u66f4\u6613\u7406\u89e3\uff0c\u6b64\u5904\u7684\u8868\u8ff0\u4e0d\u662f\u5f88\u4e25\u8c28\uff0c\u5728\u4e0b\u4e00\u90e8\u5206\u7684\u7ae0\u8282\u4e2d\u4f1a\u8fdb\u884c\u8865\u5145\uff09\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012 sleep 60 \u8ba9\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 Python \u5bb9\u5668\u542f\u52a8\u540e\u4f11\u7720 60s\uff1b\u914d\u5408\u7740\u7ed9 docker run \u4f20\u9012\u7684 --detach \u53c2\u6570\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5c06\u5bb9\u5668\u542f\u52a8\u5728\u540e\u53f0\u7684\u76ee\u7684\u3002 \u9664\u4e86\u4ee5\u4e0a\u5185\u5bb9\uff0c\u8fd8\u4ecb\u7ecd\u4e86\u4f7f\u7528 docker ps \u53ef\u5217\u51fa\u5bb9\u5668\u8bb0\u5f55\uff0c\u901a\u8fc7\u7ed9\u5b83\u4f20\u9012 -l \u53c2\u6570\u53ef\u5f97\u5230\u6700\u8fd1\u7684\u4e00\u6761\u8bb0\u5f55\u3002 \u5982\u679c\u662f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7 docker exec -it \u5bb9\u5668 ID/\u540d\u79f0 \u547d\u4ee4 \u7684\u65b9\u5f0f\u8fdb\u5165\u8be5\u5bb9\u5668\u5185\u3002 \u4ee5\u4e0a\u4fbf\u662f\u672c\u8282\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u5c31\u662f\u201cDocker \u5165\u95e8\u201d\u5417\uff1f\u4e8b\u5b9e\u4e0a\uff0c\u662f\u7684\u3002 Docker \u4e00\u76f4\u4ee5\u6613\u7528\u6027\u8457\u79f0\uff0c\u4e14 Docker \u4e5f\u4e00\u76f4\u5f88\u6ce8\u610f\u7528\u6237\u4f53\u9a8c\uff0c\u4ece Docker \u7684\u9996\u6b21\u9762\u4e16\u5230\u73b0\u5728\uff0c\u4e00\u76f4\u90fd\u662f\u7528 docker run \u955c\u50cf \u8fd9\u6837\u7b80\u5355\u7684\u4e00\u53e5\u547d\u4ee4\u5373\u53ef\u542f\u52a8\u5bb9\u5668\u3002 Docker \u7684\u5176\u4ed6\u77e5\u8bc6\uff0c\u540e\u7eed\u7ae0\u8282\u4e2d\u4f1a\u901a\u8fc7\u5b9e\u8df5\u52a0\u6df1\u5165\u539f\u7406\u7684\u65b9\u5f0f\uff0c\u9010\u5c42\u9012\u8fdb\uff0c\u5e26\u4f60\u638c\u63e1 Docker \u7684\u6838\u5fc3\u77e5\u8bc6\uff01","title":"\u603b\u7ed3"},{"location":"docker/%E5%AE%B9%E5%99%A8%E6%97%B6%E4%BB%A3%E7%9A%84%E5%BC%95%E9%A2%86%E8%80%85/","text":"Docker \u7684\u53d1\u5c55\u5386\u53f2 \u00b6 2013 \u5e74 Docker \u7b2c\u4e00\u6b21\u5728 PyCon \u4e0a\u4eae\u76f8\uff0c\u968f\u540e\u5728 Hacker News \u4e0a\u5f15\u8d77\u4e86\u5f3a\u70c8\u7684\u53cd\u54cd\uff0c\u4e4b\u540e\u5728 GitHub \u4e0a\u5f00\u6e90\uff0c\u4ece\u6b64\u5b83\u6b63\u5f0f\u5f00\u542f\u4e86 Docker \u7684\u65f6\u4ee3\u3002 \u5230\u73b0\u5728\u65e0\u8bba\u6211\u4eec\u5728\u8c08 Container\u3001Docker\u3001Kubernetes \u6216\u8005\u8fd9\u6574\u4e2a\u751f\u6001\u4e2d\u7684\u5176\u4ed6\u4ea7\u54c1\u6216\u6280\u672f\uff0c\u4e0d\u53ef\u907f\u514d\u7684\u90fd\u9700\u8981\u6216\u591a\u6216\u5c11\u7684 Docker \u76f8\u5173\u77e5\u8bc6\u3002 \u5728\u8fd1\u4e9b\u5e74\uff0c\u4e5f\u51fa\u6765\u8fc7\u4e0d\u5c11\u7684\u7c7b Docker \u4ea7\u54c1\uff0c\u6bd4\u5982\u8bf4 rkt\uff0c\u66fe\u7ecf\u4e5f\u6709\u4eba\u8bf4\u7c7b\u4f3c rkt \u8fd9\u6837\u7684\u4ea7\u54c1\u51fa\u6765\uff0c\u5c06\u53d6\u4ee3 Docker \u7684\u5730\u4f4d\u3002\u4f46\u51e0\u5e74\u8fc7\u53bb\u4e86 Docker \u4ecd\u7136\u662f\u5bb9\u5668\u6280\u672f\u7684\u9996\u9009\uff0c\u800c rkt \u5219\u5df2\u7ecf\u56e0\u4e3a\u9879\u76ee\u5931\u53bb\u6d3b\u529b\u88ab CNCF \u5f52\u6863\uff08\u5f53\u7136\u4e0d\u53ef\u5426\u8ba4 rkt \u4e5f\u66fe\u4e3a\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\u505a\u51fa\u4e86\u4e0d\u5c11\u8d21\u732e\uff09\u3002 Docker \u7684\u4f18\u52bf \u00b6 Docker \u4e00\u5f00\u59cb\u80fd\u5438\u5f15\u4f17\u591a\u7528\u6237\uff0c\u5176\u4e2d\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u56e0\u7d20\u5c31\u5728\u4e8e\u5b83\u4e0a\u624b\u4f7f\u7528\u5f88\u7b80\u5355\u3002\u5728\u5b89\u88c5\u5b8c Docker \u4e4b\u540e\uff0c\u4e00\u884c\u547d\u4ee4\u8bed\u53e5 docker run hello-world \u4fbf\u5df2\u7ecf\u8fd0\u884c\u4e86\u4e00\u4e2a\u5bb9\u5668\uff0c\u4e00\u5207\u770b\u7740\u90fd\u6781\u5176\u7b80\u5355\u3002 \u7136\u800c\u5728\u5b9e\u9645\u7684\u751f\u4ea7\u4f7f\u7528\u4e2d\uff0c\u6211\u4eec\u6240\u8fd0\u884c\u7684\u5bb9\u5668\u5305\u542b\u7740\u4e1a\u52a1\u4ee3\u7801\uff0c\u751f\u4ea7\u73af\u5883\u7684\u7f51\u7edc\u3001\u7cfb\u7edf\u7b49\u56e0\u7d20\u4e5f\u90fd\u5f88\u590d\u6742\u3002\u4e00\u65e6\u51fa\u73b0\u95ee\u9898\uff0c\u5982\u4f55\u624d\u80fd\u6700\u9ad8\u6548\u5730\u5b9a\u4f4d\u5e76\u89e3\u51b3\u95ee\u9898\uff0c\u5e76\u4e14\u4fdd\u8bc1\u4e4b\u540e\u4e0d\u518d\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u53d1\u751f\uff1f \u8981\u505a\u5230\u8fd9\u4e9b\uff0c\u5c31\u9700\u8981\u5bf9 Docker \u6280\u672f\u6709\u8db3\u591f\u7684\u4e86\u89e3\u3002\u5728\u5927\u578b\u516c\u53f8\u4e2d\uff0c\u90fd\u6709\u4e13\u804c\u8d1f\u8d23\u57fa\u7840\u652f\u6491\u6280\u672f\u7684\u5f00\u53d1\u6216\u8fd0\u7ef4\u4eba\u5458\uff0c\u800c\u5728\u4e2d\u5c0f\u578b\u4f01\u4e1a\u53ef\u80fd\u5c31\u5f88\u5c11\u6709\u8fd9\u7c7b\u56e2\u961f\u6216\u8005\u538b\u6839\u6ca1\u6709\uff0c\u9700\u8981\u5f00\u53d1\u4eba\u5458\u81ea\u884c\u89e3\u51b3\u3002\u5982\u679c\u5bf9 Docker \u6280\u672f\u4e0d\u751a\u4e86\u89e3\uff0c\u89e3\u51b3\u95ee\u9898\u9700\u8981\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u800c\u4e14\u53ef\u80fd\u5e76\u4e0d\u80fd\u5f7b\u5e95\u89e3\u51b3\u95ee\u9898\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4e0d\u4e00\u5b9a\u53ea\u662f\u5728\u5bb9\u5668\u8fd0\u884c\u8fc7\u7a0b\u65f6\u624d\u4f1a\u9047\u5230\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u6784\u5efa\u955c\u50cf\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u9047\u5230\u4e86\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\uff1a \u6784\u5efa\u7684\u955c\u50cf\u4f53\u79ef\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5927 Pull \u955c\u50cf\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u6162 \u65b0\u6784\u5efa\u7684\u955c\u50cf\u4e3a\u4ec0\u4e48\u4e0d\u751f\u6548 \u6784\u5efa\u955c\u50cf\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u4e45 \u6211\u4eec\u5f80\u5f80\u5728\u9047\u5230\u95ee\u9898\u65f6\u624d\u4f1a\u60f3\u7740\u600e\u4e48\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u5982\u679c\u4e0d\u6210\u4f53\u7cfb\u7684\u5b66\u4e60\uff0c\u7ec8\u7a76\u5f88\u96be\u505a\u5230\u6e38\u5203\u6709\u4f59\u3002\u800c\u4e14\u6210\u4f53\u7cfb\u7684\u5b66\u4e60\uff0c\u6709\u52a9\u4e8e\u5de9\u56fa\u77e5\u8bc6\uff0c\u5c06\u5176\u5438\u6536\u5e76\u8f6c\u5316\u4e3a\u81ea\u5df1\u5185\u5728\u7684\u80fd\u529b\u3002 \u73b0\u5728\u5f88\u591a\u5c97\u4f4d\u7684\u62db\u8058\u9700\u6c42\u4e0a\u90fd\u6709\u5199\u9700\u8981\u4e86\u89e3\u6216\u8005\u638c\u63e1 Docker\uff0c\u6216\u8005\u5c06\u638c\u63e1 Docker \u7b49\u5bb9\u5668\u6280\u672f\u4f5c\u4e3a\u52a0\u5206\u9879\u76ee\uff0c\u5e76\u4e14\u8fd9\u4e2a\u8981\u6c42\u4e0d\u5c40\u9650\u4e8e\u8fd0\u7ef4\u6216\u8005\u540e\u7aef\u5f00\u53d1\u7b49\u5c97\u4f4d\u3002 \u5b66\u4e60\u8ba1\u5212 \u00b6 Docker \u5165\u95e8 \uff1a \u7b2c\u4e00\u7bc7\uff0c\u5e26\u4f60\u4e86\u89e3 Docker \u5bb9\u5668\u6280\u672f\u751f\u6001\u7684\u53d1\u5c55\u8109\u7edc\uff1b \u7b2c\u4e8c\u7bc7\uff0c\u662f\u4e3a\u521a\u5165\u95e8 Docker \u7684\u8bfb\u8005\u51c6\u5907\u7684\uff0c\u4e5f\u662f\u4e3a\u540e\u7eed\u7ae0\u8282\u8fdb\u884c\u94fa\u57ab\uff1b \u7b2c\u4e09\u7bc7\u662f\u5f88\u591a\u8bfb\u8005\u6216\u516c\u53f8\u90fd\u5e38\u4f1a\u56f0\u60d1\u7684\u95ee\u9898\uff0cDocker \u4e0e Linux \u5185\u6838\u517c\u5bb9\u6027\u5982\u4f55\uff0c\u8981\u4e0a\u751f\u4ea7\u73af\u5883\u8be5\u9009\u62e9\u54ea\u4e2a\u7248\u672c\uff1f\u6211\u4f1a\u5728\u8fd9\u4e00\u7bc7\u4e2d\u4e0e\u4f60\u5206\u4eab\uff0c\u8ba9\u4f60\u4e0d\u518d\u56f0\u60d1\u3002 Docker \u6838\u5fc3\u7279\u6027 \uff1a\u8fd9\u4e2a\u5927\u6a21\u5757\u56f4\u7ed5 Docker \u7684\u6838\u5fc3\u77e5\u8bc6\u70b9\uff0c\u62c6\u5206\u6210\u4e86 7 \u5927\u90e8\u5206\uff0c\u5206\u522b\u662f\u5bb9\u5668\u3001\u955c\u50cf\u3001CI/CD\u3001\u67b6\u6784\u3001\u5b58\u50a8\u3001\u5b89\u5168\u548c\u7f51\u7edc\u3002 \u8fd9\u4e9b\u662f\u5b66\u4e60\u6838\u5fc3\u5185\u5bb9\uff0c\u5728\u8fd9\u90e8\u5206\u5185\u5bb9\u4e2d\uff0c\u6211\u5c06\u57fa\u672c\u6309\u7167\u4ece\u5b9e\u8df5\u5230\u539f\u7406\u7684\u65b9\u5f0f\u8fdb\u884c\u7ec4\u7ec7\uff0c\u8ba9\u4f60\u4ece\u6839\u513f\u4e0a\u77e5\u9053\u5982\u4f55\u7528\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u7528\u3002 \u5728\u5bb9\u5668\u7bc7\uff0c\u6211\u4f1a\u5148\u7ed9\u4f60\u4ecb\u7ecd\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u90a3\u4f60\u5bf9\u5bb9\u5668\u7684\u4f7f\u7528\u6709\u4e2a\u57fa\u672c\u8ba4\u8bc6\uff1b\u4e4b\u540e\u4f1a\u5bf9\u5bb9\u5668\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406\uff1b\u5e76\u5bf9\u5bb9\u5668\u7684\u6838\u5fc3\u8fdb\u884c\u6df1\u5165\u5256\u6790\uff1b\u6700\u540e\u52a8\u624b\u6765\u81ea\u5df1\u5199\u5bb9\u5668\u3002 \u5728\u955c\u50cf\u7bc7\uff0c\u5c06\u4ecb\u7ecd\u955c\u50cf\u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff1b\u955c\u50cf\u662f\u5982\u4f55\u6784\u5efa\u4e0e\u5206\u53d1\u7684\uff1b\u5982\u4f55\u4f7f\u7528 Dockerfile \u8fdb\u884c\u955c\u50cf\u6784\u5efa\uff1b\u5e76\u4ecb\u7ecd Docker \u7684\u4e0b\u4e00\u4ee3\u6784\u5efa\u7cfb\u7edf\u662f\u5982\u4f55\u63d0\u901f\u8fd1 10 \u500d\u7684\uff1b\u63a5\u4e0b\u6765\u7ed3\u5408\u6211\u7684\u5b9e\u9645\u955c\u50cf\u4e3a\u4f60\u4ecb\u7ecd Dockerfile \u7684\u4f18\u5316\u548c\u6700\u4f73\u5b9e\u8df5\uff1b\u6700\u540e\u5206\u522b\u6df1\u5165\u6e90\u7801\u4e3a\u4f60\u4ecb\u7ecd\u955c\u50cf\u6784\u5efa\u3001\u5206\u53d1\u7684\u539f\u7406\uff0c\u4ee5\u53ca\u8ba4\u8bc1\u6d41\u7a0b\u548c\u539f\u7406\u3002 \u5728 CI/CD \u7bc7\uff0c\u4f1a\u4ecb\u7ecd\u5982\u4f55\u5c06 Docker \u4e0e CI/CD \u7ed3\u5408\uff0c\u540c\u65f6\u4ecb\u7ecd\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u7684 CI/CD pipeline\uff0c\u5e0c\u671b\u80fd\u4e3a\u8bfb\u8005\u5efa\u8bbe CI/CD \u63d0\u4f9b\u4e00\u4e9b\u542f\u53d1\u3002 \u67b6\u6784\u7bc7\u4e2d\u6211\u4f1a\u7ed3\u5408\u6e90\u7801\u4ecb\u7ecd Docker \u7684\u6838\u5fc3\u67b6\u6784\uff0c\u4ee5\u53ca\u5176\u662f\u5982\u4f55\u534f\u4f5c\u7684\uff1bDocker \u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u6269\u5c55\u7684 Plugin \u673a\u5236\uff0c\u5728\u7279\u5b9a\u573a\u666f\u4e0b\u4f7f\u7528 Plugin \u6269\u5c55 Docker \u4e5f\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u9009\u62e9\uff1b\u63a5\u4e0b\u6765\u4f1a\u7ed3\u5408\u5b9e\u9645\u7ecf\u9a8c\u4ecb\u7ecd\u5bb9\u5668\u76d1\u63a7\u548c\u65e5\u5fd7\u65b9\u9762\u7684\u5177\u4f53\u5b9e\u8df5\u65b9\u6848\uff0c\u5e0c\u671b\u80fd\u4e3a\u8bfb\u8005\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u63d0\u4f9b\u4e00\u4e2a\u53c2\u8003\uff1b\u6700\u540e\u4f1a\u4e0e\u8bfb\u8005\u5206\u4eab\u6211\u6240\u603b\u7ed3\u7684 Docker \u76f8\u5173\u95ee\u9898\u7684\u5b9a\u4f4d\u53ca\u8c03\u8bd5\u624b\u6bb5 \u6b63\u786e\u7684\u65b9\u6cd5\u80fd\u8ba9\u4f60\u6392\u67e5\u95ee\u9898\u7684\u6548\u7387\u7ffb\u500d\u3002 \u5b58\u50a8\u7bc7\u4e3b\u8981\u4ecb\u7ecd Docker \u4e2d volume \u7684\u4f7f\u7528\uff1b\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u6570\u636e\u5907\u4efd\u548c\u6062\u590d\uff1b\u6700\u540e\u4f1a\u6df1\u5165\u5185\u90e8\u4ecb\u7ecd\u73b0\u5728 Docker \u6700\u63a8\u8350\u7684 Overlay2 \u5b58\u50a8\u9a71\u52a8\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u5b89\u5168\u7bc7\u4f1a\u6d89\u53ca\u955c\u50cf\u548c\u5bb9\u5668\u8fd0\u884c\u65f6\u7684\u5b89\u5168\uff1b\u4ee5\u53ca\u4f1a\u6d89\u53ca\u4e00\u4e9b\u7684 Linux \u5185\u6838\u5b89\u5168\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5229\u7528 Linux \u5185\u6838\u7684\u5b89\u5168\u6a21\u5757\u4e3a Docker \u4fdd\u9a7e\u62a4\u822a\u3002 \u7f51\u7edc\u7bc7\u9664\u4e86\u4ecb\u7ecd\u57fa\u7840\u7f51\u7edc\u77e5\u8bc6\u5916\uff0c\u8fd8\u4f1a\u4ecb\u7ecd\u5982\u4f55\u5b9a\u5236 bridge \u7f51\u7edc\uff1biptables \u59cb\u7ec8\u662f\u4e00\u4e2a\u5f88\u6838\u5fc3\u7684\u77e5\u8bc6\u70b9\uff0c\u6211\u4f1a\u4e3a\u8bfb\u8005\u5c06 Docker \u4e0e iptables \u68b3\u7406\u6e05\u695a\uff0c\u4ee5\u53ca\u5982\u4f55\u81ea\u5b9a\u4e49\u7684\u8fdb\u884c\u7f51\u7edc\u7ba1\u7406\uff1b\u6700\u540e\u8be6\u7ec6\u4ecb\u7ecd\u4e86 docker-proxy\uff0cDocker \u5185\u90e8 DNS \u4ee5\u53ca Docker \u7684\u6838\u5fc3\u7f51\u7edc\u77e5\u8bc6\uff0c\u8ba9\u7f51\u7edc\u4e0d\u518d\u6210\u4e3a\u4e00\u4e2a\u62e6\u8def\u864e\u3002 \u751f\u6001\u6269\u5c55 \uff1a\u4e0d\u5f97\u4e0d\u8bf4\u201c\u5f00\u6e90\u201d\u662f Docker \u6210\u957f\u8fc5\u901f\u7684\u5173\u952e\uff0c\u5728\u8fd9\u4e2a\u6a21\u5757\u4e2d\uff0c\u6211\u5c06\u8be6\u7ec6\u4ecb\u7ecd Docker \u4e0e Kubernetes \u95f4\u7684\u8054\u7cfb\uff0c\u4ee5\u53ca\u5bb9\u5668\u751f\u6001\u4e2d\u7684\u5176\u4ed6\u7ec4\u4ef6\uff1b \u4e0e\u8bfb\u8005\u5206\u4eab\u5982\u4f55\u53c2\u4e0e\u5230 Docker \u5bb9\u5668\u751f\u6001\u5185\uff0c\u5f53\u7136\u8fd9\u91cc\u4e5f\u4f1a\u6d89\u53ca\u5230 Docker \u73b0\u5728\u7684\u4ee3\u7801\u7ec4\u7ec7\u76f8\u5173\u7684\u5185\u5bb9\uff1b\u6700\u540e\u5c06\u4e0e\u8bfb\u8005\u63a2\u8ba8 Docker \u751f\u6001\u672a\u6765\u7684\u8d70\u5411\u3002 Docker \u7b49\u5bb9\u5668\u6280\u672f\u6b63\u5904\u4e8e\u6280\u672f\u7684\u70ed\u6f6e\u4e2d\uff0c\u5c06\u5176\u5185\u5316\u4e3a\u81ea\u5df1\u7684\u6280\u672f\u5b9e\u529b\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u63d0\u5347\u81ea\u5df1\u65e5\u5e38\u7684\u5f00\u53d1\u90e8\u7f72\u6548\u7387\uff0c\u66f4\u53ef\u4ee5\u4f5c\u4e3a\u9762\u8bd5\u7684\u4e00\u4e2a\u52a0\u5206\u9879\u3002\u540c\u65f6\uff0c\u6df1\u5165\u539f\u7406\u540e\uff0c\u76f8\u4fe1\u4f60\u4e5f\u4f1a\u4ece\u4e2d\u5b66\u4e60\u5230\u5f88\u591a\u4e0d\u53ea\u5c40\u9650\u4e8e Docker \u81ea\u8eab\u7684\u77e5\u8bc6\u3002","title":"\u5bb9\u5668\u65f6\u4ee3\u7684\u5f15\u9886\u8005"},{"location":"docker/%E5%AE%B9%E5%99%A8%E6%97%B6%E4%BB%A3%E7%9A%84%E5%BC%95%E9%A2%86%E8%80%85/#docker","text":"2013 \u5e74 Docker \u7b2c\u4e00\u6b21\u5728 PyCon \u4e0a\u4eae\u76f8\uff0c\u968f\u540e\u5728 Hacker News \u4e0a\u5f15\u8d77\u4e86\u5f3a\u70c8\u7684\u53cd\u54cd\uff0c\u4e4b\u540e\u5728 GitHub \u4e0a\u5f00\u6e90\uff0c\u4ece\u6b64\u5b83\u6b63\u5f0f\u5f00\u542f\u4e86 Docker \u7684\u65f6\u4ee3\u3002 \u5230\u73b0\u5728\u65e0\u8bba\u6211\u4eec\u5728\u8c08 Container\u3001Docker\u3001Kubernetes \u6216\u8005\u8fd9\u6574\u4e2a\u751f\u6001\u4e2d\u7684\u5176\u4ed6\u4ea7\u54c1\u6216\u6280\u672f\uff0c\u4e0d\u53ef\u907f\u514d\u7684\u90fd\u9700\u8981\u6216\u591a\u6216\u5c11\u7684 Docker \u76f8\u5173\u77e5\u8bc6\u3002 \u5728\u8fd1\u4e9b\u5e74\uff0c\u4e5f\u51fa\u6765\u8fc7\u4e0d\u5c11\u7684\u7c7b Docker \u4ea7\u54c1\uff0c\u6bd4\u5982\u8bf4 rkt\uff0c\u66fe\u7ecf\u4e5f\u6709\u4eba\u8bf4\u7c7b\u4f3c rkt \u8fd9\u6837\u7684\u4ea7\u54c1\u51fa\u6765\uff0c\u5c06\u53d6\u4ee3 Docker \u7684\u5730\u4f4d\u3002\u4f46\u51e0\u5e74\u8fc7\u53bb\u4e86 Docker \u4ecd\u7136\u662f\u5bb9\u5668\u6280\u672f\u7684\u9996\u9009\uff0c\u800c rkt \u5219\u5df2\u7ecf\u56e0\u4e3a\u9879\u76ee\u5931\u53bb\u6d3b\u529b\u88ab CNCF \u5f52\u6863\uff08\u5f53\u7136\u4e0d\u53ef\u5426\u8ba4 rkt \u4e5f\u66fe\u4e3a\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\u505a\u51fa\u4e86\u4e0d\u5c11\u8d21\u732e\uff09\u3002","title":"Docker \u7684\u53d1\u5c55\u5386\u53f2"},{"location":"docker/%E5%AE%B9%E5%99%A8%E6%97%B6%E4%BB%A3%E7%9A%84%E5%BC%95%E9%A2%86%E8%80%85/#docker_1","text":"Docker \u4e00\u5f00\u59cb\u80fd\u5438\u5f15\u4f17\u591a\u7528\u6237\uff0c\u5176\u4e2d\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u56e0\u7d20\u5c31\u5728\u4e8e\u5b83\u4e0a\u624b\u4f7f\u7528\u5f88\u7b80\u5355\u3002\u5728\u5b89\u88c5\u5b8c Docker \u4e4b\u540e\uff0c\u4e00\u884c\u547d\u4ee4\u8bed\u53e5 docker run hello-world \u4fbf\u5df2\u7ecf\u8fd0\u884c\u4e86\u4e00\u4e2a\u5bb9\u5668\uff0c\u4e00\u5207\u770b\u7740\u90fd\u6781\u5176\u7b80\u5355\u3002 \u7136\u800c\u5728\u5b9e\u9645\u7684\u751f\u4ea7\u4f7f\u7528\u4e2d\uff0c\u6211\u4eec\u6240\u8fd0\u884c\u7684\u5bb9\u5668\u5305\u542b\u7740\u4e1a\u52a1\u4ee3\u7801\uff0c\u751f\u4ea7\u73af\u5883\u7684\u7f51\u7edc\u3001\u7cfb\u7edf\u7b49\u56e0\u7d20\u4e5f\u90fd\u5f88\u590d\u6742\u3002\u4e00\u65e6\u51fa\u73b0\u95ee\u9898\uff0c\u5982\u4f55\u624d\u80fd\u6700\u9ad8\u6548\u5730\u5b9a\u4f4d\u5e76\u89e3\u51b3\u95ee\u9898\uff0c\u5e76\u4e14\u4fdd\u8bc1\u4e4b\u540e\u4e0d\u518d\u6709\u7c7b\u4f3c\u7684\u95ee\u9898\u53d1\u751f\uff1f \u8981\u505a\u5230\u8fd9\u4e9b\uff0c\u5c31\u9700\u8981\u5bf9 Docker \u6280\u672f\u6709\u8db3\u591f\u7684\u4e86\u89e3\u3002\u5728\u5927\u578b\u516c\u53f8\u4e2d\uff0c\u90fd\u6709\u4e13\u804c\u8d1f\u8d23\u57fa\u7840\u652f\u6491\u6280\u672f\u7684\u5f00\u53d1\u6216\u8fd0\u7ef4\u4eba\u5458\uff0c\u800c\u5728\u4e2d\u5c0f\u578b\u4f01\u4e1a\u53ef\u80fd\u5c31\u5f88\u5c11\u6709\u8fd9\u7c7b\u56e2\u961f\u6216\u8005\u538b\u6839\u6ca1\u6709\uff0c\u9700\u8981\u5f00\u53d1\u4eba\u5458\u81ea\u884c\u89e3\u51b3\u3002\u5982\u679c\u5bf9 Docker \u6280\u672f\u4e0d\u751a\u4e86\u89e3\uff0c\u89e3\u51b3\u95ee\u9898\u9700\u8981\u82b1\u8d39\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u800c\u4e14\u53ef\u80fd\u5e76\u4e0d\u80fd\u5f7b\u5e95\u89e3\u51b3\u95ee\u9898\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4e0d\u4e00\u5b9a\u53ea\u662f\u5728\u5bb9\u5668\u8fd0\u884c\u8fc7\u7a0b\u65f6\u624d\u4f1a\u9047\u5230\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u6784\u5efa\u955c\u50cf\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u9047\u5230\u4e86\u5404\u79cd\u5404\u6837\u7684\u95ee\u9898\uff1a \u6784\u5efa\u7684\u955c\u50cf\u4f53\u79ef\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5927 Pull \u955c\u50cf\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u6162 \u65b0\u6784\u5efa\u7684\u955c\u50cf\u4e3a\u4ec0\u4e48\u4e0d\u751f\u6548 \u6784\u5efa\u955c\u50cf\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u4e45 \u6211\u4eec\u5f80\u5f80\u5728\u9047\u5230\u95ee\u9898\u65f6\u624d\u4f1a\u60f3\u7740\u600e\u4e48\u89e3\u51b3\u95ee\u9898\uff0c\u4f46\u5982\u679c\u4e0d\u6210\u4f53\u7cfb\u7684\u5b66\u4e60\uff0c\u7ec8\u7a76\u5f88\u96be\u505a\u5230\u6e38\u5203\u6709\u4f59\u3002\u800c\u4e14\u6210\u4f53\u7cfb\u7684\u5b66\u4e60\uff0c\u6709\u52a9\u4e8e\u5de9\u56fa\u77e5\u8bc6\uff0c\u5c06\u5176\u5438\u6536\u5e76\u8f6c\u5316\u4e3a\u81ea\u5df1\u5185\u5728\u7684\u80fd\u529b\u3002 \u73b0\u5728\u5f88\u591a\u5c97\u4f4d\u7684\u62db\u8058\u9700\u6c42\u4e0a\u90fd\u6709\u5199\u9700\u8981\u4e86\u89e3\u6216\u8005\u638c\u63e1 Docker\uff0c\u6216\u8005\u5c06\u638c\u63e1 Docker \u7b49\u5bb9\u5668\u6280\u672f\u4f5c\u4e3a\u52a0\u5206\u9879\u76ee\uff0c\u5e76\u4e14\u8fd9\u4e2a\u8981\u6c42\u4e0d\u5c40\u9650\u4e8e\u8fd0\u7ef4\u6216\u8005\u540e\u7aef\u5f00\u53d1\u7b49\u5c97\u4f4d\u3002","title":"Docker \u7684\u4f18\u52bf"},{"location":"docker/%E5%AE%B9%E5%99%A8%E6%97%B6%E4%BB%A3%E7%9A%84%E5%BC%95%E9%A2%86%E8%80%85/#_1","text":"Docker \u5165\u95e8 \uff1a \u7b2c\u4e00\u7bc7\uff0c\u5e26\u4f60\u4e86\u89e3 Docker \u5bb9\u5668\u6280\u672f\u751f\u6001\u7684\u53d1\u5c55\u8109\u7edc\uff1b \u7b2c\u4e8c\u7bc7\uff0c\u662f\u4e3a\u521a\u5165\u95e8 Docker \u7684\u8bfb\u8005\u51c6\u5907\u7684\uff0c\u4e5f\u662f\u4e3a\u540e\u7eed\u7ae0\u8282\u8fdb\u884c\u94fa\u57ab\uff1b \u7b2c\u4e09\u7bc7\u662f\u5f88\u591a\u8bfb\u8005\u6216\u516c\u53f8\u90fd\u5e38\u4f1a\u56f0\u60d1\u7684\u95ee\u9898\uff0cDocker \u4e0e Linux \u5185\u6838\u517c\u5bb9\u6027\u5982\u4f55\uff0c\u8981\u4e0a\u751f\u4ea7\u73af\u5883\u8be5\u9009\u62e9\u54ea\u4e2a\u7248\u672c\uff1f\u6211\u4f1a\u5728\u8fd9\u4e00\u7bc7\u4e2d\u4e0e\u4f60\u5206\u4eab\uff0c\u8ba9\u4f60\u4e0d\u518d\u56f0\u60d1\u3002 Docker \u6838\u5fc3\u7279\u6027 \uff1a\u8fd9\u4e2a\u5927\u6a21\u5757\u56f4\u7ed5 Docker \u7684\u6838\u5fc3\u77e5\u8bc6\u70b9\uff0c\u62c6\u5206\u6210\u4e86 7 \u5927\u90e8\u5206\uff0c\u5206\u522b\u662f\u5bb9\u5668\u3001\u955c\u50cf\u3001CI/CD\u3001\u67b6\u6784\u3001\u5b58\u50a8\u3001\u5b89\u5168\u548c\u7f51\u7edc\u3002 \u8fd9\u4e9b\u662f\u5b66\u4e60\u6838\u5fc3\u5185\u5bb9\uff0c\u5728\u8fd9\u90e8\u5206\u5185\u5bb9\u4e2d\uff0c\u6211\u5c06\u57fa\u672c\u6309\u7167\u4ece\u5b9e\u8df5\u5230\u539f\u7406\u7684\u65b9\u5f0f\u8fdb\u884c\u7ec4\u7ec7\uff0c\u8ba9\u4f60\u4ece\u6839\u513f\u4e0a\u77e5\u9053\u5982\u4f55\u7528\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u7528\u3002 \u5728\u5bb9\u5668\u7bc7\uff0c\u6211\u4f1a\u5148\u7ed9\u4f60\u4ecb\u7ecd\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u90a3\u4f60\u5bf9\u5bb9\u5668\u7684\u4f7f\u7528\u6709\u4e2a\u57fa\u672c\u8ba4\u8bc6\uff1b\u4e4b\u540e\u4f1a\u5bf9\u5bb9\u5668\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406\uff1b\u5e76\u5bf9\u5bb9\u5668\u7684\u6838\u5fc3\u8fdb\u884c\u6df1\u5165\u5256\u6790\uff1b\u6700\u540e\u52a8\u624b\u6765\u81ea\u5df1\u5199\u5bb9\u5668\u3002 \u5728\u955c\u50cf\u7bc7\uff0c\u5c06\u4ecb\u7ecd\u955c\u50cf\u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\uff1b\u955c\u50cf\u662f\u5982\u4f55\u6784\u5efa\u4e0e\u5206\u53d1\u7684\uff1b\u5982\u4f55\u4f7f\u7528 Dockerfile \u8fdb\u884c\u955c\u50cf\u6784\u5efa\uff1b\u5e76\u4ecb\u7ecd Docker \u7684\u4e0b\u4e00\u4ee3\u6784\u5efa\u7cfb\u7edf\u662f\u5982\u4f55\u63d0\u901f\u8fd1 10 \u500d\u7684\uff1b\u63a5\u4e0b\u6765\u7ed3\u5408\u6211\u7684\u5b9e\u9645\u955c\u50cf\u4e3a\u4f60\u4ecb\u7ecd Dockerfile \u7684\u4f18\u5316\u548c\u6700\u4f73\u5b9e\u8df5\uff1b\u6700\u540e\u5206\u522b\u6df1\u5165\u6e90\u7801\u4e3a\u4f60\u4ecb\u7ecd\u955c\u50cf\u6784\u5efa\u3001\u5206\u53d1\u7684\u539f\u7406\uff0c\u4ee5\u53ca\u8ba4\u8bc1\u6d41\u7a0b\u548c\u539f\u7406\u3002 \u5728 CI/CD \u7bc7\uff0c\u4f1a\u4ecb\u7ecd\u5982\u4f55\u5c06 Docker \u4e0e CI/CD \u7ed3\u5408\uff0c\u540c\u65f6\u4ecb\u7ecd\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u4f7f\u7528\u7684 CI/CD pipeline\uff0c\u5e0c\u671b\u80fd\u4e3a\u8bfb\u8005\u5efa\u8bbe CI/CD \u63d0\u4f9b\u4e00\u4e9b\u542f\u53d1\u3002 \u67b6\u6784\u7bc7\u4e2d\u6211\u4f1a\u7ed3\u5408\u6e90\u7801\u4ecb\u7ecd Docker \u7684\u6838\u5fc3\u67b6\u6784\uff0c\u4ee5\u53ca\u5176\u662f\u5982\u4f55\u534f\u4f5c\u7684\uff1bDocker \u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u6269\u5c55\u7684 Plugin \u673a\u5236\uff0c\u5728\u7279\u5b9a\u573a\u666f\u4e0b\u4f7f\u7528 Plugin \u6269\u5c55 Docker \u4e5f\u662f\u4e00\u79cd\u4e0d\u9519\u7684\u9009\u62e9\uff1b\u63a5\u4e0b\u6765\u4f1a\u7ed3\u5408\u5b9e\u9645\u7ecf\u9a8c\u4ecb\u7ecd\u5bb9\u5668\u76d1\u63a7\u548c\u65e5\u5fd7\u65b9\u9762\u7684\u5177\u4f53\u5b9e\u8df5\u65b9\u6848\uff0c\u5e0c\u671b\u80fd\u4e3a\u8bfb\u8005\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u63d0\u4f9b\u4e00\u4e2a\u53c2\u8003\uff1b\u6700\u540e\u4f1a\u4e0e\u8bfb\u8005\u5206\u4eab\u6211\u6240\u603b\u7ed3\u7684 Docker \u76f8\u5173\u95ee\u9898\u7684\u5b9a\u4f4d\u53ca\u8c03\u8bd5\u624b\u6bb5 \u6b63\u786e\u7684\u65b9\u6cd5\u80fd\u8ba9\u4f60\u6392\u67e5\u95ee\u9898\u7684\u6548\u7387\u7ffb\u500d\u3002 \u5b58\u50a8\u7bc7\u4e3b\u8981\u4ecb\u7ecd Docker \u4e2d volume \u7684\u4f7f\u7528\uff1b\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u6570\u636e\u5907\u4efd\u548c\u6062\u590d\uff1b\u6700\u540e\u4f1a\u6df1\u5165\u5185\u90e8\u4ecb\u7ecd\u73b0\u5728 Docker \u6700\u63a8\u8350\u7684 Overlay2 \u5b58\u50a8\u9a71\u52a8\u7684\u5de5\u4f5c\u539f\u7406\u3002 \u5b89\u5168\u7bc7\u4f1a\u6d89\u53ca\u955c\u50cf\u548c\u5bb9\u5668\u8fd0\u884c\u65f6\u7684\u5b89\u5168\uff1b\u4ee5\u53ca\u4f1a\u6d89\u53ca\u4e00\u4e9b\u7684 Linux \u5185\u6838\u5b89\u5168\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5229\u7528 Linux \u5185\u6838\u7684\u5b89\u5168\u6a21\u5757\u4e3a Docker \u4fdd\u9a7e\u62a4\u822a\u3002 \u7f51\u7edc\u7bc7\u9664\u4e86\u4ecb\u7ecd\u57fa\u7840\u7f51\u7edc\u77e5\u8bc6\u5916\uff0c\u8fd8\u4f1a\u4ecb\u7ecd\u5982\u4f55\u5b9a\u5236 bridge \u7f51\u7edc\uff1biptables \u59cb\u7ec8\u662f\u4e00\u4e2a\u5f88\u6838\u5fc3\u7684\u77e5\u8bc6\u70b9\uff0c\u6211\u4f1a\u4e3a\u8bfb\u8005\u5c06 Docker \u4e0e iptables \u68b3\u7406\u6e05\u695a\uff0c\u4ee5\u53ca\u5982\u4f55\u81ea\u5b9a\u4e49\u7684\u8fdb\u884c\u7f51\u7edc\u7ba1\u7406\uff1b\u6700\u540e\u8be6\u7ec6\u4ecb\u7ecd\u4e86 docker-proxy\uff0cDocker \u5185\u90e8 DNS \u4ee5\u53ca Docker \u7684\u6838\u5fc3\u7f51\u7edc\u77e5\u8bc6\uff0c\u8ba9\u7f51\u7edc\u4e0d\u518d\u6210\u4e3a\u4e00\u4e2a\u62e6\u8def\u864e\u3002 \u751f\u6001\u6269\u5c55 \uff1a\u4e0d\u5f97\u4e0d\u8bf4\u201c\u5f00\u6e90\u201d\u662f Docker \u6210\u957f\u8fc5\u901f\u7684\u5173\u952e\uff0c\u5728\u8fd9\u4e2a\u6a21\u5757\u4e2d\uff0c\u6211\u5c06\u8be6\u7ec6\u4ecb\u7ecd Docker \u4e0e Kubernetes \u95f4\u7684\u8054\u7cfb\uff0c\u4ee5\u53ca\u5bb9\u5668\u751f\u6001\u4e2d\u7684\u5176\u4ed6\u7ec4\u4ef6\uff1b \u4e0e\u8bfb\u8005\u5206\u4eab\u5982\u4f55\u53c2\u4e0e\u5230 Docker \u5bb9\u5668\u751f\u6001\u5185\uff0c\u5f53\u7136\u8fd9\u91cc\u4e5f\u4f1a\u6d89\u53ca\u5230 Docker \u73b0\u5728\u7684\u4ee3\u7801\u7ec4\u7ec7\u76f8\u5173\u7684\u5185\u5bb9\uff1b\u6700\u540e\u5c06\u4e0e\u8bfb\u8005\u63a2\u8ba8 Docker \u751f\u6001\u672a\u6765\u7684\u8d70\u5411\u3002 Docker \u7b49\u5bb9\u5668\u6280\u672f\u6b63\u5904\u4e8e\u6280\u672f\u7684\u70ed\u6f6e\u4e2d\uff0c\u5c06\u5176\u5185\u5316\u4e3a\u81ea\u5df1\u7684\u6280\u672f\u5b9e\u529b\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u63d0\u5347\u81ea\u5df1\u65e5\u5e38\u7684\u5f00\u53d1\u90e8\u7f72\u6548\u7387\uff0c\u66f4\u53ef\u4ee5\u4f5c\u4e3a\u9762\u8bd5\u7684\u4e00\u4e2a\u52a0\u5206\u9879\u3002\u540c\u65f6\uff0c\u6df1\u5165\u539f\u7406\u540e\uff0c\u76f8\u4fe1\u4f60\u4e5f\u4f1a\u4ece\u4e2d\u5b66\u4e60\u5230\u5f88\u591a\u4e0d\u53ea\u5c40\u9650\u4e8e Docker \u81ea\u8eab\u7684\u77e5\u8bc6\u3002","title":"\u5b66\u4e60\u8ba1\u5212"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/","text":"\u8fd9\u662f\u672c\u4e13\u680f\u7684\u7b2c\u4e8c\u90e8\u5206\uff1a\u5bb9\u5668\u7bc7\uff0c\u5171 6 \u7bc7\uff0c\u5e2e\u52a9\u5927\u5bb6\u7531\u6d45\u5165\u6df1\u5730\u8ba4\u8bc6\u548c\u638c\u63e1\u5bb9\u5668\u3002\u8fd9\u4e00\u7bc7\u548c\u4e0b\u4e00\u7bc7\uff0c\u6211\u4f1a\u4e3a\u4f60\u4ecb\u7ecd\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u5e26\u4f60\u638c\u63e1\u5bb9\u5668\u751f\u547d\u5468\u671f\u3002\u4e0b\u9762\u6211\u4eec\u4e00\u8d77\u8fdb\u5165\u7b2c\u4e00\u7bc7\u7684\u5185\u5bb9\uff0c\u4e3b\u8981\u6d89\u53ca\u5bb9\u5668\u72b6\u6001\u7684\u53d8\u5316\u3002 \u5728\u7b2c\u4e00\u90e8\u5206\u7b2c\u4e8c\u7bc7\u300aDocker \u7684\u57fa\u672c\u4f7f\u7528\u300b\u4e2d\uff0c\u6211\u4e3a\u4f60\u4ecb\u7ecd\u4e86 Docker \u7684\u57fa\u672c\u4f7f\u7528\uff0c\u5305\u62ec\u4f7f\u7528 docker run \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u4f7f\u7528 docker exec \u8fdb\u5165\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u3002\u90a3\u4f60\u6709\u6ca1\u6709\u8003\u8651\u8fc7\u5bb9\u5668\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u662f\u4ec0\u4e48\u6837\u7684\uff1f\u5f53\u6211\u4eec\u4e0d\u4f7f\u7528\u5b83\u7684\u65f6\u5019\uff0c\u5b83\u662f\u4ec0\u4e48\u72b6\u6001\uff1f \u6211\u4eec\u542f\u52a8\u4e00\u4e2a Redis \u7684\u5bb9\u5668\u4f5c\u4e3a\u793a\u4f8b\u3002 ( MoeLove ) \u279c ~ docker run -d redis cf56a27e94f6142e7f69eb34de837b9bc091986006b1a7b563750317185376ea \u4f7f\u7528 docker ps \u547d\u4ee4\u67e5\u770b\u5bb9\u5668\u5f53\u524d\u7684\u72b6\u6001\uff0c\u5728\u8f93\u51fa\u7ed3\u679c\u4e2d\u5305\u542b\u4e00\u5217 STATUS \u72b6\u6001\u4fe1\u606f\uff0c\u6211\u4eec\u4ee5\u6b64\u72b6\u6001\u4f5c\u4e3a\u672c\u7bc7\u7684\u5207\u5165\u70b9\u3002 ( MoeLove ) \u279c ~ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES cf56a27e94f6 redis \"docker-entrypoint.s\u2026\" 5 seconds ago Up 4 seconds 6379 /tcp cranky_yonath \u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\uff08Created\uff09 \u00b6 \u4f7f\u7528 docker container create \u6216\u8005 docker create \u547d\u4ee4\u53ef\u521b\u5efa\u4e00\u4e2a\u5904\u4e8e Created \u72b6\u6001\u7684\u5bb9\u5668\uff0c\u4f46\u662f\u8be5\u5bb9\u5668\u5e76\u6ca1\u6709\u771f\u6b63\u8fd0\u884c\uff0c\u6211\u4eec\u662f\u4e0d\u80fd\u901a\u8fc7 docker exec \u8fdb\u5165\u8be5\u5bb9\u5668\u7684\u3002 # \u521b\u5efa\u4e00\u4e2a\u5bb9\u5668 ( MoeLove ) \u279c ~ docker container create redis 2017ecbb4da676069ce0f57583765a7f2562475bb0f7dfab12de8d1e0a93f322 # \u67e5\u8be2\u5bb9\u5668\u7684\u72b6\u6001 ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2017ecbb4da6 redis \"docker-entrypoint.s\u2026\" 11 seconds ago Created condescending_cray # \u5c1d\u8bd5\u8fdb\u5165\u5bb9\u5668\u5185\u90e8 ( MoeLove ) \u279c ~ docker exec -it 2017ecbb4da6 sh Error response from daemon: Container 2017ecbb4da676069ce0f57583765a7f2562475bb0f7dfab12de8d1e0a93f322 is not running \u867d\u7136\u5b83\u6ca1\u6709\u771f\u6b63\u8fd0\u884c\uff0c\u4f46\u662f\u5b83\u8fd0\u884c\u6240\u9700\u7684\u76f8\u5173\u6587\u4ef6\u5374\u5df2\u7ecf\u90fd\u521b\u5efa\u597d\u4e86\uff0c\u5e76\u4e14\u4f60\u4e5f\u53ef\u4ee5\u5728 create \u7684\u65f6\u5019\u7ed9\u5b83\u4f20\u9012\u5404\u79cd\u53ef\u7528\u4e8e\u914d\u7f6e\u5bb9\u5668\u8fd0\u884c\u65f6\u7684\u53c2\u6570\uff1b\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u662f\u7528\u6765\u9884\u914d\u7f6e\u5bb9\u5668\uff0c\u56e0\u4e3a\u5728\u6267\u884c\u5b8c docker create \u547d\u4ee4\u540e\uff0c\u4f1a\u76f4\u63a5\u8f93\u51fa\u5bb9\u5668\u7684 ID\u3002\u4f60\u53ef\u4ee5\u5728\u4e00\u5207\u51c6\u5907\u5c31\u7eea\u540e\uff0c\u968f\u65f6\u542f\u52a8\u5b83\u3002 \u53e6\u4e00\u79cd\u4f7f\u7528\u573a\u666f\u662f\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u9884\u6302\u8f7d\u4e00\u4e2a\u6216\u591a\u4e2a\u5b58\u50a8\u5377\uff0c\u540e\u7eed\u5176\u4ed6\u5176\u4ed6\u5bb9\u5668\u53ef\u501f\u52a9\u6b64\u5bb9\u5668\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u5b58\u50a8\u5377\uff08\u5728\u5b58\u50a8\u7bc7\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\u3002 \u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\uff08Running\uff09 \u00b6 \u524d\u9762\u5df2\u7ecf\u63d0\u5230\u4e86\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 docker create \u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u5904\u4e8e Created \u72b6\u6001\u7684\u5bb9\u5668\uff0c\u90a3\u6211\u4eec\u5982\u4f55\u80fd\u8ba9\u5b83\u771f\u6b63\u5730\u5f00\u59cb\u8fd0\u884c\u5462\uff1f # \u521b\u5efa\u5bb9\u5668 (MoeLove) \u279c ~ docker create redis b41a77be2fd9624824cc5b00b786f0236eba8d952f79b665a500fb7e649bb813 # \u67e5\u8be2\u5bb9\u5668\u7684\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b41a77be2fd9 redis \"docker-entrypoint.s\u2026\" 2 seconds ago Created awesome_hofstadter \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 docker start \u547d\u4ee4\uff0c\u8ba9\u521a\u624d Created \u72b6\u6001\u7684\u5bb9\u5668\u771f\u6b63\u542f\u52a8\uff08\u8fd0\u884c\uff09\u3002 # \u542f\u52a8\u8be5\u5bb9\u5668 (MoeLove) \u279c ~ docker start b41a77be2fd9 b41a77be2fd9 # \u67e5\u8be2\u5bb9\u5668\u7684\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b41a77be2fd9 redis \"docker-entrypoint.s\u2026\" 33 seconds ago Up 3 seconds 6379/tcp awesome_hofstadter # \u8fdb\u5165\u5bb9\u5668\u6267\u884c\u547d\u4ee4 (MoeLove) \u279c ~ docker exec b41a77be2fd9 redis-cli ping PONG \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u6b64\u65f6\u5df2\u7ecf\u5904\u4e8e\u6b63\u5728\u8fd0\u884c\u7684\u72b6\u6001\u4e86\u3002\u90a3\u6211\u4eec\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u529e\u6cd5\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\uff1f \u60f3\u5fc5\u806a\u660e\u7684\u4f60\u5df2\u7ecf\u60f3\u5230\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 docker run \u547d\u4ee4\u76f4\u63a5\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\u3002 # \u5728\u540e\u53f0\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668 (MoeLove) \u279c ~ docker run -d redis b566506f243bf22275397d5d73194e72a94775a0c5673240f60ac30539c276e5 # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b566506f243b redis \"docker-entrypoint.s\u2026\" 4 seconds ago Up 2 seconds 6379/tcp hopeful_chaum docker run \u662f\u8fd0\u884c\u5bb9\u5668\u6700\u5e38\u7528\u7684\u4e00\u4e2a\u547d\u4ee4\uff0c\u56e0\u4e3a\u6211\u4eec\u5f88\u591a\u65f6\u5019\u901a\u8fc7\u4f20\u5165\u53c2\u6570\u7684\u65b9\u5f0f\u4fbf\u53ef\u5b8c\u6210\u5927\u591a\u6570\u9884\u671f\u7684\u914d\u7f6e\u4e86\uff0c\u5e76\u4e14\u4f7f\u7528 docker run \u4e5f\u66f4\u52a0\u76f4\u63a5\u4e00\u4e9b\u3002 \u4f60\u53ef\u80fd\u4e5f\u53d1\u73b0\u4e86 docker run -d \u548c docker create \u5728\u547d\u4ee4\u6267\u884c\u540e\uff0c\u90fd\u4f1a\u5c06\u5bb9\u5668 ID \u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6b64 ID \u5b8c\u6210\u540e\u7eed\u5bf9\u5bb9\u5668\u64cd\u4f5c\u7684\u9700\u6c42\u3002 \u6682\u505c\u4e00\u4e2a\u5bb9\u5668\uff08Paused\uff09 \u00b6 pause \u00b6 \u5bb9\u5668\u5728\u8fd0\u884c\u65f6\uff0c\u662f\u5426\u6709\u529e\u6cd5\u8ba9\u5176\u6682\u505c\uff1f\u6216\u8005\u8ba9\u5b83\u6682\u65f6\u4e0d\u63d0\u4f9b\u670d\u52a1\uff1f \u7b54\u6848\u662f\u4f7f\u7528 docker pause\uff0c\u6211\u4eec\u5148\u6765\u4e2a\u5b9e\u9645\u4f8b\u5b50\u518d\u9010\u6b65\u8fdb\u884c\u89e3\u91ca\u3002 # \u5728\u540e\u53f0\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668 (MoeLove) \u279c ~ docker run -d redis 074322e2467c1f280d8f1dfe90be45a1fa0673ec7f97220ec2c695e812179e30 # \u67e5\u770b\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 074322e2467c redis \"docker-entrypoint.s\u2026\" 3 seconds ago Up 2 seconds 6379/tcp musing_mclean # \u6682\u505c\u5bb9\u5668 (MoeLove) \u279c ~ docker pause 074322e2467c 074322e2467c # \u67e5\u770b\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 074322e2467c redis \"docker-entrypoint.s\u2026\" 19 seconds ago Up 19 seconds (Paused) 6379/tcp musing_mclean \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u5df2\u7ecf\u5904\u4e8e Paused \u72b6\u6001\uff0c\u4f46\u8bf7\u540c\u65f6\u6ce8\u610f Running \uff08\u6216\u8005\u8bf4 Up\uff09\u4e0e Paused \u5e76\u4e0d\u4e92\u65a5\uff0c\u6216\u8005\u8bf4 Paused \u662f Running \u7684\u4e00\u4e2a\u5206\u652f\u3002 # \u5c1d\u8bd5\u8fdb\u5165\u5bb9\u5668\u6267\u884c\u547d\u4ee4 (MoeLove) \u279c ~ docker exec 074322e2467c redis-cli ping Error response from daemon: Container 074322e2467c is paused, unpause the container before exec \u53ef\u4ee5\u770b\u5230\u5904\u4e8e Paused \u72b6\u6001\u7684\u5bb9\u5668\u662f\u65e0\u6cd5 docker exec \u8fdb\u5165\u5176\u4e2d\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u4e00\u4e0b\u5f53\u524d\u5bb9\u5668\u8fdb\u7a0b\u7684\u72b6\u6001\uff1a # \u4f7f\u7528 docker inspect \u53ef\u83b7\u53d6\u5bb9\u5668\u8fdb\u7a0b\u7684 ID (MoeLove) \u279c ~ docker inspect --format \"{{.State.Pid}}\" 074322e2467c 9599 # \u4f7f\u7528 ps \u547d\u4ee4\u67e5\u770b\u8fdb\u7a0b\u7684\u72b6\u6001 (MoeLove) \u279c ~ ps -eo pid,state,command |grep 9599 |grep -v grep 9599 D redis-server *:6379 \u53ef\u4ee5\u770b\u5230\u5f53\u524d\u8fdb\u7a0b\u72b6\u6001\u662f D\uff0c\u8868\u793a\u8fdb\u7a0b\u786e\u5b9e\u662f\u5728\u4f11\u7720\u72b6\u6001\u4e86\u3002 unpause \u00b6 \u90a3\u6211\u4eec\u662f\u5426\u6709\u529e\u6cd5\u8ba9\u5b83\u6062\u590d\u6b63\u5e38\u5462\uff1f \u5f53\u7136\u6709\uff0c\u4f7f\u7528 docker unpause \u5373\u53ef\u3002 # \u5c06\u5bb9\u5668\u4ece Paused \u72b6\u6001\u6062\u590d (MoeLove) \u279c ~ docker unpause 074322e2467c 074322e2467c # \u8fdb\u5165\u5bb9\u5668\u5185\u6267\u884c\u547d\u4ee4 (MoeLove) \u279c ~ docker exec 074322e2467c redis-cli ping PONG # \u4f7f\u7528 ps \u547d\u4ee4\u67e5\u770b\u8fdb\u7a0b\u7684\u72b6\u6001 (MoeLove) \u279c ~ ps -eo pid,state,command |grep 9599 |grep -v grep 9599 S redis-server *:6379 \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u6062\u590d\u6b63\u5e38\u3002 \u505c\u6b62\u4e00\u4e2a\u5bb9\u5668\uff08Exited\uff09 \u00b6 \u5982\u679c\u60f3\u8981\u5c06\u4e00\u4e2a\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\u505c\u6b62\u8be5\u5982\u4f55\u64cd\u4f5c\uff1f \u4f7f\u7528 docker stop \u64cd\u4f5c\u5373\u53ef\u3002\u6211\u4eec\u6765\u770b\u4e2a\u5177\u4f53\u4f8b\u5b50\uff1a # \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668 (MoeLove) \u279c ~ docker run -d redis fffb13b75e22ca4eb035721df1660d25b9ef8379b8fd9a90c4a0258ea54c560c # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES fffb13b75e22 redis \"docker-entrypoint.s\u2026\" 2 seconds ago Up 1 second 6379/tcp jolly_cohen # \u505c\u6b62\u4e00\u4e2a\u5bb9\u5668 # docker ps -ql \u7528\u4e8e\u83b7\u53d6\u6700\u8fd1\u4e00\u4e2a\u5bb9\u5668\u7684 ID (MoeLove) \u279c ~ docker stop $(docker ps -ql) fffb13b75e22 # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES fffb13b75e22 redis \"docker-entrypoint.s\u2026\" 17 seconds ago Exited (0) 2 seconds ago jolly_cohen \u53ef\u4ee5\u770b\u5230\u4f7f\u7528 docker stop \u53ef\u4ee5\u5c06\u4e00\u4e2a\u5bb9\u5668\u4ece Running \u72b6\u6001\u53d8\u4e3a Exited \u72b6\u6001\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u5904\u4e8e Exited \u72b6\u6001\u7684\u5bb9\u5668\u4ecd\u5b58\u5728\u4e8e\u673a\u5668\u4e0a\u3002 \u542f\u52a8\u5bb9\u5668 \u00b6 \u5c06\u5bb9\u5668\u4ece Exited \u72b6\u6001\u5230 Running\uff0c\u60f3\u5fc5\u4f60\u5df2\u7ecf\u731c\u5230\u4e86\uff0c\u4f7f\u7528 docker start \u5373\u53ef\u3002 # \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668 (MoeLove) \u279c ~ docker start $(docker ps -ql) fffb13b75e22 # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES fffb13b75e22 redis \"docker-entrypoint.s\u2026\" 36 seconds ago Up 2 seconds 6379/tcp jolly_cohen \u603b\u7ed3 \u00b6 \u672c\u7bc7\u4ecb\u7ecd\u4e86\u5bb9\u5668\u751f\u547d\u5468\u671f\u7684\u57fa\u672c\u7ba1\u7406\u64cd\u4f5c\uff0c\u901a\u8fc7\u5b9e\u9645\u7684\u5b9e\u9a8c\u6765\u52a0\u6df1\u5370\u8c61\u3002 \u8fd9\u91cc\u6211\u603b\u7ed3\u4e86\u4e00\u5f20\u5bb9\u5668\u72b6\u6001\u7684\u6982\u89c8\u56fe\uff0c\u4f9b\u4f60\u53c2\u8003\u3002 \u5176\u4e2d Dead \u548c Removing \u72b6\u6001\u672c\u7bc7\u672a\u6d89\u53ca\uff0c\u6211\u5c06\u5728\u4e0b\u7bc7\u4e0e\u4f60\u5206\u4eab\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u5269\u4f59\u90e8\u5206\u3002 \u672c\u7bc7\u7684\u5185\u5bb9\u76f8\u5bf9\u7b80\u5355\uff0c\u4f46\u9700\u8981\u975e\u5e38\u719f\u6089\uff0c\u5efa\u8bae\u591a\u5b9e\u8df5\uff0c\u4f1a\u66f4\u5229\u4e8e\u540e\u7eed\u4e13\u680f\u5185\u5bb9\u7684\u5b66\u4e60\u3002","title":"\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\uff08\u4e0a\uff09"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/#created","text":"\u4f7f\u7528 docker container create \u6216\u8005 docker create \u547d\u4ee4\u53ef\u521b\u5efa\u4e00\u4e2a\u5904\u4e8e Created \u72b6\u6001\u7684\u5bb9\u5668\uff0c\u4f46\u662f\u8be5\u5bb9\u5668\u5e76\u6ca1\u6709\u771f\u6b63\u8fd0\u884c\uff0c\u6211\u4eec\u662f\u4e0d\u80fd\u901a\u8fc7 docker exec \u8fdb\u5165\u8be5\u5bb9\u5668\u7684\u3002 # \u521b\u5efa\u4e00\u4e2a\u5bb9\u5668 ( MoeLove ) \u279c ~ docker container create redis 2017ecbb4da676069ce0f57583765a7f2562475bb0f7dfab12de8d1e0a93f322 # \u67e5\u8be2\u5bb9\u5668\u7684\u72b6\u6001 ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2017ecbb4da6 redis \"docker-entrypoint.s\u2026\" 11 seconds ago Created condescending_cray # \u5c1d\u8bd5\u8fdb\u5165\u5bb9\u5668\u5185\u90e8 ( MoeLove ) \u279c ~ docker exec -it 2017ecbb4da6 sh Error response from daemon: Container 2017ecbb4da676069ce0f57583765a7f2562475bb0f7dfab12de8d1e0a93f322 is not running \u867d\u7136\u5b83\u6ca1\u6709\u771f\u6b63\u8fd0\u884c\uff0c\u4f46\u662f\u5b83\u8fd0\u884c\u6240\u9700\u7684\u76f8\u5173\u6587\u4ef6\u5374\u5df2\u7ecf\u90fd\u521b\u5efa\u597d\u4e86\uff0c\u5e76\u4e14\u4f60\u4e5f\u53ef\u4ee5\u5728 create \u7684\u65f6\u5019\u7ed9\u5b83\u4f20\u9012\u5404\u79cd\u53ef\u7528\u4e8e\u914d\u7f6e\u5bb9\u5668\u8fd0\u884c\u65f6\u7684\u53c2\u6570\uff1b\u8fd9\u79cd\u65b9\u5f0f\u901a\u5e38\u662f\u7528\u6765\u9884\u914d\u7f6e\u5bb9\u5668\uff0c\u56e0\u4e3a\u5728\u6267\u884c\u5b8c docker create \u547d\u4ee4\u540e\uff0c\u4f1a\u76f4\u63a5\u8f93\u51fa\u5bb9\u5668\u7684 ID\u3002\u4f60\u53ef\u4ee5\u5728\u4e00\u5207\u51c6\u5907\u5c31\u7eea\u540e\uff0c\u968f\u65f6\u542f\u52a8\u5b83\u3002 \u53e6\u4e00\u79cd\u4f7f\u7528\u573a\u666f\u662f\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u9884\u6302\u8f7d\u4e00\u4e2a\u6216\u591a\u4e2a\u5b58\u50a8\u5377\uff0c\u540e\u7eed\u5176\u4ed6\u5176\u4ed6\u5bb9\u5668\u53ef\u501f\u52a9\u6b64\u5bb9\u5668\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u5b58\u50a8\u5377\uff08\u5728\u5b58\u50a8\u7bc7\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\u3002","title":"\u521b\u5efa\u4e00\u4e2a\u5bb9\u5668\uff08Created\uff09"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/#running","text":"\u524d\u9762\u5df2\u7ecf\u63d0\u5230\u4e86\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 docker create \u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u5904\u4e8e Created \u72b6\u6001\u7684\u5bb9\u5668\uff0c\u90a3\u6211\u4eec\u5982\u4f55\u80fd\u8ba9\u5b83\u771f\u6b63\u5730\u5f00\u59cb\u8fd0\u884c\u5462\uff1f # \u521b\u5efa\u5bb9\u5668 (MoeLove) \u279c ~ docker create redis b41a77be2fd9624824cc5b00b786f0236eba8d952f79b665a500fb7e649bb813 # \u67e5\u8be2\u5bb9\u5668\u7684\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b41a77be2fd9 redis \"docker-entrypoint.s\u2026\" 2 seconds ago Created awesome_hofstadter \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 docker start \u547d\u4ee4\uff0c\u8ba9\u521a\u624d Created \u72b6\u6001\u7684\u5bb9\u5668\u771f\u6b63\u542f\u52a8\uff08\u8fd0\u884c\uff09\u3002 # \u542f\u52a8\u8be5\u5bb9\u5668 (MoeLove) \u279c ~ docker start b41a77be2fd9 b41a77be2fd9 # \u67e5\u8be2\u5bb9\u5668\u7684\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b41a77be2fd9 redis \"docker-entrypoint.s\u2026\" 33 seconds ago Up 3 seconds 6379/tcp awesome_hofstadter # \u8fdb\u5165\u5bb9\u5668\u6267\u884c\u547d\u4ee4 (MoeLove) \u279c ~ docker exec b41a77be2fd9 redis-cli ping PONG \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u6b64\u65f6\u5df2\u7ecf\u5904\u4e8e\u6b63\u5728\u8fd0\u884c\u7684\u72b6\u6001\u4e86\u3002\u90a3\u6211\u4eec\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u529e\u6cd5\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\uff1f \u60f3\u5fc5\u806a\u660e\u7684\u4f60\u5df2\u7ecf\u60f3\u5230\u4e86\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 docker run \u547d\u4ee4\u76f4\u63a5\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\u3002 # \u5728\u540e\u53f0\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668 (MoeLove) \u279c ~ docker run -d redis b566506f243bf22275397d5d73194e72a94775a0c5673240f60ac30539c276e5 # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES b566506f243b redis \"docker-entrypoint.s\u2026\" 4 seconds ago Up 2 seconds 6379/tcp hopeful_chaum docker run \u662f\u8fd0\u884c\u5bb9\u5668\u6700\u5e38\u7528\u7684\u4e00\u4e2a\u547d\u4ee4\uff0c\u56e0\u4e3a\u6211\u4eec\u5f88\u591a\u65f6\u5019\u901a\u8fc7\u4f20\u5165\u53c2\u6570\u7684\u65b9\u5f0f\u4fbf\u53ef\u5b8c\u6210\u5927\u591a\u6570\u9884\u671f\u7684\u914d\u7f6e\u4e86\uff0c\u5e76\u4e14\u4f7f\u7528 docker run \u4e5f\u66f4\u52a0\u76f4\u63a5\u4e00\u4e9b\u3002 \u4f60\u53ef\u80fd\u4e5f\u53d1\u73b0\u4e86 docker run -d \u548c docker create \u5728\u547d\u4ee4\u6267\u884c\u540e\uff0c\u90fd\u4f1a\u5c06\u5bb9\u5668 ID \u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6b64 ID \u5b8c\u6210\u540e\u7eed\u5bf9\u5bb9\u5668\u64cd\u4f5c\u7684\u9700\u6c42\u3002","title":"\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668\uff08Running\uff09"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/#paused","text":"","title":"\u6682\u505c\u4e00\u4e2a\u5bb9\u5668\uff08Paused\uff09"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/#pause","text":"\u5bb9\u5668\u5728\u8fd0\u884c\u65f6\uff0c\u662f\u5426\u6709\u529e\u6cd5\u8ba9\u5176\u6682\u505c\uff1f\u6216\u8005\u8ba9\u5b83\u6682\u65f6\u4e0d\u63d0\u4f9b\u670d\u52a1\uff1f \u7b54\u6848\u662f\u4f7f\u7528 docker pause\uff0c\u6211\u4eec\u5148\u6765\u4e2a\u5b9e\u9645\u4f8b\u5b50\u518d\u9010\u6b65\u8fdb\u884c\u89e3\u91ca\u3002 # \u5728\u540e\u53f0\u8fd0\u884c\u4e00\u4e2a\u5bb9\u5668 (MoeLove) \u279c ~ docker run -d redis 074322e2467c1f280d8f1dfe90be45a1fa0673ec7f97220ec2c695e812179e30 # \u67e5\u770b\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 074322e2467c redis \"docker-entrypoint.s\u2026\" 3 seconds ago Up 2 seconds 6379/tcp musing_mclean # \u6682\u505c\u5bb9\u5668 (MoeLove) \u279c ~ docker pause 074322e2467c 074322e2467c # \u67e5\u770b\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 074322e2467c redis \"docker-entrypoint.s\u2026\" 19 seconds ago Up 19 seconds (Paused) 6379/tcp musing_mclean \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u5df2\u7ecf\u5904\u4e8e Paused \u72b6\u6001\uff0c\u4f46\u8bf7\u540c\u65f6\u6ce8\u610f Running \uff08\u6216\u8005\u8bf4 Up\uff09\u4e0e Paused \u5e76\u4e0d\u4e92\u65a5\uff0c\u6216\u8005\u8bf4 Paused \u662f Running \u7684\u4e00\u4e2a\u5206\u652f\u3002 # \u5c1d\u8bd5\u8fdb\u5165\u5bb9\u5668\u6267\u884c\u547d\u4ee4 (MoeLove) \u279c ~ docker exec 074322e2467c redis-cli ping Error response from daemon: Container 074322e2467c is paused, unpause the container before exec \u53ef\u4ee5\u770b\u5230\u5904\u4e8e Paused \u72b6\u6001\u7684\u5bb9\u5668\u662f\u65e0\u6cd5 docker exec \u8fdb\u5165\u5176\u4e2d\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u4e00\u4e0b\u5f53\u524d\u5bb9\u5668\u8fdb\u7a0b\u7684\u72b6\u6001\uff1a # \u4f7f\u7528 docker inspect \u53ef\u83b7\u53d6\u5bb9\u5668\u8fdb\u7a0b\u7684 ID (MoeLove) \u279c ~ docker inspect --format \"{{.State.Pid}}\" 074322e2467c 9599 # \u4f7f\u7528 ps \u547d\u4ee4\u67e5\u770b\u8fdb\u7a0b\u7684\u72b6\u6001 (MoeLove) \u279c ~ ps -eo pid,state,command |grep 9599 |grep -v grep 9599 D redis-server *:6379 \u53ef\u4ee5\u770b\u5230\u5f53\u524d\u8fdb\u7a0b\u72b6\u6001\u662f D\uff0c\u8868\u793a\u8fdb\u7a0b\u786e\u5b9e\u662f\u5728\u4f11\u7720\u72b6\u6001\u4e86\u3002","title":"pause"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/#unpause","text":"\u90a3\u6211\u4eec\u662f\u5426\u6709\u529e\u6cd5\u8ba9\u5b83\u6062\u590d\u6b63\u5e38\u5462\uff1f \u5f53\u7136\u6709\uff0c\u4f7f\u7528 docker unpause \u5373\u53ef\u3002 # \u5c06\u5bb9\u5668\u4ece Paused \u72b6\u6001\u6062\u590d (MoeLove) \u279c ~ docker unpause 074322e2467c 074322e2467c # \u8fdb\u5165\u5bb9\u5668\u5185\u6267\u884c\u547d\u4ee4 (MoeLove) \u279c ~ docker exec 074322e2467c redis-cli ping PONG # \u4f7f\u7528 ps \u547d\u4ee4\u67e5\u770b\u8fdb\u7a0b\u7684\u72b6\u6001 (MoeLove) \u279c ~ ps -eo pid,state,command |grep 9599 |grep -v grep 9599 S redis-server *:6379 \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u6062\u590d\u6b63\u5e38\u3002","title":"unpause"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/#exited","text":"\u5982\u679c\u60f3\u8981\u5c06\u4e00\u4e2a\u8fd0\u884c\u4e2d\u7684\u5bb9\u5668\u505c\u6b62\u8be5\u5982\u4f55\u64cd\u4f5c\uff1f \u4f7f\u7528 docker stop \u64cd\u4f5c\u5373\u53ef\u3002\u6211\u4eec\u6765\u770b\u4e2a\u5177\u4f53\u4f8b\u5b50\uff1a # \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668 (MoeLove) \u279c ~ docker run -d redis fffb13b75e22ca4eb035721df1660d25b9ef8379b8fd9a90c4a0258ea54c560c # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES fffb13b75e22 redis \"docker-entrypoint.s\u2026\" 2 seconds ago Up 1 second 6379/tcp jolly_cohen # \u505c\u6b62\u4e00\u4e2a\u5bb9\u5668 # docker ps -ql \u7528\u4e8e\u83b7\u53d6\u6700\u8fd1\u4e00\u4e2a\u5bb9\u5668\u7684 ID (MoeLove) \u279c ~ docker stop $(docker ps -ql) fffb13b75e22 # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES fffb13b75e22 redis \"docker-entrypoint.s\u2026\" 17 seconds ago Exited (0) 2 seconds ago jolly_cohen \u53ef\u4ee5\u770b\u5230\u4f7f\u7528 docker stop \u53ef\u4ee5\u5c06\u4e00\u4e2a\u5bb9\u5668\u4ece Running \u72b6\u6001\u53d8\u4e3a Exited \u72b6\u6001\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u5904\u4e8e Exited \u72b6\u6001\u7684\u5bb9\u5668\u4ecd\u5b58\u5728\u4e8e\u673a\u5668\u4e0a\u3002","title":"\u505c\u6b62\u4e00\u4e2a\u5bb9\u5668\uff08Exited\uff09"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/#_1","text":"\u5c06\u5bb9\u5668\u4ece Exited \u72b6\u6001\u5230 Running\uff0c\u60f3\u5fc5\u4f60\u5df2\u7ecf\u731c\u5230\u4e86\uff0c\u4f7f\u7528 docker start \u5373\u53ef\u3002 # \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668 (MoeLove) \u279c ~ docker start $(docker ps -ql) fffb13b75e22 # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 (MoeLove) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES fffb13b75e22 redis \"docker-entrypoint.s\u2026\" 36 seconds ago Up 2 seconds 6379/tcp jolly_cohen","title":"\u542f\u52a8\u5bb9\u5668"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8A%EF%BC%89/#_2","text":"\u672c\u7bc7\u4ecb\u7ecd\u4e86\u5bb9\u5668\u751f\u547d\u5468\u671f\u7684\u57fa\u672c\u7ba1\u7406\u64cd\u4f5c\uff0c\u901a\u8fc7\u5b9e\u9645\u7684\u5b9e\u9a8c\u6765\u52a0\u6df1\u5370\u8c61\u3002 \u8fd9\u91cc\u6211\u603b\u7ed3\u4e86\u4e00\u5f20\u5bb9\u5668\u72b6\u6001\u7684\u6982\u89c8\u56fe\uff0c\u4f9b\u4f60\u53c2\u8003\u3002 \u5176\u4e2d Dead \u548c Removing \u72b6\u6001\u672c\u7bc7\u672a\u6d89\u53ca\uff0c\u6211\u5c06\u5728\u4e0b\u7bc7\u4e0e\u4f60\u5206\u4eab\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u7684\u5269\u4f59\u90e8\u5206\u3002 \u672c\u7bc7\u7684\u5185\u5bb9\u76f8\u5bf9\u7b80\u5355\uff0c\u4f46\u9700\u8981\u975e\u5e38\u719f\u6089\uff0c\u5efa\u8bae\u591a\u5b9e\u8df5\uff0c\u4f1a\u66f4\u5229\u4e8e\u540e\u7eed\u4e13\u680f\u5185\u5bb9\u7684\u5b66\u4e60\u3002","title":"\u603b\u7ed3"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8B%EF%BC%89/","text":"\u8fd9\u662f\u672c\u4e13\u680f\u7684\u7b2c\u4e8c\u90e8\u5206\uff1a\u5bb9\u5668\u7bc7\uff0c\u5171 6 \u7bc7\uff0c\u5e2e\u52a9\u5927\u5bb6\u7531\u6d45\u5165\u6df1\u5730\u8ba4\u8bc6\u548c\u638c\u63e1\u5bb9\u5668\u3002\u4e0a\u4e00\u7bc7\u548c\u672c\u7bc7\uff0c\u6211\u4f1a\u4e3a\u4f60\u4ecb\u7ecd\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u5e26\u4f60\u638c\u63e1\u5bb9\u5668\u751f\u547d\u5468\u671f\u3002\u4e0b\u9762\u6211\u4eec\u4e00\u8d77\u8fdb\u5165\u7b2c\u4e8c\u7bc7\u7684\u5185\u5bb9\uff0c\u4e3b\u8981\u6d89\u53ca\u5bb9\u5668\u72b6\u6001\u7684\u53d8\u5316\u3002 \u5220\u9664\u5bb9\u5668 \u00b6 \u4e0a\u4e00\u7bc7\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u5bb9\u5668\u7684\u521b\u5efa\uff0c\u6682\u505c\u4ee5\u53ca\u505c\u6b62\u7b49\u64cd\u4f5c\uff0c\u5e76\u4e14\u4e00\u822c\u60c5\u51b5\u4e0b\u5373\u4f7f\u5bb9\u5668\u88ab stop \u6389\u5b83\u4ecd\u7136\u5b58\u5728\u4e8e\u673a\u5668\u4e0a\uff0c\u901a\u8fc7 docker ps -a \u4ecd\u7136\u53ef\u4ee5\u67e5\u770b\u5230\u5176\u8bb0\u5f55\uff0c\u5e76\u4e14\u53ef\u968f\u65f6\u901a\u8fc7 docker start \u5c06\u5176\u4ece Exited \u7684\u72b6\u6001\u66f4\u6362\u4e3a Running\u3002 \u90a3\u5982\u4f55\u53ef\u4ee5\u5220\u9664\u6389\u4e00\u4e2a\u4e0d\u9700\u8981\u7684\u5df2\u7ecf\u505c\u6b62\u7684\u5bb9\u5668\u5462\uff1f \u4f7f\u7528 docker rm \u5373\u53ef\u3002 \u4ecd\u7136\u4ee5\u4e00\u4e2a\u5b9e\u9645\u4f8b\u5b50\u5165\u624b\uff1a ( MoeLove ) \u279c ~ docker run -d redis 516b4ac5d642e9766e40f5b41e4b8bbf3ebfcfcc8bd134dfea94a533678e8800 # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 516b4ac5d642 redis \"docker-entrypoint.s\u2026\" 5 seconds ago Up 4 seconds 6379 /tcp silly_merkle \u5148\u505c\u6b62\u8be5\u5bb9\u5668\uff0c\u7136\u540e\u5bf9\u5b83\u505a\u5220\u9664\u64cd\u4f5c\uff1a # \u505c\u6b62\u8be5\u5bb9\u5668 ( MoeLove ) \u279c ~ docker stop $( docker ps -ql ) do516b4ac5d642 # \u67e5\u8be2\u72b6\u6001\u5df2\u7ecf\u4e3a Exited ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 516b4ac5d642 redis \"docker-entrypoint.s\u2026\" 2 minutes ago Exited ( 0 ) 5 seconds ago silly_merkle # \u5220\u9664\u5bb9\u5668 ( MoeLove ) \u279c ~ docker rm 516b4ac5d642 516b4ac5d642 # \u9a8c\u8bc1\u67e5\u8be2\u65e0\u7ed3\u679c ( MoeLove ) \u279c ~ docker ps -a | grep 516b4ac5d642 ( MoeLove ) \u279c ~ \u662f\u5426\u8fd8\u6709\u5176\u4ed6\u65b9\u5f0f\u5462\uff1f \u6709\uff0c\u53ef\u4ee5\u5728 docker run \u6216\u8005 docker create \u65f6\uff0c\u4f20\u9012 --rm \u7684\u9009\u9879\uff0c\u4ee5\u4fbf\u5728\u5bb9\u5668\u9000\u51fa\u65f6\u53ef\u81ea\u52a8\u5220\u9664\u3002 ( MoeLove ) \u279c ~ docker create --rm redis 998381d619b2e105043b169a2abb635d3ad8594c68fff52cbf5decb38496d80b ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 998381d619b2 redis \"docker-entrypoint.s\u2026\" 4 seconds ago Created awesome_black ( MoeLove ) \u279c ~ docker start $( docker ps -ql ) 998381d619b2 ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 998381d619b2 redis \"docker-entrypoint.s\u2026\" 21 seconds ago Up 1 second 6379 /tcp awesome_black ( MoeLove ) \u279c ~ docker stop $( docker ps -ql ) 998381d619b2 ( MoeLove ) \u279c ~ docker ps -a | grep 998381d619b2 \u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u66f4\u65b9\u4fbf\u7684\u65b9\u5f0f\u5417\uff1f \u6709\uff0c\u53ef\u4ee5\u7528 docker container prune \u76f4\u63a5\u6279\u91cf\u5220\u9664\u5168\u90e8\u5df2\u7ecf\u505c\u6b62\u7684\u5bb9\u5668\u3002 ( MoeLove ) \u279c ~ docker container prune WARNING! This will remove all stopped containers. Are you sure you want to continue ? [ y/N ] y \u5f53\u8f93\u5165 docker container prune \u540e\uff0c\u4f1a\u6709\u4e2a\u63d0\u793a\uff0c\u8f93\u5165 y \u786e\u8ba4\uff0c\u5219\u5f00\u59cb\u5220\u9664\u5168\u90e8\u5df2\u505c\u6b62\u7684\u5bb9\u5668\u3002 \u6e90\u7801\u4e2d\u7684\u5bb9\u5668\u72b6\u6001 \u524d\u9762\u7684\u5185\u5bb9\u90fd\u662f\u901a\u8fc7\u5b9e\u8df5\uff0c\u8ba9\u4f60\u4f53\u9a8c\u5230\u4e86\u5982\u4f55\u7ba1\u7406\u5bb9\u5668\u7684\u751f\u547d\u5468\u671f\uff0c\u73b0\u5728\u6211\u4eec\u6df1\u5165\u6e90\u7801\u6765\u770b\u770b\u5728\u6e90\u7801\u4e2d\u5bb9\u5668\u7684\u72b6\u6001\u3002 \u5173\u4e8e\u5bb9\u5668\u72b6\u6001\u76f8\u5173\u7684\u4ee3\u7801\u90fd\u5728 container/state.go func ( s * State ) StateString () string { if s . Running { if s . Paused { return \"paused\" } if s . Restarting { return \"restarting\" } return \"running\" } if s . RemovalInProgress { return \"removing\" } if s . Dead { return \"dead\" } if s . StartedAt . IsZero () { return \"created\" } return \"exited\" } \u53ef\u4ee5\u770b\u5230\u5176\u4e2d\u7684 Created\u3001Running\u3001Paused\u3001Exited \u7b49\u72b6\u6001\uff0c\u5728\u524d\u9762\u7684\u5b9e\u9a8c\u4e2d\u90fd\u5df2\u7ecf\u63a5\u89e6\u8fc7\u4e86\uff0c\u6ca1\u6709\u6d89\u53ca\u5230\u7684\u72b6\u6001\u5305\u62ec Dead\u3001 Removing \u548c Restarting\uff0c\u5176\u5b9e Removing \u6211\u4eec\u4e5f\u7b97\u63a5\u89e6\u8fc7\u4e86\uff0c\u524d\u9762\u7684 docker rm \u6267\u884c\u8fc7\u7a0b\u4e2d\u4fbf\u4f1a\u5c06\u5bb9\u5668\u72b6\u6001\u8bbe\u7f6e\u4e3a Removing\uff0c\u53ea\u4e0d\u8fc7\u8fc7\u7a0b\u6bd4\u8f83\u5feb\uff0c\u6240\u4ee5\u4e0d\u5bb9\u6613\u6355\u83b7\u5230\u3002 \u81f3\u4e8e Restarting \u72b6\u6001\uff0c\u662f\u5728 docker run \u6216\u8005 docker create \u53ef\u901a\u8fc7\u4f20\u9012 --restart \u53c2\u6570\u6765\u8bbe\u7f6e\u91cd\u542f\u7b56\u7565\uff0c\u5728\u5bb9\u5668\u6267\u884c\u5f02\u5e38\uff0c\u6216\u662f Docker \u540e\u53f0\u8fdb\u7a0b\u91cd\u542f\u4e4b\u7c7b\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u6309\u7167\u91cd\u542f\u7b56\u7565\u8fdb\u884c\u91cd\u542f\u3002 \u6700\u540e\u5c31\u662f Dead \u72b6\u6001\u4e86\uff0c\u8fd9\u4e2a\u72b6\u6001\u591a\u6570\u65f6\u5019\u662f\u4e2a\u4e2d\u95f4\u72b6\u6001\uff0c\u6bd4\u5982\u8981\u5220\u9664\u5bb9\u5668\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u5176\u72b6\u6001\u8bbe\u7f6e\u4e3a Dead\uff0c\u4f46\u662f**\u5f53\u5220\u9664\u8fc7\u7a0b\u5931\u8d25\uff0c\u5219\u5bb9\u5668\u4f1a\u4fdd\u6301 Dead \u72b6\u6001\u4e86**\u3002 \u603b\u7ed3 \u00b6 \u672c\u7bc7\u4ecb\u7ecd\u4e86\u5bb9\u5668\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u4ee5\u53ca\u901a\u8fc7\u6e90\u7801\u5c55\u793a\u4e86\u5bb9\u5668\u51e0\u79cd\u72b6\u6001\u7684\u5173\u7cfb\uff1aPaused \u548c Restarting \u65f6\uff0c\u5bb9\u5668\u7684\u5b9e\u9645\u8868\u73b0\u5176\u5b9e\u662f\u5728 Running \u7684\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u5bb9\u5668\u5404\u79cd\u72b6\u6001\u95f4\u7684\u5207\u6362\u5173\u7cfb\uff0c\u5e0c\u671b\u80fd\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u3002","title":"\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\uff08\u4e0b\uff09"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8B%EF%BC%89/#_1","text":"\u4e0a\u4e00\u7bc7\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u5bb9\u5668\u7684\u521b\u5efa\uff0c\u6682\u505c\u4ee5\u53ca\u505c\u6b62\u7b49\u64cd\u4f5c\uff0c\u5e76\u4e14\u4e00\u822c\u60c5\u51b5\u4e0b\u5373\u4f7f\u5bb9\u5668\u88ab stop \u6389\u5b83\u4ecd\u7136\u5b58\u5728\u4e8e\u673a\u5668\u4e0a\uff0c\u901a\u8fc7 docker ps -a \u4ecd\u7136\u53ef\u4ee5\u67e5\u770b\u5230\u5176\u8bb0\u5f55\uff0c\u5e76\u4e14\u53ef\u968f\u65f6\u901a\u8fc7 docker start \u5c06\u5176\u4ece Exited \u7684\u72b6\u6001\u66f4\u6362\u4e3a Running\u3002 \u90a3\u5982\u4f55\u53ef\u4ee5\u5220\u9664\u6389\u4e00\u4e2a\u4e0d\u9700\u8981\u7684\u5df2\u7ecf\u505c\u6b62\u7684\u5bb9\u5668\u5462\uff1f \u4f7f\u7528 docker rm \u5373\u53ef\u3002 \u4ecd\u7136\u4ee5\u4e00\u4e2a\u5b9e\u9645\u4f8b\u5b50\u5165\u624b\uff1a ( MoeLove ) \u279c ~ docker run -d redis 516b4ac5d642e9766e40f5b41e4b8bbf3ebfcfcc8bd134dfea94a533678e8800 # \u67e5\u8be2\u5bb9\u5668\u72b6\u6001 ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 516b4ac5d642 redis \"docker-entrypoint.s\u2026\" 5 seconds ago Up 4 seconds 6379 /tcp silly_merkle \u5148\u505c\u6b62\u8be5\u5bb9\u5668\uff0c\u7136\u540e\u5bf9\u5b83\u505a\u5220\u9664\u64cd\u4f5c\uff1a # \u505c\u6b62\u8be5\u5bb9\u5668 ( MoeLove ) \u279c ~ docker stop $( docker ps -ql ) do516b4ac5d642 # \u67e5\u8be2\u72b6\u6001\u5df2\u7ecf\u4e3a Exited ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 516b4ac5d642 redis \"docker-entrypoint.s\u2026\" 2 minutes ago Exited ( 0 ) 5 seconds ago silly_merkle # \u5220\u9664\u5bb9\u5668 ( MoeLove ) \u279c ~ docker rm 516b4ac5d642 516b4ac5d642 # \u9a8c\u8bc1\u67e5\u8be2\u65e0\u7ed3\u679c ( MoeLove ) \u279c ~ docker ps -a | grep 516b4ac5d642 ( MoeLove ) \u279c ~ \u662f\u5426\u8fd8\u6709\u5176\u4ed6\u65b9\u5f0f\u5462\uff1f \u6709\uff0c\u53ef\u4ee5\u5728 docker run \u6216\u8005 docker create \u65f6\uff0c\u4f20\u9012 --rm \u7684\u9009\u9879\uff0c\u4ee5\u4fbf\u5728\u5bb9\u5668\u9000\u51fa\u65f6\u53ef\u81ea\u52a8\u5220\u9664\u3002 ( MoeLove ) \u279c ~ docker create --rm redis 998381d619b2e105043b169a2abb635d3ad8594c68fff52cbf5decb38496d80b ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 998381d619b2 redis \"docker-entrypoint.s\u2026\" 4 seconds ago Created awesome_black ( MoeLove ) \u279c ~ docker start $( docker ps -ql ) 998381d619b2 ( MoeLove ) \u279c ~ docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 998381d619b2 redis \"docker-entrypoint.s\u2026\" 21 seconds ago Up 1 second 6379 /tcp awesome_black ( MoeLove ) \u279c ~ docker stop $( docker ps -ql ) 998381d619b2 ( MoeLove ) \u279c ~ docker ps -a | grep 998381d619b2 \u9664\u6b64\u4e4b\u5916\u8fd8\u6709\u66f4\u65b9\u4fbf\u7684\u65b9\u5f0f\u5417\uff1f \u6709\uff0c\u53ef\u4ee5\u7528 docker container prune \u76f4\u63a5\u6279\u91cf\u5220\u9664\u5168\u90e8\u5df2\u7ecf\u505c\u6b62\u7684\u5bb9\u5668\u3002 ( MoeLove ) \u279c ~ docker container prune WARNING! This will remove all stopped containers. Are you sure you want to continue ? [ y/N ] y \u5f53\u8f93\u5165 docker container prune \u540e\uff0c\u4f1a\u6709\u4e2a\u63d0\u793a\uff0c\u8f93\u5165 y \u786e\u8ba4\uff0c\u5219\u5f00\u59cb\u5220\u9664\u5168\u90e8\u5df2\u505c\u6b62\u7684\u5bb9\u5668\u3002 \u6e90\u7801\u4e2d\u7684\u5bb9\u5668\u72b6\u6001 \u524d\u9762\u7684\u5185\u5bb9\u90fd\u662f\u901a\u8fc7\u5b9e\u8df5\uff0c\u8ba9\u4f60\u4f53\u9a8c\u5230\u4e86\u5982\u4f55\u7ba1\u7406\u5bb9\u5668\u7684\u751f\u547d\u5468\u671f\uff0c\u73b0\u5728\u6211\u4eec\u6df1\u5165\u6e90\u7801\u6765\u770b\u770b\u5728\u6e90\u7801\u4e2d\u5bb9\u5668\u7684\u72b6\u6001\u3002 \u5173\u4e8e\u5bb9\u5668\u72b6\u6001\u76f8\u5173\u7684\u4ee3\u7801\u90fd\u5728 container/state.go func ( s * State ) StateString () string { if s . Running { if s . Paused { return \"paused\" } if s . Restarting { return \"restarting\" } return \"running\" } if s . RemovalInProgress { return \"removing\" } if s . Dead { return \"dead\" } if s . StartedAt . IsZero () { return \"created\" } return \"exited\" } \u53ef\u4ee5\u770b\u5230\u5176\u4e2d\u7684 Created\u3001Running\u3001Paused\u3001Exited \u7b49\u72b6\u6001\uff0c\u5728\u524d\u9762\u7684\u5b9e\u9a8c\u4e2d\u90fd\u5df2\u7ecf\u63a5\u89e6\u8fc7\u4e86\uff0c\u6ca1\u6709\u6d89\u53ca\u5230\u7684\u72b6\u6001\u5305\u62ec Dead\u3001 Removing \u548c Restarting\uff0c\u5176\u5b9e Removing \u6211\u4eec\u4e5f\u7b97\u63a5\u89e6\u8fc7\u4e86\uff0c\u524d\u9762\u7684 docker rm \u6267\u884c\u8fc7\u7a0b\u4e2d\u4fbf\u4f1a\u5c06\u5bb9\u5668\u72b6\u6001\u8bbe\u7f6e\u4e3a Removing\uff0c\u53ea\u4e0d\u8fc7\u8fc7\u7a0b\u6bd4\u8f83\u5feb\uff0c\u6240\u4ee5\u4e0d\u5bb9\u6613\u6355\u83b7\u5230\u3002 \u81f3\u4e8e Restarting \u72b6\u6001\uff0c\u662f\u5728 docker run \u6216\u8005 docker create \u53ef\u901a\u8fc7\u4f20\u9012 --restart \u53c2\u6570\u6765\u8bbe\u7f6e\u91cd\u542f\u7b56\u7565\uff0c\u5728\u5bb9\u5668\u6267\u884c\u5f02\u5e38\uff0c\u6216\u662f Docker \u540e\u53f0\u8fdb\u7a0b\u91cd\u542f\u4e4b\u7c7b\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u6309\u7167\u91cd\u542f\u7b56\u7565\u8fdb\u884c\u91cd\u542f\u3002 \u6700\u540e\u5c31\u662f Dead \u72b6\u6001\u4e86\uff0c\u8fd9\u4e2a\u72b6\u6001\u591a\u6570\u65f6\u5019\u662f\u4e2a\u4e2d\u95f4\u72b6\u6001\uff0c\u6bd4\u5982\u8981\u5220\u9664\u5bb9\u5668\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u5176\u72b6\u6001\u8bbe\u7f6e\u4e3a Dead\uff0c\u4f46\u662f**\u5f53\u5220\u9664\u8fc7\u7a0b\u5931\u8d25\uff0c\u5219\u5bb9\u5668\u4f1a\u4fdd\u6301 Dead \u72b6\u6001\u4e86**\u3002","title":"\u5220\u9664\u5bb9\u5668"},{"location":"docker/%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%8B%EF%BC%89/#_2","text":"\u672c\u7bc7\u4ecb\u7ecd\u4e86\u5bb9\u5668\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u4ee5\u53ca\u901a\u8fc7\u6e90\u7801\u5c55\u793a\u4e86\u5bb9\u5668\u51e0\u79cd\u72b6\u6001\u7684\u5173\u7cfb\uff1aPaused \u548c Restarting \u65f6\uff0c\u5bb9\u5668\u7684\u5b9e\u9645\u8868\u73b0\u5176\u5b9e\u662f\u5728 Running \u7684\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u5bb9\u5668\u5404\u79cd\u72b6\u6001\u95f4\u7684\u5207\u6362\u5173\u7cfb\uff0c\u5e0c\u671b\u80fd\u5bf9\u4f60\u6709\u6240\u5e2e\u52a9\u3002","title":"\u603b\u7ed3"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/","text":"\u8fd9\u662f\u672c\u4e13\u680f\u7684\u7b2c\u4e8c\u90e8\u5206\uff1a\u5bb9\u5668\u7bc7\uff0c\u5171 6 \u7bc7\uff0c\u5e2e\u52a9\u5927\u5bb6\u7531\u6d45\u5165\u6df1\u7684\u8ba4\u8bc6\u548c\u638c\u63e1\u5bb9\u5668\u3002\u524d\u4e24\u7bc7\uff0c\u6211\u4e3a\u4f60\u4ecb\u7ecd\u4e86\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u5e26\u4f60\u638c\u63e1\u5bb9\u5668\u751f\u547d\u5468\u671f\u3002\u672c\u7bc7\u6211\u5c06\u4e3a\u4f60\u4ecb\u7ecd\u5bb9\u5668\u8d44\u6e90\u7ba1\u7406\u76f8\u5173\u7684\u5185\u5bb9\u3002 \u524d\u4e24\u7bc7\u6211\u5df2\u7ecf\u4e3a\u4f60\u4ecb\u7ecd\u4e86\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u672c\u7bc7\u7684\u4e3b\u9898\u662f\u5bb9\u5668\u8d44\u6e90\u7ba1\u7406\u3002\u6211\u4eec\u5e26\u7740\u4ee5\u4e0b\u4e09\u4e2a\u95ee\u9898\u5f00\u59cb\u672c\u7bc7\u7684\u5185\u5bb9\uff1a \u54ea\u4e9b\u5206\u914d\u7ed9\u5bb9\u5668\u7684\u8d44\u6e90\u53ef\u88ab\u6211\u4eec\u7ba1\u7406 \u5bb9\u5668\u5b9e\u9645\u4f7f\u7528\u4e86\u591a\u5c11\u8d44\u6e90 \u5982\u4f55\u5bf9\u5bb9\u5668\u4f7f\u7528\u7684\u8d44\u6e90\u8fdb\u884c\u7ba1\u7406 \u8d44\u6e90\u7c7b\u578b \u00b6 \u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u7684\u65f6\u5019\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7cfb\u7edf\u8d44\u6e90\uff0c\u8fd9\u4e0e\u6211\u4eec\u5728\u7269\u7406\u673a\u4e0a\u542f\u52a8\u7a0b\u5e8f\u57fa\u672c\u662f\u4e00\u81f4\u7684\u3002\u6bd4\u5982\u4e3b\u8981\u7684\u51e0\u7c7b\uff1a CPU \u5185\u5b58 \u7f51\u7edc I/O GPU \u8fd9\u4e9b\u7cfb\u7edf\u8d44\u6e90\u662f\u5728\u6211\u4eec\u542f\u52a8\u5bb9\u5668\u65f6\uff0c\u9700\u8981\u8003\u8651\u548c\u53ef\u88ab\u6211\u4eec\u7ba1\u7406\u7684\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c docker run --help \u67e5\u770b docker run \u547d\u4ee4\u6240\u652f\u6301\u7684\u5168\u90e8\u53c2\u6570\u3002\u73b0\u5728 docker run \u547d\u4ee4\u6240\u652f\u6301\u7684\u53c2\u6570\u5df2\u8d85\u8fc7 90 \u9879\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u51fa\u4e86\u3002 \u67e5\u770b\u5bb9\u5668\u5360\u7528\u8d44\u6e90 \u00b6 docker stats \u00b6 Docker \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u65b9\u4fbf\u7684\u547d\u4ee4 docker stats \uff0c\u53ef\u4f9b\u6211\u4eec\u67e5\u770b\u548c\u7edf\u8ba1\u5bb9\u5668\u6240\u5360\u7528\u7684\u8d44\u6e90\u60c5\u51b5\u3002 \u6211\u4eec\u4ecd\u7136\u542f\u52a8\u4e00\u4e2a Redis \u5bb9\u5668\u4f5c\u4e3a\u793a\u4f8b\u3002 # \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668 ( MoeLove ) \u279c ~ docker run -d redis c98c9831ee73e9b71719b404f5ecf3b408de0b69aec0f781e42d815575d28ada # \u67e5\u770b\u5176\u6240\u5360\u7528\u8d44\u6e90\u7684\u60c5\u51b5 ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS c98c9831ee73 amazing_torvalds 0 .08% 2 .613MiB / 15 .56GiB 0 .02% 3 .66kB / 0B 0B / 0B 4 \u8fd9\u91cc\u4f20\u9012\u4e86\u4e00\u4e2a --no-stream \u7684\u53c2\u6570\uff0c\u662f\u56e0\u4e3a docker stats \u547d\u4ee4\u9ed8\u8ba4\u662f\u4e00\u4e2a\u6301\u7eed\u7684\u52a8\u6001\u6d41\u5f0f\u8f93\u51fa\uff08\u6bcf\u79d2\u4e00\u6b21\uff09\uff0c\u7ed9\u5b83\u4f20\u9012 --no-stream \u53c2\u6570\u540e\uff0c\u5b83\u5c31\u53ea\u8f93\u51fa\u4e00\u6b21\u4fbf\u4f1a\u9000\u51fa\u4e86\u3002 \u63a5\u4e0b\u6765\u6211\u4e3a\u4f60\u4ecb\u7ecd\u4e0b\u5b83\u8f93\u51fa\u5185\u5bb9\u7684\u542b\u4e49\uff1a Container ID\uff1a\u5bb9\u5668\u7684 ID\uff0c\u4e5f\u662f\u4e00\u4e2a\u5bb9\u5668\u751f\u547d\u5468\u671f\u5185\u4e0d\u4f1a\u53d8\u66f4\u7684\u4fe1\u606f\u3002 Name\uff1a\u5bb9\u5668\u7684\u540d\u79f0\uff0c\u5982\u679c\u6ca1\u6709\u624b\u52a8\u4f7f\u7528 --name \u53c2\u6570\u6307\u5b9a\uff0c\u5219 Docker \u4f1a\u968f\u673a\u751f\u6210\u4e00\u4e2a\uff0c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u4fee\u6539\u3002 CPU %\uff1a\u5bb9\u5668\u6b63\u5728\u4f7f\u7528\u7684 CPU \u8d44\u6e90\u7684\u767e\u5206\u6bd4\uff0c\u8fd9\u91cc\u9762\u6d89\u53ca\u4e86\u6bd4\u8f83\u591a\u7ec6\u8282\uff0c\u4e0b\u9762\u4f1a\u8be6\u7ec6\u8bf4\u3002 Mem Usage/Limit\uff1a\u5f53\u524d\u5185\u5b58\u7684\u4f7f\u7528\u53ca\u5bb9\u5668\u53ef\u7528\u7684\u6700\u5927\u5185\u5b58\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86\u4e00\u53f0 16G \u7684\u7535\u8111\u8fdb\u884c\u6d4b\u8bd5\u3002 Mem %\uff1a\u5bb9\u5668\u6b63\u5728\u4f7f\u7528\u7684\u5185\u5b58\u8d44\u6e90\u7684\u767e\u5206\u6bd4\u3002 Net I/O\uff1a\u5bb9\u5668\u901a\u8fc7\u5176\u7f51\u7edc\u63a5\u53e3\u53d1\u9001\u548c\u63a5\u53d7\u5230\u7684\u6570\u636e\u91cf\u3002 Block I/O\uff1a\u5bb9\u5668\u901a\u8fc7\u5757\u8bbe\u5907\u8bfb\u53d6\u548c\u5199\u5165\u7684\u6570\u636e\u91cf\u3002 Pids\uff1a\u5bb9\u5668\u521b\u5efa\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u6570\u3002 docker top \u00b6 \u9664\u4e86\u4e0a\u9762\u63d0\u5230\u7684 docker stats \u547d\u4ee4\u5916\uff0cDocker \u4e5f\u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u547d\u4ee4 docker top \uff0c\u4e0e\u6211\u4eec\u5e73\u65f6\u7528\u7684 ps \u547d\u4ee4\u57fa\u672c\u4e00\u81f4, \u4e5f\u652f\u6301 ps \u547d\u4ee4\u7684\u53c2\u6570\u3002 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) UID PID PPID C STIME TTY TIME CMD systemd+ 6275 6248 0 16 :50 ? 00 :00:24 redis-server *:6379 # \u53ef\u4ee5\u4f7f\u7528 ps \u547d\u4ee4\u7684\u53c2\u6570 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,stat,cmd PID STAT CMD 6275 Ssl redis-server *:6379 \u7ba1\u7406\u5bb9\u5668\u7684 CPU \u8d44\u6e90 \u00b6 \u5728\u6211\u4eec\u4f7f\u7528\u5bb9\u5668\u7684\u65f6\u5019\uff0cCPU \u548c\u5185\u5b58\u662f\u6211\u4eec\u5c24\u4e3a\u5173\u6ce8\u7684\u8d44\u6e90\u3002\u4e0d\u8fc7\uff0c\u5bf9\u4e8e CPU \u8d44\u6e90\u7684\u7ba1\u7406\uff0c\u6d89\u53ca\u7684\u5185\u5bb9\u4f1a\u6bd4\u8f83\u504f\u5e95\u5c42\u4e00\u4e9b\uff0c\u6709\u4e9b\u6d89\u53ca\u5230\u4e86\u5185\u6838\u7684 CPU \u8c03\u5ea6\u5668\uff0c\u6bd4\u5982 CFS\uff08Completely Fair Scheduler\uff09\u7b49\u3002 \u6211\u4eec\u53ef\u4ee5\u5148\u6765\u67e5\u770b\u4e0b Docker \u63d0\u4f9b\u4e86\u54ea\u4e9b\u63a7\u5236 CPU \u8d44\u6e90\u76f8\u5173\u7684\u53c2\u6570\u3002 \u4f7f\u7528 docker run --help |grep CPU \u5373\u53ef\u67e5\u770b\u3002 ( MoeLove ) \u279c ~ docker run --help | grep CPU --cpu-period int Limit CPU CFS ( Completely Fair Scheduler ) period --cpu-quota int Limit CPU CFS ( Completely Fair Scheduler ) quota --cpu-rt-period int Limit CPU real-time period in microseconds --cpu-rt-runtime int Limit CPU real-time runtime in microseconds -c, --cpu-shares int CPU shares ( relative weight ) --cpus decimal Number of CPUs --cpuset-cpus string CPUs in which to allow execution ( 0 -3, 0 ,1 ) \u8fd9\u91cc\u6682\u65f6\u5148\u4e0d\u5bf9\u53c2\u6570\u7684\u5177\u4f53\u542b\u4e49\u8fdb\u884c\u6df1\u5165\u5c55\u5f00\uff0c\u6211\u4eec\u76f4\u63a5\u4ee5\u51e0\u4e2a\u793a\u4f8b\u6765\u5206\u522b\u8fdb\u884c\u8bf4\u660e\uff0c\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u3002 \u9ed8\u8ba4\u65e0\u9650\u5236 \u00b6 Tip \u5907\u6ce8\uff1a\u6211\u8fd9\u91cc\u4ee5\u4e00\u4e2a 4 \u6838 CPU \u7684\u7535\u8111\u8fdb\u884c\u6f14\u793a\u3002 \u73b0\u5728\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u6211\u4eec\u4ee5\u4f53\u79ef\u5f88\u5c0f\u7684 Alpine Linux \u4e3a\u4f8b\u597d\u4e86\u3002 ( MoeLove ) \u279c ~ docker run --rm -it alpine / # \u5728\u53e6\u4e00\u4e2a\u7a97\u53e3\uff0c\u6267\u884c\u4e0a\u9762\u4ecb\u7ecd\u7684\u67e5\u770b\u5bb9\u5668\u8d44\u6e90\u7684\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS 106a24399bc9 friendly_varahamihira 0 .00% 1 .047MiB / 15 .56GiB 0 .01% 5 .01kB / 0B 1 .67MB / 0B 1 \u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u524d\u5bb9\u5668\u5185\u6ca1\u6709\u8fc7\u591a\u7684 CPU \u6d88\u8017\uff0c\u4e14 PIDS \u4e3a 1\uff0c\u8868\u793a\u5f53\u524d\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u73b0\u5728\u6211\u4eec\u56de\u5230\u521a\u624d\u542f\u52a8\u7684\u5bb9\u5668\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a sha256sum \u662f\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97\u548c\u68c0\u67e5 SHA256 \u4fe1\u606f\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff1b /dev/zero \u662f Linux \u7cfb\u7edf\u4e0a\u4e00\u4e2a\u7279\u6b8a\u7684\u8bbe\u5907\uff0c\u5728\u8bfb\u5b83\u65f6\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u65e0\u9650\u7684\u7a7a\u5b57\u7b26\u4e32\uff08NULL \u6216\u8005 0x00 \u4e4b\u7c7b\u7684\uff09\u3002 \u6240\u4ee5\u4e0a\u9762\u7684\u547d\u4ee4\uff0c\u4f1a\u8ba9 sha256sum \u6301\u7eed\u5730\u8bfb /dev/zero \u4ea7\u751f\u7684\u7a7a\u4e32\uff0c\u5e76\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u5c06\u8fc5\u901f\u5730\u6d88\u8017 CPU \u8d44\u6e90\u3002 \u6211\u4eec\u6765\u770b\u770b\u6b64\u65f6\u5bb9\u5668\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS 106a24399bc9 friendly_varahamihira 100 .59% 1 .5MiB / 15 .56GiB 0 .01% 14 .4kB / 0B 1 .99MB / 0B 2 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 965 99 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\u5f53\u524d\u7684 CPU \u4f7f\u7528\u7387\u5df2\u7ecf\u5728 100% \u5de6\u53f3\u4e86\u3002 \u6211\u4eec\u518d\u65b0\u6253\u5f00\u4e00\u4e2a\u7a97\u53e3\uff0c\u8fdb\u5165\u5bb9\u5668\u5185\uff0c\u6267\u884c\u76f8\u540c\u7684\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ docker exec -it $( docker ps -ql ) sh / # sha256sum /dev/zero \u67e5\u770b\u5bb9\u5668\u4f7f\u7528\u8d44\u6e90\u7684\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 200 .79% 1 .793MiB / 15 .56GiB 0 .01% 4 .58kB / 0B 0B / 0B 4 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 965 99 sha256sum /dev/zero 1236 0 sh 1297 99 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\u73b0\u5728\u4e24\u4e2a\u8fdb\u7a0b\uff0c\u5df2\u7ecf\u8ba9\u4e24\u4e2a CPU \u6ee1\u8d1f\u8f7d\u8fd0\u884c\u4e86\u3002\u8fd9\u91cc\u9700\u8981\u989d\u5916\u8bf4\u660e\u7684\u662f\uff0c\u9009\u62e9 sha256sum \u4f5c\u4e3a\u793a\u4f8b\uff0c\u662f\u56e0\u4e3a\u5b83\u662f\u5355\u7ebf\u7a0b\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u542f\u52a8\u4e00\u4e2a sha256sum \u5e76\u4e0d\u4f1a\u6d88\u8017\u5176\u4ed6 CPU \u6838\u7684\u8d44\u6e90\u3002 \u7531\u6b64\u53ef\u4ee5\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u5982\u679c\u4e0d\u5bf9\u5bb9\u5668\u5185\u7a0b\u5e8f\u8fdb\u884c CPU \u8d44\u6e90\u9650\u5236\uff0c\u5176\u53ef\u80fd\u4f1a\u6d88\u8017\u6389\u5927\u91cf CPU \u8d44\u6e90\uff0c\u8fdb\u800c\u5f71\u54cd\u5176\u4ed6\u7a0b\u5e8f\u6216\u8005\u5f71\u54cd\u7cfb\u7edf\u7684\u7a33\u5b9a\u3002 \u5206\u914d 0.5 CPU \u00b6 \u90a3\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e2a\u5bb9\u5668\u8fdb\u884c CPU \u8d44\u6e90\u7684\u9650\u5236\uff0c\u6bd4\u5982\u9650\u5236\u5b83\u53ea\u53ef\u4ee5\u4f7f\u7528 0.5 CPU\u3002 \u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728 docker run \u65f6\uff0c\u4e3a\u5b83\u6dfb\u52a0\u8d44\u6e90\u9650\u5236\u3002 \u4f46\u6211\u6765\u7ed9\u4f60\u4ecb\u7ecd\u4e00\u79cd**\u52a8\u6001**\u66f4\u6539\u8d44\u6e90\u9650\u5236\u7684\u529e\u6cd5\uff0c\u4f7f\u7528 docker update \u547d\u4ee4\u3002\u4f8b\u5982\uff0c\u5728\u6b64\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u9650\u5236\u8be5\u5bb9\u5668\u53ea\u80fd\u4f7f\u7528 0.5 CPU\u3002 ( MoeLove ) \u279c ~ docker update --cpus \"0.5\" $( docker ps -ql ) f359d4ff6fc6 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u76f4\u63a5\u5173\u95ed\u521a\u624d\u7684 sha256sum \u8fdb\u7a0b\uff0c\u6309 Ctrl+c \u7ec8\u6b62\u8fdb\u7a0b\u3002\u7136\u540e\u91cd\u65b0\u8fd0\u884c\u8be5\u547d\u4ee4\uff1a # \u7ec8\u6b62\u8fdb\u7a0b / # sha256sum /dev/zero ^C # \u542f\u52a8\u7a0b\u5e8f / # sha256sum /dev/zero \u67e5\u770b\u8d44\u6e90\u5360\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 49 .87% 1 .777MiB / 15 .56GiB 0 .01% 112kB / 0B 1 .59MB / 0B 3 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 1236 0 sh 7662 49 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u8fdb\u7a0b\u4f7f\u7528\u4e86 50% \u5de6\u53f3\u7684 CPU\u3002\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u542f\u52a8\u53e6\u4e00\u4e2a sha256sum \u7684\u8fdb\u7a0b\uff1a / # sha256sum /dev/zero \u67e5\u770b\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 50 .92% 1 .891MiB / 15 .56GiB 0 .01% 113kB / 0B 1 .59MB / 0B 4 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 1236 0 sh 10106 25 sha256sum /dev/zero 11999 25 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u5bb9\u5668\u6574\u4f53\u5360\u7528\u4e86 50% \u7684 CPU\uff0c\u800c\u5176\u4e2d\u7684\u4e24\u4e2a sha256sum \u8fdb\u7a0b\u5219\u5404\u5360\u4e86 25%\u3002 \u6211\u4eec\u5df2\u7ecf\u6210\u529f\u7684\u6309\u9884\u671f\u4e3a\u5b83\u5206\u914d\u4e86 0.5 CPU\u3002 \u5206\u914d 1.5 CPU \u00b6 \u63a5\u4e0b\u6765\uff0c\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u4f46\u662f\u4e3a\u5b83\u5206\u914d 1.5 CPU\uff0c\u6765\u770b\u770b\u5b83\u7684\u5b9e\u9645\u60c5\u51b5\u5982\u4f55\u3002 # \u66f4\u65b0\u914d\u7f6e\uff0c\u4f7f\u7528 1.5 CPU ( MoeLove ) \u279c ~ docker update --cpus \"1.5\" $( docker ps -ql ) f359d4ff6fc6 \u5206\u522b\u4f7f\u7528\u4e4b\u524d\u7684\u4e24\u4e2a\u7a97\u53e3\uff0c\u6267\u884c sha256sum /dev/zero \u8fdb\u884c\u6d4b\u8bd5\uff1a / # sha256sum /dev/zero \u67e5\u770b\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 151 .23% 2MiB / 15 .56GiB 0 .01% 122kB / 0B 1 .59MB / 0B 4 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 1236 0 sh 25167 77 sha256sum /dev/zero 25211 74 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\uff0c\u7ed3\u679c\u4e0e\u6211\u4eec\u7684\u9884\u671f\u57fa\u672c\u76f8\u7b26\uff0c150% \u5de6\u53f3\u7684 CPU\uff0c\u800c\u4e24\u4e2a\u6d4b\u8bd5\u8fdb\u7a0b\uff0c\u4e5f\u5dee\u4e0d\u591a\u662f\u5e73\u5206\u4e86 CPU \u8d44\u6e90\u3002 \u6307\u5b9a\u53ef\u4f7f\u7528 CPU \u6838 \u00b6 \u53ef\u4ee5\u4f7f\u7528 --cpuset-cpus \u6765\u6307\u5b9a\u5206\u914d\u53ef\u4f7f\u7528\u7684 CPU \u6838\uff0c\u8fd9\u91cc\u6211\u6307\u5b9a\u4e3a 0\uff0c\u8868\u793a\u4f7f\u7528\u7b2c\u4e00\u4e2a CPU \u6838\u3002 ( MoeLove ) \u279c ~ docker update --cpus \"1.5\" --cpuset-cpus 0 $( docker ps -ql ) f359d4ff6fc6 \u5206\u522b\u4f7f\u7528\u4e4b\u524d\u7684\u4e24\u4e2a\u7a97\u53e3\uff0c\u6267\u884c sha256sum /dev/zero \u8fdb\u884c\u6d4b\u8bd5\uff1a / # sha256sum /dev/zero \u67e5\u770b\u8d44\u6e90\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 99 .18% 1 .988MiB / 15 .56GiB 0 .01% 221kB / 0B 1 .59MB / 0B 4 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 1236 0 sh 25119 50 sha256sum /dev/zero 25164 48 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\uff0c\u867d\u7136\u6211\u4eec\u4ecd\u7136\u4f7f\u7528 --cpus \u6307\u5b9a\u4e86 1.5 CPU\uff0c\u4f46\u7531\u4e8e\u4f7f\u7528 --cpuset-cpus \u9650\u5236\u53ea\u5141\u8bb8\u5b83\u8dd1\u5728\u7b2c\u4e00\u4e2a CPU \u4e0a\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u6d4b\u8bd5\u8fdb\u7a0b\u4e5f\u5c31\u53ea\u80fd\u8bc4\u5206\u8be5 CPU \u4e86\u3002 \u5c0f\u7ed3 \u00b6 \u901a\u8fc7\u4e0a\u8ff0\u7684\u793a\u4f8b\uff0c\u6211\u4e3a\u4f60\u4ecb\u7ecd\u4e86\u5982\u4f55\u901a\u8fc7 --cpus \u53c2\u6570\u9650\u5236\u5bb9\u5668\u53ef\u4f7f\u7528\u7684 CPU \u8d44\u6e90\uff1b\u901a\u8fc7 --cpuset-cpus \u53c2\u6570\u53ef\u6307\u5b9a\u5bb9\u5668\u5185\u8fdb\u7a0b\u8fd0\u884c\u6240\u7528\u7684 CPU \u6838\u5fc3\uff1b\u901a\u8fc7 docker update \u53ef\u76f4\u63a5\u66f4\u65b0\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u7684\u76f8\u5173\u914d\u7f6e\u3002 \u73b0\u5728\u6211\u4eec\u56de\u5230\u524d\u9762\u4f7f\u7528 docker run --help | grep CPU \uff0c\u67e5\u770b Docker \u652f\u6301\u7684\u5bf9\u5bb9\u5668 CPU \u76f8\u5173\u53c2\u6570\u7684\u9009\u9879\uff1a ( MoeLove ) \u279c ~ docker run --help | grep CPU --cpu-period int Limit CPU CFS ( Completely Fair Scheduler ) period --cpu-quota int Limit CPU CFS ( Completely Fair Scheduler ) quota --cpu-rt-period int Limit CPU real-time period in microseconds --cpu-rt-runtime int Limit CPU real-time runtime in microseconds -c, --cpu-shares int CPU shares ( relative weight ) --cpus decimal Number of CPUs --cpuset-cpus string CPUs in which to allow execution ( 0 -3, 0 ,1 ) --cpus \u662f\u5728 Docker 1.13 \u65f6\u65b0\u589e\u7684\uff0c\u53ef\u7528\u4e8e\u66ff\u4ee3\u539f\u5148\u7684 --cpu-period \u548c --cpu-quota \u3002\u8fd9\u4e09\u4e2a\u53c2\u6570\u901a\u8fc7 cgroups \u6700\u7ec8\u4f1a\u5b9e\u9645\u5f71\u54cd Linux \u5185\u6838\u7684 CPU \u8c03\u5ea6\u5668 CFS\uff08Completely Fair Scheduler, \u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\uff09\u5bf9\u8fdb\u7a0b\u7684\u8c03\u5ea6\u7ed3\u679c\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c \u63a8\u8350\u76f4\u63a5\u4f7f\u7528 --cpus \uff0c \u800c\u65e0\u9700\u5355\u72ec\u8bbe\u7f6e --cpu-period \u548c --cpu-quota \uff0c\u9664\u975e\u4f60\u5df2\u7ecf\u5bf9 CPU \u8c03\u5ea6\u5668 CFS \u6709\u4e86\u8db3\u591f\u591a\u7684\u4e86\u89e3\uff0c\u63d0\u4f9b --cpus \u53c2\u6570\u4e5f\u662f Docker \u56e2\u961f\u4e3a\u4e86\u53ef\u4ee5\u7b80\u5316\u7528\u6237\u7684\u4f7f\u7528\u6210\u672c\u589e\u52a0\u7684\uff0c\u5b83\u8db3\u591f\u6ee1\u8db3\u6211\u4eec\u5927\u591a\u6570\u7684\u9700\u6c42\u3002 \u800c --cpu-shares \u9009\u9879\uff0c\u5b83\u867d\u7136\u6709\u4e00\u4e9b\u5b9e\u9645\u610f\u4e49\uff0c\u4f46\u5374\u4e0d\u5982 --cpus \u6765\u7684\u76f4\u89c2\uff0c\u5e76\u4e14\u5b83\u4f1a\u53d7\u5230\u5f53\u524d\u7cfb\u7edf\u4e0a\u8fd0\u884c\u72b6\u6001\u7684\u5f71\u54cd\uff0c\u4e3a\u4e86\u4e0d\u56e0\u4e3a\u5b83\u7ed9\u5927\u5bb6\u5e26\u6765\u56f0\u6270\uff0c\u6b64\u5904\u5c31\u4e0d\u518d\u8fdb\u884c\u4ecb\u7ecd\u4e86\u3002 --cpu-rt-period \u548c --cpu-rt-runtime \u4e24\u4e2a\u53c2\u6570\uff0c\u4f1a\u5f71\u54cd CPU \u7684\u5b9e\u65f6\u8c03\u5ea6\u5668\u3002\u4f46\u5b9e\u65f6\u8c03\u5ea6\u5668\u9700\u8981\u5185\u6838\u7684\u53c2\u6570\u7684\u652f\u6301\uff0c\u5e76\u4e14\u914d\u7f6e\u5b9e\u65f6\u8c03\u5ea6\u5668\u4e5f\u662f\u4e2a\u9ad8\u7ea7\u6216\u8005\u8bf4\u662f\u5371\u9669\u7684\u64cd\u4f5c\uff0c\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5404\u79cd\u5947\u602a\u7684\u95ee\u9898\uff0c\u6b64\u5904\u4e5f\u4e0d\u518d\u8fdb\u884c\u5c55\u5f00\u3002 \u7ba1\u7406\u5bb9\u5668\u7684\u5185\u5b58\u8d44\u6e90 \u00b6 \u524d\u9762\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u5982\u4f55\u7ba1\u7406\u5bb9\u5668\u7684 CPU \u8d44\u6e90\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u5982\u4f55\u7ba1\u7406\u5bb9\u5668\u7684\u5185\u5b58\u8d44\u6e90\u3002\u76f8\u6bd4 CPU \u8d44\u6e90\u6765\u8bf4\uff0c\u5185\u5b58\u8d44\u6e90\u7684\u7ba1\u7406\u5c31\u7b80\u5355\u5f88\u591a\u4e86\u3002 \u540c\u6837\u7684\uff0c\u6211\u4eec\u5148\u770b\u770b\u6709\u54ea\u4e9b\u53c2\u6570\u53ef\u4f9b\u6211\u4eec\u914d\u7f6e\uff0c\u5bf9\u4e8e\u5176\u542b\u4e49\u6211\u4f1a\u7a0d\u540e\u8fdb\u884c\u4ecb\u7ecd\uff1a ( MoeLove ) \u279c ~ docker run --help | egrep 'memory|oom' --kernel-memory bytes Kernel memory limit -m, --memory bytes Memory limit --memory-reservation bytes Memory soft limit --memory-swap bytes Swap limit equal to memory plus swap: '-1' to enable unlimited swap --memory-swappiness int Tune container memory swappiness ( 0 to 100 ) ( default -1 ) --oom-kill-disable Disable OOM Killer --oom-score-adj int Tune host ' s OOM preferences ( -1000 to 1000 ) OOM \u00b6 \u5728\u5f00\u59cb\u8fdb\u884c\u5bb9\u5668\u5185\u5b58\u7ba1\u7406\u7684\u5185\u5bb9\u524d\uff0c\u6211\u4eec\u4e0d\u59a8\u5148\u804a\u4e00\u4e2a\u5f88\u5e38\u89c1\uff0c\u53c8\u4e0d\u5f97\u4e0d\u9762\u5bf9\u7684\u95ee\u9898\uff1a OOM\uff08Out Of Memory\uff09 \u3002 \u5f53\u5185\u6838\u68c0\u6d4b\u5230\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u6765\u8fd0\u884c\u7cfb\u7edf\u7684\u67d0\u4e9b\u529f\u80fd\u65f6\u5019\uff0c\u5c31\u4f1a\u89e6\u53d1 OOM \u5f02\u5e38\uff0c\u5e76\u4e14\u4f1a\u4f7f\u7528 OOM Killer \u6765\u6740\u6389\u4e00\u4e9b\u8fdb\u7a0b\uff0c\u817e\u51fa\u7a7a\u95f4\u4ee5\u4fdd\u969c\u7cfb\u7edf\u7684\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e0b OOM killer \u7684\u5927\u81f4\u6267\u884c\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u4e8e\u5927\u5bb6\u7406\u89e3\u540e\u7eed\u5185\u5bb9\u3002 \u5185\u6838\u4e2d OOM Killer \u7684\u4ee3\u7801\uff0c\u5728 torvalds/linux/mm/oom_kill.c \u53ef\u76f4\u63a5\u770b\u5230\uff0c\u8fd9\u91cc\u4ee5 Linux Kernel 5.2 \u4e3a\u4f8b\u3002 \u5f15\u7528\u5176\u4e2d\u7684\u4e00\u6bb5\u6ce8\u91ca\uff1a If we run out of memory, we have the choice between either killing a random task (bad), letting the system crash (worse). OR try to be smart about which process to kill. Note that we don't have to be perfect here, we just have to be good. \u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\uff0c\u5f53\u6211\u4eec\u5904\u4e8e OOM \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u51e0\u79cd\u9009\u62e9\uff0c\u968f\u673a\u5730\u6740\u6b7b\u4efb\u610f\u7684\u4efb\u52a1\uff08\u4e0d\u597d\uff09\uff0c\u8ba9\u7cfb\u7edf\u5d29\u6e83\uff08\u66f4\u7cdf\u7cd5\uff09\u6216\u8005\u5c1d\u8bd5\u53bb\u4e86\u89e3\u53ef\u4ee5\u6740\u6b7b\u54ea\u4e2a\u8fdb\u7a0b\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u8ffd\u6c42\u5b8c\u7f8e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53d8\u597d\uff08be good\uff09\u5c31\u884c\u4e86\u3002 \u4e8b\u5b9e\u4e0a\u786e\u5b9e\u5982\u6b64\uff0c\u65e0\u8bba\u968f\u673a\u5730\u6740\u6389\u4efb\u610f\u8fdb\u7a0b\u6216\u662f\u8ba9\u7cfb\u7edf\u5d29\u6e83\uff0c\u90a3\u90fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002 \u56de\u5230\u5185\u6838\u4ee3\u7801\u4e2d\uff0c\u5f53\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\u65f6\uff0cout_of_memory() \u88ab\u89e6\u53d1\uff0c\u4e4b\u540e\u4f1a\u8c03\u7528 select_bad_process() \u51fd\u6570\uff0c\u9009\u62e9\u4e00\u4e2a bad \u8fdb\u7a0b\u6765\u6740\u6389\u3002 \u90a3\u4ec0\u4e48\u6837\u7684\u8fdb\u7a0b\u662f bad \u8fdb\u7a0b\u5462\uff1f\u603b\u662f\u6709\u4e9b\u6761\u4ef6\u7684\u3002select_bad_process() \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\uff0c\u5176\u8c03\u7528\u4e86 oom_evaluate_task() \u6765\u5bf9\u8fdb\u7a0b\u8fdb\u884c\u6761\u4ef6\u8ba1\u7b97\uff0c\u6700\u6838\u5fc3\u7684\u5224\u65ad\u903b\u8f91\u662f\u5176\u4e2d\u7684 oom_badness()\u3002 unsigned long oom_badness ( struct task_struct * p , struct mem_cgroup * memcg , const nodemask_t * nodemask , unsigned long totalpages ) { long points ; long adj ; if ( oom_unkillable_task ( p , memcg , nodemask )) return 0 ; p = find_lock_task_mm ( p ); if ( ! p ) return 0 ; /* * Do not even consider tasks which are explicitly marked oom * unkillable or have been already oom reaped or the are in * the middle of vfork */ adj = ( long ) p -> signal -> oom_score_adj ; if ( adj == OOM_SCORE_ADJ_MIN || test_bit ( MMF_OOM_SKIP , & p -> mm -> flags ) || in_vfork ( p )) { task_unlock ( p ); return 0 ; } /* * The baseline for the badness score is the proportion of RAM that each * task's rss, pagetable and swap space use. */ points = get_mm_rss ( p -> mm ) + get_mm_counter ( p -> mm , MM_SWAPENTS ) + mm_pgtables_bytes ( p -> mm ) / PAGE_SIZE ; task_unlock ( p ); /* Normalize to oom_score_adj units */ adj *= totalpages / 1000 ; points += adj ; /* * Never return 0 for an eligible task regardless of the root bonus and * oom_score_adj (oom_score_adj can't be OOM_SCORE_ADJ_MIN here). */ return points > 0 ? points : 1 ; } \u800c\u4e3a\u4e86\u80fd\u591f\u6700\u5feb\u5730\u8fdb\u884c\u9009\u62e9\uff0c\u8fd9\u91cc\u7684\u903b\u8f91\u4e5f\u662f\u5c3d\u53ef\u80fd\u7684\u7b80\u5355\uff0c \u9664\u4e86\u660e\u786e\u6807\u8bb0\u4e0d\u53ef\u6740\u6389\u7684\u8fdb\u7a0b\u5916\uff0c\u76f4\u63a5\u9009\u62e9\u5185\u5b58\u5360\u7528\u6700\u591a\u7684\u8fdb\u7a0b \u3002\uff08\u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684 oom_score_adj \u53ef\u7528\u4e8e\u63a7\u5236\u6743\u91cd\uff09 \u8fd9\u79cd\u9009\u62e9\u7684\u6700\u4e3b\u8981\u7684\u4e24\u4e2a\u597d\u5904\u662f\uff1a 1. \u53ef\u4ee5\u56de\u6536\u5f88\u591a\u5185\u5b58\uff1b 2. \u53ef\u4ee5\u907f\u514d\u7f13\u89e3 OOM \u540e\uff0c\u8be5\u8fdb\u7a0b\u540e\u7eed\u5bf9\u5185\u5b58\u7684\u62a2\u5360\u5f15\u53d1\u540e\u7eed\u518d\u6b21\u7684 OOM\u3002 \u6211\u4eec\u5c06\u6ce8\u610f\u529b\u518d\u56de\u5230 Docker \u81ea\u8eab\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u7528 Docker \u542f\u52a8\u591a\u4e2a\u5bb9\u5668\u8fd0\u884c\u670d\u52a1\u3002\u5f53\u9047\u5230 OOM \u65f6\uff0c\u5982\u679c Docker \u8fdb\u7a0b\u88ab\u6740\u6389\uff0c\u90a3\u5bf9\u6211\u4eec\u7684\u670d\u52a1\u4e5f\u4f1a\u5e26\u6765\u5f88\u5927\u7684\u5f71\u54cd\u3002 \u6240\u4ee5 Docker \u5728\u542f\u52a8\u7684\u65f6\u5019\u9ed8\u8ba4\u8bbe\u7f6e\u4e86\u4e00\u4e2a -500 \u7684 oom_score_adj \u4ee5\u5c3d\u53ef\u80fd\u5730\u907f\u514d Docker \u8fdb\u7a0b\u672c\u8eab\u88ab OOM Killer \u7ed9\u6740\u6389\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8ba9\u67d0\u4e2a\u5bb9\u5668\uff0c\u5c3d\u53ef\u80fd\u5730\u4e0d\u8981\u88ab OOM Killer \u6740\u6389\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\u4f20\u9012 --oom-score-adj \u914d\u7f6e\u4e00\u4e2a\u6bd4\u8f83\u4f4e\u7684\u6570\u503c\u3002 \u4f46\u662f\u6ce8\u610f\uff1a \u4e0d\u8981\u901a\u8fc7 --oom-kill-disable \u7981\u7528\u6389 OOM Killer\uff0c\u6216\u8005\u7ed9\u5bb9\u5668\u8bbe\u7f6e\u4f4e\u4e8e dockerd \u8fdb\u7a0b\u7684 oom_score_adj \u503c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7cfb\u7edf\u7684\u4e0d\u7a33\u5b9a\u3002\u9664\u975e\u4f60\u660e\u786e\u77e5\u9053\u81ea\u5df1\u7684\u64cd\u4f5c\u5c06\u4f1a\u5e26\u6765\u7684\u5f71\u54cd\u3002 \u7ba1\u7406\u5bb9\u5668\u7684\u5185\u5b58\u8d44\u6e90 \u00b6 \u4ecb\u7ecd\u5b8c\u4e86 OOM\uff0c\u76f8\u6bd4\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\u5185\u5b58\u8017\u5c3d\u6240\u5e26\u6765\u7684\u5371\u5bb3\uff0c\u6211\u4eec\u6765\u7ee7\u7eed\u4ecb\u7ecd\u5982\u4f55\u7ba1\u7406\u5bb9\u5668\u7684\u5185\u5b58\u8d44\u6e90\u3002 ( MoeLove ) \u279c ~ docker run --help | grep 'memory' --kernel-memory bytes Kernel memory limit -m, --memory bytes Memory limit --memory-reservation bytes Memory soft limit --memory-swap bytes Swap limit equal to memory plus swap: '-1' to enable unlimited swap --memory-swappiness int Tune container memory swappiness ( 0 to 100 ) ( default -1 ) \u53ef\u7528\u7684\u914d\u7f6e\u53c2\u6570\u6709\u4e0a\u8ff0\u51e0\u4e2a\uff0c\u6211\u4eec\u901a\u5e38\u76f4\u63a5\u4f7f\u7528 --memory \u53c2\u6570\u6765\u9650\u5236\u5bb9\u5668\u53ef\u7528\u7684\u5185\u5b58\u5927\u5c0f\u3002\u6211\u4eec\u540c\u6837\u4f7f\u7528\u51e0\u4e2a\u793a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff1a \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u5e76\u4f20\u9012\u53c2\u6570 --memory 10m \u9650\u5236\u5176\u53ef\u4f7f\u7528\u7684\u5185\u5b58\u4e3a 10 m\u3002 ( MoeLove ) \u279c ~ docker run --rm -it --memory 10m alpine / # \u90a3\u6211\u4eec\u5982\u4f55\u9a8c\u8bc1\u5b83\u7684\u53ef\u7528\u5185\u5b58\u5927\u5c0f\u662f\u591a\u5c11\u5462\uff1f\u5728\u7269\u7406\u673a\u4e0a\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528 free \u5de5\u5177\u8fdb\u884c\u67e5\u770b\u3002\u4f46\u5728\u5bb9\u5668\u73af\u5883\u5185\uff0c\u5b83\u8fd8\u662f\u5426\u751f\u6548\u5462\uff1f / # free -m total used free shared buffers cached Mem: 15932 14491 1441 1814 564 3632 -/+ buffers/cache: 10294 5637 Swap: 8471 693 7778 \u5f88\u660e\u663e\uff0c\u4f7f\u7528 free \u5f97\u5230\u7684\u7ed3\u679c\u662f\u5bbf\u4e3b\u673a\u4e0a\u7684\u4fe1\u606f\u3002\u5f53\u7136\uff0c\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u4ecb\u7ecd\u4e86 docker stats \u547d\u4ee4\uff0c\u6211\u4eec\u4f7f\u7528\u5b83\u6765\u67e5\u770b\u5f53\u524d\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS e260e91874d8 busy_napier 0 .00% 1 .172MiB / 10MiB 11 .72% 16 .1kB / 0B 0B / 0B 1 \u53ef\u4ee5\u770b\u5230 MEM USAGE / LIMIT \u90a3\u4e00\u5217\u4e2d\u7684\u4fe1\u606f\u5df2\u7ecf\u751f\u6548\uff0c\u662f\u6211\u4eec\u9884\u671f\u7684\u6837\u5b50\u3002 \u90a3\u6211\u4eec\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u65b9\u5f0f\u67e5\u770b\u6b64\u4fe1\u606f\u5462\uff1f\u5f53\u7136\u6709\uff1a # \u5728\u5bb9\u5668\u5185\u6267\u884c / # cat /sys/fs/cgroup/memory/memory.limit_in_bytes 10485760 \u6216\u8005\u53ef\u4ee5\u5728\u5bbf\u4e3b\u673a\u4e0a\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ cat /sys/fs/cgroup/memory/system.slice/docker- $( docker inspect --format '{{ .Id}}' $( docker ps -ql )) .scope/memory.limit_in_bytes 10485760 \u6ce8\u610f\uff1a\u4ee5\u4e0a\u547d\u4ee4\u5728 Linux 5.2 \u5185\u6838\u4e0b\u6d4b\u8bd5\u901a\u8fc7\uff0c\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u76ee\u5f55\u7ed3\u6784\u7565\u6709\u5dee\u5f02\u3002 \u66f4\u65b0\u5bb9\u5668\u5185\u5b58\u8d44\u6e90\u9650\u5236 \u00b6 \u5f53\u5bb9\u5668\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\uff0c\u5176\u4e2d\u7684\u8fdb\u7a0b\u4f7f\u7528\u7684\u5185\u5b58\u53d8\u591a\u4e86\uff0c\u6211\u4eec\u60f3\u5141\u8bb8\u5bb9\u5668\u4f7f\u7528\u66f4\u591a\u5185\u5b58\u8d44\u6e90\uff0c\u90a3\u8981\u5982\u4f55\u64cd\u4f5c\u5462\uff1f \u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u524d\u9762\u4ecb\u7ecd\u7684 docker update \u547d\u4ee4\u5b8c\u6210\u3002 \u6bd4\u5982\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u5c06\u53ef\u7528\u5185\u5b58\u6269\u5927\u81f3 20m\uff1a ( MoeLove ) \u279c ~ docker update --memory 20m $( docker ps -ql ) e260e91874d8 # \u9a8c\u8bc1\u662f\u5426\u751f\u6548 ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS e260e91874d8 busy_napier 0 .00% 1 .434MiB / 20MiB 7 .17% 35 .3kB / 0B 0B / 0B 1 \u5982\u679c\u8fd8\u4e0d\u591f\uff0c\u9700\u8981\u6269\u5927\u81f3 100m \u5462\uff1f ( MoeLove ) \u279c ~ docker update --memory 100m $( docker ps -ql ) Error response from daemon: Cannot update container e260e91874d8181b6d0078c853487613907cd9ada2af35d630a7bef204654982: Memory limit should be smaller than already set memoryswap limit, update the memoryswap at the same time \u4f1a\u53d1\u73b0\u8fd9\u91cc\u6709\u4e2a\u62a5\u9519\u4fe1\u606f\u3002\u5927\u610f\u662f memory limit \u5e94\u8be5\u6bd4\u5df2\u7ecf\u914d\u7f6e\u7684 memoryswap limit \u5c0f\uff0c\u9700\u8981\u540c\u65f6\u66f4\u65b0 memoryswap\u3002 \u4f60\u53ef\u80fd\u4f1a\u56f0\u60d1\uff0c\u4e4b\u524d\u6211\u4eec\u53ea\u662f\u9650\u5236\u4e86\u5185\u5b58\u4e3a 10m\uff0c\u5e76\u4e14\u6269\u5927\u81f3 20m \u7684\u65f6\u5019\u662f\u6210\u529f\u4e86\u7684\u3002\u4e3a\u4ec0\u4e48\u5230 100m \u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u9519\uff1f \u8fd9\u5c31\u6d89\u53ca\u5230\u4e86\u8fd9\u4e9b\u53c2\u6570\u7684\u7279\u5b9a\u884c\u4e3a\u4e86\uff0c\u6211\u6765\u4e3a\u4f60\u4e00\u4e00\u4ecb\u7ecd\u3002 \u5185\u5b58\u9650\u5236\u53c2\u6570\u7684\u7279\u5b9a\u884c\u4e3a \u00b6 \u8fd9\u91cc\u7684\u7279\u5b9a\u53c2\u6570\u884c\u4e3a\uff0c\u4e3b\u8981\u662f\u6307\u6211\u4eec\u524d\u9762\u4f7f\u7528\u7684 --memory \u548c\u672a\u4ecb\u7ecd\u8fc7\u7684 --memory-swap \u8fd9\u4e24\u4e2a\u53c2\u6570\u3002 --memory \u7528\u4e8e\u9650\u5236\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u800c --memory-swap \u5219\u8868\u793a\u5185\u5b58\u548c Swap \u7684\u603b\u548c\u3002 \u8fd9\u89e3\u91ca\u4e86\u4e0a\u9762\u201cMemory limit should be smaller than already set memoryswap limit\u201d\uff0c\u56e0\u4e3a --memory-swap \u59cb\u7ec8\u5e94\u8be5\u5927\u4e8e\u7b49\u4e8e --memory \uff08\u6bd5\u7adf Swap \u6700\u5c0f\u4e5f\u53ea\u80fd\u662f 0 \uff09\u3002 \u5982\u679c\u53ea\u6307\u5b9a\u4e86 --memory \u5219\u6700\u7ec8 --memory-swap \u5c06\u4f1a\u8bbe\u7f6e\u4e3a --memory \u7684\u4e24\u500d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u53ea\u4f20\u9012 --memory \u7684\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u53ea\u80fd\u4f7f\u7528\u4e0e --memory \u76f8\u540c\u5927\u5c0f\u7684 Swap\u3002 \u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e0a\u9762\u201c\u76f4\u63a5\u6269\u5927\u81f3 20m \u7684\u65f6\u5019\u80fd\u6210\u529f\uff0c\u800c\u6269\u5927\u5230 100m \u7684\u65f6\u5019\u4f1a\u51fa\u9519\u201d\uff0c\u5728\u4e0a\u8ff0\u573a\u666f\u4e2d\u53ea\u6307\u5b9a\u4e86 --memory \u4e3a 10m \uff0c\u6240\u4ee5 --memory-swap \u5c31\u9ed8\u8ba4\u88ab\u8bbe\u7f6e\u6210\u4e86 20m\u3002 \u5982\u679c --memory-swap \u548c --memory \u8bbe\u7f6e\u4e86\u76f8\u540c\u503c\uff0c\u5219\u8868\u793a\u4e0d\u4f7f\u7528 Swap\u3002 \u5982\u679c --memory-swap \u8bbe\u7f6e\u4e3a -1 \u5219\u8868\u793a\u4e0d\u5bf9\u5bb9\u5668\u4f7f\u7528\u7684 Swap \u8fdb\u884c\u9650\u5236\u3002 \u5982\u679c\u8bbe\u7f6e\u4e86 --memory-swap \u53c2\u6570\uff0c\u5219\u5fc5\u987b\u8bbe\u7f6e --memory \u53c2\u6570\u3002 \u603b\u7ed3 \u00b6 \u81f3\u6b64\uff0c\u6211\u4fbf\u4e3a\u4f60\u4ecb\u7ecd\u4e86\u5bb9\u5668\u8d44\u6e90\u7ba1\u7406\u7684\u6838\u5fc3\u5185\u5bb9\uff0c\u5305\u62ec\u7ba1\u7406\u5bb9\u5668\u7684 CPU \u8d44\u6e90\u548c\u5185\u5b58\u8d44\u6e90\u3002\u4e3a\u5bb9\u5668\u8fdb\u884c\u5408\u7406\u7684\u8d44\u6e90\u63a7\u5236\uff0c\u6709\u5229\u4e8e\u63d0\u9ad8\u6574\u4f53\u73af\u5883\u7684\u7a33\u5b9a\u6027\uff0c\u907f\u514d\u8d44\u6e90\u62a2\u5360\u6216\u5927\u91cf\u5185\u5b58\u5360\u7528\u5bfc\u81f4 OOM\uff0c\u8fdb\u7a0b\u88ab\u6740\u6389\u7b49\u60c5\u51b5\u3002 \u5bf9 CPU \u8fdb\u884c\u7ba1\u7406\u65f6\uff0c\u5efa\u8bae\u4f7f\u7528 --cpus \uff0c\u8bed\u4e49\u65b9\u9762\u4f1a\u6bd4\u8f83\u6e05\u6670\u3002\u5982\u679c\u662f\u5bf9 Linux \u7684 CPU \u8c03\u5ea6\u5668 CFS \u5f88\u719f\u6089\uff0c\u5e76\u4e14\u6709\u5f3a\u70c8\u7684\u5b9a\u5236\u5316\u9700\u6c42\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u4f7f\u7528 --cpu-period \u548c --cpu-quota \u6bd4\u8f83\u5408\u9002\u3002 \u5bf9\u5185\u5b58\u8fdb\u884c\u7ba1\u7406\u65f6\uff0c\u6709\u4e2a --memory-swappiness \u53c2\u6570\u4e5f\u9700\u8981\u6ce8\u610f\u4e0b\uff0c\u5b83\u53ef\u8bbe\u7f6e\u4e3a 0~100 \u7684\u767e\u5206\u6bd4\uff0c\u4e0e\u6211\u4eec\u5e73\u65f6\u89c1\u5230\u7684 swappiness \u884c\u4e3a\u57fa\u672c\u4e00\u81f4\uff0c\u8bbe\u7f6e\u4e3a 0 \u8868\u793a\u4e0d\u4f7f\u7528\u533f\u540d\u9875\u9762\u4ea4\u6362\uff0c\u8bbe\u7f6e\u4e3a 100 \u5219\u8868\u793a\u533f\u540d\u9875\u9762\u90fd\u53ef\u88ab\u4ea4\u6362\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u7684\u8bdd\uff0c\u5b83\u9ed8\u8ba4\u4f1a\u4ece\u4e3b\u673a\u4e0a\u7ee7\u627f\u3002 \u5728\u672c\u7bc7\u4e2d\uff0c\u5173\u4e8e\u5728\u5bbf\u4e3b\u673a\u4e0a\u67e5\u770b\u5bb9\u5668\u7684\u5185\u5b58\u9650\u5236\uff0c\u6211\u7ed9\u51fa\u4e86\u4e00\u4e2a\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ cat /sys/fs/cgroup/memory/system.slice/docker- $( docker inspect --format '{{ .Id}}' $( docker ps -ql )) .scope/memory.limit_in_bytes 10485760 \u5b83\u5177\u4f53\u662f\u4ec0\u4e48\u542b\u4e49\u5462\uff1f\u4e0b\u7bc7\u300a\u6df1\u5165\u5256\u6790\u5bb9\u5668\u300b\u4e2d\u6211\u5c06\u8be6\u7ec6\u8bf4\u660e\u3002","title":"\u5bb9\u5668\u8d44\u6e90\u7ba1\u7406"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_1","text":"\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\u7684\u65f6\u5019\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u7cfb\u7edf\u8d44\u6e90\uff0c\u8fd9\u4e0e\u6211\u4eec\u5728\u7269\u7406\u673a\u4e0a\u542f\u52a8\u7a0b\u5e8f\u57fa\u672c\u662f\u4e00\u81f4\u7684\u3002\u6bd4\u5982\u4e3b\u8981\u7684\u51e0\u7c7b\uff1a CPU \u5185\u5b58 \u7f51\u7edc I/O GPU \u8fd9\u4e9b\u7cfb\u7edf\u8d44\u6e90\u662f\u5728\u6211\u4eec\u542f\u52a8\u5bb9\u5668\u65f6\uff0c\u9700\u8981\u8003\u8651\u548c\u53ef\u88ab\u6211\u4eec\u7ba1\u7406\u7684\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c docker run --help \u67e5\u770b docker run \u547d\u4ee4\u6240\u652f\u6301\u7684\u5168\u90e8\u53c2\u6570\u3002\u73b0\u5728 docker run \u547d\u4ee4\u6240\u652f\u6301\u7684\u53c2\u6570\u5df2\u8d85\u8fc7 90 \u9879\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u51fa\u4e86\u3002","title":"\u8d44\u6e90\u7c7b\u578b"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_2","text":"","title":"\u67e5\u770b\u5bb9\u5668\u5360\u7528\u8d44\u6e90"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#docker-stats","text":"Docker \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u65b9\u4fbf\u7684\u547d\u4ee4 docker stats \uff0c\u53ef\u4f9b\u6211\u4eec\u67e5\u770b\u548c\u7edf\u8ba1\u5bb9\u5668\u6240\u5360\u7528\u7684\u8d44\u6e90\u60c5\u51b5\u3002 \u6211\u4eec\u4ecd\u7136\u542f\u52a8\u4e00\u4e2a Redis \u5bb9\u5668\u4f5c\u4e3a\u793a\u4f8b\u3002 # \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668 ( MoeLove ) \u279c ~ docker run -d redis c98c9831ee73e9b71719b404f5ecf3b408de0b69aec0f781e42d815575d28ada # \u67e5\u770b\u5176\u6240\u5360\u7528\u8d44\u6e90\u7684\u60c5\u51b5 ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS c98c9831ee73 amazing_torvalds 0 .08% 2 .613MiB / 15 .56GiB 0 .02% 3 .66kB / 0B 0B / 0B 4 \u8fd9\u91cc\u4f20\u9012\u4e86\u4e00\u4e2a --no-stream \u7684\u53c2\u6570\uff0c\u662f\u56e0\u4e3a docker stats \u547d\u4ee4\u9ed8\u8ba4\u662f\u4e00\u4e2a\u6301\u7eed\u7684\u52a8\u6001\u6d41\u5f0f\u8f93\u51fa\uff08\u6bcf\u79d2\u4e00\u6b21\uff09\uff0c\u7ed9\u5b83\u4f20\u9012 --no-stream \u53c2\u6570\u540e\uff0c\u5b83\u5c31\u53ea\u8f93\u51fa\u4e00\u6b21\u4fbf\u4f1a\u9000\u51fa\u4e86\u3002 \u63a5\u4e0b\u6765\u6211\u4e3a\u4f60\u4ecb\u7ecd\u4e0b\u5b83\u8f93\u51fa\u5185\u5bb9\u7684\u542b\u4e49\uff1a Container ID\uff1a\u5bb9\u5668\u7684 ID\uff0c\u4e5f\u662f\u4e00\u4e2a\u5bb9\u5668\u751f\u547d\u5468\u671f\u5185\u4e0d\u4f1a\u53d8\u66f4\u7684\u4fe1\u606f\u3002 Name\uff1a\u5bb9\u5668\u7684\u540d\u79f0\uff0c\u5982\u679c\u6ca1\u6709\u624b\u52a8\u4f7f\u7528 --name \u53c2\u6570\u6307\u5b9a\uff0c\u5219 Docker \u4f1a\u968f\u673a\u751f\u6210\u4e00\u4e2a\uff0c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u4fee\u6539\u3002 CPU %\uff1a\u5bb9\u5668\u6b63\u5728\u4f7f\u7528\u7684 CPU \u8d44\u6e90\u7684\u767e\u5206\u6bd4\uff0c\u8fd9\u91cc\u9762\u6d89\u53ca\u4e86\u6bd4\u8f83\u591a\u7ec6\u8282\uff0c\u4e0b\u9762\u4f1a\u8be6\u7ec6\u8bf4\u3002 Mem Usage/Limit\uff1a\u5f53\u524d\u5185\u5b58\u7684\u4f7f\u7528\u53ca\u5bb9\u5668\u53ef\u7528\u7684\u6700\u5927\u5185\u5b58\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86\u4e00\u53f0 16G \u7684\u7535\u8111\u8fdb\u884c\u6d4b\u8bd5\u3002 Mem %\uff1a\u5bb9\u5668\u6b63\u5728\u4f7f\u7528\u7684\u5185\u5b58\u8d44\u6e90\u7684\u767e\u5206\u6bd4\u3002 Net I/O\uff1a\u5bb9\u5668\u901a\u8fc7\u5176\u7f51\u7edc\u63a5\u53e3\u53d1\u9001\u548c\u63a5\u53d7\u5230\u7684\u6570\u636e\u91cf\u3002 Block I/O\uff1a\u5bb9\u5668\u901a\u8fc7\u5757\u8bbe\u5907\u8bfb\u53d6\u548c\u5199\u5165\u7684\u6570\u636e\u91cf\u3002 Pids\uff1a\u5bb9\u5668\u521b\u5efa\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u6570\u3002","title":"docker stats"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#docker-top","text":"\u9664\u4e86\u4e0a\u9762\u63d0\u5230\u7684 docker stats \u547d\u4ee4\u5916\uff0cDocker \u4e5f\u63d0\u4f9b\u4e86\u53e6\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u547d\u4ee4 docker top \uff0c\u4e0e\u6211\u4eec\u5e73\u65f6\u7528\u7684 ps \u547d\u4ee4\u57fa\u672c\u4e00\u81f4, \u4e5f\u652f\u6301 ps \u547d\u4ee4\u7684\u53c2\u6570\u3002 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) UID PID PPID C STIME TTY TIME CMD systemd+ 6275 6248 0 16 :50 ? 00 :00:24 redis-server *:6379 # \u53ef\u4ee5\u4f7f\u7528 ps \u547d\u4ee4\u7684\u53c2\u6570 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,stat,cmd PID STAT CMD 6275 Ssl redis-server *:6379","title":"docker top"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#cpu","text":"\u5728\u6211\u4eec\u4f7f\u7528\u5bb9\u5668\u7684\u65f6\u5019\uff0cCPU \u548c\u5185\u5b58\u662f\u6211\u4eec\u5c24\u4e3a\u5173\u6ce8\u7684\u8d44\u6e90\u3002\u4e0d\u8fc7\uff0c\u5bf9\u4e8e CPU \u8d44\u6e90\u7684\u7ba1\u7406\uff0c\u6d89\u53ca\u7684\u5185\u5bb9\u4f1a\u6bd4\u8f83\u504f\u5e95\u5c42\u4e00\u4e9b\uff0c\u6709\u4e9b\u6d89\u53ca\u5230\u4e86\u5185\u6838\u7684 CPU \u8c03\u5ea6\u5668\uff0c\u6bd4\u5982 CFS\uff08Completely Fair Scheduler\uff09\u7b49\u3002 \u6211\u4eec\u53ef\u4ee5\u5148\u6765\u67e5\u770b\u4e0b Docker \u63d0\u4f9b\u4e86\u54ea\u4e9b\u63a7\u5236 CPU \u8d44\u6e90\u76f8\u5173\u7684\u53c2\u6570\u3002 \u4f7f\u7528 docker run --help |grep CPU \u5373\u53ef\u67e5\u770b\u3002 ( MoeLove ) \u279c ~ docker run --help | grep CPU --cpu-period int Limit CPU CFS ( Completely Fair Scheduler ) period --cpu-quota int Limit CPU CFS ( Completely Fair Scheduler ) quota --cpu-rt-period int Limit CPU real-time period in microseconds --cpu-rt-runtime int Limit CPU real-time runtime in microseconds -c, --cpu-shares int CPU shares ( relative weight ) --cpus decimal Number of CPUs --cpuset-cpus string CPUs in which to allow execution ( 0 -3, 0 ,1 ) \u8fd9\u91cc\u6682\u65f6\u5148\u4e0d\u5bf9\u53c2\u6570\u7684\u5177\u4f53\u542b\u4e49\u8fdb\u884c\u6df1\u5165\u5c55\u5f00\uff0c\u6211\u4eec\u76f4\u63a5\u4ee5\u51e0\u4e2a\u793a\u4f8b\u6765\u5206\u522b\u8fdb\u884c\u8bf4\u660e\uff0c\u5e2e\u52a9\u5927\u5bb6\u7406\u89e3\u3002","title":"\u7ba1\u7406\u5bb9\u5668\u7684 CPU \u8d44\u6e90"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_3","text":"Tip \u5907\u6ce8\uff1a\u6211\u8fd9\u91cc\u4ee5\u4e00\u4e2a 4 \u6838 CPU \u7684\u7535\u8111\u8fdb\u884c\u6f14\u793a\u3002 \u73b0\u5728\u6211\u4eec\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u6211\u4eec\u4ee5\u4f53\u79ef\u5f88\u5c0f\u7684 Alpine Linux \u4e3a\u4f8b\u597d\u4e86\u3002 ( MoeLove ) \u279c ~ docker run --rm -it alpine / # \u5728\u53e6\u4e00\u4e2a\u7a97\u53e3\uff0c\u6267\u884c\u4e0a\u9762\u4ecb\u7ecd\u7684\u67e5\u770b\u5bb9\u5668\u8d44\u6e90\u7684\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS 106a24399bc9 friendly_varahamihira 0 .00% 1 .047MiB / 15 .56GiB 0 .01% 5 .01kB / 0B 1 .67MB / 0B 1 \u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u524d\u5bb9\u5668\u5185\u6ca1\u6709\u8fc7\u591a\u7684 CPU \u6d88\u8017\uff0c\u4e14 PIDS \u4e3a 1\uff0c\u8868\u793a\u5f53\u524d\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u73b0\u5728\u6211\u4eec\u56de\u5230\u521a\u624d\u542f\u52a8\u7684\u5bb9\u5668\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a sha256sum \u662f\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97\u548c\u68c0\u67e5 SHA256 \u4fe1\u606f\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff1b /dev/zero \u662f Linux \u7cfb\u7edf\u4e0a\u4e00\u4e2a\u7279\u6b8a\u7684\u8bbe\u5907\uff0c\u5728\u8bfb\u5b83\u65f6\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u65e0\u9650\u7684\u7a7a\u5b57\u7b26\u4e32\uff08NULL \u6216\u8005 0x00 \u4e4b\u7c7b\u7684\uff09\u3002 \u6240\u4ee5\u4e0a\u9762\u7684\u547d\u4ee4\uff0c\u4f1a\u8ba9 sha256sum \u6301\u7eed\u5730\u8bfb /dev/zero \u4ea7\u751f\u7684\u7a7a\u4e32\uff0c\u5e76\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u5c06\u8fc5\u901f\u5730\u6d88\u8017 CPU \u8d44\u6e90\u3002 \u6211\u4eec\u6765\u770b\u770b\u6b64\u65f6\u5bb9\u5668\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS 106a24399bc9 friendly_varahamihira 100 .59% 1 .5MiB / 15 .56GiB 0 .01% 14 .4kB / 0B 1 .99MB / 0B 2 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 965 99 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\u5f53\u524d\u7684 CPU \u4f7f\u7528\u7387\u5df2\u7ecf\u5728 100% \u5de6\u53f3\u4e86\u3002 \u6211\u4eec\u518d\u65b0\u6253\u5f00\u4e00\u4e2a\u7a97\u53e3\uff0c\u8fdb\u5165\u5bb9\u5668\u5185\uff0c\u6267\u884c\u76f8\u540c\u7684\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ docker exec -it $( docker ps -ql ) sh / # sha256sum /dev/zero \u67e5\u770b\u5bb9\u5668\u4f7f\u7528\u8d44\u6e90\u7684\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 200 .79% 1 .793MiB / 15 .56GiB 0 .01% 4 .58kB / 0B 0B / 0B 4 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 965 99 sha256sum /dev/zero 1236 0 sh 1297 99 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\u73b0\u5728\u4e24\u4e2a\u8fdb\u7a0b\uff0c\u5df2\u7ecf\u8ba9\u4e24\u4e2a CPU \u6ee1\u8d1f\u8f7d\u8fd0\u884c\u4e86\u3002\u8fd9\u91cc\u9700\u8981\u989d\u5916\u8bf4\u660e\u7684\u662f\uff0c\u9009\u62e9 sha256sum \u4f5c\u4e3a\u793a\u4f8b\uff0c\u662f\u56e0\u4e3a\u5b83\u662f\u5355\u7ebf\u7a0b\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u542f\u52a8\u4e00\u4e2a sha256sum \u5e76\u4e0d\u4f1a\u6d88\u8017\u5176\u4ed6 CPU \u6838\u7684\u8d44\u6e90\u3002 \u7531\u6b64\u53ef\u4ee5\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u5982\u679c\u4e0d\u5bf9\u5bb9\u5668\u5185\u7a0b\u5e8f\u8fdb\u884c CPU \u8d44\u6e90\u9650\u5236\uff0c\u5176\u53ef\u80fd\u4f1a\u6d88\u8017\u6389\u5927\u91cf CPU \u8d44\u6e90\uff0c\u8fdb\u800c\u5f71\u54cd\u5176\u4ed6\u7a0b\u5e8f\u6216\u8005\u5f71\u54cd\u7cfb\u7edf\u7684\u7a33\u5b9a\u3002","title":"\u9ed8\u8ba4\u65e0\u9650\u5236"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#05-cpu","text":"\u90a3\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e2a\u5bb9\u5668\u8fdb\u884c CPU \u8d44\u6e90\u7684\u9650\u5236\uff0c\u6bd4\u5982\u9650\u5236\u5b83\u53ea\u53ef\u4ee5\u4f7f\u7528 0.5 CPU\u3002 \u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u5728 docker run \u65f6\uff0c\u4e3a\u5b83\u6dfb\u52a0\u8d44\u6e90\u9650\u5236\u3002 \u4f46\u6211\u6765\u7ed9\u4f60\u4ecb\u7ecd\u4e00\u79cd**\u52a8\u6001**\u66f4\u6539\u8d44\u6e90\u9650\u5236\u7684\u529e\u6cd5\uff0c\u4f7f\u7528 docker update \u547d\u4ee4\u3002\u4f8b\u5982\uff0c\u5728\u6b64\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u9650\u5236\u8be5\u5bb9\u5668\u53ea\u80fd\u4f7f\u7528 0.5 CPU\u3002 ( MoeLove ) \u279c ~ docker update --cpus \"0.5\" $( docker ps -ql ) f359d4ff6fc6 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u76f4\u63a5\u5173\u95ed\u521a\u624d\u7684 sha256sum \u8fdb\u7a0b\uff0c\u6309 Ctrl+c \u7ec8\u6b62\u8fdb\u7a0b\u3002\u7136\u540e\u91cd\u65b0\u8fd0\u884c\u8be5\u547d\u4ee4\uff1a # \u7ec8\u6b62\u8fdb\u7a0b / # sha256sum /dev/zero ^C # \u542f\u52a8\u7a0b\u5e8f / # sha256sum /dev/zero \u67e5\u770b\u8d44\u6e90\u5360\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 49 .87% 1 .777MiB / 15 .56GiB 0 .01% 112kB / 0B 1 .59MB / 0B 3 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 1236 0 sh 7662 49 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u8fdb\u7a0b\u4f7f\u7528\u4e86 50% \u5de6\u53f3\u7684 CPU\u3002\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u542f\u52a8\u53e6\u4e00\u4e2a sha256sum \u7684\u8fdb\u7a0b\uff1a / # sha256sum /dev/zero \u67e5\u770b\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 50 .92% 1 .891MiB / 15 .56GiB 0 .01% 113kB / 0B 1 .59MB / 0B 4 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 1236 0 sh 10106 25 sha256sum /dev/zero 11999 25 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u5bb9\u5668\u6574\u4f53\u5360\u7528\u4e86 50% \u7684 CPU\uff0c\u800c\u5176\u4e2d\u7684\u4e24\u4e2a sha256sum \u8fdb\u7a0b\u5219\u5404\u5360\u4e86 25%\u3002 \u6211\u4eec\u5df2\u7ecf\u6210\u529f\u7684\u6309\u9884\u671f\u4e3a\u5b83\u5206\u914d\u4e86 0.5 CPU\u3002","title":"\u5206\u914d 0.5 CPU"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#15-cpu","text":"\u63a5\u4e0b\u6765\uff0c\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u4f46\u662f\u4e3a\u5b83\u5206\u914d 1.5 CPU\uff0c\u6765\u770b\u770b\u5b83\u7684\u5b9e\u9645\u60c5\u51b5\u5982\u4f55\u3002 # \u66f4\u65b0\u914d\u7f6e\uff0c\u4f7f\u7528 1.5 CPU ( MoeLove ) \u279c ~ docker update --cpus \"1.5\" $( docker ps -ql ) f359d4ff6fc6 \u5206\u522b\u4f7f\u7528\u4e4b\u524d\u7684\u4e24\u4e2a\u7a97\u53e3\uff0c\u6267\u884c sha256sum /dev/zero \u8fdb\u884c\u6d4b\u8bd5\uff1a / # sha256sum /dev/zero \u67e5\u770b\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 151 .23% 2MiB / 15 .56GiB 0 .01% 122kB / 0B 1 .59MB / 0B 4 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 1236 0 sh 25167 77 sha256sum /dev/zero 25211 74 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\uff0c\u7ed3\u679c\u4e0e\u6211\u4eec\u7684\u9884\u671f\u57fa\u672c\u76f8\u7b26\uff0c150% \u5de6\u53f3\u7684 CPU\uff0c\u800c\u4e24\u4e2a\u6d4b\u8bd5\u8fdb\u7a0b\uff0c\u4e5f\u5dee\u4e0d\u591a\u662f\u5e73\u5206\u4e86 CPU \u8d44\u6e90\u3002","title":"\u5206\u914d 1.5 CPU"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#cpu_1","text":"\u53ef\u4ee5\u4f7f\u7528 --cpuset-cpus \u6765\u6307\u5b9a\u5206\u914d\u53ef\u4f7f\u7528\u7684 CPU \u6838\uff0c\u8fd9\u91cc\u6211\u6307\u5b9a\u4e3a 0\uff0c\u8868\u793a\u4f7f\u7528\u7b2c\u4e00\u4e2a CPU \u6838\u3002 ( MoeLove ) \u279c ~ docker update --cpus \"1.5\" --cpuset-cpus 0 $( docker ps -ql ) f359d4ff6fc6 \u5206\u522b\u4f7f\u7528\u4e4b\u524d\u7684\u4e24\u4e2a\u7a97\u53e3\uff0c\u6267\u884c sha256sum /dev/zero \u8fdb\u884c\u6d4b\u8bd5\uff1a / # sha256sum /dev/zero \u67e5\u770b\u8d44\u6e90\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS f359d4ff6fc6 nice_zhukovsky 99 .18% 1 .988MiB / 15 .56GiB 0 .01% 221kB / 0B 1 .59MB / 0B 4 ( MoeLove ) \u279c ~ docker top $( docker ps -ql ) -o pid,c,cmd PID C CMD 825 0 /bin/sh 1236 0 sh 25119 50 sha256sum /dev/zero 25164 48 sha256sum /dev/zero \u53ef\u4ee5\u770b\u5230\uff0c\u867d\u7136\u6211\u4eec\u4ecd\u7136\u4f7f\u7528 --cpus \u6307\u5b9a\u4e86 1.5 CPU\uff0c\u4f46\u7531\u4e8e\u4f7f\u7528 --cpuset-cpus \u9650\u5236\u53ea\u5141\u8bb8\u5b83\u8dd1\u5728\u7b2c\u4e00\u4e2a CPU \u4e0a\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u6d4b\u8bd5\u8fdb\u7a0b\u4e5f\u5c31\u53ea\u80fd\u8bc4\u5206\u8be5 CPU \u4e86\u3002","title":"\u6307\u5b9a\u53ef\u4f7f\u7528 CPU \u6838"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_4","text":"\u901a\u8fc7\u4e0a\u8ff0\u7684\u793a\u4f8b\uff0c\u6211\u4e3a\u4f60\u4ecb\u7ecd\u4e86\u5982\u4f55\u901a\u8fc7 --cpus \u53c2\u6570\u9650\u5236\u5bb9\u5668\u53ef\u4f7f\u7528\u7684 CPU \u8d44\u6e90\uff1b\u901a\u8fc7 --cpuset-cpus \u53c2\u6570\u53ef\u6307\u5b9a\u5bb9\u5668\u5185\u8fdb\u7a0b\u8fd0\u884c\u6240\u7528\u7684 CPU \u6838\u5fc3\uff1b\u901a\u8fc7 docker update \u53ef\u76f4\u63a5\u66f4\u65b0\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u7684\u76f8\u5173\u914d\u7f6e\u3002 \u73b0\u5728\u6211\u4eec\u56de\u5230\u524d\u9762\u4f7f\u7528 docker run --help | grep CPU \uff0c\u67e5\u770b Docker \u652f\u6301\u7684\u5bf9\u5bb9\u5668 CPU \u76f8\u5173\u53c2\u6570\u7684\u9009\u9879\uff1a ( MoeLove ) \u279c ~ docker run --help | grep CPU --cpu-period int Limit CPU CFS ( Completely Fair Scheduler ) period --cpu-quota int Limit CPU CFS ( Completely Fair Scheduler ) quota --cpu-rt-period int Limit CPU real-time period in microseconds --cpu-rt-runtime int Limit CPU real-time runtime in microseconds -c, --cpu-shares int CPU shares ( relative weight ) --cpus decimal Number of CPUs --cpuset-cpus string CPUs in which to allow execution ( 0 -3, 0 ,1 ) --cpus \u662f\u5728 Docker 1.13 \u65f6\u65b0\u589e\u7684\uff0c\u53ef\u7528\u4e8e\u66ff\u4ee3\u539f\u5148\u7684 --cpu-period \u548c --cpu-quota \u3002\u8fd9\u4e09\u4e2a\u53c2\u6570\u901a\u8fc7 cgroups \u6700\u7ec8\u4f1a\u5b9e\u9645\u5f71\u54cd Linux \u5185\u6838\u7684 CPU \u8c03\u5ea6\u5668 CFS\uff08Completely Fair Scheduler, \u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\uff09\u5bf9\u8fdb\u7a0b\u7684\u8c03\u5ea6\u7ed3\u679c\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c \u63a8\u8350\u76f4\u63a5\u4f7f\u7528 --cpus \uff0c \u800c\u65e0\u9700\u5355\u72ec\u8bbe\u7f6e --cpu-period \u548c --cpu-quota \uff0c\u9664\u975e\u4f60\u5df2\u7ecf\u5bf9 CPU \u8c03\u5ea6\u5668 CFS \u6709\u4e86\u8db3\u591f\u591a\u7684\u4e86\u89e3\uff0c\u63d0\u4f9b --cpus \u53c2\u6570\u4e5f\u662f Docker \u56e2\u961f\u4e3a\u4e86\u53ef\u4ee5\u7b80\u5316\u7528\u6237\u7684\u4f7f\u7528\u6210\u672c\u589e\u52a0\u7684\uff0c\u5b83\u8db3\u591f\u6ee1\u8db3\u6211\u4eec\u5927\u591a\u6570\u7684\u9700\u6c42\u3002 \u800c --cpu-shares \u9009\u9879\uff0c\u5b83\u867d\u7136\u6709\u4e00\u4e9b\u5b9e\u9645\u610f\u4e49\uff0c\u4f46\u5374\u4e0d\u5982 --cpus \u6765\u7684\u76f4\u89c2\uff0c\u5e76\u4e14\u5b83\u4f1a\u53d7\u5230\u5f53\u524d\u7cfb\u7edf\u4e0a\u8fd0\u884c\u72b6\u6001\u7684\u5f71\u54cd\uff0c\u4e3a\u4e86\u4e0d\u56e0\u4e3a\u5b83\u7ed9\u5927\u5bb6\u5e26\u6765\u56f0\u6270\uff0c\u6b64\u5904\u5c31\u4e0d\u518d\u8fdb\u884c\u4ecb\u7ecd\u4e86\u3002 --cpu-rt-period \u548c --cpu-rt-runtime \u4e24\u4e2a\u53c2\u6570\uff0c\u4f1a\u5f71\u54cd CPU \u7684\u5b9e\u65f6\u8c03\u5ea6\u5668\u3002\u4f46\u5b9e\u65f6\u8c03\u5ea6\u5668\u9700\u8981\u5185\u6838\u7684\u53c2\u6570\u7684\u652f\u6301\uff0c\u5e76\u4e14\u914d\u7f6e\u5b9e\u65f6\u8c03\u5ea6\u5668\u4e5f\u662f\u4e2a\u9ad8\u7ea7\u6216\u8005\u8bf4\u662f\u5371\u9669\u7684\u64cd\u4f5c\uff0c\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5404\u79cd\u5947\u602a\u7684\u95ee\u9898\uff0c\u6b64\u5904\u4e5f\u4e0d\u518d\u8fdb\u884c\u5c55\u5f00\u3002","title":"\u5c0f\u7ed3"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_5","text":"\u524d\u9762\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u5982\u4f55\u7ba1\u7406\u5bb9\u5668\u7684 CPU \u8d44\u6e90\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u5982\u4f55\u7ba1\u7406\u5bb9\u5668\u7684\u5185\u5b58\u8d44\u6e90\u3002\u76f8\u6bd4 CPU \u8d44\u6e90\u6765\u8bf4\uff0c\u5185\u5b58\u8d44\u6e90\u7684\u7ba1\u7406\u5c31\u7b80\u5355\u5f88\u591a\u4e86\u3002 \u540c\u6837\u7684\uff0c\u6211\u4eec\u5148\u770b\u770b\u6709\u54ea\u4e9b\u53c2\u6570\u53ef\u4f9b\u6211\u4eec\u914d\u7f6e\uff0c\u5bf9\u4e8e\u5176\u542b\u4e49\u6211\u4f1a\u7a0d\u540e\u8fdb\u884c\u4ecb\u7ecd\uff1a ( MoeLove ) \u279c ~ docker run --help | egrep 'memory|oom' --kernel-memory bytes Kernel memory limit -m, --memory bytes Memory limit --memory-reservation bytes Memory soft limit --memory-swap bytes Swap limit equal to memory plus swap: '-1' to enable unlimited swap --memory-swappiness int Tune container memory swappiness ( 0 to 100 ) ( default -1 ) --oom-kill-disable Disable OOM Killer --oom-score-adj int Tune host ' s OOM preferences ( -1000 to 1000 )","title":"\u7ba1\u7406\u5bb9\u5668\u7684\u5185\u5b58\u8d44\u6e90"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#oom","text":"\u5728\u5f00\u59cb\u8fdb\u884c\u5bb9\u5668\u5185\u5b58\u7ba1\u7406\u7684\u5185\u5bb9\u524d\uff0c\u6211\u4eec\u4e0d\u59a8\u5148\u804a\u4e00\u4e2a\u5f88\u5e38\u89c1\uff0c\u53c8\u4e0d\u5f97\u4e0d\u9762\u5bf9\u7684\u95ee\u9898\uff1a OOM\uff08Out Of Memory\uff09 \u3002 \u5f53\u5185\u6838\u68c0\u6d4b\u5230\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u6765\u8fd0\u884c\u7cfb\u7edf\u7684\u67d0\u4e9b\u529f\u80fd\u65f6\u5019\uff0c\u5c31\u4f1a\u89e6\u53d1 OOM \u5f02\u5e38\uff0c\u5e76\u4e14\u4f1a\u4f7f\u7528 OOM Killer \u6765\u6740\u6389\u4e00\u4e9b\u8fdb\u7a0b\uff0c\u817e\u51fa\u7a7a\u95f4\u4ee5\u4fdd\u969c\u7cfb\u7edf\u7684\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e0b OOM killer \u7684\u5927\u81f4\u6267\u884c\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u4e8e\u5927\u5bb6\u7406\u89e3\u540e\u7eed\u5185\u5bb9\u3002 \u5185\u6838\u4e2d OOM Killer \u7684\u4ee3\u7801\uff0c\u5728 torvalds/linux/mm/oom_kill.c \u53ef\u76f4\u63a5\u770b\u5230\uff0c\u8fd9\u91cc\u4ee5 Linux Kernel 5.2 \u4e3a\u4f8b\u3002 \u5f15\u7528\u5176\u4e2d\u7684\u4e00\u6bb5\u6ce8\u91ca\uff1a If we run out of memory, we have the choice between either killing a random task (bad), letting the system crash (worse). OR try to be smart about which process to kill. Note that we don't have to be perfect here, we just have to be good. \u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\uff0c\u5f53\u6211\u4eec\u5904\u4e8e OOM \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u51e0\u79cd\u9009\u62e9\uff0c\u968f\u673a\u5730\u6740\u6b7b\u4efb\u610f\u7684\u4efb\u52a1\uff08\u4e0d\u597d\uff09\uff0c\u8ba9\u7cfb\u7edf\u5d29\u6e83\uff08\u66f4\u7cdf\u7cd5\uff09\u6216\u8005\u5c1d\u8bd5\u53bb\u4e86\u89e3\u53ef\u4ee5\u6740\u6b7b\u54ea\u4e2a\u8fdb\u7a0b\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4eec\u4e0d\u9700\u8981\u8ffd\u6c42\u5b8c\u7f8e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53d8\u597d\uff08be good\uff09\u5c31\u884c\u4e86\u3002 \u4e8b\u5b9e\u4e0a\u786e\u5b9e\u5982\u6b64\uff0c\u65e0\u8bba\u968f\u673a\u5730\u6740\u6389\u4efb\u610f\u8fdb\u7a0b\u6216\u662f\u8ba9\u7cfb\u7edf\u5d29\u6e83\uff0c\u90a3\u90fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002 \u56de\u5230\u5185\u6838\u4ee3\u7801\u4e2d\uff0c\u5f53\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\u65f6\uff0cout_of_memory() \u88ab\u89e6\u53d1\uff0c\u4e4b\u540e\u4f1a\u8c03\u7528 select_bad_process() \u51fd\u6570\uff0c\u9009\u62e9\u4e00\u4e2a bad \u8fdb\u7a0b\u6765\u6740\u6389\u3002 \u90a3\u4ec0\u4e48\u6837\u7684\u8fdb\u7a0b\u662f bad \u8fdb\u7a0b\u5462\uff1f\u603b\u662f\u6709\u4e9b\u6761\u4ef6\u7684\u3002select_bad_process() \u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\uff0c\u5176\u8c03\u7528\u4e86 oom_evaluate_task() \u6765\u5bf9\u8fdb\u7a0b\u8fdb\u884c\u6761\u4ef6\u8ba1\u7b97\uff0c\u6700\u6838\u5fc3\u7684\u5224\u65ad\u903b\u8f91\u662f\u5176\u4e2d\u7684 oom_badness()\u3002 unsigned long oom_badness ( struct task_struct * p , struct mem_cgroup * memcg , const nodemask_t * nodemask , unsigned long totalpages ) { long points ; long adj ; if ( oom_unkillable_task ( p , memcg , nodemask )) return 0 ; p = find_lock_task_mm ( p ); if ( ! p ) return 0 ; /* * Do not even consider tasks which are explicitly marked oom * unkillable or have been already oom reaped or the are in * the middle of vfork */ adj = ( long ) p -> signal -> oom_score_adj ; if ( adj == OOM_SCORE_ADJ_MIN || test_bit ( MMF_OOM_SKIP , & p -> mm -> flags ) || in_vfork ( p )) { task_unlock ( p ); return 0 ; } /* * The baseline for the badness score is the proportion of RAM that each * task's rss, pagetable and swap space use. */ points = get_mm_rss ( p -> mm ) + get_mm_counter ( p -> mm , MM_SWAPENTS ) + mm_pgtables_bytes ( p -> mm ) / PAGE_SIZE ; task_unlock ( p ); /* Normalize to oom_score_adj units */ adj *= totalpages / 1000 ; points += adj ; /* * Never return 0 for an eligible task regardless of the root bonus and * oom_score_adj (oom_score_adj can't be OOM_SCORE_ADJ_MIN here). */ return points > 0 ? points : 1 ; } \u800c\u4e3a\u4e86\u80fd\u591f\u6700\u5feb\u5730\u8fdb\u884c\u9009\u62e9\uff0c\u8fd9\u91cc\u7684\u903b\u8f91\u4e5f\u662f\u5c3d\u53ef\u80fd\u7684\u7b80\u5355\uff0c \u9664\u4e86\u660e\u786e\u6807\u8bb0\u4e0d\u53ef\u6740\u6389\u7684\u8fdb\u7a0b\u5916\uff0c\u76f4\u63a5\u9009\u62e9\u5185\u5b58\u5360\u7528\u6700\u591a\u7684\u8fdb\u7a0b \u3002\uff08\u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684 oom_score_adj \u53ef\u7528\u4e8e\u63a7\u5236\u6743\u91cd\uff09 \u8fd9\u79cd\u9009\u62e9\u7684\u6700\u4e3b\u8981\u7684\u4e24\u4e2a\u597d\u5904\u662f\uff1a 1. \u53ef\u4ee5\u56de\u6536\u5f88\u591a\u5185\u5b58\uff1b 2. \u53ef\u4ee5\u907f\u514d\u7f13\u89e3 OOM \u540e\uff0c\u8be5\u8fdb\u7a0b\u540e\u7eed\u5bf9\u5185\u5b58\u7684\u62a2\u5360\u5f15\u53d1\u540e\u7eed\u518d\u6b21\u7684 OOM\u3002 \u6211\u4eec\u5c06\u6ce8\u610f\u529b\u518d\u56de\u5230 Docker \u81ea\u8eab\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u7528 Docker \u542f\u52a8\u591a\u4e2a\u5bb9\u5668\u8fd0\u884c\u670d\u52a1\u3002\u5f53\u9047\u5230 OOM \u65f6\uff0c\u5982\u679c Docker \u8fdb\u7a0b\u88ab\u6740\u6389\uff0c\u90a3\u5bf9\u6211\u4eec\u7684\u670d\u52a1\u4e5f\u4f1a\u5e26\u6765\u5f88\u5927\u7684\u5f71\u54cd\u3002 \u6240\u4ee5 Docker \u5728\u542f\u52a8\u7684\u65f6\u5019\u9ed8\u8ba4\u8bbe\u7f6e\u4e86\u4e00\u4e2a -500 \u7684 oom_score_adj \u4ee5\u5c3d\u53ef\u80fd\u5730\u907f\u514d Docker \u8fdb\u7a0b\u672c\u8eab\u88ab OOM Killer \u7ed9\u6740\u6389\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8ba9\u67d0\u4e2a\u5bb9\u5668\uff0c\u5c3d\u53ef\u80fd\u5730\u4e0d\u8981\u88ab OOM Killer \u6740\u6389\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\u4f20\u9012 --oom-score-adj \u914d\u7f6e\u4e00\u4e2a\u6bd4\u8f83\u4f4e\u7684\u6570\u503c\u3002 \u4f46\u662f\u6ce8\u610f\uff1a \u4e0d\u8981\u901a\u8fc7 --oom-kill-disable \u7981\u7528\u6389 OOM Killer\uff0c\u6216\u8005\u7ed9\u5bb9\u5668\u8bbe\u7f6e\u4f4e\u4e8e dockerd \u8fdb\u7a0b\u7684 oom_score_adj \u503c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u67d0\u4e9b\u60c5\u51b5\u4e0b\u7cfb\u7edf\u7684\u4e0d\u7a33\u5b9a\u3002\u9664\u975e\u4f60\u660e\u786e\u77e5\u9053\u81ea\u5df1\u7684\u64cd\u4f5c\u5c06\u4f1a\u5e26\u6765\u7684\u5f71\u54cd\u3002","title":"OOM"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_6","text":"\u4ecb\u7ecd\u5b8c\u4e86 OOM\uff0c\u76f8\u6bd4\u4f60\u5df2\u7ecf\u77e5\u9053\u4e86\u5185\u5b58\u8017\u5c3d\u6240\u5e26\u6765\u7684\u5371\u5bb3\uff0c\u6211\u4eec\u6765\u7ee7\u7eed\u4ecb\u7ecd\u5982\u4f55\u7ba1\u7406\u5bb9\u5668\u7684\u5185\u5b58\u8d44\u6e90\u3002 ( MoeLove ) \u279c ~ docker run --help | grep 'memory' --kernel-memory bytes Kernel memory limit -m, --memory bytes Memory limit --memory-reservation bytes Memory soft limit --memory-swap bytes Swap limit equal to memory plus swap: '-1' to enable unlimited swap --memory-swappiness int Tune container memory swappiness ( 0 to 100 ) ( default -1 ) \u53ef\u7528\u7684\u914d\u7f6e\u53c2\u6570\u6709\u4e0a\u8ff0\u51e0\u4e2a\uff0c\u6211\u4eec\u901a\u5e38\u76f4\u63a5\u4f7f\u7528 --memory \u53c2\u6570\u6765\u9650\u5236\u5bb9\u5668\u53ef\u7528\u7684\u5185\u5b58\u5927\u5c0f\u3002\u6211\u4eec\u540c\u6837\u4f7f\u7528\u51e0\u4e2a\u793a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff1a \u542f\u52a8\u4e00\u4e2a\u5bb9\u5668\uff0c\u5e76\u4f20\u9012\u53c2\u6570 --memory 10m \u9650\u5236\u5176\u53ef\u4f7f\u7528\u7684\u5185\u5b58\u4e3a 10 m\u3002 ( MoeLove ) \u279c ~ docker run --rm -it --memory 10m alpine / # \u90a3\u6211\u4eec\u5982\u4f55\u9a8c\u8bc1\u5b83\u7684\u53ef\u7528\u5185\u5b58\u5927\u5c0f\u662f\u591a\u5c11\u5462\uff1f\u5728\u7269\u7406\u673a\u4e0a\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528 free \u5de5\u5177\u8fdb\u884c\u67e5\u770b\u3002\u4f46\u5728\u5bb9\u5668\u73af\u5883\u5185\uff0c\u5b83\u8fd8\u662f\u5426\u751f\u6548\u5462\uff1f / # free -m total used free shared buffers cached Mem: 15932 14491 1441 1814 564 3632 -/+ buffers/cache: 10294 5637 Swap: 8471 693 7778 \u5f88\u660e\u663e\uff0c\u4f7f\u7528 free \u5f97\u5230\u7684\u7ed3\u679c\u662f\u5bbf\u4e3b\u673a\u4e0a\u7684\u4fe1\u606f\u3002\u5f53\u7136\uff0c\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u4ecb\u7ecd\u4e86 docker stats \u547d\u4ee4\uff0c\u6211\u4eec\u4f7f\u7528\u5b83\u6765\u67e5\u770b\u5f53\u524d\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff1a ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS e260e91874d8 busy_napier 0 .00% 1 .172MiB / 10MiB 11 .72% 16 .1kB / 0B 0B / 0B 1 \u53ef\u4ee5\u770b\u5230 MEM USAGE / LIMIT \u90a3\u4e00\u5217\u4e2d\u7684\u4fe1\u606f\u5df2\u7ecf\u751f\u6548\uff0c\u662f\u6211\u4eec\u9884\u671f\u7684\u6837\u5b50\u3002 \u90a3\u6211\u4eec\u662f\u5426\u8fd8\u6709\u5176\u4ed6\u65b9\u5f0f\u67e5\u770b\u6b64\u4fe1\u606f\u5462\uff1f\u5f53\u7136\u6709\uff1a # \u5728\u5bb9\u5668\u5185\u6267\u884c / # cat /sys/fs/cgroup/memory/memory.limit_in_bytes 10485760 \u6216\u8005\u53ef\u4ee5\u5728\u5bbf\u4e3b\u673a\u4e0a\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ cat /sys/fs/cgroup/memory/system.slice/docker- $( docker inspect --format '{{ .Id}}' $( docker ps -ql )) .scope/memory.limit_in_bytes 10485760 \u6ce8\u610f\uff1a\u4ee5\u4e0a\u547d\u4ee4\u5728 Linux 5.2 \u5185\u6838\u4e0b\u6d4b\u8bd5\u901a\u8fc7\uff0c\u4e0d\u540c\u7248\u672c\u4e4b\u95f4\u76ee\u5f55\u7ed3\u6784\u7565\u6709\u5dee\u5f02\u3002","title":"\u7ba1\u7406\u5bb9\u5668\u7684\u5185\u5b58\u8d44\u6e90"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_7","text":"\u5f53\u5bb9\u5668\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\uff0c\u5176\u4e2d\u7684\u8fdb\u7a0b\u4f7f\u7528\u7684\u5185\u5b58\u53d8\u591a\u4e86\uff0c\u6211\u4eec\u60f3\u5141\u8bb8\u5bb9\u5668\u4f7f\u7528\u66f4\u591a\u5185\u5b58\u8d44\u6e90\uff0c\u90a3\u8981\u5982\u4f55\u64cd\u4f5c\u5462\uff1f \u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u524d\u9762\u4ecb\u7ecd\u7684 docker update \u547d\u4ee4\u5b8c\u6210\u3002 \u6bd4\u5982\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff0c\u5c06\u53ef\u7528\u5185\u5b58\u6269\u5927\u81f3 20m\uff1a ( MoeLove ) \u279c ~ docker update --memory 20m $( docker ps -ql ) e260e91874d8 # \u9a8c\u8bc1\u662f\u5426\u751f\u6548 ( MoeLove ) \u279c ~ docker stats --no-stream $( docker ps -ql ) CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS e260e91874d8 busy_napier 0 .00% 1 .434MiB / 20MiB 7 .17% 35 .3kB / 0B 0B / 0B 1 \u5982\u679c\u8fd8\u4e0d\u591f\uff0c\u9700\u8981\u6269\u5927\u81f3 100m \u5462\uff1f ( MoeLove ) \u279c ~ docker update --memory 100m $( docker ps -ql ) Error response from daemon: Cannot update container e260e91874d8181b6d0078c853487613907cd9ada2af35d630a7bef204654982: Memory limit should be smaller than already set memoryswap limit, update the memoryswap at the same time \u4f1a\u53d1\u73b0\u8fd9\u91cc\u6709\u4e2a\u62a5\u9519\u4fe1\u606f\u3002\u5927\u610f\u662f memory limit \u5e94\u8be5\u6bd4\u5df2\u7ecf\u914d\u7f6e\u7684 memoryswap limit \u5c0f\uff0c\u9700\u8981\u540c\u65f6\u66f4\u65b0 memoryswap\u3002 \u4f60\u53ef\u80fd\u4f1a\u56f0\u60d1\uff0c\u4e4b\u524d\u6211\u4eec\u53ea\u662f\u9650\u5236\u4e86\u5185\u5b58\u4e3a 10m\uff0c\u5e76\u4e14\u6269\u5927\u81f3 20m \u7684\u65f6\u5019\u662f\u6210\u529f\u4e86\u7684\u3002\u4e3a\u4ec0\u4e48\u5230 100m \u7684\u65f6\u5019\u5c31\u4f1a\u51fa\u9519\uff1f \u8fd9\u5c31\u6d89\u53ca\u5230\u4e86\u8fd9\u4e9b\u53c2\u6570\u7684\u7279\u5b9a\u884c\u4e3a\u4e86\uff0c\u6211\u6765\u4e3a\u4f60\u4e00\u4e00\u4ecb\u7ecd\u3002","title":"\u66f4\u65b0\u5bb9\u5668\u5185\u5b58\u8d44\u6e90\u9650\u5236"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_8","text":"\u8fd9\u91cc\u7684\u7279\u5b9a\u53c2\u6570\u884c\u4e3a\uff0c\u4e3b\u8981\u662f\u6307\u6211\u4eec\u524d\u9762\u4f7f\u7528\u7684 --memory \u548c\u672a\u4ecb\u7ecd\u8fc7\u7684 --memory-swap \u8fd9\u4e24\u4e2a\u53c2\u6570\u3002 --memory \u7528\u4e8e\u9650\u5236\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u800c --memory-swap \u5219\u8868\u793a\u5185\u5b58\u548c Swap \u7684\u603b\u548c\u3002 \u8fd9\u89e3\u91ca\u4e86\u4e0a\u9762\u201cMemory limit should be smaller than already set memoryswap limit\u201d\uff0c\u56e0\u4e3a --memory-swap \u59cb\u7ec8\u5e94\u8be5\u5927\u4e8e\u7b49\u4e8e --memory \uff08\u6bd5\u7adf Swap \u6700\u5c0f\u4e5f\u53ea\u80fd\u662f 0 \uff09\u3002 \u5982\u679c\u53ea\u6307\u5b9a\u4e86 --memory \u5219\u6700\u7ec8 --memory-swap \u5c06\u4f1a\u8bbe\u7f6e\u4e3a --memory \u7684\u4e24\u500d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u53ea\u4f20\u9012 --memory \u7684\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u53ea\u80fd\u4f7f\u7528\u4e0e --memory \u76f8\u540c\u5927\u5c0f\u7684 Swap\u3002 \u8fd9\u4e5f\u89e3\u91ca\u4e86\u4e0a\u9762\u201c\u76f4\u63a5\u6269\u5927\u81f3 20m \u7684\u65f6\u5019\u80fd\u6210\u529f\uff0c\u800c\u6269\u5927\u5230 100m \u7684\u65f6\u5019\u4f1a\u51fa\u9519\u201d\uff0c\u5728\u4e0a\u8ff0\u573a\u666f\u4e2d\u53ea\u6307\u5b9a\u4e86 --memory \u4e3a 10m \uff0c\u6240\u4ee5 --memory-swap \u5c31\u9ed8\u8ba4\u88ab\u8bbe\u7f6e\u6210\u4e86 20m\u3002 \u5982\u679c --memory-swap \u548c --memory \u8bbe\u7f6e\u4e86\u76f8\u540c\u503c\uff0c\u5219\u8868\u793a\u4e0d\u4f7f\u7528 Swap\u3002 \u5982\u679c --memory-swap \u8bbe\u7f6e\u4e3a -1 \u5219\u8868\u793a\u4e0d\u5bf9\u5bb9\u5668\u4f7f\u7528\u7684 Swap \u8fdb\u884c\u9650\u5236\u3002 \u5982\u679c\u8bbe\u7f6e\u4e86 --memory-swap \u53c2\u6570\uff0c\u5219\u5fc5\u987b\u8bbe\u7f6e --memory \u53c2\u6570\u3002","title":"\u5185\u5b58\u9650\u5236\u53c2\u6570\u7684\u7279\u5b9a\u884c\u4e3a"},{"location":"docker/%E5%AE%B9%E5%99%A8%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/#_9","text":"\u81f3\u6b64\uff0c\u6211\u4fbf\u4e3a\u4f60\u4ecb\u7ecd\u4e86\u5bb9\u5668\u8d44\u6e90\u7ba1\u7406\u7684\u6838\u5fc3\u5185\u5bb9\uff0c\u5305\u62ec\u7ba1\u7406\u5bb9\u5668\u7684 CPU \u8d44\u6e90\u548c\u5185\u5b58\u8d44\u6e90\u3002\u4e3a\u5bb9\u5668\u8fdb\u884c\u5408\u7406\u7684\u8d44\u6e90\u63a7\u5236\uff0c\u6709\u5229\u4e8e\u63d0\u9ad8\u6574\u4f53\u73af\u5883\u7684\u7a33\u5b9a\u6027\uff0c\u907f\u514d\u8d44\u6e90\u62a2\u5360\u6216\u5927\u91cf\u5185\u5b58\u5360\u7528\u5bfc\u81f4 OOM\uff0c\u8fdb\u7a0b\u88ab\u6740\u6389\u7b49\u60c5\u51b5\u3002 \u5bf9 CPU \u8fdb\u884c\u7ba1\u7406\u65f6\uff0c\u5efa\u8bae\u4f7f\u7528 --cpus \uff0c\u8bed\u4e49\u65b9\u9762\u4f1a\u6bd4\u8f83\u6e05\u6670\u3002\u5982\u679c\u662f\u5bf9 Linux \u7684 CPU \u8c03\u5ea6\u5668 CFS \u5f88\u719f\u6089\uff0c\u5e76\u4e14\u6709\u5f3a\u70c8\u7684\u5b9a\u5236\u5316\u9700\u6c42\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u4f7f\u7528 --cpu-period \u548c --cpu-quota \u6bd4\u8f83\u5408\u9002\u3002 \u5bf9\u5185\u5b58\u8fdb\u884c\u7ba1\u7406\u65f6\uff0c\u6709\u4e2a --memory-swappiness \u53c2\u6570\u4e5f\u9700\u8981\u6ce8\u610f\u4e0b\uff0c\u5b83\u53ef\u8bbe\u7f6e\u4e3a 0~100 \u7684\u767e\u5206\u6bd4\uff0c\u4e0e\u6211\u4eec\u5e73\u65f6\u89c1\u5230\u7684 swappiness \u884c\u4e3a\u57fa\u672c\u4e00\u81f4\uff0c\u8bbe\u7f6e\u4e3a 0 \u8868\u793a\u4e0d\u4f7f\u7528\u533f\u540d\u9875\u9762\u4ea4\u6362\uff0c\u8bbe\u7f6e\u4e3a 100 \u5219\u8868\u793a\u533f\u540d\u9875\u9762\u90fd\u53ef\u88ab\u4ea4\u6362\u3002\u5982\u679c\u4e0d\u6307\u5b9a\u7684\u8bdd\uff0c\u5b83\u9ed8\u8ba4\u4f1a\u4ece\u4e3b\u673a\u4e0a\u7ee7\u627f\u3002 \u5728\u672c\u7bc7\u4e2d\uff0c\u5173\u4e8e\u5728\u5bbf\u4e3b\u673a\u4e0a\u67e5\u770b\u5bb9\u5668\u7684\u5185\u5b58\u9650\u5236\uff0c\u6211\u7ed9\u51fa\u4e86\u4e00\u4e2a\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ cat /sys/fs/cgroup/memory/system.slice/docker- $( docker inspect --format '{{ .Id}}' $( docker ps -ql )) .scope/memory.limit_in_bytes 10485760 \u5b83\u5177\u4f53\u662f\u4ec0\u4e48\u542b\u4e49\u5462\uff1f\u4e0b\u7bc7\u300a\u6df1\u5165\u5256\u6790\u5bb9\u5668\u300b\u4e2d\u6211\u5c06\u8be6\u7ec6\u8bf4\u660e\u3002","title":"\u603b\u7ed3"},{"location":"docker/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%AE%B9%E5%99%A8/","text":"\u8fd9\u662f\u672c\u4e13\u680f\u7684\u7b2c\u4e8c\u90e8\u5206\uff1a\u5bb9\u5668\u7bc7\uff0c\u5171 6 \u7bc7\uff0c\u5e2e\u52a9\u5927\u5bb6\u7531\u6d45\u5165\u6df1\u7684\u8ba4\u8bc6\u548c\u638c\u63e1\u5bb9\u5668\u3002 \u524d\u9762\uff0c\u6211\u4e3a\u4f60\u4ecb\u7ecd\u4e86\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u548c\u8d44\u6e90\u7ba1\u7406\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u8ba9\u4f60\u5bf9\u5bb9\u5668\u6709\u4e86\u66f4\u52a0\u7075\u6d3b\u7684\u63a7\u5236\u3002 \u672c\u7bc7\uff0c\u6211\u6765\u4e3a\u4f60\u6df1\u5165\u5256\u6790\u5bb9\u5668\uff0c\u4ece\u672c\u8d28\u4e0a\u7406\u89e3\u5230\u5e95\u5bb9\u5668\u662f\u4ec0\u4e48\u3002 \u5728\u6b63\u5f0f\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u5b66\u4e60\uff1a \u4f7f\u7528 Docker \u76f8\u5173\u7684\u4e00\u4e9b\u547d\u4ee4\u53ef\u4ee5\u5b8c\u6210\u5bf9\u5bb9\u5668\u751f\u547d\u5468\u671f\u7684\u7ba1\u7406\uff0c\u5305\u62ec\u542f\u52a8\u3001\u6682\u505c\u3001\u505c\u6b62\u3001\u5220\u9664\u7b49\uff1b \u901a\u8fc7 docker update \u547d\u4ee4\u53ef\u70ed\u66f4\u65b0\u5bb9\u5668\u7684\u4e00\u4e9b\u914d\u7f6e\uff0c\u5305\u62ec CPU\uff0c\u5185\u5b58\u7b49\u8d44\u6e90\u9650\u5236\uff1b \u5728\u5bbf\u4e3b\u673a\u4e0a\u53ef\u4f7f\u7528 docker top \u548c docker stats \u547d\u4ee4\u62ff\u5230\u5bb9\u5668\u7684\u4e00\u4e9b\u72b6\u6001\uff0c\u5e76\u4e14\u4e5f\u53ef\u901a\u8fc7\u8bbf\u95ee /sys/fs/cgroup \u4e0b\u7684\u4e00\u4e9b\u7279\u5b9a\u76ee\u5f55\u6216\u6587\u4ef6\uff0c\u5f97\u5230\u5bb9\u5668\u7684\u76f8\u5173\u4fe1\u606f\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u6765\u66f4\u8fdb\u4e00\u6b65\uff0c\u5bf9\u5bb9\u5668\u8fdb\u884c\u6df1\u5165\u5256\u6790\u3002 \u5bb9\u5668\u662f\u4ec0\u4e48 \u00b6 \u5728\u524d\u9762\u6211\u4eec\u4e00\u76f4\u90fd\u5728\u7528 Docker \u542f\u52a8\u548c\u7ba1\u7406\u5bb9\u5668\uff0c\u7b2c\u4e00\u90e8\u5206\u4e2d\u4e5f\u63d0\u5230\u4e86\u5173\u4e8e\u5bb9\u5668\u6280\u672f\u548c Docker \u7684\u53d1\u5c55\u5386\u7a0b\uff0c\u6211\u4eec\u4e0d\u59a8\u770b\u770b Docker \u5bf9\u5bb9\u5668\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\u3002 \u5f15\u7528 Docker \u5b98\u7f51\u5bf9\u5bb9\u5668\u7684\u4e00\u4e2a\u5b9a\u4e49\uff1a What is a Container? A standardized unit of software. \u5bb9\u5668\u662f\u4ec0\u4e48\uff1f\u4e00\u4e2a\u8f6f\u4ef6\u7684**\u6807\u51c6\u5316\u5355\u5143**\u3002 \u6211\u4eec\u6765\u5206\u6790\u4e0b\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u9996\u5148\u662f**\u8f6f\u4ef6**\uff0c\u8ddf\u5bb9\u5668\u76f8\u5173\u7684\u662f\u8f6f\u4ef6\u800c\u4e0d\u662f\u786c\u4ef6\uff0c\u800c\u6211\u4eec\u4e5f\u77e5\u9053\u8f6f\u4ef6\u4e3b\u8981\u5206\u4e3a\u7cfb\u7edf\u8f6f\u4ef6\u548c\u5e94\u7528\u8f6f\u4ef6\uff0c\u800c\u5bb9\u5668\u4e2d\u8fd0\u884c\u7684\u7a0b\u5e8f\u5e76\u975e\u7cfb\u7edf\u8f6f\u4ef6\uff0c\u5b83\u5b9e\u9645\u8fd0\u884c\u5728\u5bbf\u4e3b\u673a\u4e0a\uff0c\u4e0e\u5bbf\u4e3b\u673a\u4e0a\u7684\u5176\u4ed6\u8fdb\u7a0b\u5171\u7528\u4e00\u4e2a\u5185\u6838\uff0c\u8fd9\u4e5f\u662f\u5bb9\u5668\u4e0e\u4f20\u7edf\u865a\u62df\u673a\u7684\u4e00\u4e2a\u5f88\u5927\u533a\u522b\u3002 \u518d\u8005\uff0c \u6807\u51c6\u5316\u5355\u5143 \uff0c\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u8bf4\u4e86\uff0c\u5bb9\u5668\u5185\u8fd0\u884c\u7684\u7a0b\u5e8f\u5e76\u975e\u7cfb\u7edf\u8f6f\u4ef6\uff0c\u6bcf\u4e2a\u8f6f\u4ef6\u8fd0\u884c\u90fd\u9700\u8981\u6709\u5fc5\u8981\u7684\u73af\u5883\uff0c\u5305\u62ec\u4e00\u4e9b lib \u5e93\u4e4b\u7c7b\u7684\uff0c\u800c\u5982\u4f55\u80fd\u5728\u590d\u6742\u7684\u73af\u5883\u4e2d\u505a\u5230\u201c\u6807\u51c6\u5316\u201d\u5462\uff1f\u663e\u7136\uff0c\u9694\u79bb\u662f\u4e00\u4e2a\u6700\u4f73\u9009\u62e9\u3002\u5c06\u7a0b\u5e8f\u53ca\u5176\u6240\u9700\u7684\u73af\u5883 /lib \u5e93\u4e4b\u7c7b\u7684\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u5e76\u4e0e\u7cfb\u7edf\u73af\u5883\u9694\u79bb\uff0c\u8fd9\u5c31\u5f88\u5bb9\u6613\u505a\u5230\u201c\u6807\u51c6\u5316\u201d\u4e86\u3002 \u8bf4\u767d\u4e86\uff0c \u5bb9\u5668\u5176\u5b9e\u662f\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7684\u201c\u4e00\u7ec4\u201d\u8fdb\u7a0b\uff0c\u5f53\u7136\u8fd9\u7ec4\u8fdb\u7a0b\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\uff1b\u5b83\u4eec\u6709\u76f8\u540c\u7684\u7279\u6027\uff0c\u540c\u6837\u6240\u53d7\u7684\u9650\u5236\u4e5f\u76f8\u540c\uff1b\u53e6\u5916\u65e2\u7136\u53eb\u505a\u5bb9\u5668\uff0c\u5f88\u81ea\u7136\u5730\u6211\u4eec\u8ba4\u4e3a\u5b83\u4eec\u4e0e\u5916\u754c\u53ef\u4ee5\u8fdb\u884c\u9694\u79bb/\u5e94\u8be5\u6709\u4e00\u4e2a\u5206\u754c\u7ebf\u3002 \u5728\u672c\u4e13\u680f\u7684\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4e3a\u4f60\u4ecb\u7ecd\u8fc7 Docker \u548c\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\u5386\u7a0b\u3002\u672c\u7bc7\u4e2d\uff0c\u6211\u4eec\u4e0d\u59a8\u4ece\u8fdb\u7a0b\u7684\u89d2\u5ea6\u6765\u6df1\u5165\u5bb9\u5668\u5185\u90e8\u3002 \u83b7\u53d6\u5bb9\u5668\u5e95\u5c42\u4fe1\u606f \u00b6 Docker \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u65b9\u4fbf\u7684\u547d\u4ee4 docker inspect \uff0c\u4f7f\u7528\u6b64\u547d\u4ee4\u53ef\u4ee5\u5f97\u5230\u5bb9\u5668\u7684\u5e95\u5c42\u4fe1\u606f\u3002\u6211\u4eec\u5148\u542f\u52a8\u4e00\u4e2a Alpine Linux \u7684\u5bb9\u5668\uff0c\u7136\u540e\u7528\u6b64\u547d\u4ee4\u67e5\u770b\u8be5\u5bb9\u5668\u7684\u4fe1\u606f\uff1a ( MoeLove ) \u279c ~ docker run --rm -it alpine / # \u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ docker inspect $( docker ps -ql ) [ { \"Id\" : \"2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7\" , \"Path\" : \"/bin/sh\" , \"State\" : { \"Status\" : \"running\" , \"Running\" : true, \"Paused\" : false, \"Restarting\" : false, \"OOMKilled\" : false, \"Dead\" : false, \"Pid\" : 9911 , \"ExitCode\" : 0 , \"Error\" : \"\" , ... } , ... \"Image\" : \"sha256:055936d3920576da37aa9bc460d70c5f212028bda1c08c0879aedf03d7a66ea1\" , \"HostnamePath\" : \"/var/lib/docker/containers/2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7/hostname\" , \"HostsPath\" : \"/var/lib/docker/containers/2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7/hosts\" , \"Name\" : \"/sleepy_austin\" , \"Driver\" : \"overlay2\" , \"Platform\" : \"linux\" , \"Config\" : { \"Hostname\" : \"2bc870194548\" , \"Domainname\" : \"\" , \"User\" : \"\" , \"AttachStdin\" : true, \"AttachStdout\" : true, \"AttachStderr\" : true, \"Tty\" : true, \"OpenStdin\" : true, \"StdinOnce\" : true, \"Env\" : [ \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" ] , \"Cmd\" : [ \"/bin/sh\" ] , \"Image\" : \"alpine\" , \"Volumes\" : null, \"WorkingDir\" : \"\" , \"Entrypoint\" : null, \"OnBuild\" : null, \"Labels\" : {} } , ... } ] \u7bc7\u5e45\u539f\u56e0\uff0c\u7701\u7565\u4e86\u5176\u4e2d\u90e8\u5206\u8f93\u51fa\u3002\u6211\u4eec\u770b\u5230\u8fd9\u4e2a\u547d\u4ee4\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u6240\u4ee5\u5b83\u652f\u6301\u540c\u65f6\u67e5\u770b\u591a\u4e2a\u5bb9\u5668\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u73b0\u5728\u5173\u6ce8\u7684\u91cd\u70b9\u5728\u4e8e State \u5b57\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u4e86 Pid \u7b49\u4fe1\u606f\u3002 \u5f53\u7136\u4f60\u4e5f\u4f1a\u56e0\u6b64\u53d1\u73b0\uff0cState \u5b57\u6bb5\u5185\u7684\u4fe1\u606f\u5b8c\u5168\u7b26\u5408\u6211\u4eec\u5728\u300a\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u300b\u4e2d\u7684\u4ecb\u7ecd\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u76f4\u63a5\u53d6\u8fd9\u4e2a Pid \u7684\u5185\u5bb9\u5373\u53ef\u3002\u901a\u5e38\u6211\u4eec\u4f1a\u4f7f\u7528 grep \u547d\u4ee4\u4ece\u8be5\u8f93\u51fa\u4e2d\u8fc7\u6ee4\u4fe1\u606f\uff0c\u4f46 Docker \u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u66f4\u52a0\u4fbf\u6377\u7684\u65b9\u5f0f\uff1a ( MoeLove ) \u279c ~ docker inspect --format '{{.State.Pid}}' $( docker ps -ql ) 9911 docker inspect \u547d\u4ee4\u6709\u4e00\u4e2a --format \u9009\u9879\uff0c\u53ef\u652f\u6301 Go \u8bed\u8a00\u6a21\u677f\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4e0a\u8ff0\u547d\u4ee4\u5f97\u5230\u5bb9\u5668\u7684\u5b9e\u9645 Pid\u3002\u5f53\u7136\uff0cGo \u8bed\u8a00\u6a21\u677f\u4e5f\u652f\u6301\u5404\u79cd\u547d\u4ee4\u548c\u8868\u8fbe\u5f0f\uff0c\u53ef\u76f4\u63a5\u5728\u5b98\u65b9\u6587\u6863\u5b66\u4e60\uff0c\u540e\u7eed\u5185\u5bb9\u4e2d\u5c06\u4e0d\u518d\u7279\u522b\u8fdb\u884c\u8bf4\u660e\u3002 /proc \u6587\u4ef6\u7cfb\u7edf \u00b6 \u65e2\u7136\u8981\u4ece\u8fdb\u7a0b\u7684\u89d2\u5ea6\u5bf9\u5bb9\u5668\u8fdb\u884c\u6df1\u5165\u7684\u4e86\u89e3\uff0c\u90a3\u5c31\u4e0d\u5f97\u4e0d\u63d0 /proc \u6587\u4ef6\u7cfb\u7edf\u4e86\uff0c\u5b83\u662f\u4e00\u79cd\u865a\u62df\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u8be5\u6587\u4ef6\u7cfb\u7edf\u6302\u8f7d\u4e8e /proc \u76ee\u5f55\u4e0b\uff0c\u5305\u542b\u4e86\u5404\u79cd\u7528\u4e8e\u5c55\u793a\u5185\u6838\u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u5141\u8bb8\u8fdb\u7a0b\u901a\u8fc7\u666e\u901a\u7684 I/O \u8c03\u7528\u6765\u76f4\u63a5\u8bfb\u53d6\uff0c\u5f53\u7136\u6709\u4e9b\u5185\u5bb9\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4fee\u6539\u3002 \u53e6\u5916\uff0c\u4e4b\u6240\u4ee5\u79f0\u5b83\u4e3a\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff0c\u662f\u56e0\u4e3a\u5b83\u5e76\u4e0d\u771f\u6b63\u5b58\u5728\u4e8e\u78c1\u76d8\u4e2d\uff0c\u800c\u662f\u7531\u5185\u6838\u8fdb\u884c\u521b\u5efa\u66f4\u65b0\u548c\u7ba1\u7406\u7684\u3002 \u90a3\u6211\u4eec\u60f3\u8981\u4e86\u89e3\u7684\u5bb9\u5668\u8fdb\u7a0b\uff0c\u5728 /proc \u6587\u4ef6\u7cfb\u7edf\u4e2d\u662f\u4e00\u79cd\u600e\u6837\u7684\u5f62\u5f0f\u5462\uff1f /proc \u6587\u4ef6\u7cfb\u7edf\u5bf9\u4e8e\u8fdb\u7a0b\u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a /proc/$PID \u7684\u76ee\u5f55\uff0c\u5176\u4e2d\u5305\u542b\u7740\u8fdb\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u73b0\u5728\u6765\u67e5\u770b\u4e0b\u521a\u624d\u5bb9\u5668\u8fdb\u7a0b\u7684\u76f8\u5173\u4fe1\u606f\u3002 ( MoeLove ) \u279c ~ sudo ls /proc/9911/ attr comm fd loginuid mountstats oom_score_adj schedstat stat timerslack_ns autogroup coredump_filter fdinfo map_files net pagemap sessionid statm uid_map auxv cpuset gid_map maps ns personality setgroups status wchan cgroup cwd io mem numa_maps projid_map smaps syscall clear_refs environ latency mountinfo oom_adj root smaps_rollup task cmdline exe limits mounts oom_score sched stack timers \u53ef\u4ee5\u770b\u5230 /proc \u6587\u4ef6\u7cfb\u7edf\u5185\u5305\u542b\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u5ffd\u7565\u6389\u4e00\u4e9b\u5e38\u89c4\u5185\u5bb9\uff0c\u91cd\u70b9\u5206\u6790\u4e0e\u5bb9\u5668\u76f8\u5173\u7684\u90e8\u5206\u3002\u611f\u5174\u8da3\u53ef\u4ee5\u53ef\u4ee5\u81ea\u884c\u4e86\u89e3\u4e0b /proc \u6587\u4ef6\u7cfb\u7edf\u3002 cgroup \u6587\u4ef6 \u00b6 \u8fd9\u5176\u4e2d\u6709\u4e00\u4e2a cgroup \u6587\u4ef6\uff0c\u6211\u4eec\u770b\u770b\u5176\u4e2d\u7684\u5185\u5bb9\uff1a ( MoeLove ) \u279c ~ sudo cat /proc/9911/cgroup 11 :perf_event:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 10 :freezer:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 9 :blkio:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 8 :devices:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 7 :net_cls,net_prio:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 6 :pids:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 5 :cpu,cpuacct:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 4 :cpuset:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 3 :hugetlb:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 2 :memory:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 1 :name = systemd:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 0 ::/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope \u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u6709\u4e09\u5217\uff0c\u7b2c\u4e00\u5217\u662f\u4e2a\u6570\u5b57\uff0c\u6682\u4e14\u4e0d\u8c08\uff1b\u7b2c\u4e8c\u5217\u770b\u7740\u5f88\u50cf\u4e00\u4e9b\u7279\u5b9a\u7684\u5c5e\u6027\uff0c\u6bd4\u5982 Memory \u548c CPU \u4e4b\u7c7b\u7684\uff1b\u7b2c\u4e09\u5217\u5219\u5f88\u50cf\u662f\u76ee\u5f55\u7ed3\u6784\uff0c/system.slice/docker-\u5bb9\u5668\u7684ID\u3002 \u8fd8\u8bb0\u5f97\u5728\u4e0a\u4e00\u7bc7\u6700\u540e\u6211\u63d0\u4f9b\u7684\uff0c\u7528\u4e8e\u5728\u5bbf\u4e3b\u673a\u4e0a\u67e5\u770b\u5bb9\u5668\u5185\u5b58\u9650\u5236\u7684\u547d\u4ee4\u4e48\uff1f\u662f\u5426\u611f\u89c9\u5f88\u719f\u6089\uff1f\u5982\u679c\u9057\u5fd8\u4e86\uff0c\u53ef\u4ee5\u518d\u56de\u8fc7\u5934\u53bb\u590d\u4e60\u4e00\u4e0b\u3002 \u53e6\u4e00\u4e2a\u91cd\u8981\u662f\u4e00\u4e2a\u540d\u4e3a ns \u7684\u76ee\u5f55\uff1a ( MoeLove ) \u279c ~ sudo ls -l --time-style = '+' /proc/9911/ns total 0 lrwxrwxrwx. 1 root root 0 cgroup -> 'cgroup:[4026531835]' lrwxrwxrwx. 1 root root 0 ipc -> 'ipc:[4026532722]' lrwxrwxrwx. 1 root root 0 mnt -> 'mnt:[4026532720]' lrwxrwxrwx. 1 root root 0 net -> 'net:[4026532726]' lrwxrwxrwx. 1 root root 0 pid -> 'pid:[4026532723]' lrwxrwxrwx. 1 root root 0 pid_for_children -> 'pid:[4026532723]' lrwxrwxrwx. 1 root root 0 user -> 'user:[4026531837]' lrwxrwxrwx. 1 root root 0 uts -> 'uts:[4026532721]' \u53ef\u4ee5\u770b\u5230\u5176\u4e2d\u7684\u5185\u5bb9\u90fd\u662f\u4e00\u4e9b\u94fe\u63a5\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u6682\u65f6\u4e0d\u5bf9\u5b83\u8fdb\u884c\u5c55\u5f00\uff0c\u6709\u4e2a\u5927\u6982\u5370\u8c61\u5373\u53ef\u3002\u540e\u7eed\u5185\u5bb9\u4f1a\u518d\u8fdb\u884c\u6df1\u5165\u3002 \u8fdb\u7a0b\u6811 \u00b6 \u6211\u4eec\u4f7f\u7528 pstree \u547d\u4ee4\u67e5\u770b\u4e0b\u5bb9\u5668\u5185\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u6811\u3002 ( MoeLove ) \u279c ~ pstree -Aaps 9911 systemd,1 --switched-root --system --deserialize 33 ` -containerd,1130 ` -containerd-shim,9892 -namespace moby -workdir... ` -sh,9911 \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u5185\u8fdb\u7a0b\u4ece\u6839\u5f00\u59cb\u4f9d\u6b21\u4e3a\uff1a systemd ( 1 ) ---containerd ( 1130 ) ---containerd-shim ( 9892 ) ---sh ( 9911 ) \u8fd9\u662f\u4ece\u53e6\u4e00\u4e2a\u4fa7\u9762\u53cd\u6620\u4e86\u5bb9\u5668\u7684\u521b\u5efa\u8fc7\u7a0b\uff0c\u4f46\u5728\u672c\u7bc7\u4e2d\uff0c\u53ea\u9700\u8981\u4f60\u5bf9\u5b83\u4eec\u6709\u4e2a\u5927\u81f4\u5370\u8c61\u5373\u53ef\u3002 \u5f53\u6211\u4eec\u5728\u5bb9\u5668\u5185\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u53c8\u4f1a\u662f\u4ec0\u4e48\u6837\u5462\uff1f\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u3002 \u5728\u5bb9\u5668\u5185\u8fd0\u884c sha256sum \u7a0b\u5e8f\uff1a / # sha256sum /dev/zero \u5728\u5bbf\u4e3b\u673a\u4e0a\u518d\u6b21\u67e5\u770b\u8fdb\u7a0b\u6811\uff1a ( MoeLove ) \u279c ~ pstree -Aps 9911 systemd ( 1 ) ---containerd ( 1130 ) ---containerd-shim ( 9892 ) ---sh ( 9911 ) ---sha256sum ( 26985 ) \u53ef\u4ee5\u770b\u5230\u5728\u5bb9\u5668\u5185\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u90fd\u662f\u5bb9\u5668\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u3002\u7531\u4e8e Linux \u4e0a\u7684\u7236\u5b50\u8fdb\u7a0b\u6709\u4e00\u5b9a\u7684\u7ee7\u627f\u5173\u7cfb\uff0c\u6240\u4ee5\u5927\u591a\u6570\u7684\u80fd\u529b\u548c\u9650\u5236\u4e5f\u90fd\u4f1a\u88ab\u7ee7\u627f\u4e0b\u6765\u3002 \u6362\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u81ea\u7136\u4e5f\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u4ee5\u5bb9\u5668\u8fdb\u7a0b\u5f00\u59cb\u7684\u5206\u7ec4\u3002 \u603b\u7ed3 \u00b6 \u672c\u7bc7\uff0c\u6211\u4e3a\u4f60\u4ece\u8fdb\u7a0b\u7684\u89d2\u5ea6\u4ecb\u7ecd\u4e86\u5bb9\u5668\u7684\u4e00\u4e9b\u7ec6\u8282\uff0c\u4f46\u672c\u7bc7\u5e76\u6ca1\u6709\u8fc7\u4e8e\u6df1\u5165\u539f\u7406\uff0c\u53ea\u662f\u901a\u8fc7 docker inspect \u548c Linux \u7684 /proc \u6587\u4ef6\u7cfb\u7edf\u4e3a\u4f60\u505a\u4e86\u4e00\u4e9b\u94fa\u57ab\uff0c\u65b9\u4fbf\u540e\u7eed\u5185\u5bb9\u7684\u5b66\u4e60\u3002 \u5176\u4e2d docker inspect \u547d\u4ee4\u914d\u5408 --format \u53c2\u6570\u7684 Go \u6a21\u677f\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5b8c\u6210\u5f88\u591a\u9700\u8981\u5bb9\u5668\u5e95\u5c42\u4fe1\u606f\u7684\u5e38\u89c4\u9700\u6c42\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 jq \u5de5\u5177\u89e3\u6790\u5176\u8fd4\u56de\u7684 JSON \u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 /proc \u6587\u4ef6\u7cfb\u7edf\uff0c\u4ee5\u53ca\u5176\u4e2d\u7684 cgroup \u548c ns \u5c06\u4f1a\u5bf9\u7406\u89e3\u548c\u638c\u63e1\u5bb9\u5668\u7684\u6838\u5fc3\u539f\u7406\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u4e0b\u4e00\u7bc7\uff0c\u6211\u5c06\u4e3a\u4f60\u89e3\u5bc6\u5bb9\u5668\u7684\u6838\u5fc3\u6280\u672f\uff0c\u5c06\u672c\u7bc7\u9057\u7559\u7684\u95ee\u9898\u8fdb\u884c\u89e3\u7b54\u3002","title":"\u6df1\u5165\u5256\u6790\u5bb9\u5668"},{"location":"docker/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%AE%B9%E5%99%A8/#_1","text":"\u5728\u524d\u9762\u6211\u4eec\u4e00\u76f4\u90fd\u5728\u7528 Docker \u542f\u52a8\u548c\u7ba1\u7406\u5bb9\u5668\uff0c\u7b2c\u4e00\u90e8\u5206\u4e2d\u4e5f\u63d0\u5230\u4e86\u5173\u4e8e\u5bb9\u5668\u6280\u672f\u548c Docker \u7684\u53d1\u5c55\u5386\u7a0b\uff0c\u6211\u4eec\u4e0d\u59a8\u770b\u770b Docker \u5bf9\u5bb9\u5668\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\u3002 \u5f15\u7528 Docker \u5b98\u7f51\u5bf9\u5bb9\u5668\u7684\u4e00\u4e2a\u5b9a\u4e49\uff1a What is a Container? A standardized unit of software. \u5bb9\u5668\u662f\u4ec0\u4e48\uff1f\u4e00\u4e2a\u8f6f\u4ef6\u7684**\u6807\u51c6\u5316\u5355\u5143**\u3002 \u6211\u4eec\u6765\u5206\u6790\u4e0b\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u9996\u5148\u662f**\u8f6f\u4ef6**\uff0c\u8ddf\u5bb9\u5668\u76f8\u5173\u7684\u662f\u8f6f\u4ef6\u800c\u4e0d\u662f\u786c\u4ef6\uff0c\u800c\u6211\u4eec\u4e5f\u77e5\u9053\u8f6f\u4ef6\u4e3b\u8981\u5206\u4e3a\u7cfb\u7edf\u8f6f\u4ef6\u548c\u5e94\u7528\u8f6f\u4ef6\uff0c\u800c\u5bb9\u5668\u4e2d\u8fd0\u884c\u7684\u7a0b\u5e8f\u5e76\u975e\u7cfb\u7edf\u8f6f\u4ef6\uff0c\u5b83\u5b9e\u9645\u8fd0\u884c\u5728\u5bbf\u4e3b\u673a\u4e0a\uff0c\u4e0e\u5bbf\u4e3b\u673a\u4e0a\u7684\u5176\u4ed6\u8fdb\u7a0b\u5171\u7528\u4e00\u4e2a\u5185\u6838\uff0c\u8fd9\u4e5f\u662f\u5bb9\u5668\u4e0e\u4f20\u7edf\u865a\u62df\u673a\u7684\u4e00\u4e2a\u5f88\u5927\u533a\u522b\u3002 \u518d\u8005\uff0c \u6807\u51c6\u5316\u5355\u5143 \uff0c\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u8bf4\u4e86\uff0c\u5bb9\u5668\u5185\u8fd0\u884c\u7684\u7a0b\u5e8f\u5e76\u975e\u7cfb\u7edf\u8f6f\u4ef6\uff0c\u6bcf\u4e2a\u8f6f\u4ef6\u8fd0\u884c\u90fd\u9700\u8981\u6709\u5fc5\u8981\u7684\u73af\u5883\uff0c\u5305\u62ec\u4e00\u4e9b lib \u5e93\u4e4b\u7c7b\u7684\uff0c\u800c\u5982\u4f55\u80fd\u5728\u590d\u6742\u7684\u73af\u5883\u4e2d\u505a\u5230\u201c\u6807\u51c6\u5316\u201d\u5462\uff1f\u663e\u7136\uff0c\u9694\u79bb\u662f\u4e00\u4e2a\u6700\u4f73\u9009\u62e9\u3002\u5c06\u7a0b\u5e8f\u53ca\u5176\u6240\u9700\u7684\u73af\u5883 /lib \u5e93\u4e4b\u7c7b\u7684\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u5e76\u4e0e\u7cfb\u7edf\u73af\u5883\u9694\u79bb\uff0c\u8fd9\u5c31\u5f88\u5bb9\u6613\u505a\u5230\u201c\u6807\u51c6\u5316\u201d\u4e86\u3002 \u8bf4\u767d\u4e86\uff0c \u5bb9\u5668\u5176\u5b9e\u662f\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7684\u201c\u4e00\u7ec4\u201d\u8fdb\u7a0b\uff0c\u5f53\u7136\u8fd9\u7ec4\u8fdb\u7a0b\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\uff1b\u5b83\u4eec\u6709\u76f8\u540c\u7684\u7279\u6027\uff0c\u540c\u6837\u6240\u53d7\u7684\u9650\u5236\u4e5f\u76f8\u540c\uff1b\u53e6\u5916\u65e2\u7136\u53eb\u505a\u5bb9\u5668\uff0c\u5f88\u81ea\u7136\u5730\u6211\u4eec\u8ba4\u4e3a\u5b83\u4eec\u4e0e\u5916\u754c\u53ef\u4ee5\u8fdb\u884c\u9694\u79bb/\u5e94\u8be5\u6709\u4e00\u4e2a\u5206\u754c\u7ebf\u3002 \u5728\u672c\u4e13\u680f\u7684\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4e3a\u4f60\u4ecb\u7ecd\u8fc7 Docker \u548c\u5bb9\u5668\u6280\u672f\u7684\u53d1\u5c55\u5386\u7a0b\u3002\u672c\u7bc7\u4e2d\uff0c\u6211\u4eec\u4e0d\u59a8\u4ece\u8fdb\u7a0b\u7684\u89d2\u5ea6\u6765\u6df1\u5165\u5bb9\u5668\u5185\u90e8\u3002","title":"\u5bb9\u5668\u662f\u4ec0\u4e48"},{"location":"docker/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%AE%B9%E5%99%A8/#_2","text":"Docker \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u65b9\u4fbf\u7684\u547d\u4ee4 docker inspect \uff0c\u4f7f\u7528\u6b64\u547d\u4ee4\u53ef\u4ee5\u5f97\u5230\u5bb9\u5668\u7684\u5e95\u5c42\u4fe1\u606f\u3002\u6211\u4eec\u5148\u542f\u52a8\u4e00\u4e2a Alpine Linux \u7684\u5bb9\u5668\uff0c\u7136\u540e\u7528\u6b64\u547d\u4ee4\u67e5\u770b\u8be5\u5bb9\u5668\u7684\u4fe1\u606f\uff1a ( MoeLove ) \u279c ~ docker run --rm -it alpine / # \u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a ( MoeLove ) \u279c ~ docker inspect $( docker ps -ql ) [ { \"Id\" : \"2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7\" , \"Path\" : \"/bin/sh\" , \"State\" : { \"Status\" : \"running\" , \"Running\" : true, \"Paused\" : false, \"Restarting\" : false, \"OOMKilled\" : false, \"Dead\" : false, \"Pid\" : 9911 , \"ExitCode\" : 0 , \"Error\" : \"\" , ... } , ... \"Image\" : \"sha256:055936d3920576da37aa9bc460d70c5f212028bda1c08c0879aedf03d7a66ea1\" , \"HostnamePath\" : \"/var/lib/docker/containers/2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7/hostname\" , \"HostsPath\" : \"/var/lib/docker/containers/2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7/hosts\" , \"Name\" : \"/sleepy_austin\" , \"Driver\" : \"overlay2\" , \"Platform\" : \"linux\" , \"Config\" : { \"Hostname\" : \"2bc870194548\" , \"Domainname\" : \"\" , \"User\" : \"\" , \"AttachStdin\" : true, \"AttachStdout\" : true, \"AttachStderr\" : true, \"Tty\" : true, \"OpenStdin\" : true, \"StdinOnce\" : true, \"Env\" : [ \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" ] , \"Cmd\" : [ \"/bin/sh\" ] , \"Image\" : \"alpine\" , \"Volumes\" : null, \"WorkingDir\" : \"\" , \"Entrypoint\" : null, \"OnBuild\" : null, \"Labels\" : {} } , ... } ] \u7bc7\u5e45\u539f\u56e0\uff0c\u7701\u7565\u4e86\u5176\u4e2d\u90e8\u5206\u8f93\u51fa\u3002\u6211\u4eec\u770b\u5230\u8fd9\u4e2a\u547d\u4ee4\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u6240\u4ee5\u5b83\u652f\u6301\u540c\u65f6\u67e5\u770b\u591a\u4e2a\u5bb9\u5668\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u73b0\u5728\u5173\u6ce8\u7684\u91cd\u70b9\u5728\u4e8e State \u5b57\u6bb5\uff0c\u5176\u4e2d\u5305\u542b\u4e86 Pid \u7b49\u4fe1\u606f\u3002 \u5f53\u7136\u4f60\u4e5f\u4f1a\u56e0\u6b64\u53d1\u73b0\uff0cState \u5b57\u6bb5\u5185\u7684\u4fe1\u606f\u5b8c\u5168\u7b26\u5408\u6211\u4eec\u5728\u300a\u5bb9\u5668\u751f\u547d\u5468\u671f\u7ba1\u7406\u300b\u4e2d\u7684\u4ecb\u7ecd\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u76f4\u63a5\u53d6\u8fd9\u4e2a Pid \u7684\u5185\u5bb9\u5373\u53ef\u3002\u901a\u5e38\u6211\u4eec\u4f1a\u4f7f\u7528 grep \u547d\u4ee4\u4ece\u8be5\u8f93\u51fa\u4e2d\u8fc7\u6ee4\u4fe1\u606f\uff0c\u4f46 Docker \u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u66f4\u52a0\u4fbf\u6377\u7684\u65b9\u5f0f\uff1a ( MoeLove ) \u279c ~ docker inspect --format '{{.State.Pid}}' $( docker ps -ql ) 9911 docker inspect \u547d\u4ee4\u6709\u4e00\u4e2a --format \u9009\u9879\uff0c\u53ef\u652f\u6301 Go \u8bed\u8a00\u6a21\u677f\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u4e0a\u8ff0\u547d\u4ee4\u5f97\u5230\u5bb9\u5668\u7684\u5b9e\u9645 Pid\u3002\u5f53\u7136\uff0cGo \u8bed\u8a00\u6a21\u677f\u4e5f\u652f\u6301\u5404\u79cd\u547d\u4ee4\u548c\u8868\u8fbe\u5f0f\uff0c\u53ef\u76f4\u63a5\u5728\u5b98\u65b9\u6587\u6863\u5b66\u4e60\uff0c\u540e\u7eed\u5185\u5bb9\u4e2d\u5c06\u4e0d\u518d\u7279\u522b\u8fdb\u884c\u8bf4\u660e\u3002","title":"\u83b7\u53d6\u5bb9\u5668\u5e95\u5c42\u4fe1\u606f"},{"location":"docker/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%AE%B9%E5%99%A8/#proc","text":"\u65e2\u7136\u8981\u4ece\u8fdb\u7a0b\u7684\u89d2\u5ea6\u5bf9\u5bb9\u5668\u8fdb\u884c\u6df1\u5165\u7684\u4e86\u89e3\uff0c\u90a3\u5c31\u4e0d\u5f97\u4e0d\u63d0 /proc \u6587\u4ef6\u7cfb\u7edf\u4e86\uff0c\u5b83\u662f\u4e00\u79cd\u865a\u62df\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u8be5\u6587\u4ef6\u7cfb\u7edf\u6302\u8f7d\u4e8e /proc \u76ee\u5f55\u4e0b\uff0c\u5305\u542b\u4e86\u5404\u79cd\u7528\u4e8e\u5c55\u793a\u5185\u6838\u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u5141\u8bb8\u8fdb\u7a0b\u901a\u8fc7\u666e\u901a\u7684 I/O \u8c03\u7528\u6765\u76f4\u63a5\u8bfb\u53d6\uff0c\u5f53\u7136\u6709\u4e9b\u5185\u5bb9\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4fee\u6539\u3002 \u53e6\u5916\uff0c\u4e4b\u6240\u4ee5\u79f0\u5b83\u4e3a\u865a\u62df\u6587\u4ef6\u7cfb\u7edf\uff0c\u662f\u56e0\u4e3a\u5b83\u5e76\u4e0d\u771f\u6b63\u5b58\u5728\u4e8e\u78c1\u76d8\u4e2d\uff0c\u800c\u662f\u7531\u5185\u6838\u8fdb\u884c\u521b\u5efa\u66f4\u65b0\u548c\u7ba1\u7406\u7684\u3002 \u90a3\u6211\u4eec\u60f3\u8981\u4e86\u89e3\u7684\u5bb9\u5668\u8fdb\u7a0b\uff0c\u5728 /proc \u6587\u4ef6\u7cfb\u7edf\u4e2d\u662f\u4e00\u79cd\u600e\u6837\u7684\u5f62\u5f0f\u5462\uff1f /proc \u6587\u4ef6\u7cfb\u7edf\u5bf9\u4e8e\u8fdb\u7a0b\u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a /proc/$PID \u7684\u76ee\u5f55\uff0c\u5176\u4e2d\u5305\u542b\u7740\u8fdb\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u73b0\u5728\u6765\u67e5\u770b\u4e0b\u521a\u624d\u5bb9\u5668\u8fdb\u7a0b\u7684\u76f8\u5173\u4fe1\u606f\u3002 ( MoeLove ) \u279c ~ sudo ls /proc/9911/ attr comm fd loginuid mountstats oom_score_adj schedstat stat timerslack_ns autogroup coredump_filter fdinfo map_files net pagemap sessionid statm uid_map auxv cpuset gid_map maps ns personality setgroups status wchan cgroup cwd io mem numa_maps projid_map smaps syscall clear_refs environ latency mountinfo oom_adj root smaps_rollup task cmdline exe limits mounts oom_score sched stack timers \u53ef\u4ee5\u770b\u5230 /proc \u6587\u4ef6\u7cfb\u7edf\u5185\u5305\u542b\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u5ffd\u7565\u6389\u4e00\u4e9b\u5e38\u89c4\u5185\u5bb9\uff0c\u91cd\u70b9\u5206\u6790\u4e0e\u5bb9\u5668\u76f8\u5173\u7684\u90e8\u5206\u3002\u611f\u5174\u8da3\u53ef\u4ee5\u53ef\u4ee5\u81ea\u884c\u4e86\u89e3\u4e0b /proc \u6587\u4ef6\u7cfb\u7edf\u3002","title":"/proc \u6587\u4ef6\u7cfb\u7edf"},{"location":"docker/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%AE%B9%E5%99%A8/#cgroup","text":"\u8fd9\u5176\u4e2d\u6709\u4e00\u4e2a cgroup \u6587\u4ef6\uff0c\u6211\u4eec\u770b\u770b\u5176\u4e2d\u7684\u5185\u5bb9\uff1a ( MoeLove ) \u279c ~ sudo cat /proc/9911/cgroup 11 :perf_event:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 10 :freezer:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 9 :blkio:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 8 :devices:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 7 :net_cls,net_prio:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 6 :pids:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 5 :cpu,cpuacct:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 4 :cpuset:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 3 :hugetlb:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 2 :memory:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 1 :name = systemd:/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope 0 ::/system.slice/docker-2bc8701945480c70df09a4cca36909b67221b4287df7f4af82e78cf6cda956a7.scope \u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u6709\u4e09\u5217\uff0c\u7b2c\u4e00\u5217\u662f\u4e2a\u6570\u5b57\uff0c\u6682\u4e14\u4e0d\u8c08\uff1b\u7b2c\u4e8c\u5217\u770b\u7740\u5f88\u50cf\u4e00\u4e9b\u7279\u5b9a\u7684\u5c5e\u6027\uff0c\u6bd4\u5982 Memory \u548c CPU \u4e4b\u7c7b\u7684\uff1b\u7b2c\u4e09\u5217\u5219\u5f88\u50cf\u662f\u76ee\u5f55\u7ed3\u6784\uff0c/system.slice/docker-\u5bb9\u5668\u7684ID\u3002 \u8fd8\u8bb0\u5f97\u5728\u4e0a\u4e00\u7bc7\u6700\u540e\u6211\u63d0\u4f9b\u7684\uff0c\u7528\u4e8e\u5728\u5bbf\u4e3b\u673a\u4e0a\u67e5\u770b\u5bb9\u5668\u5185\u5b58\u9650\u5236\u7684\u547d\u4ee4\u4e48\uff1f\u662f\u5426\u611f\u89c9\u5f88\u719f\u6089\uff1f\u5982\u679c\u9057\u5fd8\u4e86\uff0c\u53ef\u4ee5\u518d\u56de\u8fc7\u5934\u53bb\u590d\u4e60\u4e00\u4e0b\u3002 \u53e6\u4e00\u4e2a\u91cd\u8981\u662f\u4e00\u4e2a\u540d\u4e3a ns \u7684\u76ee\u5f55\uff1a ( MoeLove ) \u279c ~ sudo ls -l --time-style = '+' /proc/9911/ns total 0 lrwxrwxrwx. 1 root root 0 cgroup -> 'cgroup:[4026531835]' lrwxrwxrwx. 1 root root 0 ipc -> 'ipc:[4026532722]' lrwxrwxrwx. 1 root root 0 mnt -> 'mnt:[4026532720]' lrwxrwxrwx. 1 root root 0 net -> 'net:[4026532726]' lrwxrwxrwx. 1 root root 0 pid -> 'pid:[4026532723]' lrwxrwxrwx. 1 root root 0 pid_for_children -> 'pid:[4026532723]' lrwxrwxrwx. 1 root root 0 user -> 'user:[4026531837]' lrwxrwxrwx. 1 root root 0 uts -> 'uts:[4026532721]' \u53ef\u4ee5\u770b\u5230\u5176\u4e2d\u7684\u5185\u5bb9\u90fd\u662f\u4e00\u4e9b\u94fe\u63a5\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u6682\u65f6\u4e0d\u5bf9\u5b83\u8fdb\u884c\u5c55\u5f00\uff0c\u6709\u4e2a\u5927\u6982\u5370\u8c61\u5373\u53ef\u3002\u540e\u7eed\u5185\u5bb9\u4f1a\u518d\u8fdb\u884c\u6df1\u5165\u3002","title":"cgroup \u6587\u4ef6"},{"location":"docker/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%AE%B9%E5%99%A8/#_3","text":"\u6211\u4eec\u4f7f\u7528 pstree \u547d\u4ee4\u67e5\u770b\u4e0b\u5bb9\u5668\u5185\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u6811\u3002 ( MoeLove ) \u279c ~ pstree -Aaps 9911 systemd,1 --switched-root --system --deserialize 33 ` -containerd,1130 ` -containerd-shim,9892 -namespace moby -workdir... ` -sh,9911 \u53ef\u4ee5\u770b\u5230\u5bb9\u5668\u5185\u8fdb\u7a0b\u4ece\u6839\u5f00\u59cb\u4f9d\u6b21\u4e3a\uff1a systemd ( 1 ) ---containerd ( 1130 ) ---containerd-shim ( 9892 ) ---sh ( 9911 ) \u8fd9\u662f\u4ece\u53e6\u4e00\u4e2a\u4fa7\u9762\u53cd\u6620\u4e86\u5bb9\u5668\u7684\u521b\u5efa\u8fc7\u7a0b\uff0c\u4f46\u5728\u672c\u7bc7\u4e2d\uff0c\u53ea\u9700\u8981\u4f60\u5bf9\u5b83\u4eec\u6709\u4e2a\u5927\u81f4\u5370\u8c61\u5373\u53ef\u3002 \u5f53\u6211\u4eec\u5728\u5bb9\u5668\u5185\u8fd0\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u53c8\u4f1a\u662f\u4ec0\u4e48\u6837\u5462\uff1f\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u3002 \u5728\u5bb9\u5668\u5185\u8fd0\u884c sha256sum \u7a0b\u5e8f\uff1a / # sha256sum /dev/zero \u5728\u5bbf\u4e3b\u673a\u4e0a\u518d\u6b21\u67e5\u770b\u8fdb\u7a0b\u6811\uff1a ( MoeLove ) \u279c ~ pstree -Aps 9911 systemd ( 1 ) ---containerd ( 1130 ) ---containerd-shim ( 9892 ) ---sh ( 9911 ) ---sha256sum ( 26985 ) \u53ef\u4ee5\u770b\u5230\u5728\u5bb9\u5668\u5185\u8fd0\u884c\u7684\u8fdb\u7a0b\uff0c\u90fd\u662f\u5bb9\u5668\u8fdb\u7a0b\u7684\u5b50\u8fdb\u7a0b\u3002\u7531\u4e8e Linux \u4e0a\u7684\u7236\u5b50\u8fdb\u7a0b\u6709\u4e00\u5b9a\u7684\u7ee7\u627f\u5173\u7cfb\uff0c\u6240\u4ee5\u5927\u591a\u6570\u7684\u80fd\u529b\u548c\u9650\u5236\u4e5f\u90fd\u4f1a\u88ab\u7ee7\u627f\u4e0b\u6765\u3002 \u6362\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u81ea\u7136\u4e5f\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u4ee5\u5bb9\u5668\u8fdb\u7a0b\u5f00\u59cb\u7684\u5206\u7ec4\u3002","title":"\u8fdb\u7a0b\u6811"},{"location":"docker/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%AE%B9%E5%99%A8/#_4","text":"\u672c\u7bc7\uff0c\u6211\u4e3a\u4f60\u4ece\u8fdb\u7a0b\u7684\u89d2\u5ea6\u4ecb\u7ecd\u4e86\u5bb9\u5668\u7684\u4e00\u4e9b\u7ec6\u8282\uff0c\u4f46\u672c\u7bc7\u5e76\u6ca1\u6709\u8fc7\u4e8e\u6df1\u5165\u539f\u7406\uff0c\u53ea\u662f\u901a\u8fc7 docker inspect \u548c Linux \u7684 /proc \u6587\u4ef6\u7cfb\u7edf\u4e3a\u4f60\u505a\u4e86\u4e00\u4e9b\u94fa\u57ab\uff0c\u65b9\u4fbf\u540e\u7eed\u5185\u5bb9\u7684\u5b66\u4e60\u3002 \u5176\u4e2d docker inspect \u547d\u4ee4\u914d\u5408 --format \u53c2\u6570\u7684 Go \u6a21\u677f\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5b8c\u6210\u5f88\u591a\u9700\u8981\u5bb9\u5668\u5e95\u5c42\u4fe1\u606f\u7684\u5e38\u89c4\u9700\u6c42\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 jq \u5de5\u5177\u89e3\u6790\u5176\u8fd4\u56de\u7684 JSON \u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 /proc \u6587\u4ef6\u7cfb\u7edf\uff0c\u4ee5\u53ca\u5176\u4e2d\u7684 cgroup \u548c ns \u5c06\u4f1a\u5bf9\u7406\u89e3\u548c\u638c\u63e1\u5bb9\u5668\u7684\u6838\u5fc3\u539f\u7406\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u4e0b\u4e00\u7bc7\uff0c\u6211\u5c06\u4e3a\u4f60\u89e3\u5bc6\u5bb9\u5668\u7684\u6838\u5fc3\u6280\u672f\uff0c\u5c06\u672c\u7bc7\u9057\u7559\u7684\u95ee\u9898\u8fdb\u884c\u89e3\u7b54\u3002","title":"\u603b\u7ed3"},{"location":"drf/1.django%E8%A7%86%E5%9B%BE%E4%B9%8BCBV%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","text":"django\u89c6\u56fe\u4e4bCBV\u7684\u57fa\u672c\u4f7f\u7528 \u00b6 CBV \u548c FBV \u662f\u4ec0\u4e48\uff1f \u00b6 CBV: class base view \u00b6 \u200b \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe FBV: function base view \u00b6 \u200b \u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe \u6211\u4eec\u5728django\u57fa\u7840\u4e2d\u8bf4\u5230\u8def\u7531\u5339\u914d\u662f\u5339\u914d\u5230\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u7136\u540e\u8fd4\u56de\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u662fclass\u3002\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0cdjango\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\uff0c\u6211\u4eec\u5199\u7684\u7c7b\u89c6\u56fe\u53ea\u9700\u8981\u7ee7\u627f\u8fd9\u4e2a\u7c7bi\uff0cdjango\u5c31\u81ea\u52a8\u5e2e\u6211\u5b9e\u73b0http\u8bf7\u6c42\u548c\u7c7b\u65b9\u9762\u6620\u5c04\u5173\u7cfb\u3002 \u7c7b\u89c6\u56fe\u7684\u7528\u6cd5 \u00b6 \u5728 urls.py \u4e2d\u5b9a\u4e49\u8def\u7531\u89c4\u5219\uff08\u8fd9\u91cc\u4f7f\u7528django 2.2 \u4ee5\u4e0a\u7684\u7248\u672c\uff09 from .views import LoginView urlpatterns = [ path ( 'login/' , LoginView . as_view ()) ] \u5728 views.py \u4e2d\u7f16\u5199\u7c7b\u89c6\u56fe from django.http import HttpResponse from django.views import View class LoginView ( View ): def get ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' ) def post ( self , request , * args , ** kwargs ): return HttpResponse ( 'POST' ) \u4e0d\u540c\u7684http\u8bf7\u6c42\u65b9\u5f0f\u53bbhttp://127.0.0.1:8000/login/ \u5c31\u4f1a\u6267\u884c\u7c7b\u89c6\u56fe\u4e2d\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002 \u8def\u7531\u5206\u53d1\u600e\u4e48\u505a\u5230\u7684\u5462\uff1f \u00b6 \u200b \u5339\u914d\u5230\u8def\u7531\u4e4b\u540e\uff0c\u9996\u5148\u6267\u884c LoginView.as_view( ) \u65b9\u6cd5\uff0c LoginView\u7c7b\u4e0d\u5b58\u5728 as_view() \u65b9\u6cd5\uff0c\u53bb\u7236\u7c7b\u627e\uff0c\u7236\u7c7b\uff08View\uff09\u7684as_view()\u6e90\u7801\u5982\u4e0b\uff1a class View : \"\"\" Intentionally simple parent class for all views. Only implements dispatch-by-method and simple sanity checking. \"\"\" http_method_names = [ 'get' , 'post' , 'put' , 'patch' , 'delete' , 'head' , 'options' , 'trace' ] def __init__ ( self , ** kwargs ): \"\"\" Constructor. Called in the URLconf; can contain helpful extra keyword arguments, and other things. \"\"\" # Go through keyword arguments, and either save their values to our # instance, or raise an error. for key , value in kwargs . items (): setattr ( self , key , value ) @classonlymethod def as_view ( cls , ** initkwargs ): \"\"\"Main entry point for a request-response process.\"\"\" for key in initkwargs : if key in cls . http_method_names : raise TypeError ( \"You tried to pass in the %s method name as a \" \"keyword argument to %s (). Don't do that.\" % ( key , cls . __name__ )) if not hasattr ( cls , key ): raise TypeError ( \" %s () received an invalid keyword %r . as_view \" \"only accepts arguments that are already \" \"attributes of the class.\" % ( cls . __name__ , key )) def view ( request , * args , ** kwargs ): self = cls ( ** initkwargs ) if hasattr ( self , 'get' ) and not hasattr ( self , 'head' ): self . head = self . get self . setup ( request , * args , ** kwargs ) if not hasattr ( self , 'request' ): raise AttributeError ( \" %s instance has no 'request' attribute. Did you override \" \"setup() and forget to call super()?\" % cls . __name__ ) return self . dispatch ( request , * args , ** kwargs ) view . view_class = cls view . view_initkwargs = initkwargs # take name and docstring from class update_wrapper ( view , cls , updated = ()) # and possible attributes set by decorators # like csrf_exempt from dispatch update_wrapper ( view , cls . dispatch , assigned = ()) return view \u770b\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\uff0c as_view() \u65b9\u6cd5 \u5982\u679c\u8bf7\u6c42\u7684\u65b9\u6cd5\u6ca1\u5728 http_method_names \u4e2d\uff0c\u5219\u4f1a\u629b\u51fa\u5f02\u5e38 \u3002 \u53c8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570 view , self = cls(**initkwargs) \u7b49\u4ef7\u4e8e self = LoginView(**initkwargs) , \u968f\u540e\u8fdb\u884c\u4e86\u4e00\u4e9b\u5c5e\u6027\u7ed1\u5b9a self.setup(request, *args, **kwargs) \uff0c\u518d\u5224\u65ad\u4e86self\u5bf9\u8c61\u6709\u6ca1\u6709request\u5c5e\u6027\u3002 \u91cd\u70b9:\u8c03\u7528self.dispatch(request, args, * **kwargs) \u65b9\u6cd5\u3002 def dispatch ( self , request , * args , ** kwargs ): # Try to dispatch to the right method; if a method doesn't exist, # defer to the error handler. Also defer to the error handler if the # request method isn't on the approved list. if request . method . lower () in self . http_method_names : handler = getattr ( self , request . method . lower (), self . http_method_not_allowed ) else : handler = self . http_method_not_allowed return handler ( request , * args , ** kwargs ) \u4eceLoginView\u7684request\u4e2d\u83b7\u53d6\u8bf7\u6c42\u65b9\u5f0f\uff0c \u5982\u679crequest.method\u5b58\u5728\u4e8ehttp_method_names\u4e2d\uff0c\u5219\u4f7f\u7528getattr\u53cd\u5c04\u7684\u65b9\u5f0f\u6765\u5f97\u5230handler\uff0c\u518d\u6267\u884cCBV\u4e2d\u7684\u65b9\u6cd5\u5e76\u8fd4\u56de\u3002 \u7531\u6b64\uff0c\u53ef\u4ee5\u77e5\u9053\u5982\u679c\u5728Django\u9879\u76ee\u4e2d\u4f7f\u7528CBV\u7684\u6a21\u5f0f\uff0c\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86getattr\u7684\u65b9\u5f0f\u6765\u6267\u884c\u83b7\u53d6\u7c7b\u4e2d\u7684\u8bf7\u6c42\u65b9\u6cd5\u5bf9\u5e94\u7684\u51fd\u6570 \u81ea\u5b9a\u4e49dispatch\u65b9\u6cd5 \u00b6 \u7531\u4e0a\u8ff0\u7684\u5206\u6790\u53ef\u77e5\uff0c\u4efb\u52a1cbv\u5728\u6267\u884c\u4ee3\u7801\u524d\u90fd\u4f1a\u6267\u884cdispatch\u65b9\u6cd5\uff0c\u6240\u4ee5dispatch\u53ef\u4ee5\u5f53\u52fe\u5b50\u4f7f\u7528\uff0c\u53ef\u4ee5\u5728\u8bf7\u6c42url\u65f6\u5728 dispatch \u4e2d\u5b9a\u4e49\u4e00\u4e9b\u884c\u4e3a\u3002 from django.http import HttpResponse from django.views import View class LoginView ( View ): def dispatch ( self , request , * args , ** kwargs ): print ( 'before' ) ret = super ( LoginView , self ) . dispatch ( request , * args , ** kwargs ) print ( 'after' ) return ret def get ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' ) def post ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' )","title":"9. django\u89c6\u56fe\u4e4bCBV\u7684\u57fa\u672c\u4f7f\u7528"},{"location":"drf/1.django%E8%A7%86%E5%9B%BE%E4%B9%8BCBV%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#djangocbv","text":"","title":"django\u89c6\u56fe\u4e4bCBV\u7684\u57fa\u672c\u4f7f\u7528"},{"location":"drf/1.django%E8%A7%86%E5%9B%BE%E4%B9%8BCBV%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#cbv-fbv","text":"","title":"CBV \u548c FBV \u662f\u4ec0\u4e48\uff1f"},{"location":"drf/1.django%E8%A7%86%E5%9B%BE%E4%B9%8BCBV%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#cbv-class-base-view","text":"\u200b \u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe","title":"CBV: class base view"},{"location":"drf/1.django%E8%A7%86%E5%9B%BE%E4%B9%8BCBV%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#fbv-function-base-view","text":"\u200b \u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe \u6211\u4eec\u5728django\u57fa\u7840\u4e2d\u8bf4\u5230\u8def\u7531\u5339\u914d\u662f\u5339\u914d\u5230\u5bf9\u5e94\u7684\u51fd\u6570\uff0c\u7136\u540e\u8fd4\u56de\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u662fclass\u3002\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0cdjango\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\uff0c\u6211\u4eec\u5199\u7684\u7c7b\u89c6\u56fe\u53ea\u9700\u8981\u7ee7\u627f\u8fd9\u4e2a\u7c7bi\uff0cdjango\u5c31\u81ea\u52a8\u5e2e\u6211\u5b9e\u73b0http\u8bf7\u6c42\u548c\u7c7b\u65b9\u9762\u6620\u5c04\u5173\u7cfb\u3002","title":"FBV: function base view"},{"location":"drf/1.django%E8%A7%86%E5%9B%BE%E4%B9%8BCBV%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#_1","text":"\u5728 urls.py \u4e2d\u5b9a\u4e49\u8def\u7531\u89c4\u5219\uff08\u8fd9\u91cc\u4f7f\u7528django 2.2 \u4ee5\u4e0a\u7684\u7248\u672c\uff09 from .views import LoginView urlpatterns = [ path ( 'login/' , LoginView . as_view ()) ] \u5728 views.py \u4e2d\u7f16\u5199\u7c7b\u89c6\u56fe from django.http import HttpResponse from django.views import View class LoginView ( View ): def get ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' ) def post ( self , request , * args , ** kwargs ): return HttpResponse ( 'POST' ) \u4e0d\u540c\u7684http\u8bf7\u6c42\u65b9\u5f0f\u53bbhttp://127.0.0.1:8000/login/ \u5c31\u4f1a\u6267\u884c\u7c7b\u89c6\u56fe\u4e2d\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002","title":"\u7c7b\u89c6\u56fe\u7684\u7528\u6cd5"},{"location":"drf/1.django%E8%A7%86%E5%9B%BE%E4%B9%8BCBV%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#_2","text":"\u200b \u5339\u914d\u5230\u8def\u7531\u4e4b\u540e\uff0c\u9996\u5148\u6267\u884c LoginView.as_view( ) \u65b9\u6cd5\uff0c LoginView\u7c7b\u4e0d\u5b58\u5728 as_view() \u65b9\u6cd5\uff0c\u53bb\u7236\u7c7b\u627e\uff0c\u7236\u7c7b\uff08View\uff09\u7684as_view()\u6e90\u7801\u5982\u4e0b\uff1a class View : \"\"\" Intentionally simple parent class for all views. Only implements dispatch-by-method and simple sanity checking. \"\"\" http_method_names = [ 'get' , 'post' , 'put' , 'patch' , 'delete' , 'head' , 'options' , 'trace' ] def __init__ ( self , ** kwargs ): \"\"\" Constructor. Called in the URLconf; can contain helpful extra keyword arguments, and other things. \"\"\" # Go through keyword arguments, and either save their values to our # instance, or raise an error. for key , value in kwargs . items (): setattr ( self , key , value ) @classonlymethod def as_view ( cls , ** initkwargs ): \"\"\"Main entry point for a request-response process.\"\"\" for key in initkwargs : if key in cls . http_method_names : raise TypeError ( \"You tried to pass in the %s method name as a \" \"keyword argument to %s (). Don't do that.\" % ( key , cls . __name__ )) if not hasattr ( cls , key ): raise TypeError ( \" %s () received an invalid keyword %r . as_view \" \"only accepts arguments that are already \" \"attributes of the class.\" % ( cls . __name__ , key )) def view ( request , * args , ** kwargs ): self = cls ( ** initkwargs ) if hasattr ( self , 'get' ) and not hasattr ( self , 'head' ): self . head = self . get self . setup ( request , * args , ** kwargs ) if not hasattr ( self , 'request' ): raise AttributeError ( \" %s instance has no 'request' attribute. Did you override \" \"setup() and forget to call super()?\" % cls . __name__ ) return self . dispatch ( request , * args , ** kwargs ) view . view_class = cls view . view_initkwargs = initkwargs # take name and docstring from class update_wrapper ( view , cls , updated = ()) # and possible attributes set by decorators # like csrf_exempt from dispatch update_wrapper ( view , cls . dispatch , assigned = ()) return view \u770b\u6e90\u7801\u53ef\u4ee5\u770b\u51fa\uff0c as_view() \u65b9\u6cd5 \u5982\u679c\u8bf7\u6c42\u7684\u65b9\u6cd5\u6ca1\u5728 http_method_names \u4e2d\uff0c\u5219\u4f1a\u629b\u51fa\u5f02\u5e38 \u3002 \u53c8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570 view , self = cls(**initkwargs) \u7b49\u4ef7\u4e8e self = LoginView(**initkwargs) , \u968f\u540e\u8fdb\u884c\u4e86\u4e00\u4e9b\u5c5e\u6027\u7ed1\u5b9a self.setup(request, *args, **kwargs) \uff0c\u518d\u5224\u65ad\u4e86self\u5bf9\u8c61\u6709\u6ca1\u6709request\u5c5e\u6027\u3002 \u91cd\u70b9:\u8c03\u7528self.dispatch(request, args, * **kwargs) \u65b9\u6cd5\u3002 def dispatch ( self , request , * args , ** kwargs ): # Try to dispatch to the right method; if a method doesn't exist, # defer to the error handler. Also defer to the error handler if the # request method isn't on the approved list. if request . method . lower () in self . http_method_names : handler = getattr ( self , request . method . lower (), self . http_method_not_allowed ) else : handler = self . http_method_not_allowed return handler ( request , * args , ** kwargs ) \u4eceLoginView\u7684request\u4e2d\u83b7\u53d6\u8bf7\u6c42\u65b9\u5f0f\uff0c \u5982\u679crequest.method\u5b58\u5728\u4e8ehttp_method_names\u4e2d\uff0c\u5219\u4f7f\u7528getattr\u53cd\u5c04\u7684\u65b9\u5f0f\u6765\u5f97\u5230handler\uff0c\u518d\u6267\u884cCBV\u4e2d\u7684\u65b9\u6cd5\u5e76\u8fd4\u56de\u3002 \u7531\u6b64\uff0c\u53ef\u4ee5\u77e5\u9053\u5982\u679c\u5728Django\u9879\u76ee\u4e2d\u4f7f\u7528CBV\u7684\u6a21\u5f0f\uff0c\u5b9e\u9645\u4e0a\u8c03\u7528\u4e86getattr\u7684\u65b9\u5f0f\u6765\u6267\u884c\u83b7\u53d6\u7c7b\u4e2d\u7684\u8bf7\u6c42\u65b9\u6cd5\u5bf9\u5e94\u7684\u51fd\u6570","title":"\u8def\u7531\u5206\u53d1\u600e\u4e48\u505a\u5230\u7684\u5462\uff1f"},{"location":"drf/1.django%E8%A7%86%E5%9B%BE%E4%B9%8BCBV%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#dispatch","text":"\u7531\u4e0a\u8ff0\u7684\u5206\u6790\u53ef\u77e5\uff0c\u4efb\u52a1cbv\u5728\u6267\u884c\u4ee3\u7801\u524d\u90fd\u4f1a\u6267\u884cdispatch\u65b9\u6cd5\uff0c\u6240\u4ee5dispatch\u53ef\u4ee5\u5f53\u52fe\u5b50\u4f7f\u7528\uff0c\u53ef\u4ee5\u5728\u8bf7\u6c42url\u65f6\u5728 dispatch \u4e2d\u5b9a\u4e49\u4e00\u4e9b\u884c\u4e3a\u3002 from django.http import HttpResponse from django.views import View class LoginView ( View ): def dispatch ( self , request , * args , ** kwargs ): print ( 'before' ) ret = super ( LoginView , self ) . dispatch ( request , * args , ** kwargs ) print ( 'after' ) return ret def get ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' ) def post ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' )","title":"\u81ea\u5b9a\u4e49dispatch\u65b9\u6cd5"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/","text":"CBV\u4e2d\u89e3\u51b3csrf\u8ba4\u8bc1\u7684\u95ee\u9898 \u00b6 CSRF\uff08cross site request forgery\uff09\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020 \u00b6 \u5177\u4f53\u662f\u5229\u7528\u4ec0\u4e48\u653b\u51fb\u7684\u53ef\u4ee5\u770b\u770b\u767e\u5ea6\u767e\u79d1\uff1a csrf\u767e\u79d1 **\u9632\u5fa1\uff1a**\u670d\u52a1\u5668\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u968f\u673a\u7684\u5b57\u7b26\u4e32\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u65f6\u5019\u9700\u8981\u5e26\u4e0a\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u5c31\u662f\u8fdd\u6cd5\u7684\u7528\u6237\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5b57\u7b26\u4e32\u90fd\u662f\u968f\u673a\u7684\uff0c\u4ece\u800c\u907f\u514d\u4e86\u9ed1\u5ba2\u5229\u7528\u7684\u98ce\u9669\u3002 django\u662f\u9632\u5fa1csrf\u7684\uff1f \u00b6 django\u9ed8\u8ba4\u5168\u5c40\u5f00\u542fcsrf\u8ba4\u8bc1\uff0c\u53ea\u8981\u662fpost\u8bf7\u6c42\u5c31\u5fc5\u987b\u5e26\u4e0acsrf\u7684\u5b57\u7b26\u4e32\u3002 \u5728 setting.py \u4e2d\u8bbe\u7f6e\u4e2d\u95f4\u4ef6\u3002 django.middleware.csrf.CsrfViewMiddleware MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , 'django.middleware.csrf.CsrfViewMiddleware' , # \u5168\u5c40\u5f00\u542f 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ] \u4e5f\u53ef\u4ee5\u628a\u4e2d\u95f4\u4ef6\u6ce8\u91ca\u6389\uff0c\u5c31\u5168\u5c40\u5173\u95ed\u4e86\uff0c\u4f46\u662f\u5b58\u5728\u88ab\u5229\u7528\u6f0f\u6d1e\u7684\u98ce\u9669\u3002 \u5f00\u542fcsrf\u9a8c\u8bc1\u53d1\u9001post\u672a\u5e26\u968f\u673a\u5b57\u7b26\u4e32 \u00b6 ajax\u63d0\u4ea4post\u8bf7\u6c42 \u00b6 \u5728\u7f51\u9875\u4e2d\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u589e\u52a0 {% csrf_token %} \u5728\u6a21\u677f\u4e2d\u589e\u52a0\u4e86 {% csrf_token %} \u540e\uff0c\u524d\u7aef\u6a21\u677f\u4e2d\u4f1a\u751f\u6210\u4e00\u4e2ainput\u6807\u7b7e\u3002\u5c31\u662f\u4e0b\u9762\u8fd9\u6837 < input type = \"hidden\" name = \"csrfmiddlewaretoken\" value = \"YcT8OPwJxCzwyspr0zDeoU6jSBv65EbhT5oBf2LMV603Qs2joTROB6YIlHvV6E4K\" > \u5728ajax post\u8bf7\u6c42\u4e2d\u63d0\u4ea4\u53c2\u6570\u65f6\uff0c\u9700\u8981\u5c06csrf\u7684\u952e\u548c\u503c\u4e5f\u63d0\u4ea4\u7ed9\u670d\u52a1\u5668\u3002 \u628a\u968f\u673a\u5b57\u7b26\u4e32\u8bbe\u7f6e\u5230\u8bf7\u6c42\u5934\u91cc\u3002jquery\u793a\u4f8b\u3002 var csrftoken = $ ( 'input[name=csrfmiddlewaretoken]' ). attr ( 'value' ); xhr . setRequestHeader ( \"X-CSRFtoken\" , csrftoken ); \u5168\u5c40\u5f00\u542f\u4e86\uff0c\u600e\u4e48\u8ba9\u5355\u4e2a\u89c6\u56fe\u51fd\u6570\u4e0d\u5f00\u542fcsrf\u4fdd\u62a4\u5462\uff1f \u00b6 \u88c5\u9970\u5668 \u00b6 # \u5173\u95edcsrf\u4fdd\u62a4 from django.views.decorators.csrf import csrf_exempt # \u5f00\u542fcsrf\u4fdd\u62a4 from django.views.decorators.csrf import csrf_protect FBV \u00b6 \u200b \u53ea\u9700\u8981\u5728\u9700\u8981\u5f00\u542f/\u5173\u95ed\u7684\u51fd\u6570\u4e0a\u4f7f\u7528\u88c5\u9970\u5668\u3002 CBV \u00b6 \u200b \u9700\u8981\u501f\u52a9 method_decorator \u88c5\u9970\u5668 from django.utils.decorators import method_decorator \u65b9\u5f0f\u4e00\uff1a\u5728dispatch\u65b9\u6cd5\u4e0a\u4f7f\u7528\u88c5\u9970\u5668 from django.views.decorators.csrf import csrf_exempt , csrf_protect from django.utils.decorators import method_decorator class StutentsView ( View ): method_descrator ( csrf_exempt ) def dispatch ( csrf_exempt ): return super ( StudentsView , self ) . dispatch ( request , * args , ** kwargs ) def get ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' ) \u65b9\u5f0f\u4e8c\uff1a\u5728\u7c7b\u4e0a\u4f7f\u7528\u88c5\u9970\u5668 from django.views.decorators.csrf import csrf_exempt , csrf_protect from django.utils.decorators import method_decorator @method_decorator ( csrf_exempt , name = \"dispatch\" ) class StutentsView ( View ): def get ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' )","title":"10. CBV\u4e2d\u89e3\u51b3csrf\u8ba4\u8bc1\u7684\u95ee\u9898"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#cbvcsrf","text":"","title":"CBV\u4e2d\u89e3\u51b3csrf\u8ba4\u8bc1\u7684\u95ee\u9898"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#csrfcross-site-request-forgery","text":"\u5177\u4f53\u662f\u5229\u7528\u4ec0\u4e48\u653b\u51fb\u7684\u53ef\u4ee5\u770b\u770b\u767e\u5ea6\u767e\u79d1\uff1a csrf\u767e\u79d1 **\u9632\u5fa1\uff1a**\u670d\u52a1\u5668\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u968f\u673a\u7684\u5b57\u7b26\u4e32\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4ea4\u4e92\u7684\u65f6\u5019\u9700\u8981\u5e26\u4e0a\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u5426\u5219\u5c31\u662f\u8fdd\u6cd5\u7684\u7528\u6237\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5b57\u7b26\u4e32\u90fd\u662f\u968f\u673a\u7684\uff0c\u4ece\u800c\u907f\u514d\u4e86\u9ed1\u5ba2\u5229\u7528\u7684\u98ce\u9669\u3002","title":"CSRF\uff08cross site request  forgery\uff09\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#djangocsrf","text":"django\u9ed8\u8ba4\u5168\u5c40\u5f00\u542fcsrf\u8ba4\u8bc1\uff0c\u53ea\u8981\u662fpost\u8bf7\u6c42\u5c31\u5fc5\u987b\u5e26\u4e0acsrf\u7684\u5b57\u7b26\u4e32\u3002 \u5728 setting.py \u4e2d\u8bbe\u7f6e\u4e2d\u95f4\u4ef6\u3002 django.middleware.csrf.CsrfViewMiddleware MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , 'django.middleware.csrf.CsrfViewMiddleware' , # \u5168\u5c40\u5f00\u542f 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ] \u4e5f\u53ef\u4ee5\u628a\u4e2d\u95f4\u4ef6\u6ce8\u91ca\u6389\uff0c\u5c31\u5168\u5c40\u5173\u95ed\u4e86\uff0c\u4f46\u662f\u5b58\u5728\u88ab\u5229\u7528\u6f0f\u6d1e\u7684\u98ce\u9669\u3002","title":"django\u662f\u9632\u5fa1csrf\u7684\uff1f"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#csrfpost","text":"","title":"\u5f00\u542fcsrf\u9a8c\u8bc1\u53d1\u9001post\u672a\u5e26\u968f\u673a\u5b57\u7b26\u4e32"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#ajaxpost","text":"\u5728\u7f51\u9875\u4e2d\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u589e\u52a0 {% csrf_token %} \u5728\u6a21\u677f\u4e2d\u589e\u52a0\u4e86 {% csrf_token %} \u540e\uff0c\u524d\u7aef\u6a21\u677f\u4e2d\u4f1a\u751f\u6210\u4e00\u4e2ainput\u6807\u7b7e\u3002\u5c31\u662f\u4e0b\u9762\u8fd9\u6837 < input type = \"hidden\" name = \"csrfmiddlewaretoken\" value = \"YcT8OPwJxCzwyspr0zDeoU6jSBv65EbhT5oBf2LMV603Qs2joTROB6YIlHvV6E4K\" > \u5728ajax post\u8bf7\u6c42\u4e2d\u63d0\u4ea4\u53c2\u6570\u65f6\uff0c\u9700\u8981\u5c06csrf\u7684\u952e\u548c\u503c\u4e5f\u63d0\u4ea4\u7ed9\u670d\u52a1\u5668\u3002 \u628a\u968f\u673a\u5b57\u7b26\u4e32\u8bbe\u7f6e\u5230\u8bf7\u6c42\u5934\u91cc\u3002jquery\u793a\u4f8b\u3002 var csrftoken = $ ( 'input[name=csrfmiddlewaretoken]' ). attr ( 'value' ); xhr . setRequestHeader ( \"X-CSRFtoken\" , csrftoken );","title":"ajax\u63d0\u4ea4post\u8bf7\u6c42"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#csrf","text":"","title":"\u5168\u5c40\u5f00\u542f\u4e86\uff0c\u600e\u4e48\u8ba9\u5355\u4e2a\u89c6\u56fe\u51fd\u6570\u4e0d\u5f00\u542fcsrf\u4fdd\u62a4\u5462\uff1f"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#_1","text":"# \u5173\u95edcsrf\u4fdd\u62a4 from django.views.decorators.csrf import csrf_exempt # \u5f00\u542fcsrf\u4fdd\u62a4 from django.views.decorators.csrf import csrf_protect","title":"\u88c5\u9970\u5668"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#fbv","text":"\u200b \u53ea\u9700\u8981\u5728\u9700\u8981\u5f00\u542f/\u5173\u95ed\u7684\u51fd\u6570\u4e0a\u4f7f\u7528\u88c5\u9970\u5668\u3002","title":"FBV"},{"location":"drf/2.CBV%E4%B8%AD%E8%A7%A3%E5%86%B3csrf%E8%AE%A4%E8%AF%81%E7%9A%84%E9%97%AE%E9%A2%98/#cbv","text":"\u200b \u9700\u8981\u501f\u52a9 method_decorator \u88c5\u9970\u5668 from django.utils.decorators import method_decorator \u65b9\u5f0f\u4e00\uff1a\u5728dispatch\u65b9\u6cd5\u4e0a\u4f7f\u7528\u88c5\u9970\u5668 from django.views.decorators.csrf import csrf_exempt , csrf_protect from django.utils.decorators import method_decorator class StutentsView ( View ): method_descrator ( csrf_exempt ) def dispatch ( csrf_exempt ): return super ( StudentsView , self ) . dispatch ( request , * args , ** kwargs ) def get ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' ) \u65b9\u5f0f\u4e8c\uff1a\u5728\u7c7b\u4e0a\u4f7f\u7528\u88c5\u9970\u5668 from django.views.decorators.csrf import csrf_exempt , csrf_protect from django.utils.decorators import method_decorator @method_decorator ( csrf_exempt , name = \"dispatch\" ) class StutentsView ( View ): def get ( self , request , * args , ** kwargs ): return HttpResponse ( 'GET' )","title":"CBV"},{"location":"drf/REST_framework_APIView_%E6%80%BB%E7%BB%93/","text":"APIView \u00b6 from rest_framework.views import APIView def dispatch ( self , request , * args , ** kwargs ): \"\"\" `.dispatch()` is pretty much the same as Django's regular dispatch, but with extra hooks for startup, finalize, and exception handling. \"\"\" self . args = args self . kwargs = kwargs request = self . initialize_request ( request , * args , ** kwargs ) # \u521d\u59cb\u5316request\u5bf9\u8c61\uff0c\u6539\u4e3arest_framework\u63d0\u4f9b\u7684Request\u5bf9\u8c61 self . request = request self . headers = self . default_response_headers # deprecate? try : self . initial ( request , * args , ** kwargs ) # Get the appropriate handler method if request . method . lower () in self . http_method_names : handler = getattr ( self , request . method . lower (), self . http_method_not_allowed ) else : handler = self . http_method_not_allowed response = handler ( request , * args , ** kwargs ) except Exception as exc : response = self . handle_exception ( exc ) self . response = self . finalize_response ( request , response , * args , ** kwargs ) return self . response \u89c6\u56fe method : initialize_request() \u00b6 def initialize_request ( self , request , * args , ** kwargs ): \"\"\" Returns the initial request object. \"\"\" parser_context = self . get_parser_context ( request ) return Request ( request , # \u539f\u59cb\u7684djangorequest parsers = self . get_parsers (), # \u89e3\u6790\u5668\u9a8c\u8bc1 authenticators = self . get_authenticators (), # \u7528\u6237\u6743\u9650\u9a8c\u8bc1 negotiator = self . get_content_negotiator (), # \u8282\u6d41 parser_context = parser_context ) APIView method: get_parsers() \u00b6 def get_parsers ( self ): \"\"\" Instantiates and returns the list of parsers that this view can use. \"\"\" return [ parser () for parser in self . parser_classes ] \u53d6\u5f97\u89c6\u56fe\u4e2d\u5b9a\u4e49\u7684parser_classes\u5217\u8868\uff0c\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u4f9d\u6b21\u83b7\u53d6\u89e3\u6790\u5668\u5bf9\u8c61\u3002 \u7528\u6237\u6743\u9650\u9a8c\u8bc1\u7c7b\uff0c\u8282\u6d41\u7c7b\u4e5f\u662f\u4e00\u6837\u7684\u65b9\u5f0f\u3002 initial() \u00b6 \u5c01\u88c5\u597drequest\u540e\u6765\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u9a8c\u8bc1\uff0cAPIView.dispatch->self.initial(request, *args, **kwargs) def initial ( self , request , * args , ** kwargs ): \"\"\" Runs anything that needs to occur prior to calling the method handler. \"\"\" self . format_kwarg = self . get_format_suffix ( ** kwargs ) # Perform content negotiation and store the accepted info on the request neg = self . perform_content_negotiation ( request ) request . accepted_renderer , request . accepted_media_type = neg # Determine the API version, if versioning is in use. version , scheme = self . determine_version ( request , * args , ** kwargs ) request . version , request . versioning_scheme = version , scheme # Ensure that the incoming request is permitted self . perform_authentication ( request ) # \u7528\u6237\u8ba4\u8bc1 self . check_permissions ( request ) # \u68c0\u67e5\u6743\u9650 self . check_throttles ( request ) # \u8282\u6d41 perform_authentication(request) \u00b6 def perform_authentication ( self , request ): \"\"\" Perform authentication on the incoming request. Note that if you override this and simply 'pass', then authentication will instead be performed lazily, the first time either `request.user` or `request.auth` is accessed. \"\"\" request . user @property def user ( self ): \"\"\" Returns the user associated with the current request, as authenticated by the authentication classes provided to the request. \"\"\" if not hasattr ( self , '_user' ): with wrap_attributeerrors (): self . _authenticate () return self . _user def _authenticate ( self ): \"\"\" Attempt to authenticate the request using each authentication instance in turn. \"\"\" for authenticator in self . authenticators : try : user_auth_tuple = authenticator . authenticate ( self ) except exceptions . APIException : self . _not_authenticated () raise if user_auth_tuple is not None : self . _authenticator = authenticator self . user , self . auth = user_auth_tuple return self . _not_authenticated ()","title":"11. REST framework APIView \u603b\u7ed3"},{"location":"drf/REST_framework_APIView_%E6%80%BB%E7%BB%93/#apiview","text":"from rest_framework.views import APIView def dispatch ( self , request , * args , ** kwargs ): \"\"\" `.dispatch()` is pretty much the same as Django's regular dispatch, but with extra hooks for startup, finalize, and exception handling. \"\"\" self . args = args self . kwargs = kwargs request = self . initialize_request ( request , * args , ** kwargs ) # \u521d\u59cb\u5316request\u5bf9\u8c61\uff0c\u6539\u4e3arest_framework\u63d0\u4f9b\u7684Request\u5bf9\u8c61 self . request = request self . headers = self . default_response_headers # deprecate? try : self . initial ( request , * args , ** kwargs ) # Get the appropriate handler method if request . method . lower () in self . http_method_names : handler = getattr ( self , request . method . lower (), self . http_method_not_allowed ) else : handler = self . http_method_not_allowed response = handler ( request , * args , ** kwargs ) except Exception as exc : response = self . handle_exception ( exc ) self . response = self . finalize_response ( request , response , * args , ** kwargs ) return self . response","title":"APIView"},{"location":"drf/REST_framework_APIView_%E6%80%BB%E7%BB%93/#method-initialize_request","text":"def initialize_request ( self , request , * args , ** kwargs ): \"\"\" Returns the initial request object. \"\"\" parser_context = self . get_parser_context ( request ) return Request ( request , # \u539f\u59cb\u7684djangorequest parsers = self . get_parsers (), # \u89e3\u6790\u5668\u9a8c\u8bc1 authenticators = self . get_authenticators (), # \u7528\u6237\u6743\u9650\u9a8c\u8bc1 negotiator = self . get_content_negotiator (), # \u8282\u6d41 parser_context = parser_context )","title":"\u89c6\u56fe method : initialize_request()"},{"location":"drf/REST_framework_APIView_%E6%80%BB%E7%BB%93/#apiview-method-get_parsers","text":"def get_parsers ( self ): \"\"\" Instantiates and returns the list of parsers that this view can use. \"\"\" return [ parser () for parser in self . parser_classes ] \u53d6\u5f97\u89c6\u56fe\u4e2d\u5b9a\u4e49\u7684parser_classes\u5217\u8868\uff0c\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u4f9d\u6b21\u83b7\u53d6\u89e3\u6790\u5668\u5bf9\u8c61\u3002 \u7528\u6237\u6743\u9650\u9a8c\u8bc1\u7c7b\uff0c\u8282\u6d41\u7c7b\u4e5f\u662f\u4e00\u6837\u7684\u65b9\u5f0f\u3002","title":"APIView method: get_parsers()"},{"location":"drf/REST_framework_APIView_%E6%80%BB%E7%BB%93/#initial","text":"\u5c01\u88c5\u597drequest\u540e\u6765\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u9a8c\u8bc1\uff0cAPIView.dispatch->self.initial(request, *args, **kwargs) def initial ( self , request , * args , ** kwargs ): \"\"\" Runs anything that needs to occur prior to calling the method handler. \"\"\" self . format_kwarg = self . get_format_suffix ( ** kwargs ) # Perform content negotiation and store the accepted info on the request neg = self . perform_content_negotiation ( request ) request . accepted_renderer , request . accepted_media_type = neg # Determine the API version, if versioning is in use. version , scheme = self . determine_version ( request , * args , ** kwargs ) request . version , request . versioning_scheme = version , scheme # Ensure that the incoming request is permitted self . perform_authentication ( request ) # \u7528\u6237\u8ba4\u8bc1 self . check_permissions ( request ) # \u68c0\u67e5\u6743\u9650 self . check_throttles ( request ) # \u8282\u6d41","title":"initial()"},{"location":"drf/REST_framework_APIView_%E6%80%BB%E7%BB%93/#perform_authenticationrequest","text":"def perform_authentication ( self , request ): \"\"\" Perform authentication on the incoming request. Note that if you override this and simply 'pass', then authentication will instead be performed lazily, the first time either `request.user` or `request.auth` is accessed. \"\"\" request . user @property def user ( self ): \"\"\" Returns the user associated with the current request, as authenticated by the authentication classes provided to the request. \"\"\" if not hasattr ( self , '_user' ): with wrap_attributeerrors (): self . _authenticate () return self . _user def _authenticate ( self ): \"\"\" Attempt to authenticate the request using each authentication instance in turn. \"\"\" for authenticator in self . authenticators : try : user_auth_tuple = authenticator . authenticate ( self ) except exceptions . APIException : self . _not_authenticated () raise if user_auth_tuple is not None : self . _authenticator = authenticator self . user , self . auth = user_auth_tuple return self . _not_authenticated ()","title":"perform_authentication(request)"},{"location":"drf/%E5%87%A0%E4%B8%AAdjango%202.2%E5%92%8Cmysql%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9D%91/","text":"\u51e0\u4e2adjango 2.2\u548cmysql\u4f7f\u7528\u7684\u5751 \u00b6 \u53ef\u80fd\u662f\u7531\u4e8eDjango\u4f7f\u7528\u7684MySQLdb\u5e93\u5bf9Python3\u4e0d\u652f\u6301\uff0c\u6211\u4eec\u7528\u91c7\u7528\u4e86PyMySQL\u5e93\u6765\u4ee3\u66ff\uff0c\u5bfc\u81f4\u51fa\u73b0\u5404\u79cd\u5751\uff0c\u7279\u522b\u662f\u6267\u884c\u4ee5\u4e0b2\u6761\u547d\u4ee4\u7684\u662f\u65f6\u5019\uff1a python manage.py makemigrations or python manage.py inspectdb \u7b2c\u4e00\u4e2a\u5751\uff08\u63d0\u793a\u4f60\u7684mysqlclient\u7248\u672c\u8fc7\u4f4e\uff09 \u65e0\u804a\u4f60\u662f\u5426\u6267\u884cpip install mysqlclient\u5b89\u88c5\u7684\u6700\u65b0\u7248\u7684\uff0c\u90fd\u629b\u51fa\uff1a django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.3 or newer is required; you have 0.7.11.None MD\uff0cLZ\u770b\u5230\u8fd9\u9519\u8bef\u592a\u60f3\u9a82\u4eba\u4e86\uff0c\u6ca1\u529e\u6cd5\u91c7\u53d6\u7f51\u4e0a\u7684\u65b9\u6cd5\uff0c\u6ce8\u91ca\u5927\u6cd5\uff01 \u627e\u5230Python\u5b89\u88c5\u8def\u52b2\u4e0b\u7684Python36-32\\Lib\\site-packages\\django\\db\\backends\\mysql\\base.py\u6587\u4ef6 \u5c06\u6587\u4ef6\u4e2d\u7684\u5982\u4e0b\u4ee3\u7801\u6ce8\u91ca\uff08\u53ef\u80fd\u9700\u5148\u5173\u95edpycharm IDE\uff09 if version < (1, 3, 3): raise ImproperlyConfigured(\"mysqlclient 1.3.3 or newer is required; you have %s\" % Database.__version__) \u7b2c\u4e8c\u4e2a\u5751\uff08str\u7c7b\u578b\u6ca1\u6709decode\u65b9\u6cd5\uff09 \u5bf9\u5bf9\u5bf9\uff0cpy3\u9ed8\u8ba4str\u662funicode\u7f16\u7801\uff0c\u901a\u8fc7encode\u65b9\u6cd5\u7f16\u7801\u6210bytes\u7c7b\u578b\uff0c\u540e\u8005\u624d\u6709decode\u89e3\u7801\u65b9\u6cd5\u3002 \u63d0\u793a\u9519\u8bef\u6765\u6e90\uff1aPython36\\lib\\site-packages\\django\\db\\backends\\mysql\\operations.py\", line 149, in last_executed_query \u8fd9\u91cc\u7f51\u4e0a\u4e00\u641c\u4e00\u5806\u7684\u628aencode\u6539\u6210decode\u65b9\u6cd5\uff0c\u6211\u9760\uff0c\u8fd9\u8c01\u7684\u8111\u6d1e\u65e0\u654c\u4e86 \u6e90\u65b9\u6cd5\u5185\u5bb9\uff08pip\u5b89\u88c5\u7684django 2.2.1\u539f\u5c01\u4e0d\u52a8\u7684\u5185\u5bb9\uff09\uff1a def last_executed_query(self, cursor, sql, params): # With MySQLdb, cursor objects have an (undocumented) \"_executed\" # attribute where the exact query sent to the database is saved. # See MySQLdb/cursors.py in the source distribution. query = getattr(cursor, '_executed', None) if query is not None: query = query.decode(errors='replace') return query \u901a\u8fc7print\u5927\u6cd5\u8f93\u51faquery\u7ed3\u679c\uff0c\u5185\u5bb9\u4e3a SELECT @@SQL_AUTO_IS_NULL \u6570\u636e\u7c7b\u578b\u4e3astr \u8fd9\u91cc\u7f51\u4e0a\u8fd8\u6709\u6ce8\u91ca\u5927\u6cd5\uff0cLZ\u4e0d\u77e5\u9053\u6ce8\u91ca\u4e86if\u7684\u540e\u9057\u75c7\u662f\u5565\u6709\u6ca1\u6709\u5f71\u54cd\uff0c\u4e8e\u662f\u4e5f\u6ca1\u91c7\u7eb3\u3002 \u4e8e\u662f\u6211\u53bbdjango\u7684github\u53bb\u7ffb\u8fd9\u4e2a\u6587\u4ef6\u8fd9\u4e2a\u65b9\u6cd5\u7684\u6700\u65b0/\u5386\u53f2\u7248\u672c\uff0c\u7ed3\u679c\u6700\u65b0master\u5206\u652f\u5185\u5bb9\u5982\u4e0b\uff1a def last_executed_query(self, cursor, sql, params): # With MySQLdb, cursor objects have an (undocumented) \"_executed\" # attribute where the exact query sent to the database is saved. # See MySQLdb/cursors.py in the source distribution. # MySQLdb returns string, PyMySQL bytes. return force_str(getattr(cursor, '_executed', None), errors='replace') \u770b\u51fd\u6570\u540d\uff0c\u5e94\u8be5\u662f\u5f3a\u5236\u53bb\u628aSQL\u8f6c\u6362\u6210str\u4e86 \u6211\u9760\uff01\uff01\uff01\u8fd9\u5c3c\u739b\u5b98\u7f512.2.\u00bd.2.2(\u5f53\u524d\u6700\u65b0\u7248)\u7684\u5305\u4e0d\u662f\u5bb3\u4eba\u4e48\uff0c\u8bb0\u5f97\u8be5\u6587\u4ef6\u4e0a\u9762\u5f15\u5165\u4e0b\u8fd9\u4e2a\u65b9\u6cd5 from django.utils.encoding import force_str \u7136\u540e\u518d\u6267\u884cmanaga.py\u547d\u4ee4\uff0c\u53ef\u4ee5\u4e86","title":"\u51e0\u4e2adjango 2.2\u548cmysql\u4f7f\u7528\u7684\u5751"},{"location":"drf/%E5%87%A0%E4%B8%AAdjango%202.2%E5%92%8Cmysql%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9D%91/#django-22mysql","text":"\u53ef\u80fd\u662f\u7531\u4e8eDjango\u4f7f\u7528\u7684MySQLdb\u5e93\u5bf9Python3\u4e0d\u652f\u6301\uff0c\u6211\u4eec\u7528\u91c7\u7528\u4e86PyMySQL\u5e93\u6765\u4ee3\u66ff\uff0c\u5bfc\u81f4\u51fa\u73b0\u5404\u79cd\u5751\uff0c\u7279\u522b\u662f\u6267\u884c\u4ee5\u4e0b2\u6761\u547d\u4ee4\u7684\u662f\u65f6\u5019\uff1a python manage.py makemigrations or python manage.py inspectdb \u7b2c\u4e00\u4e2a\u5751\uff08\u63d0\u793a\u4f60\u7684mysqlclient\u7248\u672c\u8fc7\u4f4e\uff09 \u65e0\u804a\u4f60\u662f\u5426\u6267\u884cpip install mysqlclient\u5b89\u88c5\u7684\u6700\u65b0\u7248\u7684\uff0c\u90fd\u629b\u51fa\uff1a django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.3 or newer is required; you have 0.7.11.None MD\uff0cLZ\u770b\u5230\u8fd9\u9519\u8bef\u592a\u60f3\u9a82\u4eba\u4e86\uff0c\u6ca1\u529e\u6cd5\u91c7\u53d6\u7f51\u4e0a\u7684\u65b9\u6cd5\uff0c\u6ce8\u91ca\u5927\u6cd5\uff01 \u627e\u5230Python\u5b89\u88c5\u8def\u52b2\u4e0b\u7684Python36-32\\Lib\\site-packages\\django\\db\\backends\\mysql\\base.py\u6587\u4ef6 \u5c06\u6587\u4ef6\u4e2d\u7684\u5982\u4e0b\u4ee3\u7801\u6ce8\u91ca\uff08\u53ef\u80fd\u9700\u5148\u5173\u95edpycharm IDE\uff09 if version < (1, 3, 3): raise ImproperlyConfigured(\"mysqlclient 1.3.3 or newer is required; you have %s\" % Database.__version__) \u7b2c\u4e8c\u4e2a\u5751\uff08str\u7c7b\u578b\u6ca1\u6709decode\u65b9\u6cd5\uff09 \u5bf9\u5bf9\u5bf9\uff0cpy3\u9ed8\u8ba4str\u662funicode\u7f16\u7801\uff0c\u901a\u8fc7encode\u65b9\u6cd5\u7f16\u7801\u6210bytes\u7c7b\u578b\uff0c\u540e\u8005\u624d\u6709decode\u89e3\u7801\u65b9\u6cd5\u3002 \u63d0\u793a\u9519\u8bef\u6765\u6e90\uff1aPython36\\lib\\site-packages\\django\\db\\backends\\mysql\\operations.py\", line 149, in last_executed_query \u8fd9\u91cc\u7f51\u4e0a\u4e00\u641c\u4e00\u5806\u7684\u628aencode\u6539\u6210decode\u65b9\u6cd5\uff0c\u6211\u9760\uff0c\u8fd9\u8c01\u7684\u8111\u6d1e\u65e0\u654c\u4e86 \u6e90\u65b9\u6cd5\u5185\u5bb9\uff08pip\u5b89\u88c5\u7684django 2.2.1\u539f\u5c01\u4e0d\u52a8\u7684\u5185\u5bb9\uff09\uff1a def last_executed_query(self, cursor, sql, params): # With MySQLdb, cursor objects have an (undocumented) \"_executed\" # attribute where the exact query sent to the database is saved. # See MySQLdb/cursors.py in the source distribution. query = getattr(cursor, '_executed', None) if query is not None: query = query.decode(errors='replace') return query \u901a\u8fc7print\u5927\u6cd5\u8f93\u51faquery\u7ed3\u679c\uff0c\u5185\u5bb9\u4e3a SELECT @@SQL_AUTO_IS_NULL \u6570\u636e\u7c7b\u578b\u4e3astr \u8fd9\u91cc\u7f51\u4e0a\u8fd8\u6709\u6ce8\u91ca\u5927\u6cd5\uff0cLZ\u4e0d\u77e5\u9053\u6ce8\u91ca\u4e86if\u7684\u540e\u9057\u75c7\u662f\u5565\u6709\u6ca1\u6709\u5f71\u54cd\uff0c\u4e8e\u662f\u4e5f\u6ca1\u91c7\u7eb3\u3002 \u4e8e\u662f\u6211\u53bbdjango\u7684github\u53bb\u7ffb\u8fd9\u4e2a\u6587\u4ef6\u8fd9\u4e2a\u65b9\u6cd5\u7684\u6700\u65b0/\u5386\u53f2\u7248\u672c\uff0c\u7ed3\u679c\u6700\u65b0master\u5206\u652f\u5185\u5bb9\u5982\u4e0b\uff1a def last_executed_query(self, cursor, sql, params): # With MySQLdb, cursor objects have an (undocumented) \"_executed\" # attribute where the exact query sent to the database is saved. # See MySQLdb/cursors.py in the source distribution. # MySQLdb returns string, PyMySQL bytes. return force_str(getattr(cursor, '_executed', None), errors='replace') \u770b\u51fd\u6570\u540d\uff0c\u5e94\u8be5\u662f\u5f3a\u5236\u53bb\u628aSQL\u8f6c\u6362\u6210str\u4e86 \u6211\u9760\uff01\uff01\uff01\u8fd9\u5c3c\u739b\u5b98\u7f512.2.\u00bd.2.2(\u5f53\u524d\u6700\u65b0\u7248)\u7684\u5305\u4e0d\u662f\u5bb3\u4eba\u4e48\uff0c\u8bb0\u5f97\u8be5\u6587\u4ef6\u4e0a\u9762\u5f15\u5165\u4e0b\u8fd9\u4e2a\u65b9\u6cd5 from django.utils.encoding import force_str \u7136\u540e\u518d\u6267\u884cmanaga.py\u547d\u4ee4\uff0c\u53ef\u4ee5\u4e86","title":"\u51e0\u4e2adjango 2.2\u548cmysql\u4f7f\u7528\u7684\u5751"},{"location":"leetcode/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/","text":"\u9898\u76ee \u00b6 # 14. \u6700\u957f\u516c\u5171\u524d\u7f00 # \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 # \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002 # \u793a\u4f8b 1: # \u8f93\u5165: [\"flower\",\"flow\",\"flight\"] # \u8f93\u51fa: \"fl\" # \u793a\u4f8b 2: # \u8f93\u5165: [\"dog\",\"racecar\",\"car\"] # \u8f93\u51fa: \"\" # \u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002 # \u8bf4\u660e: # \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd a-z \u3002 \u89e3\u7b54 \u00b6 \u4e00 \u00b6 class Solution : def longestCommonPrefix ( self , strs ): if strs == []: return '' if strs [ 0 ] == '' : return '' ret = strs [ 0 ] for word in strs [ 1 :]: if word == '' : return '' ret , _len = self . two_word_common_prefix ( word , ret ) if ret == '' : return ret return ret def two_word_common_prefix ( self , word1 , word2 ): ''' f l o w e r f 1 l 1 o 1 w 1 return max_common_prefix, len(max_common_prefix) ''' word1 = list ( word1 ) word2 = list ( word2 ) row = [ None ] * len ( word1 ) arr = [ row ] * len ( word2 ) i = 0 min_len = min ( len ( word1 ), len ( word2 )) while i < min_len : if word1 [ i ] == word2 [ i ]: arr [ i ][ i ] = 1 i += 1 tmp_common_prefix , max_common_prefix , max_len = '' , '' , 0 for i in range ( min_len ): if arr [ i ][ i ] == 1 : if tmp_common_prefix == '' or arr [ i ][ i ] == arr [ i - 1 ][ i - 1 ]: tmp_common_prefix += word1 [ i ] else : break max_len = max ( len ( max_common_prefix ), len ( tmp_common_prefix )) max_common_prefix = max_common_prefix if len ( max_common_prefix ) == max_len else tmp_common_prefix return max_common_prefix , max_len def test_two_word_common_prefix (): b = Solution () assert ( b . two_word_common_prefix ( \"flower\" , \"flow\" ) == ( 'flow' , 4 )) assert ( b . two_word_common_prefix ( \"flower\" , \"flight\" ) == ( 'fl' , 2 )) assert ( b . two_word_common_prefix ( \"flow\" , \"flight\" ) == ( 'fl' , 2 )) assert ( b . two_word_common_prefix ( \"dog\" , \"racecar\" ) == ( '' , 0 )) assert ( b . two_word_common_prefix ( \"car\" , \"racecar\" ) == ( '' , 0 )) assert ( b . two_word_common_prefix ( \"car\" , \"dog\" ) == ( '' , 0 )) def test_longest_common_prefix (): b = Solution () assert ( b . longestCommonPrefix ([ \"flower\" , \"flow\" , \"flight\" ]) == 'fl' ) assert ( b . longestCommonPrefix ([ \"dog\" , \"racecar\" , \"car\" ]) == '' ) \u4e8c \u00b6 class Solution : def longestCommonPrefix ( self , strs ): if not strs : return '' if strs [ 0 ] == '' : return '' c = strs [ 0 ] pre = '' i = 0 while True : if i >= len ( c ): return pre for s in strs [ 1 :]: if i >= len ( s ): return pre if s [ i ] != c [ i ]: return pre else : pre += c [ i ] i += 1 return pre","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00"},{"location":"leetcode/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#_1","text":"# 14. \u6700\u957f\u516c\u5171\u524d\u7f00 # \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 # \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002 # \u793a\u4f8b 1: # \u8f93\u5165: [\"flower\",\"flow\",\"flight\"] # \u8f93\u51fa: \"fl\" # \u793a\u4f8b 2: # \u8f93\u5165: [\"dog\",\"racecar\",\"car\"] # \u8f93\u51fa: \"\" # \u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002 # \u8bf4\u660e: # \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd a-z \u3002","title":"\u9898\u76ee"},{"location":"leetcode/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#_2","text":"","title":"\u89e3\u7b54"},{"location":"leetcode/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#_3","text":"class Solution : def longestCommonPrefix ( self , strs ): if strs == []: return '' if strs [ 0 ] == '' : return '' ret = strs [ 0 ] for word in strs [ 1 :]: if word == '' : return '' ret , _len = self . two_word_common_prefix ( word , ret ) if ret == '' : return ret return ret def two_word_common_prefix ( self , word1 , word2 ): ''' f l o w e r f 1 l 1 o 1 w 1 return max_common_prefix, len(max_common_prefix) ''' word1 = list ( word1 ) word2 = list ( word2 ) row = [ None ] * len ( word1 ) arr = [ row ] * len ( word2 ) i = 0 min_len = min ( len ( word1 ), len ( word2 )) while i < min_len : if word1 [ i ] == word2 [ i ]: arr [ i ][ i ] = 1 i += 1 tmp_common_prefix , max_common_prefix , max_len = '' , '' , 0 for i in range ( min_len ): if arr [ i ][ i ] == 1 : if tmp_common_prefix == '' or arr [ i ][ i ] == arr [ i - 1 ][ i - 1 ]: tmp_common_prefix += word1 [ i ] else : break max_len = max ( len ( max_common_prefix ), len ( tmp_common_prefix )) max_common_prefix = max_common_prefix if len ( max_common_prefix ) == max_len else tmp_common_prefix return max_common_prefix , max_len def test_two_word_common_prefix (): b = Solution () assert ( b . two_word_common_prefix ( \"flower\" , \"flow\" ) == ( 'flow' , 4 )) assert ( b . two_word_common_prefix ( \"flower\" , \"flight\" ) == ( 'fl' , 2 )) assert ( b . two_word_common_prefix ( \"flow\" , \"flight\" ) == ( 'fl' , 2 )) assert ( b . two_word_common_prefix ( \"dog\" , \"racecar\" ) == ( '' , 0 )) assert ( b . two_word_common_prefix ( \"car\" , \"racecar\" ) == ( '' , 0 )) assert ( b . two_word_common_prefix ( \"car\" , \"dog\" ) == ( '' , 0 )) def test_longest_common_prefix (): b = Solution () assert ( b . longestCommonPrefix ([ \"flower\" , \"flow\" , \"flight\" ]) == 'fl' ) assert ( b . longestCommonPrefix ([ \"dog\" , \"racecar\" , \"car\" ]) == '' )","title":"\u4e00"},{"location":"leetcode/14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#_4","text":"class Solution : def longestCommonPrefix ( self , strs ): if not strs : return '' if strs [ 0 ] == '' : return '' c = strs [ 0 ] pre = '' i = 0 while True : if i >= len ( c ): return pre for s in strs [ 1 :]: if i >= len ( s ): return pre if s [ i ] != c [ i ]: return pre else : pre += c [ i ] i += 1 return pre","title":"\u4e8c"},{"location":"leetcode/%E6%95%B0%E7%BB%84/11.%20%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/","text":"\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668 \u00b6 \u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570 a1\uff0ca2\uff0c...\uff0can\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, ai) \u3002\u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, ai) \u548c (i, 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c\u4e14 n \u7684\u503c\u81f3\u5c11\u4e3a 2\u3002 \u793a\u4f8b: \u8f93\u5165: [1,8,6,2,5,4,8,3,7] \u8f93\u51fa: 49 \u9898\u89e3 \u00b6 \u9898\u76ee\u7684\u610f\u601d\uff1a\u4e24\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u4e0b\u6807\u76f8\u51cf\u518d\u4e58\u4ee5\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u8f83\u5c0f\u503c\u3002\u627e\u51fa\u6700\u5927\u7684\u503c\u3002 \u65b9\u6cd5\u4e00 \uff1a\u66b4\u529b\u904d\u5386\uff0c\u6c42\u51fa\u6240\u6709\u7684\u60c5\u51b5\uff0c\u53d6\u6700\u5927\u3002 \u200b \u65f6\u95f4\u590d\u6742\u5ea6 O(n**2) \u200b \u7a7a\u95f4\u590d\u6742\u5ea6 O(1) class Solution ( object ): def maxArea ( self , height ): \"\"\" :type height: List[int] :rtype: int \"\"\" max = 0 for i in range ( len ( height ) - 1 ): for j in range ( i + 1 , len ( height )): r = ( j - i ) * min ( height [ i ], height [ j ]) if r > max : max = r return max \u65b9\u6cd5\u4e8c \uff1a\u53cc\u6307\u9488\u6cd5 \u200b \u9996\u5c3e\u4e24\u4e2a\u6307\u9488\u4fdd\u8bc1\u4e86\u5bbd\u5ea6\u7531\u5927\u5230\u5c0f\uff0c\u9996\u4f4d\u4e24\u4e2a\u6307\u9488\u5411\u4e2d\u95f4\u9760\u62e2\u3002 \u200b \u9760\u62e2\u89c4\u5219\uff1a\u6307\u5411\u8f83\u5c0f\u6570\u7684\u6307\u9488\u738b\u4e2d\u95f4\u9760\u62e2\uff0c\u76f4\u5230\u5c3e\u6307\u9488\u5c0f\u4e8e\u7b49\u4e8e\u9996\u6307\u9488\u3002\u4fdd\u5b58\u4e4b\u95f4\u6700\u5927\u7684\u9762\u79ef\u3002 \u200b \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n) \u53ea\u904d\u5386\u4e86\u4e00\u6b21 \u200b \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(1) class Solution ( object ): def maxArea ( self , height ): \"\"\" :type height: List[int] :rtype: int \"\"\" max = 0 i = 0 j = len ( height ) - 1 while j > i : r = ( j - i ) * min ( height [ i ], height [ j ]) if r > max : max = r if height [ i ] < height [ j ]: i += 1 else : j -= 1 return max","title":"\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668"},{"location":"leetcode/%E6%95%B0%E7%BB%84/11.%20%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/#_1","text":"\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570 a1\uff0ca2\uff0c...\uff0can\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, ai) \u3002\u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, ai) \u548c (i, 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c\u4e14 n \u7684\u503c\u81f3\u5c11\u4e3a 2\u3002 \u793a\u4f8b: \u8f93\u5165: [1,8,6,2,5,4,8,3,7] \u8f93\u51fa: 49","title":"\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668"},{"location":"leetcode/%E6%95%B0%E7%BB%84/11.%20%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/#_2","text":"\u9898\u76ee\u7684\u610f\u601d\uff1a\u4e24\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u4e0b\u6807\u76f8\u51cf\u518d\u4e58\u4ee5\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5143\u7d20\u7684\u8f83\u5c0f\u503c\u3002\u627e\u51fa\u6700\u5927\u7684\u503c\u3002 \u65b9\u6cd5\u4e00 \uff1a\u66b4\u529b\u904d\u5386\uff0c\u6c42\u51fa\u6240\u6709\u7684\u60c5\u51b5\uff0c\u53d6\u6700\u5927\u3002 \u200b \u65f6\u95f4\u590d\u6742\u5ea6 O(n**2) \u200b \u7a7a\u95f4\u590d\u6742\u5ea6 O(1) class Solution ( object ): def maxArea ( self , height ): \"\"\" :type height: List[int] :rtype: int \"\"\" max = 0 for i in range ( len ( height ) - 1 ): for j in range ( i + 1 , len ( height )): r = ( j - i ) * min ( height [ i ], height [ j ]) if r > max : max = r return max \u65b9\u6cd5\u4e8c \uff1a\u53cc\u6307\u9488\u6cd5 \u200b \u9996\u5c3e\u4e24\u4e2a\u6307\u9488\u4fdd\u8bc1\u4e86\u5bbd\u5ea6\u7531\u5927\u5230\u5c0f\uff0c\u9996\u4f4d\u4e24\u4e2a\u6307\u9488\u5411\u4e2d\u95f4\u9760\u62e2\u3002 \u200b \u9760\u62e2\u89c4\u5219\uff1a\u6307\u5411\u8f83\u5c0f\u6570\u7684\u6307\u9488\u738b\u4e2d\u95f4\u9760\u62e2\uff0c\u76f4\u5230\u5c3e\u6307\u9488\u5c0f\u4e8e\u7b49\u4e8e\u9996\u6307\u9488\u3002\u4fdd\u5b58\u4e4b\u95f4\u6700\u5927\u7684\u9762\u79ef\u3002 \u200b \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(n) \u53ea\u904d\u5386\u4e86\u4e00\u6b21 \u200b \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a O(1) class Solution ( object ): def maxArea ( self , height ): \"\"\" :type height: List[int] :rtype: int \"\"\" max = 0 i = 0 j = len ( height ) - 1 while j > i : r = ( j - i ) * min ( height [ i ], height [ j ]) if r > max : max = r if height [ i ] < height [ j ]: i += 1 else : j -= 1 return max","title":"\u9898\u89e3"},{"location":"leetcode/%E6%95%B0%E7%BB%84/26.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","text":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\u539f\u5730\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u6570\u7ec4 nums = [ 1 , 1 , 2 ], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2 , \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1 , 2 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [ 0 , 0 , 1 , 1 , 1 , 2 , 2 , 3 , 3 , 4 ], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5 , \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0 , 1 , 2 , 3 , 4 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates ( nums ); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\u8be5\u957f\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 for ( int i = 0 ; i < len ; i ++ ) { print ( nums [ i ]); } \u89e3\u9898\u601d\u8def \u00b6 \u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0ca\u548cb\uff0c\u5206\u522b\u6307\u54110\u548c1\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0cb\u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ada\u4e0b\u6807\u7684\u5143\u7d20\u548cb\u4e0b\u6807\u7684\u5143\u7d20\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u4e0d\u540c\u5219a\u5f80\u540e\u79fb\u4e00\u4f4d\uff0c\u5e76\u628a\u540e\u79fb\u4e4b\u540e\u5bf9\u5e94\u7684\u4f4d\u7f6e\u7684\u503c\u7f6e\u4e3anum[b]\u3002 class Solution ( object ): def removeDuplicates ( self , nums ): \"\"\" :type nums: List[int] :rtype: int \"\"\" if not nums : return 0 count = 0 for i in range ( 1 , len ( nums )): if nums [ count ] != nums [ i ]: count += 1 nums [ count ] = nums [ i ] return count + 1","title":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"leetcode/%E6%95%B0%E7%BB%84/26.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\u539f\u5730\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a\u6570\u7ec4 nums = [ 1 , 1 , 2 ], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2 , \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1 , 2 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [ 0 , 0 , 1 , 1 , 1 , 2 , 2 , 3 , 3 , 4 ], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5 , \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0 , 1 , 2 , 3 , 4 \u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates ( nums ); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\u8be5\u957f\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 for ( int i = 0 ; i < len ; i ++ ) { print ( nums [ i ]); }","title":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"leetcode/%E6%95%B0%E7%BB%84/26.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/#_2","text":"\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0ca\u548cb\uff0c\u5206\u522b\u6307\u54110\u548c1\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0cb\u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ada\u4e0b\u6807\u7684\u5143\u7d20\u548cb\u4e0b\u6807\u7684\u5143\u7d20\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u4e0d\u540c\u5219a\u5f80\u540e\u79fb\u4e00\u4f4d\uff0c\u5e76\u628a\u540e\u79fb\u4e4b\u540e\u5bf9\u5e94\u7684\u4f4d\u7f6e\u7684\u503c\u7f6e\u4e3anum[b]\u3002 class Solution ( object ): def removeDuplicates ( self , nums ): \"\"\" :type nums: List[int] :rtype: int \"\"\" if not nums : return 0 count = 0 for i in range ( 1 , len ( nums )): if nums [ count ] != nums [ i ]: count += 1 nums [ count ] = nums [ i ] return count + 1","title":"\u89e3\u9898\u601d\u8def"},{"location":"leetcode/%E6%95%B0%E7%BB%84/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/","text":"\u79fb\u9664\u5143\u7d20 \u00b6 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u503c val\uff0c\u4f60\u9700\u8981\u539f\u5730\u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a nums = [3,2,2,3], val = 3, \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a 2\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [0,1,2,2,3,0,4,2], val = 2, \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a 0, 1, 3, 0, 4\u3002 \u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u4f5c\u4efb\u4f55\u62f7\u8d1d int len = removeElement ( nums , val ); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\u8be5\u957f\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 for ( int i = 0 ; i < len ; i ++ ) { print ( nums [ i ]); } \u89e3\u9898\u601d\u8def \u00b6 \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u4e0d\u7b49\u4e8eval\uff0c\u5219\u4fdd\u7559\uff0c\u5e76\u4e14\u6307\u9488\u540e\u79fb\u4e00\u4f4d\uff0c\u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002 class Solution ( object ): def removeElement ( self , nums , val ): \"\"\" :type nums: List[int] :type val: int :rtype: int \"\"\" if not nums : return 0 count = 0 for i in range ( len ( nums )): if nums [ i ] != val : nums [ count ] = nums [ i ] count += 1 return count leetcode \u7ed3\u679c \u00b6","title":"\u79fb\u9664\u5143\u7d20"},{"location":"leetcode/%E6%95%B0%E7%BB%84/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#_1","text":"","title":"\u79fb\u9664\u5143\u7d20"},{"location":"leetcode/%E6%95%B0%E7%BB%84/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u503c val\uff0c\u4f60\u9700\u8981\u539f\u5730\u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 1: \u7ed9\u5b9a nums = [3,2,2,3], val = 3, \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a 2\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2: \u7ed9\u5b9a nums = [0,1,2,2,3,0,4,2], val = 2, \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a 0, 1, 3, 0, 4\u3002 \u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u4f5c\u4efb\u4f55\u62f7\u8d1d int len = removeElement ( nums , val ); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\u8be5\u957f\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 for ( int i = 0 ; i < len ; i ++ ) { print ( nums [ i ]); }","title":"\u9898\u76ee"},{"location":"leetcode/%E6%95%B0%E7%BB%84/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#_3","text":"\u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u5143\u7d20\u4e0d\u7b49\u4e8eval\uff0c\u5219\u4fdd\u7559\uff0c\u5e76\u4e14\u6307\u9488\u540e\u79fb\u4e00\u4f4d\uff0c\u5426\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002 class Solution ( object ): def removeElement ( self , nums , val ): \"\"\" :type nums: List[int] :type val: int :rtype: int \"\"\" if not nums : return 0 count = 0 for i in range ( len ( nums )): if nums [ i ] != val : nums [ count ] = nums [ i ] count += 1 return count","title":"\u89e3\u9898\u601d\u8def"},{"location":"leetcode/%E6%95%B0%E7%BB%84/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/#leetcode","text":"","title":"leetcode \u7ed3\u679c"},{"location":"leetcode/%E6%95%B0%E7%BB%84/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/","text":"\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e \u00b6 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,5,6], 5 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [1,3,5,6], 2 \u8f93\u51fa: 1 \u793a\u4f8b 3: \u8f93\u5165: [1,3,5,6], 7 \u8f93\u51fa: 4 \u793a\u4f8b 4: \u8f93\u5165: [1,3,5,6], 0 \u8f93\u51fa: 0 \u89e3\u9898\u601d\u8def \u00b6 \u4ee3\u7801 \u00b6 class Solution ( object ): def searchInsert ( self , nums , target ): \"\"\" :type nums: List[int] :type target: int :rtype: int \"\"\" if not nums : return 0 for i in range ( len ( nums )): if nums [ i ] >= target : return i return i + 1","title":"\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e"},{"location":"leetcode/%E6%95%B0%E7%BB%84/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_1","text":"","title":"\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e"},{"location":"leetcode/%E6%95%B0%E7%BB%84/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002 \u793a\u4f8b 1: \u8f93\u5165: [1,3,5,6], 5 \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: [1,3,5,6], 2 \u8f93\u51fa: 1 \u793a\u4f8b 3: \u8f93\u5165: [1,3,5,6], 7 \u8f93\u51fa: 4 \u793a\u4f8b 4: \u8f93\u5165: [1,3,5,6], 0 \u8f93\u51fa: 0","title":"\u9898\u76ee"},{"location":"leetcode/%E6%95%B0%E7%BB%84/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_3","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"leetcode/%E6%95%B0%E7%BB%84/35.%20%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/#_4","text":"class Solution ( object ): def searchInsert ( self , nums , target ): \"\"\" :type nums: List[int] :type target: int :rtype: int \"\"\" if not nums : return 0 for i in range ( len ( nums )): if nums [ i ] >= target : return i return i + 1","title":"\u4ee3\u7801"},{"location":"leetcode/%E6%95%B0%E7%BB%84/6.Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/","text":"Z \u5b57\u5f62\u53d8\u6362 \u00b6 \u9898\u76ee \u00b6 \u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"LEETCODEISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a L C I R E T O E S I I G E D H N \u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a \"LCIRETOESIIGEDHN\" \u3002 \u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a string convert ( string s , int numRows ); \u793a\u4f8b 1: \u8f93\u5165 : s = \"LEETCODEISHIRING\" , numRows = 3 \u8f93\u51fa : \"LCIRETOESIIGEDHN\" \u793a\u4f8b 2: \u8f93\u5165 : s = \"LEETCODEISHIRING\" , numRows = 4 \u8f93\u51fa : \"LDREOEIIECIHNTSG\" \u89e3\u91ca : L D R E O E I I E C I H N T S G \u9898\u89e3 \u00b6 \u9898\u610f \u00b6 \u6211\u5f00\u59cb\u8bfb\u4e86\u4e24\u904d\u9898\uff0c\u8bfb\u61c2\u4e86\u9898\u610f\uff0c\u9898\u76ee\u8ba9\u6211\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u53c2\u6570\u662f\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53d8\u5f62\u6210**Z**\u5f62\u5b57\u7b26\u7684\u884c\u6570\uff0c\u7136\u540e\u51fd\u6570\u8fd4\u56deZ\u5f62\u5b57\u7b26\u6bcf\u4e00\u884c\u7684\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u7b14\u8005\u7684\u60f3\u6cd5 \u00b6 \u6211\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u7528\u4e8c\u7ef4\u6570\u7ec4\uff0cpython\u91cc\u5c31\u5217\u8868\u5957\u5217\u8868\uff0c\u7136\u540e\u5b9e\u73b0\u8d77\u6765\u611f\u89c9\u8fd8\u662f\u6709\u70b9\u70e6\u7684\uff0c\u4f5c\u4e3a\u521a\u5f00\u59cb\u5237leetcode\u7684\u6211\uff0c\u6211\u7684\u60f3\u6cd5\u80af\u5b9a\u4e0d\u662f\u4ec0\u4e48\u597d\u7684\u601d\u8def\uff08\u8fd9\u91cc\u4e0d\u662f\u5984\u81ea\u83f2\u8584\uff0c\u53ea\u662f\u8ba4\u6e05\u73b0\u5b9e\uff09\u3002 \u529b\u6263\u4e0a\u5927\u795e\u7684\u89c1\u89e3 \u00b6 \u5927\u81f4\u610f\u601d\u5c31\u662f\u8bf4\uff1a \u200b \u904d\u5386\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u4ee5\u884c\u4e3a\u5355\u4f4d\uff0c\u628a\u904d\u5386\u7684\u5b57\u7b26\u4fdd\u5b58\u5728\u6bcf\u4e00\u884c\u4e0a\uff0c\u6700\u540e\u628a\u6240\u6709\u7684\u884c\u7d2f\u52a0\u8f93\u51fa\u5c31\u5f62\u4e86\u3002\u600e\u4e48\u63a7\u5236\u6bcf\u4e2a\u5b57\u7b26\u5728\u54ea\u4e00\u884c\u5462\uff1f\u6839\u636e\u9898\u76ee\u610f\u601d\uff0c\u5047\u5982 numRows \u4e3a3\uff0c\u884c\u53f7\u5e94\u8be5\u4e3a 0 1 2 1 0 1 2 1 0 \u4e00\u76f4\u5230\u904d\u5386\u7ed3\u675f\uff0c\u8f6c\u6298\u70b9\u5c31\u662f0 \u548c numRows - 1 \u6240\u4ee5\u6839\u636e\u5927\u795e\u89e3\u9898\u601d\u8def\u6211\u5199\u51fa\u4e86\u6211\u7684\u4ee3\u7801\uff1a class Solution : def convert ( self , s : str , numRows : int ): # -> str: if numRows == 1 : return s res = [ '' for _ in range ( numRows )] # ['', '', ''] flag = None # \u6807\u5fd7\u662f\u884c\u589e\u8fd8\u5269\u884c\u51cf i = 0 # \u884c\u53f7 for ch in s : if i == 0 : flag = 1 if i == numRows - 1 : flag = - 1 res [ i ] += ch i += flag return '' . join ( res ) \u5f53numRows == 1\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u53d8\u5f62\u6210\u4e00\u884c\uff0c\u548c\u6e90\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u884c\u4e86\u3002 \u5927\u795e\u7684\u4ee3\u7801 class Solution : def convert ( self , s : str , numRows : int ) -> str : if numRows < 2 : return s res = [ \"\" for _ in range ( numRows )] i , flag = 0 , - 1 for c in s : res [ i ] += c if i == 0 or i == numRows - 1 : flag = - flag i += flag return \"\" . join ( res ) \u4f53\u4f1a \u00b6 \u81ea\u5df1\u548c\u5927\u795e\u7684\u5dee\u8ddd\u8fd8\u5269\u5f88\u660e\u663e\u7684\uff0c\u5927\u795e\u7684\u89e3\u51b3\u601d\u8def\u4e00\u770b\u5c31\u8c41\u7136\u5f00\u6717\u4e86\uff0c\u81ea\u5df1\u6709\u60f3\u6cd5\uff0c\u4f46\u662f\u4e0d\u5bb9\u6613\u5b9e\u73b0\uff0c\u5927\u795e\u4ee3\u7801\u7684\u7b80\u6d01\u6027\u662f\u771f\u7684\u9ad8\uff0c\u52a0\u6cb9\u5427\uff01 \u6bd5\u7adf\u81ea\u5df1\u624d\u521a\u5f00\u59cb\u3002","title":"Z \u5b57\u5f62\u53d8\u6362"},{"location":"leetcode/%E6%95%B0%E7%BB%84/6.Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#z","text":"","title":"Z \u5b57\u5f62\u53d8\u6362"},{"location":"leetcode/%E6%95%B0%E7%BB%84/6.Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#_1","text":"\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"LEETCODEISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a L C I R E T O E S I I G E D H N \u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a \"LCIRETOESIIGEDHN\" \u3002 \u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a string convert ( string s , int numRows ); \u793a\u4f8b 1: \u8f93\u5165 : s = \"LEETCODEISHIRING\" , numRows = 3 \u8f93\u51fa : \"LCIRETOESIIGEDHN\" \u793a\u4f8b 2: \u8f93\u5165 : s = \"LEETCODEISHIRING\" , numRows = 4 \u8f93\u51fa : \"LDREOEIIECIHNTSG\" \u89e3\u91ca : L D R E O E I I E C I H N T S G","title":"\u9898\u76ee"},{"location":"leetcode/%E6%95%B0%E7%BB%84/6.Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#_2","text":"","title":"\u9898\u89e3"},{"location":"leetcode/%E6%95%B0%E7%BB%84/6.Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#_3","text":"\u6211\u5f00\u59cb\u8bfb\u4e86\u4e24\u904d\u9898\uff0c\u8bfb\u61c2\u4e86\u9898\u610f\uff0c\u9898\u76ee\u8ba9\u6211\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u53c2\u6570\u662f\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53d8\u5f62\u6210**Z**\u5f62\u5b57\u7b26\u7684\u884c\u6570\uff0c\u7136\u540e\u51fd\u6570\u8fd4\u56deZ\u5f62\u5b57\u7b26\u6bcf\u4e00\u884c\u7684\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002","title":"\u9898\u610f"},{"location":"leetcode/%E6%95%B0%E7%BB%84/6.Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#_4","text":"\u6211\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u7528\u4e8c\u7ef4\u6570\u7ec4\uff0cpython\u91cc\u5c31\u5217\u8868\u5957\u5217\u8868\uff0c\u7136\u540e\u5b9e\u73b0\u8d77\u6765\u611f\u89c9\u8fd8\u662f\u6709\u70b9\u70e6\u7684\uff0c\u4f5c\u4e3a\u521a\u5f00\u59cb\u5237leetcode\u7684\u6211\uff0c\u6211\u7684\u60f3\u6cd5\u80af\u5b9a\u4e0d\u662f\u4ec0\u4e48\u597d\u7684\u601d\u8def\uff08\u8fd9\u91cc\u4e0d\u662f\u5984\u81ea\u83f2\u8584\uff0c\u53ea\u662f\u8ba4\u6e05\u73b0\u5b9e\uff09\u3002","title":"\u7b14\u8005\u7684\u60f3\u6cd5"},{"location":"leetcode/%E6%95%B0%E7%BB%84/6.Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#_5","text":"\u5927\u81f4\u610f\u601d\u5c31\u662f\u8bf4\uff1a \u200b \u904d\u5386\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u4ee5\u884c\u4e3a\u5355\u4f4d\uff0c\u628a\u904d\u5386\u7684\u5b57\u7b26\u4fdd\u5b58\u5728\u6bcf\u4e00\u884c\u4e0a\uff0c\u6700\u540e\u628a\u6240\u6709\u7684\u884c\u7d2f\u52a0\u8f93\u51fa\u5c31\u5f62\u4e86\u3002\u600e\u4e48\u63a7\u5236\u6bcf\u4e2a\u5b57\u7b26\u5728\u54ea\u4e00\u884c\u5462\uff1f\u6839\u636e\u9898\u76ee\u610f\u601d\uff0c\u5047\u5982 numRows \u4e3a3\uff0c\u884c\u53f7\u5e94\u8be5\u4e3a 0 1 2 1 0 1 2 1 0 \u4e00\u76f4\u5230\u904d\u5386\u7ed3\u675f\uff0c\u8f6c\u6298\u70b9\u5c31\u662f0 \u548c numRows - 1 \u6240\u4ee5\u6839\u636e\u5927\u795e\u89e3\u9898\u601d\u8def\u6211\u5199\u51fa\u4e86\u6211\u7684\u4ee3\u7801\uff1a class Solution : def convert ( self , s : str , numRows : int ): # -> str: if numRows == 1 : return s res = [ '' for _ in range ( numRows )] # ['', '', ''] flag = None # \u6807\u5fd7\u662f\u884c\u589e\u8fd8\u5269\u884c\u51cf i = 0 # \u884c\u53f7 for ch in s : if i == 0 : flag = 1 if i == numRows - 1 : flag = - 1 res [ i ] += ch i += flag return '' . join ( res ) \u5f53numRows == 1\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u662f\u53d8\u5f62\u6210\u4e00\u884c\uff0c\u548c\u6e90\u5b57\u7b26\u4e32\u4e00\u81f4\uff0c\u76f4\u63a5\u8fd4\u56de\u5c31\u884c\u4e86\u3002 \u5927\u795e\u7684\u4ee3\u7801 class Solution : def convert ( self , s : str , numRows : int ) -> str : if numRows < 2 : return s res = [ \"\" for _ in range ( numRows )] i , flag = 0 , - 1 for c in s : res [ i ] += c if i == 0 or i == numRows - 1 : flag = - flag i += flag return \"\" . join ( res )","title":"\u529b\u6263\u4e0a\u5927\u795e\u7684\u89c1\u89e3"},{"location":"leetcode/%E6%95%B0%E7%BB%84/6.Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/#_6","text":"\u81ea\u5df1\u548c\u5927\u795e\u7684\u5dee\u8ddd\u8fd8\u5269\u5f88\u660e\u663e\u7684\uff0c\u5927\u795e\u7684\u89e3\u51b3\u601d\u8def\u4e00\u770b\u5c31\u8c41\u7136\u5f00\u6717\u4e86\uff0c\u81ea\u5df1\u6709\u60f3\u6cd5\uff0c\u4f46\u662f\u4e0d\u5bb9\u6613\u5b9e\u73b0\uff0c\u5927\u795e\u4ee3\u7801\u7684\u7b80\u6d01\u6027\u662f\u771f\u7684\u9ad8\uff0c\u52a0\u6cb9\u5427\uff01 \u6bd5\u7adf\u81ea\u5df1\u624d\u521a\u5f00\u59cb\u3002","title":"\u4f53\u4f1a"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/","text":"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f \u9898\u89e3 \u00b6 \u5e38\u89c4\u505a\u6cd5 \u00b6 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def removeNthFromEnd ( self , head , n ): \"\"\" :type head: ListNode :type n: int :rtype: ListNode \"\"\" # \u5e38\u89c4\u505a\u6cd5\uff1a # \u5148\u904d\u5386\u627e\u5230\u94fe\u8868\u957f\u5ea6\uff0clength # \u5220\u9664\u5012\u6570\u7b2cn\u4e2a: \u5220\u9664 length - n \u4e2a\u4f4d\u7f6e\u7684\u8282\u70b9\u3002 # \u8fd4\u56de\u5934\u8282\u70b9 cur = head length = 0 while cur : cur = cur . next length += 1 # \u5220\u9664\u7684\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20 if length - n == 0 : return head . next # \u904d\u5386\u5220\u9664 pre = head cur = pre . next i = 1 # \u5f53\u524d\u8282\u70b9\u7684\u4f4d\u7f6e while i != length - n : pre = pre . next cur = cur . next i += 1 pre . next = cur . next del cur return head \u5feb\u6162\u6307\u9488 \u00b6 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def removeNthFromEnd ( self , head , n ): \"\"\" :type head: ListNode :type n: int :rtype: ListNode \"\"\" # \u5feb\u6162\u6307\u9488\uff1a\u6162\u6307\u9488\u4ecehead\u5f00\u59cb\uff0c\u5feb\u6307\u9488\u5728\u6162\u6307\u9488n\u4e2a\u4f4d\u7f6e\u540e # \u4e24\u4e2a\u6307\u9488\u4e00\u76f4\u79fb\u52a8\uff0c\u76f4\u5230\u5feb\u6307\u9488\u5230\u8fbe\u961f\u5c3e\u3002 if not head . next : return None slow = head fast = head for _ in range ( n ): # \u51fa\u9519\u8bf4\u660e\u94fe\u8868\u4e0d\u591f\u957f\uff0c\u5220\u9664\u7684\u5c31\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20 fast = fast . next if not fast : return head . next while fast . next : slow = slow . next fast = fast . next slow . next = slow . next . next return head \u5feb\u6162\u6307\u9488+\u5c0f\u6280\u5de7 \u00b6 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def removeNthFromEnd ( self , head , n ): \"\"\" :type head: ListNode :type n: int :rtype: ListNode \"\"\" # \u5c0f\u6280\u5de7\u7248 # \u5229\u7528dummy \u8282\u70b9\u89e3\u51b3 .next.next \u4e3aNone\u7684\u95ee\u9898 # \u5feb\u6162\u6307\u9488\uff1a\u6162\u6307\u9488\u4ecedummy\u5f00\u59cb\uff0c\u5feb\u6307\u9488\u5728\u6162\u6307\u9488n\u4e2a\u4f4d\u7f6e\u540e # \u4e24\u4e2a\u6307\u9488\u4e00\u76f4\u79fb\u52a8\uff0c\u76f4\u5230\u5feb\u6307\u9488\u5230\u8fbe\u961f\u5c3e\u3002 dummy = ListNode ( 0 ) dummy . next = head slow = fast = dummy for _ in range ( n ): # \u51fa\u9519\u8bf4\u660e\u94fe\u8868\u4e0d\u591f\u957f\uff0c\u5220\u9664\u7684\u5c31\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20 fast = fast . next while fast . next : slow = slow . next fast = fast . next slow . next = slow . next . next return dummy . next dummy \u8282\u70b9\u9002\u7528\u573a\u666f\uff1a\u5220\u9664\u94fe\u8868\u8282\u70b9\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u51cf\u5c11\u5f88\u591abug\u3002","title":"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/#n","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f","title":"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/#_1","text":"","title":"\u9898\u89e3"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/#_2","text":"# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def removeNthFromEnd ( self , head , n ): \"\"\" :type head: ListNode :type n: int :rtype: ListNode \"\"\" # \u5e38\u89c4\u505a\u6cd5\uff1a # \u5148\u904d\u5386\u627e\u5230\u94fe\u8868\u957f\u5ea6\uff0clength # \u5220\u9664\u5012\u6570\u7b2cn\u4e2a: \u5220\u9664 length - n \u4e2a\u4f4d\u7f6e\u7684\u8282\u70b9\u3002 # \u8fd4\u56de\u5934\u8282\u70b9 cur = head length = 0 while cur : cur = cur . next length += 1 # \u5220\u9664\u7684\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20 if length - n == 0 : return head . next # \u904d\u5386\u5220\u9664 pre = head cur = pre . next i = 1 # \u5f53\u524d\u8282\u70b9\u7684\u4f4d\u7f6e while i != length - n : pre = pre . next cur = cur . next i += 1 pre . next = cur . next del cur return head","title":"\u5e38\u89c4\u505a\u6cd5"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/#_3","text":"# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def removeNthFromEnd ( self , head , n ): \"\"\" :type head: ListNode :type n: int :rtype: ListNode \"\"\" # \u5feb\u6162\u6307\u9488\uff1a\u6162\u6307\u9488\u4ecehead\u5f00\u59cb\uff0c\u5feb\u6307\u9488\u5728\u6162\u6307\u9488n\u4e2a\u4f4d\u7f6e\u540e # \u4e24\u4e2a\u6307\u9488\u4e00\u76f4\u79fb\u52a8\uff0c\u76f4\u5230\u5feb\u6307\u9488\u5230\u8fbe\u961f\u5c3e\u3002 if not head . next : return None slow = head fast = head for _ in range ( n ): # \u51fa\u9519\u8bf4\u660e\u94fe\u8868\u4e0d\u591f\u957f\uff0c\u5220\u9664\u7684\u5c31\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20 fast = fast . next if not fast : return head . next while fast . next : slow = slow . next fast = fast . next slow . next = slow . next . next return head","title":"\u5feb\u6162\u6307\u9488"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/#_4","text":"# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def removeNthFromEnd ( self , head , n ): \"\"\" :type head: ListNode :type n: int :rtype: ListNode \"\"\" # \u5c0f\u6280\u5de7\u7248 # \u5229\u7528dummy \u8282\u70b9\u89e3\u51b3 .next.next \u4e3aNone\u7684\u95ee\u9898 # \u5feb\u6162\u6307\u9488\uff1a\u6162\u6307\u9488\u4ecedummy\u5f00\u59cb\uff0c\u5feb\u6307\u9488\u5728\u6162\u6307\u9488n\u4e2a\u4f4d\u7f6e\u540e # \u4e24\u4e2a\u6307\u9488\u4e00\u76f4\u79fb\u52a8\uff0c\u76f4\u5230\u5feb\u6307\u9488\u5230\u8fbe\u961f\u5c3e\u3002 dummy = ListNode ( 0 ) dummy . next = head slow = fast = dummy for _ in range ( n ): # \u51fa\u9519\u8bf4\u660e\u94fe\u8868\u4e0d\u591f\u957f\uff0c\u5220\u9664\u7684\u5c31\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20 fast = fast . next while fast . next : slow = slow . next fast = fast . next slow . next = slow . next . next return dummy . next dummy \u8282\u70b9\u9002\u7528\u573a\u666f\uff1a\u5220\u9664\u94fe\u8868\u8282\u70b9\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u51cf\u5c11\u5f88\u591abug\u3002","title":"\u5feb\u6162\u6307\u9488+\u5c0f\u6280\u5de7"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","text":"\u53cd\u8f6c\u94fe\u8868 \u00b6 \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f \u9898\u89e3 \u00b6 \u8fed\u4ee3 \uff1a\u4f7f\u7528\u4e09\u4e2a\u6307\u9488\u904d\u5386\u4e00\u6b21\u3002 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def reverseList ( self , head ): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if not head or head . next is None : return head pre = None cur = head nex = head . next while cur : cur . next = pre pre = cur cur = nex if nex : nex = nex . next return pre \u9012\u5f52 \uff1a # \u5047\u8bbehead\u8282\u70b9\u5269\u4e0b\u7684\u8282\u70b9\u90fd\u5df2\u7ecf\u6b63\u786e\u53cd\u8f6c\u4e86\u3002 # \u53ea\u9700\u8981\u53cd\u8f6c\u5934\u8282\u70b9\u3002 # \u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u6307\u5411head # \u5934\u8282\u70b9\u6307\u5411None ```python Definition for singly-linked list. \u00b6 class ListNode(object): \u00b6 def init (self, x): \u00b6 self.val = x \u00b6 self.next = None \u00b6 class Solution(object): def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if not head or head.next is None: return head # \u5047\u8bbehead\u8282\u70b9\u5269\u4e0b\u7684\u8282\u70b9\u90fd\u5df2\u7ecf\u6b63\u786e\u53cd\u8f6c\u4e86\u3002 # \u53ea\u9700\u8981\u53cd\u8f6c\u5934\u8282\u70b9\u3002 # \u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u6307\u5411head # \u5934\u8282\u70b9\u6307\u5411None ret = self.reverseList(head.next) head.next.next = head head.next = None return ret ```","title":"\u53cd\u8f6c\u94fe\u8868"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_1","text":"\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f","title":"\u53cd\u8f6c\u94fe\u8868"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#_2","text":"\u8fed\u4ee3 \uff1a\u4f7f\u7528\u4e09\u4e2a\u6307\u9488\u904d\u5386\u4e00\u6b21\u3002 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def reverseList ( self , head ): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if not head or head . next is None : return head pre = None cur = head nex = head . next while cur : cur . next = pre pre = cur cur = nex if nex : nex = nex . next return pre \u9012\u5f52 \uff1a # \u5047\u8bbehead\u8282\u70b9\u5269\u4e0b\u7684\u8282\u70b9\u90fd\u5df2\u7ecf\u6b63\u786e\u53cd\u8f6c\u4e86\u3002 # \u53ea\u9700\u8981\u53cd\u8f6c\u5934\u8282\u70b9\u3002 # \u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u6307\u5411head # \u5934\u8282\u70b9\u6307\u5411None ```python","title":"\u9898\u89e3"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#definition-for-singly-linked-list","text":"","title":"Definition for singly-linked list."},{"location":"leetcode/%E9%93%BE%E8%A1%A8/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#class-listnodeobject","text":"","title":"class ListNode(object):"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#def-initself-x","text":"","title":"def init(self, x):"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#selfval-x","text":"","title":"self.val = x"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/#selfnext-none","text":"class Solution(object): def reverseList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if not head or head.next is None: return head # \u5047\u8bbehead\u8282\u70b9\u5269\u4e0b\u7684\u8282\u70b9\u90fd\u5df2\u7ecf\u6b63\u786e\u53cd\u8f6c\u4e86\u3002 # \u53ea\u9700\u8981\u53cd\u8f6c\u5934\u8282\u70b9\u3002 # \u5934\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u6307\u5411head # \u5934\u8282\u70b9\u6307\u5411None ret = self.reverseList(head.next) head.next.next = head head.next = None return ret ```","title":"self.next = None"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/","text":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u00b6 \u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4 \u9898\u89e3 \u00b6 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def mergeTwoLists ( self , l1 , l2 ): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" # \u4e24\u4e2a\u6307\u9488\uff0ca\uff0cb\u5206\u522b\u904d\u5386l1, l2 # \u6bd4\u8f83a,b\u6240\u6307\u8282\u70b9\u7684\u5143\u7d20\u503c, \u8f83\u5c0f\u7684\u5143\u7d20\u5b58\u5165\u65b0\u94fe\u8868 # \u7136\u540e\u628a\u8f83\u5c0f\u5143\u7d20\u7684\u6307\u9488\u5f80\u540e\u79fb # \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u67d0\u4e2a\u94fe\u8868\u904d\u5386\u7ed3\u675f\uff0c\u53e6\u4e00\u4e2a\u94fe\u8868\u5269\u4f59\u7684\u5143\u7d20\u4fdd\u5b58\u5230\u65b0\u7684\u94fe\u8868\u4e2d\u3002 a , b = l1 , l2 dummy = ListNode ( 0 ) cur = dummy while a and b : if a . val < b . val : cur . next = a a = a . next else : cur . next = b b = b . next cur = cur . next if not a : cur . next = b else : cur . next = a return dummy . next","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_1","text":"\u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/#_2","text":"# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def mergeTwoLists ( self , l1 , l2 ): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" # \u4e24\u4e2a\u6307\u9488\uff0ca\uff0cb\u5206\u522b\u904d\u5386l1, l2 # \u6bd4\u8f83a,b\u6240\u6307\u8282\u70b9\u7684\u5143\u7d20\u503c, \u8f83\u5c0f\u7684\u5143\u7d20\u5b58\u5165\u65b0\u94fe\u8868 # \u7136\u540e\u628a\u8f83\u5c0f\u5143\u7d20\u7684\u6307\u9488\u5f80\u540e\u79fb # \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u67d0\u4e2a\u94fe\u8868\u904d\u5386\u7ed3\u675f\uff0c\u53e6\u4e00\u4e2a\u94fe\u8868\u5269\u4f59\u7684\u5143\u7d20\u4fdd\u5b58\u5230\u65b0\u7684\u94fe\u8868\u4e2d\u3002 a , b = l1 , l2 dummy = ListNode ( 0 ) cur = dummy while a and b : if a . val < b . val : cur . next = a a = a . next else : cur . next = b b = b . next cur = cur . next if not a : cur . next = b else : cur . next = a return dummy . next","title":"\u9898\u89e3"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%28%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96%29/","text":"\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868 \u00b6 \u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [ 1->4->5, 1->3->4, 2->6 ] \u8f93\u51fa: 1->1->2->3->4->4->5->6 \u9898\u89e3 \u00b6 \u6bcf\u4e24\u4e24\u5408\u5e76\uff0c\u6700\u540e\u5f97\u5230\u4e00\u4e2a\u957f\u94fe\u8868\u3002\u4e24\u4e24\u5408\u5e76\u67e5\u770b\uff08../\u94fe\u8868/21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868.md\uff09\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def mergeKLists ( self , lists ): \"\"\" :type lists: List[ListNode] :rtype: ListNode \"\"\" # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) if not lists : return None for i in range ( len ( lists ) - 1 ): l1 = lists [ i ] lists [ i + 1 ] = self . mergeTwoLists ( l1 , lists [ i + 1 ]) return lists [ - 1 ] def mergeTwoLists ( self , l1 , l2 ): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" # \u4e24\u4e2a\u6307\u9488\uff0ca\uff0cb\u5206\u522b\u904d\u5386l1, l2 # \u6bd4\u8f83a,b\u6240\u6307\u8282\u70b9\u7684\u5143\u7d20\u503c, \u8f83\u5c0f\u7684\u5143\u7d20\u5b58\u5165\u65b0\u94fe\u8868 # \u7136\u540e\u628a\u8f83\u5c0f\u5143\u7d20\u7684\u6307\u9488\u5f80\u540e\u79fb # \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u67d0\u4e2a\u94fe\u8868\u904d\u5386\u7ed3\u675f\uff0c\u53e6\u4e00\u4e2a\u94fe\u8868\u5269\u4f59\u7684\u5143\u7d20\u4fdd\u5b58\u5230\u65b0\u7684\u94fe\u8868\u4e2d\u3002 a , b = l1 , l2 dummy = ListNode ( 0 ) cur = dummy while a and b : if a . val < b . val : cur . next = a a = a . next else : cur . next = b b = b . next cur = cur . next if not a : cur . next = b else : cur . next = a return dummy . next \u904d\u5386\u6240\u6709\u7684\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5143\u7d20\u5b58\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u6392\u5e8f\uff0c\u518d\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlgn) \u200b \u904d\u5386\u6240\u6709\u7684\u503c\u9700\u82b1\u8d39 O(N)O(N) \u7684\u65f6\u95f4\u3002 \u200b \u4e00\u4e2a\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u82b1\u8d39 O(N\\log N)O(NlogN) \u7684\u65f6\u95f4\u3002 \u200b \u904d\u5386\u540c\u65f6\u521b\u5efa\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u82b1\u8d39 O(N)O(N) \u7684\u65f6\u95f4\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) # \u591a\u4e86\u7528\u4e8e\u4fdd\u5b58\u6240\u6709\u5143\u7d20\u7684\u5217\u8868 \u200b \u6392\u5e8f\u82b1\u8d39 O(N)O(N) \u7a7a\u95f4\uff08\u8fd9\u53d6\u51b3\u4e8e\u4f60\u9009\u62e9\u7684\u7b97\u6cd5\uff09\u3002 \u200b \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u82b1\u8d39 O(N)O(N) \u7684\u7a7a\u95f4\u3002 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def mergeKLists ( self , lists ): \"\"\" :type lists: List[ListNode] :rtype: ListNode \"\"\" nums = [] for l in lists : nums += self . iter_l ( l ) nums = sorted ( nums ) # \u751f\u6210\u65b0\u7684\u94fe\u8868 dummy = ListNode ( 0 ) cur = dummy for n in nums : cur . next = ListNode ( n ) cur = cur . next return dummy . next @staticmethod def iter_l ( l ): '''\u904d\u5386\u94fe\u8868\uff0c\u8fd4\u56de\u6240\u6709\u5143\u7d20\u7684\u8282\u70b9''' nums = [] while l : nums . append ( l . val ) l = l . next return nums \u4f18\u5148\u961f\u5217\uff0c\u6682\u65f6\u6ca1\u5b66\u5230\uff0c\u8df3\u8fc7\u3002 \u5806\uff0c\u6682\u65f6\u6ca1\u5b66\u5230\uff0c\u8df3\u8fc7\u3002","title":"\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%28%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96%29/#k","text":"\u5408\u5e76 k \u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u793a\u4f8b: \u8f93\u5165: [ 1->4->5, 1->3->4, 2->6 ] \u8f93\u51fa: 1->1->2->3->4->4->5->6","title":"\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/23.%20%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%28%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96%29/#_1","text":"\u6bcf\u4e24\u4e24\u5408\u5e76\uff0c\u6700\u540e\u5f97\u5230\u4e00\u4e2a\u957f\u94fe\u8868\u3002\u4e24\u4e24\u5408\u5e76\u67e5\u770b\uff08../\u94fe\u8868/21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868.md\uff09\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def mergeKLists ( self , lists ): \"\"\" :type lists: List[ListNode] :rtype: ListNode \"\"\" # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) if not lists : return None for i in range ( len ( lists ) - 1 ): l1 = lists [ i ] lists [ i + 1 ] = self . mergeTwoLists ( l1 , lists [ i + 1 ]) return lists [ - 1 ] def mergeTwoLists ( self , l1 , l2 ): \"\"\" :type l1: ListNode :type l2: ListNode :rtype: ListNode \"\"\" # \u4e24\u4e2a\u6307\u9488\uff0ca\uff0cb\u5206\u522b\u904d\u5386l1, l2 # \u6bd4\u8f83a,b\u6240\u6307\u8282\u70b9\u7684\u5143\u7d20\u503c, \u8f83\u5c0f\u7684\u5143\u7d20\u5b58\u5165\u65b0\u94fe\u8868 # \u7136\u540e\u628a\u8f83\u5c0f\u5143\u7d20\u7684\u6307\u9488\u5f80\u540e\u79fb # \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u67d0\u4e2a\u94fe\u8868\u904d\u5386\u7ed3\u675f\uff0c\u53e6\u4e00\u4e2a\u94fe\u8868\u5269\u4f59\u7684\u5143\u7d20\u4fdd\u5b58\u5230\u65b0\u7684\u94fe\u8868\u4e2d\u3002 a , b = l1 , l2 dummy = ListNode ( 0 ) cur = dummy while a and b : if a . val < b . val : cur . next = a a = a . next else : cur . next = b b = b . next cur = cur . next if not a : cur . next = b else : cur . next = a return dummy . next \u904d\u5386\u6240\u6709\u7684\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5143\u7d20\u5b58\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u6392\u5e8f\uff0c\u518d\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(nlgn) \u200b \u904d\u5386\u6240\u6709\u7684\u503c\u9700\u82b1\u8d39 O(N)O(N) \u7684\u65f6\u95f4\u3002 \u200b \u4e00\u4e2a\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\u82b1\u8d39 O(N\\log N)O(NlogN) \u7684\u65f6\u95f4\u3002 \u200b \u904d\u5386\u540c\u65f6\u521b\u5efa\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u82b1\u8d39 O(N)O(N) \u7684\u65f6\u95f4\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) # \u591a\u4e86\u7528\u4e8e\u4fdd\u5b58\u6240\u6709\u5143\u7d20\u7684\u5217\u8868 \u200b \u6392\u5e8f\u82b1\u8d39 O(N)O(N) \u7a7a\u95f4\uff08\u8fd9\u53d6\u51b3\u4e8e\u4f60\u9009\u62e9\u7684\u7b97\u6cd5\uff09\u3002 \u200b \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u82b1\u8d39 O(N)O(N) \u7684\u7a7a\u95f4\u3002 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def mergeKLists ( self , lists ): \"\"\" :type lists: List[ListNode] :rtype: ListNode \"\"\" nums = [] for l in lists : nums += self . iter_l ( l ) nums = sorted ( nums ) # \u751f\u6210\u65b0\u7684\u94fe\u8868 dummy = ListNode ( 0 ) cur = dummy for n in nums : cur . next = ListNode ( n ) cur = cur . next return dummy . next @staticmethod def iter_l ( l ): '''\u904d\u5386\u94fe\u8868\uff0c\u8fd4\u56de\u6240\u6709\u5143\u7d20\u7684\u8282\u70b9''' nums = [] while l : nums . append ( l . val ) l = l . next return nums \u4f18\u5148\u961f\u5217\uff0c\u6682\u65f6\u6ca1\u5b66\u5230\uff0c\u8df3\u8fc7\u3002 \u5806\uff0c\u6682\u65f6\u6ca1\u5b66\u5230\uff0c\u8df3\u8fc7\u3002","title":"\u9898\u89e3"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","text":"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b: \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. \u89e3\u9898\u8fc7\u7a0b \u00b6 # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def swapPairs ( self , head ): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" dummy = ListNode ( 0 ) dummy . next = head pre = dummy while pre . next and pre . next . next : cur = pre . next nex = cur . next pre . next = nex cur . next = nex . next nex . next = cur pre = pre . next . next return dummy . next","title":"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b: \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3.","title":"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/24.%20%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/#_2","text":"# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution ( object ): def swapPairs ( self , head ): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" dummy = ListNode ( 0 ) dummy . next = head pre = dummy while pre . next and pre . next . next : cur = pre . next nex = cur . next pre . next = nex cur . next = nex . next nex . next = cur pre = pre . next . next return dummy . next","title":"\u89e3\u9898\u8fc7\u7a0b"},{"location":"lua/lua%20%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8/","text":"\u5b9e\u73b0\u4e00\u4e2alua\u5355\u94fe\u8868\uff0c\u5907\u7528\u3002 \u4ee3\u7801\u5982\u4e0b \u00b6 --[[ \u6570\u636e\u7ed3\u6784: \u5355\u94fe\u8868 ]] local Node = {} local LinkList = {} function Node : new ( value ) local o = { value = value , next = nil } setmetatable ( o , self ) self . __index = self return o end function LinkList : __new__ ( seq ) node = Node : new () local obj = { head = node , tail = node , len = 0 } setmetatable ( obj , self ) self . __index = self if seq then LinkList . __init__ ( obj , seq ) end return obj end function LinkList : __init__ ( seq ) if type ( seq ) ~= 'table' then error ( seq .. ' not is itertor object' ) end local cur_node = self . head for k , v in pairs ( seq ) do node = { value = v , next = nil } cur_node . next = node cur_node = node self . tail = cur_node self . len = self . len + 1 end end function LinkList : iter () local cur_node = self . head return function () cur_node = cur_node . next if cur_node then return cur_node , cur_node . value end end end function LinkList : iter_print () for k , v in self : iter () do print ( 'value: ' .. v .. ' next: ' , k ) end end function LinkList : append ( value ) local node = Node : new ( value ) self . tail . next = node self . tail = node self . len = self . len + 1 end function LinkList : remove ( value ) if self . len == 0 then error ( 'from empty linklist remove' ) end local pre_node = self . head local cur_node = pre_node . next while cur_node . value ~= value do pre_node = cur_node cur_node = cur_node . next end pre_node . next = cur_node . next -- \u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u4e3a\u5c3e\u8282\u70b9 if cur_node == self . tail then self . tail = pre_node end -- \u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u4e3a\u5934\u8282\u70b9 if cur_node == self . head then self . head = cur_node . next end cur_node = nil self . len = self . len - 1 end function LinkList : pop () if self . len == 0 then error ( 'from empty linklist pop' ) end local pre_node = self . head local cur_node = pre_node . next while cur_node ~= self . tail do pre_node = pre_node . next cur_node = cur_node . next end local value = self . tail . value self . tail = pre_node self . tail . next = nil self . len = self . len - 1 return value end function LinkList : append_left ( value ) local node = Node : new ( value ) node . next = self . head . next self . head . next = node self . len = self . len + 1 end function linklist_test () -- \u5355\u6d4b --- \u521b\u5efa\u7a7a\u94fe\u8868 local ll = LinkList : __new__ () assert ( ll . len == 0 ) ll : iter_print () -- \u5c3e\u90e8\u8ffd\u52a0\u5143\u7d20 ll : append ( 1 ) assert ( ll . len == 1 ) ll : iter_print () ll : append ( 2 ) ll : append ( 3 ) ll : remove ( 2 ) assert ( ll . len == 2 ) ll : iter_print () print ( '##############################' ) --- \u975e\u7a7a\u94fe\u8868\u6d4b\u8bd5 local t = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } local ll = LinkList : __new__ ( t ) ll : iter_print () assert ( ll . len == 10 ) ll : append ( 11 ) assert ( ll . len == 11 ) ll : iter_print () assert ( ll : pop () == 11 ) assert ( ll . len == 10 ) ll : iter_print () assert ( ll : pop () == 0 ) assert ( ll . len == 9 ) ll : iter_print () ll : append_left ( 0 ) assert ( ll . len == 10 ) ll : iter_print () ll : append_left ( - 1 ) assert ( ll . len == 11 ) ll : iter_print () end -- linklist_test() return LinkList","title":"lua \u5355\u94fe\u8868"},{"location":"lua/lua%20%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8/#_1","text":"--[[ \u6570\u636e\u7ed3\u6784: \u5355\u94fe\u8868 ]] local Node = {} local LinkList = {} function Node : new ( value ) local o = { value = value , next = nil } setmetatable ( o , self ) self . __index = self return o end function LinkList : __new__ ( seq ) node = Node : new () local obj = { head = node , tail = node , len = 0 } setmetatable ( obj , self ) self . __index = self if seq then LinkList . __init__ ( obj , seq ) end return obj end function LinkList : __init__ ( seq ) if type ( seq ) ~= 'table' then error ( seq .. ' not is itertor object' ) end local cur_node = self . head for k , v in pairs ( seq ) do node = { value = v , next = nil } cur_node . next = node cur_node = node self . tail = cur_node self . len = self . len + 1 end end function LinkList : iter () local cur_node = self . head return function () cur_node = cur_node . next if cur_node then return cur_node , cur_node . value end end end function LinkList : iter_print () for k , v in self : iter () do print ( 'value: ' .. v .. ' next: ' , k ) end end function LinkList : append ( value ) local node = Node : new ( value ) self . tail . next = node self . tail = node self . len = self . len + 1 end function LinkList : remove ( value ) if self . len == 0 then error ( 'from empty linklist remove' ) end local pre_node = self . head local cur_node = pre_node . next while cur_node . value ~= value do pre_node = cur_node cur_node = cur_node . next end pre_node . next = cur_node . next -- \u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u4e3a\u5c3e\u8282\u70b9 if cur_node == self . tail then self . tail = pre_node end -- \u5982\u679c\u5220\u9664\u7684\u8282\u70b9\u4e3a\u5934\u8282\u70b9 if cur_node == self . head then self . head = cur_node . next end cur_node = nil self . len = self . len - 1 end function LinkList : pop () if self . len == 0 then error ( 'from empty linklist pop' ) end local pre_node = self . head local cur_node = pre_node . next while cur_node ~= self . tail do pre_node = pre_node . next cur_node = cur_node . next end local value = self . tail . value self . tail = pre_node self . tail . next = nil self . len = self . len - 1 return value end function LinkList : append_left ( value ) local node = Node : new ( value ) node . next = self . head . next self . head . next = node self . len = self . len + 1 end function linklist_test () -- \u5355\u6d4b --- \u521b\u5efa\u7a7a\u94fe\u8868 local ll = LinkList : __new__ () assert ( ll . len == 0 ) ll : iter_print () -- \u5c3e\u90e8\u8ffd\u52a0\u5143\u7d20 ll : append ( 1 ) assert ( ll . len == 1 ) ll : iter_print () ll : append ( 2 ) ll : append ( 3 ) ll : remove ( 2 ) assert ( ll . len == 2 ) ll : iter_print () print ( '##############################' ) --- \u975e\u7a7a\u94fe\u8868\u6d4b\u8bd5 local t = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 0 } local ll = LinkList : __new__ ( t ) ll : iter_print () assert ( ll . len == 10 ) ll : append ( 11 ) assert ( ll . len == 11 ) ll : iter_print () assert ( ll : pop () == 11 ) assert ( ll . len == 10 ) ll : iter_print () assert ( ll : pop () == 0 ) assert ( ll . len == 9 ) ll : iter_print () ll : append_left ( 0 ) assert ( ll . len == 10 ) ll : iter_print () ll : append_left ( - 1 ) assert ( ll . len == 11 ) ll : iter_print () end -- linklist_test() return LinkList","title":"\u4ee3\u7801\u5982\u4e0b"},{"location":"lua/lua%20%E6%89%93%E5%8D%B0%E8%A1%A8/","text":"lua \u6253\u5370\u8868 \u00b6 -- \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 function STR ( obj ) if type ( obj ) == \"table\" then return _STR_TABLE ( obj ) elseif type ( obj ) == \"string\" then return _STR_STRING ( obj ) elseif obj == nil then return \"nil\" else return tostring ( obj ) end end local _esc_table = { [ \" \\n \" ] = \" \\\\ n\" , [ \" \\r \" ] = \" \\\\ r\" , [ \" \\t \" ] = \" \\\\ t\" , [ \" \\b \" ] = \" \\\\ b\" , [ \" \\v \" ] = \" \\\\ v\" , [ \" \\\\ \" ] = \" \\\\\\\\ \" , [ \" \\\" \" ] = \" \\\\\\\" \" , } function _STR_STRING ( str ) str = string.gsub ( str , \".\" , function ( c ) return _esc_table [ c ] or c end ) str = string.gsub ( str , \"[^%w%p ]\" , function ( c ) return string.format ( \" \\\\ x%02x\" , string.byte ( c )) end ) return '\"' .. str .. '\"' end function _STR_TABLE ( obj , indent , checker ) indent = indent or \"\" if string.len ( indent ) > 20 then return indent .. \"...\" end checker = checker or {} checker [ obj ] = true local ret = {} ret [ 1 +# ret ] = indent .. tostring ( obj ) .. \" { \\n \" for k , v in pairs ( obj ) do if type ( k ) == \"table\" then ret [ 1 +# ret ] = indent .. \" \" .. tostring ( k ) .. \": =====>\" .. tostring ( v ) .. \" \\n \" elseif type ( v ) == \"table\" then if checker [ v ] then -- \u9012\u5f52\u4e86 ret [ 1 +# ret ] = indent .. \" \" .. STR ( k ) .. \": =====>\" .. tostring ( v ) .. \" \\n \" else ret [ 1 +# ret ] = indent .. \" \" .. STR ( k ) .. \": \\n \" ret [ 1 +# ret ] = _STR_TABLE ( v , indent .. \" \" , checker ) .. \" \\n \" end else ret [ 1 +# ret ] = indent .. \" \" .. STR ( k ) .. \": \" .. STR ( v ) .. \" \\n \" end end ret [ 1 +# ret ] = indent .. \"}\" checker [ obj ] = nil return table.concat ( ret , \"\" ) end -- \u8c03\u8bd5\u7528\u7684print function PRINT (...) local args = {...} local max_index = 0 for k , v in pairs ( args ) do max_index = k > max_index and k or max_index end for i = 1 , max_index do args [ i ] = STR ( args [ i ]) end print ( table.concat ( args , \", \" )) end","title":"lua \u6253\u5370\u8868"},{"location":"lua/lua%20%E6%89%93%E5%8D%B0%E8%A1%A8/#lua","text":"-- \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 function STR ( obj ) if type ( obj ) == \"table\" then return _STR_TABLE ( obj ) elseif type ( obj ) == \"string\" then return _STR_STRING ( obj ) elseif obj == nil then return \"nil\" else return tostring ( obj ) end end local _esc_table = { [ \" \\n \" ] = \" \\\\ n\" , [ \" \\r \" ] = \" \\\\ r\" , [ \" \\t \" ] = \" \\\\ t\" , [ \" \\b \" ] = \" \\\\ b\" , [ \" \\v \" ] = \" \\\\ v\" , [ \" \\\\ \" ] = \" \\\\\\\\ \" , [ \" \\\" \" ] = \" \\\\\\\" \" , } function _STR_STRING ( str ) str = string.gsub ( str , \".\" , function ( c ) return _esc_table [ c ] or c end ) str = string.gsub ( str , \"[^%w%p ]\" , function ( c ) return string.format ( \" \\\\ x%02x\" , string.byte ( c )) end ) return '\"' .. str .. '\"' end function _STR_TABLE ( obj , indent , checker ) indent = indent or \"\" if string.len ( indent ) > 20 then return indent .. \"...\" end checker = checker or {} checker [ obj ] = true local ret = {} ret [ 1 +# ret ] = indent .. tostring ( obj ) .. \" { \\n \" for k , v in pairs ( obj ) do if type ( k ) == \"table\" then ret [ 1 +# ret ] = indent .. \" \" .. tostring ( k ) .. \": =====>\" .. tostring ( v ) .. \" \\n \" elseif type ( v ) == \"table\" then if checker [ v ] then -- \u9012\u5f52\u4e86 ret [ 1 +# ret ] = indent .. \" \" .. STR ( k ) .. \": =====>\" .. tostring ( v ) .. \" \\n \" else ret [ 1 +# ret ] = indent .. \" \" .. STR ( k ) .. \": \\n \" ret [ 1 +# ret ] = _STR_TABLE ( v , indent .. \" \" , checker ) .. \" \\n \" end else ret [ 1 +# ret ] = indent .. \" \" .. STR ( k ) .. \": \" .. STR ( v ) .. \" \\n \" end end ret [ 1 +# ret ] = indent .. \"}\" checker [ obj ] = nil return table.concat ( ret , \"\" ) end -- \u8c03\u8bd5\u7528\u7684print function PRINT (...) local args = {...} local max_index = 0 for k , v in pairs ( args ) do max_index = k > max_index and k or max_index end for i = 1 , max_index do args [ i ] = STR ( args [ i ]) end print ( table.concat ( args , \", \" )) end","title":"lua \u6253\u5370\u8868"},{"location":"lua/opp/","text":"lua \u9762\u5411\u5bf9\u8c61 \u00b6 -- \u5199\u4e00\u4e2a\u519c\u6c11\u7c7bPeasant\u6709\u65b9\u6cd5\uff1a -- def farm(self, plant): -- ... -- \u5199\u4e00\u4e2a\u5de5\u4eba\u7c7bWorker -- \u65b9\u6cd5\u5982\u4e0b\uff1a -- def work(self, that): -- ... -- \u521b\u5efa\u4e00\u4e2a\u519c\u6c11\u5de5\u4e3aMigrantWorker, \u8ba9\u6b64\u7c7b\u7684\u5bf9\u8c61\u62e5\u6709\u4e0a\u9762\u4e24\u4e2a\u7c7b\u7684\u5168\u90e8\u65b9\u6cd5 -- person = MigrantWorker() -- person.farm('\u6c34\u7a3b') # \u6b63\u5728\u79cd\u690d \u6c34\u7a3b -- person.work('\u6c7d\u8f66') # \u6b63\u5728\u5236\u9020 \u6c7d\u8f66 -- Peasant \u7c7b local Peasant = {} function Peasant : new () local o = {} setmetatable ( o , self ) self . __index = self return o end function Peasant : farm ( plant ) print ( '\u6b63\u5728\u79cd\u690d' .. plant ) end -- Worker \u7c7b Worker = {} function Worker : new () local o = {} setmetatable ( o , self ) self . __index = self return o end function Worker : work ( that ) print ( '\u6b63\u5728\u5236\u9020' .. that ) end -- MigrantWorker \u7c7b MigrantWorker = {} function MigrantWorker : new () local o = {} setmetatable ( o , self ) self . __index = self self . farm = Peasant : new (). farm self . work = Worker : new (). work return o end -- \u521b\u5efa\u5bf9\u8c61 local peasant = Peasant : new () print ( peasant : farm ( '\u6c34\u7a3b' )) local work = Worker : new () print ( work : work ( '\u6c7d\u8f66' )) local migrant_worker = MigrantWorker : new () print ( migrant_worker : farm ( '\u5c0f\u9ea6' )) print ( migrant_worker : work ( '\u6c7d\u8f66' ))","title":"lua \u9762\u5411\u5bf9\u8c61"},{"location":"lua/opp/#lua","text":"-- \u5199\u4e00\u4e2a\u519c\u6c11\u7c7bPeasant\u6709\u65b9\u6cd5\uff1a -- def farm(self, plant): -- ... -- \u5199\u4e00\u4e2a\u5de5\u4eba\u7c7bWorker -- \u65b9\u6cd5\u5982\u4e0b\uff1a -- def work(self, that): -- ... -- \u521b\u5efa\u4e00\u4e2a\u519c\u6c11\u5de5\u4e3aMigrantWorker, \u8ba9\u6b64\u7c7b\u7684\u5bf9\u8c61\u62e5\u6709\u4e0a\u9762\u4e24\u4e2a\u7c7b\u7684\u5168\u90e8\u65b9\u6cd5 -- person = MigrantWorker() -- person.farm('\u6c34\u7a3b') # \u6b63\u5728\u79cd\u690d \u6c34\u7a3b -- person.work('\u6c7d\u8f66') # \u6b63\u5728\u5236\u9020 \u6c7d\u8f66 -- Peasant \u7c7b local Peasant = {} function Peasant : new () local o = {} setmetatable ( o , self ) self . __index = self return o end function Peasant : farm ( plant ) print ( '\u6b63\u5728\u79cd\u690d' .. plant ) end -- Worker \u7c7b Worker = {} function Worker : new () local o = {} setmetatable ( o , self ) self . __index = self return o end function Worker : work ( that ) print ( '\u6b63\u5728\u5236\u9020' .. that ) end -- MigrantWorker \u7c7b MigrantWorker = {} function MigrantWorker : new () local o = {} setmetatable ( o , self ) self . __index = self self . farm = Peasant : new (). farm self . work = Worker : new (). work return o end -- \u521b\u5efa\u5bf9\u8c61 local peasant = Peasant : new () print ( peasant : farm ( '\u6c34\u7a3b' )) local work = Worker : new () print ( work : work ( '\u6c7d\u8f66' )) local migrant_worker = MigrantWorker : new () print ( migrant_worker : farm ( '\u5c0f\u9ea6' )) print ( migrant_worker : work ( '\u6c7d\u8f66' ))","title":"lua \u9762\u5411\u5bf9\u8c61"},{"location":"lua/pairs%E5%92%8Cipairs/","text":"\u4f8b\u5b50\u4e00 \u00b6 local arr = { 1 , 2 , 3 , nil , 4 , 5 , 6 , 7 , k = '123' , r = nil , 8 , 9 } for k , v in pairs ( arr ) do print ( \"k:\" , k , \"v:\" , v ) end print ( '------------------------' ) for k , v in ipairs ( arr ) do print ( \"k:\" , k , \"v:\" , v ) end print ( '------------------------' ) --[[ k: 1 v: 1 k: 2 v: 2 k: 3 v: 3 k: 5 v: 4 k: 6 v: 5 k: 7 v: 6 k: 8 v: 7 k: 9 v: 8 k: 10 v: 9 k: k v: 123 ------------------------ k: 1 v: 1 k: 2 v: 2 k: 3 v: 3 ------------------------ ]] -- \u7ed3\u8bba\uff1apairs \u4f1a\u904d\u5386\u51fa\u6240\u6709\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4f46\u4f1a\u5220\u9664\u6570\u7ec4\u548chash\u7684nil \u4f8b\u5b50\u4e8c \u00b6 local arr = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , k = '123' , r = nil , 8 , 9 } for k , v in pairs ( arr ) do print ( \"k:\" , k , \"v:\" , v ) end print ( '------------------------' ) for k , v in ipairs ( arr ) do print ( \"k:\" , k , \"v:\" , v ) end print ( '------------------------' ) --[[ k: 1 v: 1 k: 2 v: 2 k: 3 v: 3 k: 4 v: 4 k: 5 v: 5 k: 6 v: 6 k: 7 v: 7 k: 8 v: 8 k: 9 v: 9 k: k v: 123 ------------------------ k: 1 v: 1 k: 2 v: 2 k: 3 v: 3 k: 4 v: 4 k: 5 v: 5 k: 6 v: 6 k: 7 v: 7 k: 8 v: 8 k: 9 v: 9 ------------------------ ]] -- \u7ed3\u8bba\uff1aipairs \u4f1a\u8fc7\u6ee4\u6389hash\u7c7b\u578b\uff0c\u4f46\u9047\u5230\u6570\u7ec4nil\u4f1a\u505c\u6b62","title":"lua pairs\u548cipairs"},{"location":"lua/pairs%E5%92%8Cipairs/#_1","text":"local arr = { 1 , 2 , 3 , nil , 4 , 5 , 6 , 7 , k = '123' , r = nil , 8 , 9 } for k , v in pairs ( arr ) do print ( \"k:\" , k , \"v:\" , v ) end print ( '------------------------' ) for k , v in ipairs ( arr ) do print ( \"k:\" , k , \"v:\" , v ) end print ( '------------------------' ) --[[ k: 1 v: 1 k: 2 v: 2 k: 3 v: 3 k: 5 v: 4 k: 6 v: 5 k: 7 v: 6 k: 8 v: 7 k: 9 v: 8 k: 10 v: 9 k: k v: 123 ------------------------ k: 1 v: 1 k: 2 v: 2 k: 3 v: 3 ------------------------ ]] -- \u7ed3\u8bba\uff1apairs \u4f1a\u904d\u5386\u51fa\u6240\u6709\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4f46\u4f1a\u5220\u9664\u6570\u7ec4\u548chash\u7684nil","title":"\u4f8b\u5b50\u4e00"},{"location":"lua/pairs%E5%92%8Cipairs/#_2","text":"local arr = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , k = '123' , r = nil , 8 , 9 } for k , v in pairs ( arr ) do print ( \"k:\" , k , \"v:\" , v ) end print ( '------------------------' ) for k , v in ipairs ( arr ) do print ( \"k:\" , k , \"v:\" , v ) end print ( '------------------------' ) --[[ k: 1 v: 1 k: 2 v: 2 k: 3 v: 3 k: 4 v: 4 k: 5 v: 5 k: 6 v: 6 k: 7 v: 7 k: 8 v: 8 k: 9 v: 9 k: k v: 123 ------------------------ k: 1 v: 1 k: 2 v: 2 k: 3 v: 3 k: 4 v: 4 k: 5 v: 5 k: 6 v: 6 k: 7 v: 7 k: 8 v: 8 k: 9 v: 9 ------------------------ ]] -- \u7ed3\u8bba\uff1aipairs \u4f1a\u8fc7\u6ee4\u6389hash\u7c7b\u578b\uff0c\u4f46\u9047\u5230\u6570\u7ec4nil\u4f1a\u505c\u6b62","title":"\u4f8b\u5b50\u4e8c"},{"location":"lua/select%E5%87%BD%E6%95%B0/","text":"select\u51fd\u6570 \u00b6 \u524d\u8a00 \u00b6 \u4eca\u5929\u8fd9\u4e2a\u51fd\u6570\u770b\u5230\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u5370\u8c61\u5c31\u662f\u60f3\u5230\u4e86c\u8bed\u8a00\u4e2d\u5927\u540d\u9f0e\u9f0e\u7684 select \u51fd\u6570\uff0c\u56e0\u4e3a\u4ed6\u4eec\u51fd\u6570\u540d\u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14lua\u4e5f\u662f\u7528c\u8bed\u8a00\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u8ddf\u90a3\u4e2a\u662f\u76f8\u540c\u7684\uff0c\u53ef\u662f\u8f6c\u5ff5\u4e00\u60f3lua\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u548c\u7f51\u7edc\u76f8\u5173\u7684\u51fd\u6570\uff0c\u7136\u540e\u67e5\u4e86\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570\u771f\u7684\u5c31\u662f\u5b57\u9762\u7684\u610f\u601d\uff0c\u8d77\u5230\u4e00\u4e2a\u9009\u62e9\u7684\u4f5c\u7528\uff0c\u6211\u4eec\u4e00\u8d77\u6765\u770b\u4e00\u4e0b\u51fd\u6570\u7684\u7528\u6cd5\u3002 \u5185\u5bb9 \u00b6 select() \u539f\u578b\uff1aselect(index, \u00b7\u00b7\u00b7) \u89e3\u91ca\uff1a \u5982\u679c index \u662f\u4e2a\u6570\u5b57\uff0c \u90a3\u4e48\u8fd4\u56de\u53c2\u6570\u4e2d\u7b2c index \u4e2a\u4e4b\u540e\u7684\u90e8\u5206\uff1b \u8d1f\u7684\u6570\u5b57\u4f1a\u4ece\u540e\u5411\u524d\u7d22\u5f15\uff08-1 \u6307\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff09\u3002 \u5426\u5219\uff0c index \u5fc5\u987b\u662f\u5b57\u7b26\u4e32 \"#\" \uff0c \u6b64\u65f6 select \u8fd4\u56de\u53c2\u6570\u7684\u4e2a\u6570\u3002 \u793a\u4f8b\u4ee3\u7801 \u00b6 -- \u5148\u6765\u8bd5\u8bd5\u6570\u5b57\u7d22\u5f15 print ( \"\\nthe number index result:\" ) print ( select ( 2 , 'b' , 'c' , 'd' , 'e' )); -- \u65e0\u6548\u7684\u7d22\u5f15 print ( \"\\nthe number index of invalid result:\" ) print ( select ( 20000 , 'b' , 'c' , 'd' , 'e' )); -- \u5b57\u7b26\u4e32 # \u7d22\u5f15 print ( \"\\nthe '#' index of invalid result:\" ) print ( select ( '#' , 'b' , 'c' , 'd' , 'e' )); -- \u518d\u6765\u770b\u4e00\u4e2a\u5e38\u7528\u7684\u4f8b\u5b50 function print_multi_argv ( ... ) print ( \"\\narg list is\" ) for i = 1 , select ( '#' , ... ) do -- get the count of the params local cur_arg = select ( i , ... ); -- select the param print ( cur_arg ); end end -- \u8bd5\u9a8c\u4e00\u4e0b\u6253\u5370\u591a\u4e2a\u53c2\u6570 print_multi_argv ( 1 , 2 , 3 , 'a' , 'b' , 'f' , 't' ) \u8fd0\u884c\u7ed3\u679c the number index result : c d e the number index of invalid result : the '#' index of invalid result : 4 arg list is 1 2 3 a b f t","title":"lua select \u51fd\u6570"},{"location":"lua/select%E5%87%BD%E6%95%B0/#select","text":"","title":"select\u51fd\u6570"},{"location":"lua/select%E5%87%BD%E6%95%B0/#_1","text":"\u4eca\u5929\u8fd9\u4e2a\u51fd\u6570\u770b\u5230\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u5370\u8c61\u5c31\u662f\u60f3\u5230\u4e86c\u8bed\u8a00\u4e2d\u5927\u540d\u9f0e\u9f0e\u7684 select \u51fd\u6570\uff0c\u56e0\u4e3a\u4ed6\u4eec\u51fd\u6570\u540d\u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14lua\u4e5f\u662f\u7528c\u8bed\u8a00\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u8ddf\u90a3\u4e2a\u662f\u76f8\u540c\u7684\uff0c\u53ef\u662f\u8f6c\u5ff5\u4e00\u60f3lua\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u548c\u7f51\u7edc\u76f8\u5173\u7684\u51fd\u6570\uff0c\u7136\u540e\u67e5\u4e86\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570\u771f\u7684\u5c31\u662f\u5b57\u9762\u7684\u610f\u601d\uff0c\u8d77\u5230\u4e00\u4e2a\u9009\u62e9\u7684\u4f5c\u7528\uff0c\u6211\u4eec\u4e00\u8d77\u6765\u770b\u4e00\u4e0b\u51fd\u6570\u7684\u7528\u6cd5\u3002","title":"\u524d\u8a00"},{"location":"lua/select%E5%87%BD%E6%95%B0/#_2","text":"select() \u539f\u578b\uff1aselect(index, \u00b7\u00b7\u00b7) \u89e3\u91ca\uff1a \u5982\u679c index \u662f\u4e2a\u6570\u5b57\uff0c \u90a3\u4e48\u8fd4\u56de\u53c2\u6570\u4e2d\u7b2c index \u4e2a\u4e4b\u540e\u7684\u90e8\u5206\uff1b \u8d1f\u7684\u6570\u5b57\u4f1a\u4ece\u540e\u5411\u524d\u7d22\u5f15\uff08-1 \u6307\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff09\u3002 \u5426\u5219\uff0c index \u5fc5\u987b\u662f\u5b57\u7b26\u4e32 \"#\" \uff0c \u6b64\u65f6 select \u8fd4\u56de\u53c2\u6570\u7684\u4e2a\u6570\u3002","title":"\u5185\u5bb9"},{"location":"lua/select%E5%87%BD%E6%95%B0/#_3","text":"-- \u5148\u6765\u8bd5\u8bd5\u6570\u5b57\u7d22\u5f15 print ( \"\\nthe number index result:\" ) print ( select ( 2 , 'b' , 'c' , 'd' , 'e' )); -- \u65e0\u6548\u7684\u7d22\u5f15 print ( \"\\nthe number index of invalid result:\" ) print ( select ( 20000 , 'b' , 'c' , 'd' , 'e' )); -- \u5b57\u7b26\u4e32 # \u7d22\u5f15 print ( \"\\nthe '#' index of invalid result:\" ) print ( select ( '#' , 'b' , 'c' , 'd' , 'e' )); -- \u518d\u6765\u770b\u4e00\u4e2a\u5e38\u7528\u7684\u4f8b\u5b50 function print_multi_argv ( ... ) print ( \"\\narg list is\" ) for i = 1 , select ( '#' , ... ) do -- get the count of the params local cur_arg = select ( i , ... ); -- select the param print ( cur_arg ); end end -- \u8bd5\u9a8c\u4e00\u4e0b\u6253\u5370\u591a\u4e2a\u53c2\u6570 print_multi_argv ( 1 , 2 , 3 , 'a' , 'b' , 'f' , 't' ) \u8fd0\u884c\u7ed3\u679c the number index result : c d e the number index of invalid result : the '#' index of invalid result : 4 arg list is 1 2 3 a b f t","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/","text":"\u7528lua\u5de5\u4f5c\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u6b63\u597d\u6700\u8fd1\u5de5\u4f5c\u6709\u70b9\u65f6\u95f4\uff0c\u518d\u628alua\u53c2\u8003\u624b\u518c\u8fc7\u4e00\u904d\uff0c\u8bb0\u5f55\u8bb0\u5f55 https://cloudwu.github.io/lua53doc/manual.html#pdf-table.concat number \u00b6 number \u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u4e3a\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff0c\u7a0b\u5e8f\u5458\u5927\u591a\u6570\u60c5\u51b5\u53ef\u4ee5\u5ffd\u7565\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u5dee\u5f02(lua\u5185)\uff0c\u56e0\u4e3alua\u5185\u90e8\u4f1a\u81ea\u52a8\u6839\u636e\u4f7f\u7528\u573a\u666f\u8fdb\u884c\u8f6c\u6362\u3002 \u4f4d\u64cd\u4f5c: \u603b\u662f\u5c06\u6d6e\u70b9\u6570\u8f6c\u6362\u6210\u6574\u6570 \u4e58\u65b9\u548c\u6d6e\u70b9\u9664\u6cd5\u603b\u662f\u5c06\u6574\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\u3002 \u6570\u5b66\u64cd\u4f5c\u82e5\u9488\u5bf9\u6df7\u5408\u64cd\u4f5c\u6570 \uff08\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff09\u5c06\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570 \u5f53\u628a\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u65f6\uff0c \u82e5\u6574\u6570\u503c\u6070\u597d\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u90a3\u5c31\u53d6\u90a3\u4e2a\u6d6e\u70b9\u6570\u3002 \u5426\u5219\uff0c\u8f6c\u6362\u4f1a\u53d6\u6700\u63a5\u8fd1\u7684\u8f83\u5927\u503c\u6216\u8f83\u5c0f\u503c\u6765\u8868\u793a\u8fd9\u4e2a\u6570\u3002 \u8fd9\u79cd\u8f6c\u6362\u662f\u4e0d\u4f1a\u5931\u8d25\u7684\u3002 \u5c06\u6d6e\u70b9\u6570\u8f6c\u4e3a\u6574\u6570\u7684\u8fc7\u7a0b\u4f1a\u68c0\u67e5 \u6d6e\u70b9\u6570\u80fd\u5426\u88ab\u51c6\u786e\u7684\u8868\u8fbe\u4e3a\u4e00\u4e2a\u6574\u6570 \uff08\u5373\uff0c\u6d6e\u70b9\u6570\u662f\u4e00\u4e2a\u6574\u6570\u503c\u4e14\u5728\u6574\u6570\u53ef\u4ee5\u8868\u8fbe\u7684\u533a\u95f4\uff09\u3002 \u5982\u679c\u53ef\u4ee5\uff0c\u7ed3\u679c\u5c31\u662f\u90a3\u4e2a\u6570\uff0c\u5426\u5219\u8f6c\u6362\u5931\u8d25\u3002 <<<<<<< HEAD \u00b6 lua5.3\u4ee5\u540e\uff0c\u8981\u6c42\u5f00\u53d1\u8005\u66f4\u52a0\u663e\u5f0f\u5730\u533a\u5206float\u548cint\uff0c\u5982string.format(\"%d\", 1.2)\u4f1a\u51fa\u73b0\u62a5\u9519\uff0c\u800c\u4e0d\u662ffloat-int\u81ea\u52a8\u8f6c\u6362\u4e3a1\uff1b \u5728string.format\u4e2d\uff0c\u6574\u6570\u53ef\u4ee5\u81ea\u52a8\u8f6c\u4e3a\u6d6e\u70b9\u6570\uff0c\u4f46\u662f\u6d6e\u70b9\u6570\u4e0d\u80fd\u81ea\u52a8\u8f6c\u4e3a\u6574\u6570\uff0c\u4f1a\u6709\u62a5\u9519\u3002 >>>>>>> 97413c9482cb24f52682524e035f18e6d72a8e41 \u00b6 table \u00b6 table \u662f\u4e00\u4e2a\u5173\u8054\u6570\u7ec4\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u4e0d\u4ec5\u4ec5\u4ee5\u6570\u5b57\u505a\u7d22\u5f15\uff0c\u9664\u4e86 nil \u548c NaN \u4e4b\u5916\u7684\u6240\u6709 Lua \u503c \u90fd\u53ef\u4ee5\u505a\u7d22\u5f15\u3002 \u8868\u662f Lua \u4e2d\u552f\u4e00\u7684\u6570\u636e\u7ed3\u6784\uff0c \u5b83\u53ef\u88ab\u7528\u4e8e\u8868\u793a\u666e\u901a\u6570\u7ec4\u3001\u5e8f\u5217\u3001\u7b26\u53f7\u8868\u3001\u96c6\u5408\u3001\u8bb0\u5f55\u3001\u56fe\u3001\u6811\u7b49\u7b49\u3002 \u5bf9\u4e8e\u8bb0\u5f55\uff0cLua \u4f7f\u7528\u57df\u540d\u4f5c\u4e3a\u7d22\u5f15\u3002 \u8bed\u8a00\u63d0\u4f9b\u4e86 a.name \u8fd9\u6837\u7684\u8bed\u6cd5\u7cd6\u6765\u66ff\u4ee3 a[\"name\"] \u8fd9\u79cd\u5199\u6cd5\u4ee5\u65b9\u4fbf\u8bb0\u5f55\u8fd9\u79cd\u7ed3\u6784\u7684\u4f7f\u7528\u3002 \u6211\u4eec\u4f7f\u7528 \u5e8f\u5217 \u8fd9\u4e2a\u672f\u8bed\u6765\u8868\u793a\u4e00\u4e2a\u7528 {1..n} \u7684\u6b63\u6574\u6570\u96c6\u505a\u7d22\u5f15\u7684\u8868\u3002 \u8fd9\u91cc\u7684\u975e\u8d1f\u6574\u6570 n \u88ab\u79f0\u4e3a\u8be5\u5e8f\u5217\u7684\u957f\u5ea6, \u8868 t \u7684\u957f\u5ea6\u53ea\u5728\u8868\u662f\u4e00\u4e2a \u5e8f\u5217 \u65f6\u6709\u5b9a\u4e49, \u5e8f\u5217\u6307\u8868\u7684\u6b63\u6570\u952e\u96c6\u7b49\u4e8e {1..n} \uff0c \u5176\u4e2d n \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cn \u662f\u8868\u7684\u957f\u5ea6\u3002 \u6ce8\u610f\u8fd9\u6837\u7684\u8868 { 10 , 20 , nil , 40 } \u4e0d\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u56e0\u4e3a\u5b83\u6709\u952e 4 \u5374\u6ca1\u6709\u952e 3\u3002 \uff08\u56e0\u6b64\uff0c\u8be5\u8868\u7684\u6b63\u6574\u6570\u952e\u96c6\u4e0d\u7b49\u4e8e {1..n} \u96c6\u5408\uff0c\u6545\u800c\u5c31\u4e0d\u5b58\u5728 n\u3002\uff09 \u7d22\u5f15\u4e00\u5f20\u8868\u7684\u539f\u5219\u9075\u5faa\u8bed\u8a00\u4e2d\u7684\u76f4\u63a5\u6bd4\u8f83\u89c4\u5219\u3002 \u5f53\u4e14\u4ec5\u5f53 i \u4e0e j\u76f4\u63a5\u6bd4\u8f83\u76f8\u7b49\u65f6 \uff08\u5373\u4e0d\u901a\u8fc7\u5143\u65b9\u6cd5\u7684\u6bd4\u8f83\uff09\uff0c \u8868\u8fbe\u5f0f a[i] \u4e0e a[j] \u8868\u793a\u4e86\u8868\u4e2d\u76f8\u540c\u7684\u5143\u7d20\u3002 \u7279\u522b\u6307\u51fa\uff1a\u4e00\u4e2a\u53ef\u4ee5\u5b8c\u5168\u8868\u793a\u4e3a\u6574\u6570\u7684\u6d6e\u70b9\u6570\u548c\u5bf9\u5e94\u7684\u6574\u6570\u76f8\u7b49 \uff08\u4f8b\u5982\uff1a1.0 == 1\uff09\u3002 \u4e3a\u4e86\u6d88\u9664\u6b67\u4e49\uff0c\u5f53\u4e00\u4e2a\u53ef\u4ee5\u5b8c\u5168\u8868\u793a\u4e3a\u6574\u6570\u7684\u6d6e\u70b9\u6570\u505a\u4e3a\u952e\u503c\u65f6\uff0c \u90fd\u4f1a\u88ab\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6574\u6570\u50a8\u5b58\u3002 \u4f8b\u5982\uff0c\u5f53\u4f60\u5199 a[2.0] = true \u65f6\uff0c \u5b9e\u9645\u88ab\u63d2\u5165\u8868\u4e2d\u7684\u952e\u662f\u6574\u6570 2 \u3002 _ENV _G \u00b6 lua\u8bed\u8a00\u628a\u6240\u6709\u7684\u4ee3\u7801\u90fd\u5f53\u4f5c\u533f\u540d\u51fd\u6570\u5904\u7406\uff0c\u4f8b\u5982 local z = 10 x = y + 10 \u5b9e\u9645\u4e0a\u4f1a\u88ab\u7f16\u8bd1\u4e3a local _ENV = smoe value ( \u4e5f\u5c31\u662f\u9884\u5b9a\u4e49\u4e0a\u503c\uff0c\u5047\u8bbe\u8be5\u503c\u5b58\u5728 ) return function (...) local z = 10 _ENV . x = _ENV . y + z end <<<<<<< HEAD _ENV\u4e0d\u662f\u5168\u5c40\u73af\u5883\uff0c\u5b83\u6307\u5411\u7684\u662f\u5f53\u524d\u73af\u5883\uff0c\u800cLua\u53c8\u786e\u4fdd\u6bcf\u4e2achunk\uff08\u53ef\u4ee5\u662f\u4e00\u53e5\u4ee3\u7801\uff0c\u51fd\u6570\u4f53\uff0cdo ...end\u4e4b\u95f4\u7684\u5185\u5bb9\u7b49\uff09\u90fd\u4ee5_ENV\u5f00\u5934\uff0c\u6240\u4ee5\u6bcf\u4e2achunk\u4e2d\u90fd\u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u73af\u5883\u3002 \u5728\u6bcf\u4e2a\u73af\u5883\u4e2d\u5bf9\u975e\u5c40\u90e8a\u7684\u6240\u6709\u8bbf\u95ee\u90fd\u8f6c\u6362\u4e3a_ENV.a\u3002\u8fd9\u79cd\u65b9\u5f0f\u66f4\u5b89\u5168\uff0c\u5e76\u4e14\u66f4\u52a0\u7075\u6d3b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5c40\u90e8_ENV\u53d8\u91cf\u6765\u4e3a\u5355\u4e2a\u4ee3\u7801\u5757\u7684\u521b\u5efa\u5355\u72ec\u7684\u73af\u5883\uff0c\u4ece\u800c\u964d\u4f4e\u5757\u4e0e\u5757\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\u3002 lua\u8bed\u8a00\u5728\u7f16\u8bd1\u8fd0\u884c\u65f6\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u73af\u5883\uff08\u4e5f\u79f0\u4e3a\u201c\u5168\u5c40\u73af\u5883\u201d\uff0c_G\u8868\uff09\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u6ce8\u518c\u8868\u4e2d\u3002 \u9664\u975e\u60a8\u5c06\u81ea\u5b9a\u4e49\u73af\u5883\uff08\u4e5f\u5c31\u662f\u81ea\u5b9a\u4e49\u7684_ENV\uff09\u4f20\u9012\u7ed9load\u6216loadfile\uff0c\u5426\u5219\u6b64\u9ed8\u8ba4\u73af\u5883\u5c06\u7528\u4f5c\u6240\u6709\u5757\u7684_ENV. lua_pushglobaltable\u8fd8\u76f4\u63a5\u4ece\u6ce8\u518c\u8868\u4e2d\u68c0\u7d22\u6b64\u5168\u5c40\u73af\u5883\uff0c\u56e0\u6b64\u6240\u6709C\u6a21\u5757\u90fd\u4f1a\u81ea\u52a8\u4f7f\u7528\u5b83\u6765\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6807\u51c6\u7684C\u6a21\u5757\u5df2\u52a0\u8f7d\uff0c\u5219\u6b64\u9ed8\u8ba4\u7684\u201c\u5168\u5c40\u73af\u5883\u201d\u5177\u6709\u4e00\u4e2a\u540d\u4e3a_G\u7684\u8868\u5b57\u6bb5\uff0c\u8be5\u8868\u5b57\u6bb5\u5f15\u7528\u56de\u5168\u5c40\u73af\u5883\u3002 \u7b80\u5355\u7684\u8bf4\u5c31\u662f\u9996\u5148lua\u4f1a\u6709\u4e00\u4e2a_G\u8868,\u82e5\u6ca1\u6709\u4eba\u4e3a\u7684\u8bbe\u7f6e\uff0c\u5219\u8fd9\u4e2a_G\u8868\u76f4\u63a5\u5c31\u88ab\u7528\u4f5c\u7684_ENV\uff08\u800c\u4e14\u6240\u6709\u7684\u5757\u90fd\u5c06\u4ee5\u6b64_ENV\u5f00\u5934\uff09\uff0c\u7136\u540e_ENV\u7684\u91cc\u5b58\u50a8\u7740\u4e00\u4e2a\u952e\u503c\u5bf9_G = _G\uff08\u5168\u5c40\u73af\u5883\u8868\uff09\u3002\u4efb\u4f55\u5bf9\u8be5\u73af\u5883\u7684\u66f4\u6539\u4e5f\u5c06\u76f4\u63a5\u4f5c\u7528\u5230_G\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u521d\u59cb\u65f6\u5f15\u7528\u7684\u540c\u4e00\u4e2a\u8868\uff0c\u7c7b\u4f3c\u4e0b\u9762 \u00b6 _ENV\u4e0d\u662f\u5168\u5c40\u73af\u5883\uff0c\u5b83\u6307\u5411\u7684\u662f\u5f53\u524d\u73af\u5883\uff0c\u800cLua\u53c8\u786e\u4fdd\u6bcf\u4e2achunk\uff08\u53ef\u4ee5\u662f\u4e00\u53e5\u4ee3\u7801\uff0c\u51fd\u6570\u4f53\uff0cdo ...end\u4e4b\u95f4\u7684\u5185\u5bb9\u7b49\uff09\u90fd\u4ee5_ENV\u5f00\u5934\uff0c\u6240\u4ee5\u6bcf\u4e2achunk\u4e2d\u90fd\u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u73af\u5883\u3002 \u5728\u6bcf\u4e2a\u73af\u5883\u4e2d\u5bf9\u975e\u5c40\u90e8a\u7684\u6240\u6709\u8bbf\u95ee\u90fd\u8f6c\u6362\u4e3a_ENV.a\u3002\u8fd9\u79cd\u65b9\u5f0f\u66f4\u5b89\u5168\uff0c\u5e76\u4e14\u66f4\u52a0\u7075\u6d3b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5c40\u90e8_ENV\u53d8\u91cf\u6765\u4e3a\u5355\u4e2a\u4ee3\u7801\u5757\u7684\u521b\u5efa\u5355\u72ec\u7684\u73af\u5883\uff0c\u4ece\u800c\u964d\u4f4e\u5757\u4e0e\u5757\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\u3002 lua\u8bed\u8a00\u5728\u7f16\u8bd1\u8fd0\u884c\u65f6\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u73af\u5883\uff08\u4e5f\u79f0\u4e3a\u201c\u5168\u5c40\u73af\u5883\u201d\uff0c_G\u8868\uff09\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u6ce8\u518c\u8868\u4e2d\u3002 \u9664\u975e\u60a8\u5c06\u81ea\u5b9a\u4e49\u73af\u5883\uff08\u4e5f\u5c31\u662f\u81ea\u5b9a\u4e49\u7684_ENV\uff09\u4f20\u9012\u7ed9load\u6216loadfile\uff0c\u5426\u5219\u6b64\u9ed8\u8ba4\u73af\u5883\u5c06\u7528\u4f5c\u6240\u6709\u5757\u7684_ENV. lua_pushglobaltable\u8fd8\u76f4\u63a5\u4ece\u6ce8\u518c\u8868\u4e2d\u68c0\u7d22\u6b64\u5168\u5c40\u73af\u5883\uff0c\u56e0\u6b64\u6240\u6709C\u6a21\u5757\u90fd\u4f1a\u81ea\u52a8\u4f7f\u7528\u5b83\u6765\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6807\u51c6\u7684C\u6a21\u5757\u5df2\u52a0\u8f7d\uff0c\u5219\u6b64\u9ed8\u8ba4\u7684\u201c\u5168\u5c40\u73af\u5883\u201d\u5177\u6709\u4e00\u4e2a\u540d\u4e3a_G\u7684\u8868\u5b57\u6bb5\uff0c\u8be5\u8868\u5b57\u6bb5\u5f15\u7528\u56de\u5168\u5c40\u73af\u5883\u3002 \u7b80\u5355\u7684\u8bf4\u5c31\u662f\u9996\u5148lua\u4f1a\u6709\u4e00\u4e2a_G\u8868,\u82e5\u6ca1\u6709\u4eba\u4e3a\u7684\u8bbe\u7f6e\uff0c\u5219\u8fd9\u4e2a_G\u8868\u76f4\u63a5\u5c31\u88ab\u7528\u4f5c\u7684_ENV\uff08\u800c\u4e14\u6240\u6709\u7684\u5757\u90fd\u5c06\u4ee5\u6b64_ENV\u5f00\u5934\uff09\uff0c\u7136\u540e_ENV\u7684\u91cc\u5b58\u50a8\u7740\u4e00\u4e2a\u952e\u503c\u5bf9_G =_G\uff08\u5168\u5c40\u73af\u5883\u8868\uff09\u3002\u4efb\u4f55\u5bf9\u8be5\u73af\u5883\u7684\u66f4\u6539\u4e5f\u5c06\u76f4\u63a5\u4f5c\u7528\u5230_G\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u521d\u59cb\u65f6\u5f15\u7528\u7684\u540c\u4e00\u4e2a\u8868\uff0c\u7c7b\u4f3c\u4e0b\u9762 97413c9482cb24f52682524e035f18e6d72a8e41 print ( _G ) -- table: 0000021DC4BE6700 print ( _ENV . _G ) -- table: 0000021DC4BE6700 \u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u73af\u5883\uff0c\u5e76\u7ee7\u627f\u5168\u5c40\u73af\u5883\uff0c\u4f46\u4e0d\u6539\u53d8\u5168\u5c40\u73af\u5883 b = 25 _G = setmetatable ( _G ,{ __newindex = function () print ( \"can change this table\" ) end }) a = 13 local _ENV = setmetatable ({},{ __index = _G }) c = 14 print ( a , b , c ) print ( _G . a , _G . b , _G . c ) can change this table nil 25 14 nil 25 nil load (chunk [, chunkname [, mode [, env]]]) \u52a0\u8f7d\u4e00\u4e2a\u4ee3\u7801\u5757\u3002 \u5982\u679c chunk \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u7801\u5757\u6307\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002 \u5982\u679c chunk \u662f\u4e00\u4e2a\u51fd\u6570\uff0c load \u4e0d\u65ad\u5730\u8c03\u7528\u5b83\u83b7\u53d6\u4ee3\u7801\u5757\u7684\u7247\u65ad\u3002 \u6bcf\u6b21\u5bf9 chunk \u7684\u8c03\u7528\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7d27\u7d27\u8fde\u63a5\u5728\u4e0a\u6b21\u8c03\u7528\u7684\u8fd4\u56de\u4e32\u4e4b\u540e\u3002 \u5f53\u8fd4\u56de\u7a7a\u4e32\u3001nil\u3001\u6216\u662f\u4e0d\u8fd4\u56de\u503c\u65f6\uff0c\u90fd\u8868\u793a\u4ee3\u7801\u5757\u7ed3\u675f\u3002 \u5982\u679c\u6ca1\u6709\u8bed\u6cd5\u9519\u8bef\uff0c \u5219\u4ee5\u51fd\u6570\u5f62\u5f0f\u8fd4\u56de\u7f16\u8bd1\u597d\u7684\u4ee3\u7801\u5757\uff1b \u5426\u5219\uff0c\u8fd4\u56de nil \u52a0\u4e0a\u9519\u8bef\u6d88\u606f\u3002 <<<<<<< HEAD \u5982\u679c\u7ed3\u679c\u51fd\u6570\u6709\u4e0a\u503c\uff0c env \u88ab\u8bbe\u4e3a\u7b2c\u4e00\u4e2a\u4e0a\u503c\u3002 \u82e5\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u5168\u5c40\u73af\u5883\u66ff\u4ee3\u5b83\u3002 \u6240\u6709\u5176\u5b83\u4e0a\u503c\u521d\u59cb\u5316\u4e3a nil\u3002 \uff08\u5f53\u4f60\u52a0\u8f7d\u4e3b\u4ee3\u7801\u5757\u65f6\u5019\uff0c\u7ed3\u679c\u51fd\u6570\u4e00\u5b9a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e0a\u503c _ENV \u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u52a0\u8f7d\u4e00\u4e2a\u7528\u51fd\u6570\u521b\u5efa\u51fa\u6765\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5757\u65f6\uff0c\u6240\u6709\u7684\u4e0a\u503c\u90fd\u662f\u65b0\u521b\u5efa\u51fa\u6765\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\u5b83\u4eec\u4e0d\u4f1a\u548c\u522b\u7684\u4efb\u4f55\u51fd\u6570\u5171\u4eab\u3002 \u00b6 \u5982\u679c\u7ed3\u679c\u51fd\u6570\u6709\u4e0a\u503c\uff0c env \u88ab\u8bbe\u4e3a\u7b2c\u4e00\u4e2a\u4e0a\u503c\u3002 \u82e5\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u5168\u5c40\u73af\u5883\u66ff\u4ee3\u5b83\u3002 \u6240\u6709\u5176\u5b83\u4e0a\u503c\u521d\u59cb\u5316\u4e3a nil\u3002 \uff08\u5f53\u4f60\u52a0\u8f7d\u4e3b\u4ee3\u7801\u5757\u65f6\u5019\uff0c\u7ed3\u679c\u51fd\u6570\u4e00\u5b9a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e0a\u503c _ENV \u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u52a0\u8f7d\u4e00\u4e2a\u7528\u51fd\u6570\u521b\u5efa\u51fa\u6765\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5757\u65f6\uff0c\u6240\u6709\u7684\u4e0a\u503c\u90fd\u662f\u65b0\u521b\u5efa\u51fa\u6765\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\u5b83\u4eec\u4e0d\u4f1a\u548c\u522b\u7684\u4efb\u4f55\u51fd\u6570\u5171\u4eab\u3002 97413c9482cb24f52682524e035f18e6d72a8e41 chunkname \u5728\u9519\u8bef\u6d88\u606f\u548c\u8c03\u8bd5\u6d88\u606f\u4e2d\uff0c\u7528\u4e8e\u4ee3\u7801\u5757\u7684\u540d\u5b57\u3002 \u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5b83\u9ed8\u8ba4\u4e3a\u5b57\u7b26\u4e32chunk \u3002 chunk \u4e0d\u662f\u5b57\u7b26\u4e32\u65f6\uff0c\u5219\u4e3a \"=(load)\" \u3002 \u5b57\u7b26\u4e32 mode \u7528\u4e8e\u63a7\u5236\u4ee3\u7801\u5757\u662f\u6587\u672c\u8fd8\u662f\u4e8c\u8fdb\u5236\uff08\u5373\u9884\u7f16\u8bd1\u4ee3\u7801\u5757\uff09\u3002 \u5b83\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32 \"b\" \uff08\u53ea\u80fd\u662f\u4e8c\u8fdb\u5236\u4ee3\u7801\u5757\uff09\uff0c \"t\" \uff08\u53ea\u80fd\u662f\u6587\u672c\u4ee3\u7801\u5757\uff09\uff0c \u6216 \"bt\" \uff08\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u4e5f\u53ef\u4ee5\u662f\u6587\u672c\uff09\u3002 \u9ed8\u8ba4\u503c\u4e3a \"bt\"\u3002 Lua \u4e0d\u4f1a\u5bf9\u4e8c\u8fdb\u5236\u4ee3\u7801\u5757\u505a\u5065\u58ee\u6027\u68c0\u67e5\u3002 \u6076\u610f\u6784\u9020\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5757\u6709\u53ef\u80fd\u628a\u89e3\u91ca\u5668\u5f04\u5d29\u6e83\u3002 local _env = { print = _ENV . print , a = 15 } local a = 12 local str = \"print(a)\" load ( str , \"test\" , \"t\" , _env )() \u9996\u5148\u6211\u4eec\u81ea\u5b9a\u4e49\u4e86_ENV\u73af\u5883\uff0c\u5e76\u5c06\u5176\u4f20\u7ed9\u4e86load\u51fd\u6570\uff0c\u6240\u4ee5load\u52a0\u8f7d\u8fd0\u884c\u65f6\u7684\u73af\u5883\u4e3a\u6211\u4eec\u81ea\u5b9a\u4e49\u7684_ENV\u73af\u5883\uff0c\u6240\u4ee5\u6b64\u65f6\u7ed3\u679c\u4e3a15. \u5143\u8868 \u00b6 lua \u4e2d\u53ea\u80fd\u6539\u53d8\u8868\u7c7b\u578b\u503c\u7684\u5143\u8868, \u82e5\u60f3\u6539\u53d8\u975e\u8868\u7c7b\u578b\u7684\u503c\u7684\u5143\u8868, \u9700\u4f7f\u7528C PAI \u5143\u8868\u51b3\u5b9a\u4e86\u4e00\u4e2a\u5bf9\u8c61\u5728\u6570\u5b66\u8fd0\u7b97\u3001\u4f4d\u8fd0\u7b97\u3001\u6bd4\u8f83\u3001\u8fde\u63a5\u3001 \u53d6\u957f\u5ea6\u3001\u8c03\u7528\u3001\u7d22\u5f15\u65f6\u7684\u884c\u4e3a\u3002 \u5143\u8868\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5f53\u8868\u5bf9\u8c61\u6216\u7528\u6237\u6570\u636e\u5bf9\u8c61\u5728\u5783\u573e\u56de\u6536\u65f6\u8c03\u7528\u3002 \u5783\u573e\u6536\u96c6 \u00b6 Lua \u91c7\u7528\u4e86\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u3002 \u8fd9\u610f\u5473\u7740\u4f60\u4e0d\u7528\u64cd\u5fc3\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u9700\u8981\u7684\u5185\u5b58\u5982\u4f55\u5206\u914d\u51fa\u6765\uff0c \u4e5f\u4e0d\u7528\u8003\u8651\u5728\u5bf9\u8c61\u4e0d\u518d\u88ab\u4f7f\u7528\u540e\u600e\u6837\u91ca\u653e\u5b83\u4eec\u6240\u5360\u7528\u7684\u5185\u5b58\u3002 Lua \u8fd0\u884c\u4e86\u4e00\u4e2a \u5783\u573e\u6536\u96c6\u5668 \u6765\u6536\u96c6\u6240\u6709 \u6b7b\u5bf9\u8c61 \uff08\u5373\u5728 Lua \u4e2d\u4e0d\u53ef\u80fd\u518d\u8bbf\u95ee\u5230\u7684\u5bf9\u8c61\uff09\u6765\u5b8c\u6210\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u4f5c\u3002 Lua \u4e2d\u6240\u6709\u7528\u5230\u7684\u5185\u5b58\uff0c\u5982\uff1a\u5b57\u7b26\u4e32\u3001\u8868\u3001\u7528\u6237\u6570\u636e\u3001\u51fd\u6570\u3001\u7ebf\u7a0b\u3001 \u5185\u90e8\u7ed3\u6784\u7b49\uff0c\u90fd\u670d\u4ece\u81ea\u52a8\u7ba1\u7406\u3002 Lua \u5b9e\u73b0\u4e86\u4e00\u4e2a\u589e\u91cf\u6807\u8bb0-\u626b\u63cf\u6536\u96c6\u5668\u3002 \u5b83\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6570\u5b57\u6765\u63a7\u5236\u5783\u573e\u6536\u96c6\u5faa\u73af\uff1a \u5783\u573e\u6536\u96c6\u5668\u95f4\u6b47\u7387 \u548c \u5783\u573e\u6536\u96c6\u5668\u6b65\u8fdb\u500d\u7387\u3002 \u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4f7f\u7528\u767e\u5206\u6570\u4e3a\u5355\u4f4d \uff08\u4f8b\u5982\uff1a\u503c 100 \u5728\u5185\u90e8\u8868\u793a 1 \uff09\u3002 \u5783\u573e\u6536\u96c6\u5668\u95f4\u6b47\u7387\u63a7\u5236\u7740\u6536\u96c6\u5668\u9700\u8981\u5728\u5f00\u542f\u65b0\u7684\u5faa\u73af\u524d\u8981\u7b49\u5f85\u591a\u4e45\u3002 \u589e\u5927\u8fd9\u4e2a\u503c\u4f1a\u51cf\u5c11\u6536\u96c6\u5668\u7684\u79ef\u6781\u6027\u3002 \u5f53\u8fd9\u4e2a\u503c\u6bd4 100 \u5c0f\u7684\u65f6\u5019\uff0c\u6536\u96c6\u5668\u5728\u5f00\u542f\u65b0\u7684\u5faa\u73af\u524d\u4e0d\u4f1a\u6709\u7b49\u5f85\u3002 \u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a 200 \u5c31\u4f1a\u8ba9\u6536\u96c6\u5668\u7b49\u5230\u603b\u5185\u5b58\u4f7f\u7528\u91cf\u8fbe\u5230 \u4e4b\u524d\u7684\u4e24\u500d\u65f6\u624d\u5f00\u59cb\u65b0\u7684\u5faa\u73af\u3002 \u5783\u573e\u6536\u96c6\u5668\u6b65\u8fdb\u500d\u7387\u63a7\u5236\u7740\u6536\u96c6\u5668\u8fd0\u4f5c\u901f\u5ea6\u76f8\u5bf9\u4e8e\u5185\u5b58\u5206\u914d\u901f\u5ea6\u7684\u500d\u7387\u3002 \u589e\u5927\u8fd9\u4e2a\u503c\u4e0d\u4ec5\u4f1a\u8ba9\u6536\u96c6\u5668\u66f4\u52a0\u79ef\u6781\uff0c\u8fd8\u4f1a\u589e\u52a0\u6bcf\u4e2a\u589e\u91cf\u6b65\u9aa4\u7684\u957f\u5ea6\u3002 \u4e0d\u8981\u628a\u8fd9\u4e2a\u503c\u8bbe\u5f97\u5c0f\u4e8e 100 \uff0c \u90a3\u6837\u7684\u8bdd\u6536\u96c6\u5668\u5c31\u5de5\u4f5c\u7684\u592a\u6162\u4e86\u4ee5\u81f3\u4e8e\u6c38\u8fdc\u90fd\u5e72\u4e0d\u5b8c\u4e00\u4e2a\u5faa\u73af\u3002 \u9ed8\u8ba4\u503c\u662f 200 \uff0c\u8fd9\u8868\u793a\u6536\u96c6\u5668\u4ee5\u5185\u5b58\u5206\u914d\u7684\u201c\u4e24\u500d\u201d\u901f\u5de5\u4f5c\u3002 \u5982\u679c\u4f60\u628a\u6b65\u8fdb\u500d\u7387\u8bbe\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\u5b57 \uff08\u6bd4\u4f60\u7684\u7a0b\u5e8f\u53ef\u80fd\u7528\u5230\u7684\u5b57\u8282\u6570\u8fd8\u5927 10% \uff09\uff0c \u6536\u96c6\u5668\u7684\u884c\u4e3a\u5c31\u50cf\u4e00\u4e2a stop-the-world \u6536\u96c6\u5668\u3002 \u63a5\u7740\u4f60\u82e5\u628a\u95f4\u6b47\u7387\u8bbe\u4e3a 200 \uff0c \u6536\u96c6\u5668\u7684\u884c\u4e3a\u5c31\u548c\u8fc7\u53bb\u7684 Lua \u7248\u672c\u4e00\u6837\u4e86\uff1a \u6bcf\u6b21 Lua \u4f7f\u7528\u7684\u5185\u5b58\u7ffb\u500d\u65f6\uff0c\u5c31\u505a\u4e00\u6b21\u5b8c\u6574\u7684\u6536\u96c6\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 C \u4e2d\u8c03\u7528 lua_gc \u6216\u5728 Lua \u4e2d\u8c03\u7528 collectgarbage \u6765\u6539\u53d8\u8fd9\u4fe9\u6570\u5b57\u3002 \u8fd9\u4e24\u4e2a\u51fd\u6570\u4e5f\u53ef\u4ee5\u7528\u6765\u76f4\u63a5\u63a7\u5236\u6536\u96c6\u5668\uff08\u4f8b\u5982\u505c\u6b62\u5b83\u6216\u91cd\u542f\u5b83\uff09\u3002 collectgarbage ([opt [, arg]]) \u8fd9\u4e2a\u51fd\u6570\u662f\u5783\u573e\u6536\u96c6\u5668\u7684\u901a\u7528\u63a5\u53e3\u3002 \u901a\u8fc7\u53c2\u6570 opt \u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e0d\u540c\u7684\u529f\u80fd\uff1a \"collect\": \u505a\u4e00\u6b21\u5b8c\u6574\u7684\u5783\u573e\u6536\u96c6\u5faa\u73af\u3002 \u8fd9\u662f\u9ed8\u8ba4\u9009\u9879\u3002 \"stop\": \u505c\u6b62\u5783\u573e\u6536\u96c6\u5668\u7684\u8fd0\u884c\u3002 \u5728\u8c03\u7528\u91cd\u542f\u524d\uff0c\u6536\u96c6\u5668\u53ea\u4f1a\u56e0\u663e\u5f0f\u7684\u8c03\u7528\u8fd0\u884c\u3002 \"restart\": \u91cd\u542f\u5783\u573e\u6536\u96c6\u5668\u7684\u81ea\u52a8\u8fd0\u884c\u3002 \"count\": \u4ee5 K \u5b57\u8282\u6570\u4e3a\u5355\u4f4d\u8fd4\u56de Lua \u4f7f\u7528\u7684\u603b\u5185\u5b58\u6570\u3002 \u8fd9\u4e2a\u503c\u6709\u5c0f\u6570\u90e8\u5206\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e58\u4e0a 1024 \u5c31\u80fd\u5f97\u5230 Lua \u4f7f\u7528\u7684\u51c6\u786e\u5b57\u8282\u6570\uff08\u9664\u975e\u6ea2\u51fa\uff09\u3002 \"step\": \u5355\u6b65\u8fd0\u884c\u5783\u573e\u6536\u96c6\u5668\u3002 \u6b65\u957f\u201c\u5927\u5c0f\u201d\u7531 arg \u63a7\u5236\u3002 \u4f20\u5165 0 \u65f6\uff0c\u6536\u96c6\u5668\u6b65\u8fdb\uff08\u4e0d\u53ef\u5206\u5272\u7684\uff09\u4e00\u6b65\u3002 \u4f20\u5165\u975e 0 \u503c\uff0c \u6536\u96c6\u5668\u6536\u96c6\u76f8\u5f53\u4e8e Lua \u5206\u914d\u8fd9\u4e9b\u591a\uff08K \u5b57\u8282\uff09\u5185\u5b58\u7684\u5de5\u4f5c\u3002 \u5982\u679c\u6536\u96c6\u5668\u7ed3\u675f\u4e00\u4e2a\u5faa\u73af\u5c06\u8fd4\u56de true \u3002 \"setpause\": \u5c06 arg \u8bbe\u4e3a\u6536\u96c6\u5668\u7684 \u95f4\u6b47\u7387 \uff08\u53c2\u89c1 \u00a72.5\uff09\u3002 \u8fd4\u56de \u95f4\u6b47\u7387 \u7684\u524d\u4e00\u4e2a\u503c\u3002 \"setstepmul\": \u5c06 arg \u8bbe\u4e3a\u6536\u96c6\u5668\u7684 \u6b65\u8fdb\u500d\u7387 \uff08\u53c2\u89c1 \u00a72.5\uff09\u3002 \u8fd4\u56de \u6b65\u8fdb\u500d\u7387 \u7684\u524d\u4e00\u4e2a\u503c\u3002 \"isrunning\": \u8fd4\u56de\u8868\u793a\u6536\u96c6\u5668\u662f\u5426\u5728\u5de5\u4f5c\u7684\u5e03\u5c14\u503c \uff08\u5373\u672a\u88ab\u505c\u6b62\uff09\u3002 \u5783\u573e\u6536\u96c6\u5143\u65b9\u6cd5 \u00b6 \u53ef\u4ee5\u4e3a\u8868\u8bbe\u5b9a\u5783\u573e\u6536\u96c6\u7684\u5143\u65b9\u6cd5, \u5bf9\u4e8e\u5b8c\u5168\u7528\u6237\u6570\u636e\u5219\u9700\u8981\u4f7f\u7528 C API, \u5143\u8868 \u4e4b\u524d\u4e5f\u8bf4\u8fc7\u4e86; \u8be5\u5143\u65b9\u6cd5\u88ab\u79f0\u4e3a\u7ec8\u7ed3\u5668, \u7ec8\u7ed3\u5668\u53ef\u4ee5\u914d\u5408 Lua \u7684\u5783\u573e\u6536\u96c6\u5668\u505a\u4e00\u4e9b\u989d\u5916\u7684\u8d44\u6e90\u7ba1\u7406\u5de5\u4f5c \uff08\u4f8b\u5982\u5173\u95ed\u6587\u4ef6\u3001\u7f51\u7edc\u6216\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u6216\u662f\u91ca\u653e\u4e00\u4e9b\u4f60\u81ea\u5df1\u7684\u5185\u5b58\uff09 \u8981\u60f3\u8ba9\u4e00\u4e2a\u5bf9\u8c61\u5728\u6536\u96c6\u8fc7\u7a0b\u4e2d\u8fdb\u5165\u7ec8\u7ed3\u6d41\u7a0b, \u4f60\u5fc5\u987b\u6807\u8bb0\u5b83\u9700\u8981\u89e6\u53d1\u7ec8\u7ed3\u5668; \u5f53\u4f60\u4e3a\u8fd9\u4e2a\u5bf9\u8c61\u8bbe\u7f6e\u5143\u8868\u65f6, \u82e5\u6b64\u523b\u8fd9\u5f20\u5143\u8868\u4e2d\u7528\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\"__gc\"\u4e3a\u7d22\u5f15\u7684\u57df, \u90a3\u4e48\u5c31\u6807\u8bb0\u4e86\u8fd9\u4e2a\u5bf9\u8c61\u9700\u8981\u89e6\u53d1\u7ec8\u7ed3\u5668; \u6ce8\u610f: \u5982\u679c\u4f60\u7ed9\u5bf9\u8c61\u8bbe\u7f6e\u5143\u8868\u65f6,\u8fd9\u4e2a\u5143\u8868\u6ca1\u6709__gc \u57df, \u4e4b\u540e\u518d\u7ed9\u5143\u8868\u52a0\u4e0a__gc \u57df, \u5219\u6807\u8bb0\u5931\u8d25; \u4e00\u65e6\u5bf9\u8c61\u88ab\u6807\u8bb0, __gc \u57df\u4e4b\u540e\u662f\u53ef\u4ee5\u4fee\u6539\u7684 -- \u6210\u529f\u6807\u8bb0\u5bf9\u8c61 local function test1 ( ... ) local obj = setmetatable ({}, { __gc = function () print ( '__gc \u88ab\u8c03\u7528, \u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5' ) end }) obj . a = 1 obj . b = 2 print ( obj . a ) print ( obj . b ) end --[[ \u8f93\u51fa 1 2 __gc \u88ab\u8c03\u7528, \u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5 ]] -- \u672a\u80fd\u6210\u529f\u6807\u8bb0\u5bf9\u8c61 local function test2 ( ... ) local metatable = {} local obj = setmetatable ({}, metatable ) metatable . __gc = function () print ( '__gc \u88ab\u8c03\u7528, \u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5' ) end obj . a = 1 obj . b = 2 print ( obj . a ) print ( obj . b ) end --[[ \u8f93\u51fa 1 2 ]] -- \u672a\u80fd\u6210\u529f\u6807\u8bb0\u5bf9\u8c61\u540e\u4fee\u6539__gc\u57df local function test3 ( ... ) local metatable = { __gc = function () print ( '__gc \u88ab\u8c03\u7528, \u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5' ) end } local obj = setmetatable ({}, metatable ) metatable . __gc = function () print ( '__gc \u88ab\u8c03\u7528, \u4fee\u6539__gc\u57df' ) end obj . a = 1 obj . b = 2 print ( obj . a ) print ( obj . b ) end --[[ \u8f93\u51fa 1 2 __gc \u88ab\u8c03\u7528, \u4fee\u6539__gc\u57df ]] \u5f53\u4e00\u4e2a\u88ab\u6807\u8bb0\u7684\u5bf9\u8c61\u6210\u4e3a\u4e86\u5783\u573e\u540e\uff0c\u5783\u573e\u6536\u96c6\u5668\u5e76\u4e0d\u4f1a\u7acb\u523b\u56de\u6536\u5b83\u3002 \u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0cLua \u4f1a\u5c06\u5176\u7f6e\u5165\u4e00\u4e2a\u94fe\u8868\u3002 \u5728\u6536\u96c6\u5b8c\u6210\u540e\uff0cLua \u5c06\u904d\u5386\u8fd9\u4e2a\u94fe\u8868\u3002 Lua \u4f1a\u68c0\u67e5\u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u5bf9\u8c61\u7684 __gc \u5143\u65b9\u6cd5\uff1a\u5982\u679c\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4ee5\u5bf9\u8c61\u4e3a\u552f\u4e00\u53c2\u6570\u8c03\u7528\u5b83\uff1b \u5426\u5219\u76f4\u63a5\u5ffd\u7565\u5b83\u3002 \u5728\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u5faa\u73af\u7684\u6700\u540e\u9636\u6bb5\uff0c\u672c\u6b21\u5faa\u73af\u4e2d\u68c0\u6d4b\u5230\u9700\u8981\u88ab\u56de\u6536\u7684\u5bf9\u8c61\uff0c\u7ec8\u7ed3\u5668\u7684\u89e6\u53d1\u987a\u5e8f\u5c06\u548c\u6807\u8bb0\u5faa\u5e8f\u76f8\u53cd\uff0c\u7b2c\u4e00\u4e2a\u8c03\u7528\u7684\u7ec8\u7ed3\u5668\u4e3a\u6700\u540e\u4e00\u4e2a\u88ab\u6807\u8bb0\u7684\u5bf9\u8c61\u643a\u5e26\u7684\u90a3\u4e2a; \u6bcf\u4e2a\u7ec8\u7ed3\u5668\u7684\u8fd0\u884c\u53ef\u80fd\u53d1\u751f\u5728\u6267\u884c\u4ee3\u7801\u7684\u4efb\u610f\u65f6\u523b\u3002 \u7531\u4e8e\u88ab\u56de\u6536\u7684\u5bf9\u8c61\u8fd8\u9700\u8981\u88ab\u7ec8\u7ed3\u5668\u4f7f\u7528\uff0c \u8be5\u5bf9\u8c61\uff08\u4ee5\u53ca\u4ec5\u80fd\u901a\u8fc7\u5b83\u8bbf\u95ee\u5230\u7684\u5176\u5b83\u5bf9\u8c61\uff09\u4e00\u5b9a\u4f1a\u88ab Lua \u590d\u6d3b\u3002 \u901a\u5e38\uff0c\u590d\u6d3b\u662f\u77ed\u6682\u7684\uff0c\u5bf9\u8c61\u6240\u5c5e\u5185\u5b58\u4f1a\u5728\u4e0b\u4e00\u4e2a\u5783\u573e\u6536\u96c6\u5faa\u73af\u91ca\u653e\u3002 \u7136\u540e\uff0c\u82e5\u7ec8\u7ed3\u5668\u53c8\u5c06\u5bf9\u8c61\u4fdd\u5b58\u53bb\u4e00\u4e9b\u5168\u5c40\u7684\u5730\u65b9 \uff08\u4f8b\u5982\uff1a\u653e\u5728\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u91cc\uff09\uff0c\u8fd9\u6b21\u590d\u6d3b\u5c31\u6301\u7eed\u751f\u6548\u4e86\u3002 \u6b64\u5916\uff0c\u5982\u679c\u5728\u7ec8\u7ed3\u5668\u4e2d\u5bf9\u4e00\u4e2a\u6b63\u8fdb\u5165\u7ec8\u7ed3\u6d41\u7a0b\u7684\u5bf9\u8c61\u518d\u6b21\u505a\u4e00\u6b21\u6807\u8bb0\u8ba9\u5b83\u89e6\u53d1\u7ec8\u7ed3\u5668\uff0c \u53ea\u8981\u8fd9\u4e2a\u5bf9\u8c61\u5728\u4e0b\u4e2a\u5faa\u73af\u4e2d\u4f9d\u65e7\u4e0d\u53ef\u8fbe\uff0c\u5b83\u7684\u7ec8\u7ed3\u51fd\u6570\u8fd8\u4f1a\u518d\u8c03\u7528\u4e00\u6b21\u3002 \u65e0\u8bba\u662f\u54ea\u79cd\u60c5\u51b5\uff0c \u5bf9\u8c61\u6240\u5c5e\u5185\u5b58\u4ec5\u5728\u5783\u573e\u6536\u96c6\u5faa\u73af\u4e2d\u8be5\u5bf9\u8c61\u4e0d\u53ef\u8fbe\u4e14 \u6ca1\u6709\u88ab\u6807\u8bb0\u6210\u9700\u8981\u89e6\u53d1\u7ec8\u7ed3\u5668\u624d\u4f1a\u88ab\u91ca\u653e\u3002 \u5f53\u4f60\u5173\u95ed\u4e00\u4e2a\u72b6\u6001\u673a\uff0cLua \u5c06\u8c03\u7528\u6240\u6709\u88ab\u6807\u8bb0\u4e86\u9700\u8981\u89e6\u53d1\u7ec8\u7ed3\u5668\u5bf9\u8c61\u7684\u7ec8\u7ed3\u8fc7\u7a0b\uff0c \u5176\u6b21\u5e8f\u4e3a\u6807\u8bb0\u6b21\u5e8f\u7684\u9006\u5e8f\u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u7ec8\u7ed3\u5668\u518d\u6b21\u6807\u8bb0\u5bf9\u8c61\u7684\u884c\u4e3a\u90fd\u4e0d\u4f1a\u751f\u6548\u3002 \u5f31\u8868 \u00b6 \u5f31\u8868\u662f\u4e00\u4e2a\u8868\u4e14\u62e5\u6709metatable\u5143\u8868\uff0c\u5e76\u5728metatable\u4e2d\u5b9a\u4e49\u4e86__mode\u5b57\u6bb5\u3002 \u4e00\u5f20\u5f31\u8868\u53ef\u4ee5\u6709\u5f31\u952e\u6216\u662f\u5f31\u503c\uff0c\u4e5f\u53ef\u4ee5\u952e\u503c\u90fd\u662f\u5f31\u5f15\u7528\u3002 \u542b\u6709\u5f31\u503c\u7684\u8868\u5141\u8bb8\u6536\u96c6\u5668\u56de\u6536\u5b83\u7684\u503c\uff0c\u4f46\u4f1a\u963b\u6b62\u6536\u96c6\u5668\u56de\u6536\u5b83\u7684\u952e\u3002 \u82e5\u4e00\u5f20\u8868\u7684\u952e\u503c\u5747\u4e3a\u5f31\u5f15\u7528\uff0c \u90a3\u4e48\u6536\u96c6\u5668\u53ef\u4ee5\u56de\u6536\u5176\u4e2d\u7684\u4efb\u610f\u952e\u548c\u503c\u3002 \u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u952e\u6216\u503c\u7684\u4efb\u610f\u4e00\u9879\u88ab\u56de\u6536\uff0c \u76f8\u5173\u8054\u7684\u952e\u503c\u5bf9\u90fd\u4f1a\u4ece\u8868\u4e2d\u79fb\u9664\u3002 \u4e00\u5f20\u8868\u7684\u5143\u8868\u4e2d\u7684 __mode \u57df\u63a7\u5236\u7740\u8fd9\u5f20\u8868\u7684\u5f31\u5c5e\u6027\u3002 \u5f53 __mode \u57df\u662f\u4e00\u4e2a\u5305\u542b\u5b57\u7b26 'k' \u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd9\u5f20\u8868\u7684\u6240\u6709\u952e\u7686\u4e3a\u5f31\u5f15\u7528\u3002 \u5f53 __mode \u57df\u662f\u4e00\u4e2a\u5305\u542b\u5b57\u7b26 'v' \u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd9\u5f20\u8868\u7684\u6240\u6709\u503c\u7686\u4e3a\u5f31\u5f15\u7528\u3002 \u5f31\u8868\u4e2d\u7684\u5f15\u7528\u662f\u5f31\u5f15\u7528\uff0c\u5f31\u5f15\u7528\u4e0d\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u5f15\u7528\u8ba1\u6570\u53d8\u5316\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u53ea\u6709\u5f31\u5f15\u7528\u6307\u5411\u5b83\uff0c\u90a3\u4e48\u5783\u573e\u6536\u96c6\u5668\u4f1a\u81ea\u52a8\u56de\u6536\u8be5\u5bf9\u8c61\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u4e0b\u9762\u662f\u6ca1\u6709\u4f7f\u7528\u5f31\u8868\u7684\u4f8b\u5b50: local tbl = {} local key = { count = 100 } tbl [ key ] = 1 key = nil print ( tbl [ key ]) -- nil -- \u5f3a\u5236\u6267\u884c\u5783\u573e\u56de\u6536 collectgarbage ( \"collect\" ) for k , v in pairs ( tbl ) do print ( k , v , k . count ) -- table: 00000000001a9b70 1 100 end \u5f53\u628a\u5bf9\u8c61\u653e\u5165\u8868\u4e2d\u65f6\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5f15\u7528\uff0c\u5373\u4f7f\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u5bf9\u8868\u4e2d\u7684\u5143\u7d20\u6709\u4efb\u4f55\u5f15\u7528\uff0c\u5783\u573e\u6536\u96c6\u5668\u4e5f\u4e0d\u4f1a\u56de\u6536\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u4f60\u53ea\u80fd\u9009\u62e9\u624b\u52a8\u91ca\u653e\u8868\u5143\u7d20\u6216\u662f\u5c06\u5176\u5e38\u9a7b\u5185\u5b58\u3002 \u4e0b\u9762\u662f\u4f7f\u7528\u4e86\u5f31\u8868: local tbl = setmetatable ({}, { __mode = 'k' }) local key = { count = 100 } tbl [ key ] = 1 key = nil print ( tbl [ key ]) -- nil -- \u5f3a\u5236\u6267\u884c\u5783\u573e\u56de\u6536 collectgarbage ( \"collect\" ) for k , v in pairs ( tbl ) do print ( k , v , k . count ) end \u53ea\u8f93\u51fa\u4e00\u4e2anil\uff0c\u4e3a print(tbl[key]) -- nil \u8f93\u51fa\uff0c\u5f3a\u5236\u5783\u573e\u56de\u6536\u4e4b\u540e\uff0ckey \u8868\u88ab\u56de\u6536\uff0ctbl\u8868\u4e2d\u7684key:1 \u88ab\u79fb\u9664\uff0cpairs \u5c06\u904d\u5386\u7a7a\u8868\uff0c\u5219\u6ca1\u6709\u8f93\u51fa\u3002 \u5e94\u7528\u6848\u4f8b \u4f7f\u7528\u201c\u7a7a\u95f4\u6362\u65f6\u95f4\u201d\u662f\u4e00\u79cd\u901a\u7528\u7684\u7a0b\u5e8f\u8fd0\u884c\u6548\u7387\u4f18\u5316\u624b\u6bb5\uff0c\u4f8b\u5982\u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u7684\u670d\u52a1\u5668\uff0c\u5b83\u63a5\u6536\u5230\u7684\u8bf7\u6c42\u4e2d\u5305\u542bLua\u4ee3\u7801\uff0c\u6bcf\u5f53\u6536\u5230\u8bf7\u6c42\u540e\u90fd\u4f1a\u8c03\u7528Lua\u7684 loadstring \u51fd\u6570\u6765\u52a8\u6001\u89e3\u6790\u8bf7\u6c42\u4e2d\u7684Lua\u4ee3\u7801\uff0c\u5982\u679c\u8fd9\u79cd\u64cd\u4f5c\u8fc7\u4e8e\u9891\u7e41\uff0c\u4f1a\u76f4\u63a5\u5bfc\u81f4\u670d\u52a1\u5668\u7684\u6267\u884c\u6548\u7387\u4e0b\u964d\u3002 \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u5c06\u6bcf\u6b21\u89e3\u6790\u7684\u7ed3\u679c\u7f13\u5b58\u5230\u4e00\u4e2atable\u4e2d\uff0c\u4e0b\u6b21\u5982\u679c\u63a5\u6536\u5230\u76f8\u540c\u7684Lua\u4ee3\u7801\u5219\u65e0\u9700\u8c03\u7528 loadstring \u6765\u52a8\u6001\u89e3\u6790\uff0c\u800c\u662f\u76f4\u63a5\u4ecetable\u4e2d\u83b7\u53d6\u5e76\u76f4\u63a5\u6267\u884c\u5373\u53ef\u3002\u8fd9\u6837\uff0c\u5728\u6709\u5927\u91cf\u91cd\u590dLua\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u6781\u5927\u5730\u63d0\u9ad8\u670d\u52a1\u5668\u7684\u6267\u884c\u6548\u7387\u3002\u53cd\u4e4b\uff0c\u82e5\u6709\u76f8\u5f53\u4e00\u90e8\u5206\u7684Lua\u4ee3\u7801\u53ea\u662f\u51fa\u73b0\u4e00\u6b21\uff0c\u4f7f\u7528\u8fd9\u79cd\u673a\u5236\u4f1a\u5bfc\u81f4\u5927\u91cf\u7684\u5185\u5b58\u8d44\u6e90\u88ab\u5360\u7528\u800c\u5f97\u4e0d\u5230\u6709\u6548\u7684\u91ca\u653e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f7f\u7528\u5f31\u8868\uff0c\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5e8f\u4e0a\u63d0\u5347\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387\uff0c\u5185\u5b58\u8d44\u6e90\u4e5f\u4f1a\u5f97\u5230\u6709\u6548\u7684\u91ca\u653e\u3002 local result = {} setmetatable ( result , { __mode = \"v\" } ) function mem_loadstring ( str ) local val = result [ str ] if val == nil then val = assert ( loadstring ( str ) ) result [ str ] = val end return val end <<<<<<< HEAD \u00b6 ### \u8bcd\u6cd5\u7ea6\u5b9a Lua \u8bed\u8a00\u5bf9\u5927\u5c0f\u5199\u654f\u611f\uff1a and \u662f\u4e00\u4e2a\u4fdd\u7559\u5b57\uff0c\u4f46 And \u4e0e AND \u5219\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6709\u6548\u540d\u5b57\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u7ea6\u5b9a\uff0c\u7a0b\u5e8f\u5e94\u907f\u514d\u521b\u5efa\u4ee5\u4e0b\u5212\u7ebf\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u5927\u5199\u5b57\u6bcd\u6784\u6210\u7684\u540d\u5b57 \uff08\u4f8b\u5982 \\_VERSION\uff09\u3002 \u8f6c\u4e49\u4e32 '\\z' \u4f1a\u5ffd\u7565\u5176\u540e\u7684\u4e00\u7cfb\u5217\u7a7a\u767d\u7b26\uff0c\u5305\u62ec\u6362\u884c\uff1b \u5b83\u5728\u4f60\u9700\u8981\u5bf9\u4e00\u4e2a\u5f88\u957f\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u65ad\u884c\u4e3a\u591a\u884c\u5e76\u5e0c\u671b\u5728\u6bcf\u4e2a\u65b0\u884c\u4fdd\u6301\u7f29\u8fdb\u65f6\u975e\u5e38\u6709\u7528\u3002 \u5b57\u9762\u4e32\u8fd8\u53ef\u4ee5\u7528\u4e00\u79cd \u957f\u62ec\u53f7 \u62ec\u8d77\u6765\u7684\u65b9\u5f0f\u5b9a\u4e49\u3002 \u6211\u4eec\u628a\u4e24\u4e2a\u6b63\u7684\u65b9\u62ec\u53f7\u95f4\u63d2\u5165 n \u4e2a\u7b49\u53f7\u5b9a\u4e49\u4e3a \u7b2c n \u7ea7\u5f00\u957f\u62ec\u53f7\u3002 \u5c31\u662f\u8bf4\uff0c0 \u7ea7\u5f00\u7684\u957f\u62ec\u53f7\u5199\u4f5c [[ \uff0c \u4e00\u7ea7\u5f00\u957f\u62ec\u53f7\u5199\u4f5c [=[ \uff0c \u5982\u6b64\u7b49\u7b49\u3002 \u95ed\u957f\u62ec\u53f7\u4e5f\u4f5c\u7c7b\u4f3c\u5b9a\u4e49\uff1b \u4e3e\u4e2a\u4f8b\u5b50\uff0c4 \u7ea7\u53cd\u7684\u957f\u62ec\u53f7\u5199\u4f5c ]====] \u3002 \u4e00\u4e2a \u957f\u5b57\u9762\u4e32 \u53ef\u4ee5\u7531\u4efb\u4f55\u4e00\u7ea7\u7684\u5f00\u957f\u62ec\u53f7\u5f00\u59cb\uff0c\u800c\u7531\u7b2c\u4e00\u4e2a\u78b0\u5230\u7684\u540c\u7ea7\u7684\u95ed\u957f\u62ec\u53f7\u7ed3\u675f\u3002 \u8fd9\u79cd\u65b9\u5f0f\u63cf\u8ff0\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u4e1c\u897f\uff0c\u5f53\u7136\u7279\u5b9a\u7ea7\u522b\u7684\u53cd\u957f\u62ec\u53f7\u9664\u5916\u3002 \u6574\u4e2a\u8bcd\u6cd5\u5206\u6790\u8fc7\u7a0b\u5c06\u4e0d\u53d7\u5206\u884c\u9650\u5236\uff0c\u4e0d\u5904\u7406\u4efb\u4f55\u8f6c\u4e49\u7b26\uff0c\u5e76\u4e14\u5ffd\u7565\u6389\u4efb\u4f55\u4e0d\u540c\u7ea7\u522b\u7684\u957f\u62ec\u53f7\u3002 \u5176\u4e2d\u78b0\u5230\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u6362\u884c\u4e32\uff08\u56de\u8f66\u3001\u6362\u884c\u3001\u56de\u8f66\u52a0\u6362\u884c\u3001\u6362\u884c\u52a0\u56de\u8f66\uff09\uff0c\u90fd\u4f1a\u88ab\u8f6c\u6362\u4e3a\u5355\u4e2a\u6362\u884c\u7b26\u3002 \u8bed\u53e5\u5757\u662f\u4e00\u4e2a\u8bed\u53e5\u5e8f\u5217\uff0c\u5b83\u4eec\u4f1a\u6309\u6b21\u5e8f\u6267\u884c\uff1a block ::= {stat} Lua \u652f\u6301 \u7a7a\u8bed\u53e5\uff0c \u4f60\u53ef\u4ee5\u7528\u5206\u53f7\u5206\u5272\u8bed\u53e5\uff0c\u4e5f\u53ef\u4ee5\u4ee5\u5206\u53f7\u5f00\u59cb\u4e00\u4e2a\u8bed\u53e5\u5757\uff0c \u6216\u662f\u8fde\u7740\u5199\u4e24\u4e2a\u5206\u53f7\uff1a stat ::= \u2018;\u2019 \u51fd\u6570\u8c03\u7528\u548c\u8d4b\u503c\u8bed\u53e5\u90fd\u53ef\u80fd\u4ee5\u4e00\u4e2a\u5c0f\u62ec\u53f7\u6253\u5934\uff0c \u8fd9\u53ef\u80fd\u8ba9 Lua \u7684\u8bed\u6cd5\u4ea7\u751f\u6b67\u4e49\u3002 \u6211\u4eec\u6765\u770b\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u65ad\uff1a a = b + c (print or io.write)('done') \u4ece\u8bed\u6cd5\u4e0a\u8bf4\uff0c\u53ef\u80fd\u6709\u4e24\u79cd\u89e3\u91ca\u65b9\u5f0f\uff1a a = b + c(print or io.write)('done') a = b + c; (print or io.write)('done') \u5f53\u524d\u7684\u89e3\u6790\u5668\u603b\u662f\u7528\u7b2c\u4e00\u79cd\u7ed3\u6784\u6765\u89e3\u6790\uff0c \u5b83\u4f1a\u5c06\u5f00\u62ec\u53f7\u770b\u6210\u51fd\u6570\u8c03\u7528\u7684\u53c2\u6570\u4f20\u9012\u5f00\u59cb\u5904\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u4e8c\u4e49\u6027\uff0c \u5728\u4e00\u6761\u8bed\u53e5\u4ee5\u5c0f\u62ec\u53f7\u5f00\u5934\u65f6\uff0c\u524d\u9762\u653e\u4e00\u4e2a\u5206\u53f7\u662f\u4e2a\u597d\u4e60\u60ef\uff1a ;(print or io.write)('done') \u4e00\u4e2a\u8bed\u53e5\u5757\u53ef\u4ee5\u88ab\u663e\u5f0f\u7684\u5b9a\u754c\u4e3a\u5355\u6761\u8bed\u53e5\uff1a stat ::= do block end \u663e\u5f0f\u7684\u5bf9\u4e00\u4e2a\u5757\u5b9a\u754c\u901a\u5e38\u7528\u6765\u63a7\u5236\u5185\u90e8\u53d8\u91cf\u58f0\u660e\u7684\u4f5c\u7528\u57df\u3002 \u6709\u65f6\uff0c\u663e\u5f0f\u5b9a\u754c\u4e5f\u7528\u4e8e\u5728\u4e00\u4e2a\u8bed\u53e5\u5757\u4e2d\u95f4\u63d2\u5165 return \u5728 repeat\u2013until \u5faa\u73af\u4e2d\uff0c \u5185\u90e8\u8bed\u53e5\u5757\u7684\u7ed3\u675f\u70b9\u4e0d\u662f\u5728 until \u8fd9\u4e2a\u5173\u952e\u5b57\u5904\uff0c \u5b83\u8fd8\u5305\u62ec\u4e86\u5176\u540e\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f\u3002 \u56e0\u6b64\uff0c\u6761\u4ef6\u8868\u8fbe\u5f0f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u5757\u4e2d\u7684\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u3002 return \u53ea\u80fd\u88ab\u5199\u5728\u4e00\u4e2a\u8bed\u53e5\u5757\u7684\u6700\u540e\u4e00\u53e5\u3002 \u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u4ece\u8bed\u53e5\u5757\u7684\u4e2d\u95f4 return\uff0c \u4f60\u53ef\u4ee5\u4f7f\u7528\u663e\u5f0f\u7684\u5b9a\u4e49\u4e00\u4e2a\u5185\u90e8\u8bed\u53e5\u5757\uff0c \u4e00\u822c\u5199\u4f5c do return end\u3002 \u53ef\u4ee5\u8fd9\u6837\u5199\u662f\u56e0\u4e3a\u73b0\u5728 return \u6210\u4e86\uff08\u5185\u90e8\uff09\u8bed\u53e5\u5757\u7684\u6700\u540e\u4e00\u53e5\u4e86\u3002 \u51fd\u6570\u8c03\u7528\u548c\u53ef\u53d8\u53c2\u6570\u8868\u8fbe\u5f0f\u90fd\u53ef\u4ee5\u653e\u5728\u591a\u91cd\u8fd4\u56de\u503c\u4e2d\u3002 \u5982\u679c\u51fd\u6570\u8c03\u7528\u88ab\u5f53\u4f5c\u4e00\u6761\u8bed\u53e5\uff08\u53c2\u89c1 \u00a73.3.6\uff09\uff0c \u5176\u8fd4\u56de\u503c\u5217\u8868\u88ab\u8c03\u6574\u4e3a\u96f6\u4e2a\u5143\u7d20\uff0c\u5373\u629b\u5f03\u6240\u6709\u7684\u8fd4\u56de\u503c\u3002 \u5982\u679c\u8868\u8fbe\u5f0f\u88ab\u7528\u4e8e\u8868\u8fbe\u5f0f\u5217\u8868\u7684\u6700\u540e\uff08\u6216\u662f\u552f\u4e00\u7684\uff09\u4e00\u4e2a\u5143\u7d20\uff0c \u90a3\u4e48\u4e0d\u4f1a\u505a\u4efb\u4f55\u8c03\u6574\uff08\u9664\u975e\u8868\u8fbe\u5f0f\u88ab\u62ec\u53f7\u62ec\u8d77\u6765\uff09\u3002 \u5728\u5176\u5b83\u60c5\u51b5\u4e0b\uff0c Lua \u90fd\u4f1a\u628a\u7ed3\u679c\u8c03\u6574\u4e3a\u4e00\u4e2a\u5143\u7d20\u7f6e\u5165\u8868\u8fbe\u5f0f\u5217\u8868\u4e2d\uff0c \u5373\u4fdd\u7559\u7b2c\u4e00\u4e2a\u7ed3\u679c\u800c\u5ffd\u7565\u4e4b\u540e\u7684\u6240\u6709\u503c\uff0c\u6216\u662f\u5728\u6ca1\u6709\u7ed3\u679c\u65f6\uff0c \u8865\u5355\u4e2a nil\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff1a f() -- \u8c03\u6574\u4e3a 0 \u4e2a\u7ed3\u679c g(f(), x) -- f() \u4f1a\u88ab\u8c03\u6574\u4e3a\u4e00\u4e2a\u7ed3\u679c g(x, f()) -- g \u6536\u5230 x \u4ee5\u53ca f() \u8fd4\u56de\u7684\u6240\u6709\u7ed3\u679c a,b,c = f(), x -- f() \u88ab\u8c03\u6574\u4e3a 1 \u4e2a\u7ed3\u679c \uff08c \u6536\u5230 nil\uff09 a,b = ... -- a \u6536\u5230\u53ef\u53d8\u53c2\u6570\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c -- b \u6536\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff08\u5982\u679c\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d -- \u6ca1\u6709\u5b9e\u9645\u7684\u53c2\u6570\uff0ca \u548c b \u90fd\u4f1a\u6536\u5230 nil\uff09 a,b,c = x, f() -- f() \u88ab\u8c03\u6574\u4e3a 2 \u4e2a\u7ed3\u679c a,b,c = f() -- f() \u88ab\u8c03\u6574\u4e3a 3 \u4e2a\u7ed3\u679c return f() -- \u8fd4\u56de f() \u7684\u6240\u6709\u8fd4\u56de\u7ed3\u679c return ... -- \u8fd4\u56de\u4ece\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u63a5\u6536\u5230\u7684\u6240\u6709\u53c2\u6570parameters return x,y,f() -- \u8fd4\u56de x, y, \u4ee5\u53ca f() \u7684\u6240\u6709\u8fd4\u56de\u503c {f()} -- \u7528 f() \u7684\u6240\u6709\u8fd4\u56de\u503c\u521b\u5efa\u4e00\u4e2a\u5217\u8868 {...} -- \u7528\u53ef\u53d8\u53c2\u6570\u4e2d\u7684\u6240\u6709\u503c\u521b\u5efa\u4e00\u4e2a\u5217\u8868 {f(), nil} -- f() \u88ab\u8c03\u6574\u4e3a\u4e00\u4e2a\u7ed3\u679c \u88ab\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u8868\u8fbe\u5f0f\u6c38\u8fdc\u88ab\u5f53\u4f5c\u4e00\u4e2a\u503c\u3002 \u6240\u4ee5\uff0c (f(x,y,z)) \u5373\u4f7f f \u8fd4\u56de\u591a\u4e2a\u503c\uff0c \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6c38\u8fdc\u662f\u4e00\u4e2a\u5355\u4e00\u503c\u3002 \uff08(f(x,y,z)) \u7684\u503c\u662f f \u8fd4\u56de\u7684\u7b2c\u4e00\u4e2a\u503c\u3002 \u5982\u679c f \u4e0d\u8fd4\u56de\u503c\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u7684\u503c\u5c31\u662f nil \u3002\uff09 ------------------------------------------------------------ \u5bf9\u4e8e\u53f3\u79fb\u548c\u5de6\u79fb\uff0c\u5747\u7528\u96f6\u6765\u586b\u8865\u7a7a\u4f4d\u3002 \u79fb\u52a8\u7684\u4f4d\u6570\u82e5\u4e3a\u8d1f\uff0c\u5219\u5411\u53cd\u65b9\u5411\u4f4d\u79fb\uff1b <span style=\"color: red;\">(\u8fd9\u548cpython\u7684\u76f4\u63a5\u62a5\u9519\u4e0d\u4e00\u6837)</span> \u82e5\u79fb\u52a8\u7684\u4f4d\u6570\u7684\u7edd\u5bf9\u503c\u5927\u4e8e\u7b49\u4e8e \u6574\u6570\u672c\u8eab\u7684\u4f4d\u6570\uff0c\u5176\u7ed3\u679c\u4e3a\u96f6 \uff08\u6240\u6709\u4f4d\u90fd\u88ab\u79fb\u51fa\uff09\u3002 <img src=\"../../images/QQ\u622a\u56fe20200926123640.png\"> \u82e5\u79fb\u52a8\u7684\u4f4d\u6570\u7684\u7edd\u5bf9\u503c\u5927\u4e8e\u7b49\u4e8e \u6574\u6570\u672c\u8eab\u7684\u4f4d\u6570\uff0c\u5176\u7ed3\u679c\u4e3a\u96f6 \uff08\u6240\u6709\u4f4d\u90fd\u88ab\u79fb\u51fa\uff09\u3002 ------------------------- \u7b49\u4e8e\u64cd\u4f5c \uff08==\uff09\u5148\u6bd4\u8f83\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u3002 \u5982\u679c\u7c7b\u578b\u4e0d\u540c\uff0c\u7ed3\u679c\u5c31\u662f false\u3002 \u5426\u5219\uff0c\u7ee7\u7eed\u6bd4\u8f83\u503c\u3002 \u5b57\u7b26\u4e32\u6309\u4e00\u822c\u7684\u65b9\u5f0f\u6bd4\u8f83\u3002 \u6570\u5b57\u9075\u5faa\u4e8c\u5143\u64cd\u4f5c\u7684\u89c4\u5219\uff1a \u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u6570\u90fd\u662f\u6574\u6570\uff0c \u5b83\u4eec\u6309\u6574\u6570\u6bd4\u8f83\uff1b \u5426\u5219\uff0c\u5b83\u4eec\u5148\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\uff0c\u7136\u540e\u518d\u505a\u6bd4\u8f83\u3002 -------------------------- return functioncall \u8fd9\u6837\u7684\u8c03\u7528\u5f62\u5f0f\u5c06\u89e6\u53d1\u4e00\u6b21 \u5c3e\u8c03\u7528\u3002 Lua \u5b9e\u73b0\u4e86 \u5b8c\u5168\u5c3e\u8c03\u7528\uff08\u6216\u79f0\u4e3a \u5b8c\u5168\u5c3e\u9012\u5f52\uff09\uff1a \u5728\u5c3e\u8c03\u7528\u4e2d\uff0c \u88ab\u8c03\u7528\u7684\u51fd\u6570\u91cd\u7528\u8c03\u7528\u5b83\u7684\u51fd\u6570\u7684\u5806\u6808\u9879\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u7a0b\u5e8f\u6267\u884c\u7684\u5d4c\u5957\u5c3e\u8c03\u7528\u7684\u5c42\u6570\u662f\u6ca1\u6709\u9650\u5236\u7684\u3002 \u7136\u800c\uff0c\u5c3e\u8c03\u7528\u5c06\u5220\u9664\u8c03\u7528\u5b83\u7684\u51fd\u6570\u7684\u4efb\u4f55\u8c03\u8bd5\u4fe1\u606f\u3002 \u6ce8\u610f\uff0c\u5c3e\u8c03\u7528\u53ea\u53d1\u751f\u5728\u7279\u5b9a\u7684\u8bed\u6cd5\u4e0b\uff0c \u4ec5\u5f53 return \u53ea\u6709\u5355\u4e00\u51fd\u6570\u8c03\u7528\u4f5c\u4e3a\u53c2\u6570\u65f6\u624d\u53d1\u751f\u5c3e\u8c03\u7528\uff1b \u8fd9\u79cd\u8bed\u6cd5\u4f7f\u5f97\u8c03\u7528\u51fd\u6570\u7684\u6240\u6709\u7ed3\u679c\u53ef\u4ee5\u5b8c\u6574\u5730\u8fd4\u56de\u3002 \u56e0\u6b64\uff0c\u4e0b\u9762\u8fd9\u4e9b\u4f8b\u5b50\u90fd\u4e0d\u662f\u5c3e\u8c03\u7528\uff1a ```lua return (f(x)) -- \u8fd4\u56de\u503c\u88ab\u8c03\u6574\u4e3a\u4e00\u4e2a return 2 * f(x) return x, f(x) -- \u8ffd\u52a0\u82e5\u5e72\u8fd4\u56de\u503c f(x); return -- \u8fd4\u56de\u503c\u5168\u90e8\u88ab\u820d\u5f03 return x or f(x) -- \u8fd4\u56de\u503c\u88ab\u8c03\u6574\u4e3a\u4e00\u4e2a \u8be5\u8bed\u53e5 function f () body end \u88ab\u8f6c\u8bd1\u6210 f = function () body end \u8be5\u8bed\u53e5 function t.a.b.c.f () body end \u88ab\u8f6c\u8bd1\u6210 t.a.b.c.f = function () body end \u8be5\u8bed\u53e5 local function f () body end \u88ab\u8f6c\u8bd1\u6210 local f; f = function () body end \u800c\u4e0d\u662f local f = function () body end \uff08\u8fd9\u4e2a\u5dee\u522b\u53ea\u5728\u51fd\u6570\u4f53\u5185\u9700\u8981\u5f15\u7528 f \u65f6\u624d\u6709\u3002\uff09 \u6bcf\u6b21\u6267\u884c\u5230\u4e00\u4e2a local \u8bed\u53e5\u90fd\u4f1a\u5b9a\u4e49\u51fa\u4e00\u4e2a\u65b0\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u770b\u770b\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\uff1a a = {} local x = 20 for i=1,10 do local y = 0 a[i] = function () y=y+1; return x+y end end \u8fd9\u4e2a\u5faa\u73af\u521b\u5efa\u4e86\u5341\u4e2a\u95ed\u5305\uff08\u8fd9\u6307\u5341\u4e2a\u533f\u540d\u51fd\u6570\u7684\u5b9e\u4f8b\uff09\u3002 \u8fd9\u4e9b\u95ed\u5305\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u4f7f\u7528\u4e86\u4e0d\u540c\u7684 y \u53d8\u91cf\uff0c \u800c\u5b83\u4eec\u53c8\u5171\u4eab\u4e86\u540c\u4e00\u4efd x\u3002 \u57fa\u7840\u51fd\u6570 \u00b6 assert (v [, message]) \u5982\u679c\u5176\u53c2\u6570 v \u7684\u503c\u4e3a\u5047\uff08nil \u6216 false\uff09\uff0c \u5b83\u5c31\u8c03\u7528 error\uff1b \u5426\u5219\uff0c\u8fd4\u56de\u6240\u6709\u7684\u53c2\u6570\u3002 \u5728\u9519\u8bef\u60c5\u51b5\u65f6\uff0c message \u6307\u90a3\u4e2a\u9519\u8bef\u5bf9\u8c61\uff1b \u5982\u679c\u4e0d\u63d0\u4f9b\u8fd9\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u9ed8\u8ba4\u4e3a \"assertion failed!\" \u3002 getmetatable (object) \u5982\u679c object \u4e0d\u5305\u542b\u5143\u8868\uff0c\u8fd4\u56de nil \u3002 \u5426\u5219\uff0c \u5982\u679c\u5728\u8be5\u5bf9\u8c61\u7684\u5143\u8868\u4e2d\u6709 \"__metatable\" \u57df\u65f6\u8fd4\u56de\u5176\u5173\u8054\u503c \uff0c \u6ca1\u6709\u65f6\u8fd4\u56de\u8be5\u5bf9\u8c61\u7684\u5143\u8868\u3002 next (table [, index]) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u904d\u5386\u7684\u8868\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8868\u4e2d\u7684\u67d0\u4e2a\u952e\u3002 next \u8fd4\u56de\u8be5\u952e\u7684\u4e0b\u4e00\u4e2a\u952e\u53ca\u5176\u5173\u8054\u7684\u503c\u3002 \u5982\u679c\u7528 nil \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8c03\u7528 next \u5c06\u8fd4\u56de\u521d\u59cb\u952e\u53ca\u5176\u5173\u8054\u503c\u3002 \u5f53\u4ee5\u6700\u540e\u4e00\u4e2a\u952e\u53bb\u8c03\u7528\uff0c\u6216\u662f\u4ee5 nil \u8c03\u7528\u4e00\u5f20\u7a7a\u8868\u65f6\uff0c next \u8fd4\u56de nil\u3002 assert(next({}) == nil) \u5f53\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u4f60\u7ed9\u8868\u4e2d\u5e76\u4e0d\u5b58\u5728\u7684\u57df\u8d4b\u503c\uff0c next \u7684\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684 print (\u00b7\u00b7\u00b7) \u63a5\u6536\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06\u5b83\u4eec\u7684\u503c\u6253\u5370\u5230 stdout\u3002 \u5b83\u7528 tostring \u51fd\u6570\u5c06\u6bcf\u4e2a\u53c2\u6570\u90fd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002 print \u4e0d\u7528\u4e8e\u505a\u683c\u5f0f\u5316\u8f93\u51fa\u3002\u4ec5\u4f5c\u4e3a\u770b\u4e00\u4e0b\u67d0\u4e2a\u503c\u7684\u5feb\u6377\u65b9\u5f0f\u3002 \u591a\u7528\u4e8e\u8c03\u8bd5\u3002 \u5b8c\u6574\u7684\u5bf9\u8f93\u51fa\u7684\u63a7\u5236\uff0c\u8bf7\u4f7f\u7528 string.format \u4ee5\u53ca io.write\u3002 rawequal (v1, v2) \u5728\u4e0d\u89e6\u53d1\u4efb\u4f55\u5143\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b \u68c0\u67e5 v1 \u662f\u5426\u548c v2 \u76f8\u7b49\u3002 \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u91cf\u3002 rawget (table, index) \u5728\u4e0d\u89e6\u53d1\u4efb\u4f55\u5143\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b \u83b7\u53d6 table[index] \u7684\u503c\u3002 table \u5fc5\u987b\u662f\u4e00\u5f20\u8868\uff1b index \u53ef\u4ee5\u662f\u4efb\u4f55\u503c\u3002 rawlen (v) \u5728\u4e0d\u89e6\u53d1\u4efb\u4f55\u5143\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b \u8fd4\u56de\u5bf9\u8c61 v \u7684\u957f\u5ea6\u3002 v \u53ef\u4ee5\u662f\u8868\u6216\u5b57\u7b26\u4e32\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002 rawset (table, index, value) \u5728\u4e0d\u89e6\u53d1\u4efb\u4f55\u5143\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b \u5c06 table[index] \u8bbe\u4e3a value\u3002 table \u5fc5\u987b\u662f\u4e00\u5f20\u8868\uff0c index \u53ef\u4ee5\u662f nil \u4e0e NaN \u4e4b\u5916\u7684\u4efb\u4f55\u503c\u3002 value \u53ef\u4ee5\u662f\u4efb\u4f55 Lua \u503c\u3002 \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de table\u3002 select (index, \u00b7\u00b7\u00b7) select \u8be6\u89e3\u770b\u8fd9\u91cc: http://yiouejv.com/lua/select%E5%87%BD%E6%95%B0/ tonumber (e [, base]) \u5982\u679c\u8c03\u7528\u7684\u65f6\u5019\u6ca1\u6709 base\uff0c tonumber \u5c1d\u8bd5\u628a\u53c2\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 \u5982\u679c\u53c2\u6570\u5df2\u7ecf\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u6216\u662f\u4e00\u4e2a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c tonumber \u5c31\u8fd4\u56de\u8fd9\u4e2a\u6570\u5b57\uff1b \u5426\u5219\u8fd4\u56de nil\u3002 \u5b57\u7b26\u4e32\u7684\u8f6c\u6362\u7ed3\u679c\u53ef\u80fd\u662f\u6574\u6570\u4e5f\u53ef\u80fd\u662f\u6d6e\u70b9\u6570\uff0c \u8fd9\u53d6\u51b3\u4e8e Lua \u7684\u8f6c\u6362\u6587\u6cd5, \uff08\u5b57\u7b26\u4e32\u53ef\u4ee5\u6709\u524d\u7f6e\u548c\u540e\u7f6e\u7684\u7a7a\u683c\uff0c\u53ef\u4ee5\u5e26\u7b26\u53f7\u3002\uff09 \u5f53\u4f20\u5165 base \u8c03\u7528\u5b83\u65f6\uff0c e \u5fc5\u987b\u662f\u4e00\u4e2a\u4ee5\u8be5\u8fdb\u5236\u8868\u793a\u7684\u6574\u6570\u5b57\u7b26\u4e32\u3002 \u8fdb\u5236\u53ef\u4ee5\u662f 2 \u5230 36 \uff08\u5305\u542b 2 \u548c 36\uff09\u4e4b\u95f4\u7684\u4efb\u4f55\u6574\u6570\u3002 \u5927\u4e8e 10 \u8fdb\u5236\u65f6\uff0c\u5b57\u6bcd 'A' \uff08\u5927\u5c0f\u5199\u5747\u53ef\uff09\u8868\u793a 10 \uff0c 'B' \u8868\u793a 11\uff0c\u4f9d\u6b21\u5230 'Z' \u8868\u793a 35 \u3002 \u5982\u679c\u5b57\u7b26\u4e32 e \u4e0d\u662f\u8be5\u8fdb\u5236\u4e0b\u7684\u5408\u6cd5\u6570\u5b57\uff0c \u51fd\u6570\u8fd4\u56de nil\u3002 tostring (v) \u53ef\u4ee5\u63a5\u6536\u4efb\u4f55\u7c7b\u578b\uff0c\u5b83\u5c06\u5176\u8f6c\u6362\u4e3a\u4eba\u53ef\u9605\u8bfb\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u3002 \u6d6e\u70b9\u6570\u603b\u88ab\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u7684\u8868\u73b0\u5f62\u5f0f\uff08\u5c0f\u6570\u70b9\u5f62\u5f0f\u6216\u662f\u6307\u6570\u5f62\u5f0f\uff09\u3002 \uff08\u5982\u679c\u60f3\u5b8c\u5168\u63a7\u5236\u6570\u5b57\u5982\u4f55\u88ab\u8f6c\u6362\uff0c\u53ef\u4ee5\u4f7f\u7528 string.format\u3002\uff09 \u5982\u679c v \u6709 \"__tostring\" \u57df\u7684\u5143\u8868\uff0c tostring \u4f1a\u4ee5 v \u4e3a\u53c2\u6570\u8c03\u7528\u5b83\u3002 \u5e76\u7528\u5b83\u7684\u7ed3\u679c\u4f5c\u4e3a\u8fd4\u56de\u503c\u3002 \u6a21\u5757 \u00b6 \u6587\u6863\u5f88\u8be6\u7ec6 https://cloudwu.github.io/lua53doc/manual.html#6.3 \u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f \u00b6 Big-endian\uff1a\u9ad8\u4f4d\u5b57\u8282\u5b58\u5165\u4f4e\u5730\u5740\uff0c\u4f4e\u4f4d\u5b57\u8282\u5b58\u5165\u9ad8\u5730\u5740 Little-endian\uff1a\u4f4e\u4f4d\u5b57\u8282\u5b58\u5165\u4f4e\u5730\u5740\uff0c\u9ad8\u4f4d\u5b57\u8282\u5b58\u5165\u9ad8\u5730\u5740 \u4f8b\u5982\uff0c\u5c0612345678h\u5199\u51651000h\u5f00\u59cb\u7684\u5185\u5b58\u4e2d\uff0c\u4ee5\u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f\u6a21\u5f0f\u5b58\u653e\u7ed3\u679c\u5982\u4e0b \u5b57\u8282\u5e8f\u901a\u5e38\u53ea\u548c\u4f60\u4f7f\u7528\u7684\u5904\u7406\u5668\u67b6\u6784\u6709\u5173\uff0c\u800c\u548c\u7f16\u7a0b\u8bed\u8a00\u65e0\u5173\uff0c\u6bd4\u5982\u5e38\u89c1\u7684Intel x86\u7cfb\u5217\u5c31\u662f\u5c0f\u7aef\u5e8f\u3002 string.pack (fmt, v1, v2, \u00b7\u00b7\u00b7) \u8fd4\u56de\u4e00\u4e2a\u6253\u5305\u4e86\uff08\u5373\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5e8f\u5217\u5316\uff09 v1, v2 \u7b49\u503c\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32 fmt \u4e3a\u6253\u5305\u683c\u5f0f string.unpack (fmt, s [, pos]) \u8fd4\u56de\u4ee5\u683c\u5f0f fmt \u6253\u5305\u5728\u5b57\u7b26\u4e32 s \uff08\u53c2\u89c1 string.pack\uff09 \u4e2d\u7684\u503c\u3002 \u9009\u9879 pos\uff08\u9ed8\u8ba4\u4e3a 1 \uff09\u6807\u8bb0\u4e86\u4ece s \u4e2d\u54ea\u91cc\u5f00\u59cb\u8bfb\u8d77\u3002 \u8bfb\u5b8c\u6240\u6709\u7684\u503c\u540e\uff0c\u51fd\u6570\u8fd4\u56de s \u4e2d\u7b2c\u4e00\u4e2a\u672a\u8bfb\u5b57\u8282\u7684\u4f4d\u7f6e\u3002 97413c9482cb24f52682524e035f18e6d72a8e41","title":"\u4e8c\u8bfblua5.3\u53c2\u8003\u624b\u518c"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#number","text":"number \u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u4e3a\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff0c\u7a0b\u5e8f\u5458\u5927\u591a\u6570\u60c5\u51b5\u53ef\u4ee5\u5ffd\u7565\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u5dee\u5f02(lua\u5185)\uff0c\u56e0\u4e3alua\u5185\u90e8\u4f1a\u81ea\u52a8\u6839\u636e\u4f7f\u7528\u573a\u666f\u8fdb\u884c\u8f6c\u6362\u3002 \u4f4d\u64cd\u4f5c: \u603b\u662f\u5c06\u6d6e\u70b9\u6570\u8f6c\u6362\u6210\u6574\u6570 \u4e58\u65b9\u548c\u6d6e\u70b9\u9664\u6cd5\u603b\u662f\u5c06\u6574\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\u3002 \u6570\u5b66\u64cd\u4f5c\u82e5\u9488\u5bf9\u6df7\u5408\u64cd\u4f5c\u6570 \uff08\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff09\u5c06\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570 \u5f53\u628a\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u65f6\uff0c \u82e5\u6574\u6570\u503c\u6070\u597d\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u90a3\u5c31\u53d6\u90a3\u4e2a\u6d6e\u70b9\u6570\u3002 \u5426\u5219\uff0c\u8f6c\u6362\u4f1a\u53d6\u6700\u63a5\u8fd1\u7684\u8f83\u5927\u503c\u6216\u8f83\u5c0f\u503c\u6765\u8868\u793a\u8fd9\u4e2a\u6570\u3002 \u8fd9\u79cd\u8f6c\u6362\u662f\u4e0d\u4f1a\u5931\u8d25\u7684\u3002 \u5c06\u6d6e\u70b9\u6570\u8f6c\u4e3a\u6574\u6570\u7684\u8fc7\u7a0b\u4f1a\u68c0\u67e5 \u6d6e\u70b9\u6570\u80fd\u5426\u88ab\u51c6\u786e\u7684\u8868\u8fbe\u4e3a\u4e00\u4e2a\u6574\u6570 \uff08\u5373\uff0c\u6d6e\u70b9\u6570\u662f\u4e00\u4e2a\u6574\u6570\u503c\u4e14\u5728\u6574\u6570\u53ef\u4ee5\u8868\u8fbe\u7684\u533a\u95f4\uff09\u3002 \u5982\u679c\u53ef\u4ee5\uff0c\u7ed3\u679c\u5c31\u662f\u90a3\u4e2a\u6570\uff0c\u5426\u5219\u8f6c\u6362\u5931\u8d25\u3002","title":"number"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#head","text":"lua5.3\u4ee5\u540e\uff0c\u8981\u6c42\u5f00\u53d1\u8005\u66f4\u52a0\u663e\u5f0f\u5730\u533a\u5206float\u548cint\uff0c\u5982string.format(\"%d\", 1.2)\u4f1a\u51fa\u73b0\u62a5\u9519\uff0c\u800c\u4e0d\u662ffloat-int\u81ea\u52a8\u8f6c\u6362\u4e3a1\uff1b \u5728string.format\u4e2d\uff0c\u6574\u6570\u53ef\u4ee5\u81ea\u52a8\u8f6c\u4e3a\u6d6e\u70b9\u6570\uff0c\u4f46\u662f\u6d6e\u70b9\u6570\u4e0d\u80fd\u81ea\u52a8\u8f6c\u4e3a\u6574\u6570\uff0c\u4f1a\u6709\u62a5\u9519\u3002","title":"&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#97413c9482cb24f52682524e035f18e6d72a8e41","text":"","title":"&gt;&gt;&gt;&gt;&gt;&gt;&gt; 97413c9482cb24f52682524e035f18e6d72a8e41"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#table","text":"table \u662f\u4e00\u4e2a\u5173\u8054\u6570\u7ec4\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u4e0d\u4ec5\u4ec5\u4ee5\u6570\u5b57\u505a\u7d22\u5f15\uff0c\u9664\u4e86 nil \u548c NaN \u4e4b\u5916\u7684\u6240\u6709 Lua \u503c \u90fd\u53ef\u4ee5\u505a\u7d22\u5f15\u3002 \u8868\u662f Lua \u4e2d\u552f\u4e00\u7684\u6570\u636e\u7ed3\u6784\uff0c \u5b83\u53ef\u88ab\u7528\u4e8e\u8868\u793a\u666e\u901a\u6570\u7ec4\u3001\u5e8f\u5217\u3001\u7b26\u53f7\u8868\u3001\u96c6\u5408\u3001\u8bb0\u5f55\u3001\u56fe\u3001\u6811\u7b49\u7b49\u3002 \u5bf9\u4e8e\u8bb0\u5f55\uff0cLua \u4f7f\u7528\u57df\u540d\u4f5c\u4e3a\u7d22\u5f15\u3002 \u8bed\u8a00\u63d0\u4f9b\u4e86 a.name \u8fd9\u6837\u7684\u8bed\u6cd5\u7cd6\u6765\u66ff\u4ee3 a[\"name\"] \u8fd9\u79cd\u5199\u6cd5\u4ee5\u65b9\u4fbf\u8bb0\u5f55\u8fd9\u79cd\u7ed3\u6784\u7684\u4f7f\u7528\u3002 \u6211\u4eec\u4f7f\u7528 \u5e8f\u5217 \u8fd9\u4e2a\u672f\u8bed\u6765\u8868\u793a\u4e00\u4e2a\u7528 {1..n} \u7684\u6b63\u6574\u6570\u96c6\u505a\u7d22\u5f15\u7684\u8868\u3002 \u8fd9\u91cc\u7684\u975e\u8d1f\u6574\u6570 n \u88ab\u79f0\u4e3a\u8be5\u5e8f\u5217\u7684\u957f\u5ea6, \u8868 t \u7684\u957f\u5ea6\u53ea\u5728\u8868\u662f\u4e00\u4e2a \u5e8f\u5217 \u65f6\u6709\u5b9a\u4e49, \u5e8f\u5217\u6307\u8868\u7684\u6b63\u6570\u952e\u96c6\u7b49\u4e8e {1..n} \uff0c \u5176\u4e2d n \u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cn \u662f\u8868\u7684\u957f\u5ea6\u3002 \u6ce8\u610f\u8fd9\u6837\u7684\u8868 { 10 , 20 , nil , 40 } \u4e0d\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u56e0\u4e3a\u5b83\u6709\u952e 4 \u5374\u6ca1\u6709\u952e 3\u3002 \uff08\u56e0\u6b64\uff0c\u8be5\u8868\u7684\u6b63\u6574\u6570\u952e\u96c6\u4e0d\u7b49\u4e8e {1..n} \u96c6\u5408\uff0c\u6545\u800c\u5c31\u4e0d\u5b58\u5728 n\u3002\uff09 \u7d22\u5f15\u4e00\u5f20\u8868\u7684\u539f\u5219\u9075\u5faa\u8bed\u8a00\u4e2d\u7684\u76f4\u63a5\u6bd4\u8f83\u89c4\u5219\u3002 \u5f53\u4e14\u4ec5\u5f53 i \u4e0e j\u76f4\u63a5\u6bd4\u8f83\u76f8\u7b49\u65f6 \uff08\u5373\u4e0d\u901a\u8fc7\u5143\u65b9\u6cd5\u7684\u6bd4\u8f83\uff09\uff0c \u8868\u8fbe\u5f0f a[i] \u4e0e a[j] \u8868\u793a\u4e86\u8868\u4e2d\u76f8\u540c\u7684\u5143\u7d20\u3002 \u7279\u522b\u6307\u51fa\uff1a\u4e00\u4e2a\u53ef\u4ee5\u5b8c\u5168\u8868\u793a\u4e3a\u6574\u6570\u7684\u6d6e\u70b9\u6570\u548c\u5bf9\u5e94\u7684\u6574\u6570\u76f8\u7b49 \uff08\u4f8b\u5982\uff1a1.0 == 1\uff09\u3002 \u4e3a\u4e86\u6d88\u9664\u6b67\u4e49\uff0c\u5f53\u4e00\u4e2a\u53ef\u4ee5\u5b8c\u5168\u8868\u793a\u4e3a\u6574\u6570\u7684\u6d6e\u70b9\u6570\u505a\u4e3a\u952e\u503c\u65f6\uff0c \u90fd\u4f1a\u88ab\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6574\u6570\u50a8\u5b58\u3002 \u4f8b\u5982\uff0c\u5f53\u4f60\u5199 a[2.0] = true \u65f6\uff0c \u5b9e\u9645\u88ab\u63d2\u5165\u8868\u4e2d\u7684\u952e\u662f\u6574\u6570 2 \u3002","title":"table"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_env-_g","text":"lua\u8bed\u8a00\u628a\u6240\u6709\u7684\u4ee3\u7801\u90fd\u5f53\u4f5c\u533f\u540d\u51fd\u6570\u5904\u7406\uff0c\u4f8b\u5982 local z = 10 x = y + 10 \u5b9e\u9645\u4e0a\u4f1a\u88ab\u7f16\u8bd1\u4e3a local _ENV = smoe value ( \u4e5f\u5c31\u662f\u9884\u5b9a\u4e49\u4e0a\u503c\uff0c\u5047\u8bbe\u8be5\u503c\u5b58\u5728 ) return function (...) local z = 10 _ENV . x = _ENV . y + z end <<<<<<< HEAD _ENV\u4e0d\u662f\u5168\u5c40\u73af\u5883\uff0c\u5b83\u6307\u5411\u7684\u662f\u5f53\u524d\u73af\u5883\uff0c\u800cLua\u53c8\u786e\u4fdd\u6bcf\u4e2achunk\uff08\u53ef\u4ee5\u662f\u4e00\u53e5\u4ee3\u7801\uff0c\u51fd\u6570\u4f53\uff0cdo ...end\u4e4b\u95f4\u7684\u5185\u5bb9\u7b49\uff09\u90fd\u4ee5_ENV\u5f00\u5934\uff0c\u6240\u4ee5\u6bcf\u4e2achunk\u4e2d\u90fd\u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u73af\u5883\u3002 \u5728\u6bcf\u4e2a\u73af\u5883\u4e2d\u5bf9\u975e\u5c40\u90e8a\u7684\u6240\u6709\u8bbf\u95ee\u90fd\u8f6c\u6362\u4e3a_ENV.a\u3002\u8fd9\u79cd\u65b9\u5f0f\u66f4\u5b89\u5168\uff0c\u5e76\u4e14\u66f4\u52a0\u7075\u6d3b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5c40\u90e8_ENV\u53d8\u91cf\u6765\u4e3a\u5355\u4e2a\u4ee3\u7801\u5757\u7684\u521b\u5efa\u5355\u72ec\u7684\u73af\u5883\uff0c\u4ece\u800c\u964d\u4f4e\u5757\u4e0e\u5757\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\u3002 lua\u8bed\u8a00\u5728\u7f16\u8bd1\u8fd0\u884c\u65f6\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u73af\u5883\uff08\u4e5f\u79f0\u4e3a\u201c\u5168\u5c40\u73af\u5883\u201d\uff0c_G\u8868\uff09\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u6ce8\u518c\u8868\u4e2d\u3002 \u9664\u975e\u60a8\u5c06\u81ea\u5b9a\u4e49\u73af\u5883\uff08\u4e5f\u5c31\u662f\u81ea\u5b9a\u4e49\u7684_ENV\uff09\u4f20\u9012\u7ed9load\u6216loadfile\uff0c\u5426\u5219\u6b64\u9ed8\u8ba4\u73af\u5883\u5c06\u7528\u4f5c\u6240\u6709\u5757\u7684_ENV. lua_pushglobaltable\u8fd8\u76f4\u63a5\u4ece\u6ce8\u518c\u8868\u4e2d\u68c0\u7d22\u6b64\u5168\u5c40\u73af\u5883\uff0c\u56e0\u6b64\u6240\u6709C\u6a21\u5757\u90fd\u4f1a\u81ea\u52a8\u4f7f\u7528\u5b83\u6765\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6807\u51c6\u7684C\u6a21\u5757\u5df2\u52a0\u8f7d\uff0c\u5219\u6b64\u9ed8\u8ba4\u7684\u201c\u5168\u5c40\u73af\u5883\u201d\u5177\u6709\u4e00\u4e2a\u540d\u4e3a_G\u7684\u8868\u5b57\u6bb5\uff0c\u8be5\u8868\u5b57\u6bb5\u5f15\u7528\u56de\u5168\u5c40\u73af\u5883\u3002","title":"_ENV _G"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#lua_g_g_env_env_env_g-_g_g","text":"_ENV\u4e0d\u662f\u5168\u5c40\u73af\u5883\uff0c\u5b83\u6307\u5411\u7684\u662f\u5f53\u524d\u73af\u5883\uff0c\u800cLua\u53c8\u786e\u4fdd\u6bcf\u4e2achunk\uff08\u53ef\u4ee5\u662f\u4e00\u53e5\u4ee3\u7801\uff0c\u51fd\u6570\u4f53\uff0cdo ...end\u4e4b\u95f4\u7684\u5185\u5bb9\u7b49\uff09\u90fd\u4ee5_ENV\u5f00\u5934\uff0c\u6240\u4ee5\u6bcf\u4e2achunk\u4e2d\u90fd\u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u73af\u5883\u3002 \u5728\u6bcf\u4e2a\u73af\u5883\u4e2d\u5bf9\u975e\u5c40\u90e8a\u7684\u6240\u6709\u8bbf\u95ee\u90fd\u8f6c\u6362\u4e3a_ENV.a\u3002\u8fd9\u79cd\u65b9\u5f0f\u66f4\u5b89\u5168\uff0c\u5e76\u4e14\u66f4\u52a0\u7075\u6d3b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5c40\u90e8_ENV\u53d8\u91cf\u6765\u4e3a\u5355\u4e2a\u4ee3\u7801\u5757\u7684\u521b\u5efa\u5355\u72ec\u7684\u73af\u5883\uff0c\u4ece\u800c\u964d\u4f4e\u5757\u4e0e\u5757\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\u3002 lua\u8bed\u8a00\u5728\u7f16\u8bd1\u8fd0\u884c\u65f6\u9996\u5148\u4f1a\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u73af\u5883\uff08\u4e5f\u79f0\u4e3a\u201c\u5168\u5c40\u73af\u5883\u201d\uff0c_G\u8868\uff09\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u6ce8\u518c\u8868\u4e2d\u3002 \u9664\u975e\u60a8\u5c06\u81ea\u5b9a\u4e49\u73af\u5883\uff08\u4e5f\u5c31\u662f\u81ea\u5b9a\u4e49\u7684_ENV\uff09\u4f20\u9012\u7ed9load\u6216loadfile\uff0c\u5426\u5219\u6b64\u9ed8\u8ba4\u73af\u5883\u5c06\u7528\u4f5c\u6240\u6709\u5757\u7684_ENV. lua_pushglobaltable\u8fd8\u76f4\u63a5\u4ece\u6ce8\u518c\u8868\u4e2d\u68c0\u7d22\u6b64\u5168\u5c40\u73af\u5883\uff0c\u56e0\u6b64\u6240\u6709C\u6a21\u5757\u90fd\u4f1a\u81ea\u52a8\u4f7f\u7528\u5b83\u6765\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf\u3002\u5e76\u4e14\uff0c\u5982\u679c\u6807\u51c6\u7684C\u6a21\u5757\u5df2\u52a0\u8f7d\uff0c\u5219\u6b64\u9ed8\u8ba4\u7684\u201c\u5168\u5c40\u73af\u5883\u201d\u5177\u6709\u4e00\u4e2a\u540d\u4e3a_G\u7684\u8868\u5b57\u6bb5\uff0c\u8be5\u8868\u5b57\u6bb5\u5f15\u7528\u56de\u5168\u5c40\u73af\u5883\u3002 \u7b80\u5355\u7684\u8bf4\u5c31\u662f\u9996\u5148lua\u4f1a\u6709\u4e00\u4e2a_G\u8868,\u82e5\u6ca1\u6709\u4eba\u4e3a\u7684\u8bbe\u7f6e\uff0c\u5219\u8fd9\u4e2a_G\u8868\u76f4\u63a5\u5c31\u88ab\u7528\u4f5c\u7684_ENV\uff08\u800c\u4e14\u6240\u6709\u7684\u5757\u90fd\u5c06\u4ee5\u6b64_ENV\u5f00\u5934\uff09\uff0c\u7136\u540e_ENV\u7684\u91cc\u5b58\u50a8\u7740\u4e00\u4e2a\u952e\u503c\u5bf9_G =_G\uff08\u5168\u5c40\u73af\u5883\u8868\uff09\u3002\u4efb\u4f55\u5bf9\u8be5\u73af\u5883\u7684\u66f4\u6539\u4e5f\u5c06\u76f4\u63a5\u4f5c\u7528\u5230_G\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u521d\u59cb\u65f6\u5f15\u7528\u7684\u540c\u4e00\u4e2a\u8868\uff0c\u7c7b\u4f3c\u4e0b\u9762 97413c9482cb24f52682524e035f18e6d72a8e41 print ( _G ) -- table: 0000021DC4BE6700 print ( _ENV . _G ) -- table: 0000021DC4BE6700 \u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u73af\u5883\uff0c\u5e76\u7ee7\u627f\u5168\u5c40\u73af\u5883\uff0c\u4f46\u4e0d\u6539\u53d8\u5168\u5c40\u73af\u5883 b = 25 _G = setmetatable ( _G ,{ __newindex = function () print ( \"can change this table\" ) end }) a = 13 local _ENV = setmetatable ({},{ __index = _G }) c = 14 print ( a , b , c ) print ( _G . a , _G . b , _G . c ) can change this table nil 25 14 nil 25 nil load (chunk [, chunkname [, mode [, env]]]) \u52a0\u8f7d\u4e00\u4e2a\u4ee3\u7801\u5757\u3002 \u5982\u679c chunk \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ee3\u7801\u5757\u6307\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002 \u5982\u679c chunk \u662f\u4e00\u4e2a\u51fd\u6570\uff0c load \u4e0d\u65ad\u5730\u8c03\u7528\u5b83\u83b7\u53d6\u4ee3\u7801\u5757\u7684\u7247\u65ad\u3002 \u6bcf\u6b21\u5bf9 chunk \u7684\u8c03\u7528\u90fd\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7d27\u7d27\u8fde\u63a5\u5728\u4e0a\u6b21\u8c03\u7528\u7684\u8fd4\u56de\u4e32\u4e4b\u540e\u3002 \u5f53\u8fd4\u56de\u7a7a\u4e32\u3001nil\u3001\u6216\u662f\u4e0d\u8fd4\u56de\u503c\u65f6\uff0c\u90fd\u8868\u793a\u4ee3\u7801\u5757\u7ed3\u675f\u3002 \u5982\u679c\u6ca1\u6709\u8bed\u6cd5\u9519\u8bef\uff0c \u5219\u4ee5\u51fd\u6570\u5f62\u5f0f\u8fd4\u56de\u7f16\u8bd1\u597d\u7684\u4ee3\u7801\u5757\uff1b \u5426\u5219\uff0c\u8fd4\u56de nil \u52a0\u4e0a\u9519\u8bef\u6d88\u606f\u3002 <<<<<<< HEAD","title":"\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u9996\u5148lua\u4f1a\u6709\u4e00\u4e2a_G\u8868,\u82e5\u6ca1\u6709\u4eba\u4e3a\u7684\u8bbe\u7f6e\uff0c\u5219\u8fd9\u4e2a_G\u8868\u76f4\u63a5\u5c31\u88ab\u7528\u4f5c\u7684_ENV\uff08\u800c\u4e14\u6240\u6709\u7684\u5757\u90fd\u5c06\u4ee5\u6b64_ENV\u5f00\u5934\uff09\uff0c\u7136\u540e_ENV\u7684\u91cc\u5b58\u50a8\u7740\u4e00\u4e2a\u952e\u503c\u5bf9_G = _G\uff08\u5168\u5c40\u73af\u5883\u8868\uff09\u3002\u4efb\u4f55\u5bf9\u8be5\u73af\u5883\u7684\u66f4\u6539\u4e5f\u5c06\u76f4\u63a5\u4f5c\u7528\u5230_G\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u521d\u59cb\u65f6\u5f15\u7528\u7684\u540c\u4e00\u4e2a\u8868\uff0c\u7c7b\u4f3c\u4e0b\u9762"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#env-nil-_env","text":"\u5982\u679c\u7ed3\u679c\u51fd\u6570\u6709\u4e0a\u503c\uff0c env \u88ab\u8bbe\u4e3a\u7b2c\u4e00\u4e2a\u4e0a\u503c\u3002 \u82e5\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u5168\u5c40\u73af\u5883\u66ff\u4ee3\u5b83\u3002 \u6240\u6709\u5176\u5b83\u4e0a\u503c\u521d\u59cb\u5316\u4e3a nil\u3002 \uff08\u5f53\u4f60\u52a0\u8f7d\u4e3b\u4ee3\u7801\u5757\u65f6\u5019\uff0c\u7ed3\u679c\u51fd\u6570\u4e00\u5b9a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e0a\u503c _ENV \u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u52a0\u8f7d\u4e00\u4e2a\u7528\u51fd\u6570\u521b\u5efa\u51fa\u6765\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5757\u65f6\uff0c\u6240\u6709\u7684\u4e0a\u503c\u90fd\u662f\u65b0\u521b\u5efa\u51fa\u6765\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\u5b83\u4eec\u4e0d\u4f1a\u548c\u522b\u7684\u4efb\u4f55\u51fd\u6570\u5171\u4eab\u3002 97413c9482cb24f52682524e035f18e6d72a8e41 chunkname \u5728\u9519\u8bef\u6d88\u606f\u548c\u8c03\u8bd5\u6d88\u606f\u4e2d\uff0c\u7528\u4e8e\u4ee3\u7801\u5757\u7684\u540d\u5b57\u3002 \u5982\u679c\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5b83\u9ed8\u8ba4\u4e3a\u5b57\u7b26\u4e32chunk \u3002 chunk \u4e0d\u662f\u5b57\u7b26\u4e32\u65f6\uff0c\u5219\u4e3a \"=(load)\" \u3002 \u5b57\u7b26\u4e32 mode \u7528\u4e8e\u63a7\u5236\u4ee3\u7801\u5757\u662f\u6587\u672c\u8fd8\u662f\u4e8c\u8fdb\u5236\uff08\u5373\u9884\u7f16\u8bd1\u4ee3\u7801\u5757\uff09\u3002 \u5b83\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32 \"b\" \uff08\u53ea\u80fd\u662f\u4e8c\u8fdb\u5236\u4ee3\u7801\u5757\uff09\uff0c \"t\" \uff08\u53ea\u80fd\u662f\u6587\u672c\u4ee3\u7801\u5757\uff09\uff0c \u6216 \"bt\" \uff08\u53ef\u4ee5\u662f\u4e8c\u8fdb\u5236\u4e5f\u53ef\u4ee5\u662f\u6587\u672c\uff09\u3002 \u9ed8\u8ba4\u503c\u4e3a \"bt\"\u3002 Lua \u4e0d\u4f1a\u5bf9\u4e8c\u8fdb\u5236\u4ee3\u7801\u5757\u505a\u5065\u58ee\u6027\u68c0\u67e5\u3002 \u6076\u610f\u6784\u9020\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5757\u6709\u53ef\u80fd\u628a\u89e3\u91ca\u5668\u5f04\u5d29\u6e83\u3002 local _env = { print = _ENV . print , a = 15 } local a = 12 local str = \"print(a)\" load ( str , \"test\" , \"t\" , _env )() \u9996\u5148\u6211\u4eec\u81ea\u5b9a\u4e49\u4e86_ENV\u73af\u5883\uff0c\u5e76\u5c06\u5176\u4f20\u7ed9\u4e86load\u51fd\u6570\uff0c\u6240\u4ee5load\u52a0\u8f7d\u8fd0\u884c\u65f6\u7684\u73af\u5883\u4e3a\u6211\u4eec\u81ea\u5b9a\u4e49\u7684_ENV\u73af\u5883\uff0c\u6240\u4ee5\u6b64\u65f6\u7ed3\u679c\u4e3a15.","title":"\u5982\u679c\u7ed3\u679c\u51fd\u6570\u6709\u4e0a\u503c\uff0c env \u88ab\u8bbe\u4e3a\u7b2c\u4e00\u4e2a\u4e0a\u503c\u3002 \u82e5\u4e0d\u63d0\u4f9b\u6b64\u53c2\u6570\uff0c\u5c06\u5168\u5c40\u73af\u5883\u66ff\u4ee3\u5b83\u3002 \u6240\u6709\u5176\u5b83\u4e0a\u503c\u521d\u59cb\u5316\u4e3a nil\u3002 \uff08\u5f53\u4f60\u52a0\u8f7d\u4e3b\u4ee3\u7801\u5757\u65f6\u5019\uff0c\u7ed3\u679c\u51fd\u6570\u4e00\u5b9a\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u4e0a\u503c _ENV \u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u52a0\u8f7d\u4e00\u4e2a\u7528\u51fd\u6570\u521b\u5efa\u51fa\u6765\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u5757\u65f6\uff0c\u6240\u6709\u7684\u4e0a\u503c\u90fd\u662f\u65b0\u521b\u5efa\u51fa\u6765\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\u5b83\u4eec\u4e0d\u4f1a\u548c\u522b\u7684\u4efb\u4f55\u51fd\u6570\u5171\u4eab\u3002"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_1","text":"lua \u4e2d\u53ea\u80fd\u6539\u53d8\u8868\u7c7b\u578b\u503c\u7684\u5143\u8868, \u82e5\u60f3\u6539\u53d8\u975e\u8868\u7c7b\u578b\u7684\u503c\u7684\u5143\u8868, \u9700\u4f7f\u7528C PAI \u5143\u8868\u51b3\u5b9a\u4e86\u4e00\u4e2a\u5bf9\u8c61\u5728\u6570\u5b66\u8fd0\u7b97\u3001\u4f4d\u8fd0\u7b97\u3001\u6bd4\u8f83\u3001\u8fde\u63a5\u3001 \u53d6\u957f\u5ea6\u3001\u8c03\u7528\u3001\u7d22\u5f15\u65f6\u7684\u884c\u4e3a\u3002 \u5143\u8868\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u5f53\u8868\u5bf9\u8c61\u6216\u7528\u6237\u6570\u636e\u5bf9\u8c61\u5728\u5783\u573e\u56de\u6536\u65f6\u8c03\u7528\u3002","title":"\u5143\u8868"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_2","text":"Lua \u91c7\u7528\u4e86\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u3002 \u8fd9\u610f\u5473\u7740\u4f60\u4e0d\u7528\u64cd\u5fc3\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u9700\u8981\u7684\u5185\u5b58\u5982\u4f55\u5206\u914d\u51fa\u6765\uff0c \u4e5f\u4e0d\u7528\u8003\u8651\u5728\u5bf9\u8c61\u4e0d\u518d\u88ab\u4f7f\u7528\u540e\u600e\u6837\u91ca\u653e\u5b83\u4eec\u6240\u5360\u7528\u7684\u5185\u5b58\u3002 Lua \u8fd0\u884c\u4e86\u4e00\u4e2a \u5783\u573e\u6536\u96c6\u5668 \u6765\u6536\u96c6\u6240\u6709 \u6b7b\u5bf9\u8c61 \uff08\u5373\u5728 Lua \u4e2d\u4e0d\u53ef\u80fd\u518d\u8bbf\u95ee\u5230\u7684\u5bf9\u8c61\uff09\u6765\u5b8c\u6210\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u4f5c\u3002 Lua \u4e2d\u6240\u6709\u7528\u5230\u7684\u5185\u5b58\uff0c\u5982\uff1a\u5b57\u7b26\u4e32\u3001\u8868\u3001\u7528\u6237\u6570\u636e\u3001\u51fd\u6570\u3001\u7ebf\u7a0b\u3001 \u5185\u90e8\u7ed3\u6784\u7b49\uff0c\u90fd\u670d\u4ece\u81ea\u52a8\u7ba1\u7406\u3002 Lua \u5b9e\u73b0\u4e86\u4e00\u4e2a\u589e\u91cf\u6807\u8bb0-\u626b\u63cf\u6536\u96c6\u5668\u3002 \u5b83\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6570\u5b57\u6765\u63a7\u5236\u5783\u573e\u6536\u96c6\u5faa\u73af\uff1a \u5783\u573e\u6536\u96c6\u5668\u95f4\u6b47\u7387 \u548c \u5783\u573e\u6536\u96c6\u5668\u6b65\u8fdb\u500d\u7387\u3002 \u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4f7f\u7528\u767e\u5206\u6570\u4e3a\u5355\u4f4d \uff08\u4f8b\u5982\uff1a\u503c 100 \u5728\u5185\u90e8\u8868\u793a 1 \uff09\u3002 \u5783\u573e\u6536\u96c6\u5668\u95f4\u6b47\u7387\u63a7\u5236\u7740\u6536\u96c6\u5668\u9700\u8981\u5728\u5f00\u542f\u65b0\u7684\u5faa\u73af\u524d\u8981\u7b49\u5f85\u591a\u4e45\u3002 \u589e\u5927\u8fd9\u4e2a\u503c\u4f1a\u51cf\u5c11\u6536\u96c6\u5668\u7684\u79ef\u6781\u6027\u3002 \u5f53\u8fd9\u4e2a\u503c\u6bd4 100 \u5c0f\u7684\u65f6\u5019\uff0c\u6536\u96c6\u5668\u5728\u5f00\u542f\u65b0\u7684\u5faa\u73af\u524d\u4e0d\u4f1a\u6709\u7b49\u5f85\u3002 \u8bbe\u7f6e\u8fd9\u4e2a\u503c\u4e3a 200 \u5c31\u4f1a\u8ba9\u6536\u96c6\u5668\u7b49\u5230\u603b\u5185\u5b58\u4f7f\u7528\u91cf\u8fbe\u5230 \u4e4b\u524d\u7684\u4e24\u500d\u65f6\u624d\u5f00\u59cb\u65b0\u7684\u5faa\u73af\u3002 \u5783\u573e\u6536\u96c6\u5668\u6b65\u8fdb\u500d\u7387\u63a7\u5236\u7740\u6536\u96c6\u5668\u8fd0\u4f5c\u901f\u5ea6\u76f8\u5bf9\u4e8e\u5185\u5b58\u5206\u914d\u901f\u5ea6\u7684\u500d\u7387\u3002 \u589e\u5927\u8fd9\u4e2a\u503c\u4e0d\u4ec5\u4f1a\u8ba9\u6536\u96c6\u5668\u66f4\u52a0\u79ef\u6781\uff0c\u8fd8\u4f1a\u589e\u52a0\u6bcf\u4e2a\u589e\u91cf\u6b65\u9aa4\u7684\u957f\u5ea6\u3002 \u4e0d\u8981\u628a\u8fd9\u4e2a\u503c\u8bbe\u5f97\u5c0f\u4e8e 100 \uff0c \u90a3\u6837\u7684\u8bdd\u6536\u96c6\u5668\u5c31\u5de5\u4f5c\u7684\u592a\u6162\u4e86\u4ee5\u81f3\u4e8e\u6c38\u8fdc\u90fd\u5e72\u4e0d\u5b8c\u4e00\u4e2a\u5faa\u73af\u3002 \u9ed8\u8ba4\u503c\u662f 200 \uff0c\u8fd9\u8868\u793a\u6536\u96c6\u5668\u4ee5\u5185\u5b58\u5206\u914d\u7684\u201c\u4e24\u500d\u201d\u901f\u5de5\u4f5c\u3002 \u5982\u679c\u4f60\u628a\u6b65\u8fdb\u500d\u7387\u8bbe\u4e3a\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\u5b57 \uff08\u6bd4\u4f60\u7684\u7a0b\u5e8f\u53ef\u80fd\u7528\u5230\u7684\u5b57\u8282\u6570\u8fd8\u5927 10% \uff09\uff0c \u6536\u96c6\u5668\u7684\u884c\u4e3a\u5c31\u50cf\u4e00\u4e2a stop-the-world \u6536\u96c6\u5668\u3002 \u63a5\u7740\u4f60\u82e5\u628a\u95f4\u6b47\u7387\u8bbe\u4e3a 200 \uff0c \u6536\u96c6\u5668\u7684\u884c\u4e3a\u5c31\u548c\u8fc7\u53bb\u7684 Lua \u7248\u672c\u4e00\u6837\u4e86\uff1a \u6bcf\u6b21 Lua \u4f7f\u7528\u7684\u5185\u5b58\u7ffb\u500d\u65f6\uff0c\u5c31\u505a\u4e00\u6b21\u5b8c\u6574\u7684\u6536\u96c6\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728 C \u4e2d\u8c03\u7528 lua_gc \u6216\u5728 Lua \u4e2d\u8c03\u7528 collectgarbage \u6765\u6539\u53d8\u8fd9\u4fe9\u6570\u5b57\u3002 \u8fd9\u4e24\u4e2a\u51fd\u6570\u4e5f\u53ef\u4ee5\u7528\u6765\u76f4\u63a5\u63a7\u5236\u6536\u96c6\u5668\uff08\u4f8b\u5982\u505c\u6b62\u5b83\u6216\u91cd\u542f\u5b83\uff09\u3002 collectgarbage ([opt [, arg]]) \u8fd9\u4e2a\u51fd\u6570\u662f\u5783\u573e\u6536\u96c6\u5668\u7684\u901a\u7528\u63a5\u53e3\u3002 \u901a\u8fc7\u53c2\u6570 opt \u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u4e0d\u540c\u7684\u529f\u80fd\uff1a \"collect\": \u505a\u4e00\u6b21\u5b8c\u6574\u7684\u5783\u573e\u6536\u96c6\u5faa\u73af\u3002 \u8fd9\u662f\u9ed8\u8ba4\u9009\u9879\u3002 \"stop\": \u505c\u6b62\u5783\u573e\u6536\u96c6\u5668\u7684\u8fd0\u884c\u3002 \u5728\u8c03\u7528\u91cd\u542f\u524d\uff0c\u6536\u96c6\u5668\u53ea\u4f1a\u56e0\u663e\u5f0f\u7684\u8c03\u7528\u8fd0\u884c\u3002 \"restart\": \u91cd\u542f\u5783\u573e\u6536\u96c6\u5668\u7684\u81ea\u52a8\u8fd0\u884c\u3002 \"count\": \u4ee5 K \u5b57\u8282\u6570\u4e3a\u5355\u4f4d\u8fd4\u56de Lua \u4f7f\u7528\u7684\u603b\u5185\u5b58\u6570\u3002 \u8fd9\u4e2a\u503c\u6709\u5c0f\u6570\u90e8\u5206\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e58\u4e0a 1024 \u5c31\u80fd\u5f97\u5230 Lua \u4f7f\u7528\u7684\u51c6\u786e\u5b57\u8282\u6570\uff08\u9664\u975e\u6ea2\u51fa\uff09\u3002 \"step\": \u5355\u6b65\u8fd0\u884c\u5783\u573e\u6536\u96c6\u5668\u3002 \u6b65\u957f\u201c\u5927\u5c0f\u201d\u7531 arg \u63a7\u5236\u3002 \u4f20\u5165 0 \u65f6\uff0c\u6536\u96c6\u5668\u6b65\u8fdb\uff08\u4e0d\u53ef\u5206\u5272\u7684\uff09\u4e00\u6b65\u3002 \u4f20\u5165\u975e 0 \u503c\uff0c \u6536\u96c6\u5668\u6536\u96c6\u76f8\u5f53\u4e8e Lua \u5206\u914d\u8fd9\u4e9b\u591a\uff08K \u5b57\u8282\uff09\u5185\u5b58\u7684\u5de5\u4f5c\u3002 \u5982\u679c\u6536\u96c6\u5668\u7ed3\u675f\u4e00\u4e2a\u5faa\u73af\u5c06\u8fd4\u56de true \u3002 \"setpause\": \u5c06 arg \u8bbe\u4e3a\u6536\u96c6\u5668\u7684 \u95f4\u6b47\u7387 \uff08\u53c2\u89c1 \u00a72.5\uff09\u3002 \u8fd4\u56de \u95f4\u6b47\u7387 \u7684\u524d\u4e00\u4e2a\u503c\u3002 \"setstepmul\": \u5c06 arg \u8bbe\u4e3a\u6536\u96c6\u5668\u7684 \u6b65\u8fdb\u500d\u7387 \uff08\u53c2\u89c1 \u00a72.5\uff09\u3002 \u8fd4\u56de \u6b65\u8fdb\u500d\u7387 \u7684\u524d\u4e00\u4e2a\u503c\u3002 \"isrunning\": \u8fd4\u56de\u8868\u793a\u6536\u96c6\u5668\u662f\u5426\u5728\u5de5\u4f5c\u7684\u5e03\u5c14\u503c \uff08\u5373\u672a\u88ab\u505c\u6b62\uff09\u3002","title":"\u5783\u573e\u6536\u96c6"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_3","text":"\u53ef\u4ee5\u4e3a\u8868\u8bbe\u5b9a\u5783\u573e\u6536\u96c6\u7684\u5143\u65b9\u6cd5, \u5bf9\u4e8e\u5b8c\u5168\u7528\u6237\u6570\u636e\u5219\u9700\u8981\u4f7f\u7528 C API, \u5143\u8868 \u4e4b\u524d\u4e5f\u8bf4\u8fc7\u4e86; \u8be5\u5143\u65b9\u6cd5\u88ab\u79f0\u4e3a\u7ec8\u7ed3\u5668, \u7ec8\u7ed3\u5668\u53ef\u4ee5\u914d\u5408 Lua \u7684\u5783\u573e\u6536\u96c6\u5668\u505a\u4e00\u4e9b\u989d\u5916\u7684\u8d44\u6e90\u7ba1\u7406\u5de5\u4f5c \uff08\u4f8b\u5982\u5173\u95ed\u6587\u4ef6\u3001\u7f51\u7edc\u6216\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u6216\u662f\u91ca\u653e\u4e00\u4e9b\u4f60\u81ea\u5df1\u7684\u5185\u5b58\uff09 \u8981\u60f3\u8ba9\u4e00\u4e2a\u5bf9\u8c61\u5728\u6536\u96c6\u8fc7\u7a0b\u4e2d\u8fdb\u5165\u7ec8\u7ed3\u6d41\u7a0b, \u4f60\u5fc5\u987b\u6807\u8bb0\u5b83\u9700\u8981\u89e6\u53d1\u7ec8\u7ed3\u5668; \u5f53\u4f60\u4e3a\u8fd9\u4e2a\u5bf9\u8c61\u8bbe\u7f6e\u5143\u8868\u65f6, \u82e5\u6b64\u523b\u8fd9\u5f20\u5143\u8868\u4e2d\u7528\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\"__gc\"\u4e3a\u7d22\u5f15\u7684\u57df, \u90a3\u4e48\u5c31\u6807\u8bb0\u4e86\u8fd9\u4e2a\u5bf9\u8c61\u9700\u8981\u89e6\u53d1\u7ec8\u7ed3\u5668; \u6ce8\u610f: \u5982\u679c\u4f60\u7ed9\u5bf9\u8c61\u8bbe\u7f6e\u5143\u8868\u65f6,\u8fd9\u4e2a\u5143\u8868\u6ca1\u6709__gc \u57df, \u4e4b\u540e\u518d\u7ed9\u5143\u8868\u52a0\u4e0a__gc \u57df, \u5219\u6807\u8bb0\u5931\u8d25; \u4e00\u65e6\u5bf9\u8c61\u88ab\u6807\u8bb0, __gc \u57df\u4e4b\u540e\u662f\u53ef\u4ee5\u4fee\u6539\u7684 -- \u6210\u529f\u6807\u8bb0\u5bf9\u8c61 local function test1 ( ... ) local obj = setmetatable ({}, { __gc = function () print ( '__gc \u88ab\u8c03\u7528, \u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5' ) end }) obj . a = 1 obj . b = 2 print ( obj . a ) print ( obj . b ) end --[[ \u8f93\u51fa 1 2 __gc \u88ab\u8c03\u7528, \u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5 ]] -- \u672a\u80fd\u6210\u529f\u6807\u8bb0\u5bf9\u8c61 local function test2 ( ... ) local metatable = {} local obj = setmetatable ({}, metatable ) metatable . __gc = function () print ( '__gc \u88ab\u8c03\u7528, \u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5' ) end obj . a = 1 obj . b = 2 print ( obj . a ) print ( obj . b ) end --[[ \u8f93\u51fa 1 2 ]] -- \u672a\u80fd\u6210\u529f\u6807\u8bb0\u5bf9\u8c61\u540e\u4fee\u6539__gc\u57df local function test3 ( ... ) local metatable = { __gc = function () print ( '__gc \u88ab\u8c03\u7528, \u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5' ) end } local obj = setmetatable ({}, metatable ) metatable . __gc = function () print ( '__gc \u88ab\u8c03\u7528, \u4fee\u6539__gc\u57df' ) end obj . a = 1 obj . b = 2 print ( obj . a ) print ( obj . b ) end --[[ \u8f93\u51fa 1 2 __gc \u88ab\u8c03\u7528, \u4fee\u6539__gc\u57df ]] \u5f53\u4e00\u4e2a\u88ab\u6807\u8bb0\u7684\u5bf9\u8c61\u6210\u4e3a\u4e86\u5783\u573e\u540e\uff0c\u5783\u573e\u6536\u96c6\u5668\u5e76\u4e0d\u4f1a\u7acb\u523b\u56de\u6536\u5b83\u3002 \u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0cLua \u4f1a\u5c06\u5176\u7f6e\u5165\u4e00\u4e2a\u94fe\u8868\u3002 \u5728\u6536\u96c6\u5b8c\u6210\u540e\uff0cLua \u5c06\u904d\u5386\u8fd9\u4e2a\u94fe\u8868\u3002 Lua \u4f1a\u68c0\u67e5\u6bcf\u4e2a\u94fe\u8868\u4e2d\u7684\u5bf9\u8c61\u7684 __gc \u5143\u65b9\u6cd5\uff1a\u5982\u679c\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4ee5\u5bf9\u8c61\u4e3a\u552f\u4e00\u53c2\u6570\u8c03\u7528\u5b83\uff1b \u5426\u5219\u76f4\u63a5\u5ffd\u7565\u5b83\u3002 \u5728\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u5faa\u73af\u7684\u6700\u540e\u9636\u6bb5\uff0c\u672c\u6b21\u5faa\u73af\u4e2d\u68c0\u6d4b\u5230\u9700\u8981\u88ab\u56de\u6536\u7684\u5bf9\u8c61\uff0c\u7ec8\u7ed3\u5668\u7684\u89e6\u53d1\u987a\u5e8f\u5c06\u548c\u6807\u8bb0\u5faa\u5e8f\u76f8\u53cd\uff0c\u7b2c\u4e00\u4e2a\u8c03\u7528\u7684\u7ec8\u7ed3\u5668\u4e3a\u6700\u540e\u4e00\u4e2a\u88ab\u6807\u8bb0\u7684\u5bf9\u8c61\u643a\u5e26\u7684\u90a3\u4e2a; \u6bcf\u4e2a\u7ec8\u7ed3\u5668\u7684\u8fd0\u884c\u53ef\u80fd\u53d1\u751f\u5728\u6267\u884c\u4ee3\u7801\u7684\u4efb\u610f\u65f6\u523b\u3002 \u7531\u4e8e\u88ab\u56de\u6536\u7684\u5bf9\u8c61\u8fd8\u9700\u8981\u88ab\u7ec8\u7ed3\u5668\u4f7f\u7528\uff0c \u8be5\u5bf9\u8c61\uff08\u4ee5\u53ca\u4ec5\u80fd\u901a\u8fc7\u5b83\u8bbf\u95ee\u5230\u7684\u5176\u5b83\u5bf9\u8c61\uff09\u4e00\u5b9a\u4f1a\u88ab Lua \u590d\u6d3b\u3002 \u901a\u5e38\uff0c\u590d\u6d3b\u662f\u77ed\u6682\u7684\uff0c\u5bf9\u8c61\u6240\u5c5e\u5185\u5b58\u4f1a\u5728\u4e0b\u4e00\u4e2a\u5783\u573e\u6536\u96c6\u5faa\u73af\u91ca\u653e\u3002 \u7136\u540e\uff0c\u82e5\u7ec8\u7ed3\u5668\u53c8\u5c06\u5bf9\u8c61\u4fdd\u5b58\u53bb\u4e00\u4e9b\u5168\u5c40\u7684\u5730\u65b9 \uff08\u4f8b\u5982\uff1a\u653e\u5728\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u91cc\uff09\uff0c\u8fd9\u6b21\u590d\u6d3b\u5c31\u6301\u7eed\u751f\u6548\u4e86\u3002 \u6b64\u5916\uff0c\u5982\u679c\u5728\u7ec8\u7ed3\u5668\u4e2d\u5bf9\u4e00\u4e2a\u6b63\u8fdb\u5165\u7ec8\u7ed3\u6d41\u7a0b\u7684\u5bf9\u8c61\u518d\u6b21\u505a\u4e00\u6b21\u6807\u8bb0\u8ba9\u5b83\u89e6\u53d1\u7ec8\u7ed3\u5668\uff0c \u53ea\u8981\u8fd9\u4e2a\u5bf9\u8c61\u5728\u4e0b\u4e2a\u5faa\u73af\u4e2d\u4f9d\u65e7\u4e0d\u53ef\u8fbe\uff0c\u5b83\u7684\u7ec8\u7ed3\u51fd\u6570\u8fd8\u4f1a\u518d\u8c03\u7528\u4e00\u6b21\u3002 \u65e0\u8bba\u662f\u54ea\u79cd\u60c5\u51b5\uff0c \u5bf9\u8c61\u6240\u5c5e\u5185\u5b58\u4ec5\u5728\u5783\u573e\u6536\u96c6\u5faa\u73af\u4e2d\u8be5\u5bf9\u8c61\u4e0d\u53ef\u8fbe\u4e14 \u6ca1\u6709\u88ab\u6807\u8bb0\u6210\u9700\u8981\u89e6\u53d1\u7ec8\u7ed3\u5668\u624d\u4f1a\u88ab\u91ca\u653e\u3002 \u5f53\u4f60\u5173\u95ed\u4e00\u4e2a\u72b6\u6001\u673a\uff0cLua \u5c06\u8c03\u7528\u6240\u6709\u88ab\u6807\u8bb0\u4e86\u9700\u8981\u89e6\u53d1\u7ec8\u7ed3\u5668\u5bf9\u8c61\u7684\u7ec8\u7ed3\u8fc7\u7a0b\uff0c \u5176\u6b21\u5e8f\u4e3a\u6807\u8bb0\u6b21\u5e8f\u7684\u9006\u5e8f\u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u7ec8\u7ed3\u5668\u518d\u6b21\u6807\u8bb0\u5bf9\u8c61\u7684\u884c\u4e3a\u90fd\u4e0d\u4f1a\u751f\u6548\u3002","title":"\u5783\u573e\u6536\u96c6\u5143\u65b9\u6cd5"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_4","text":"\u5f31\u8868\u662f\u4e00\u4e2a\u8868\u4e14\u62e5\u6709metatable\u5143\u8868\uff0c\u5e76\u5728metatable\u4e2d\u5b9a\u4e49\u4e86__mode\u5b57\u6bb5\u3002 \u4e00\u5f20\u5f31\u8868\u53ef\u4ee5\u6709\u5f31\u952e\u6216\u662f\u5f31\u503c\uff0c\u4e5f\u53ef\u4ee5\u952e\u503c\u90fd\u662f\u5f31\u5f15\u7528\u3002 \u542b\u6709\u5f31\u503c\u7684\u8868\u5141\u8bb8\u6536\u96c6\u5668\u56de\u6536\u5b83\u7684\u503c\uff0c\u4f46\u4f1a\u963b\u6b62\u6536\u96c6\u5668\u56de\u6536\u5b83\u7684\u952e\u3002 \u82e5\u4e00\u5f20\u8868\u7684\u952e\u503c\u5747\u4e3a\u5f31\u5f15\u7528\uff0c \u90a3\u4e48\u6536\u96c6\u5668\u53ef\u4ee5\u56de\u6536\u5176\u4e2d\u7684\u4efb\u610f\u952e\u548c\u503c\u3002 \u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u952e\u6216\u503c\u7684\u4efb\u610f\u4e00\u9879\u88ab\u56de\u6536\uff0c \u76f8\u5173\u8054\u7684\u952e\u503c\u5bf9\u90fd\u4f1a\u4ece\u8868\u4e2d\u79fb\u9664\u3002 \u4e00\u5f20\u8868\u7684\u5143\u8868\u4e2d\u7684 __mode \u57df\u63a7\u5236\u7740\u8fd9\u5f20\u8868\u7684\u5f31\u5c5e\u6027\u3002 \u5f53 __mode \u57df\u662f\u4e00\u4e2a\u5305\u542b\u5b57\u7b26 'k' \u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd9\u5f20\u8868\u7684\u6240\u6709\u952e\u7686\u4e3a\u5f31\u5f15\u7528\u3002 \u5f53 __mode \u57df\u662f\u4e00\u4e2a\u5305\u542b\u5b57\u7b26 'v' \u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u8fd9\u5f20\u8868\u7684\u6240\u6709\u503c\u7686\u4e3a\u5f31\u5f15\u7528\u3002 \u5f31\u8868\u4e2d\u7684\u5f15\u7528\u662f\u5f31\u5f15\u7528\uff0c\u5f31\u5f15\u7528\u4e0d\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u5f15\u7528\u8ba1\u6570\u53d8\u5316\u3002\u6362\u8a00\u4e4b\uff0c\u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u53ea\u6709\u5f31\u5f15\u7528\u6307\u5411\u5b83\uff0c\u90a3\u4e48\u5783\u573e\u6536\u96c6\u5668\u4f1a\u81ea\u52a8\u56de\u6536\u8be5\u5bf9\u8c61\u6240\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u4e0b\u9762\u662f\u6ca1\u6709\u4f7f\u7528\u5f31\u8868\u7684\u4f8b\u5b50: local tbl = {} local key = { count = 100 } tbl [ key ] = 1 key = nil print ( tbl [ key ]) -- nil -- \u5f3a\u5236\u6267\u884c\u5783\u573e\u56de\u6536 collectgarbage ( \"collect\" ) for k , v in pairs ( tbl ) do print ( k , v , k . count ) -- table: 00000000001a9b70 1 100 end \u5f53\u628a\u5bf9\u8c61\u653e\u5165\u8868\u4e2d\u65f6\u5c31\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5f15\u7528\uff0c\u5373\u4f7f\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u5bf9\u8868\u4e2d\u7684\u5143\u7d20\u6709\u4efb\u4f55\u5f15\u7528\uff0c\u5783\u573e\u6536\u96c6\u5668\u4e5f\u4e0d\u4f1a\u56de\u6536\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u4f60\u53ea\u80fd\u9009\u62e9\u624b\u52a8\u91ca\u653e\u8868\u5143\u7d20\u6216\u662f\u5c06\u5176\u5e38\u9a7b\u5185\u5b58\u3002 \u4e0b\u9762\u662f\u4f7f\u7528\u4e86\u5f31\u8868: local tbl = setmetatable ({}, { __mode = 'k' }) local key = { count = 100 } tbl [ key ] = 1 key = nil print ( tbl [ key ]) -- nil -- \u5f3a\u5236\u6267\u884c\u5783\u573e\u56de\u6536 collectgarbage ( \"collect\" ) for k , v in pairs ( tbl ) do print ( k , v , k . count ) end \u53ea\u8f93\u51fa\u4e00\u4e2anil\uff0c\u4e3a print(tbl[key]) -- nil \u8f93\u51fa\uff0c\u5f3a\u5236\u5783\u573e\u56de\u6536\u4e4b\u540e\uff0ckey \u8868\u88ab\u56de\u6536\uff0ctbl\u8868\u4e2d\u7684key:1 \u88ab\u79fb\u9664\uff0cpairs \u5c06\u904d\u5386\u7a7a\u8868\uff0c\u5219\u6ca1\u6709\u8f93\u51fa\u3002 \u5e94\u7528\u6848\u4f8b \u4f7f\u7528\u201c\u7a7a\u95f4\u6362\u65f6\u95f4\u201d\u662f\u4e00\u79cd\u901a\u7528\u7684\u7a0b\u5e8f\u8fd0\u884c\u6548\u7387\u4f18\u5316\u624b\u6bb5\uff0c\u4f8b\u5982\u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u7684\u670d\u52a1\u5668\uff0c\u5b83\u63a5\u6536\u5230\u7684\u8bf7\u6c42\u4e2d\u5305\u542bLua\u4ee3\u7801\uff0c\u6bcf\u5f53\u6536\u5230\u8bf7\u6c42\u540e\u90fd\u4f1a\u8c03\u7528Lua\u7684 loadstring \u51fd\u6570\u6765\u52a8\u6001\u89e3\u6790\u8bf7\u6c42\u4e2d\u7684Lua\u4ee3\u7801\uff0c\u5982\u679c\u8fd9\u79cd\u64cd\u4f5c\u8fc7\u4e8e\u9891\u7e41\uff0c\u4f1a\u76f4\u63a5\u5bfc\u81f4\u670d\u52a1\u5668\u7684\u6267\u884c\u6548\u7387\u4e0b\u964d\u3002 \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ef\u4ee5\u5c06\u6bcf\u6b21\u89e3\u6790\u7684\u7ed3\u679c\u7f13\u5b58\u5230\u4e00\u4e2atable\u4e2d\uff0c\u4e0b\u6b21\u5982\u679c\u63a5\u6536\u5230\u76f8\u540c\u7684Lua\u4ee3\u7801\u5219\u65e0\u9700\u8c03\u7528 loadstring \u6765\u52a8\u6001\u89e3\u6790\uff0c\u800c\u662f\u76f4\u63a5\u4ecetable\u4e2d\u83b7\u53d6\u5e76\u76f4\u63a5\u6267\u884c\u5373\u53ef\u3002\u8fd9\u6837\uff0c\u5728\u6709\u5927\u91cf\u91cd\u590dLua\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u6781\u5927\u5730\u63d0\u9ad8\u670d\u52a1\u5668\u7684\u6267\u884c\u6548\u7387\u3002\u53cd\u4e4b\uff0c\u82e5\u6709\u76f8\u5f53\u4e00\u90e8\u5206\u7684Lua\u4ee3\u7801\u53ea\u662f\u51fa\u73b0\u4e00\u6b21\uff0c\u4f7f\u7528\u8fd9\u79cd\u673a\u5236\u4f1a\u5bfc\u81f4\u5927\u91cf\u7684\u5185\u5b58\u8d44\u6e90\u88ab\u5360\u7528\u800c\u5f97\u4e0d\u5230\u6709\u6548\u7684\u91ca\u653e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f7f\u7528\u5f31\u8868\uff0c\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5e8f\u4e0a\u63d0\u5347\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387\uff0c\u5185\u5b58\u8d44\u6e90\u4e5f\u4f1a\u5f97\u5230\u6709\u6548\u7684\u91ca\u653e\u3002","title":"\u5f31\u8868"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#local-result-setmetatable-result-__modev-function-mem_loadstringstr-local-val-resultstr-if-valnil-then-val-assert-loadstring-str-resultstr-val-end-return-val-end-head","text":"### \u8bcd\u6cd5\u7ea6\u5b9a Lua \u8bed\u8a00\u5bf9\u5927\u5c0f\u5199\u654f\u611f\uff1a and \u662f\u4e00\u4e2a\u4fdd\u7559\u5b57\uff0c\u4f46 And \u4e0e AND \u5219\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6709\u6548\u540d\u5b57\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u7ea6\u5b9a\uff0c\u7a0b\u5e8f\u5e94\u907f\u514d\u521b\u5efa\u4ee5\u4e0b\u5212\u7ebf\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u5927\u5199\u5b57\u6bcd\u6784\u6210\u7684\u540d\u5b57 \uff08\u4f8b\u5982 \\_VERSION\uff09\u3002 \u8f6c\u4e49\u4e32 '\\z' \u4f1a\u5ffd\u7565\u5176\u540e\u7684\u4e00\u7cfb\u5217\u7a7a\u767d\u7b26\uff0c\u5305\u62ec\u6362\u884c\uff1b \u5b83\u5728\u4f60\u9700\u8981\u5bf9\u4e00\u4e2a\u5f88\u957f\u7684\u5b57\u7b26\u4e32\u5e38\u91cf\u65ad\u884c\u4e3a\u591a\u884c\u5e76\u5e0c\u671b\u5728\u6bcf\u4e2a\u65b0\u884c\u4fdd\u6301\u7f29\u8fdb\u65f6\u975e\u5e38\u6709\u7528\u3002 \u5b57\u9762\u4e32\u8fd8\u53ef\u4ee5\u7528\u4e00\u79cd \u957f\u62ec\u53f7 \u62ec\u8d77\u6765\u7684\u65b9\u5f0f\u5b9a\u4e49\u3002 \u6211\u4eec\u628a\u4e24\u4e2a\u6b63\u7684\u65b9\u62ec\u53f7\u95f4\u63d2\u5165 n \u4e2a\u7b49\u53f7\u5b9a\u4e49\u4e3a \u7b2c n \u7ea7\u5f00\u957f\u62ec\u53f7\u3002 \u5c31\u662f\u8bf4\uff0c0 \u7ea7\u5f00\u7684\u957f\u62ec\u53f7\u5199\u4f5c [[ \uff0c \u4e00\u7ea7\u5f00\u957f\u62ec\u53f7\u5199\u4f5c [=[ \uff0c \u5982\u6b64\u7b49\u7b49\u3002 \u95ed\u957f\u62ec\u53f7\u4e5f\u4f5c\u7c7b\u4f3c\u5b9a\u4e49\uff1b \u4e3e\u4e2a\u4f8b\u5b50\uff0c4 \u7ea7\u53cd\u7684\u957f\u62ec\u53f7\u5199\u4f5c ]====] \u3002 \u4e00\u4e2a \u957f\u5b57\u9762\u4e32 \u53ef\u4ee5\u7531\u4efb\u4f55\u4e00\u7ea7\u7684\u5f00\u957f\u62ec\u53f7\u5f00\u59cb\uff0c\u800c\u7531\u7b2c\u4e00\u4e2a\u78b0\u5230\u7684\u540c\u7ea7\u7684\u95ed\u957f\u62ec\u53f7\u7ed3\u675f\u3002 \u8fd9\u79cd\u65b9\u5f0f\u63cf\u8ff0\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u4e1c\u897f\uff0c\u5f53\u7136\u7279\u5b9a\u7ea7\u522b\u7684\u53cd\u957f\u62ec\u53f7\u9664\u5916\u3002 \u6574\u4e2a\u8bcd\u6cd5\u5206\u6790\u8fc7\u7a0b\u5c06\u4e0d\u53d7\u5206\u884c\u9650\u5236\uff0c\u4e0d\u5904\u7406\u4efb\u4f55\u8f6c\u4e49\u7b26\uff0c\u5e76\u4e14\u5ffd\u7565\u6389\u4efb\u4f55\u4e0d\u540c\u7ea7\u522b\u7684\u957f\u62ec\u53f7\u3002 \u5176\u4e2d\u78b0\u5230\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u6362\u884c\u4e32\uff08\u56de\u8f66\u3001\u6362\u884c\u3001\u56de\u8f66\u52a0\u6362\u884c\u3001\u6362\u884c\u52a0\u56de\u8f66\uff09\uff0c\u90fd\u4f1a\u88ab\u8f6c\u6362\u4e3a\u5355\u4e2a\u6362\u884c\u7b26\u3002 \u8bed\u53e5\u5757\u662f\u4e00\u4e2a\u8bed\u53e5\u5e8f\u5217\uff0c\u5b83\u4eec\u4f1a\u6309\u6b21\u5e8f\u6267\u884c\uff1a block ::= {stat} Lua \u652f\u6301 \u7a7a\u8bed\u53e5\uff0c \u4f60\u53ef\u4ee5\u7528\u5206\u53f7\u5206\u5272\u8bed\u53e5\uff0c\u4e5f\u53ef\u4ee5\u4ee5\u5206\u53f7\u5f00\u59cb\u4e00\u4e2a\u8bed\u53e5\u5757\uff0c \u6216\u662f\u8fde\u7740\u5199\u4e24\u4e2a\u5206\u53f7\uff1a stat ::= \u2018;\u2019 \u51fd\u6570\u8c03\u7528\u548c\u8d4b\u503c\u8bed\u53e5\u90fd\u53ef\u80fd\u4ee5\u4e00\u4e2a\u5c0f\u62ec\u53f7\u6253\u5934\uff0c \u8fd9\u53ef\u80fd\u8ba9 Lua \u7684\u8bed\u6cd5\u4ea7\u751f\u6b67\u4e49\u3002 \u6211\u4eec\u6765\u770b\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u65ad\uff1a a = b + c (print or io.write)('done') \u4ece\u8bed\u6cd5\u4e0a\u8bf4\uff0c\u53ef\u80fd\u6709\u4e24\u79cd\u89e3\u91ca\u65b9\u5f0f\uff1a a = b + c(print or io.write)('done') a = b + c; (print or io.write)('done') \u5f53\u524d\u7684\u89e3\u6790\u5668\u603b\u662f\u7528\u7b2c\u4e00\u79cd\u7ed3\u6784\u6765\u89e3\u6790\uff0c \u5b83\u4f1a\u5c06\u5f00\u62ec\u53f7\u770b\u6210\u51fd\u6570\u8c03\u7528\u7684\u53c2\u6570\u4f20\u9012\u5f00\u59cb\u5904\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u4e8c\u4e49\u6027\uff0c \u5728\u4e00\u6761\u8bed\u53e5\u4ee5\u5c0f\u62ec\u53f7\u5f00\u5934\u65f6\uff0c\u524d\u9762\u653e\u4e00\u4e2a\u5206\u53f7\u662f\u4e2a\u597d\u4e60\u60ef\uff1a ;(print or io.write)('done') \u4e00\u4e2a\u8bed\u53e5\u5757\u53ef\u4ee5\u88ab\u663e\u5f0f\u7684\u5b9a\u754c\u4e3a\u5355\u6761\u8bed\u53e5\uff1a stat ::= do block end \u663e\u5f0f\u7684\u5bf9\u4e00\u4e2a\u5757\u5b9a\u754c\u901a\u5e38\u7528\u6765\u63a7\u5236\u5185\u90e8\u53d8\u91cf\u58f0\u660e\u7684\u4f5c\u7528\u57df\u3002 \u6709\u65f6\uff0c\u663e\u5f0f\u5b9a\u754c\u4e5f\u7528\u4e8e\u5728\u4e00\u4e2a\u8bed\u53e5\u5757\u4e2d\u95f4\u63d2\u5165 return \u5728 repeat\u2013until \u5faa\u73af\u4e2d\uff0c \u5185\u90e8\u8bed\u53e5\u5757\u7684\u7ed3\u675f\u70b9\u4e0d\u662f\u5728 until \u8fd9\u4e2a\u5173\u952e\u5b57\u5904\uff0c \u5b83\u8fd8\u5305\u62ec\u4e86\u5176\u540e\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f\u3002 \u56e0\u6b64\uff0c\u6761\u4ef6\u8868\u8fbe\u5f0f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u5185\u90e8\u8bed\u53e5\u5757\u4e2d\u7684\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u3002 return \u53ea\u80fd\u88ab\u5199\u5728\u4e00\u4e2a\u8bed\u53e5\u5757\u7684\u6700\u540e\u4e00\u53e5\u3002 \u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u4ece\u8bed\u53e5\u5757\u7684\u4e2d\u95f4 return\uff0c \u4f60\u53ef\u4ee5\u4f7f\u7528\u663e\u5f0f\u7684\u5b9a\u4e49\u4e00\u4e2a\u5185\u90e8\u8bed\u53e5\u5757\uff0c \u4e00\u822c\u5199\u4f5c do return end\u3002 \u53ef\u4ee5\u8fd9\u6837\u5199\u662f\u56e0\u4e3a\u73b0\u5728 return \u6210\u4e86\uff08\u5185\u90e8\uff09\u8bed\u53e5\u5757\u7684\u6700\u540e\u4e00\u53e5\u4e86\u3002 \u51fd\u6570\u8c03\u7528\u548c\u53ef\u53d8\u53c2\u6570\u8868\u8fbe\u5f0f\u90fd\u53ef\u4ee5\u653e\u5728\u591a\u91cd\u8fd4\u56de\u503c\u4e2d\u3002 \u5982\u679c\u51fd\u6570\u8c03\u7528\u88ab\u5f53\u4f5c\u4e00\u6761\u8bed\u53e5\uff08\u53c2\u89c1 \u00a73.3.6\uff09\uff0c \u5176\u8fd4\u56de\u503c\u5217\u8868\u88ab\u8c03\u6574\u4e3a\u96f6\u4e2a\u5143\u7d20\uff0c\u5373\u629b\u5f03\u6240\u6709\u7684\u8fd4\u56de\u503c\u3002 \u5982\u679c\u8868\u8fbe\u5f0f\u88ab\u7528\u4e8e\u8868\u8fbe\u5f0f\u5217\u8868\u7684\u6700\u540e\uff08\u6216\u662f\u552f\u4e00\u7684\uff09\u4e00\u4e2a\u5143\u7d20\uff0c \u90a3\u4e48\u4e0d\u4f1a\u505a\u4efb\u4f55\u8c03\u6574\uff08\u9664\u975e\u8868\u8fbe\u5f0f\u88ab\u62ec\u53f7\u62ec\u8d77\u6765\uff09\u3002 \u5728\u5176\u5b83\u60c5\u51b5\u4e0b\uff0c Lua \u90fd\u4f1a\u628a\u7ed3\u679c\u8c03\u6574\u4e3a\u4e00\u4e2a\u5143\u7d20\u7f6e\u5165\u8868\u8fbe\u5f0f\u5217\u8868\u4e2d\uff0c \u5373\u4fdd\u7559\u7b2c\u4e00\u4e2a\u7ed3\u679c\u800c\u5ffd\u7565\u4e4b\u540e\u7684\u6240\u6709\u503c\uff0c\u6216\u662f\u5728\u6ca1\u6709\u7ed3\u679c\u65f6\uff0c \u8865\u5355\u4e2a nil\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff1a f() -- \u8c03\u6574\u4e3a 0 \u4e2a\u7ed3\u679c g(f(), x) -- f() \u4f1a\u88ab\u8c03\u6574\u4e3a\u4e00\u4e2a\u7ed3\u679c g(x, f()) -- g \u6536\u5230 x \u4ee5\u53ca f() \u8fd4\u56de\u7684\u6240\u6709\u7ed3\u679c a,b,c = f(), x -- f() \u88ab\u8c03\u6574\u4e3a 1 \u4e2a\u7ed3\u679c \uff08c \u6536\u5230 nil\uff09 a,b = ... -- a \u6536\u5230\u53ef\u53d8\u53c2\u6570\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c -- b \u6536\u5230\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff08\u5982\u679c\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d -- \u6ca1\u6709\u5b9e\u9645\u7684\u53c2\u6570\uff0ca \u548c b \u90fd\u4f1a\u6536\u5230 nil\uff09 a,b,c = x, f() -- f() \u88ab\u8c03\u6574\u4e3a 2 \u4e2a\u7ed3\u679c a,b,c = f() -- f() \u88ab\u8c03\u6574\u4e3a 3 \u4e2a\u7ed3\u679c return f() -- \u8fd4\u56de f() \u7684\u6240\u6709\u8fd4\u56de\u7ed3\u679c return ... -- \u8fd4\u56de\u4ece\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u63a5\u6536\u5230\u7684\u6240\u6709\u53c2\u6570parameters return x,y,f() -- \u8fd4\u56de x, y, \u4ee5\u53ca f() \u7684\u6240\u6709\u8fd4\u56de\u503c {f()} -- \u7528 f() \u7684\u6240\u6709\u8fd4\u56de\u503c\u521b\u5efa\u4e00\u4e2a\u5217\u8868 {...} -- \u7528\u53ef\u53d8\u53c2\u6570\u4e2d\u7684\u6240\u6709\u503c\u521b\u5efa\u4e00\u4e2a\u5217\u8868 {f(), nil} -- f() \u88ab\u8c03\u6574\u4e3a\u4e00\u4e2a\u7ed3\u679c \u88ab\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u8868\u8fbe\u5f0f\u6c38\u8fdc\u88ab\u5f53\u4f5c\u4e00\u4e2a\u503c\u3002 \u6240\u4ee5\uff0c (f(x,y,z)) \u5373\u4f7f f \u8fd4\u56de\u591a\u4e2a\u503c\uff0c \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6c38\u8fdc\u662f\u4e00\u4e2a\u5355\u4e00\u503c\u3002 \uff08(f(x,y,z)) \u7684\u503c\u662f f \u8fd4\u56de\u7684\u7b2c\u4e00\u4e2a\u503c\u3002 \u5982\u679c f \u4e0d\u8fd4\u56de\u503c\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u7684\u503c\u5c31\u662f nil \u3002\uff09 ------------------------------------------------------------ \u5bf9\u4e8e\u53f3\u79fb\u548c\u5de6\u79fb\uff0c\u5747\u7528\u96f6\u6765\u586b\u8865\u7a7a\u4f4d\u3002 \u79fb\u52a8\u7684\u4f4d\u6570\u82e5\u4e3a\u8d1f\uff0c\u5219\u5411\u53cd\u65b9\u5411\u4f4d\u79fb\uff1b <span style=\"color: red;\">(\u8fd9\u548cpython\u7684\u76f4\u63a5\u62a5\u9519\u4e0d\u4e00\u6837)</span> \u82e5\u79fb\u52a8\u7684\u4f4d\u6570\u7684\u7edd\u5bf9\u503c\u5927\u4e8e\u7b49\u4e8e \u6574\u6570\u672c\u8eab\u7684\u4f4d\u6570\uff0c\u5176\u7ed3\u679c\u4e3a\u96f6 \uff08\u6240\u6709\u4f4d\u90fd\u88ab\u79fb\u51fa\uff09\u3002 <img src=\"../../images/QQ\u622a\u56fe20200926123640.png\"> \u82e5\u79fb\u52a8\u7684\u4f4d\u6570\u7684\u7edd\u5bf9\u503c\u5927\u4e8e\u7b49\u4e8e \u6574\u6570\u672c\u8eab\u7684\u4f4d\u6570\uff0c\u5176\u7ed3\u679c\u4e3a\u96f6 \uff08\u6240\u6709\u4f4d\u90fd\u88ab\u79fb\u51fa\uff09\u3002 ------------------------- \u7b49\u4e8e\u64cd\u4f5c \uff08==\uff09\u5148\u6bd4\u8f83\u64cd\u4f5c\u6570\u7684\u7c7b\u578b\u3002 \u5982\u679c\u7c7b\u578b\u4e0d\u540c\uff0c\u7ed3\u679c\u5c31\u662f false\u3002 \u5426\u5219\uff0c\u7ee7\u7eed\u6bd4\u8f83\u503c\u3002 \u5b57\u7b26\u4e32\u6309\u4e00\u822c\u7684\u65b9\u5f0f\u6bd4\u8f83\u3002 \u6570\u5b57\u9075\u5faa\u4e8c\u5143\u64cd\u4f5c\u7684\u89c4\u5219\uff1a \u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u6570\u90fd\u662f\u6574\u6570\uff0c \u5b83\u4eec\u6309\u6574\u6570\u6bd4\u8f83\uff1b \u5426\u5219\uff0c\u5b83\u4eec\u5148\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\uff0c\u7136\u540e\u518d\u505a\u6bd4\u8f83\u3002 -------------------------- return functioncall \u8fd9\u6837\u7684\u8c03\u7528\u5f62\u5f0f\u5c06\u89e6\u53d1\u4e00\u6b21 \u5c3e\u8c03\u7528\u3002 Lua \u5b9e\u73b0\u4e86 \u5b8c\u5168\u5c3e\u8c03\u7528\uff08\u6216\u79f0\u4e3a \u5b8c\u5168\u5c3e\u9012\u5f52\uff09\uff1a \u5728\u5c3e\u8c03\u7528\u4e2d\uff0c \u88ab\u8c03\u7528\u7684\u51fd\u6570\u91cd\u7528\u8c03\u7528\u5b83\u7684\u51fd\u6570\u7684\u5806\u6808\u9879\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u7a0b\u5e8f\u6267\u884c\u7684\u5d4c\u5957\u5c3e\u8c03\u7528\u7684\u5c42\u6570\u662f\u6ca1\u6709\u9650\u5236\u7684\u3002 \u7136\u800c\uff0c\u5c3e\u8c03\u7528\u5c06\u5220\u9664\u8c03\u7528\u5b83\u7684\u51fd\u6570\u7684\u4efb\u4f55\u8c03\u8bd5\u4fe1\u606f\u3002 \u6ce8\u610f\uff0c\u5c3e\u8c03\u7528\u53ea\u53d1\u751f\u5728\u7279\u5b9a\u7684\u8bed\u6cd5\u4e0b\uff0c \u4ec5\u5f53 return \u53ea\u6709\u5355\u4e00\u51fd\u6570\u8c03\u7528\u4f5c\u4e3a\u53c2\u6570\u65f6\u624d\u53d1\u751f\u5c3e\u8c03\u7528\uff1b \u8fd9\u79cd\u8bed\u6cd5\u4f7f\u5f97\u8c03\u7528\u51fd\u6570\u7684\u6240\u6709\u7ed3\u679c\u53ef\u4ee5\u5b8c\u6574\u5730\u8fd4\u56de\u3002 \u56e0\u6b64\uff0c\u4e0b\u9762\u8fd9\u4e9b\u4f8b\u5b50\u90fd\u4e0d\u662f\u5c3e\u8c03\u7528\uff1a ```lua return (f(x)) -- \u8fd4\u56de\u503c\u88ab\u8c03\u6574\u4e3a\u4e00\u4e2a return 2 * f(x) return x, f(x) -- \u8ffd\u52a0\u82e5\u5e72\u8fd4\u56de\u503c f(x); return -- \u8fd4\u56de\u503c\u5168\u90e8\u88ab\u820d\u5f03 return x or f(x) -- \u8fd4\u56de\u503c\u88ab\u8c03\u6574\u4e3a\u4e00\u4e2a \u8be5\u8bed\u53e5 function f () body end \u88ab\u8f6c\u8bd1\u6210 f = function () body end \u8be5\u8bed\u53e5 function t.a.b.c.f () body end \u88ab\u8f6c\u8bd1\u6210 t.a.b.c.f = function () body end \u8be5\u8bed\u53e5 local function f () body end \u88ab\u8f6c\u8bd1\u6210 local f; f = function () body end \u800c\u4e0d\u662f local f = function () body end \uff08\u8fd9\u4e2a\u5dee\u522b\u53ea\u5728\u51fd\u6570\u4f53\u5185\u9700\u8981\u5f15\u7528 f \u65f6\u624d\u6709\u3002\uff09 \u6bcf\u6b21\u6267\u884c\u5230\u4e00\u4e2a local \u8bed\u53e5\u90fd\u4f1a\u5b9a\u4e49\u51fa\u4e00\u4e2a\u65b0\u7684\u5c40\u90e8\u53d8\u91cf\u3002 \u770b\u770b\u8fd9\u6837\u4e00\u4e2a\u4f8b\u5b50\uff1a a = {} local x = 20 for i=1,10 do local y = 0 a[i] = function () y=y+1; return x+y end end \u8fd9\u4e2a\u5faa\u73af\u521b\u5efa\u4e86\u5341\u4e2a\u95ed\u5305\uff08\u8fd9\u6307\u5341\u4e2a\u533f\u540d\u51fd\u6570\u7684\u5b9e\u4f8b\uff09\u3002 \u8fd9\u4e9b\u95ed\u5305\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u4f7f\u7528\u4e86\u4e0d\u540c\u7684 y \u53d8\u91cf\uff0c \u800c\u5b83\u4eec\u53c8\u5171\u4eab\u4e86\u540c\u4e00\u4efd x\u3002","title":"local result = {}\nsetmetatable( result, {__mode=&quot;v&quot;} )\n\nfunction mem_loadstring(str)\n    local val = result[str]\n    if val==nil then\n        val = assert( loadstring( str ) )\n        result[str] = val\n    end\n    return val\nend\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_5","text":"assert (v [, message]) \u5982\u679c\u5176\u53c2\u6570 v \u7684\u503c\u4e3a\u5047\uff08nil \u6216 false\uff09\uff0c \u5b83\u5c31\u8c03\u7528 error\uff1b \u5426\u5219\uff0c\u8fd4\u56de\u6240\u6709\u7684\u53c2\u6570\u3002 \u5728\u9519\u8bef\u60c5\u51b5\u65f6\uff0c message \u6307\u90a3\u4e2a\u9519\u8bef\u5bf9\u8c61\uff1b \u5982\u679c\u4e0d\u63d0\u4f9b\u8fd9\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u9ed8\u8ba4\u4e3a \"assertion failed!\" \u3002 getmetatable (object) \u5982\u679c object \u4e0d\u5305\u542b\u5143\u8868\uff0c\u8fd4\u56de nil \u3002 \u5426\u5219\uff0c \u5982\u679c\u5728\u8be5\u5bf9\u8c61\u7684\u5143\u8868\u4e2d\u6709 \"__metatable\" \u57df\u65f6\u8fd4\u56de\u5176\u5173\u8054\u503c \uff0c \u6ca1\u6709\u65f6\u8fd4\u56de\u8be5\u5bf9\u8c61\u7684\u5143\u8868\u3002 next (table [, index]) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u904d\u5386\u7684\u8868\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8868\u4e2d\u7684\u67d0\u4e2a\u952e\u3002 next \u8fd4\u56de\u8be5\u952e\u7684\u4e0b\u4e00\u4e2a\u952e\u53ca\u5176\u5173\u8054\u7684\u503c\u3002 \u5982\u679c\u7528 nil \u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8c03\u7528 next \u5c06\u8fd4\u56de\u521d\u59cb\u952e\u53ca\u5176\u5173\u8054\u503c\u3002 \u5f53\u4ee5\u6700\u540e\u4e00\u4e2a\u952e\u53bb\u8c03\u7528\uff0c\u6216\u662f\u4ee5 nil \u8c03\u7528\u4e00\u5f20\u7a7a\u8868\u65f6\uff0c next \u8fd4\u56de nil\u3002 assert(next({}) == nil) \u5f53\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u4f60\u7ed9\u8868\u4e2d\u5e76\u4e0d\u5b58\u5728\u7684\u57df\u8d4b\u503c\uff0c next \u7684\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684 print (\u00b7\u00b7\u00b7) \u63a5\u6536\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06\u5b83\u4eec\u7684\u503c\u6253\u5370\u5230 stdout\u3002 \u5b83\u7528 tostring \u51fd\u6570\u5c06\u6bcf\u4e2a\u53c2\u6570\u90fd\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002 print \u4e0d\u7528\u4e8e\u505a\u683c\u5f0f\u5316\u8f93\u51fa\u3002\u4ec5\u4f5c\u4e3a\u770b\u4e00\u4e0b\u67d0\u4e2a\u503c\u7684\u5feb\u6377\u65b9\u5f0f\u3002 \u591a\u7528\u4e8e\u8c03\u8bd5\u3002 \u5b8c\u6574\u7684\u5bf9\u8f93\u51fa\u7684\u63a7\u5236\uff0c\u8bf7\u4f7f\u7528 string.format \u4ee5\u53ca io.write\u3002 rawequal (v1, v2) \u5728\u4e0d\u89e6\u53d1\u4efb\u4f55\u5143\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b \u68c0\u67e5 v1 \u662f\u5426\u548c v2 \u76f8\u7b49\u3002 \u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u91cf\u3002 rawget (table, index) \u5728\u4e0d\u89e6\u53d1\u4efb\u4f55\u5143\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b \u83b7\u53d6 table[index] \u7684\u503c\u3002 table \u5fc5\u987b\u662f\u4e00\u5f20\u8868\uff1b index \u53ef\u4ee5\u662f\u4efb\u4f55\u503c\u3002 rawlen (v) \u5728\u4e0d\u89e6\u53d1\u4efb\u4f55\u5143\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b \u8fd4\u56de\u5bf9\u8c61 v \u7684\u957f\u5ea6\u3002 v \u53ef\u4ee5\u662f\u8868\u6216\u5b57\u7b26\u4e32\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002 rawset (table, index, value) \u5728\u4e0d\u89e6\u53d1\u4efb\u4f55\u5143\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b \u5c06 table[index] \u8bbe\u4e3a value\u3002 table \u5fc5\u987b\u662f\u4e00\u5f20\u8868\uff0c index \u53ef\u4ee5\u662f nil \u4e0e NaN \u4e4b\u5916\u7684\u4efb\u4f55\u503c\u3002 value \u53ef\u4ee5\u662f\u4efb\u4f55 Lua \u503c\u3002 \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de table\u3002 select (index, \u00b7\u00b7\u00b7) select \u8be6\u89e3\u770b\u8fd9\u91cc: http://yiouejv.com/lua/select%E5%87%BD%E6%95%B0/ tonumber (e [, base]) \u5982\u679c\u8c03\u7528\u7684\u65f6\u5019\u6ca1\u6709 base\uff0c tonumber \u5c1d\u8bd5\u628a\u53c2\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 \u5982\u679c\u53c2\u6570\u5df2\u7ecf\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u6216\u662f\u4e00\u4e2a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c tonumber \u5c31\u8fd4\u56de\u8fd9\u4e2a\u6570\u5b57\uff1b \u5426\u5219\u8fd4\u56de nil\u3002 \u5b57\u7b26\u4e32\u7684\u8f6c\u6362\u7ed3\u679c\u53ef\u80fd\u662f\u6574\u6570\u4e5f\u53ef\u80fd\u662f\u6d6e\u70b9\u6570\uff0c \u8fd9\u53d6\u51b3\u4e8e Lua \u7684\u8f6c\u6362\u6587\u6cd5, \uff08\u5b57\u7b26\u4e32\u53ef\u4ee5\u6709\u524d\u7f6e\u548c\u540e\u7f6e\u7684\u7a7a\u683c\uff0c\u53ef\u4ee5\u5e26\u7b26\u53f7\u3002\uff09 \u5f53\u4f20\u5165 base \u8c03\u7528\u5b83\u65f6\uff0c e \u5fc5\u987b\u662f\u4e00\u4e2a\u4ee5\u8be5\u8fdb\u5236\u8868\u793a\u7684\u6574\u6570\u5b57\u7b26\u4e32\u3002 \u8fdb\u5236\u53ef\u4ee5\u662f 2 \u5230 36 \uff08\u5305\u542b 2 \u548c 36\uff09\u4e4b\u95f4\u7684\u4efb\u4f55\u6574\u6570\u3002 \u5927\u4e8e 10 \u8fdb\u5236\u65f6\uff0c\u5b57\u6bcd 'A' \uff08\u5927\u5c0f\u5199\u5747\u53ef\uff09\u8868\u793a 10 \uff0c 'B' \u8868\u793a 11\uff0c\u4f9d\u6b21\u5230 'Z' \u8868\u793a 35 \u3002 \u5982\u679c\u5b57\u7b26\u4e32 e \u4e0d\u662f\u8be5\u8fdb\u5236\u4e0b\u7684\u5408\u6cd5\u6570\u5b57\uff0c \u51fd\u6570\u8fd4\u56de nil\u3002 tostring (v) \u53ef\u4ee5\u63a5\u6536\u4efb\u4f55\u7c7b\u578b\uff0c\u5b83\u5c06\u5176\u8f6c\u6362\u4e3a\u4eba\u53ef\u9605\u8bfb\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\u3002 \u6d6e\u70b9\u6570\u603b\u88ab\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u7684\u8868\u73b0\u5f62\u5f0f\uff08\u5c0f\u6570\u70b9\u5f62\u5f0f\u6216\u662f\u6307\u6570\u5f62\u5f0f\uff09\u3002 \uff08\u5982\u679c\u60f3\u5b8c\u5168\u63a7\u5236\u6570\u5b57\u5982\u4f55\u88ab\u8f6c\u6362\uff0c\u53ef\u4ee5\u4f7f\u7528 string.format\u3002\uff09 \u5982\u679c v \u6709 \"__tostring\" \u57df\u7684\u5143\u8868\uff0c tostring \u4f1a\u4ee5 v \u4e3a\u53c2\u6570\u8c03\u7528\u5b83\u3002 \u5e76\u7528\u5b83\u7684\u7ed3\u679c\u4f5c\u4e3a\u8fd4\u56de\u503c\u3002","title":"\u57fa\u7840\u51fd\u6570"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_6","text":"\u6587\u6863\u5f88\u8be6\u7ec6 https://cloudwu.github.io/lua53doc/manual.html#6.3","title":"\u6a21\u5757"},{"location":"lua/%E4%BA%8C%E8%AF%BBlua5.3%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/#_7","text":"Big-endian\uff1a\u9ad8\u4f4d\u5b57\u8282\u5b58\u5165\u4f4e\u5730\u5740\uff0c\u4f4e\u4f4d\u5b57\u8282\u5b58\u5165\u9ad8\u5730\u5740 Little-endian\uff1a\u4f4e\u4f4d\u5b57\u8282\u5b58\u5165\u4f4e\u5730\u5740\uff0c\u9ad8\u4f4d\u5b57\u8282\u5b58\u5165\u9ad8\u5730\u5740 \u4f8b\u5982\uff0c\u5c0612345678h\u5199\u51651000h\u5f00\u59cb\u7684\u5185\u5b58\u4e2d\uff0c\u4ee5\u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f\u6a21\u5f0f\u5b58\u653e\u7ed3\u679c\u5982\u4e0b \u5b57\u8282\u5e8f\u901a\u5e38\u53ea\u548c\u4f60\u4f7f\u7528\u7684\u5904\u7406\u5668\u67b6\u6784\u6709\u5173\uff0c\u800c\u548c\u7f16\u7a0b\u8bed\u8a00\u65e0\u5173\uff0c\u6bd4\u5982\u5e38\u89c1\u7684Intel x86\u7cfb\u5217\u5c31\u662f\u5c0f\u7aef\u5e8f\u3002 string.pack (fmt, v1, v2, \u00b7\u00b7\u00b7) \u8fd4\u56de\u4e00\u4e2a\u6253\u5305\u4e86\uff08\u5373\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5e8f\u5217\u5316\uff09 v1, v2 \u7b49\u503c\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32 fmt \u4e3a\u6253\u5305\u683c\u5f0f string.unpack (fmt, s [, pos]) \u8fd4\u56de\u4ee5\u683c\u5f0f fmt \u6253\u5305\u5728\u5b57\u7b26\u4e32 s \uff08\u53c2\u89c1 string.pack\uff09 \u4e2d\u7684\u503c\u3002 \u9009\u9879 pos\uff08\u9ed8\u8ba4\u4e3a 1 \uff09\u6807\u8bb0\u4e86\u4ece s \u4e2d\u54ea\u91cc\u5f00\u59cb\u8bfb\u8d77\u3002 \u8bfb\u5b8c\u6240\u6709\u7684\u503c\u540e\uff0c\u51fd\u6570\u8fd4\u56de s \u4e2d\u7b2c\u4e00\u4e2a\u672a\u8bfb\u5b57\u8282\u7684\u4f4d\u7f6e\u3002 97413c9482cb24f52682524e035f18e6d72a8e41","title":"\u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f"},{"location":"lua/%E5%8D%8F%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85/","text":"\u534f\u7a0b\u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005 \u00b6 --require(\"coroutine\") local producer = coroutine.create ( function () local i = 0 while true do i = 1 + i coroutine.yield ( i ) end end ) local consume = coroutine.create ( function () while true do local status , i = coroutine.resume ( producer ) print ( status , i ) end end ) coroutine.resume ( consume )","title":"lua \u534f\u7a0b\u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005"},{"location":"lua/%E5%8D%8F%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85/#_1","text":"--require(\"coroutine\") local producer = coroutine.create ( function () local i = 0 while true do i = 1 + i coroutine.yield ( i ) end end ) local consume = coroutine.create ( function () while true do local status , i = coroutine.resume ( producer ) print ( status , i ) end end ) coroutine.resume ( consume )","title":"\u534f\u7a0b\u5b9e\u73b0\u751f\u4ea7\u8005\u6d88\u8d39\u8005"},{"location":"lua/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/","text":"\u4ee3\u7801\u603b\u5219 \u00b6 \u53ef\u8bfb\u6027 \u903b\u8f91\u575a\u5b9e \u6613\u4e8e\u7ef4\u62a4 \u6ce8\u91ca\u4e0d\u5acc\u591a \u9002\u5f53\u8003\u8651\u6548\u7387 \u5177\u4f53\u9700\u6c42\u5177\u4f53\u5206\u6790\uff0c\u5c11\u5199\u4e07\u80fd\u4ee3\u7801 python\u4e4b\u7985 \u00b6 The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than right now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \u4f18\u7f8e\u80dc\u4e8e\u4e11\u964b \u660e\u4e86\u80dc\u4e8e\u6666\u6da9 \u7b80\u5355\u80dc\u4e8e\u590d\u6742 \u590d\u6742\u80dc\u4e8e\u6742\u4e71 \u6241\u5e73\u80dc\u4e8e\u5d4c\u5957 \u95f4\u9694\u80dc\u4e8e\u7d27\u51d1 \u53ef\u8bfb\u6027\u5f88\u91cd\u8981 \u7279\u4f8b\u4e0d\u8db3\u4ee5\u7279\u6b8a\u5230\u8fdd\u80cc\u8fd9\u4e9b\u539f\u5219 \u4e0d\u8981\u5ffd\u89c6\u9519\u8bef\uff0c\u9664\u975e\u7a0b\u5e8f\u9700\u8981\u8fd9\u6837\u505a \u9762\u5bf9\u6a21\u68f1\u4e24\u53ef\uff0c\u62d2\u7edd\u731c\u6d4b \u89e3\u51b3\u95ee\u9898\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5e94\u8be5\u6709\u4e00\u79cd\uff0c\u6700\u597d\u53ea\u6709\u4e00\u79cd \u53ef\u80fd\u8fd9\u79cd\u65b9\u6cd5\u4e00\u5f00\u59cb\u4e0d\u591f\u76f4\u63a5\uff0c\u56e0\u4e3a\u4f60\u4e0d\u662f\u8303\u7f57\u82cf\u59c6 \u505a\u4e5f\u8bb8\u597d\u8fc7\u4e0d\u505a\uff0c\u4f46\u4e0d\u60f3\u5c31\u505a\u8fd8\u4e0d\u5982\u4e0d\u505a \u5982\u679c\u65b9\u6848\u96be\u4ee5\u63cf\u8ff0\u660e\u767d\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e2a\u7cdf\u7cd5\u7684\u65b9\u6848 \u5982\u679c\u5bb9\u6613\u63cf\u8ff0\uff0c\u90a3\u4e48\u53ef\u80fd\u662f\u4e2a\u597d\u65b9\u6848 \u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u7edd\u5999\u7684\u7406\u5ff5\uff0c\u591a\u52a0\u5229\u7528 \u4ee3\u7801\u98ce\u683c \u00b6 lua\u7279\u6027 \u00b6 \u5176\u4ed6 \u00b6 \u6ce8\u610f\u4ee3\u7801\u98ce\u683c\u7edf\u4e00\uff0c\u5bf9\u9f50\u662f\u5fc5\u987b\u7684\uff0c\u9002\u5ea6\u7684\u6362\u884c\u548c\u7a7a\u884c\uff0c\u4fdd\u6301\u6574\u6d01\u6613\u8bfb \u8fed\u4ee3list \u7684\u65f6\u5019\u7528ipairs, \u8fed\u4ee3dict \u7684\u65f6\u5019\u7528pairs, \u914d\u8868\u6570\u636e\u901a\u5e38\u662f\u4e2a\u5b57\u5178 \u91cd\u590d\u7528\u7684\u6570\u636e\u3001\u8868\u8fbe\u5f0f\u592a\u957f\u53ef\u4ee5\u53d8\u91cf\u4fdd\u5b58\u4e00\u4e0b \u4f7f\u7528\u53d8\u91cf\u6765\u7701\u6389\u91cd\u590d\u7684\u8ba1\u7b97\u548c\u70b9\u64cd\u4f5c call \u5176\u4ed6\u8282\u70b9\u7684\u65f6\u5019\u8981\u6ce8\u610f\u5f02\u6b65\u5f15\u53d1\u7684\u95ee\u9898\u3002 \u522b\u5728pairs\u8fed\u4ee3\u65f6\u5220\u9664table\u5185\u5bb9, \u4e24\u79cd\u505a\u6cd5\uff1a for key in table.keys(table) \u628a\u8981\u5220\u9664\u7684key\u5b58\u8d77\u6765, \u8fed\u4ee3\u5b8c\u7edf\u4e00\u5220 \u589e\u52a0\u7269\u54c1\u4f18\u5148\u7528add_new_item\u548cadd_item_list\u63a5\u53e3 \u95ed\u5305\u7684\u4f7f\u7528\uff0clua\u4e2d\u6240\u6709\u4e1c\u897f\u90fd\u662f\u5bf9\u8c61\uff0c\u95ed\u5305\u4e2d\u5f15\u7528\u7684\u662f\u5bf9\u8c61\u4e0d\u662f\u503c\uff0c\u6ce8\u610f\u503c\u548c\u5bf9\u8c61\u5730\u5740\u7684\u533a\u522b\u3002","title":"lua \u5de5\u4f5c\u4e2d\u8981\u6ce8\u610f\u7684\u70b9"},{"location":"lua/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/#_1","text":"\u53ef\u8bfb\u6027 \u903b\u8f91\u575a\u5b9e \u6613\u4e8e\u7ef4\u62a4 \u6ce8\u91ca\u4e0d\u5acc\u591a \u9002\u5f53\u8003\u8651\u6548\u7387 \u5177\u4f53\u9700\u6c42\u5177\u4f53\u5206\u6790\uff0c\u5c11\u5199\u4e07\u80fd\u4ee3\u7801","title":"\u4ee3\u7801\u603b\u5219"},{"location":"lua/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/#python","text":"The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than right now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! \u4f18\u7f8e\u80dc\u4e8e\u4e11\u964b \u660e\u4e86\u80dc\u4e8e\u6666\u6da9 \u7b80\u5355\u80dc\u4e8e\u590d\u6742 \u590d\u6742\u80dc\u4e8e\u6742\u4e71 \u6241\u5e73\u80dc\u4e8e\u5d4c\u5957 \u95f4\u9694\u80dc\u4e8e\u7d27\u51d1 \u53ef\u8bfb\u6027\u5f88\u91cd\u8981 \u7279\u4f8b\u4e0d\u8db3\u4ee5\u7279\u6b8a\u5230\u8fdd\u80cc\u8fd9\u4e9b\u539f\u5219 \u4e0d\u8981\u5ffd\u89c6\u9519\u8bef\uff0c\u9664\u975e\u7a0b\u5e8f\u9700\u8981\u8fd9\u6837\u505a \u9762\u5bf9\u6a21\u68f1\u4e24\u53ef\uff0c\u62d2\u7edd\u731c\u6d4b \u89e3\u51b3\u95ee\u9898\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5e94\u8be5\u6709\u4e00\u79cd\uff0c\u6700\u597d\u53ea\u6709\u4e00\u79cd \u53ef\u80fd\u8fd9\u79cd\u65b9\u6cd5\u4e00\u5f00\u59cb\u4e0d\u591f\u76f4\u63a5\uff0c\u56e0\u4e3a\u4f60\u4e0d\u662f\u8303\u7f57\u82cf\u59c6 \u505a\u4e5f\u8bb8\u597d\u8fc7\u4e0d\u505a\uff0c\u4f46\u4e0d\u60f3\u5c31\u505a\u8fd8\u4e0d\u5982\u4e0d\u505a \u5982\u679c\u65b9\u6848\u96be\u4ee5\u63cf\u8ff0\u660e\u767d\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u4e2a\u7cdf\u7cd5\u7684\u65b9\u6848 \u5982\u679c\u5bb9\u6613\u63cf\u8ff0\uff0c\u90a3\u4e48\u53ef\u80fd\u662f\u4e2a\u597d\u65b9\u6848 \u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u7edd\u5999\u7684\u7406\u5ff5\uff0c\u591a\u52a0\u5229\u7528","title":"python\u4e4b\u7985"},{"location":"lua/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/#_2","text":"","title":"\u4ee3\u7801\u98ce\u683c"},{"location":"lua/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/#lua","text":"","title":"lua\u7279\u6027"},{"location":"lua/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/#_3","text":"\u6ce8\u610f\u4ee3\u7801\u98ce\u683c\u7edf\u4e00\uff0c\u5bf9\u9f50\u662f\u5fc5\u987b\u7684\uff0c\u9002\u5ea6\u7684\u6362\u884c\u548c\u7a7a\u884c\uff0c\u4fdd\u6301\u6574\u6d01\u6613\u8bfb \u8fed\u4ee3list \u7684\u65f6\u5019\u7528ipairs, \u8fed\u4ee3dict \u7684\u65f6\u5019\u7528pairs, \u914d\u8868\u6570\u636e\u901a\u5e38\u662f\u4e2a\u5b57\u5178 \u91cd\u590d\u7528\u7684\u6570\u636e\u3001\u8868\u8fbe\u5f0f\u592a\u957f\u53ef\u4ee5\u53d8\u91cf\u4fdd\u5b58\u4e00\u4e0b \u4f7f\u7528\u53d8\u91cf\u6765\u7701\u6389\u91cd\u590d\u7684\u8ba1\u7b97\u548c\u70b9\u64cd\u4f5c call \u5176\u4ed6\u8282\u70b9\u7684\u65f6\u5019\u8981\u6ce8\u610f\u5f02\u6b65\u5f15\u53d1\u7684\u95ee\u9898\u3002 \u522b\u5728pairs\u8fed\u4ee3\u65f6\u5220\u9664table\u5185\u5bb9, \u4e24\u79cd\u505a\u6cd5\uff1a for key in table.keys(table) \u628a\u8981\u5220\u9664\u7684key\u5b58\u8d77\u6765, \u8fed\u4ee3\u5b8c\u7edf\u4e00\u5220 \u589e\u52a0\u7269\u54c1\u4f18\u5148\u7528add_new_item\u548cadd_item_list\u63a5\u53e3 \u95ed\u5305\u7684\u4f7f\u7528\uff0clua\u4e2d\u6240\u6709\u4e1c\u897f\u90fd\u662f\u5bf9\u8c61\uff0c\u95ed\u5305\u4e2d\u5f15\u7528\u7684\u662f\u5bf9\u8c61\u4e0d\u662f\u503c\uff0c\u6ce8\u610f\u503c\u548c\u5bf9\u8c61\u5730\u5740\u7684\u533a\u522b\u3002","title":"\u5176\u4ed6"},{"location":"lua/%E8%A1%A8%E7%9A%84%E6%9E%84%E9%80%A0/","text":"\u8868\u7684\u6784\u9020 \u00b6 \u6784\u9020\u5668\u662f\u521b\u5efa\u548c\u521d\u59cb\u5316\u8868\u7684\u8868\u8fbe\u5f0f\u3002\u8868\u662fLua\u7279\u6709\u7684\u529f\u80fd\u5f3a\u5927\u7684\u4e1c\u897f\u3002\u6700\u7b80\u5355\u7684\u6784\u9020\u51fd\u6570\u662f{}\uff0c\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u8868\u3002\u53ef\u4ee5\u76f4\u63a5\u521d\u59cb\u5316\u6570\u7ec4: days = { \"Sunday\" , \"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thursday\" , \"Friday\" , \"Saturday\" } Lua\u5c06\"Sunday\"\u521d\u59cb\u5316days[1]\uff08\u7b2c\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15\u4e3a1\uff09\uff0c \u7528\"Monday\"\u521d\u59cb\u5316days[2]... print(days[4]) --> Wednesday \u6784\u9020\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\uff1a tab = {sin(1), sin(2), sin(3), sin(4), sin(5),sin(6), sin(7), sin(8)} \u5982\u679c\u60f3\u521d\u59cb\u5316\u4e00\u4e2a\u8868\u4f5c\u4e3arecord\u4f7f\u7528\u53ef\u4ee5\u8fd9\u6837\uff1a a = {x=0, y=0} <--> a = {}; a.x=0; a.y=0 \u4e0d\u7ba1\u7528\u4f55\u79cd\u65b9\u5f0f\u521b\u5efatable\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5411\u8868\u4e2d\u6dfb\u52a0\u6216\u8005\u5220\u9664\u4efb\u4f55\u7c7b\u578b\u7684\u57df\uff0c\u6784\u9020\u51fd\u6570\u4ec5\u4ec5\u5f71\u54cd\u8868\u7684\u521d\u59cb\u5316\u3002 w = { x = 0 , y = 0 , label = \"console\" } x = { sin ( 0 ), sin ( 1 ), sin ( 2 )} w [ 1 ] = \"another field\" x . f = w print ( w [ \"x\" ]) --> 0 print ( w [ 1 ]) --> another field print ( x . f [ 1 ]) --> another field w . x = nil -- remove field \"x\" \u6bcf\u6b21\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0cLua\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684table\uff0c\u53ef\u4ee5\u4f7f\u7528table\u6784\u9020\u4e00\u4e2alist\uff1a list = nil for line in io.lines () do list = { next = list , value = line } end \u8fd9\u6bb5\u4ee3\u7801\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u8fdb\u6bcf\u884c\uff0c\u7136\u540e\u53cd\u5e8f\u5f62\u6210\u94fe\u8868\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u6253\u5370\u94fe\u8868\u7684\u5185\u5bb9\uff1a l = list while l do print ( l . value ) l = l . next end \u5728\u540c\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u53ef\u4ee5\u6df7\u5408\u5217\u8868\u98ce\u683c\u548crecord\u98ce\u683c\u8fdb\u884c\u521d\u59cb\u5316\uff0c \u5982\uff1a polyline = { color = \"blue\" , thickness = 2 , npoints = 4 , { x = 0 , y = 0 }, { x =- 10 , y = 0 }, { x =- 10 , y = 1 }, { x = 0 , y = 1 } } \u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u8868\u660e\u6211\u4eec\u53ef\u4ee5\u5d4c\u5957\u6784\u9020\u51fd\u6570\u6765\u8868\u793a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784. print(polyline[2].x) \u2192 -10 \u4e0a\u9762\u4e24\u79cd\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u8fd8\u6709\u9650\u5236\uff0c\u6bd4\u5982\u4f60\u4e0d\u80fd\u4f7f\u7528\u8d1f\u7d22\u5f15\u521d\u59cb\u5316\u4e00\u4e2a\u8868\u4e2d\u5143\u7d20\uff0c\u5b57\u7b26\u4e32\u7d22\u5f15\u4e5f\u4e0d\u80fd\u88ab\u6070\u5f53\u7684\u8868\u793a\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e00\u79cd\u66f4\u4e00\u822c\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u6211\u4eec\u7528[expression]\u663e\u793a\u7684\u8868\u793a\u5c06\u88ab\u521d\u59cb\u5316\u7684\u7d22\u5f15\uff1a opnames = {[ \"+\" ] = \"add\" , [ \"-\" ] = \"sub\" ,[ \"*\" ] = \"mul\" , [ \"/\" ] = \"div\" } i = 20 ; s = \"-\" a = {[ i + 0 ] = s , [ i + 1 ] = s .. s , [ i + 2 ] = s .. s .. s } print ( opnames [ s ]) --> sub print ( a [ 22 ]) --> --- list\u98ce\u683c\u521d\u59cb\u5316\u548crecord\u98ce\u683c\u521d\u59cb\u5316\u662f\u8fd9\u79cd\u4e00\u822c\u521d\u59cb\u5316\u7684\u7279\u4f8b: { x = 0 , y = 0 } <--> {[ \"x\" ] = 0 , [ \"y\" ] = 0 } { \"red\" , \"green\" , \"blue\" } <--> {[ 1 ] = \"red\" , [ 2 ] = \"green\" , [ 3 ] = \"blue\" } \u5982\u679c\u771f\u7684\u60f3\u8981\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\uff1a days = {[ 0 ] = \"Sunday\" , \"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thursday\" , \"Friday\" , \"Saturday\" } \u6ce8\u610f\uff1a\u4e0d\u63a8\u8350\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u5426\u5219\u5f88\u591a\u6807\u51c6\u5e93\u4e0d\u80fd\u4f7f\u7528\u3002 \u5728\u6784\u9020\u51fd\u6570\u7684\u6700\u540e\u7684\",\"\u662f\u53ef\u9009\u7684\uff0c\u53ef\u4ee5\u65b9\u4fbf\u4ee5\u540e\u7684\u6269\u5c55\u3002 a = {[1]=\"red\", [2]=\"green\", [3]=\"blue\",} \u5728\u6784\u9020\u51fd\u6570\u4e2d\u57df\u5206\u9694\u7b26\u9017\u53f7\uff08\",\"\uff09\u53ef\u4ee5\u7528\u5206\u53f7\uff08\";\"\uff09\u66ff\u4ee3\uff0c\u901a\u5e38\u6211\u4eec\u4f7f\u7528\u5206\u53f7\u7528\u6765\u5206\u5272\u4e0d\u540c\u7c7b\u578b\u7684\u8868\u5143\u7d20\u3002 {x=10, y=45; \"one\", \"two\", \"three\"}","title":"lua \u8868\u7684\u6784\u9020"},{"location":"lua/%E8%A1%A8%E7%9A%84%E6%9E%84%E9%80%A0/#_1","text":"\u6784\u9020\u5668\u662f\u521b\u5efa\u548c\u521d\u59cb\u5316\u8868\u7684\u8868\u8fbe\u5f0f\u3002\u8868\u662fLua\u7279\u6709\u7684\u529f\u80fd\u5f3a\u5927\u7684\u4e1c\u897f\u3002\u6700\u7b80\u5355\u7684\u6784\u9020\u51fd\u6570\u662f{}\uff0c\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u8868\u3002\u53ef\u4ee5\u76f4\u63a5\u521d\u59cb\u5316\u6570\u7ec4: days = { \"Sunday\" , \"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thursday\" , \"Friday\" , \"Saturday\" } Lua\u5c06\"Sunday\"\u521d\u59cb\u5316days[1]\uff08\u7b2c\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15\u4e3a1\uff09\uff0c \u7528\"Monday\"\u521d\u59cb\u5316days[2]... print(days[4]) --> Wednesday \u6784\u9020\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\uff1a tab = {sin(1), sin(2), sin(3), sin(4), sin(5),sin(6), sin(7), sin(8)} \u5982\u679c\u60f3\u521d\u59cb\u5316\u4e00\u4e2a\u8868\u4f5c\u4e3arecord\u4f7f\u7528\u53ef\u4ee5\u8fd9\u6837\uff1a a = {x=0, y=0} <--> a = {}; a.x=0; a.y=0 \u4e0d\u7ba1\u7528\u4f55\u79cd\u65b9\u5f0f\u521b\u5efatable\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5411\u8868\u4e2d\u6dfb\u52a0\u6216\u8005\u5220\u9664\u4efb\u4f55\u7c7b\u578b\u7684\u57df\uff0c\u6784\u9020\u51fd\u6570\u4ec5\u4ec5\u5f71\u54cd\u8868\u7684\u521d\u59cb\u5316\u3002 w = { x = 0 , y = 0 , label = \"console\" } x = { sin ( 0 ), sin ( 1 ), sin ( 2 )} w [ 1 ] = \"another field\" x . f = w print ( w [ \"x\" ]) --> 0 print ( w [ 1 ]) --> another field print ( x . f [ 1 ]) --> another field w . x = nil -- remove field \"x\" \u6bcf\u6b21\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0cLua\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684table\uff0c\u53ef\u4ee5\u4f7f\u7528table\u6784\u9020\u4e00\u4e2alist\uff1a list = nil for line in io.lines () do list = { next = list , value = line } end \u8fd9\u6bb5\u4ee3\u7801\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u8fdb\u6bcf\u884c\uff0c\u7136\u540e\u53cd\u5e8f\u5f62\u6210\u94fe\u8868\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u6253\u5370\u94fe\u8868\u7684\u5185\u5bb9\uff1a l = list while l do print ( l . value ) l = l . next end \u5728\u540c\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u4e2d\u53ef\u4ee5\u6df7\u5408\u5217\u8868\u98ce\u683c\u548crecord\u98ce\u683c\u8fdb\u884c\u521d\u59cb\u5316\uff0c \u5982\uff1a polyline = { color = \"blue\" , thickness = 2 , npoints = 4 , { x = 0 , y = 0 }, { x =- 10 , y = 0 }, { x =- 10 , y = 1 }, { x = 0 , y = 1 } } \u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u8868\u660e\u6211\u4eec\u53ef\u4ee5\u5d4c\u5957\u6784\u9020\u51fd\u6570\u6765\u8868\u793a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784. print(polyline[2].x) \u2192 -10 \u4e0a\u9762\u4e24\u79cd\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u65b9\u5f0f\u8fd8\u6709\u9650\u5236\uff0c\u6bd4\u5982\u4f60\u4e0d\u80fd\u4f7f\u7528\u8d1f\u7d22\u5f15\u521d\u59cb\u5316\u4e00\u4e2a\u8868\u4e2d\u5143\u7d20\uff0c\u5b57\u7b26\u4e32\u7d22\u5f15\u4e5f\u4e0d\u80fd\u88ab\u6070\u5f53\u7684\u8868\u793a\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e00\u79cd\u66f4\u4e00\u822c\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u6211\u4eec\u7528[expression]\u663e\u793a\u7684\u8868\u793a\u5c06\u88ab\u521d\u59cb\u5316\u7684\u7d22\u5f15\uff1a opnames = {[ \"+\" ] = \"add\" , [ \"-\" ] = \"sub\" ,[ \"*\" ] = \"mul\" , [ \"/\" ] = \"div\" } i = 20 ; s = \"-\" a = {[ i + 0 ] = s , [ i + 1 ] = s .. s , [ i + 2 ] = s .. s .. s } print ( opnames [ s ]) --> sub print ( a [ 22 ]) --> --- list\u98ce\u683c\u521d\u59cb\u5316\u548crecord\u98ce\u683c\u521d\u59cb\u5316\u662f\u8fd9\u79cd\u4e00\u822c\u521d\u59cb\u5316\u7684\u7279\u4f8b: { x = 0 , y = 0 } <--> {[ \"x\" ] = 0 , [ \"y\" ] = 0 } { \"red\" , \"green\" , \"blue\" } <--> {[ 1 ] = \"red\" , [ 2 ] = \"green\" , [ 3 ] = \"blue\" } \u5982\u679c\u771f\u7684\u60f3\u8981\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\uff1a days = {[ 0 ] = \"Sunday\" , \"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thursday\" , \"Friday\" , \"Saturday\" } \u6ce8\u610f\uff1a\u4e0d\u63a8\u8350\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u5426\u5219\u5f88\u591a\u6807\u51c6\u5e93\u4e0d\u80fd\u4f7f\u7528\u3002 \u5728\u6784\u9020\u51fd\u6570\u7684\u6700\u540e\u7684\",\"\u662f\u53ef\u9009\u7684\uff0c\u53ef\u4ee5\u65b9\u4fbf\u4ee5\u540e\u7684\u6269\u5c55\u3002 a = {[1]=\"red\", [2]=\"green\", [3]=\"blue\",} \u5728\u6784\u9020\u51fd\u6570\u4e2d\u57df\u5206\u9694\u7b26\u9017\u53f7\uff08\",\"\uff09\u53ef\u4ee5\u7528\u5206\u53f7\uff08\";\"\uff09\u66ff\u4ee3\uff0c\u901a\u5e38\u6211\u4eec\u4f7f\u7528\u5206\u53f7\u7528\u6765\u5206\u5272\u4e0d\u540c\u7c7b\u578b\u7684\u8868\u5143\u7d20\u3002 {x=10, y=45; \"one\", \"two\", \"three\"}","title":"\u8868\u7684\u6784\u9020"},{"location":"lua/%E8%A7%A3%E6%9E%90json%E6%95%B0%E6%8D%AE/","text":"\u5b57\u7b26\u4e32\u5230lua\u5bf9\u8c61 \u00b6 str = '{\"hobby\":[\"film\",\"music\",\"read\"],\"is_male\":false,\"name\":\"zhangsan\",\"id\":1,\"age\":null}' local obj , pos , err = dkjson . decode ( str , 1 , nil ) print ( obj . age ) lua\u5bf9\u8c61\u5230\u5b57\u7b26\u4e32 \u00b6 local obj = { id = 1 , name = \"zhangsan\" , age = nil , is_male = false , hobby = { \"film\" , \"music\" , \"read\" } } local str = dkjson . encode ( obj , { indent = true }) print ( str ) dkjson.lua \u6e90\u7801 \u00b6 -- Module options: local always_try_using_lpeg = true local register_global_module_table = false local global_module_name = 'json' --[==[ David Kolf's JSON module for Lua 5.1/5.2 Version 2.5 For the documentation see the corresponding readme.txt or visit <http://dkolf.de/src/dkjson-lua.fsl/>. You can contact the author by sending an e-mail to 'david' at the domain 'dkolf.de'. Copyright (C) 2010-2013 David Heiko Kolf Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. --]==] -- global dependencies: local pairs , type , tostring , tonumber , getmetatable , setmetatable , rawset = pairs , type , tostring , tonumber , getmetatable , setmetatable , rawset local error , require , pcall , select = error , require , pcall , select local floor , huge = math.floor , math.huge local strrep , gsub , strsub , strbyte , strchar , strfind , strlen , strformat = string.rep , string.gsub , string.sub , string.byte , string.char , string.find , string.len , string.format local strmatch = string.match local concat = table.concat local json = { version = \"dkjson 2.5\" } if register_global_module_table then _G [ global_module_name ] = json end local _ENV = nil -- blocking globals in Lua 5.2 pcall ( function () -- Enable access to blocked metatables. -- Don't worry, this module doesn't change anything in them. local debmeta = require \"debug\" . getmetatable if debmeta then getmetatable = debmeta end end ) json . null = setmetatable ({}, { __tojson = function () return \"null\" end }) local function isarray ( tbl ) local max , n , arraylen = 0 , 0 , 0 for k , v in pairs ( tbl ) do if k == 'n' and type ( v ) == 'number' then arraylen = v if v > max then max = v end else if type ( k ) ~= 'number' or k < 1 or floor ( k ) ~= k then return false end if k > max then max = k end n = n + 1 end end if max > 10 and max > arraylen and max > n * 2 then return false -- don't create an array with too many holes end return true , max end local escapecodes = { [ \" \\\" \" ] = \" \\\\\\\" \" , [ \" \\\\ \" ] = \" \\\\\\\\ \" , [ \" \\b \" ] = \" \\\\ b\" , [ \" \\f \" ] = \" \\\\ f\" , [ \" \\n \" ] = \" \\\\ n\" , [ \" \\r \" ] = \" \\\\ r\" , [ \" \\t \" ] = \" \\\\ t\" } local function escapeutf8 ( uchar ) local value = escapecodes [ uchar ] if value then return value end local a , b , c , d = strbyte ( uchar , 1 , 4 ) a , b , c , d = a or 0 , b or 0 , c or 0 , d or 0 if a <= 0x7f then value = a elseif 0xc0 <= a and a <= 0xdf and b >= 0x80 then value = ( a - 0xc0 ) * 0x40 + b - 0x80 elseif 0xe0 <= a and a <= 0xef and b >= 0x80 and c >= 0x80 then value = (( a - 0xe0 ) * 0x40 + b - 0x80 ) * 0x40 + c - 0x80 elseif 0xf0 <= a and a <= 0xf7 and b >= 0x80 and c >= 0x80 and d >= 0x80 then value = ((( a - 0xf0 ) * 0x40 + b - 0x80 ) * 0x40 + c - 0x80 ) * 0x40 + d - 0x80 else return \"\" end if value <= 0xffff then return strformat ( \" \\\\ u%.4x\" , value ) elseif value <= 0x10ffff then -- encode as UTF-16 surrogate pair value = value - 0x10000 local highsur , lowsur = 0xD800 + floor ( value / 0x400 ), 0xDC00 + ( value % 0x400 ) return strformat ( \" \\\\ u%.4x \\\\ u%.4x\" , highsur , lowsur ) else return \"\" end end local function fsub ( str , pattern , repl ) -- gsub always builds a new string in a buffer, even when no match -- exists. First using find should be more efficient when most strings -- don't contain the pattern. if strfind ( str , pattern ) then return gsub ( str , pattern , repl ) else return str end end local function quotestring ( value ) -- based on the regexp \"escapable\" in https://github.com/douglascrockford/JSON-js value = fsub ( value , \"[%z \\1 - \\31\\\"\\\\\\127 ]\" , escapeutf8 ) if strfind ( value , \"[ \\194\\216\\220\\225\\226\\239 ]\" ) then value = fsub ( value , \" \\194 [ \\128 - \\159\\173 ]\" , escapeutf8 ) value = fsub ( value , \" \\216 [ \\128 - \\132 ]\" , escapeutf8 ) value = fsub ( value , \" \\220\\143 \" , escapeutf8 ) value = fsub ( value , \" \\225\\158 [ \\180\\181 ]\" , escapeutf8 ) value = fsub ( value , \" \\226\\128 [ \\140 - \\143\\168 - \\175 ]\" , escapeutf8 ) value = fsub ( value , \" \\226\\129 [ \\160 - \\175 ]\" , escapeutf8 ) value = fsub ( value , \" \\239\\187\\191 \" , escapeutf8 ) value = fsub ( value , \" \\239\\191 [ \\176 - \\191 ]\" , escapeutf8 ) end return \" \\\" \" .. value .. \" \\\" \" end json . quotestring = quotestring local function replace ( str , o , n ) local i , j = strfind ( str , o , 1 , true ) if i then return strsub ( str , 1 , i - 1 ) .. n .. strsub ( str , j + 1 , - 1 ) else return str end end -- locale independent num2str and str2num functions local decpoint , numfilter local function updatedecpoint () decpoint = strmatch ( tostring ( 0.5 ), \"([^05+])\" ) -- build a filter that can be used to remove group separators numfilter = \"[^0-9%-%+eE\" .. gsub ( decpoint , \"[%^%$%(%)%%%.%[%]%*%+%-%?]\" , \"%%%0\" ) .. \"]+\" end updatedecpoint () local function num2str ( num ) return replace ( fsub ( tostring ( num ), numfilter , \"\" ), decpoint , \".\" ) end local function str2num ( str ) local num = tonumber ( replace ( str , \".\" , decpoint )) if not num then updatedecpoint () num = tonumber ( replace ( str , \".\" , decpoint )) end return num end local function addnewline2 ( level , buffer , buflen ) buffer [ buflen + 1 ] = \" \\n \" buffer [ buflen + 2 ] = strrep ( \" \" , level ) buflen = buflen + 2 return buflen end function json . addnewline ( state ) if state . indent then state . bufferlen = addnewline2 ( state . level or 0 , state . buffer , state . bufferlen or # ( state . buffer )) end end local encode2 -- forward declaration local function addpair ( key , value , prev , indent , level , buffer , buflen , tables , globalorder , state ) local kt = type ( key ) if kt ~= 'string' and kt ~= 'number' then return nil , \"type '\" .. kt .. \"' is not supported as a key by JSON.\" end if prev then buflen = buflen + 1 buffer [ buflen ] = \",\" end if indent then buflen = addnewline2 ( level , buffer , buflen ) end buffer [ buflen + 1 ] = quotestring ( key ) buffer [ buflen + 2 ] = \":\" return encode2 ( value , indent , level , buffer , buflen + 2 , tables , globalorder , state ) end local function appendcustom ( res , buffer , state ) local buflen = state . bufferlen if type ( res ) == 'string' then buflen = buflen + 1 buffer [ buflen ] = res end return buflen end local function exception ( reason , value , state , buffer , buflen , defaultmessage ) defaultmessage = defaultmessage or reason local handler = state . exception if not handler then return nil , defaultmessage else state . bufferlen = buflen local ret , msg = handler ( reason , value , state , defaultmessage ) if not ret then return nil , msg or defaultmessage end return appendcustom ( ret , buffer , state ) end end function json . encodeexception ( reason , value , state , defaultmessage ) return quotestring ( \"<\" .. defaultmessage .. \">\" ) end encode2 = function ( value , indent , level , buffer , buflen , tables , globalorder , state ) local valtype = type ( value ) local valmeta = getmetatable ( value ) valmeta = type ( valmeta ) == 'table' and valmeta -- only tables local valtojson = valmeta and valmeta . __tojson if valtojson then if tables [ value ] then return exception ( 'reference cycle' , value , state , buffer , buflen ) end tables [ value ] = true state . bufferlen = buflen local ret , msg = valtojson ( value , state ) if not ret then return exception ( 'custom encoder failed' , value , state , buffer , buflen , msg ) end tables [ value ] = nil buflen = appendcustom ( ret , buffer , state ) elseif value == nil then buflen = buflen + 1 buffer [ buflen ] = \"null\" elseif valtype == 'number' then local s if value ~= value or value >= huge or - value >= huge then -- This is the behaviour of the original JSON implementation. s = \"null\" else s = num2str ( value ) end buflen = buflen + 1 buffer [ buflen ] = s elseif valtype == 'boolean' then buflen = buflen + 1 buffer [ buflen ] = value and \"true\" or \"false\" elseif valtype == 'string' then buflen = buflen + 1 buffer [ buflen ] = quotestring ( value ) elseif valtype == 'table' then if tables [ value ] then return exception ( 'reference cycle' , value , state , buffer , buflen ) end tables [ value ] = true level = level + 1 local isa , n = isarray ( value ) if n == 0 and valmeta and valmeta . __jsontype == 'object' then isa = false end local msg if isa then -- JSON array buflen = buflen + 1 buffer [ buflen ] = \"[\" for i = 1 , n do buflen , msg = encode2 ( value [ i ], indent , level , buffer , buflen , tables , globalorder , state ) if not buflen then return nil , msg end if i < n then buflen = buflen + 1 buffer [ buflen ] = \",\" end end buflen = buflen + 1 buffer [ buflen ] = \"]\" else -- JSON object local prev = false buflen = buflen + 1 buffer [ buflen ] = \"{\" local order = valmeta and valmeta . __jsonorder or globalorder if order then local used = {} n = # order for i = 1 , n do local k = order [ i ] local v = value [ k ] if v then used [ k ] = true buflen , msg = addpair ( k , v , prev , indent , level , buffer , buflen , tables , globalorder , state ) prev = true -- add a seperator before the next element end end for k , v in pairs ( value ) do if not used [ k ] then buflen , msg = addpair ( k , v , prev , indent , level , buffer , buflen , tables , globalorder , state ) if not buflen then return nil , msg end prev = true -- add a seperator before the next element end end else -- unordered for k , v in pairs ( value ) do buflen , msg = addpair ( k , v , prev , indent , level , buffer , buflen , tables , globalorder , state ) if not buflen then return nil , msg end prev = true -- add a seperator before the next element end end if indent then buflen = addnewline2 ( level - 1 , buffer , buflen ) end buflen = buflen + 1 buffer [ buflen ] = \"}\" end tables [ value ] = nil else return exception ( 'unsupported type' , value , state , buffer , buflen , \"type '\" .. valtype .. \"' is not supported by JSON.\" ) end return buflen end function json . encode ( value , state ) state = state or {} local oldbuffer = state . buffer local buffer = oldbuffer or {} state . buffer = buffer updatedecpoint () local ret , msg = encode2 ( value , state . indent , state . level or 0 , buffer , state . bufferlen or 0 , state . tables or {}, state . keyorder , state ) if not ret then error ( msg , 2 ) elseif oldbuffer == buffer then state . bufferlen = ret return true else state . bufferlen = nil state . buffer = nil return concat ( buffer ) end end local function loc ( str , where ) local line , pos , linepos = 1 , 1 , 0 while true do pos = strfind ( str , \" \\n \" , pos , true ) if pos and pos < where then line = line + 1 linepos = pos pos = pos + 1 else break end end return \"line \" .. line .. \", column \" .. ( where - linepos ) end local function unterminated ( str , what , where ) return nil , strlen ( str ) + 1 , \"unterminated \" .. what .. \" at \" .. loc ( str , where ) end local function scanwhite ( str , pos ) while true do pos = strfind ( str , \"%S\" , pos ) if not pos then return nil end local sub2 = strsub ( str , pos , pos + 1 ) if sub2 == \" \\239\\187 \" and strsub ( str , pos + 2 , pos + 2 ) == \" \\191 \" then -- UTF-8 Byte Order Mark pos = pos + 3 elseif sub2 == \"//\" then pos = strfind ( str , \"[ \\n\\r ]\" , pos + 2 ) if not pos then return nil end elseif sub2 == \"/*\" then pos = strfind ( str , \"*/\" , pos + 2 ) if not pos then return nil end pos = pos + 2 else return pos end end end local escapechars = { [ \" \\\" \" ] = \" \\\" \" , [ \" \\\\ \" ] = \" \\\\ \" , [ \"/\" ] = \"/\" , [ \"b\" ] = \" \\b \" , [ \"f\" ] = \" \\f \" , [ \"n\" ] = \" \\n \" , [ \"r\" ] = \" \\r \" , [ \"t\" ] = \" \\t \" } local function unichar ( value ) if value < 0 then return nil elseif value <= 0x007f then return strchar ( value ) elseif value <= 0x07ff then return strchar ( 0xc0 + floor ( value / 0x40 ), 0x80 + ( floor ( value ) % 0x40 )) elseif value <= 0xffff then return strchar ( 0xe0 + floor ( value / 0x1000 ), 0x80 + ( floor ( value / 0x40 ) % 0x40 ), 0x80 + ( floor ( value ) % 0x40 )) elseif value <= 0x10ffff then return strchar ( 0xf0 + floor ( value / 0x40000 ), 0x80 + ( floor ( value / 0x1000 ) % 0x40 ), 0x80 + ( floor ( value / 0x40 ) % 0x40 ), 0x80 + ( floor ( value ) % 0x40 )) else return nil end end local function scanstring ( str , pos ) local lastpos = pos + 1 local buffer , n = {}, 0 while true do local nextpos = strfind ( str , \"[ \\\"\\\\ ]\" , lastpos ) if not nextpos then return unterminated ( str , \"string\" , pos ) end if nextpos > lastpos then n = n + 1 buffer [ n ] = strsub ( str , lastpos , nextpos - 1 ) end if strsub ( str , nextpos , nextpos ) == \" \\\" \" then lastpos = nextpos + 1 break else local escchar = strsub ( str , nextpos + 1 , nextpos + 1 ) local value if escchar == \"u\" then value = tonumber ( strsub ( str , nextpos + 2 , nextpos + 5 ), 16 ) if value then local value2 if 0xD800 <= value and value <= 0xDBff then -- we have the high surrogate of UTF-16. Check if there is a -- low surrogate escaped nearby to combine them. if strsub ( str , nextpos + 6 , nextpos + 7 ) == \" \\\\ u\" then value2 = tonumber ( strsub ( str , nextpos + 8 , nextpos + 11 ), 16 ) if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then value = ( value - 0xD800 ) * 0x400 + ( value2 - 0xDC00 ) + 0x10000 else value2 = nil -- in case it was out of range for a low surrogate end end end value = value and unichar ( value ) if value then if value2 then lastpos = nextpos + 12 else lastpos = nextpos + 6 end end end end if not value then value = escapechars [ escchar ] or escchar lastpos = nextpos + 2 end n = n + 1 buffer [ n ] = value end end if n == 1 then return buffer [ 1 ], lastpos elseif n > 1 then return concat ( buffer ), lastpos else return \"\" , lastpos end end local scanvalue -- forward declaration local function scantable ( what , closechar , str , startpos , nullval , objectmeta , arraymeta ) local len = strlen ( str ) local tbl , n = {}, 0 local pos = startpos + 1 if what == 'object' then setmetatable ( tbl , objectmeta ) else setmetatable ( tbl , arraymeta ) end while true do pos = scanwhite ( str , pos ) if not pos then return unterminated ( str , what , startpos ) end local char = strsub ( str , pos , pos ) if char == closechar then return tbl , pos + 1 end local val1 , err val1 , pos , err = scanvalue ( str , pos , nullval , objectmeta , arraymeta ) if err then return nil , pos , err end pos = scanwhite ( str , pos ) if not pos then return unterminated ( str , what , startpos ) end char = strsub ( str , pos , pos ) if char == \":\" then if val1 == nil then return nil , pos , \"cannot use nil as table index (at \" .. loc ( str , pos ) .. \")\" end pos = scanwhite ( str , pos + 1 ) if not pos then return unterminated ( str , what , startpos ) end local val2 val2 , pos , err = scanvalue ( str , pos , nullval , objectmeta , arraymeta ) if err then return nil , pos , err end tbl [ val1 ] = val2 pos = scanwhite ( str , pos ) if not pos then return unterminated ( str , what , startpos ) end char = strsub ( str , pos , pos ) else n = n + 1 tbl [ n ] = val1 end if char == \",\" then pos = pos + 1 end end end scanvalue = function ( str , pos , nullval , objectmeta , arraymeta ) pos = pos or 1 pos = scanwhite ( str , pos ) if not pos then return nil , strlen ( str ) + 1 , \"no valid JSON value (reached the end)\" end local char = strsub ( str , pos , pos ) if char == \"{\" then return scantable ( 'object' , \"}\" , str , pos , nullval , objectmeta , arraymeta ) elseif char == \"[\" then return scantable ( 'array' , \"]\" , str , pos , nullval , objectmeta , arraymeta ) elseif char == \" \\\" \" then return scanstring ( str , pos ) else local pstart , pend = strfind ( str , \"^%-?[%d%.]+[eE]?[%+%-]?%d*\" , pos ) if pstart then local number = str2num ( strsub ( str , pstart , pend )) if number then return number , pend + 1 end end pstart , pend = strfind ( str , \"^%a%w*\" , pos ) if pstart then local name = strsub ( str , pstart , pend ) if name == \"true\" then return true , pend + 1 elseif name == \"false\" then return false , pend + 1 elseif name == \"null\" then return nullval , pend + 1 end end return nil , pos , \"no valid JSON value at \" .. loc ( str , pos ) end end local function optionalmetatables (...) if select ( \"#\" , ...) > 0 then return ... else return { __jsontype = 'object' }, { __jsontype = 'array' } end end function json . decode ( str , pos , nullval , ...) local objectmeta , arraymeta = optionalmetatables (...) return scanvalue ( str , pos , nullval , objectmeta , arraymeta ) end function json . use_lpeg () local g = require ( \"lpeg\" ) if g . version () == \"0.11\" then error \"due to a bug in LPeg 0.11, it cannot be used for JSON matching\" end local pegmatch = g . match local P , S , R = g . P , g . S , g . R local function ErrorCall ( str , pos , msg , state ) if not state . msg then state . msg = msg .. \" at \" .. loc ( str , pos ) state . pos = pos end return false end local function Err ( msg ) return g . Cmt ( g . Cc ( msg ) * g . Carg ( 2 ), ErrorCall ) end local SingleLineComment = P \"//\" * ( 1 - S \" \\n\\r \" ) ^ 0 local MultiLineComment = P \"/*\" * ( 1 - P \"*/\" ) ^ 0 * P \"*/\" local Space = ( S \" \\n\\r\\t \" + P \" \\239\\187\\191 \" + SingleLineComment + MultiLineComment ) ^ 0 local PlainChar = 1 - S \" \\\"\\\\\\n\\r \" local EscapeSequence = ( P \" \\\\ \" * g . C ( S \" \\\"\\\\ /bfnrt\" + Err \"unsupported escape sequence\" )) / escapechars local HexDigit = R ( \"09\" , \"af\" , \"AF\" ) local function UTF16Surrogate ( match , pos , high , low ) high , low = tonumber ( high , 16 ), tonumber ( low , 16 ) if 0xD800 <= high and high <= 0xDBff and 0xDC00 <= low and low <= 0xDFFF then return true , unichar (( high - 0xD800 ) * 0x400 + ( low - 0xDC00 ) + 0x10000 ) else return false end end local function UTF16BMP ( hex ) return unichar ( tonumber ( hex , 16 )) end local U16Sequence = ( P \" \\\\ u\" * g . C ( HexDigit * HexDigit * HexDigit * HexDigit )) local UnicodeEscape = g . Cmt ( U16Sequence * U16Sequence , UTF16Surrogate ) + U16Sequence / UTF16BMP local Char = UnicodeEscape + EscapeSequence + PlainChar local String = P \" \\\" \" * g . Cs ( Char ^ 0 ) * ( P \" \\\" \" + Err \"unterminated string\" ) local Integer = P \"-\" ^ ( - 1 ) * ( P \"0\" + ( R \"19\" * R \"09\" ^ 0 )) local Fractal = P \".\" * R \"09\" ^ 0 local Exponent = ( S \"eE\" ) * ( S \"+-\" ) ^ ( - 1 ) * R \"09\" ^ 1 local Number = ( Integer * Fractal ^ ( - 1 ) * Exponent ^ ( - 1 )) / str2num local Constant = P \"true\" * g . Cc ( true ) + P \"false\" * g . Cc ( false ) + P \"null\" * g . Carg ( 1 ) local SimpleValue = Number + String + Constant local ArrayContent , ObjectContent -- The functions parsearray and parseobject parse only a single value/pair -- at a time and store them directly to avoid hitting the LPeg limits. local function parsearray ( str , pos , nullval , state ) local obj , cont local npos local t , nt = {}, 0 repeat obj , cont , npos = pegmatch ( ArrayContent , str , pos , nullval , state ) if not npos then break end pos = npos nt = nt + 1 t [ nt ] = obj until cont == 'last' return pos , setmetatable ( t , state . arraymeta ) end local function parseobject ( str , pos , nullval , state ) local obj , key , cont local npos local t = {} repeat key , obj , cont , npos = pegmatch ( ObjectContent , str , pos , nullval , state ) if not npos then break end pos = npos t [ key ] = obj until cont == 'last' return pos , setmetatable ( t , state . objectmeta ) end local Array = P \"[\" * g . Cmt ( g . Carg ( 1 ) * g . Carg ( 2 ), parsearray ) * Space * ( P \"]\" + Err \"']' expected\" ) local Object = P \"{\" * g . Cmt ( g . Carg ( 1 ) * g . Carg ( 2 ), parseobject ) * Space * ( P \"}\" + Err \"'}' expected\" ) local Value = Space * ( Array + Object + SimpleValue ) local ExpectedValue = Value + Space * Err \"value expected\" ArrayContent = Value * Space * ( P \",\" * g . Cc 'cont' + g . Cc 'last' ) * g . Cp () local Pair = g . Cg ( Space * String * Space * ( P \":\" + Err \"colon expected\" ) * ExpectedValue ) ObjectContent = Pair * Space * ( P \",\" * g . Cc 'cont' + g . Cc 'last' ) * g . Cp () local DecodeValue = ExpectedValue * g . Cp () function json . decode ( str , pos , nullval , ...) local state = {} state . objectmeta , state . arraymeta = optionalmetatables (...) local obj , retpos = pegmatch ( DecodeValue , str , pos , nullval , state ) if state . msg then return nil , state . pos , state . msg else return obj , retpos end end -- use this function only once: json . use_lpeg = function () return json end json . using_lpeg = true return json -- so you can get the module using json = require \"dkjson\".use_lpeg() end if always_try_using_lpeg then pcall ( json . use_lpeg ) end return json","title":"lua \u89e3\u6790json\u6570\u636e"},{"location":"lua/%E8%A7%A3%E6%9E%90json%E6%95%B0%E6%8D%AE/#lua","text":"str = '{\"hobby\":[\"film\",\"music\",\"read\"],\"is_male\":false,\"name\":\"zhangsan\",\"id\":1,\"age\":null}' local obj , pos , err = dkjson . decode ( str , 1 , nil ) print ( obj . age )","title":"\u5b57\u7b26\u4e32\u5230lua\u5bf9\u8c61"},{"location":"lua/%E8%A7%A3%E6%9E%90json%E6%95%B0%E6%8D%AE/#lua_1","text":"local obj = { id = 1 , name = \"zhangsan\" , age = nil , is_male = false , hobby = { \"film\" , \"music\" , \"read\" } } local str = dkjson . encode ( obj , { indent = true }) print ( str )","title":"lua\u5bf9\u8c61\u5230\u5b57\u7b26\u4e32"},{"location":"lua/%E8%A7%A3%E6%9E%90json%E6%95%B0%E6%8D%AE/#dkjsonlua","text":"-- Module options: local always_try_using_lpeg = true local register_global_module_table = false local global_module_name = 'json' --[==[ David Kolf's JSON module for Lua 5.1/5.2 Version 2.5 For the documentation see the corresponding readme.txt or visit <http://dkolf.de/src/dkjson-lua.fsl/>. You can contact the author by sending an e-mail to 'david' at the domain 'dkolf.de'. Copyright (C) 2010-2013 David Heiko Kolf Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. --]==] -- global dependencies: local pairs , type , tostring , tonumber , getmetatable , setmetatable , rawset = pairs , type , tostring , tonumber , getmetatable , setmetatable , rawset local error , require , pcall , select = error , require , pcall , select local floor , huge = math.floor , math.huge local strrep , gsub , strsub , strbyte , strchar , strfind , strlen , strformat = string.rep , string.gsub , string.sub , string.byte , string.char , string.find , string.len , string.format local strmatch = string.match local concat = table.concat local json = { version = \"dkjson 2.5\" } if register_global_module_table then _G [ global_module_name ] = json end local _ENV = nil -- blocking globals in Lua 5.2 pcall ( function () -- Enable access to blocked metatables. -- Don't worry, this module doesn't change anything in them. local debmeta = require \"debug\" . getmetatable if debmeta then getmetatable = debmeta end end ) json . null = setmetatable ({}, { __tojson = function () return \"null\" end }) local function isarray ( tbl ) local max , n , arraylen = 0 , 0 , 0 for k , v in pairs ( tbl ) do if k == 'n' and type ( v ) == 'number' then arraylen = v if v > max then max = v end else if type ( k ) ~= 'number' or k < 1 or floor ( k ) ~= k then return false end if k > max then max = k end n = n + 1 end end if max > 10 and max > arraylen and max > n * 2 then return false -- don't create an array with too many holes end return true , max end local escapecodes = { [ \" \\\" \" ] = \" \\\\\\\" \" , [ \" \\\\ \" ] = \" \\\\\\\\ \" , [ \" \\b \" ] = \" \\\\ b\" , [ \" \\f \" ] = \" \\\\ f\" , [ \" \\n \" ] = \" \\\\ n\" , [ \" \\r \" ] = \" \\\\ r\" , [ \" \\t \" ] = \" \\\\ t\" } local function escapeutf8 ( uchar ) local value = escapecodes [ uchar ] if value then return value end local a , b , c , d = strbyte ( uchar , 1 , 4 ) a , b , c , d = a or 0 , b or 0 , c or 0 , d or 0 if a <= 0x7f then value = a elseif 0xc0 <= a and a <= 0xdf and b >= 0x80 then value = ( a - 0xc0 ) * 0x40 + b - 0x80 elseif 0xe0 <= a and a <= 0xef and b >= 0x80 and c >= 0x80 then value = (( a - 0xe0 ) * 0x40 + b - 0x80 ) * 0x40 + c - 0x80 elseif 0xf0 <= a and a <= 0xf7 and b >= 0x80 and c >= 0x80 and d >= 0x80 then value = ((( a - 0xf0 ) * 0x40 + b - 0x80 ) * 0x40 + c - 0x80 ) * 0x40 + d - 0x80 else return \"\" end if value <= 0xffff then return strformat ( \" \\\\ u%.4x\" , value ) elseif value <= 0x10ffff then -- encode as UTF-16 surrogate pair value = value - 0x10000 local highsur , lowsur = 0xD800 + floor ( value / 0x400 ), 0xDC00 + ( value % 0x400 ) return strformat ( \" \\\\ u%.4x \\\\ u%.4x\" , highsur , lowsur ) else return \"\" end end local function fsub ( str , pattern , repl ) -- gsub always builds a new string in a buffer, even when no match -- exists. First using find should be more efficient when most strings -- don't contain the pattern. if strfind ( str , pattern ) then return gsub ( str , pattern , repl ) else return str end end local function quotestring ( value ) -- based on the regexp \"escapable\" in https://github.com/douglascrockford/JSON-js value = fsub ( value , \"[%z \\1 - \\31\\\"\\\\\\127 ]\" , escapeutf8 ) if strfind ( value , \"[ \\194\\216\\220\\225\\226\\239 ]\" ) then value = fsub ( value , \" \\194 [ \\128 - \\159\\173 ]\" , escapeutf8 ) value = fsub ( value , \" \\216 [ \\128 - \\132 ]\" , escapeutf8 ) value = fsub ( value , \" \\220\\143 \" , escapeutf8 ) value = fsub ( value , \" \\225\\158 [ \\180\\181 ]\" , escapeutf8 ) value = fsub ( value , \" \\226\\128 [ \\140 - \\143\\168 - \\175 ]\" , escapeutf8 ) value = fsub ( value , \" \\226\\129 [ \\160 - \\175 ]\" , escapeutf8 ) value = fsub ( value , \" \\239\\187\\191 \" , escapeutf8 ) value = fsub ( value , \" \\239\\191 [ \\176 - \\191 ]\" , escapeutf8 ) end return \" \\\" \" .. value .. \" \\\" \" end json . quotestring = quotestring local function replace ( str , o , n ) local i , j = strfind ( str , o , 1 , true ) if i then return strsub ( str , 1 , i - 1 ) .. n .. strsub ( str , j + 1 , - 1 ) else return str end end -- locale independent num2str and str2num functions local decpoint , numfilter local function updatedecpoint () decpoint = strmatch ( tostring ( 0.5 ), \"([^05+])\" ) -- build a filter that can be used to remove group separators numfilter = \"[^0-9%-%+eE\" .. gsub ( decpoint , \"[%^%$%(%)%%%.%[%]%*%+%-%?]\" , \"%%%0\" ) .. \"]+\" end updatedecpoint () local function num2str ( num ) return replace ( fsub ( tostring ( num ), numfilter , \"\" ), decpoint , \".\" ) end local function str2num ( str ) local num = tonumber ( replace ( str , \".\" , decpoint )) if not num then updatedecpoint () num = tonumber ( replace ( str , \".\" , decpoint )) end return num end local function addnewline2 ( level , buffer , buflen ) buffer [ buflen + 1 ] = \" \\n \" buffer [ buflen + 2 ] = strrep ( \" \" , level ) buflen = buflen + 2 return buflen end function json . addnewline ( state ) if state . indent then state . bufferlen = addnewline2 ( state . level or 0 , state . buffer , state . bufferlen or # ( state . buffer )) end end local encode2 -- forward declaration local function addpair ( key , value , prev , indent , level , buffer , buflen , tables , globalorder , state ) local kt = type ( key ) if kt ~= 'string' and kt ~= 'number' then return nil , \"type '\" .. kt .. \"' is not supported as a key by JSON.\" end if prev then buflen = buflen + 1 buffer [ buflen ] = \",\" end if indent then buflen = addnewline2 ( level , buffer , buflen ) end buffer [ buflen + 1 ] = quotestring ( key ) buffer [ buflen + 2 ] = \":\" return encode2 ( value , indent , level , buffer , buflen + 2 , tables , globalorder , state ) end local function appendcustom ( res , buffer , state ) local buflen = state . bufferlen if type ( res ) == 'string' then buflen = buflen + 1 buffer [ buflen ] = res end return buflen end local function exception ( reason , value , state , buffer , buflen , defaultmessage ) defaultmessage = defaultmessage or reason local handler = state . exception if not handler then return nil , defaultmessage else state . bufferlen = buflen local ret , msg = handler ( reason , value , state , defaultmessage ) if not ret then return nil , msg or defaultmessage end return appendcustom ( ret , buffer , state ) end end function json . encodeexception ( reason , value , state , defaultmessage ) return quotestring ( \"<\" .. defaultmessage .. \">\" ) end encode2 = function ( value , indent , level , buffer , buflen , tables , globalorder , state ) local valtype = type ( value ) local valmeta = getmetatable ( value ) valmeta = type ( valmeta ) == 'table' and valmeta -- only tables local valtojson = valmeta and valmeta . __tojson if valtojson then if tables [ value ] then return exception ( 'reference cycle' , value , state , buffer , buflen ) end tables [ value ] = true state . bufferlen = buflen local ret , msg = valtojson ( value , state ) if not ret then return exception ( 'custom encoder failed' , value , state , buffer , buflen , msg ) end tables [ value ] = nil buflen = appendcustom ( ret , buffer , state ) elseif value == nil then buflen = buflen + 1 buffer [ buflen ] = \"null\" elseif valtype == 'number' then local s if value ~= value or value >= huge or - value >= huge then -- This is the behaviour of the original JSON implementation. s = \"null\" else s = num2str ( value ) end buflen = buflen + 1 buffer [ buflen ] = s elseif valtype == 'boolean' then buflen = buflen + 1 buffer [ buflen ] = value and \"true\" or \"false\" elseif valtype == 'string' then buflen = buflen + 1 buffer [ buflen ] = quotestring ( value ) elseif valtype == 'table' then if tables [ value ] then return exception ( 'reference cycle' , value , state , buffer , buflen ) end tables [ value ] = true level = level + 1 local isa , n = isarray ( value ) if n == 0 and valmeta and valmeta . __jsontype == 'object' then isa = false end local msg if isa then -- JSON array buflen = buflen + 1 buffer [ buflen ] = \"[\" for i = 1 , n do buflen , msg = encode2 ( value [ i ], indent , level , buffer , buflen , tables , globalorder , state ) if not buflen then return nil , msg end if i < n then buflen = buflen + 1 buffer [ buflen ] = \",\" end end buflen = buflen + 1 buffer [ buflen ] = \"]\" else -- JSON object local prev = false buflen = buflen + 1 buffer [ buflen ] = \"{\" local order = valmeta and valmeta . __jsonorder or globalorder if order then local used = {} n = # order for i = 1 , n do local k = order [ i ] local v = value [ k ] if v then used [ k ] = true buflen , msg = addpair ( k , v , prev , indent , level , buffer , buflen , tables , globalorder , state ) prev = true -- add a seperator before the next element end end for k , v in pairs ( value ) do if not used [ k ] then buflen , msg = addpair ( k , v , prev , indent , level , buffer , buflen , tables , globalorder , state ) if not buflen then return nil , msg end prev = true -- add a seperator before the next element end end else -- unordered for k , v in pairs ( value ) do buflen , msg = addpair ( k , v , prev , indent , level , buffer , buflen , tables , globalorder , state ) if not buflen then return nil , msg end prev = true -- add a seperator before the next element end end if indent then buflen = addnewline2 ( level - 1 , buffer , buflen ) end buflen = buflen + 1 buffer [ buflen ] = \"}\" end tables [ value ] = nil else return exception ( 'unsupported type' , value , state , buffer , buflen , \"type '\" .. valtype .. \"' is not supported by JSON.\" ) end return buflen end function json . encode ( value , state ) state = state or {} local oldbuffer = state . buffer local buffer = oldbuffer or {} state . buffer = buffer updatedecpoint () local ret , msg = encode2 ( value , state . indent , state . level or 0 , buffer , state . bufferlen or 0 , state . tables or {}, state . keyorder , state ) if not ret then error ( msg , 2 ) elseif oldbuffer == buffer then state . bufferlen = ret return true else state . bufferlen = nil state . buffer = nil return concat ( buffer ) end end local function loc ( str , where ) local line , pos , linepos = 1 , 1 , 0 while true do pos = strfind ( str , \" \\n \" , pos , true ) if pos and pos < where then line = line + 1 linepos = pos pos = pos + 1 else break end end return \"line \" .. line .. \", column \" .. ( where - linepos ) end local function unterminated ( str , what , where ) return nil , strlen ( str ) + 1 , \"unterminated \" .. what .. \" at \" .. loc ( str , where ) end local function scanwhite ( str , pos ) while true do pos = strfind ( str , \"%S\" , pos ) if not pos then return nil end local sub2 = strsub ( str , pos , pos + 1 ) if sub2 == \" \\239\\187 \" and strsub ( str , pos + 2 , pos + 2 ) == \" \\191 \" then -- UTF-8 Byte Order Mark pos = pos + 3 elseif sub2 == \"//\" then pos = strfind ( str , \"[ \\n\\r ]\" , pos + 2 ) if not pos then return nil end elseif sub2 == \"/*\" then pos = strfind ( str , \"*/\" , pos + 2 ) if not pos then return nil end pos = pos + 2 else return pos end end end local escapechars = { [ \" \\\" \" ] = \" \\\" \" , [ \" \\\\ \" ] = \" \\\\ \" , [ \"/\" ] = \"/\" , [ \"b\" ] = \" \\b \" , [ \"f\" ] = \" \\f \" , [ \"n\" ] = \" \\n \" , [ \"r\" ] = \" \\r \" , [ \"t\" ] = \" \\t \" } local function unichar ( value ) if value < 0 then return nil elseif value <= 0x007f then return strchar ( value ) elseif value <= 0x07ff then return strchar ( 0xc0 + floor ( value / 0x40 ), 0x80 + ( floor ( value ) % 0x40 )) elseif value <= 0xffff then return strchar ( 0xe0 + floor ( value / 0x1000 ), 0x80 + ( floor ( value / 0x40 ) % 0x40 ), 0x80 + ( floor ( value ) % 0x40 )) elseif value <= 0x10ffff then return strchar ( 0xf0 + floor ( value / 0x40000 ), 0x80 + ( floor ( value / 0x1000 ) % 0x40 ), 0x80 + ( floor ( value / 0x40 ) % 0x40 ), 0x80 + ( floor ( value ) % 0x40 )) else return nil end end local function scanstring ( str , pos ) local lastpos = pos + 1 local buffer , n = {}, 0 while true do local nextpos = strfind ( str , \"[ \\\"\\\\ ]\" , lastpos ) if not nextpos then return unterminated ( str , \"string\" , pos ) end if nextpos > lastpos then n = n + 1 buffer [ n ] = strsub ( str , lastpos , nextpos - 1 ) end if strsub ( str , nextpos , nextpos ) == \" \\\" \" then lastpos = nextpos + 1 break else local escchar = strsub ( str , nextpos + 1 , nextpos + 1 ) local value if escchar == \"u\" then value = tonumber ( strsub ( str , nextpos + 2 , nextpos + 5 ), 16 ) if value then local value2 if 0xD800 <= value and value <= 0xDBff then -- we have the high surrogate of UTF-16. Check if there is a -- low surrogate escaped nearby to combine them. if strsub ( str , nextpos + 6 , nextpos + 7 ) == \" \\\\ u\" then value2 = tonumber ( strsub ( str , nextpos + 8 , nextpos + 11 ), 16 ) if value2 and 0xDC00 <= value2 and value2 <= 0xDFFF then value = ( value - 0xD800 ) * 0x400 + ( value2 - 0xDC00 ) + 0x10000 else value2 = nil -- in case it was out of range for a low surrogate end end end value = value and unichar ( value ) if value then if value2 then lastpos = nextpos + 12 else lastpos = nextpos + 6 end end end end if not value then value = escapechars [ escchar ] or escchar lastpos = nextpos + 2 end n = n + 1 buffer [ n ] = value end end if n == 1 then return buffer [ 1 ], lastpos elseif n > 1 then return concat ( buffer ), lastpos else return \"\" , lastpos end end local scanvalue -- forward declaration local function scantable ( what , closechar , str , startpos , nullval , objectmeta , arraymeta ) local len = strlen ( str ) local tbl , n = {}, 0 local pos = startpos + 1 if what == 'object' then setmetatable ( tbl , objectmeta ) else setmetatable ( tbl , arraymeta ) end while true do pos = scanwhite ( str , pos ) if not pos then return unterminated ( str , what , startpos ) end local char = strsub ( str , pos , pos ) if char == closechar then return tbl , pos + 1 end local val1 , err val1 , pos , err = scanvalue ( str , pos , nullval , objectmeta , arraymeta ) if err then return nil , pos , err end pos = scanwhite ( str , pos ) if not pos then return unterminated ( str , what , startpos ) end char = strsub ( str , pos , pos ) if char == \":\" then if val1 == nil then return nil , pos , \"cannot use nil as table index (at \" .. loc ( str , pos ) .. \")\" end pos = scanwhite ( str , pos + 1 ) if not pos then return unterminated ( str , what , startpos ) end local val2 val2 , pos , err = scanvalue ( str , pos , nullval , objectmeta , arraymeta ) if err then return nil , pos , err end tbl [ val1 ] = val2 pos = scanwhite ( str , pos ) if not pos then return unterminated ( str , what , startpos ) end char = strsub ( str , pos , pos ) else n = n + 1 tbl [ n ] = val1 end if char == \",\" then pos = pos + 1 end end end scanvalue = function ( str , pos , nullval , objectmeta , arraymeta ) pos = pos or 1 pos = scanwhite ( str , pos ) if not pos then return nil , strlen ( str ) + 1 , \"no valid JSON value (reached the end)\" end local char = strsub ( str , pos , pos ) if char == \"{\" then return scantable ( 'object' , \"}\" , str , pos , nullval , objectmeta , arraymeta ) elseif char == \"[\" then return scantable ( 'array' , \"]\" , str , pos , nullval , objectmeta , arraymeta ) elseif char == \" \\\" \" then return scanstring ( str , pos ) else local pstart , pend = strfind ( str , \"^%-?[%d%.]+[eE]?[%+%-]?%d*\" , pos ) if pstart then local number = str2num ( strsub ( str , pstart , pend )) if number then return number , pend + 1 end end pstart , pend = strfind ( str , \"^%a%w*\" , pos ) if pstart then local name = strsub ( str , pstart , pend ) if name == \"true\" then return true , pend + 1 elseif name == \"false\" then return false , pend + 1 elseif name == \"null\" then return nullval , pend + 1 end end return nil , pos , \"no valid JSON value at \" .. loc ( str , pos ) end end local function optionalmetatables (...) if select ( \"#\" , ...) > 0 then return ... else return { __jsontype = 'object' }, { __jsontype = 'array' } end end function json . decode ( str , pos , nullval , ...) local objectmeta , arraymeta = optionalmetatables (...) return scanvalue ( str , pos , nullval , objectmeta , arraymeta ) end function json . use_lpeg () local g = require ( \"lpeg\" ) if g . version () == \"0.11\" then error \"due to a bug in LPeg 0.11, it cannot be used for JSON matching\" end local pegmatch = g . match local P , S , R = g . P , g . S , g . R local function ErrorCall ( str , pos , msg , state ) if not state . msg then state . msg = msg .. \" at \" .. loc ( str , pos ) state . pos = pos end return false end local function Err ( msg ) return g . Cmt ( g . Cc ( msg ) * g . Carg ( 2 ), ErrorCall ) end local SingleLineComment = P \"//\" * ( 1 - S \" \\n\\r \" ) ^ 0 local MultiLineComment = P \"/*\" * ( 1 - P \"*/\" ) ^ 0 * P \"*/\" local Space = ( S \" \\n\\r\\t \" + P \" \\239\\187\\191 \" + SingleLineComment + MultiLineComment ) ^ 0 local PlainChar = 1 - S \" \\\"\\\\\\n\\r \" local EscapeSequence = ( P \" \\\\ \" * g . C ( S \" \\\"\\\\ /bfnrt\" + Err \"unsupported escape sequence\" )) / escapechars local HexDigit = R ( \"09\" , \"af\" , \"AF\" ) local function UTF16Surrogate ( match , pos , high , low ) high , low = tonumber ( high , 16 ), tonumber ( low , 16 ) if 0xD800 <= high and high <= 0xDBff and 0xDC00 <= low and low <= 0xDFFF then return true , unichar (( high - 0xD800 ) * 0x400 + ( low - 0xDC00 ) + 0x10000 ) else return false end end local function UTF16BMP ( hex ) return unichar ( tonumber ( hex , 16 )) end local U16Sequence = ( P \" \\\\ u\" * g . C ( HexDigit * HexDigit * HexDigit * HexDigit )) local UnicodeEscape = g . Cmt ( U16Sequence * U16Sequence , UTF16Surrogate ) + U16Sequence / UTF16BMP local Char = UnicodeEscape + EscapeSequence + PlainChar local String = P \" \\\" \" * g . Cs ( Char ^ 0 ) * ( P \" \\\" \" + Err \"unterminated string\" ) local Integer = P \"-\" ^ ( - 1 ) * ( P \"0\" + ( R \"19\" * R \"09\" ^ 0 )) local Fractal = P \".\" * R \"09\" ^ 0 local Exponent = ( S \"eE\" ) * ( S \"+-\" ) ^ ( - 1 ) * R \"09\" ^ 1 local Number = ( Integer * Fractal ^ ( - 1 ) * Exponent ^ ( - 1 )) / str2num local Constant = P \"true\" * g . Cc ( true ) + P \"false\" * g . Cc ( false ) + P \"null\" * g . Carg ( 1 ) local SimpleValue = Number + String + Constant local ArrayContent , ObjectContent -- The functions parsearray and parseobject parse only a single value/pair -- at a time and store them directly to avoid hitting the LPeg limits. local function parsearray ( str , pos , nullval , state ) local obj , cont local npos local t , nt = {}, 0 repeat obj , cont , npos = pegmatch ( ArrayContent , str , pos , nullval , state ) if not npos then break end pos = npos nt = nt + 1 t [ nt ] = obj until cont == 'last' return pos , setmetatable ( t , state . arraymeta ) end local function parseobject ( str , pos , nullval , state ) local obj , key , cont local npos local t = {} repeat key , obj , cont , npos = pegmatch ( ObjectContent , str , pos , nullval , state ) if not npos then break end pos = npos t [ key ] = obj until cont == 'last' return pos , setmetatable ( t , state . objectmeta ) end local Array = P \"[\" * g . Cmt ( g . Carg ( 1 ) * g . Carg ( 2 ), parsearray ) * Space * ( P \"]\" + Err \"']' expected\" ) local Object = P \"{\" * g . Cmt ( g . Carg ( 1 ) * g . Carg ( 2 ), parseobject ) * Space * ( P \"}\" + Err \"'}' expected\" ) local Value = Space * ( Array + Object + SimpleValue ) local ExpectedValue = Value + Space * Err \"value expected\" ArrayContent = Value * Space * ( P \",\" * g . Cc 'cont' + g . Cc 'last' ) * g . Cp () local Pair = g . Cg ( Space * String * Space * ( P \":\" + Err \"colon expected\" ) * ExpectedValue ) ObjectContent = Pair * Space * ( P \",\" * g . Cc 'cont' + g . Cc 'last' ) * g . Cp () local DecodeValue = ExpectedValue * g . Cp () function json . decode ( str , pos , nullval , ...) local state = {} state . objectmeta , state . arraymeta = optionalmetatables (...) local obj , retpos = pegmatch ( DecodeValue , str , pos , nullval , state ) if state . msg then return nil , state . pos , state . msg else return obj , retpos end end -- use this function only once: json . use_lpeg = function () return json end json . using_lpeg = true return json -- so you can get the module using json = require \"dkjson\".use_lpeg() end if always_try_using_lpeg then pcall ( json . use_lpeg ) end return json","title":"dkjson.lua \u6e90\u7801"},{"location":"lua/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%20pcall%20%26%20xpcall/","text":"\u9519\u8bef\u5904\u7406 pcall & xpcall \u00b6 pcall \u00b6 pcall \u6307\u7684\u662f protected call \u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u91cc\u7684 try-catch , \u4f7f\u7528pcall \u8c03\u7528\u51fd\u6570\uff0c\u5982\u679c\u51fd\u6570 f \u4e2d\u53d1\u751f\u4e86\u9519\u8bef\uff0c \u5b83\u5e76\u4e0d\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u800c\u662f\u8fd4\u56de\u9519\u8bef\u7684\u72b6\u6001, \u4e3a\u88ab\u6267\u884c\u51fd\u6570\u63d0\u4f9b\u4e00\u4e2a\u4fdd\u62a4\u6a21\u5f0f\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u4e0d\u4f1a\u610f\u5916\u7ec8\u6b62 \u8bed\u6cd5 pcall( f , arg1,\u00b7\u00b7\u00b7) \u8fd4\u56de\u503c \u51fd\u6570\u6267\u884c\u72b6\u6001 (boolean) \u6ca1\u6709\u9519\u8bef\u8fd4\u56de true \u6709\u9519\u8bef\u8fd4\u56de false \u53d1\u751f\u9519\u8bef\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u5426\u5219\u8fd4\u56de\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c pcall \u793a\u4f8b \u4f7f\u7528pcall \u5904\u7406\u9519\u8bef function square ( a ) return a * \"a\" end local status , retval = pcall ( square , 10 ); print ( \"Status: \" , status ) -- \u6253\u5370 \"false\" print ( \"Return Value: \" , retval ) -- \u6253\u5370 \"input:2: attempt to perform arithmetic on a string value\" \u6b63\u5e38\u6ca1\u9519\u8bef function square ( a ) return a * a end local status , retval = pcall ( square , 10 ); print ( \"Status: \" , status ) -- \u6253\u5370 \"true\" print ( \"Return Value: \" , retval ) -- \u6253\u5370 \"100\" xpcall \u00b6 xpcall (f, msgh [, arg1, \u00b7\u00b7\u00b7]) xpcall \u7c7b\u4f3c pcall xpcall\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u8c03\u7528\u51fd\u6570\u3001\u9519\u8bef\u5904\u7406\u51fd\u6570 \u6bd4\u5982\u4f7f\u7528 debug.traceback \u83b7\u53d6\u6808\u4fe1\u606f > status , err , ret = xpcall ( square , debug.traceback , 10 ) > status false > err stdin : 2 : attempt to perform arithmetic on a string value stack traceback : stdin : 2 : in function ' square ' [C]: in function ' xpcall ' stdin:1: in main chunk [C]: in ? >","title":"lua \u9519\u8bef\u5904\u7406 pcall & xpcall"},{"location":"lua/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%20pcall%20%26%20xpcall/#pcall-xpcall","text":"","title":"\u9519\u8bef\u5904\u7406 pcall &amp; xpcall"},{"location":"lua/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%20pcall%20%26%20xpcall/#pcall","text":"pcall \u6307\u7684\u662f protected call \u7c7b\u4f3c\u5176\u5b83\u8bed\u8a00\u91cc\u7684 try-catch , \u4f7f\u7528pcall \u8c03\u7528\u51fd\u6570\uff0c\u5982\u679c\u51fd\u6570 f \u4e2d\u53d1\u751f\u4e86\u9519\u8bef\uff0c \u5b83\u5e76\u4e0d\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u800c\u662f\u8fd4\u56de\u9519\u8bef\u7684\u72b6\u6001, \u4e3a\u88ab\u6267\u884c\u51fd\u6570\u63d0\u4f9b\u4e00\u4e2a\u4fdd\u62a4\u6a21\u5f0f\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u4e0d\u4f1a\u610f\u5916\u7ec8\u6b62 \u8bed\u6cd5 pcall( f , arg1,\u00b7\u00b7\u00b7) \u8fd4\u56de\u503c \u51fd\u6570\u6267\u884c\u72b6\u6001 (boolean) \u6ca1\u6709\u9519\u8bef\u8fd4\u56de true \u6709\u9519\u8bef\u8fd4\u56de false \u53d1\u751f\u9519\u8bef\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u5426\u5219\u8fd4\u56de\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c pcall \u793a\u4f8b \u4f7f\u7528pcall \u5904\u7406\u9519\u8bef function square ( a ) return a * \"a\" end local status , retval = pcall ( square , 10 ); print ( \"Status: \" , status ) -- \u6253\u5370 \"false\" print ( \"Return Value: \" , retval ) -- \u6253\u5370 \"input:2: attempt to perform arithmetic on a string value\" \u6b63\u5e38\u6ca1\u9519\u8bef function square ( a ) return a * a end local status , retval = pcall ( square , 10 ); print ( \"Status: \" , status ) -- \u6253\u5370 \"true\" print ( \"Return Value: \" , retval ) -- \u6253\u5370 \"100\"","title":"pcall"},{"location":"lua/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%20pcall%20%26%20xpcall/#xpcall","text":"xpcall (f, msgh [, arg1, \u00b7\u00b7\u00b7]) xpcall \u7c7b\u4f3c pcall xpcall\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u8c03\u7528\u51fd\u6570\u3001\u9519\u8bef\u5904\u7406\u51fd\u6570 \u6bd4\u5982\u4f7f\u7528 debug.traceback \u83b7\u53d6\u6808\u4fe1\u606f > status , err , ret = xpcall ( square , debug.traceback , 10 ) > status false > err stdin : 2 : attempt to perform arithmetic on a string value stack traceback : stdin : 2 : in function ' square ' [C]: in function ' xpcall ' stdin:1: in main chunk [C]: in ? >","title":"xpcall"},{"location":"php/%E5%AE%89%E8%A3%85pdo_mysql%E6%89%A9%E5%B1%95/","text":"PHP7.0 \u5b89\u88c5pdo_mysql \u6269\u5c55 \u00b6 sudo apt install php7.0-mysql","title":"\u5b89\u88c5pdo_mysql \u6269\u5c55"},{"location":"php/%E5%AE%89%E8%A3%85pdo_mysql%E6%89%A9%E5%B1%95/#php70-pdo_mysql","text":"sudo apt install php7.0-mysql","title":"PHP7.0 \u5b89\u88c5pdo_mysql \u6269\u5c55"},{"location":"php/%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AE%89%E8%A3%85php%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6/","text":"\u90e8\u7f72php\u9879\u76ee\u53ca\u5b89\u88c5php\u76f8\u5173\u63d2\u4ef6 \u00b6 \u5b89\u88c5\u73af\u5883 \u00b6 nginx: sudo apt-get install nginx mysql: sudo apt-get install mysql-server php: sudo apt install php php-fpm php-mysql \u914d\u7f6e\u6b65\u9aa4 \u00b6 \u4fee\u6539/etc/php/7.0/fpm/pool.d/ www.conf sudo vim ./www.conf listen\u4fee\u6539\u4e3a127.0.0.1:9000 \u5728(36\u884c) sudo php-fpm7.0\u542f\u52a8fpm\uff0c\u7528netstat -tlnp\u68c0\u67e59000\u7aef\u53e3\u5360\u7528 \u4fee\u6539/usr/local/ nginx/conf/ nginx.conf \u53ef\u4ee5\u6839\u636e\u4f60\u81ea\u5df1\u7684\u9700\u6c42\u628a\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u8fdb\u884c\u5c31\u884c\u4e86 \u53ef\u4ee5\u590d\u5236\u4e0b\u9762\u7684\u5bf9\u5e94\u4fee\u6539 server { listen 80; server_name: quan.kongping.net; access_log /var/log/nginx/access_php.log; location / { root /www/web; index index.php index.html index.htm; } location ~\\.php${ root /www/web; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } \u521b\u5efa\u6587\u4ef6\u5939\uff0c\u4e0a\u4f20\u7a0b\u5e8f\u4ee3\u7801\uff0c\u8def\u5f84\u548c3\u4e2d\u586b\u5199\u7684\u8def\u5f84\u4fdd\u6301\u4e00\u81f4 index.php\u5185\u5bb9\u4e3a <?php phpinfo (); ?> \u542f\u52a8nginx service nginx reload service nginx start \u63d2\u4ef6\u5b89\u88c5 \u00b6 sudo apt-get install php-curl sudo apt-get install php-mbstring \u53c2\u8003\u6587\u7ae0\uff1a \u00b6 https://blog.csdn.net/qq_38711394/article/details/80819895","title":"\u90e8\u7f72php\u53ca\u5b89\u88c5\u76f8\u5173\u63d2\u4ef6"},{"location":"php/%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AE%89%E8%A3%85php%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6/#phpphp","text":"","title":"\u90e8\u7f72php\u9879\u76ee\u53ca\u5b89\u88c5php\u76f8\u5173\u63d2\u4ef6"},{"location":"php/%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AE%89%E8%A3%85php%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6/#_1","text":"nginx: sudo apt-get install nginx mysql: sudo apt-get install mysql-server php: sudo apt install php php-fpm php-mysql","title":"\u5b89\u88c5\u73af\u5883"},{"location":"php/%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AE%89%E8%A3%85php%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6/#_2","text":"\u4fee\u6539/etc/php/7.0/fpm/pool.d/ www.conf sudo vim ./www.conf listen\u4fee\u6539\u4e3a127.0.0.1:9000 \u5728(36\u884c) sudo php-fpm7.0\u542f\u52a8fpm\uff0c\u7528netstat -tlnp\u68c0\u67e59000\u7aef\u53e3\u5360\u7528 \u4fee\u6539/usr/local/ nginx/conf/ nginx.conf \u53ef\u4ee5\u6839\u636e\u4f60\u81ea\u5df1\u7684\u9700\u6c42\u628a\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u8fdb\u884c\u5c31\u884c\u4e86 \u53ef\u4ee5\u590d\u5236\u4e0b\u9762\u7684\u5bf9\u5e94\u4fee\u6539 server { listen 80; server_name: quan.kongping.net; access_log /var/log/nginx/access_php.log; location / { root /www/web; index index.php index.html index.htm; } location ~\\.php${ root /www/web; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } } \u521b\u5efa\u6587\u4ef6\u5939\uff0c\u4e0a\u4f20\u7a0b\u5e8f\u4ee3\u7801\uff0c\u8def\u5f84\u548c3\u4e2d\u586b\u5199\u7684\u8def\u5f84\u4fdd\u6301\u4e00\u81f4 index.php\u5185\u5bb9\u4e3a <?php phpinfo (); ?> \u542f\u52a8nginx service nginx reload service nginx start","title":"\u914d\u7f6e\u6b65\u9aa4"},{"location":"php/%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AE%89%E8%A3%85php%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6/#_3","text":"sudo apt-get install php-curl sudo apt-get install php-mbstring","title":"\u63d2\u4ef6\u5b89\u88c5"},{"location":"php/%E9%83%A8%E7%BD%B2php%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%AE%89%E8%A3%85php%E7%9B%B8%E5%85%B3%E6%8F%92%E4%BB%B6/#_4","text":"https://blog.csdn.net/qq_38711394/article/details/80819895","title":"\u53c2\u8003\u6587\u7ae0\uff1a"},{"location":"python/DFA%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95%E7%9A%84python%E5%AE%9E%E7%8E%B0/","text":"\u5728\u7f51\u4e0a\u67e5\u4e86\u4e0b\u654f\u611f\u8bcd\u8fc7\u6ee4\u65b9\u6848\uff0c\u627e\u5230\u4e86\u4e00\u79cd\u540d\u4e3aDFA\u7684\u7b97\u6cd5\uff0c\u5373Deterministic Finite Automaton\u7b97\u6cd5\uff0c\u7ffb\u8bd1\u6210\u4e2d\u6587\u5c31\u662f\u786e\u5b9a\u6709\u7a77\u81ea\u52a8\u673a\u7b97\u6cd5\u3002\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u57fa\u4e8e\u72b6\u6001\u8f6c\u79fb\u6765\u68c0\u7d22\u654f\u611f\u8bcd\uff0c\u53ea\u9700\u8981\u626b\u63cf\u4e00\u6b21\u5f85\u68c0\u6d4b\u6587\u672c\uff0c\u5c31\u80fd\u5bf9\u6240\u6709\u654f\u611f\u8bcd\u8fdb\u884c\u68c0\u6d4b\uff0c\u6240\u4ee5\u6548\u7387\u6bd4\u65b9\u6848\u4e00\u9ad8\u4e0d\u5c11\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b5\u4e2a\u654f\u611f\u8bcd\u9700\u8981\u68c0\u6d4b\uff1a\u50bb\u903c\u3001\u50bb\u5b50\u3001\u50bb\u5927\u4e2a\u3001\u574f\u86cb\u3001\u574f\u4eba\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u654f\u611f\u8bcd\u4e2d\u6709\u76f8\u540c\u524d\u7f00\u7684\u8bcd\u7ec4\u5408\u6210\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u4e0d\u540c\u524d\u7f00\u7684\u8bcd\u5206\u5c5e\u4e0d\u540c\u6811\u5f62\u5206\u652f\uff0c\u4ee5\u4e0a\u8ff05\u4e2a\u654f\u611f\u8bcd\u4e3a\u4f8b\uff0c\u53ef\u4ee5\u521d\u59cb\u5316\u6210\u5982\u4e0b2\u68f5\u6811\uff1a \u628a\u654f\u611f\u8bcd\u7ec4\u6210\u6210\u6811\u5f62\u7ed3\u6784\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f\u6700\u5927\u7684\u597d\u5904\u5c31\u662f\u53ef\u4ee5\u51cf\u5c11\u68c0\u7d22\u6b21\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386\u4e00\u6b21\u5f85\u68c0\u6d4b\u6587\u672c\uff0c\u7136\u540e\u5728\u654f\u611f\u8bcd\u5e93\u4e2d\u68c0\u7d22\u51fa\u6709\u6ca1\u6709\u8be5\u5b57\u7b26\u5bf9\u5e94\u7684\u5b50\u6811\u5c31\u884c\u4e86\uff0c\u5982\u679c\u6ca1\u6709\u76f8\u5e94\u7684\u5b50\u6811\uff0c\u8bf4\u660e\u5f53\u524d\u68c0\u6d4b\u7684\u5b57\u7b26\u4e0d\u5728\u654f\u611f\u8bcd\u5e93\u4e2d\uff0c\u5219\u76f4\u63a5\u8df3\u8fc7\u7ee7\u7eed\u68c0\u6d4b\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff1b\u5982\u679c\u6709\u76f8\u5e94\u7684\u5b50\u6811\uff0c\u5219\u63a5\u7740\u68c0\u67e5\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f\u4e0d\u662f\u524d\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u5b50\u6811\u7684\u5b50\u8282\u70b9\uff0c\u8fd9\u6837\u8fed\u4ee3\u4e0b\u53bb\uff0c\u5c31\u80fd\u627e\u51fa\u5f85\u68c0\u6d4b\u6587\u672c\u4e2d\u662f\u5426\u5305\u542b\u654f\u611f\u8bcd\u4e86\u3002 \u6211\u4eec\u4ee5\u6587\u672c\u201c\u4f60\u662f\u4e0d\u662f\u50bb\u903c\u201d\u4e3a\u4f8b\uff0c\u6211\u4eec\u4f9d\u6b21\u68c0\u6d4b\u6bcf\u4e2a\u5b57\u7b26\uff0c\u56e0\u4e3a\u524d4\u4e2a\u5b57\u7b26\u90fd\u4e0d\u5728\u654f\u611f\u8bcd\u5e93\u91cc\uff0c\u627e\u4e0d\u5230\u76f8\u5e94\u7684\u5b50\u6811\uff0c\u6240\u4ee5\u76f4\u63a5\u8df3\u8fc7\u3002\u5f53\u68c0\u6d4b\u5230\u201c\u50bb\u201d\u5b57\u65f6\uff0c\u53d1\u73b0\u654f\u611f\u8bcd\u5e93\u4e2d\u6709\u76f8\u5e94\u7684\u5b50\u6811\uff0c\u6211\u4eec\u628a\u4ed6\u8bb0\u4e3atree-1\uff0c\u63a5\u7740\u518d\u641c\u7d22\u4e0b\u4e00\u4e2a\u5b57\u7b26\u201c\u903c\u201d\u662f\u4e0d\u662f\u5b50\u6811tree-1\u7684\u5b50\u8282\u70b9\uff0c\u53d1\u73b0\u6070\u597d\u662f\uff0c\u63a5\u4e0b\u6765\u518d\u5224\u65ad\u201c\u903c\u201d\u8fd9\u4e2a\u5b57\u7b26\u662f\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5982\u679c\u662f\uff0c\u5219\u8bf4\u660e\u5339\u914d\u5230\u4e86\u4e00\u4e2a\u654f\u611f\u8bcd\u4e86\uff0c\u5728\u8fd9\u91cc\u201c\u903c\u201d\u8fd9\u4e2a\u5b57\u7b26\u521a\u597d\u662ftree-1\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u6210\u529f\u68c0\u7d22\u5230\u4e86\u654f\u611f\u8bcd\uff1a\u201c\u50bb\u903c\u201d\u3002\u5927\u5bb6\u53d1\u73b0\u4e86\u6ca1\u6709\uff0c\u5728\u6211\u4eec\u7684\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u626b\u63cf\u4e00\u6b21\u88ab\u68c0\u6d4b\u6587\u672c\u5c31\u884c\u4e86\uff0c\u800c\u4e14\u5bf9\u4e8e\u88ab\u68c0\u6d4b\u6587\u672c\u4e2d\u4e0d\u5b58\u5728\u7684\u654f\u611f\u8bcd\uff0c\u5982\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u201c\u574f\u86cb\u201d\u548c\u201c\u574f\u4eba\u201d\uff0c\u6211\u4eec\u5b8c\u5168\u4e0d\u4f1a\u626b\u63cf\u5230\uff0c\u56e0\u6b64\u76f8\u6bd4\u65b9\u6848\u4e00\u6548\u7387\u5927\u5927\u63d0\u5347\u4e86\u3002 \u5728python\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528dict\u6765\u5b58\u50a8\u4e0a\u8ff0\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u8fd8\u662f\u4ee5\u4e0a\u8ff0\u654f\u611f\u8bcd\u4e3a\u4f8b\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u654f\u611f\u8bcd\u5b57\u7b26\u4e32\u62c6\u6563\u6210\u5b57\u7b26\uff0c\u518d\u5b58\u50a8\u5230dict\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b58\uff1a # -*- coding:utf-8 -*- import time time1 = time . time () # DFA\u7b97\u6cd5 class DFAFilter ( object ): def __init__ ( self ): self . keyword_chains = {} # \u5173\u952e\u8bcd\u94fe\u8868 self . delimit = ' \\x00 ' # \u9650\u5b9a def add ( self , keyword ): keyword = keyword . lower () # \u5173\u952e\u8bcd\u82f1\u6587\u53d8\u4e3a\u5c0f\u5199 chars = keyword . strip () # \u5173\u952e\u5b57\u53bb\u9664\u9996\u5c3e\u7a7a\u683c\u548c\u6362\u884c if not chars : # \u5982\u679c\u5173\u952e\u8bcd\u4e3a\u7a7a\u76f4\u63a5\u8fd4\u56de return level = self . keyword_chains # \u904d\u5386\u5173\u952e\u5b57\u7684\u6bcf\u4e2a\u5b57 for i in range ( len ( chars )): # \u5982\u679c\u8fd9\u4e2a\u5b57\u5df2\u7ecf\u5b58\u5728\u5b57\u7b26\u94fe\u7684key\u4e2d\u5c31\u8fdb\u5165\u5176\u5b50\u5b57\u5178 if chars [ i ] in level : level = level [ chars [ i ]] else : if not isinstance ( level , dict ): break for j in range ( i , len ( chars )): level [ chars [ j ]] = {} last_level , last_char = level , chars [ j ] level = level [ chars [ j ]] last_level [ last_char ] = { self . delimit : 0 } break if i == len ( chars ) - 1 : level [ self . delimit ] = 0 def parse ( self , path ): with open ( path , encoding = 'utf-8' ) as f : for keyword in f : self . add ( str ( keyword ) . strip ()) print ( self . keyword_chains ) def filter ( self , message , repl = \"*\" ): message = message . lower () ret = [] start = 0 while start < len ( message ): level = self . keyword_chains step_ins = 0 for char in message [ start :]: if char in level : step_ins += 1 if self . delimit not in level [ char ]: level = level [ char ] else : ret . append ( repl * step_ins ) start += step_ins - 1 break else : ret . append ( message [ start ]) break else : ret . append ( message [ start ]) start += 1 return '' . join ( ret ) if __name__ == \"__main__\" : gfw = DFAFilter () path = \"./1.txt\" gfw . parse ( path ) text = \"\u4f60\u771f\u662f\u4e2a\u5927\u50bb\u903c\uff0c\u5927\u50bb\u5b50\uff0c\u50bb\u5927\u4e2a\uff0c\u5927\u574f\u86cb\uff0c\u574f\u4eba\u3002\" result = gfw . filter ( text ) print ( text ) print ( result ) time2 = time . time () print ( '\u603b\u5171\u8017\u65f6\uff1a' + str ( time2 - time1 ) + 's' ) { '\u50bb' : { '\u5927' : { '\u4e2a' : { ' \\x00 ' : 0 }}, '\u903c' : { ' \\x00 ' : 0 }}, '\u574f' : { '\u4eba' : { ' \\x00 ' : 0 }}} \u4f60\u771f\u662f\u4e2a\u5927\u50bb\u903c \uff0c \u5927\u50bb\u5b50 \uff0c \u50bb\u5927\u4e2a \uff0c \u5927\u574f\u86cb \uff0c \u574f\u4eba \u3002 \u4f60\u771f\u662f\u4e2a\u5927 ** \uff0c \u5927\u50bb\u5b50 \uff0c *** \uff0c \u5927\u574f\u86cb \uff0c ** \u3002 \u603b\u5171\u8017\u65f6 \uff1a 0.0 s","title":"DFA\u654f\u611f\u8bcd\u8fc7\u6ee4\u7b97\u6cd5\u7684python\u5b9e\u73b0"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/","text":"\u4f7f\u7528django\u5f00\u53d1\uff0c\u5bf9python manage.py ***\u547d\u4ee4\u6a21\u5f0f\u80af\u5b9a\u4e0d\u4f1a\u964c\u751f\u3002\u6bd4\u8f83\u5e38\u7528\u7684\u6709runserver\uff0cmigrate\u3002\u3002\u3002 \u672c\u6587\u8bb2\u8ff0\u5982\u4f55\u81ea\u5b9a\u4e49\u6269\u5c55manage\u547d\u4ee4\u3002 \u6e90\u7801\u5206\u6790 \u00b6 manage.py\u6587\u4ef6\u662f\u901a\u8fc7django-admin startproject project_name\u751f\u6210\u7684\u3002 manage.py\u7684\u6e90\u7801 \u00b6 \u9996\u5148\u8bbe\u7f6e\u4e86settings\u6587\u4ef6\uff0c\u672c\u4f8b\u4e2dCIServer\u6307\u7684\u662fproject_name\u3002 \u5176\u6b21\u6267\u884c\u4e86\u4e00\u4e2a\u51fd\u6570django.core.management.execute_from_command_line(sys.argv)\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f20\u5165\u4e86\u547d\u4ee4\u884c\u53c2\u6570sys.argv #!/usr/bin/env python import os import sys if __name__ == \"__main__\" : os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" , \"CIServer.settings\" ) try : from django.core.management import execute_from_command_line except ImportError : raise ImportError ( \"Couldn't import Django. Are you sure it's installed and available \" \"on your PATH environment variable? Did you forget to activate a \" \"virtual environment?\" ) execute_from_command_line ( sys . argv ) execute_from_command_line \u00b6 \u91cc\u9762\u8c03\u7528\u4e86ManagementUtility\u7c7b\u4e2d\u7684execute\u65b9\u6cd5 def execute_from_command_line ( argv = None ): \"\"\" A simple method that runs a ManagementUtility. \"\"\" utility = ManagementUtility ( argv ) utility . execute () \u5728execute\u4e2d\u4e3b\u8981\u662f\u89e3\u6790\u4e86\u4f20\u5165\u7684\u53c2\u6570sys.argv\uff0c\u5e76\u4e14\u8c03\u7528\u4e86get_command() get_command \u00b6 def get_commands (): \"\"\" Returns a dictionary mapping command names to their callback applications. This works by looking for a management.commands package in django.core, and in each installed application -- if a commands package exists, all commands in that package are registered. Core commands are always included. If a settings module has been specified, user-defined commands will also be included. The dictionary is in the format {command_name: app_name}. Key-value pairs from this dictionary can then be used in calls to load_command_class(app_name, command_name) If a specific version of a command must be loaded (e.g., with the startapp command), the instantiated module can be placed in the dictionary in place of the application name. The dictionary is cached on the first call and reused on subsequent calls. \"\"\" commands = { name : 'django.core' for name in find_commands ( upath ( __path__ [ 0 ]))} if not settings . configured : return commands for app_config in reversed ( list ( apps . get_app_configs ())): path = os . path . join ( app_config . path , 'management' ) commands . update ({ name : app_config . name for name in find_commands ( path )}) return commands get_command\u91cc\u904d\u5386\u6240\u6709\u6ce8\u518c\u7684INSTALLED_APPS\u8def\u5f84\u4e0b\u7684management\u5bfb\u627e(find_commands)\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u547d\u4ee4\u3002 find_commands \u00b6 def find_commands ( management_dir ): \"\"\" Given a path to a management directory, returns a list of all the command names that are available. Returns an empty list if no commands are defined. \"\"\" command_dir = os . path . join ( management_dir , 'commands' ) # Workaround for a Python 3.2 bug with pkgutil.iter_modules sys . path_importer_cache . pop ( command_dir , None ) return [ name for _ , name , is_pkg in pkgutil . iter_modules ([ npath ( command_dir )]) if not is_pkg and not name . startswith ( '_' )] \u53ef\u4ee5\u53d1\u73b0\u5e76\u6ce8\u518c\u7684\u547d\u4ee4\u662fcommands\u76ee\u5f55\u4e0b\u4e0d\u4ee5\"_\"\u5f00\u5934\u7684\u6587\u4ef6\u540d\u3002 load_command_class \u00b6 \u5c06\u547d\u4ee4\u6587\u4ef6***.py\u4e2d\u7684Command\u7c7b\u52a0\u8f7d\u8fdb\u53bb\u3002 def load_command_class ( app_name , name ): \"\"\" Given a command name and an application name, returns the Command class instance. All errors raised by the import process (ImportError, AttributeError) are allowed to propagate. \"\"\" module = import_module ( ' %s .management.commands. %s ' % ( app_name , name )) return module . Command () Command\u7c7b \u00b6 Command\u7c7b\u8981\u7ee7\u627fBaseCommand\u7c7b\uff0c\u5176\u4e2d\u5f88\u591a\u65b9\u6cd5\uff0c\u4e00\u5b9a\u8981\u5b9e\u73b0\u7684\u662fhandle\u65b9\u6cd5\uff0chandle\u65b9\u6cd5\u662f\u547d\u4ee4\u5b9e\u9645\u6267\u884c\u7684\u4ee3\u7801\u3002 \u5982\u4f55\u5b9e\u73b0\u81ea\u5b9a\u4e49\u547d\u4ee4 \u00b6 \u6839\u636e\u4e0a\u9762\u8bf4\u7684\u539f\u7406\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728app\u76ee\u5f55\u4e2d\u5efa\u7acb\u4e00\u4e2a\u76ee\u5f55management\uff0c\u5e76\u4e14\u5728\u4e0b\u9762\u5efa\u7acb\u4e00\u4e2a\u76ee\u5f55\u53ebcommands\uff0c\u4e0b\u9762\u589e\u52a0\u4e00\u4e2a\u6587\u4ef6\uff0c\u53ebhello.py\u5373\u53ef\u3002 \u8981\u6ce8\u610f\u4e00\u4e0b\u51e0\u70b9 1\uff09\u8bf4\u662f\u76ee\u5f55\uff0c\u5176\u5b9e\u5e94\u8be5\u662f\u5305\uff0c\u6240\u4ee5\u5728management\u4e0b\u9762\u548ccommands\u4e0b\u9762\u90fd\u8981\u6dfb\u52a0__init__.py\u3002 2\uff09app\u4e00\u5b9a\u8981\u6dfb\u52a0\u5728INSTALLED_APPS\u4e2d\uff0c\u4e0d\u7136\u547d\u4ee4\u52a0\u8f7d\u4e0d\u5230\u3002 \u5e94\u8be5\u662f\u8fd9\u6837\u7684 \u5728hello.py\u4e2d\u5b9e\u73b0\u547d\u4ee4\u7684\u5177\u4f53\u5185\u5bb9 #-*- coding:utf-8 -*- from django.core.management.base import BaseCommand , CommandError class Command ( BaseCommand ): def add_arguments ( self , parser ): parser . add_argument ( '-n' , '--name' , action = 'store' , dest = 'name' , default = 'close' , help = 'name of author.' , ) def handle ( self , * args , ** options ): try : if options [ 'name' ]: print 'hello world, %s ' % options [ 'name' ] self . stdout . write ( self . style . SUCCESS ( '\u547d\u4ee4 %s \u6267\u884c\u6210\u529f, \u53c2\u6570\u4e3a %s ' % ( __file__ , options [ 'name' ]))) except Exception , ex : self . stdout . write ( self . style . ERROR ( '\u547d\u4ee4\u6267\u884c\u51fa\u9519' )) \u6267\u884c\u65b9\u5f0f \u00b6 python manage.py hello -n kangaroo hello world, kangaroo \u547d\u4ee4hello.py\u6267\u884c\u6210\u529f\uff0c\u53c2\u6570\u4e3akangaroo","title":"\u6269\u5c55\u81ea\u5b9a\u4e49manage\u547d\u4ee4"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#_1","text":"manage.py\u6587\u4ef6\u662f\u901a\u8fc7django-admin startproject project_name\u751f\u6210\u7684\u3002","title":"\u6e90\u7801\u5206\u6790"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#managepy","text":"\u9996\u5148\u8bbe\u7f6e\u4e86settings\u6587\u4ef6\uff0c\u672c\u4f8b\u4e2dCIServer\u6307\u7684\u662fproject_name\u3002 \u5176\u6b21\u6267\u884c\u4e86\u4e00\u4e2a\u51fd\u6570django.core.management.execute_from_command_line(sys.argv)\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f20\u5165\u4e86\u547d\u4ee4\u884c\u53c2\u6570sys.argv #!/usr/bin/env python import os import sys if __name__ == \"__main__\" : os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" , \"CIServer.settings\" ) try : from django.core.management import execute_from_command_line except ImportError : raise ImportError ( \"Couldn't import Django. Are you sure it's installed and available \" \"on your PATH environment variable? Did you forget to activate a \" \"virtual environment?\" ) execute_from_command_line ( sys . argv )","title":"manage.py\u7684\u6e90\u7801"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#execute_from_command_line","text":"\u91cc\u9762\u8c03\u7528\u4e86ManagementUtility\u7c7b\u4e2d\u7684execute\u65b9\u6cd5 def execute_from_command_line ( argv = None ): \"\"\" A simple method that runs a ManagementUtility. \"\"\" utility = ManagementUtility ( argv ) utility . execute () \u5728execute\u4e2d\u4e3b\u8981\u662f\u89e3\u6790\u4e86\u4f20\u5165\u7684\u53c2\u6570sys.argv\uff0c\u5e76\u4e14\u8c03\u7528\u4e86get_command()","title":"execute_from_command_line"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#get_command","text":"def get_commands (): \"\"\" Returns a dictionary mapping command names to their callback applications. This works by looking for a management.commands package in django.core, and in each installed application -- if a commands package exists, all commands in that package are registered. Core commands are always included. If a settings module has been specified, user-defined commands will also be included. The dictionary is in the format {command_name: app_name}. Key-value pairs from this dictionary can then be used in calls to load_command_class(app_name, command_name) If a specific version of a command must be loaded (e.g., with the startapp command), the instantiated module can be placed in the dictionary in place of the application name. The dictionary is cached on the first call and reused on subsequent calls. \"\"\" commands = { name : 'django.core' for name in find_commands ( upath ( __path__ [ 0 ]))} if not settings . configured : return commands for app_config in reversed ( list ( apps . get_app_configs ())): path = os . path . join ( app_config . path , 'management' ) commands . update ({ name : app_config . name for name in find_commands ( path )}) return commands get_command\u91cc\u904d\u5386\u6240\u6709\u6ce8\u518c\u7684INSTALLED_APPS\u8def\u5f84\u4e0b\u7684management\u5bfb\u627e(find_commands)\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u547d\u4ee4\u3002","title":"get_command"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#find_commands","text":"def find_commands ( management_dir ): \"\"\" Given a path to a management directory, returns a list of all the command names that are available. Returns an empty list if no commands are defined. \"\"\" command_dir = os . path . join ( management_dir , 'commands' ) # Workaround for a Python 3.2 bug with pkgutil.iter_modules sys . path_importer_cache . pop ( command_dir , None ) return [ name for _ , name , is_pkg in pkgutil . iter_modules ([ npath ( command_dir )]) if not is_pkg and not name . startswith ( '_' )] \u53ef\u4ee5\u53d1\u73b0\u5e76\u6ce8\u518c\u7684\u547d\u4ee4\u662fcommands\u76ee\u5f55\u4e0b\u4e0d\u4ee5\"_\"\u5f00\u5934\u7684\u6587\u4ef6\u540d\u3002","title":"find_commands"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#load_command_class","text":"\u5c06\u547d\u4ee4\u6587\u4ef6***.py\u4e2d\u7684Command\u7c7b\u52a0\u8f7d\u8fdb\u53bb\u3002 def load_command_class ( app_name , name ): \"\"\" Given a command name and an application name, returns the Command class instance. All errors raised by the import process (ImportError, AttributeError) are allowed to propagate. \"\"\" module = import_module ( ' %s .management.commands. %s ' % ( app_name , name )) return module . Command ()","title":"load_command_class"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#command","text":"Command\u7c7b\u8981\u7ee7\u627fBaseCommand\u7c7b\uff0c\u5176\u4e2d\u5f88\u591a\u65b9\u6cd5\uff0c\u4e00\u5b9a\u8981\u5b9e\u73b0\u7684\u662fhandle\u65b9\u6cd5\uff0chandle\u65b9\u6cd5\u662f\u547d\u4ee4\u5b9e\u9645\u6267\u884c\u7684\u4ee3\u7801\u3002","title":"Command\u7c7b"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#_2","text":"\u6839\u636e\u4e0a\u9762\u8bf4\u7684\u539f\u7406\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5728app\u76ee\u5f55\u4e2d\u5efa\u7acb\u4e00\u4e2a\u76ee\u5f55management\uff0c\u5e76\u4e14\u5728\u4e0b\u9762\u5efa\u7acb\u4e00\u4e2a\u76ee\u5f55\u53ebcommands\uff0c\u4e0b\u9762\u589e\u52a0\u4e00\u4e2a\u6587\u4ef6\uff0c\u53ebhello.py\u5373\u53ef\u3002 \u8981\u6ce8\u610f\u4e00\u4e0b\u51e0\u70b9 1\uff09\u8bf4\u662f\u76ee\u5f55\uff0c\u5176\u5b9e\u5e94\u8be5\u662f\u5305\uff0c\u6240\u4ee5\u5728management\u4e0b\u9762\u548ccommands\u4e0b\u9762\u90fd\u8981\u6dfb\u52a0__init__.py\u3002 2\uff09app\u4e00\u5b9a\u8981\u6dfb\u52a0\u5728INSTALLED_APPS\u4e2d\uff0c\u4e0d\u7136\u547d\u4ee4\u52a0\u8f7d\u4e0d\u5230\u3002 \u5e94\u8be5\u662f\u8fd9\u6837\u7684 \u5728hello.py\u4e2d\u5b9e\u73b0\u547d\u4ee4\u7684\u5177\u4f53\u5185\u5bb9 #-*- coding:utf-8 -*- from django.core.management.base import BaseCommand , CommandError class Command ( BaseCommand ): def add_arguments ( self , parser ): parser . add_argument ( '-n' , '--name' , action = 'store' , dest = 'name' , default = 'close' , help = 'name of author.' , ) def handle ( self , * args , ** options ): try : if options [ 'name' ]: print 'hello world, %s ' % options [ 'name' ] self . stdout . write ( self . style . SUCCESS ( '\u547d\u4ee4 %s \u6267\u884c\u6210\u529f, \u53c2\u6570\u4e3a %s ' % ( __file__ , options [ 'name' ]))) except Exception , ex : self . stdout . write ( self . style . ERROR ( '\u547d\u4ee4\u6267\u884c\u51fa\u9519' ))","title":"\u5982\u4f55\u5b9e\u73b0\u81ea\u5b9a\u4e49\u547d\u4ee4"},{"location":"python/Django%E6%89%A9%E5%B1%95%E8%87%AA%E5%AE%9A%E4%B9%89manage%E5%91%BD%E4%BB%A4/#_3","text":"python manage.py hello -n kangaroo hello world, kangaroo \u547d\u4ee4hello.py\u6267\u884c\u6210\u529f\uff0c\u53c2\u6570\u4e3akangaroo","title":"\u6267\u884c\u65b9\u5f0f"},{"location":"python/pandas.DataFrame%E5%AF%B9%E8%A1%8C%E5%92%8C%E5%88%97%E6%B1%82%E5%92%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%8C%E5%92%8C%E5%88%97%EF%BC%8Capply%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/","text":"apply\u51fd\u6570 \u00b6 apply\u51fd\u6570\u662f pandas \u91cc\u9762\u6240\u6709\u51fd\u6570\u4e2d\u81ea\u7531\u5ea6\u6700\u9ad8\u7684\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5982\u4e0b\uff1a DataFrame.apply(func, axis=0, broadcast=False, raw=False, reduce=None, args=(), **kwds) \u8be5\u51fd\u6570\u6700\u6709\u7528\u7684\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u662f\u51fd\u6570\uff0c\u76f8\u5f53\u4e8eC/C++\u7684\u51fd\u6570\u6307\u9488\u3002 \u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\uff0c\u51fd\u6570\u7684\u4f20\u5165\u53c2\u6570\u6839\u636eaxis\u6765\u5b9a\uff0c\u6bd4\u5982axis = 1\uff0c\u5c31\u4f1a\u628a\u4e00\u884c\u6570\u636e\u4f5c\u4e3aSeries\u7684\u6570\u636e \u7ed3\u6784\u4f20\u5165\u7ed9\u81ea\u5df1\u5b9e\u73b0\u7684\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5728\u51fd\u6570\u4e2d\u5b9e\u73b0\u5bf9Series\u4e0d\u540c\u5c5e\u6027\u4e4b\u95f4\u7684\u8ba1\u7b97\uff0c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\uff0c\u5219apply\u51fd\u6570 \u4f1a\u81ea\u52a8\u904d\u5386\u6bcf\u4e00\u884cDataFrame\u7684\u6570\u636e\uff0c\u6700\u540e\u5c06\u6240\u6709\u7ed3\u679c\u7ec4\u5408\u6210\u4e00\u4e2aSeries\u6570\u636e\u7ed3\u6784\u5e76\u8fd4\u56de\u3002 python\u6e90\u4ee3\u7801\uff1a def apply ( self , func , axis = 0 , broadcast = None , raw = False , reduce = None , result_type = None , args = (), ** kwds ): \"\"\" Apply a function along an axis of the DataFrame. Objects passed to the function are Series objects whose index is either the DataFrame's index (``axis=0``) or the DataFrame's columns (``axis=1``). By default (``result_type=None``), the final return type is inferred from the return type of the applied function. Otherwise, it depends on the `result_type` argument. Parameters ---------- func : function Function to apply to each column or row. axis : {0 or 'index', 1 or 'columns'}, default 0 Axis along which the function is applied: * 0 or 'index': apply function to each column. * 1 or 'columns': apply function to each row. broadcast : bool, optional Only relevant for aggregation functions: * ``False`` or ``None`` : returns a Series whose length is the length of the index or the number of columns (based on the `axis` parameter) * ``True`` : results will be broadcast to the original shape of the frame, the original index and columns will be retained. .. deprecated:: 0.23.0 This argument will be removed in a future version, replaced by result_type='broadcast'. raw : bool, default False * ``False`` : passes each row or column as a Series to the function. * ``True`` : the passed function will receive ndarray objects instead. If you are just applying a NumPy reduction function this will achieve much better performance. reduce : bool or None, default None Try to apply reduction procedures. If the DataFrame is empty, `apply` will use `reduce` to determine whether the result should be a Series or a DataFrame. If ``reduce=None`` (the default), `apply`'s return value will be guessed by calling `func` on an empty Series (note: while guessing, exceptions raised by `func` will be ignored). If ``reduce=True`` a Series will always be returned, and if ``reduce=False`` a DataFrame will always be returned. .. deprecated:: 0.23.0 This argument will be removed in a future version, replaced by ``result_type='reduce'``. result_type : {'expand', 'reduce', 'broadcast', None}, default None These only act when ``axis=1`` (columns): * 'expand' : list-like results will be turned into columns. * 'reduce' : returns a Series if possible rather than expanding list-like results. This is the opposite of 'expand'. * 'broadcast' : results will be broadcast to the original shape of the DataFrame, the original index and columns will be retained. The default behaviour (None) depends on the return value of the applied function: list-like results will be returned as a Series of those. However if the apply function returns a Series these are expanded to columns. .. versionadded:: 0.23.0 args : tuple Positional arguments to pass to `func` in addition to the array/series. **kwds Additional keyword arguments to pass as keywords arguments to `func`. Returns ------- applied : Series or DataFrame See Also -------- DataFrame.applymap: For elementwise operations. DataFrame.aggregate: Only perform aggregating type operations. DataFrame.transform: Only perform transforming type operations. Notes ----- In the current implementation apply calls `func` twice on the first column/row to decide whether it can take a fast or slow code path. This can lead to unexpected behavior if `func` has side-effects, as they will take effect twice for the first column/row. Examples -------- >>> df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B']) >>> df A B 0 4 9 1 4 9 2 4 9 Using a numpy universal function (in this case the same as ``np.sqrt(df)``): >>> df.apply(np.sqrt) A B 0 2.0 3.0 1 2.0 3.0 2 2.0 3.0 Using a reducing function on either axis >>> df.apply(np.sum, axis=0) A 12 B 27 dtype: int64 >>> df.apply(np.sum, axis=1) 0 13 1 13 2 13 dtype: int64 Retuning a list-like will result in a Series >>> df.apply(lambda x: [1, 2], axis=1) 0 [1, 2] 1 [1, 2] 2 [1, 2] dtype: object Passing result_type='expand' will expand list-like results to columns of a Dataframe >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand') 0 1 0 1 2 1 1 2 2 1 2 Returning a Series inside the function is similar to passing ``result_type='expand'``. The resulting column names will be the Series index. >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1) foo bar 0 1 2 1 1 2 2 1 2 Passing ``result_type='broadcast'`` will ensure the same shape result, whether list-like or scalar is returned by the function, and broadcast it along the axis. The resulting column names will be the originals. >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast') A B 0 1 2 1 1 2 2 1 2 \"\"\" from pandas.core.apply import frame_apply op = frame_apply ( self , func = func , axis = axis , broadcast = broadcast , raw = raw , reduce = reduce , result_type = result_type , args = args , kwds = kwds ) return op . get_result () \u4ee3\u7801\u5e94\u7528 \u00b6 # \u5bfc\u5165\u6a21\u5757\uff1a from pandas import DataFrame import pandas as pd import numpy as np # \u751f\u6210DataFrame\u6570\u636e df = DataFrame ( np . random . randn ( 4 , 5 ), columns = [ 'A' , 'B' , 'C' , 'D' , 'E' ]) DataFrame\u6570\u636e\u9884\u89c8 \uff1a A B C D E 0 0.673092 0.230338 - 0.171681 0.312303 - 0.184813 1 - 0.504482 - 0.344286 - 0.050845 - 0.811277 - 0.298181 2 0.542788 0.207708 0.651379 - 0.656214 0.507595 3 - 0.249410 0.131549 - 2.198480 - 0.437407 1.628228 \u8ba1\u7b97\u5404\u5217\u6570\u636e\u603b\u548c\u5e76\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u5230\u672b\u5c3e df [ 'Col_sum' ] = df . apply ( lambda x : x . sum (), axis = 1 ) \u8ba1\u7b97\u5404\u884c\u6570\u636e\u603b\u548c\u5e76\u4f5c\u4e3a\u65b0\u884c\u6dfb\u52a0\u5230\u672b\u5c3e df . loc [ 'Row_sum' ] = df . apply ( lambda x : x . sum ())","title":"pandas.DataFrame\u5bf9\u884c\u548c\u5217\u6c42\u548c\u3001\u6dfb\u52a0\u65b0\u884c\u548c\u5217\uff0capply\u51fd\u6570\u7684\u4f7f\u7528"},{"location":"python/pandas.DataFrame%E5%AF%B9%E8%A1%8C%E5%92%8C%E5%88%97%E6%B1%82%E5%92%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%8C%E5%92%8C%E5%88%97%EF%BC%8Capply%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/#apply","text":"apply\u51fd\u6570\u662f pandas \u91cc\u9762\u6240\u6709\u51fd\u6570\u4e2d\u81ea\u7531\u5ea6\u6700\u9ad8\u7684\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5982\u4e0b\uff1a DataFrame.apply(func, axis=0, broadcast=False, raw=False, reduce=None, args=(), **kwds) \u8be5\u51fd\u6570\u6700\u6709\u7528\u7684\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u662f\u51fd\u6570\uff0c\u76f8\u5f53\u4e8eC/C++\u7684\u51fd\u6570\u6307\u9488\u3002 \u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u81ea\u5df1\u5b9e\u73b0\uff0c\u51fd\u6570\u7684\u4f20\u5165\u53c2\u6570\u6839\u636eaxis\u6765\u5b9a\uff0c\u6bd4\u5982axis = 1\uff0c\u5c31\u4f1a\u628a\u4e00\u884c\u6570\u636e\u4f5c\u4e3aSeries\u7684\u6570\u636e \u7ed3\u6784\u4f20\u5165\u7ed9\u81ea\u5df1\u5b9e\u73b0\u7684\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5728\u51fd\u6570\u4e2d\u5b9e\u73b0\u5bf9Series\u4e0d\u540c\u5c5e\u6027\u4e4b\u95f4\u7684\u8ba1\u7b97\uff0c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\uff0c\u5219apply\u51fd\u6570 \u4f1a\u81ea\u52a8\u904d\u5386\u6bcf\u4e00\u884cDataFrame\u7684\u6570\u636e\uff0c\u6700\u540e\u5c06\u6240\u6709\u7ed3\u679c\u7ec4\u5408\u6210\u4e00\u4e2aSeries\u6570\u636e\u7ed3\u6784\u5e76\u8fd4\u56de\u3002 python\u6e90\u4ee3\u7801\uff1a def apply ( self , func , axis = 0 , broadcast = None , raw = False , reduce = None , result_type = None , args = (), ** kwds ): \"\"\" Apply a function along an axis of the DataFrame. Objects passed to the function are Series objects whose index is either the DataFrame's index (``axis=0``) or the DataFrame's columns (``axis=1``). By default (``result_type=None``), the final return type is inferred from the return type of the applied function. Otherwise, it depends on the `result_type` argument. Parameters ---------- func : function Function to apply to each column or row. axis : {0 or 'index', 1 or 'columns'}, default 0 Axis along which the function is applied: * 0 or 'index': apply function to each column. * 1 or 'columns': apply function to each row. broadcast : bool, optional Only relevant for aggregation functions: * ``False`` or ``None`` : returns a Series whose length is the length of the index or the number of columns (based on the `axis` parameter) * ``True`` : results will be broadcast to the original shape of the frame, the original index and columns will be retained. .. deprecated:: 0.23.0 This argument will be removed in a future version, replaced by result_type='broadcast'. raw : bool, default False * ``False`` : passes each row or column as a Series to the function. * ``True`` : the passed function will receive ndarray objects instead. If you are just applying a NumPy reduction function this will achieve much better performance. reduce : bool or None, default None Try to apply reduction procedures. If the DataFrame is empty, `apply` will use `reduce` to determine whether the result should be a Series or a DataFrame. If ``reduce=None`` (the default), `apply`'s return value will be guessed by calling `func` on an empty Series (note: while guessing, exceptions raised by `func` will be ignored). If ``reduce=True`` a Series will always be returned, and if ``reduce=False`` a DataFrame will always be returned. .. deprecated:: 0.23.0 This argument will be removed in a future version, replaced by ``result_type='reduce'``. result_type : {'expand', 'reduce', 'broadcast', None}, default None These only act when ``axis=1`` (columns): * 'expand' : list-like results will be turned into columns. * 'reduce' : returns a Series if possible rather than expanding list-like results. This is the opposite of 'expand'. * 'broadcast' : results will be broadcast to the original shape of the DataFrame, the original index and columns will be retained. The default behaviour (None) depends on the return value of the applied function: list-like results will be returned as a Series of those. However if the apply function returns a Series these are expanded to columns. .. versionadded:: 0.23.0 args : tuple Positional arguments to pass to `func` in addition to the array/series. **kwds Additional keyword arguments to pass as keywords arguments to `func`. Returns ------- applied : Series or DataFrame See Also -------- DataFrame.applymap: For elementwise operations. DataFrame.aggregate: Only perform aggregating type operations. DataFrame.transform: Only perform transforming type operations. Notes ----- In the current implementation apply calls `func` twice on the first column/row to decide whether it can take a fast or slow code path. This can lead to unexpected behavior if `func` has side-effects, as they will take effect twice for the first column/row. Examples -------- >>> df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B']) >>> df A B 0 4 9 1 4 9 2 4 9 Using a numpy universal function (in this case the same as ``np.sqrt(df)``): >>> df.apply(np.sqrt) A B 0 2.0 3.0 1 2.0 3.0 2 2.0 3.0 Using a reducing function on either axis >>> df.apply(np.sum, axis=0) A 12 B 27 dtype: int64 >>> df.apply(np.sum, axis=1) 0 13 1 13 2 13 dtype: int64 Retuning a list-like will result in a Series >>> df.apply(lambda x: [1, 2], axis=1) 0 [1, 2] 1 [1, 2] 2 [1, 2] dtype: object Passing result_type='expand' will expand list-like results to columns of a Dataframe >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand') 0 1 0 1 2 1 1 2 2 1 2 Returning a Series inside the function is similar to passing ``result_type='expand'``. The resulting column names will be the Series index. >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1) foo bar 0 1 2 1 1 2 2 1 2 Passing ``result_type='broadcast'`` will ensure the same shape result, whether list-like or scalar is returned by the function, and broadcast it along the axis. The resulting column names will be the originals. >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast') A B 0 1 2 1 1 2 2 1 2 \"\"\" from pandas.core.apply import frame_apply op = frame_apply ( self , func = func , axis = axis , broadcast = broadcast , raw = raw , reduce = reduce , result_type = result_type , args = args , kwds = kwds ) return op . get_result ()","title":"apply\u51fd\u6570"},{"location":"python/pandas.DataFrame%E5%AF%B9%E8%A1%8C%E5%92%8C%E5%88%97%E6%B1%82%E5%92%8C%E3%80%81%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%A1%8C%E5%92%8C%E5%88%97%EF%BC%8Capply%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/#_1","text":"# \u5bfc\u5165\u6a21\u5757\uff1a from pandas import DataFrame import pandas as pd import numpy as np # \u751f\u6210DataFrame\u6570\u636e df = DataFrame ( np . random . randn ( 4 , 5 ), columns = [ 'A' , 'B' , 'C' , 'D' , 'E' ]) DataFrame\u6570\u636e\u9884\u89c8 \uff1a A B C D E 0 0.673092 0.230338 - 0.171681 0.312303 - 0.184813 1 - 0.504482 - 0.344286 - 0.050845 - 0.811277 - 0.298181 2 0.542788 0.207708 0.651379 - 0.656214 0.507595 3 - 0.249410 0.131549 - 2.198480 - 0.437407 1.628228 \u8ba1\u7b97\u5404\u5217\u6570\u636e\u603b\u548c\u5e76\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u5230\u672b\u5c3e df [ 'Col_sum' ] = df . apply ( lambda x : x . sum (), axis = 1 ) \u8ba1\u7b97\u5404\u884c\u6570\u636e\u603b\u548c\u5e76\u4f5c\u4e3a\u65b0\u884c\u6dfb\u52a0\u5230\u672b\u5c3e df . loc [ 'Row_sum' ] = df . apply ( lambda x : x . sum ())","title":"\u4ee3\u7801\u5e94\u7528"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/","text":"\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf \u00b6 \u5c40\u90e8\u53d8\u91cf 1. \u5b9a\u4e49\u5728\u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\uff08\u51fd\u6570\u7684\u5f62\u53c2\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf\uff09 2. \u5c40\u90e8\u53d8\u91cf\u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 3. \u5c40\u90e8\u53d8\u91cf\u5728\u51fd\u6570\u8c03\u7528\u65f6\u624d\u80fd\u88ab\u521b\u5efa\uff0c\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u540e\u4f1a\u81ea\u52a8\u88ab\u9500\u6bc1 \u5168\u5c40\u53d8\u91cf 1. \u5b9a\u4e49\u5728\u51fd\u6570\u5916\u90e8\uff0c\u6a21\u5757\u5185\u90e8\u7684\u53d8\u91cf\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf 2. \u5168\u5c40\u53d8\u91cf\u6240\u6709\u51fd\u6570\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff08\u4f46\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u5c06\u5176\u8d4b\u503c\uff09 # \u6b64\u793a\u4f8b\u793a\u610f\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf a = 100 # \u5168\u5c40\u53d8\u91cf b = 200 # \u5168\u5c40\u53d8\u91cf def fx ( c ): # c\u662f\u5c40\u90e8\u53d8\u91cf d = 400 # d\u662f\u5c40\u90e8\u53d8\u91cf print ( a , b , c , d ) fx ( 300 ) print ( a ) \u8bf4\u660e \u5c40\u90e8\u53d8\u91cf\u53ea\u80fd\u5728\u5176\u88ab\u58f0\u660e\u7684\u51fd\u6570\u5185\u90e8\u8bbf\u95ee\uff0c\u800c\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u5728\u6574\u4e2a\u6a21\u5757\u8303\u56f4\u5185\u8bbf\u95ee \u5728\u51fd\u6570\u5185\u90e8\u8d4b\u503c\u8bed\u53e5\u4e0d\u4f1a\u5bf9\u5168\u5c40\u53d8\u91cf\u9020\u6210\u5f71\u54cd # \u793a\u610f\uff1a l = [] print ( 'id(l) =' , id ( l )) def input_number (): l2 = [] while True : n = int ( input ( '\u8bf7\u8f93\u5165\u6b63\u6574\u6570' )) if n < 0 : break l2 . append ( n ) # l = l2 # \u521b\u5efa\u5c40\u90e8\u53d8\u91cf\uff0c\u672a\u6539\u53d8\u5168\u5c40 # l.extend(l2) # \u6839\u636e\u53d8\u91cf\u627e\u5230\u5217\u8868\uff0c\u6539\u53d8\u662f\u5217\u8868\u800c\u4e0d\u662f\u53d8\u91cf # l += l2 # \u51fa\u9519 input_number () print ( 'id(l) =' , id ( l )) print ( l ) globals() / locals() \u51fd\u6570 \u00b6 globals() \u8fd4\u56de\u5f53\u524d\u5168\u5c40\u4f5c\u7528\u57df\u5185\u53d8\u91cf\u7684\u5b57\u5178 locals() \u8fd4\u56de\u5f53\u524d\u5c40\u90e8\u4f5c\u7528\u57df\u5185\u53d8\u91cf\u7684\u5b57\u5178 a = 1 b = 2 c = 3 def fn ( c , d ): e = 300 print ( 'locals() \u8fd4\u56de\uff1a' , locals ()) print ( 'globals() \u8fd4\u56de\uff1a' , globals ()) print ( globals ()[ 'c' ]) fn ( 100 , 200 ) \u51fd\u6570\u53d8\u91cf \u00b6 \u51fd\u6570\u540d\u53d8\u91cf\uff0c\u5b83\u5728\u521b\u5efa\u51fd\u6570\u65f6\u7ed1\u5b9a\u4e00\u4e2a\u51fd\u6570 def fn (): print ( '\u51fd\u6570fn\u88ab\u8c03\u7528' ) f1 = fn print ( f1 ) # <function fn at 0xXXXXXXXXXXXXXXXX> print ( fn ) # <function fn at 0xXXXXXXXXXXXXXXXX> print ( f1 ()) # None \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u5b9e\u53c2\u4f20\u9012 # \u6b64\u793a\u4f8b\u793a\u610f\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570 def f1 (): print ( 'hello f1' ) def f2 (): print ( 'hello f2' ) def fx ( fn ): print ( fn ) fn () # \u8c03\u7528fn\u7ed1\u5b9a\u7684\u51fd\u6570 fx ( f1 ) # \u5982\u4f55\u6267\u884c # \u770b\u61c2\u4e0b\u9762\u7684\u4ee3\u7801\u5728\u5e72\u4ec0\u4e48 def myinput ( fn ): l = [ 1 , 3 , 5 , 7 , 9 ] return fn ( l ) print ( myinput ( max )) print ( myinput ( min )) print ( myinput ( sum )) \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570 # \u6b64\u793a\u4f8b\u793a\u610f\u51fd\u6570\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570 def get_fuction (): s = input ( '\u8bf7\u8f93\u5165\u60a8\u8981\u505a\u7684\u64cd\u4f5c\uff1a' ) if s == '\u6c42\u6700\u5927' : return max elif s == '\u6c42\u6700\u5c0f' : return min elif s == '\u6c42\u548c' : return sum l = [ 2 , 4 , 6 , 8 , 10 ] f = get_fuction () # \u8ba9\u51fd\u6570\u7ed9\u6211\u4eec\u8fd4\u56de\u4e00\u4e2a\u64cd\u4f5c print ( f ( l )) \u7ec3\u4e60 \u5199\u4e00\u4e2a\u8ba1\u7b97\u516c\u5f0f\u7684\u89e3\u91ca\u6267\u884c\u5668 \u5df2\u77e5\u6709\u5982\u4e0b\u4e00\u4e9b\u51fd\u6570\uff1a def myadd(x, y): return x + y def mysub(x, y) return x - y def mymul(x, y) return x * y def get_fun(op): ..... get_fun(op) \u51fd\u6570\u4f20\u5165\u5b57\u7b26\u4e32 \u5728\u4e3b\u51fd\u6570\u4e2d\u7a0b\u5e8f\u5982\u4e0b\uff1a def main(): while True: s = input('\u8bf7\u8f93\u5165\u8ba1\u7b97\u516c\u5f0f') # 10 \u52a0 20 l = s.split() # l=['10', '\u52a0', '20'] a = int(l[0]) b = int(l[2]) fn = get_fun(l[1]) print('\u7ed3\u679c\u662f\uff1a', fn(a, b)) # \u7ed3\u679c\u662f\uff1a30 \u51fd\u6570\u7684\u5d4c\u5957\u5b9a\u4e49 \u00b6 \u6307\u4e00\u4e2a\u51fd\u6570\u91cc\u7528def \u8bed\u53e5\u6765\u521b\u5efa\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u60c5\u51b5 # \u793a\u4f8b def fn_outter (): print ( 'fn_outter() \u88ab\u8c03\u7528' ) def fn_inner (): print ( 'fn_inner() \u88ab\u8c03\u7528' ) fn_inner () # \u8c03\u7528\u5d4c\u5957\u51fd\u6570fn_inner fn_inner () # \u7b2c\u4e8c\u6b21\u88ab\u8c03\u7528 print ( 'fn_outter()\u8c03\u7528\u7ed3\u675f' ) fn_outter () # \u8c03\u7528\u5916\u5c42\u51fd\u6570 \u4f5c\u7528\u57df \u00b6 \u4f5c\u7528\u57df\u4e5f\u53eb\u540d\u5b57\u7a7a\u95f4\uff0c\u662f\u8bbf\u95ee\u53d8\u91cf\u65f6\u67e5\u627e\u53d8\u91cf\u540d\u7684\u8303\u56f4\u7a7a\u95f4 python3\u7684\u56db\u4e2a\u4f5c\u7528\u57dfLEGB \u00b6 \u4f5c\u7528\u57df \u82f1\u6587\u89e3\u91ca \u82f1\u6587\u7b80\u5199 \u5c40\u90e8\u4f5c\u7528\u57df\uff08\u51fd\u6570\u5185\uff09 Local(function) L \u5916\u90e8\u5d4c\u5957\u51fd\u6570\u4f5c\u7528\u57df \uff08\u5305\u88f9\uff09Enclosing function locals E \u51fd\u6570\u5b9a\u4e49\u6240\u5728\u6a21\u5757\u4f5c\u7528\u57df Global(moudle) G python\u5185\u7f6e\u6a21\u5757\u7684\u4f5c\u7528\u57df Builtin(python) B v = 100 # \u5168\u5c40\u4f5c\u7528\u57df def fun1 (): v = 200 # \u5916\u90e8\u5d4c\u5957\u51fd\u6570\u4f5c\u7528\u57df print ( 'fun1.v =' , v ) def fun2 (): v = 300 # \u5c40\u90e8\u4f5c\u7528\u57df print ( 'fun2.v =' , v ) fun2 () # \u8c03\u7528fun2 fun1 () print ( '\u5168\u5c40\u53d8\u91cfv =' , v ) \u8be6\u7ec6\u8bf4\u660e \u5728\u8bbf\u95ee\u53d8\u91cf\u65f6\uff0c\u5148\u67e5\u627e\u672c\u5730\u53d8\u91cf\uff0c\u7136\u540e\u662f\u5305\u88f9\u6b64\u51fd\u6570\u5916\u90e8\u51fd\u6570\u5185\u7684\u53d8\u91cf\uff0c\u4e4b\u540e\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u6700\u540e\u662f\u5185\u5efa\u4f5c\u7528\u57df\u7684\u53d8\u91cf \u5373\uff1aL ---> E -----> G ------> B \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf\u540d\u8d4b\u503c\u4f1a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u5185\u521b\u5efa\u53d8\u91cf\u548c\u4fee\u6539\u53d8\u91cf global\u8bed\u53e5 \u00b6 \u4f5c\u7528 \u544a\u8bc9\u89e3\u91ca\u6267\u884c\u5668\uff0cglobal\u8bed\u53e5\u58f0\u660e\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\uff0c \u8fd9\u4e9b\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u4e3a\u6a21\u5757\u7ea7\u4f5c\u7528\u57df\uff0c\u4e5f\u79f0\u4f5c\u5168\u5c40\u4f5c\u7528\u57df \u5168\u5c40\u58f0\u660e global \u5c06\u8d4b\u503c\u53d8\u91cf\u6620\u5c04\u5230\u6a21\u5757\u6587\u4ef6\u5185\u90e8\u7684\u4f5c\u7528\u57df \u8bed\u6cd5 global \u53d8\u91cf\u540d1\uff0c \u53d8\u91cf\u540d2\uff0c .... # \u793a\u4f8b v = 100 def fn(): global v # \u544a\u8bc9\u89e3\u91ca\u6267\u884c\u5668python3\uff0c v \u662f\u5168\u5c40\u53d8\u91cf\uff0c \u4e0d\u662f\u5c40\u90e8\u53d8\u91cf v = 200 fn() print('v =', v) \u8bf4\u660e 1. \u5168\u5c40\u53d8\u91cf\u5982\u679c\u8981\u5728\u51fd\u6570\u5185\u90e8\u88ab\u8d4b\u503c\uff0c\u5219\u5fc5\u987b\u7ecf\u8fc7\u5168\u5c40\u58f0\u660e\uff08\u5426\u5219\u88ab\u8ba4\u4e3a\u662f\u5c40\u90e8\u53d8\u91cf\uff09 2. \u5168\u5c40\u53d8\u91cf\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u7ecf\u8fc7\u58f0\u660e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee 3. \u4e0d\u80fd\u5148\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\uff0c\u518d\u7528global \u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u6b64\u505a\u6cd5\u4e0d\u7b26\u5408\u8bed\u6cd5\u89c4\u5219 4. global \u53d8\u91cf\u5217\u8868\u91cc\u7684\u53d8\u91cf\u540d\u4e0d\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\u91cc nonlocal\u8bed\u53e5 \u00b6 \u4f5c\u7528 \u544a\u8bc9\u89e3\u91ca\u6267\u884c\u5668\uff0cnonlocal\u58f0\u660e\u7684\u53d8\u91cf\u4e0d\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u4e5f\u4e0d\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u800c\u662f\u5916\u90e8\u5d4c\u5957\u51fd\u6570\u5185\u7684\u53d8\u91cf \u8bed\u6cd5 nonlocal \u53d8\u91cf\u540d1, \u53d8\u91cf\u540d2 .... \u793a\u4f8b\u89c1 v = 100 def f1(): v = 200 print('f1.v =', v) def f2(): nonlocal v v = 300 print('f2.v =', v) f2() print('\u8c03\u7528f2()\u540e\u7684f1.v =', v) f1() print('\u5168\u5c40\u7684v =', v) \u8bed\u6cd5\u8bf4\u660e 1. nonlocal \u8bed\u53e5\u53ea\u80fd\u5728\u88ab\u5d4c\u5957\u51fd\u6570\u7684\u5185\u90e8\u8fdb\u884c\u4f7f\u7528 2. \u8bbf\u95eenonlocal\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u5c06\u5bf9\u5916\u90e8\u5d4c\u5957\u51fd\u6570\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c 3. \u5f53\u6709\u4e24\u5c42\u6216\u4e24\u5c42\u4ee5\u4e0a\u51fd\u6570\u5d4c\u5957\u65f6\uff0c\u8bbf\u95eenonlocal \u53d8\u91cf\u53ea\u5bf9\u6700\u8fd1\u4e00\u5c42\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c 4. nonlocal \u8bed\u53e5\u53d8\u91cf\u5217\u8868\u91cc\u7684\u53d8\u91cf\u540d\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728\u6b64\u51fd\u6570\u5f62\u53c2\u5217\u8868\u4e2d lambda \u8868\u8fbe\u5f0f \u00b6 \u4f5c\u7528 \u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5bf9\u8c61\uff0c\u540cdef \u7c7b\u4f3c\uff0c\u4f46\u4e0d\u63d0\u4f9b\u51fd\u6570\u540d \u8bed\u6cd5 lambda [\u5f62\u53c2\u540d1, \u5f62\u53c2\u540d2, ...]: \u8868\u8fbe\u5f0f \u793a\u4f8b\u89c1 # def myadd(x, y): # return x + y myadd = lambda x, y : x + y print('20 + 30 =', myadd(20, 30)) print('40 + 50 =', myadd(40, 50)) lambda \u8868\u8fbe\u5f0f\u7684\u5b9a\u4e49\u89c4\u5219 lambda \u53ea\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u51fd\u6570 \u5f53lambda \u8868\u8fbe\u5f0f\u8c03\u7528\u65f6\uff0c\u5148\u6267\u884c\u5192\u53f7(:) \u540e\u7684\u8868\u8fbe\u5f0f\uff0c\u5e76\u8fd4\u56de\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7684\u5f15\u7528 lambda \u8868\u8fbe\u5f0f\u521b\u5efa\u7684\u51fd\u6570\u53ea\u80fd\u5305\u542b\u4e00\u6761\u8868\u8fbe\u5f0f lambda \u6bd4\u51fd\u6570\u7b80\u5355\u4e14\u53ef\u4ee5\u968f\u65f6\u521b\u5efa\u548c\u9500\u6bc1\uff0c\u6709\u5229\u4e8e\u51cf\u5c11\u7a0b\u5e8f\u7684\u8026\u5408\u5ea6 \u7ec3\u4e60 \u5199\u4e00\u4e2alambda \u8868\u8fbe\u5f0f\uff0c\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u5224\u65ad\u53c2\u6570 n\uff0c\u7684\u5e73\u65b9\u52a01\u80fd\u5426\u88ab5\u6574\u9664\uff0c\u5982\u679c\u80fd\u8fd4\u56deTrue, \u5426\u5219\u8fd4\u56deFalse \u5199\u4e00\u4e2alambda \u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u4e24\u4e2a\u5f62\u53c2\u7684\u6700\u5927\u503c eval, exec \u51fd\u6570 \u00b6 eval() \u51fd\u6570 \u4f5c\u7528 \u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f53\u6210\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6765\u6267\u884c\uff0c\u8fd4\u56de\u8868\u8fbe\u5f0f\u6267\u884c\u540e\u7684\u7ed3\u679c \u683c\u5f0f eval(source, globals=None, locals=None) \u793a\u4f8b\u89c1 x = 100 y = 200 s = 'x + y' a = eval(s) # \u89e3\u91ca\u6267\u884cs \u5b57\u7b26\u4e32\uff0c \u628a\u8868\u8fbe\u5f0f\u7684\u503c\u8fd4\u56de\u56de\u6765 print(a) # 300 # \u5148\u4ecelocals\uff08\u5c40\u90e8\u4f5c\u7528\u57df\uff09\u5b57\u5178\u4e2d\u627e\u76f8\u5e94\u7684\u53d8\u91cf # \u6ca1\u6709\u5c31\u4eceglobals\uff08\u5168\u5c40\u4f5c\u7528\u57df\uff09\u5b57\u5178\u4e2d\u627e b = eval(s, {'x':2, 'y':2}, {'y':2}) # 4 print(b) exec \u51fd\u6570 \u4f5c\u7528 \u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f53\u6210\u7a0b\u5e8f\u6765\u6267\u884c \u683c\u5f0f exec(source, globals=None, locals=None) \u793a\u4f8b s = '''x = 100 y = 200 print('x + y =', x + y) ''' exec(s)","title":"10. \u4f5c\u7528\u57df"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#_1","text":"\u5c40\u90e8\u53d8\u91cf 1. \u5b9a\u4e49\u5728\u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\uff08\u51fd\u6570\u7684\u5f62\u53c2\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf\uff09 2. \u5c40\u90e8\u53d8\u91cf\u53ea\u80fd\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 3. \u5c40\u90e8\u53d8\u91cf\u5728\u51fd\u6570\u8c03\u7528\u65f6\u624d\u80fd\u88ab\u521b\u5efa\uff0c\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u540e\u4f1a\u81ea\u52a8\u88ab\u9500\u6bc1 \u5168\u5c40\u53d8\u91cf 1. \u5b9a\u4e49\u5728\u51fd\u6570\u5916\u90e8\uff0c\u6a21\u5757\u5185\u90e8\u7684\u53d8\u91cf\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf 2. \u5168\u5c40\u53d8\u91cf\u6240\u6709\u51fd\u6570\u90fd\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff08\u4f46\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u5c06\u5176\u8d4b\u503c\uff09 # \u6b64\u793a\u4f8b\u793a\u610f\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf a = 100 # \u5168\u5c40\u53d8\u91cf b = 200 # \u5168\u5c40\u53d8\u91cf def fx ( c ): # c\u662f\u5c40\u90e8\u53d8\u91cf d = 400 # d\u662f\u5c40\u90e8\u53d8\u91cf print ( a , b , c , d ) fx ( 300 ) print ( a ) \u8bf4\u660e \u5c40\u90e8\u53d8\u91cf\u53ea\u80fd\u5728\u5176\u88ab\u58f0\u660e\u7684\u51fd\u6570\u5185\u90e8\u8bbf\u95ee\uff0c\u800c\u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\u5728\u6574\u4e2a\u6a21\u5757\u8303\u56f4\u5185\u8bbf\u95ee \u5728\u51fd\u6570\u5185\u90e8\u8d4b\u503c\u8bed\u53e5\u4e0d\u4f1a\u5bf9\u5168\u5c40\u53d8\u91cf\u9020\u6210\u5f71\u54cd # \u793a\u610f\uff1a l = [] print ( 'id(l) =' , id ( l )) def input_number (): l2 = [] while True : n = int ( input ( '\u8bf7\u8f93\u5165\u6b63\u6574\u6570' )) if n < 0 : break l2 . append ( n ) # l = l2 # \u521b\u5efa\u5c40\u90e8\u53d8\u91cf\uff0c\u672a\u6539\u53d8\u5168\u5c40 # l.extend(l2) # \u6839\u636e\u53d8\u91cf\u627e\u5230\u5217\u8868\uff0c\u6539\u53d8\u662f\u5217\u8868\u800c\u4e0d\u662f\u53d8\u91cf # l += l2 # \u51fa\u9519 input_number () print ( 'id(l) =' , id ( l )) print ( l )","title":"\u5168\u5c40\u53d8\u91cf\u548c\u5c40\u90e8\u53d8\u91cf"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#globals-locals","text":"globals() \u8fd4\u56de\u5f53\u524d\u5168\u5c40\u4f5c\u7528\u57df\u5185\u53d8\u91cf\u7684\u5b57\u5178 locals() \u8fd4\u56de\u5f53\u524d\u5c40\u90e8\u4f5c\u7528\u57df\u5185\u53d8\u91cf\u7684\u5b57\u5178 a = 1 b = 2 c = 3 def fn ( c , d ): e = 300 print ( 'locals() \u8fd4\u56de\uff1a' , locals ()) print ( 'globals() \u8fd4\u56de\uff1a' , globals ()) print ( globals ()[ 'c' ]) fn ( 100 , 200 )","title":"globals() / locals() \u51fd\u6570"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#_2","text":"\u51fd\u6570\u540d\u53d8\u91cf\uff0c\u5b83\u5728\u521b\u5efa\u51fd\u6570\u65f6\u7ed1\u5b9a\u4e00\u4e2a\u51fd\u6570 def fn (): print ( '\u51fd\u6570fn\u88ab\u8c03\u7528' ) f1 = fn print ( f1 ) # <function fn at 0xXXXXXXXXXXXXXXXX> print ( fn ) # <function fn at 0xXXXXXXXXXXXXXXXX> print ( f1 ()) # None \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u5b9e\u53c2\u4f20\u9012 # \u6b64\u793a\u4f8b\u793a\u610f\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570 def f1 (): print ( 'hello f1' ) def f2 (): print ( 'hello f2' ) def fx ( fn ): print ( fn ) fn () # \u8c03\u7528fn\u7ed1\u5b9a\u7684\u51fd\u6570 fx ( f1 ) # \u5982\u4f55\u6267\u884c # \u770b\u61c2\u4e0b\u9762\u7684\u4ee3\u7801\u5728\u5e72\u4ec0\u4e48 def myinput ( fn ): l = [ 1 , 3 , 5 , 7 , 9 ] return fn ( l ) print ( myinput ( max )) print ( myinput ( min )) print ( myinput ( sum )) \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570 # \u6b64\u793a\u4f8b\u793a\u610f\u51fd\u6570\u8fd4\u56de\u53e6\u4e00\u4e2a\u51fd\u6570 def get_fuction (): s = input ( '\u8bf7\u8f93\u5165\u60a8\u8981\u505a\u7684\u64cd\u4f5c\uff1a' ) if s == '\u6c42\u6700\u5927' : return max elif s == '\u6c42\u6700\u5c0f' : return min elif s == '\u6c42\u548c' : return sum l = [ 2 , 4 , 6 , 8 , 10 ] f = get_fuction () # \u8ba9\u51fd\u6570\u7ed9\u6211\u4eec\u8fd4\u56de\u4e00\u4e2a\u64cd\u4f5c print ( f ( l )) \u7ec3\u4e60 \u5199\u4e00\u4e2a\u8ba1\u7b97\u516c\u5f0f\u7684\u89e3\u91ca\u6267\u884c\u5668 \u5df2\u77e5\u6709\u5982\u4e0b\u4e00\u4e9b\u51fd\u6570\uff1a def myadd(x, y): return x + y def mysub(x, y) return x - y def mymul(x, y) return x * y def get_fun(op): ..... get_fun(op) \u51fd\u6570\u4f20\u5165\u5b57\u7b26\u4e32 \u5728\u4e3b\u51fd\u6570\u4e2d\u7a0b\u5e8f\u5982\u4e0b\uff1a def main(): while True: s = input('\u8bf7\u8f93\u5165\u8ba1\u7b97\u516c\u5f0f') # 10 \u52a0 20 l = s.split() # l=['10', '\u52a0', '20'] a = int(l[0]) b = int(l[2]) fn = get_fun(l[1]) print('\u7ed3\u679c\u662f\uff1a', fn(a, b)) # \u7ed3\u679c\u662f\uff1a30","title":"\u51fd\u6570\u53d8\u91cf"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#_3","text":"\u6307\u4e00\u4e2a\u51fd\u6570\u91cc\u7528def \u8bed\u53e5\u6765\u521b\u5efa\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u60c5\u51b5 # \u793a\u4f8b def fn_outter (): print ( 'fn_outter() \u88ab\u8c03\u7528' ) def fn_inner (): print ( 'fn_inner() \u88ab\u8c03\u7528' ) fn_inner () # \u8c03\u7528\u5d4c\u5957\u51fd\u6570fn_inner fn_inner () # \u7b2c\u4e8c\u6b21\u88ab\u8c03\u7528 print ( 'fn_outter()\u8c03\u7528\u7ed3\u675f' ) fn_outter () # \u8c03\u7528\u5916\u5c42\u51fd\u6570","title":"\u51fd\u6570\u7684\u5d4c\u5957\u5b9a\u4e49"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#_4","text":"\u4f5c\u7528\u57df\u4e5f\u53eb\u540d\u5b57\u7a7a\u95f4\uff0c\u662f\u8bbf\u95ee\u53d8\u91cf\u65f6\u67e5\u627e\u53d8\u91cf\u540d\u7684\u8303\u56f4\u7a7a\u95f4","title":"\u4f5c\u7528\u57df"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#python3legb","text":"\u4f5c\u7528\u57df \u82f1\u6587\u89e3\u91ca \u82f1\u6587\u7b80\u5199 \u5c40\u90e8\u4f5c\u7528\u57df\uff08\u51fd\u6570\u5185\uff09 Local(function) L \u5916\u90e8\u5d4c\u5957\u51fd\u6570\u4f5c\u7528\u57df \uff08\u5305\u88f9\uff09Enclosing function locals E \u51fd\u6570\u5b9a\u4e49\u6240\u5728\u6a21\u5757\u4f5c\u7528\u57df Global(moudle) G python\u5185\u7f6e\u6a21\u5757\u7684\u4f5c\u7528\u57df Builtin(python) B v = 100 # \u5168\u5c40\u4f5c\u7528\u57df def fun1 (): v = 200 # \u5916\u90e8\u5d4c\u5957\u51fd\u6570\u4f5c\u7528\u57df print ( 'fun1.v =' , v ) def fun2 (): v = 300 # \u5c40\u90e8\u4f5c\u7528\u57df print ( 'fun2.v =' , v ) fun2 () # \u8c03\u7528fun2 fun1 () print ( '\u5168\u5c40\u53d8\u91cfv =' , v ) \u8be6\u7ec6\u8bf4\u660e \u5728\u8bbf\u95ee\u53d8\u91cf\u65f6\uff0c\u5148\u67e5\u627e\u672c\u5730\u53d8\u91cf\uff0c\u7136\u540e\u662f\u5305\u88f9\u6b64\u51fd\u6570\u5916\u90e8\u51fd\u6570\u5185\u7684\u53d8\u91cf\uff0c\u4e4b\u540e\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u6700\u540e\u662f\u5185\u5efa\u4f5c\u7528\u57df\u7684\u53d8\u91cf \u5373\uff1aL ---> E -----> G ------> B \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf\u540d\u8d4b\u503c\u4f1a\u5728\u5f53\u524d\u4f5c\u7528\u57df\u5185\u521b\u5efa\u53d8\u91cf\u548c\u4fee\u6539\u53d8\u91cf","title":"python3\u7684\u56db\u4e2a\u4f5c\u7528\u57dfLEGB"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#global","text":"\u4f5c\u7528 \u544a\u8bc9\u89e3\u91ca\u6267\u884c\u5668\uff0cglobal\u8bed\u53e5\u58f0\u660e\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\uff0c \u8fd9\u4e9b\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u4e3a\u6a21\u5757\u7ea7\u4f5c\u7528\u57df\uff0c\u4e5f\u79f0\u4f5c\u5168\u5c40\u4f5c\u7528\u57df \u5168\u5c40\u58f0\u660e global \u5c06\u8d4b\u503c\u53d8\u91cf\u6620\u5c04\u5230\u6a21\u5757\u6587\u4ef6\u5185\u90e8\u7684\u4f5c\u7528\u57df \u8bed\u6cd5 global \u53d8\u91cf\u540d1\uff0c \u53d8\u91cf\u540d2\uff0c .... # \u793a\u4f8b v = 100 def fn(): global v # \u544a\u8bc9\u89e3\u91ca\u6267\u884c\u5668python3\uff0c v \u662f\u5168\u5c40\u53d8\u91cf\uff0c \u4e0d\u662f\u5c40\u90e8\u53d8\u91cf v = 200 fn() print('v =', v) \u8bf4\u660e 1. \u5168\u5c40\u53d8\u91cf\u5982\u679c\u8981\u5728\u51fd\u6570\u5185\u90e8\u88ab\u8d4b\u503c\uff0c\u5219\u5fc5\u987b\u7ecf\u8fc7\u5168\u5c40\u58f0\u660e\uff08\u5426\u5219\u88ab\u8ba4\u4e3a\u662f\u5c40\u90e8\u53d8\u91cf\uff09 2. \u5168\u5c40\u53d8\u91cf\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u7ecf\u8fc7\u58f0\u660e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee 3. \u4e0d\u80fd\u5148\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\uff0c\u518d\u7528global \u58f0\u660e\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u6b64\u505a\u6cd5\u4e0d\u7b26\u5408\u8bed\u6cd5\u89c4\u5219 4. global \u53d8\u91cf\u5217\u8868\u91cc\u7684\u53d8\u91cf\u540d\u4e0d\u80fd\u51fa\u73b0\u5728\u51fd\u6570\u7684\u5f62\u53c2\u5217\u8868\u91cc","title":"global\u8bed\u53e5"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#nonlocal","text":"\u4f5c\u7528 \u544a\u8bc9\u89e3\u91ca\u6267\u884c\u5668\uff0cnonlocal\u58f0\u660e\u7684\u53d8\u91cf\u4e0d\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u4e5f\u4e0d\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u800c\u662f\u5916\u90e8\u5d4c\u5957\u51fd\u6570\u5185\u7684\u53d8\u91cf \u8bed\u6cd5 nonlocal \u53d8\u91cf\u540d1, \u53d8\u91cf\u540d2 .... \u793a\u4f8b\u89c1 v = 100 def f1(): v = 200 print('f1.v =', v) def f2(): nonlocal v v = 300 print('f2.v =', v) f2() print('\u8c03\u7528f2()\u540e\u7684f1.v =', v) f1() print('\u5168\u5c40\u7684v =', v) \u8bed\u6cd5\u8bf4\u660e 1. nonlocal \u8bed\u53e5\u53ea\u80fd\u5728\u88ab\u5d4c\u5957\u51fd\u6570\u7684\u5185\u90e8\u8fdb\u884c\u4f7f\u7528 2. \u8bbf\u95eenonlocal\u53d8\u91cf\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u5c06\u5bf9\u5916\u90e8\u5d4c\u5957\u51fd\u6570\u4f5c\u7528\u57df\u5185\u7684\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c 3. \u5f53\u6709\u4e24\u5c42\u6216\u4e24\u5c42\u4ee5\u4e0a\u51fd\u6570\u5d4c\u5957\u65f6\uff0c\u8bbf\u95eenonlocal \u53d8\u91cf\u53ea\u5bf9\u6700\u8fd1\u4e00\u5c42\u53d8\u91cf\u8fdb\u884c\u64cd\u4f5c 4. nonlocal \u8bed\u53e5\u53d8\u91cf\u5217\u8868\u91cc\u7684\u53d8\u91cf\u540d\uff0c\u4e0d\u80fd\u51fa\u73b0\u5728\u6b64\u51fd\u6570\u5f62\u53c2\u5217\u8868\u4e2d","title":"nonlocal\u8bed\u53e5"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#lambda","text":"\u4f5c\u7528 \u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5bf9\u8c61\uff0c\u540cdef \u7c7b\u4f3c\uff0c\u4f46\u4e0d\u63d0\u4f9b\u51fd\u6570\u540d \u8bed\u6cd5 lambda [\u5f62\u53c2\u540d1, \u5f62\u53c2\u540d2, ...]: \u8868\u8fbe\u5f0f \u793a\u4f8b\u89c1 # def myadd(x, y): # return x + y myadd = lambda x, y : x + y print('20 + 30 =', myadd(20, 30)) print('40 + 50 =', myadd(40, 50)) lambda \u8868\u8fbe\u5f0f\u7684\u5b9a\u4e49\u89c4\u5219 lambda \u53ea\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u51fd\u6570 \u5f53lambda \u8868\u8fbe\u5f0f\u8c03\u7528\u65f6\uff0c\u5148\u6267\u884c\u5192\u53f7(:) \u540e\u7684\u8868\u8fbe\u5f0f\uff0c\u5e76\u8fd4\u56de\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7684\u5f15\u7528 lambda \u8868\u8fbe\u5f0f\u521b\u5efa\u7684\u51fd\u6570\u53ea\u80fd\u5305\u542b\u4e00\u6761\u8868\u8fbe\u5f0f lambda \u6bd4\u51fd\u6570\u7b80\u5355\u4e14\u53ef\u4ee5\u968f\u65f6\u521b\u5efa\u548c\u9500\u6bc1\uff0c\u6709\u5229\u4e8e\u51cf\u5c11\u7a0b\u5e8f\u7684\u8026\u5408\u5ea6 \u7ec3\u4e60 \u5199\u4e00\u4e2alambda \u8868\u8fbe\u5f0f\uff0c\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u5224\u65ad\u53c2\u6570 n\uff0c\u7684\u5e73\u65b9\u52a01\u80fd\u5426\u88ab5\u6574\u9664\uff0c\u5982\u679c\u80fd\u8fd4\u56deTrue, \u5426\u5219\u8fd4\u56deFalse \u5199\u4e00\u4e2alambda \u8868\u8fbe\u5f0f\uff0c\u8fd4\u56de\u4e24\u4e2a\u5f62\u53c2\u7684\u6700\u5927\u503c","title":"lambda \u8868\u8fbe\u5f0f"},{"location":"python/python%E4%BD%9C%E7%94%A8%E5%9F%9F/#eval-exec","text":"eval() \u51fd\u6570 \u4f5c\u7528 \u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f53\u6210\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6765\u6267\u884c\uff0c\u8fd4\u56de\u8868\u8fbe\u5f0f\u6267\u884c\u540e\u7684\u7ed3\u679c \u683c\u5f0f eval(source, globals=None, locals=None) \u793a\u4f8b\u89c1 x = 100 y = 200 s = 'x + y' a = eval(s) # \u89e3\u91ca\u6267\u884cs \u5b57\u7b26\u4e32\uff0c \u628a\u8868\u8fbe\u5f0f\u7684\u503c\u8fd4\u56de\u56de\u6765 print(a) # 300 # \u5148\u4ecelocals\uff08\u5c40\u90e8\u4f5c\u7528\u57df\uff09\u5b57\u5178\u4e2d\u627e\u76f8\u5e94\u7684\u53d8\u91cf # \u6ca1\u6709\u5c31\u4eceglobals\uff08\u5168\u5c40\u4f5c\u7528\u57df\uff09\u5b57\u5178\u4e2d\u627e b = eval(s, {'x':2, 'y':2}, {'y':2}) # 4 print(b) exec \u51fd\u6570 \u4f5c\u7528 \u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f53\u6210\u7a0b\u5e8f\u6765\u6267\u884c \u683c\u5f0f exec(source, globals=None, locals=None) \u793a\u4f8b s = '''x = 100 y = 200 print('x + y =', x + y) ''' exec(s)","title":"eval, exec \u51fd\u6570"},{"location":"python/python%E5%85%83%E7%BB%84/","text":"\u5143\u7ec4 tuple \u00b6 \u5143\u7ec4\u662f\u4e0d\u53ef\u6539\u53d8\u7684\u5e8f\u5217\uff0c\u540clist\u4e00\u6837\uff0c\u5143\u7ec4\u53ef\u4ee5\u5b58\u653e\u4efb\u610f\u7c7b\u578b\u7684\u5143\u7d20 \u5143\u7ec4\u4e00\u4f46\u521b\u5efa\u5c06\u4e0d\u53ef\u6539\u53d8 \u5143\u7ec4\u7684\u8868\u793a\u65b9\u5f0f \u00b6 \u7528\u5c0f\u62ec\u53f7() \u62ec\u8d77\u6765\uff0c\u5355\u4e2a\u5143\u7d20\u62ec\u8d77\u6765\u540e\u52a0\u9017\u53f7(,)\u533a\u5206\u5355\u4e2a\u5bf9\u8c61\u8fd8\u662f\u5143\u7ec4 \u521b\u5efa\u7a7a\u5143\u7ec4\u7684\u5b57\u9762\u503c\u8868\u8fbe\u5f0f \u00b6 t = () # () \u662f\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5143\u7ec4\u5bf9\u8c61 \u521b\u5efa\u975e\u7a7a\u5143\u7ec4\u7684\u5b57\u9762\u503c\u8868\u8fbe\u5f0f \u00b6 t = 200, t = (20,) t = (1, 2, 3) t = 100, 200, 300 \u6ce8: type(x)\u51fd\u6570 \u53ef\u4ee5\u8fd4\u56de\u5bf9\u8c61x\u7684\u7c7b\u578b \u5143\u7ec4\u9519\u8bef\u793a\u4f8b \u00b6 t = (200) # t \u7ed1\u5b9a200\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u662f\u5143\u7ec4 x, y, z = 100, 200, 300 # \u5e8f\u5217\u8d4b\u503c x, y, z = (100, 200, 300) x, y, z = [100, 200, 300] x, y, z = \"ABC\" \u5143\u7ec4\u7684\u6784\u9020\u51fd\u6570tuple \u00b6 tuple() \u751f\u6210\u4e00\u4e2a\u7a7a\u7684\u5143\u7ec4\u3000\uff0c\u7b49\u540c\u4e8e() tuple(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u4e00\u4e2a\u5143\u7ec4 \u793a\u4f8b: \u3000 t = tuple() t = tuple(\"ABC\") t = tuple(range(1, 10, 2)) \u5143\u7ec4\u7684\u8fd0\u7b97 \u00b6 \u5143\u7ec4\u53ea\u80fd\u548c\u5143\u7ec4\u76f8\u52a0 + \u7528\u4e8e\u7528\u62fc\u63a5\u65b9\u5f0f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4 * \u7528\u4e8e\u751f\u6210\u65b0\u7684\u91cd\u590d\u7684\u5143\u7ec4 t = (1,2,3) + (4, 5, 6) # t = (1,2,3,4,5,6) t += (7,8,9) # t = (1,2,3,4,5,6,7,8,9) t = (1,2) * 3 # t = (1,2,1,2,1,2) t *= 4 # t = (1,2,1,2,1,2....) \u5143\u7ec4\u7684\u6bd4\u8f83\u8fd0\u7b97 \u00b6 < <= > >= == != \u89c4\u5219\u4e0e\u5217\u8868\u7684\u6bd4\u8f83\u89c4\u5219\u5b8c\u5168\u76f8\u540c \u5143\u7ec4\u7684in / not in \u8fd0\u7b97\u7b26 \u00b6 \u7528\u4e8e\u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e8e\u5143\u7ec4\u4e2d,\u89c4\u5219\u5199\u5217\u8868\u5b8c\u5168\u76f8\u540c \u7d22\u5f15 \u00b6 \u7528\u6cd5\u7b49\u4e8e\u540c\u5217\u8868\u7684\u7d22\u5f15 \u5143\u7ec4\u4e0d\u652f\u6301\u7d22\u5f15\u8d4b\u503c \u5207\u7247 \u00b6 \u7528\u6cd5\u4e0e\u5217\u8868\u7684\u5207\u7247\u7528\u6cd5\u76f8\u540c \u5143\u7ec4\u7684\u5207\u7247\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4 \u5143\u7ec4\u4e0d\u80fd\u5207\u7247\u8d4b\u503c \u5143\u7ec4\u7684\u65b9\u6cd5 \u00b6 T.index(v[,begin[,end]]) \u8fd4\u56de\u5bf9\u5e94\u5143\u7d20\u7684\u7d22\u5f15\u4e0b\u6807\uff0c begin \u4e3a\u5f00\u59cb\u7d22\u5f15\uff0cend\u4e3a\u7ed3\u675f\u7d22\u5f15\uff0c\u5f53v\u4e0d\u5b58\u5728\u65f6\u89e6\u53d1ValueError\u9519\u8bef T.count(x) \u8fd4\u56de\u5143\u7ec4\u4e2d\u5bf9\u5e94\u7684\u5143\u7d20\u4e2a\u6570","title":"6. \u5143\u7ec4"},{"location":"python/python%E5%85%83%E7%BB%84/#tuple","text":"\u5143\u7ec4\u662f\u4e0d\u53ef\u6539\u53d8\u7684\u5e8f\u5217\uff0c\u540clist\u4e00\u6837\uff0c\u5143\u7ec4\u53ef\u4ee5\u5b58\u653e\u4efb\u610f\u7c7b\u578b\u7684\u5143\u7d20 \u5143\u7ec4\u4e00\u4f46\u521b\u5efa\u5c06\u4e0d\u53ef\u6539\u53d8","title":"\u5143\u7ec4 tuple"},{"location":"python/python%E5%85%83%E7%BB%84/#_1","text":"\u7528\u5c0f\u62ec\u53f7() \u62ec\u8d77\u6765\uff0c\u5355\u4e2a\u5143\u7d20\u62ec\u8d77\u6765\u540e\u52a0\u9017\u53f7(,)\u533a\u5206\u5355\u4e2a\u5bf9\u8c61\u8fd8\u662f\u5143\u7ec4","title":"\u5143\u7ec4\u7684\u8868\u793a\u65b9\u5f0f"},{"location":"python/python%E5%85%83%E7%BB%84/#_2","text":"t = () # () \u662f\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5143\u7ec4\u5bf9\u8c61","title":"\u521b\u5efa\u7a7a\u5143\u7ec4\u7684\u5b57\u9762\u503c\u8868\u8fbe\u5f0f"},{"location":"python/python%E5%85%83%E7%BB%84/#_3","text":"t = 200, t = (20,) t = (1, 2, 3) t = 100, 200, 300 \u6ce8: type(x)\u51fd\u6570 \u53ef\u4ee5\u8fd4\u56de\u5bf9\u8c61x\u7684\u7c7b\u578b","title":"\u521b\u5efa\u975e\u7a7a\u5143\u7ec4\u7684\u5b57\u9762\u503c\u8868\u8fbe\u5f0f"},{"location":"python/python%E5%85%83%E7%BB%84/#_4","text":"t = (200) # t \u7ed1\u5b9a200\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u662f\u5143\u7ec4 x, y, z = 100, 200, 300 # \u5e8f\u5217\u8d4b\u503c x, y, z = (100, 200, 300) x, y, z = [100, 200, 300] x, y, z = \"ABC\"","title":"\u5143\u7ec4\u9519\u8bef\u793a\u4f8b"},{"location":"python/python%E5%85%83%E7%BB%84/#tuple_1","text":"tuple() \u751f\u6210\u4e00\u4e2a\u7a7a\u7684\u5143\u7ec4\u3000\uff0c\u7b49\u540c\u4e8e() tuple(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u4e00\u4e2a\u5143\u7ec4 \u793a\u4f8b: \u3000 t = tuple() t = tuple(\"ABC\") t = tuple(range(1, 10, 2))","title":"\u5143\u7ec4\u7684\u6784\u9020\u51fd\u6570tuple"},{"location":"python/python%E5%85%83%E7%BB%84/#_5","text":"\u5143\u7ec4\u53ea\u80fd\u548c\u5143\u7ec4\u76f8\u52a0 + \u7528\u4e8e\u7528\u62fc\u63a5\u65b9\u5f0f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4 * \u7528\u4e8e\u751f\u6210\u65b0\u7684\u91cd\u590d\u7684\u5143\u7ec4 t = (1,2,3) + (4, 5, 6) # t = (1,2,3,4,5,6) t += (7,8,9) # t = (1,2,3,4,5,6,7,8,9) t = (1,2) * 3 # t = (1,2,1,2,1,2) t *= 4 # t = (1,2,1,2,1,2....)","title":"\u5143\u7ec4\u7684\u8fd0\u7b97"},{"location":"python/python%E5%85%83%E7%BB%84/#_6","text":"< <= > >= == != \u89c4\u5219\u4e0e\u5217\u8868\u7684\u6bd4\u8f83\u89c4\u5219\u5b8c\u5168\u76f8\u540c","title":"\u5143\u7ec4\u7684\u6bd4\u8f83\u8fd0\u7b97"},{"location":"python/python%E5%85%83%E7%BB%84/#in-not-in","text":"\u7528\u4e8e\u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e8e\u5143\u7ec4\u4e2d,\u89c4\u5219\u5199\u5217\u8868\u5b8c\u5168\u76f8\u540c","title":"\u5143\u7ec4\u7684in / not in \u8fd0\u7b97\u7b26"},{"location":"python/python%E5%85%83%E7%BB%84/#_7","text":"\u7528\u6cd5\u7b49\u4e8e\u540c\u5217\u8868\u7684\u7d22\u5f15 \u5143\u7ec4\u4e0d\u652f\u6301\u7d22\u5f15\u8d4b\u503c","title":"\u7d22\u5f15"},{"location":"python/python%E5%85%83%E7%BB%84/#_8","text":"\u7528\u6cd5\u4e0e\u5217\u8868\u7684\u5207\u7247\u7528\u6cd5\u76f8\u540c \u5143\u7ec4\u7684\u5207\u7247\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5143\u7ec4 \u5143\u7ec4\u4e0d\u80fd\u5207\u7247\u8d4b\u503c","title":"\u5207\u7247"},{"location":"python/python%E5%85%83%E7%BB%84/#_9","text":"T.index(v[,begin[,end]]) \u8fd4\u56de\u5bf9\u5e94\u5143\u7d20\u7684\u7d22\u5f15\u4e0b\u6807\uff0c begin \u4e3a\u5f00\u59cb\u7d22\u5f15\uff0cend\u4e3a\u7ed3\u675f\u7d22\u5f15\uff0c\u5f53v\u4e0d\u5b58\u5728\u65f6\u89e6\u53d1ValueError\u9519\u8bef T.count(x) \u8fd4\u56de\u5143\u7ec4\u4e2d\u5bf9\u5e94\u7684\u5143\u7d20\u4e2a\u6570","title":"\u5143\u7ec4\u7684\u65b9\u6cd5"},{"location":"python/python%E5%87%BD%E6%95%B0/","text":"\u51fd\u6570function \u00b6 \u51fd\u6570\u662f\u53ef\u4ee5\u91cd\u590d\u6267\u884c\u7684\u8bed\u53e5\u5757\uff0c\u53ef\u4ee5\u91cd\u590d\u8c03\u7528 \u4f5c\u7528 \u7528\u4e8e\u5c01\u88c5\u8bed\u53e5\u5757\uff0c\u63d0\u9ad8\u4ee3\u7801\u7684\u91cd\u7528\u6027 \u5b9a\u4e49\u7528\u6237\u7ea7\u522b\u7684\u51fd\u6570 def \u8bed\u53e5 \u00b6 \u8bed\u6cd5 def \u51fd\u6570\u540d(\u5f62\u53c2\u5217\u8868): \u8bed\u53e5\u5757 \u4f5c\u7528 \u7528\u8bed\u53e5\u5757\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u7528\u51fd\u6570\u540d\u53d8\u91cf\u7ed1\u5b9a\u8fd9\u4e2a\u51fd\u6570 \u8bed\u6cd5\u8bf4\u660e 1. \u51fd\u6570\u540d\u662f\u53d8\u91cf\uff0c\u5b83\u7528\u4e8e\u7ed1\u5b9a\u8bed\u53e5\u5757 2. \u51fd\u6570\u6709\u81ea\u5df1\u7684\u540d\u5b57\u7a7a\u95f4\uff0c\u5728\u51fd\u6570\u5916\u90e8\u4e0d\u53ef\u4ee5\u8bbf\u95ee\u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\uff0c \u5728\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee\u51fd\u6570\u5916\u90e8\u7684\u53d8\u91cf\uff08\u8981\u8ba9\u51fd\u6570\u5904\u7406\u5916\u90e8\u7684\u6570\u636e\u9700\u8981\u7528\u53c2\u6570\u7ed9\u51fd\u6570\u4f20\u5165\u4e00\u4e9b\u6570\u636e\uff09 3. \u51fd\u6570\u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570\u65f6\uff0c\u5f62\u53c2\u5217\u8868\u53ef\u4ee5\u4e3a\u7a7a 4. \u8bed\u53e5\u90e8\u5206\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u9700\u8981\u586b\u5145pass\u8bed\u53e5 # \u6b64\u793a\u4f8b\u7528def \u8bed\u53e5\u6765\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5e76\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 def say_hello (): print ( 'hello world!' ) print ( 'hello Tarena!' ) print ( 'hello everyone' ) # \u5e26\u6709\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528 def mymax ( a , b ): if a > b : print ( '\u6700\u5927\u503c\u4e3a\uff1a' , a ) else : print ( '\u6700\u5927\u503c\u4e3a\uff1a' , b ) if __name__ == '__main__' : mymax ( 1 , 2 ) #\u5e26\u4f20\u53c2\u8c03\u7528 \u51fd\u6570\u8c03\u7528 \u00b6 \u51fd\u6570\u540d(\u5b9e\u9645\u8c03\u7528\u4f20\u9012\u53c2\u6570) \u6ce8\uff1a\u5b9e\u9645\u8c03\u7528\u4f20\u9012\u53c2\u6570\uff0c\u4ee5\u540e\u79f0\u4e3a\u5b9e\u53c2 \u8bf4\u660e \u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u5982\u679c\u51fd\u6570\u5185\u90e8\u6ca1\u6709return \u8bed\u53e5\uff0c\u5219\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u8fd4\u56deNone\u5bf9\u8c61 \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570\uff0cmyadd, \u6b64\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u5217\u8868\u91cc\u6709\u4e24\u4e2a\u53c2\u6570x, y \u6b64\u51fd\u6570\u7684\u529f\u80fd\u662f\u6253\u5370x + y\u7684\u548c \u5199\u4e00\u4e2a\u51fd\u6570print_even\uff0c \u4f20\u5165\u4e00\u4e2a\u53c2\u6570n\u4ee3\u8868\u7ec8\u6b62\u6574\u6570\uff0c\u6253\u53702 4 6 8 ... n\u4e4b\u95f4\u7684\u6240\u6709\u5076\u6570 return \u8bed\u53e5 \u00b6 \u8bed\u6cd5 return [\u8868\u8fbe\u5f0f] \u6ce8 []\u4ee3\u8868\u53ef\u4ee5\u7701\u7565\u5176\u4e2d\u7684\u5185\u5bb9 \u4f5c\u7528 \u7528\u4e8e\u51fd\u6570\u4e2d\uff0c\u7ed3\u675f\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\uff0c\u8fd4\u56de\u5230\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5730\u65b9\uff0c\u540c\u65f6\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u5173\u7cfb \u8bf4\u660e 1. return \u8bed\u53e5\u540e\u8ddf\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7701\u7565\uff0c\u7701\u7565\u540e\u76f8\u5f53\u4e8ereturn None 2. \u5982\u679c\u51fd\u6570\u5185\u5185\u6709 retutn \u8bed\u53e5\uff0c\u5219\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u8fd4\u56deNone \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570myadd2,\u5b9e\u73b0\u8fd4\u56de\u4e24\u4e2a\u6570\u7684\u548c: \u5982\uff1a def myadd(a, b): .. \u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012 \u00b6 \u4f4d\u7f6e\u4f20\u9012 \u5e8f\u5217\u4f20\u53c2 \u5173\u952e\u5b57\u4f20\u53c2 \u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2 \u4f4d\u7f6e\u4f20\u53c2 \u00b6 \u5b9e\u9645\u53c2\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0e\u5f62\u53c2\u7684\u5bf9\u5e94\u5173\u7cfb\u662f\u6309\u4f4d\u7f6e\u4f9d\u6b21\u5bf9\u5e94\u7684 \u793a\u610f def mymin(a, b, c): pass mymin(1, 2, 3) #1,2,3\u4f4d\u7f6e\u662f\u5bf9\u5e94\u5173\u7cfb\u4f20\u9012\u7ed9a, b, c \u8bf4\u660e \u5b9e\u53c2\u548c\u5f62\u53c2\u901a\u8fc7\u4f4d\u7f6e\u8fdb\u884c\u4f20\u9012\u548c\u5339\u914d \u5b9e\u53c2\u7684\u4e2a\u6570\u548c\u5f62\u53c2\u7684\u4e2a\u6570\u76f8\u540c ```python \u6b64\u793a\u4f8b\u793a\u610f\u4f4d\u7f6e\u4f20\u53c2 \u00b6 def myfun(a, b, c): '''\u8fd9\u662f\u4e00\u4e2a\u51fd\u6570\u4f20\u53c2\u7684\u793a\u4f8b''' print('a\u7684\u503c\u662f\uff1a', a) print('b\u7684\u503c\u662f\uff1a', b) print('c\u7684\u503c\u662f\uff1a', c) myfun(1, 2, 3) myfun(4, 5, 6) ``` \u5e8f\u5217\u4f20\u53c2 \u00b6 \u5e8f\u5217\u4f20\u53c2\u662f\u6307\u51fd\u6570\u5728\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u7528*\u5c06\u5e8f\u5217\u62c6\u89e3\u6309\u4f4d\u7f6e\u8fdb\u884c\u4f20\u53c2\u7684\u65b9\u5f0f \u8bf4\u660e \u5e8f\u5217\u4f20\u53c2\u65f6\uff0c\u5e8f\u5217\u62c6\u89e3\u7684\u4f4d\u7f6e\u5c06\u4e0e\u5f62\u53c2\u4e00\u4e00\u5bf9\u5e94 \u5e8f\u5217\u7684\u4f4d\u7f6e\u4fe1\u606f\u4e5f\u5bf9\u5e94\u76f8\u5e94\u7684\u53c2\u6570\u4f4d\u7f6e # \u6b64\u793a\u4f8b\u793a\u610f\u5e8f\u5217\u4f20\u53c2 def myfun ( a , b , c ): print ( 'a\u7684\u503c\u662f\uff1a' , a ) print ( 'b\u7684\u503c\u662f\uff1a' , b ) print ( 'c\u7684\u503c\u662f\uff1a' , c ) s1 = [ 11 , 22 , 33 ] s2 = [ 44 , 55 , 66 ] s3 = 'ABC' myfun ( * s1 ) myfun ( * s3 ) \u5173\u952e\u5b57\u4f20\u53c2 \u00b6 \u5173\u952e\u5b57\u4f20\u53c2\u662f\u6307\u4f20\u53c2\u65f6\uff0c\u6309\u7167\u5f62\u53c2\u7684\u540d\u79f0\u7ed9\u5f62\u53c2\u8d4b\u503c \u5b9e\u53c2\u548c\u5f62\u53c2\u540d\u79f0\u8fdb\u884c\u5339\u914d \u793a\u610f def myfun(a, b, c) pass myfun(b = 22, c = 33, a = 11) # 11->a 22->b 33->c myfun(b = 66, c = 55, a = 44) # 44->a 66->b 55->c \u8bf4\u660e \u5b9e\u53c2\u548c\u5f62\u53c2\u6309\u7740\u5f62\u53c2\u540d\u8fdb\u884c\u5339\u914d\uff0c\u53ef\u4ee5\u4e0d\u6309\u4f4d\u7f6e\u8fdb\u884c\u5339\u914d # \u6b64\u793a\u4f8b\u793a\u610f\u5173\u952e\u5b57\u4f20\u53c2 def myfun ( a , b , c ): print ( 'a\u7684\u503c\u662f\uff1a' , a ) print ( 'b\u7684\u503c\u662f\uff1a' , b ) print ( 'c\u7684\u503c\u662f\uff1a' , c ) myfun ( b = 22 , c = 33 , a = 11 ) # 11->a 22->b 33->c myfun ( b = 66 , c = 55 , a = 44 ) # 44->a 66->b 55->c \u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2 \u00b6 \u662f\u6307\u5b9e\u53c2\u4e3a\u5b57\u5178\uff0c\u5c06\u5b57\u5178\u7528**\u62c6\u89e3\u540e\u8fdb\u884c\u5173\u952e\u5b57\u4f20\u53c2\u7684\u65b9\u5f0f \u8bf4\u660e \u5b57\u5178\u7684\u952e\u540d\u548c\u5f62\u53c2\u540d\u4e00\u81f4 \u5b57\u5178\u7684\u952e\u540d\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\uff08\u4e14\u4e3a\u6807\u8bc6\u7b26\u7684\u547d\u540d\u65b9\u5f0f\uff09 \u5b57\u5178\u7684\u952e\u540d\u8981\u5728\u5f62\u53c2\u4e2d\u5b58\u5728 # \u6b64\u793a\u4f8b\u793a\u610f\u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2 def myfun ( a , b , c ): print ( 'a\u7684\u503c\u662f\uff1a' , a ) print ( 'b\u7684\u503c\u662f\uff1a' , b ) print ( 'c\u7684\u503c\u662f\uff1a' , c ) d1 = { 'a' : 100 , 'b' : 200 , 'c' : 250 } myfun ( ** d1 ) # 11->a 22->b 33->c myfun ( b = 66 , c = 55 , a = 44 ) # 44->a 66->b 55->c \u4f20\u53c2\u7684\u7efc\u5408\u4f20\u53c2 \u00b6 \u51fd\u6570\u7684\u4f20\u53c2\u65b9\u5f0f\uff0c\u5728\u80fd\u786e\u5b9a\u5f62\u53c2\u80fd\u552f\u4e00\u5339\u914d\u5230\u76f8\u5e94\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408 \u51fd\u6570\u7684\u4f4d\u7f6e\u4f20\u53c2\u8981\u5148\u4e8e\u5173\u952e\u5b57\u4f20\u53c2 \u8bf4\u660e \u4f4d\u7f6e\u4f20\u53c2\u548c\u5e8f\u5217\u4f20\u53c2\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\u4e14\u53ef\u4ee5\u987a\u5e8f\u98a0\u5012 \u5982\uff1a myfun(100, *[200, 300]) myfun(*[100, 200], 300) myfun(*[100], 200, *[300]) \u51fd\u6570\u7684\u5173\u952e\u5b57\u4f20\u53c2\u548c\u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\uff0c\u4e14\u53ef\u4ee5\u98a0\u5012\u987a\u5e8f \u5982\uff1a myfun(c=300, **{'b': 200,'a'\uff1a100}) myfun(**{'b': 200, 'c': 300}, a=100) \u4f4d\u7f6e\u4f20\u53c2\u548c\u5173\u952e\u5b57\u4f20\u53c2\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\uff0c\u4f46\u4f4d\u7f6e\u4f20\u53c2\u8981\u5148\u4e8e\u5173\u952e\u5b57\u4f20\u53c2\uff1a \u5982\uff1a myfun(100, c=300, b=200) myfun(10, c=30, **{'b': 20}) \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570\uff0cgetminmax(a, b, c)\u4e09\u4e2a\u53c2\u6570\uff0c\u6b64\u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u4e09\u4e2a\u6570\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c \u5f62\u6210\u5143\u7ec4\u540e\u8fd4\u56de \u5143\u7ec4\u683c\u5f0f\uff1a \uff08\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff09 \u53ef\u4ee5\u5c1d\u8bd5\u4e0a\u8ff0\u4f20\u53c2\u65b9\u5f0f \u51fd\u6570\u7684\u7f3a\u7701\u53c2\u6570 \u00b6 \u8bed\u6cd5\uff1a def \u51fd\u6570\u540d(\u5f62\u53c2\u540d1=\u9ed8\u8ba4\u5b9e\u53c21, \u5f62\u53c2\u540d2=\u9ed8\u8ba4\u5b9e\u53c2\u540d2....): \u8bed\u53e5\u5757 # \u6b64\u793a\u4f8b\u793a\u610f\u7f3a\u7701\u53c2\u6570 def info ( name , age = 1 , address = '\u4e0d\u8be6' ): print ( '\u6211\u53eb' , name , '\u6211\u4eca\u5e74' , age , '\u5c81' , '\u6211\u7684\u4f4f\u5740\u662f\uff1a' , address ) info ( '\u8001\u738b' , '22' ) \u8bf4\u660e \u7f3a\u7701\u53c2\u6570\u5fc5\u987b\u81ea\u53f3\u81f3\u5de6\u4f9d\u6b21\u5b58\u5728\uff0c\u5982\u679c\u4e00\u4e2a\u53c2\u6570\u6709\u7f3a\u7701\u53c2\u6570\uff0c\u5219\u5176\u53f3\u4fa7\u7684\u6240\u6709\u53c2\u6570\u90fd\u5fc5\u987b\u6709\u7f3a\u7701\u53c2\u6570 \u7f3a\u7701\u53c2\u6570\u53ef\u4ee5\u67090\u4e2a\u6216\u591a\u4e2a\uff0c\u751a\u81f3\u5168\u90e8\u90fd\u6709\u7f3a\u7701\u53c2\u6570 # \u793a\u4f8b def info ( a , b = 10 , c ): # \u9519\u7684 pass def info ( a = 100 , b = 200 , c = 300 ): #\u5bf9\u7684 pass \u7ec3\u4e60 1. \u5199\u4e00\u4e2a\u51fd\u6570myadd,\u6b64\u51fd\u6570\u53ef\u4ee5\u8ba1\u7b97\u4e24\u4e2a\uff0c\u4e09\u4e2a\uff0c\u56db\u4e2a\u5b9e\u53c2\u7684\u548c def myadd(...): ... print(myadd(100, 200)) #300 print(myadd(100, 200, 300)) #600 print(myadd(100, 200, 300, 400)) #1000 print(myadd(100, 200, 300, 400, 500)) #\u62a5\u9519 2. \u5199\u4e00\u4e2amyrange()\u51fd\u6570\uff1a \u6b64\u51fd\u6570\u7528\u7ed9\u5b9a\u7684\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b58\u6709\u5bf9\u5e94\u7684\u6574\u6570\u5217\u8868 \u5982\uff1a def myrange(): ... l = myrange(5) #l = [0, 1, 2, 3, 4] l = myrange(5, 10) #l = [5, 6, 7, 8, 9] l = myrange(5, 10, 2) #l = [5, 7, 9] \u51fd\u6570\u5f62\u53c2\u7684\u5b9a\u4e49\u65b9\u5f0f \u00b6 \u4f4d\u7f6e\u5f62\u53c2 \u661f\u53f7\u5143\u7ec4\u5f62\u53c2 \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 \u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2 \u4f4d\u7f6e\u5f62\u53c2 \u00b6 def \u51fd\u6570\u540d(\u5f62\u53c2\u540d1, \u5f62\u53c2\u540d1, ...) \u8bed\u53e5\u5757 \u661f\u53f7\u5143\u7ec4\u5f62\u53c2 \u00b6 def \u51fd\u6570\u540d(*\u5143\u7ec4\u5f62\u53c2\u540d): \u8bed\u53e5\u5757 \u4f5c\u7528 \u6536\u96c6\u591a\u4f59\u4f4d\u7f6e\u4f20\u53c2 \u8bf4\u660e \u5143\u7ec4\u5f62\u53c2\u4e00\u822c\u547d\u540d\u4e3a'agrs' # \u6b64\u793a\u4f8b\u793a\u610f\u661f\u53f7\u5143\u7ec4\u5f62\u53c2 def star_tuple_args ( * args ): print ( args ) print ( '\u5b9e\u53c2\u7684\u4e2a\u6570\u662f\uff1a' , len ( args )) star_tuple_args () star_tuple_args ( 1 , 2 , 3 ) star_tuple_args ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) star_tuple_args ( 'dasda' , 1 ) \u7ec3\u4e60 1.\u5199\u4e00\u4e2a\u51fd\u6570\uff0cmysum \u53ef\u4ee5\u4f20\u5165\u4efb\u610f\u4e2a\u5b9e\u53c2\u7684\u6570\u5b57\uff0c\u8fd4\u56de\u6240\u6709\u5b9e\u53c2\u7684\u548c def mysum(*args): return sum(args) print(mysum(1, 2, 3, 4)) #10 print(mysum(1, 2, 3, 4, 5, 6)) #21 2.\u5df2\u77e5\u5185\u5efa\u51fd\u6570max\u5e2e\u52a9\u6587\u6863\u4e3ahelp(max) max(iterable, *[, default=obj, key=func]) -> value max(arg1, arg2, *args, *[, key=func]) -> value \u4eff\u9020max\u5199\u4e00\u4e2amymax\u51fd\u6570\uff0c\u529f\u80fd\u8981\u6c42\u4e0emax\u5b8c\u5168\u76f8\u540c\uff08\u4e0d\u5141\u8bb8\u7528max\uff09 print(mymax([6, 8, 3, 5])) # 8 print(mymax(100, 200)) #200 print(mymax(1, 3, 5, 9, 7)) #9 \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 \u00b6 \u3010\u3010 *\u662f\u4f4d\u7f6e\u5f62\u53c2\u548c\u5173\u952e\u5b57\u884c\u53c2\u7684\u5206\u9694\u7b26\u3011\u3011 \u8bed\u6cd5 def \u51fd\u6570\u540d(*, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2)\uff1a \u8bed\u53e5\u5757 def \u51fd\u6570\u540d(*args, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2): \u8bed\u53e5\u5757 \u4f5c\u7528 \u5f3a\u5236\u6240\u6709\u7684\u53c2\u6570\u5fc5\u987b\u7528\u5173\u952e\u5b57\u4f20\u53c2\u6216\u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2 # \u6b64\u793a\u4f8b\u793a\u610f\u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 # def \u51fd\u6570\u540d(*, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2)\uff1a # \u8bed\u53e5\u5757 def fun ( * , c , d ): print ( 'c =' , c ) print ( 'd =' , d ) # print(fun(3, 4)) #\u51fa\u9519 print ( fun ( d = 4 , c = 3 )) def fun2 ( a , b , * , c , d ): # *\u662f\u4f4d\u7f6e\u5f62\u53c2\u548c\u5173\u952e\u5b57\u884c\u53c2\u7684\u5206\u9694\u7b26 print ( a , b , c , d ) fun2 ( 1 , 2 , c = 3 , d = 4 ) # def \u51fd\u6570\u540d(*args, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2): # \u8bed\u53e5\u5757 def fun3 ( a , b , * args , c = 7 , d = 8 ): print ( args , a , b , c , d ) fun3 ( 1 , 3 , 4 , 5 , 6 ) \u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2 \u00b6 \u8bed\u6cd5 def \u51fd\u6570\u540d(**\u5b57\u5178\u5f62\u53c2\u540d): \u8bed\u53e5\u5757 \u4f5c\u7528 \u6536\u96c6\u591a\u4f59\u7684\u5173\u952e\u5b57\u5f62\u53c2 \u8bf4\u660e \u5b57\u5178\u5f62\u53c2\u540d\u4e00\u822c\u547d\u540d\u4e3a kwargs # \u6b64\u793a\u4f8b\u793a\u610f\u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2 def fun ( ** kwargs ): print ( '\u5173\u952e\u5b57\u5f62\u53c2\u7684\u4e2a\u6570\u4e3a\uff1a' , len ( kwargs )) print ( 'kwargs' , kwargs ) fun ( name = 'yangwenjun' , age = 35 , address = '\u6e29\u99a8\u5bb6\u56ed' ) fun ( a = 1 , b = \"BBBB\" , c = [ 1 , 2 , 3 ], d = True ) fun () \u51fd\u6570\u7684\u53c2\u6570\u8bf4\u660e \u00b6 \u4f4d\u7f6e\u5f62\u53c2\uff0c\u7f3a\u7701\u53c2\u6570\uff0c\u661f\u53f7\u5143\u7ec4\u5f62\u53c2\uff0c\u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2\uff0c\u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528 \u51fd\u6570\u53c2\u6570\u81ea\u5de6\u81f3\u53f3\u7684\u987a\u5e8f\u4e3a\uff1a 1. \u4f4d\u7f6e\u5f62\u53c2 2. \u661f\u53f7\u5143\u7ec4\u5f62\u53c2 3. \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 4. \u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2 \u793a\u4f8b def fn(a, b, *args, c, **kwargs): pass fn(100, 200, 300, 400, d='D', e='E', c='C') \u601d\u8003\u9898 \u00b6 \u67e5\u770b>>>help(print) \u731c\u60f3print\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u662f\u5982\u4f55\u5b9a\u4e49\u7684 print(*args, sep=' ',end='\\n')","title":"9. \u51fd\u6570"},{"location":"python/python%E5%87%BD%E6%95%B0/#function","text":"\u51fd\u6570\u662f\u53ef\u4ee5\u91cd\u590d\u6267\u884c\u7684\u8bed\u53e5\u5757\uff0c\u53ef\u4ee5\u91cd\u590d\u8c03\u7528 \u4f5c\u7528 \u7528\u4e8e\u5c01\u88c5\u8bed\u53e5\u5757\uff0c\u63d0\u9ad8\u4ee3\u7801\u7684\u91cd\u7528\u6027 \u5b9a\u4e49\u7528\u6237\u7ea7\u522b\u7684\u51fd\u6570","title":"\u51fd\u6570function"},{"location":"python/python%E5%87%BD%E6%95%B0/#def","text":"\u8bed\u6cd5 def \u51fd\u6570\u540d(\u5f62\u53c2\u5217\u8868): \u8bed\u53e5\u5757 \u4f5c\u7528 \u7528\u8bed\u53e5\u5757\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u7528\u51fd\u6570\u540d\u53d8\u91cf\u7ed1\u5b9a\u8fd9\u4e2a\u51fd\u6570 \u8bed\u6cd5\u8bf4\u660e 1. \u51fd\u6570\u540d\u662f\u53d8\u91cf\uff0c\u5b83\u7528\u4e8e\u7ed1\u5b9a\u8bed\u53e5\u5757 2. \u51fd\u6570\u6709\u81ea\u5df1\u7684\u540d\u5b57\u7a7a\u95f4\uff0c\u5728\u51fd\u6570\u5916\u90e8\u4e0d\u53ef\u4ee5\u8bbf\u95ee\u51fd\u6570\u5185\u90e8\u7684\u53d8\u91cf\uff0c \u5728\u51fd\u6570\u5185\u90e8\u53ef\u4ee5\u8bbf\u95ee\u51fd\u6570\u5916\u90e8\u7684\u53d8\u91cf\uff08\u8981\u8ba9\u51fd\u6570\u5904\u7406\u5916\u90e8\u7684\u6570\u636e\u9700\u8981\u7528\u53c2\u6570\u7ed9\u51fd\u6570\u4f20\u5165\u4e00\u4e9b\u6570\u636e\uff09 3. \u51fd\u6570\u4e0d\u9700\u8981\u4f20\u5165\u53c2\u6570\u65f6\uff0c\u5f62\u53c2\u5217\u8868\u53ef\u4ee5\u4e3a\u7a7a 4. \u8bed\u53e5\u90e8\u5206\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u9700\u8981\u586b\u5145pass\u8bed\u53e5 # \u6b64\u793a\u4f8b\u7528def \u8bed\u53e5\u6765\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5e76\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 def say_hello (): print ( 'hello world!' ) print ( 'hello Tarena!' ) print ( 'hello everyone' ) # \u5e26\u6709\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528 def mymax ( a , b ): if a > b : print ( '\u6700\u5927\u503c\u4e3a\uff1a' , a ) else : print ( '\u6700\u5927\u503c\u4e3a\uff1a' , b ) if __name__ == '__main__' : mymax ( 1 , 2 ) #\u5e26\u4f20\u53c2\u8c03\u7528","title":"def \u8bed\u53e5"},{"location":"python/python%E5%87%BD%E6%95%B0/#_1","text":"\u51fd\u6570\u540d(\u5b9e\u9645\u8c03\u7528\u4f20\u9012\u53c2\u6570) \u6ce8\uff1a\u5b9e\u9645\u8c03\u7528\u4f20\u9012\u53c2\u6570\uff0c\u4ee5\u540e\u79f0\u4e3a\u5b9e\u53c2 \u8bf4\u660e \u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u5982\u679c\u51fd\u6570\u5185\u90e8\u6ca1\u6709return \u8bed\u53e5\uff0c\u5219\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u8fd4\u56deNone\u5bf9\u8c61 \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570\uff0cmyadd, \u6b64\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u5217\u8868\u91cc\u6709\u4e24\u4e2a\u53c2\u6570x, y \u6b64\u51fd\u6570\u7684\u529f\u80fd\u662f\u6253\u5370x + y\u7684\u548c \u5199\u4e00\u4e2a\u51fd\u6570print_even\uff0c \u4f20\u5165\u4e00\u4e2a\u53c2\u6570n\u4ee3\u8868\u7ec8\u6b62\u6574\u6570\uff0c\u6253\u53702 4 6 8 ... n\u4e4b\u95f4\u7684\u6240\u6709\u5076\u6570","title":"\u51fd\u6570\u8c03\u7528"},{"location":"python/python%E5%87%BD%E6%95%B0/#return","text":"\u8bed\u6cd5 return [\u8868\u8fbe\u5f0f] \u6ce8 []\u4ee3\u8868\u53ef\u4ee5\u7701\u7565\u5176\u4e2d\u7684\u5185\u5bb9 \u4f5c\u7528 \u7528\u4e8e\u51fd\u6570\u4e2d\uff0c\u7ed3\u675f\u5f53\u524d\u51fd\u6570\u7684\u6267\u884c\uff0c\u8fd4\u56de\u5230\u8c03\u7528\u8be5\u51fd\u6570\u7684\u5730\u65b9\uff0c\u540c\u65f6\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u7684\u5f15\u7528\u5173\u7cfb \u8bf4\u660e 1. return \u8bed\u53e5\u540e\u8ddf\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7701\u7565\uff0c\u7701\u7565\u540e\u76f8\u5f53\u4e8ereturn None 2. \u5982\u679c\u51fd\u6570\u5185\u5185\u6709 retutn \u8bed\u53e5\uff0c\u5219\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u8fd4\u56deNone \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570myadd2,\u5b9e\u73b0\u8fd4\u56de\u4e24\u4e2a\u6570\u7684\u548c: \u5982\uff1a def myadd(a, b): ..","title":"return \u8bed\u53e5"},{"location":"python/python%E5%87%BD%E6%95%B0/#_2","text":"\u4f4d\u7f6e\u4f20\u9012 \u5e8f\u5217\u4f20\u53c2 \u5173\u952e\u5b57\u4f20\u53c2 \u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2","title":"\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012"},{"location":"python/python%E5%87%BD%E6%95%B0/#_3","text":"\u5b9e\u9645\u53c2\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0e\u5f62\u53c2\u7684\u5bf9\u5e94\u5173\u7cfb\u662f\u6309\u4f4d\u7f6e\u4f9d\u6b21\u5bf9\u5e94\u7684 \u793a\u610f def mymin(a, b, c): pass mymin(1, 2, 3) #1,2,3\u4f4d\u7f6e\u662f\u5bf9\u5e94\u5173\u7cfb\u4f20\u9012\u7ed9a, b, c \u8bf4\u660e \u5b9e\u53c2\u548c\u5f62\u53c2\u901a\u8fc7\u4f4d\u7f6e\u8fdb\u884c\u4f20\u9012\u548c\u5339\u914d \u5b9e\u53c2\u7684\u4e2a\u6570\u548c\u5f62\u53c2\u7684\u4e2a\u6570\u76f8\u540c ```python","title":"\u4f4d\u7f6e\u4f20\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_4","text":"def myfun(a, b, c): '''\u8fd9\u662f\u4e00\u4e2a\u51fd\u6570\u4f20\u53c2\u7684\u793a\u4f8b''' print('a\u7684\u503c\u662f\uff1a', a) print('b\u7684\u503c\u662f\uff1a', b) print('c\u7684\u503c\u662f\uff1a', c) myfun(1, 2, 3) myfun(4, 5, 6) ```","title":"\u6b64\u793a\u4f8b\u793a\u610f\u4f4d\u7f6e\u4f20\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_5","text":"\u5e8f\u5217\u4f20\u53c2\u662f\u6307\u51fd\u6570\u5728\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u7528*\u5c06\u5e8f\u5217\u62c6\u89e3\u6309\u4f4d\u7f6e\u8fdb\u884c\u4f20\u53c2\u7684\u65b9\u5f0f \u8bf4\u660e \u5e8f\u5217\u4f20\u53c2\u65f6\uff0c\u5e8f\u5217\u62c6\u89e3\u7684\u4f4d\u7f6e\u5c06\u4e0e\u5f62\u53c2\u4e00\u4e00\u5bf9\u5e94 \u5e8f\u5217\u7684\u4f4d\u7f6e\u4fe1\u606f\u4e5f\u5bf9\u5e94\u76f8\u5e94\u7684\u53c2\u6570\u4f4d\u7f6e # \u6b64\u793a\u4f8b\u793a\u610f\u5e8f\u5217\u4f20\u53c2 def myfun ( a , b , c ): print ( 'a\u7684\u503c\u662f\uff1a' , a ) print ( 'b\u7684\u503c\u662f\uff1a' , b ) print ( 'c\u7684\u503c\u662f\uff1a' , c ) s1 = [ 11 , 22 , 33 ] s2 = [ 44 , 55 , 66 ] s3 = 'ABC' myfun ( * s1 ) myfun ( * s3 )","title":"\u5e8f\u5217\u4f20\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_6","text":"\u5173\u952e\u5b57\u4f20\u53c2\u662f\u6307\u4f20\u53c2\u65f6\uff0c\u6309\u7167\u5f62\u53c2\u7684\u540d\u79f0\u7ed9\u5f62\u53c2\u8d4b\u503c \u5b9e\u53c2\u548c\u5f62\u53c2\u540d\u79f0\u8fdb\u884c\u5339\u914d \u793a\u610f def myfun(a, b, c) pass myfun(b = 22, c = 33, a = 11) # 11->a 22->b 33->c myfun(b = 66, c = 55, a = 44) # 44->a 66->b 55->c \u8bf4\u660e \u5b9e\u53c2\u548c\u5f62\u53c2\u6309\u7740\u5f62\u53c2\u540d\u8fdb\u884c\u5339\u914d\uff0c\u53ef\u4ee5\u4e0d\u6309\u4f4d\u7f6e\u8fdb\u884c\u5339\u914d # \u6b64\u793a\u4f8b\u793a\u610f\u5173\u952e\u5b57\u4f20\u53c2 def myfun ( a , b , c ): print ( 'a\u7684\u503c\u662f\uff1a' , a ) print ( 'b\u7684\u503c\u662f\uff1a' , b ) print ( 'c\u7684\u503c\u662f\uff1a' , c ) myfun ( b = 22 , c = 33 , a = 11 ) # 11->a 22->b 33->c myfun ( b = 66 , c = 55 , a = 44 ) # 44->a 66->b 55->c","title":"\u5173\u952e\u5b57\u4f20\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_7","text":"\u662f\u6307\u5b9e\u53c2\u4e3a\u5b57\u5178\uff0c\u5c06\u5b57\u5178\u7528**\u62c6\u89e3\u540e\u8fdb\u884c\u5173\u952e\u5b57\u4f20\u53c2\u7684\u65b9\u5f0f \u8bf4\u660e \u5b57\u5178\u7684\u952e\u540d\u548c\u5f62\u53c2\u540d\u4e00\u81f4 \u5b57\u5178\u7684\u952e\u540d\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\uff08\u4e14\u4e3a\u6807\u8bc6\u7b26\u7684\u547d\u540d\u65b9\u5f0f\uff09 \u5b57\u5178\u7684\u952e\u540d\u8981\u5728\u5f62\u53c2\u4e2d\u5b58\u5728 # \u6b64\u793a\u4f8b\u793a\u610f\u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2 def myfun ( a , b , c ): print ( 'a\u7684\u503c\u662f\uff1a' , a ) print ( 'b\u7684\u503c\u662f\uff1a' , b ) print ( 'c\u7684\u503c\u662f\uff1a' , c ) d1 = { 'a' : 100 , 'b' : 200 , 'c' : 250 } myfun ( ** d1 ) # 11->a 22->b 33->c myfun ( b = 66 , c = 55 , a = 44 ) # 44->a 66->b 55->c","title":"\u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_8","text":"\u51fd\u6570\u7684\u4f20\u53c2\u65b9\u5f0f\uff0c\u5728\u80fd\u786e\u5b9a\u5f62\u53c2\u80fd\u552f\u4e00\u5339\u914d\u5230\u76f8\u5e94\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408 \u51fd\u6570\u7684\u4f4d\u7f6e\u4f20\u53c2\u8981\u5148\u4e8e\u5173\u952e\u5b57\u4f20\u53c2 \u8bf4\u660e \u4f4d\u7f6e\u4f20\u53c2\u548c\u5e8f\u5217\u4f20\u53c2\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\u4e14\u53ef\u4ee5\u987a\u5e8f\u98a0\u5012 \u5982\uff1a myfun(100, *[200, 300]) myfun(*[100, 200], 300) myfun(*[100], 200, *[300]) \u51fd\u6570\u7684\u5173\u952e\u5b57\u4f20\u53c2\u548c\u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\uff0c\u4e14\u53ef\u4ee5\u98a0\u5012\u987a\u5e8f \u5982\uff1a myfun(c=300, **{'b': 200,'a'\uff1a100}) myfun(**{'b': 200, 'c': 300}, a=100) \u4f4d\u7f6e\u4f20\u53c2\u548c\u5173\u952e\u5b57\u4f20\u53c2\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528\uff0c\u4f46\u4f4d\u7f6e\u4f20\u53c2\u8981\u5148\u4e8e\u5173\u952e\u5b57\u4f20\u53c2\uff1a \u5982\uff1a myfun(100, c=300, b=200) myfun(10, c=30, **{'b': 20}) \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570\uff0cgetminmax(a, b, c)\u4e09\u4e2a\u53c2\u6570\uff0c\u6b64\u51fd\u6570\u7528\u4e8e\u8fd4\u56de\u4e09\u4e2a\u6570\u7684\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c \u5f62\u6210\u5143\u7ec4\u540e\u8fd4\u56de \u5143\u7ec4\u683c\u5f0f\uff1a \uff08\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff09 \u53ef\u4ee5\u5c1d\u8bd5\u4e0a\u8ff0\u4f20\u53c2\u65b9\u5f0f","title":"\u4f20\u53c2\u7684\u7efc\u5408\u4f20\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_9","text":"\u8bed\u6cd5\uff1a def \u51fd\u6570\u540d(\u5f62\u53c2\u540d1=\u9ed8\u8ba4\u5b9e\u53c21, \u5f62\u53c2\u540d2=\u9ed8\u8ba4\u5b9e\u53c2\u540d2....): \u8bed\u53e5\u5757 # \u6b64\u793a\u4f8b\u793a\u610f\u7f3a\u7701\u53c2\u6570 def info ( name , age = 1 , address = '\u4e0d\u8be6' ): print ( '\u6211\u53eb' , name , '\u6211\u4eca\u5e74' , age , '\u5c81' , '\u6211\u7684\u4f4f\u5740\u662f\uff1a' , address ) info ( '\u8001\u738b' , '22' ) \u8bf4\u660e \u7f3a\u7701\u53c2\u6570\u5fc5\u987b\u81ea\u53f3\u81f3\u5de6\u4f9d\u6b21\u5b58\u5728\uff0c\u5982\u679c\u4e00\u4e2a\u53c2\u6570\u6709\u7f3a\u7701\u53c2\u6570\uff0c\u5219\u5176\u53f3\u4fa7\u7684\u6240\u6709\u53c2\u6570\u90fd\u5fc5\u987b\u6709\u7f3a\u7701\u53c2\u6570 \u7f3a\u7701\u53c2\u6570\u53ef\u4ee5\u67090\u4e2a\u6216\u591a\u4e2a\uff0c\u751a\u81f3\u5168\u90e8\u90fd\u6709\u7f3a\u7701\u53c2\u6570 # \u793a\u4f8b def info ( a , b = 10 , c ): # \u9519\u7684 pass def info ( a = 100 , b = 200 , c = 300 ): #\u5bf9\u7684 pass \u7ec3\u4e60 1. \u5199\u4e00\u4e2a\u51fd\u6570myadd,\u6b64\u51fd\u6570\u53ef\u4ee5\u8ba1\u7b97\u4e24\u4e2a\uff0c\u4e09\u4e2a\uff0c\u56db\u4e2a\u5b9e\u53c2\u7684\u548c def myadd(...): ... print(myadd(100, 200)) #300 print(myadd(100, 200, 300)) #600 print(myadd(100, 200, 300, 400)) #1000 print(myadd(100, 200, 300, 400, 500)) #\u62a5\u9519 2. \u5199\u4e00\u4e2amyrange()\u51fd\u6570\uff1a \u6b64\u51fd\u6570\u7528\u7ed9\u5b9a\u7684\u53c2\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b58\u6709\u5bf9\u5e94\u7684\u6574\u6570\u5217\u8868 \u5982\uff1a def myrange(): ... l = myrange(5) #l = [0, 1, 2, 3, 4] l = myrange(5, 10) #l = [5, 6, 7, 8, 9] l = myrange(5, 10, 2) #l = [5, 7, 9]","title":"\u51fd\u6570\u7684\u7f3a\u7701\u53c2\u6570"},{"location":"python/python%E5%87%BD%E6%95%B0/#_10","text":"\u4f4d\u7f6e\u5f62\u53c2 \u661f\u53f7\u5143\u7ec4\u5f62\u53c2 \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 \u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2","title":"\u51fd\u6570\u5f62\u53c2\u7684\u5b9a\u4e49\u65b9\u5f0f"},{"location":"python/python%E5%87%BD%E6%95%B0/#_11","text":"def \u51fd\u6570\u540d(\u5f62\u53c2\u540d1, \u5f62\u53c2\u540d1, ...) \u8bed\u53e5\u5757","title":"\u4f4d\u7f6e\u5f62\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_12","text":"def \u51fd\u6570\u540d(*\u5143\u7ec4\u5f62\u53c2\u540d): \u8bed\u53e5\u5757 \u4f5c\u7528 \u6536\u96c6\u591a\u4f59\u4f4d\u7f6e\u4f20\u53c2 \u8bf4\u660e \u5143\u7ec4\u5f62\u53c2\u4e00\u822c\u547d\u540d\u4e3a'agrs' # \u6b64\u793a\u4f8b\u793a\u610f\u661f\u53f7\u5143\u7ec4\u5f62\u53c2 def star_tuple_args ( * args ): print ( args ) print ( '\u5b9e\u53c2\u7684\u4e2a\u6570\u662f\uff1a' , len ( args )) star_tuple_args () star_tuple_args ( 1 , 2 , 3 ) star_tuple_args ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) star_tuple_args ( 'dasda' , 1 ) \u7ec3\u4e60 1.\u5199\u4e00\u4e2a\u51fd\u6570\uff0cmysum \u53ef\u4ee5\u4f20\u5165\u4efb\u610f\u4e2a\u5b9e\u53c2\u7684\u6570\u5b57\uff0c\u8fd4\u56de\u6240\u6709\u5b9e\u53c2\u7684\u548c def mysum(*args): return sum(args) print(mysum(1, 2, 3, 4)) #10 print(mysum(1, 2, 3, 4, 5, 6)) #21 2.\u5df2\u77e5\u5185\u5efa\u51fd\u6570max\u5e2e\u52a9\u6587\u6863\u4e3ahelp(max) max(iterable, *[, default=obj, key=func]) -> value max(arg1, arg2, *args, *[, key=func]) -> value \u4eff\u9020max\u5199\u4e00\u4e2amymax\u51fd\u6570\uff0c\u529f\u80fd\u8981\u6c42\u4e0emax\u5b8c\u5168\u76f8\u540c\uff08\u4e0d\u5141\u8bb8\u7528max\uff09 print(mymax([6, 8, 3, 5])) # 8 print(mymax(100, 200)) #200 print(mymax(1, 3, 5, 9, 7)) #9","title":"\u661f\u53f7\u5143\u7ec4\u5f62\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_13","text":"\u3010\u3010 *\u662f\u4f4d\u7f6e\u5f62\u53c2\u548c\u5173\u952e\u5b57\u884c\u53c2\u7684\u5206\u9694\u7b26\u3011\u3011 \u8bed\u6cd5 def \u51fd\u6570\u540d(*, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2)\uff1a \u8bed\u53e5\u5757 def \u51fd\u6570\u540d(*args, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2): \u8bed\u53e5\u5757 \u4f5c\u7528 \u5f3a\u5236\u6240\u6709\u7684\u53c2\u6570\u5fc5\u987b\u7528\u5173\u952e\u5b57\u4f20\u53c2\u6216\u5b57\u5178\u5173\u952e\u5b57\u4f20\u53c2 # \u6b64\u793a\u4f8b\u793a\u610f\u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 # def \u51fd\u6570\u540d(*, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2)\uff1a # \u8bed\u53e5\u5757 def fun ( * , c , d ): print ( 'c =' , c ) print ( 'd =' , d ) # print(fun(3, 4)) #\u51fa\u9519 print ( fun ( d = 4 , c = 3 )) def fun2 ( a , b , * , c , d ): # *\u662f\u4f4d\u7f6e\u5f62\u53c2\u548c\u5173\u952e\u5b57\u884c\u53c2\u7684\u5206\u9694\u7b26 print ( a , b , c , d ) fun2 ( 1 , 2 , c = 3 , d = 4 ) # def \u51fd\u6570\u540d(*args, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2): # \u8bed\u53e5\u5757 def fun3 ( a , b , * args , c = 7 , d = 8 ): print ( args , a , b , c , d ) fun3 ( 1 , 3 , 4 , 5 , 6 )","title":"\u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_14","text":"\u8bed\u6cd5 def \u51fd\u6570\u540d(**\u5b57\u5178\u5f62\u53c2\u540d): \u8bed\u53e5\u5757 \u4f5c\u7528 \u6536\u96c6\u591a\u4f59\u7684\u5173\u952e\u5b57\u5f62\u53c2 \u8bf4\u660e \u5b57\u5178\u5f62\u53c2\u540d\u4e00\u822c\u547d\u540d\u4e3a kwargs # \u6b64\u793a\u4f8b\u793a\u610f\u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2 def fun ( ** kwargs ): print ( '\u5173\u952e\u5b57\u5f62\u53c2\u7684\u4e2a\u6570\u4e3a\uff1a' , len ( kwargs )) print ( 'kwargs' , kwargs ) fun ( name = 'yangwenjun' , age = 35 , address = '\u6e29\u99a8\u5bb6\u56ed' ) fun ( a = 1 , b = \"BBBB\" , c = [ 1 , 2 , 3 ], d = True ) fun ()","title":"\u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2"},{"location":"python/python%E5%87%BD%E6%95%B0/#_15","text":"\u4f4d\u7f6e\u5f62\u53c2\uff0c\u7f3a\u7701\u53c2\u6570\uff0c\u661f\u53f7\u5143\u7ec4\u5f62\u53c2\uff0c\u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2\uff0c\u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2\u53ef\u4ee5\u6df7\u5408\u4f7f\u7528 \u51fd\u6570\u53c2\u6570\u81ea\u5de6\u81f3\u53f3\u7684\u987a\u5e8f\u4e3a\uff1a 1. \u4f4d\u7f6e\u5f62\u53c2 2. \u661f\u53f7\u5143\u7ec4\u5f62\u53c2 3. \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2 4. \u53cc\u661f\u53f7\u5b57\u5178\u5f62\u53c2 \u793a\u4f8b def fn(a, b, *args, c, **kwargs): pass fn(100, 200, 300, 400, d='D', e='E', c='C')","title":"\u51fd\u6570\u7684\u53c2\u6570\u8bf4\u660e"},{"location":"python/python%E5%87%BD%E6%95%B0/#_16","text":"\u67e5\u770b>>>help(print) \u731c\u60f3print\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u662f\u5982\u4f55\u5b9a\u4e49\u7684 print(*args, sep=' ',end='\\n')","title":"\u601d\u8003\u9898"},{"location":"python/python%E5%88%97%E8%A1%A8/","text":"\u95ee\u9898 \u00b6 \u5982\u4f55\u5c06\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u6570\u636e\u4e34\u65f6\u4fdd\u5b58\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u540c\u65f6\u53c8\u65b9\u4fbf\u6dfb\u52a0\uff0c\u5220\u9664\uff0c\u4fee\u6539\u7b49\u64cd\u4f5c \u5217\u8868\u7684\u5b9a\u4e49 \u00b6 \u5217\u8868\u662f\u4e00\u79cd\u5bb9\u5668 \u5217\u8868\u662f\u53ef\u4ee5\u6539\u53d8\u7684\u5e8f\u5217 \u5217\u8868\u662f\u7531\u4e00\u7cfb\u5217\u7279\u5b9a\u5143\u7d20\u7ec4\u6210\u7684\uff0c\u5143\u7d20\u4e0e\u5143\u7d20\u4e4b\u95f4\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u7684\u5173\u8054\u5173\u7cfb\uff0c\u4f46\u4ed6\u4eec\u4e4b\u95f4\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb \u521b\u5efa\u7a7a\u5217\u8868\u7684\u5b57\u9762\u503c\u8868\u8fbe\u5f0f \u00b6 [] # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868 l = [] # \u53d8\u91cfl \u7ed1\u5b9a\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u7a7a\u5217\u8868 \u521b\u5efa\u975e\u7a7a\u7684\u5217\u8868\u7684\u5b57\u9762\u503c \u00b6 l = [ 1 , 2 , 3 , 4 ] # \u53d8\u91cfl \u7ed1\u5b9a\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u4e14\u542b\u6709\u56db\u4e2a\u5143\u7d20\u7684\u5217\u8868 l = [ 'BeiJing' , 'ShangHai' , 'ShenZhen' ] l = [ 1 , 'Two' , 3.14 , '\u56db' ] l = [ 1 , 2 , [ 3.1 , 3.2 , 3.3 ], 4 ] \u5217\u8868\u7684\u6784\u9020\u51fd\u6570list \u00b6 list() \u751f\u6210\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u7b49\u540c\u4e8e[] list(iterable) \u7528\u6709\u3001\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u5217\u8868 l = list() # l = [] l = list('hello') # l = ['h', 'e', 'l', 'l', 'o'] l = list(range(5)) # l = [0, 1, 2, 3, 4] \u5217\u8868\u7684\u8fd0\u7b97 \u00b6 \u7b97\u672f\u8fd0\u7b97\uff1a + += * *=\uff08\u8fd0\u7b97\u89c4\u5219\u548c\u5b57\u7b26\u4e32\u7684\u8fd0\u7b97\u89c4\u5219\uff09 + \u7528\u4e8e\u62fc\u63a5\u5217\u8868\uff0c\u751f\u6210\u65b0\u7684\u5217\u8868 x = [1, 2, 3] y = [4, 5, 6] z = x + y += \u7528\u4e8e\u539f\u5217\u8868\u4e0e\u53f3\u4fa7\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8ffd\u52a0\u6765\u4fee\u6539\u539f\u5217\u8868 \u8bed\u6cd5\uff1a \u5217\u8868 += \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u793a\u4f8b x = [1, 2, 3] y = [4, 5, 6] x += y # x = [1, 2, 3, 4, 5, 6] x += 'ABC' # x = [1, 2, 3, 4, 5, 6, 'A', 'B', 'C'] += \u662f\u6539\u53d8\u539f\u6765\u7684\u5217\u8868\u5bf9\u8c61\uff0c\u5e76\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5217\u8868 x = [1, 2, 3] print(id(x)) x += [4 ,5, 6] print(id(x)) * \u751f\u6210\u91cd\u590d\u7684\u5217\u8868 x = [1, 2] * 3 # x = [1, 2, 1, 2, 1 ,2] *= \u751f\u6210\u91cd\u590d\u7684\u5217\u8868\uff0c \u5e76\u6539\u53d8\u5bf9\u5217\u8868\u7684\u7ed1\u5b9a x = [1, 2, 3] x *= 2 # x = [1, 2, 3, 1, 2, 3] \u5217\u8868\u7684\u6bd4\u8f83\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 < <= > >= != == \u6bd4\u8f83\u89c4\u5219\uff0c\u4e0e\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u89c4\u5219\u76f8\u540c \u793a\u4f8b [1, 2, 3] < [1, 2, 4] # True [1, 2, 3] < [3, 2, 1] # True \u5217\u8868\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u00b6 l = [ 1 , 3 , 5 , 7 ] for i in l : print ( i ) \u5217\u8868\u7684 in / not in \u8fd0\u7b97\u7b26 \u00b6 \u5224\u65ad\u4e00\u4e2a\u503c\u662f\u5426\u5b58\u5728\u4e8e\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56de False \u540c\u5b57\u7b26\u4e32\u7684 in \u8fd0\u7b97\u7b26 \u7528\u4e8e\u68c0\u67e5\u4e00\u4e2a\u503c\u662f\u5426\u5b58\u5728\u4e8e\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56deTrue, \u5426\u5219\u8fd4\u56deFalse x = [ 1 , 'Two' , 3 , '\u56db' ] 3 in x # \u8fd4\u56de True '3' in x # \u8fd4\u56de False 10 in x # False 10 not in x # True \u5217\u8868\u7684\u7d22\u5f15\u64cd\u4f5c \u00b6 \u8bed\u6cd5 : \u5217\u8868 [ \u6574\u6570\u8868\u8fbe\u5f0f ] \u7528\u6cd5 : \u4e0e\u5b57\u7b26\u4e32\u7d22\u5f15\u7684\u7528\u6cd5\u76f8\u540c ( \u5206\u4e3a\u6b63\u5411\u7d22\u5f15\u548c\u53cd\u5411\u7d22\u5f15 ) \u3000\u3000 \u793a\u4f8b : x = [ 1 , 3 , 5 , 7 ] print ( x [ 1 ]) # 3\u3000\u3000 print ( x [ - 1 ]) # 7 \u5217\u8868\u7684\u7d22\u5f15\u8d4b\u503c \u00b6 \u5217\u8868\u662f\u53ef\u53d8\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u8d4b\u503c\u6539\u53d8\u5217\u8868\u4e2d\u7684\u5143\u7d20 \u8bed\u6cd5: \u5217\u8868[\u6574\u6570\u8868\u8fbe\u5f0f] = \u8868\u8fbe\u5f0f \u4f5c\u7528: \u6539\u53d8\u5217\u8868\u4e2d\u7d22\u5f15\u7684\u7ed1\u5b9a\u5173\u7cfb \u793a\u4f8b: x = [1, 2, 3, 4] x[2] = 3.14 # \u6539\u53d8\u4e86\u7b2c\u4e09\u4e2a\u5143\u7d20\u7684\u503c \u5217\u8868\u7684\u5207\u7247 \u00b6 \u5217\u8868[:] \u5217\u8868[::] \u5217\u8868\u7684\u5207\u7247\u53d6\u503c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5217\u8868\uff0c\u89c4\u5219\u7b49\u540c\u4e8e\u5b57\u7b26\u4e32\u5207\u7247\u89c4\u5219 \u793a\u4f8b: x = [1, 2, 3, 4, 5, 6, 7, 8] x[::2] # [1, 3, 5, 7] y = [1::3] # y = [2, 5, 8] \u5217\u8868\u7684\u5207\u7247\u8d4b\u503c \u00b6 \u4f5c\u7528: \u53ef\u4ee5\u6539\u53d8\u539f\u5217\u8868\u7684\u6570\u636e\u6392\u5217\uff0c\u53ef\u4ee5\u63d2\u5165\u548c\u4fee\u6539\u6570\u636e \u53ef\u4ee5\u7528\u5207\u7247\u6539\u53d8\u5217\u8868\u7684\u5bf9\u5e94\u5143\u7d20\u7684\u503c \u8bed\u6cd5: \u5217\u8868[\u5207\u7247]\u3000= \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u3000\u3000\u8bf4\u660e: \u5207\u7247\u8d4b\u503c\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26(=) \u7684\u53f3\u4fa7\u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u793a\u4f8b: L = [2, 3, 4] L[0:1] = [1.1, 2.2] # L = [1.1, 2.2, 3, 4] L[2:] = [3.3, 4.4, 5.5] # L = [1.1, 2.2, 3.3, 4.4, 5.5] L[:] = [3, 4] \u3000# L = [3, 4] L[0:0] = [1, 2] # L = [1, 2, 3, 4] L = [3, 4] L[1:1] = [3.14] # L = [3, 3.14, 4] L = [3, 4] L[-1:-1] = [5, 6] # L = [3, 4, 5, 6] L = [2, 3, 4] L[1:2] = \"ABC\" # L = [2, 'A', 'B', 'C', 4] L = [2, -1, 7] L[1:2] = range(3, 7) # L=[2, 3, 4, 5, 6, 7] \u5207\u7247\u7684\u6ce8\u610f\u4e8b\u9879 \u00b6 \u5bf9\u4e8e\u6b65\u957f\u4e0d\u7b49\u4e8e1\u7684\u5207\u7247\u8d4b\u503c,\u8d4b\u503c\u8fd0\u7b97\u7b26\u7684\u53f3\u4fa7\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u63d0\u4f9b\u5143\u7d20\u7684\u4e2a\u6570\u4e00\u5b9a\u8981\u7b49\u4e8e\u5207\u7247\u5207\u51fa\u7684\u6bb5\u6570 \u793a\u4f8b: L = [1, 2, 3, 4, 5, 6, 7, 8] L[1::2] = \"ABCD\" # \u5bf9\u7684 L[1::2] = \"ABCDEF\" # \u9519\u7684 \u7ec3\u4e60 \u5df2\u77e5\u6709\u5217\u8868: L = [3, 5] \u7528\u7d22\u5f15\u548c\u5207\u7247\u64cd\u4f5c,\u5c06\u539f\u5217\u8868\u6539\u53d8\u4e3a: L = [1, 2, 3, 4, 5, 6] \u5c06\u5217\u8868\u53cd\u8f6c,\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u6253\u5370\u6b64\u5217\u8868 .... print(L) # [6, 5, 4, 3, 2] \u5199\u7a0b\u5e8f,\u8ba9\u7528\u6237\u5faa\u73af\u8f93\u5165\u4e00\u4e9b\u6574\u6570,\u5f53\u8f93\u5165-1\u65f6\u7ed3\u675f\u8f93\u5165,\u5c06\u8fd9\u4e9b\u6574\u6570\u5b58\u4e8e\u5217\u8868L\u4e2d 1) \u6253\u5370\u60a8\u5171\u8f93\u5165\u4e86\u591a\u5c11\u4e2a\u6709\u6548\u7684\u6570 2) \u6253\u5370\u60a8\u8f93\u5165\u7684\u6570\u7684\u6700\u5927\u6570\u662f? 3) \u6253\u5370\u60a8\u8f93\u5165\u7684\u6700\u5c0f\u6570\u662f\u591a\u5c11? 4) \u6253\u5370\u60a8\u8f93\u5165\u7684\u8fd9\u4e9b\u6570\u7684\u5e73\u5747\u503c\u662f\u591a\u5c11? \u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8ba9\u7528\u6237\u8f93\u5165\u5f88\u591a\u4e2a\u6b63\u6574\u6570\uff0c\u5f53\u8f93\u5165\u5c0f\u4e8e\u96f6\u7684\u6570\u65f6\u7ed3\u675f\u8f93\u5165 \u3000\u30001) \u6253\u5370\u8fd9\u4e9b\u6570\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u6570 \u3000\u30002) \u6253\u5370\u8fd9\u4e9b\u6570\u4e2d\u7b2c\u4e8c\u5927\u7684\u4e00\u4e2a\u6570 3) \u5220\u9664\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 4) \u6309\u539f\u6765\u987a\u5e8f\u6253\u5370\u51fa\u5269\u4f59\u7684\u8fd9\u4e9b\u6570 \u5217\u8868\u63a8\u5bfc\u5f0f \u00b6 list comprehension: \u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u5217\u8868\u7684\u8868\u8fbe\u5f0f \u4f5c\u7528: \u7528\u7b80\u6613\u65b9\u6cd5\u751f\u6210\u5217\u8868 \u8bed\u6cd5: [\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61] \u6216 [\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61 if \u771f\u503c\u8868\u8fbe\u5f0f] \u793a\u4f8b: # \u751f\u6210\u4e00\u4e2a\u6570\u503c\u4e3a1~9\u7684\u5e73\u65b9\u7684\u5217\u8868 # [1, 4, 9, 16, .... 81] # \u4e0d\u7528\u63a8\u5bfc\u5f0f: L = [] for i in range(1, 10): L.append(i**2) # \u63a8\u5bfc\u5f0f\u5b9e\u73b0 L = [i ** 2 for i in range(1, 10)] \u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u751f\u6210 1~100\u4ee5\u5185\u5947\u6570\u7684\u5217\u8868, \u7ed3\u679c\u662f:[1, 3, 5, 7, ...., 99] \u7b54\u6848: [i for i in range(1, 100, 2)] \u6216 [i for i in range(1, 100) if i % 2 == 1] \u7ec3\u4e60 \u8f93\u5165\u4e00\u4e2a\u5f00\u59cb\u7684\u6574\u6570\u7528begin\u7ed1\u5b9a \u8f93\u5165\u4e00\u4e2a\u7ed3\u675f\u7684\u6574\u6570\u7528end\u7ed1\u5b9a \u5c06\u4ecebegin\u5f00\u59cb,\u5230end\u7ed3\u675f(\u4e0d\u5305\u542bend)\u7684\u6240\u6709\u5076\u6570\u5b58\u4e8e\u5217\u8868\u4e2d \u5e76\u6253\u5370\u6b64\u5217\u8868 (\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u5b8c\u6210,\u4e5f\u53ef\u4ee5\u7528\u5faa\u73af\u8bed\u53e5\u6765\u5b8c\u6210 \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5d4c\u5957 \u00b6 \u8bed\u6cd5: [\u8868\u8fbe\u5f0f for \u53d8\u91cf1 in \u53ef\u8fed\u4ee3\u5bf9\u8c611 if\u771f\u503c\u8868\u8fbe\u5f0f1 for \u53d8\u91cf2 in \u53ef\u8fed\u4ee3\u5bf9\u8c612 if \u771f\u503c\u8868\u8fbe\u5f0f2 ...] \u793a\u4f8b: #\u5c06\u5217\u8868[10, 20, 30] \u4e2d\u7684\u5143\u7d20\u4e0e\u5217\u8868[1,2,3]\u5143\u7d20\u5206\u522b\u76f8\u52a0,\u5c06\u5f97\u5230\u7684\u5143\u7d20\u653e\u4e8e\u4e00\u4e2a\u5217\u8868\u4e2d L = [x + y for x in [10, 20, 30] for y in [1,2,3]] print(L) #[11, 12, 13, 21, 22, 23, 31,32,33] \u7ec3\u4e60 1. \u7528\u5b57\u7b26\u4e32\"ABC\"\u548c\u5b57\u7b26\u4e32\"123\" \u751f\u6210\u5982\u4e0b\u5217\u8868 ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3', ] \u7b54\u6848: [ x + y for x in \"ABC\" for y in \"123\"] 2. \u5df2\u77e5\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32: s = '100,200,300,500,800' \u5c06\u5176\u8f6c\u5316\u4e3a\u5217\u8868,\u5217\u8868\u7684\u5185\u90e8\u662f\u6574\u6570 L = [100, 200, 300, 500, 800] \u7b54\u6848: L = [int(x) for x in s.split(',')] 1. \u6709\u4e00\u4e9b\u6570\u5b58\u5728\u5217\u8868\u4e2d, \u5982: L = [1, 3, 2, 1, 6, 4, 2, ...., 98, 82] 1) \u5c06\u5217\u8868L\u4e2d\u51fa\u73b0\u7684\u6570\u5b57\u5b58\u4e8e\u53e6\u4e00\u4e2a\u5217\u8868L2\u4e2d \u8981\u6c42: \u91cd\u590d\u51fa\u73b0\u591a\u6b21\u7684\u6570\u5b57\u53ea\u5728L2\u5217\u8868\u4e2d\u4fdd\u7559\u4e00\u4efd(\u53bb\u91cd) 2) \u5c06\u5217\u8868\u4e2d\u51fa\u73b0\u4e24\u6b21\u7684\u6570\u5b57\u5b58\u4e8eL3\u5217\u8868\u4e2d(\u5728L3\u5217\u8868\u4e2d\u4fdd\u7559\u4e00\u4efd) 2. \u8ba1\u7b97\u51fa100\u4ee5\u5185\u7684\u7d20\u6570,\u5c06\u8fd9\u4e9b\u7d20\u6570\u5b58\u4e8e\u5217\u8868\u4e2d,\u6700\u540e\u6253\u5370\u51fa\u5217\u8868\u4e2d\u7684\u8fd9\u4e9b\u7d20\u6570 3. \u751f\u6210\u524d40\u4e2a\u6590\u6ce2\u90a3\u5951\u6570(Fibonacci) 1 1 2 3 5 8 13 21 ...... \u8981\u6c42\u5c06\u8fd9\u6570\u6574\u6570\u5b58\u4e8e\u5217\u8868L\u4e2d,\u6700\u540e\u6253\u5370\u51fa\u8fd9\u4e9b\u6570 (\u6590\u6ce2\u90a3\u5951\u7684\u524d\u4e24\u4e2a\u662f1, 1, \u4e4b\u540e\u7684\u6570\u662f\u524d\u4e24\u4e2a\u6570\u7684\u548c)","title":"5. \u5217\u8868"},{"location":"python/python%E5%88%97%E8%A1%A8/#_1","text":"\u5982\u4f55\u5c06\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u6570\u636e\u4e34\u65f6\u4fdd\u5b58\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u540c\u65f6\u53c8\u65b9\u4fbf\u6dfb\u52a0\uff0c\u5220\u9664\uff0c\u4fee\u6539\u7b49\u64cd\u4f5c","title":"\u95ee\u9898"},{"location":"python/python%E5%88%97%E8%A1%A8/#_2","text":"\u5217\u8868\u662f\u4e00\u79cd\u5bb9\u5668 \u5217\u8868\u662f\u53ef\u4ee5\u6539\u53d8\u7684\u5e8f\u5217 \u5217\u8868\u662f\u7531\u4e00\u7cfb\u5217\u7279\u5b9a\u5143\u7d20\u7ec4\u6210\u7684\uff0c\u5143\u7d20\u4e0e\u5143\u7d20\u4e4b\u95f4\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u7684\u5173\u8054\u5173\u7cfb\uff0c\u4f46\u4ed6\u4eec\u4e4b\u95f4\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb","title":"\u5217\u8868\u7684\u5b9a\u4e49"},{"location":"python/python%E5%88%97%E8%A1%A8/#_3","text":"[] # \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868 l = [] # \u53d8\u91cfl \u7ed1\u5b9a\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u7a7a\u5217\u8868","title":"\u521b\u5efa\u7a7a\u5217\u8868\u7684\u5b57\u9762\u503c\u8868\u8fbe\u5f0f"},{"location":"python/python%E5%88%97%E8%A1%A8/#_4","text":"l = [ 1 , 2 , 3 , 4 ] # \u53d8\u91cfl \u7ed1\u5b9a\u4e00\u4e2a\u65b0\u521b\u5efa\u7684\u4e14\u542b\u6709\u56db\u4e2a\u5143\u7d20\u7684\u5217\u8868 l = [ 'BeiJing' , 'ShangHai' , 'ShenZhen' ] l = [ 1 , 'Two' , 3.14 , '\u56db' ] l = [ 1 , 2 , [ 3.1 , 3.2 , 3.3 ], 4 ]","title":"\u521b\u5efa\u975e\u7a7a\u7684\u5217\u8868\u7684\u5b57\u9762\u503c"},{"location":"python/python%E5%88%97%E8%A1%A8/#list","text":"list() \u751f\u6210\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u7b49\u540c\u4e8e[] list(iterable) \u7528\u6709\u3001\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u5217\u8868 l = list() # l = [] l = list('hello') # l = ['h', 'e', 'l', 'l', 'o'] l = list(range(5)) # l = [0, 1, 2, 3, 4]","title":"\u5217\u8868\u7684\u6784\u9020\u51fd\u6570list"},{"location":"python/python%E5%88%97%E8%A1%A8/#_5","text":"\u7b97\u672f\u8fd0\u7b97\uff1a + += * *=\uff08\u8fd0\u7b97\u89c4\u5219\u548c\u5b57\u7b26\u4e32\u7684\u8fd0\u7b97\u89c4\u5219\uff09 + \u7528\u4e8e\u62fc\u63a5\u5217\u8868\uff0c\u751f\u6210\u65b0\u7684\u5217\u8868 x = [1, 2, 3] y = [4, 5, 6] z = x + y += \u7528\u4e8e\u539f\u5217\u8868\u4e0e\u53f3\u4fa7\u53ef\u8fed\u4ee3\u5bf9\u8c61\u8ffd\u52a0\u6765\u4fee\u6539\u539f\u5217\u8868 \u8bed\u6cd5\uff1a \u5217\u8868 += \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u793a\u4f8b x = [1, 2, 3] y = [4, 5, 6] x += y # x = [1, 2, 3, 4, 5, 6] x += 'ABC' # x = [1, 2, 3, 4, 5, 6, 'A', 'B', 'C'] += \u662f\u6539\u53d8\u539f\u6765\u7684\u5217\u8868\u5bf9\u8c61\uff0c\u5e76\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u5217\u8868 x = [1, 2, 3] print(id(x)) x += [4 ,5, 6] print(id(x)) * \u751f\u6210\u91cd\u590d\u7684\u5217\u8868 x = [1, 2] * 3 # x = [1, 2, 1, 2, 1 ,2] *= \u751f\u6210\u91cd\u590d\u7684\u5217\u8868\uff0c \u5e76\u6539\u53d8\u5bf9\u5217\u8868\u7684\u7ed1\u5b9a x = [1, 2, 3] x *= 2 # x = [1, 2, 3, 1, 2, 3]","title":"\u5217\u8868\u7684\u8fd0\u7b97"},{"location":"python/python%E5%88%97%E8%A1%A8/#_6","text":"\u8fd0\u7b97\u7b26 < <= > >= != == \u6bd4\u8f83\u89c4\u5219\uff0c\u4e0e\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u89c4\u5219\u76f8\u540c \u793a\u4f8b [1, 2, 3] < [1, 2, 4] # True [1, 2, 3] < [3, 2, 1] # True","title":"\u5217\u8868\u7684\u6bd4\u8f83\u8fd0\u7b97"},{"location":"python/python%E5%88%97%E8%A1%A8/#_7","text":"l = [ 1 , 3 , 5 , 7 ] for i in l : print ( i )","title":"\u5217\u8868\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"python/python%E5%88%97%E8%A1%A8/#in-not-in","text":"\u5224\u65ad\u4e00\u4e2a\u503c\u662f\u5426\u5b58\u5728\u4e8e\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56de False \u540c\u5b57\u7b26\u4e32\u7684 in \u8fd0\u7b97\u7b26 \u7528\u4e8e\u68c0\u67e5\u4e00\u4e2a\u503c\u662f\u5426\u5b58\u5728\u4e8e\u5217\u8868\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u8fd4\u56deTrue, \u5426\u5219\u8fd4\u56deFalse x = [ 1 , 'Two' , 3 , '\u56db' ] 3 in x # \u8fd4\u56de True '3' in x # \u8fd4\u56de False 10 in x # False 10 not in x # True","title":"\u5217\u8868\u7684 in / not in \u8fd0\u7b97\u7b26"},{"location":"python/python%E5%88%97%E8%A1%A8/#_8","text":"\u8bed\u6cd5 : \u5217\u8868 [ \u6574\u6570\u8868\u8fbe\u5f0f ] \u7528\u6cd5 : \u4e0e\u5b57\u7b26\u4e32\u7d22\u5f15\u7684\u7528\u6cd5\u76f8\u540c ( \u5206\u4e3a\u6b63\u5411\u7d22\u5f15\u548c\u53cd\u5411\u7d22\u5f15 ) \u3000\u3000 \u793a\u4f8b : x = [ 1 , 3 , 5 , 7 ] print ( x [ 1 ]) # 3\u3000\u3000 print ( x [ - 1 ]) # 7","title":"\u5217\u8868\u7684\u7d22\u5f15\u64cd\u4f5c"},{"location":"python/python%E5%88%97%E8%A1%A8/#_9","text":"\u5217\u8868\u662f\u53ef\u53d8\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u8d4b\u503c\u6539\u53d8\u5217\u8868\u4e2d\u7684\u5143\u7d20 \u8bed\u6cd5: \u5217\u8868[\u6574\u6570\u8868\u8fbe\u5f0f] = \u8868\u8fbe\u5f0f \u4f5c\u7528: \u6539\u53d8\u5217\u8868\u4e2d\u7d22\u5f15\u7684\u7ed1\u5b9a\u5173\u7cfb \u793a\u4f8b: x = [1, 2, 3, 4] x[2] = 3.14 # \u6539\u53d8\u4e86\u7b2c\u4e09\u4e2a\u5143\u7d20\u7684\u503c","title":"\u5217\u8868\u7684\u7d22\u5f15\u8d4b\u503c"},{"location":"python/python%E5%88%97%E8%A1%A8/#_10","text":"\u5217\u8868[:] \u5217\u8868[::] \u5217\u8868\u7684\u5207\u7247\u53d6\u503c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5217\u8868\uff0c\u89c4\u5219\u7b49\u540c\u4e8e\u5b57\u7b26\u4e32\u5207\u7247\u89c4\u5219 \u793a\u4f8b: x = [1, 2, 3, 4, 5, 6, 7, 8] x[::2] # [1, 3, 5, 7] y = [1::3] # y = [2, 5, 8]","title":"\u5217\u8868\u7684\u5207\u7247"},{"location":"python/python%E5%88%97%E8%A1%A8/#_11","text":"\u4f5c\u7528: \u53ef\u4ee5\u6539\u53d8\u539f\u5217\u8868\u7684\u6570\u636e\u6392\u5217\uff0c\u53ef\u4ee5\u63d2\u5165\u548c\u4fee\u6539\u6570\u636e \u53ef\u4ee5\u7528\u5207\u7247\u6539\u53d8\u5217\u8868\u7684\u5bf9\u5e94\u5143\u7d20\u7684\u503c \u8bed\u6cd5: \u5217\u8868[\u5207\u7247]\u3000= \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u3000\u3000\u8bf4\u660e: \u5207\u7247\u8d4b\u503c\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26(=) \u7684\u53f3\u4fa7\u5fc5\u987b\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u793a\u4f8b: L = [2, 3, 4] L[0:1] = [1.1, 2.2] # L = [1.1, 2.2, 3, 4] L[2:] = [3.3, 4.4, 5.5] # L = [1.1, 2.2, 3.3, 4.4, 5.5] L[:] = [3, 4] \u3000# L = [3, 4] L[0:0] = [1, 2] # L = [1, 2, 3, 4] L = [3, 4] L[1:1] = [3.14] # L = [3, 3.14, 4] L = [3, 4] L[-1:-1] = [5, 6] # L = [3, 4, 5, 6] L = [2, 3, 4] L[1:2] = \"ABC\" # L = [2, 'A', 'B', 'C', 4] L = [2, -1, 7] L[1:2] = range(3, 7) # L=[2, 3, 4, 5, 6, 7]","title":"\u5217\u8868\u7684\u5207\u7247\u8d4b\u503c"},{"location":"python/python%E5%88%97%E8%A1%A8/#_12","text":"\u5bf9\u4e8e\u6b65\u957f\u4e0d\u7b49\u4e8e1\u7684\u5207\u7247\u8d4b\u503c,\u8d4b\u503c\u8fd0\u7b97\u7b26\u7684\u53f3\u4fa7\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u63d0\u4f9b\u5143\u7d20\u7684\u4e2a\u6570\u4e00\u5b9a\u8981\u7b49\u4e8e\u5207\u7247\u5207\u51fa\u7684\u6bb5\u6570 \u793a\u4f8b: L = [1, 2, 3, 4, 5, 6, 7, 8] L[1::2] = \"ABCD\" # \u5bf9\u7684 L[1::2] = \"ABCDEF\" # \u9519\u7684 \u7ec3\u4e60 \u5df2\u77e5\u6709\u5217\u8868: L = [3, 5] \u7528\u7d22\u5f15\u548c\u5207\u7247\u64cd\u4f5c,\u5c06\u539f\u5217\u8868\u6539\u53d8\u4e3a: L = [1, 2, 3, 4, 5, 6] \u5c06\u5217\u8868\u53cd\u8f6c,\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u6253\u5370\u6b64\u5217\u8868 .... print(L) # [6, 5, 4, 3, 2] \u5199\u7a0b\u5e8f,\u8ba9\u7528\u6237\u5faa\u73af\u8f93\u5165\u4e00\u4e9b\u6574\u6570,\u5f53\u8f93\u5165-1\u65f6\u7ed3\u675f\u8f93\u5165,\u5c06\u8fd9\u4e9b\u6574\u6570\u5b58\u4e8e\u5217\u8868L\u4e2d 1) \u6253\u5370\u60a8\u5171\u8f93\u5165\u4e86\u591a\u5c11\u4e2a\u6709\u6548\u7684\u6570 2) \u6253\u5370\u60a8\u8f93\u5165\u7684\u6570\u7684\u6700\u5927\u6570\u662f? 3) \u6253\u5370\u60a8\u8f93\u5165\u7684\u6700\u5c0f\u6570\u662f\u591a\u5c11? 4) \u6253\u5370\u60a8\u8f93\u5165\u7684\u8fd9\u4e9b\u6570\u7684\u5e73\u5747\u503c\u662f\u591a\u5c11? \u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8ba9\u7528\u6237\u8f93\u5165\u5f88\u591a\u4e2a\u6b63\u6574\u6570\uff0c\u5f53\u8f93\u5165\u5c0f\u4e8e\u96f6\u7684\u6570\u65f6\u7ed3\u675f\u8f93\u5165 \u3000\u30001) \u6253\u5370\u8fd9\u4e9b\u6570\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u6570 \u3000\u30002) \u6253\u5370\u8fd9\u4e9b\u6570\u4e2d\u7b2c\u4e8c\u5927\u7684\u4e00\u4e2a\u6570 3) \u5220\u9664\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 4) \u6309\u539f\u6765\u987a\u5e8f\u6253\u5370\u51fa\u5269\u4f59\u7684\u8fd9\u4e9b\u6570","title":"\u5207\u7247\u7684\u6ce8\u610f\u4e8b\u9879"},{"location":"python/python%E5%88%97%E8%A1%A8/#_13","text":"list comprehension: \u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u5217\u8868\u7684\u8868\u8fbe\u5f0f \u4f5c\u7528: \u7528\u7b80\u6613\u65b9\u6cd5\u751f\u6210\u5217\u8868 \u8bed\u6cd5: [\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61] \u6216 [\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61 if \u771f\u503c\u8868\u8fbe\u5f0f] \u793a\u4f8b: # \u751f\u6210\u4e00\u4e2a\u6570\u503c\u4e3a1~9\u7684\u5e73\u65b9\u7684\u5217\u8868 # [1, 4, 9, 16, .... 81] # \u4e0d\u7528\u63a8\u5bfc\u5f0f: L = [] for i in range(1, 10): L.append(i**2) # \u63a8\u5bfc\u5f0f\u5b9e\u73b0 L = [i ** 2 for i in range(1, 10)] \u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u751f\u6210 1~100\u4ee5\u5185\u5947\u6570\u7684\u5217\u8868, \u7ed3\u679c\u662f:[1, 3, 5, 7, ...., 99] \u7b54\u6848: [i for i in range(1, 100, 2)] \u6216 [i for i in range(1, 100) if i % 2 == 1] \u7ec3\u4e60 \u8f93\u5165\u4e00\u4e2a\u5f00\u59cb\u7684\u6574\u6570\u7528begin\u7ed1\u5b9a \u8f93\u5165\u4e00\u4e2a\u7ed3\u675f\u7684\u6574\u6570\u7528end\u7ed1\u5b9a \u5c06\u4ecebegin\u5f00\u59cb,\u5230end\u7ed3\u675f(\u4e0d\u5305\u542bend)\u7684\u6240\u6709\u5076\u6570\u5b58\u4e8e\u5217\u8868\u4e2d \u5e76\u6253\u5370\u6b64\u5217\u8868 (\u53ef\u4ee5\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u5b8c\u6210,\u4e5f\u53ef\u4ee5\u7528\u5faa\u73af\u8bed\u53e5\u6765\u5b8c\u6210","title":"\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"python/python%E5%88%97%E8%A1%A8/#_14","text":"\u8bed\u6cd5: [\u8868\u8fbe\u5f0f for \u53d8\u91cf1 in \u53ef\u8fed\u4ee3\u5bf9\u8c611 if\u771f\u503c\u8868\u8fbe\u5f0f1 for \u53d8\u91cf2 in \u53ef\u8fed\u4ee3\u5bf9\u8c612 if \u771f\u503c\u8868\u8fbe\u5f0f2 ...] \u793a\u4f8b: #\u5c06\u5217\u8868[10, 20, 30] \u4e2d\u7684\u5143\u7d20\u4e0e\u5217\u8868[1,2,3]\u5143\u7d20\u5206\u522b\u76f8\u52a0,\u5c06\u5f97\u5230\u7684\u5143\u7d20\u653e\u4e8e\u4e00\u4e2a\u5217\u8868\u4e2d L = [x + y for x in [10, 20, 30] for y in [1,2,3]] print(L) #[11, 12, 13, 21, 22, 23, 31,32,33] \u7ec3\u4e60 1. \u7528\u5b57\u7b26\u4e32\"ABC\"\u548c\u5b57\u7b26\u4e32\"123\" \u751f\u6210\u5982\u4e0b\u5217\u8868 ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3', ] \u7b54\u6848: [ x + y for x in \"ABC\" for y in \"123\"] 2. \u5df2\u77e5\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32: s = '100,200,300,500,800' \u5c06\u5176\u8f6c\u5316\u4e3a\u5217\u8868,\u5217\u8868\u7684\u5185\u90e8\u662f\u6574\u6570 L = [100, 200, 300, 500, 800] \u7b54\u6848: L = [int(x) for x in s.split(',')] 1. \u6709\u4e00\u4e9b\u6570\u5b58\u5728\u5217\u8868\u4e2d, \u5982: L = [1, 3, 2, 1, 6, 4, 2, ...., 98, 82] 1) \u5c06\u5217\u8868L\u4e2d\u51fa\u73b0\u7684\u6570\u5b57\u5b58\u4e8e\u53e6\u4e00\u4e2a\u5217\u8868L2\u4e2d \u8981\u6c42: \u91cd\u590d\u51fa\u73b0\u591a\u6b21\u7684\u6570\u5b57\u53ea\u5728L2\u5217\u8868\u4e2d\u4fdd\u7559\u4e00\u4efd(\u53bb\u91cd) 2) \u5c06\u5217\u8868\u4e2d\u51fa\u73b0\u4e24\u6b21\u7684\u6570\u5b57\u5b58\u4e8eL3\u5217\u8868\u4e2d(\u5728L3\u5217\u8868\u4e2d\u4fdd\u7559\u4e00\u4efd) 2. \u8ba1\u7b97\u51fa100\u4ee5\u5185\u7684\u7d20\u6570,\u5c06\u8fd9\u4e9b\u7d20\u6570\u5b58\u4e8e\u5217\u8868\u4e2d,\u6700\u540e\u6253\u5370\u51fa\u5217\u8868\u4e2d\u7684\u8fd9\u4e9b\u7d20\u6570 3. \u751f\u6210\u524d40\u4e2a\u6590\u6ce2\u90a3\u5951\u6570(Fibonacci) 1 1 2 3 5 8 13 21 ...... \u8981\u6c42\u5c06\u8fd9\u6570\u6574\u6570\u5b58\u4e8e\u5217\u8868L\u4e2d,\u6700\u540e\u6253\u5370\u51fa\u8fd9\u4e9b\u6570 (\u6590\u6ce2\u90a3\u5951\u7684\u524d\u4e24\u4e2a\u662f1, 1, \u4e4b\u540e\u7684\u6570\u662f\u524d\u4e24\u4e2a\u6570\u7684\u548c)","title":"\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5d4c\u5957"},{"location":"python/python%E5%8C%85/","text":"\u5305\uff08\u6a21\u5757\u5305\uff09 Package \u00b6 \u5305\u7684\u5b9a\u4e49 \u5305\u662f\u5c06\u6a21\u5757\u4ee5\u6587\u4ef6\u5939\u7684\u7ec4\u7ec7\u5f62\u5f0f\u8fdb\u884c\u5206\u7ec4\u7ba1\u7406\u7684\u65b9\u6cd5 \u4f5c\u7528 \u5c06\u4e00\u7cfb\u5217\u6a21\u5757\u8fdb\u884c\u5206\u7c7b\u7ba1\u7406\uff0c\u6709\u5229\u4e8e\u9632\u6b62\u547d\u540d\u51b2\u7a81 \u53ef\u4ee5\u5728\u9700\u8981\u65f6\u52a0\u8f7d\u4e00\u4e2a\u6216\u90e8\u5206\u6a21\u5757\u800c\u4e0d\u662f\u5168\u90e8\u6a21\u5757 \u5305\u793a\u4f8b __init__.py menu.py games/ __init__.py contra.py supermario.py tanks.py office/ __init__.py word.py excel.py \u5305\u5185\u7684__init__.py \u6587\u4ef6 __init__.py \u662f\u5e38\u89c4\u5305\u5185\u5fc5\u987b\u5b58\u5728\u7684\u6587\u4ef6 __init__.py \u5185\u7684__all__\u5217\u8868 \u4f5c\u7528 \u7528\u6765\u8bb0\u5f55\u6b64\u5305\u4e2d\u6709\u54ea\u4e9b\u5b50\u5305\u6216\u6a21\u5757\u9700\u8981\u5bfc\u5165 \u5f53\u7528from \u5305 import * \u8bed\u53e5\u5bfc\u5165\u6a21\u5757\u65f6\uff0c\u53ea\u67e5\u627e__all__\u5217\u8868\u4e2d\u6240\u6709\u6a21\u5757\u6216\u5b50\u5305 \u8bf4\u660e __all__\u5217\u8868\u53ea\u5728from xxx import * \u5bfc\u5165\u65f6\u8d77\u4f5c\u7528 \u5305\u7684\u5bfc\u5165 \u00b6 \u8bed\u6cd5\u89c4\u5219\u7c7b\u4f3c\u4e8e\u6a21\u5757\u7684\u5bfc\u5165\u89c4\u5219 import \u5305\u540d[as \u5305\u65b0\u540d] import \u5305\u540d.\u6a21\u5757\u540d [as \u6a21\u5757\u65b0\u540d] import \u5305\u540d.\u5b50\u5305\u540d.\u6a21\u5757\u540d [as \u6a21\u5757\u65b0\u540d] ... form \u5305\u540d import \u6a21\u5757\u540d [as \u6a21\u5757\u65b0\u540d] from \u5305\u540d.\u5b50\u5305\u540d import \u6a21\u5757\u540d [as \u6a21\u5757\u65b0\u540d] from \u5305\u540d.\u5b50\u5305\u540d.\u6a21\u5757\u540d import \u5c5e\u6027\u540d [as \u5c5e\u6027\u65b0\u540d] ... from \u5305\u540d import * from \u5305\u540d.\u6a21\u5757\u540d import * ... import \u8bed\u53e5\u641c\u7d22 \u5305\u7684\u8def\u5f84\u548c\u987a\u5e8f \u00b6 \u641c\u7d22\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u8def\u5f84 sys.path\u63d0\u4f9b\u7684\u8def\u5f84 \u5305\u7684\u76f8\u5bf9\u5bfc\u5165 \u00b6 \u5305\u7684\u76f8\u5bf9\u5bfc\u5165\u662f\u6307\u5305\u5185\u6a21\u5757\u7684\u76f8\u4e92\u5bfc\u5165 \u8bed\u6cd5 from \u76f8\u5bf9\u8def\u5f84\u5305\u6216\u6a21\u5757\u540d\uff0cimport \u5c5e\u6027\u6216\u6a21\u5757\u540d \u6216 from \u76f8\u5bf9\u8def\u5f84\u5305\u6216\u6a21\u5757\u540d\uff0cimport * \u76f8\u5bf9\u8def\u5f84 \u5728from \u548c import \u95f4\u53ef\u4ee5\u7528\u76f8\u5bf9\u8def\u5f84 . \u4ee3\u8868\u5f53\u524d\u76ee\u5f55 .. \u4ee3\u8868\u4e0a\u4e00\u7ea7\u76ee\u5f55 ... \u4ee3\u8868\u4e0a\u4e8c\u7ea7\u76ee\u5f55 .... \u4ee5\u6b64\u7c7b\u63a8 \u6ce8\uff1a\u76f8\u5bf9\u5bfc\u5165\u65f6\u4e0d\u80fd\u8d85\u51fa\u5305\u7684\u5916\u90e8","title":"15. \u5305"},{"location":"python/python%E5%8C%85/#package","text":"\u5305\u7684\u5b9a\u4e49 \u5305\u662f\u5c06\u6a21\u5757\u4ee5\u6587\u4ef6\u5939\u7684\u7ec4\u7ec7\u5f62\u5f0f\u8fdb\u884c\u5206\u7ec4\u7ba1\u7406\u7684\u65b9\u6cd5 \u4f5c\u7528 \u5c06\u4e00\u7cfb\u5217\u6a21\u5757\u8fdb\u884c\u5206\u7c7b\u7ba1\u7406\uff0c\u6709\u5229\u4e8e\u9632\u6b62\u547d\u540d\u51b2\u7a81 \u53ef\u4ee5\u5728\u9700\u8981\u65f6\u52a0\u8f7d\u4e00\u4e2a\u6216\u90e8\u5206\u6a21\u5757\u800c\u4e0d\u662f\u5168\u90e8\u6a21\u5757 \u5305\u793a\u4f8b __init__.py menu.py games/ __init__.py contra.py supermario.py tanks.py office/ __init__.py word.py excel.py \u5305\u5185\u7684__init__.py \u6587\u4ef6 __init__.py \u662f\u5e38\u89c4\u5305\u5185\u5fc5\u987b\u5b58\u5728\u7684\u6587\u4ef6 __init__.py \u5185\u7684__all__\u5217\u8868 \u4f5c\u7528 \u7528\u6765\u8bb0\u5f55\u6b64\u5305\u4e2d\u6709\u54ea\u4e9b\u5b50\u5305\u6216\u6a21\u5757\u9700\u8981\u5bfc\u5165 \u5f53\u7528from \u5305 import * \u8bed\u53e5\u5bfc\u5165\u6a21\u5757\u65f6\uff0c\u53ea\u67e5\u627e__all__\u5217\u8868\u4e2d\u6240\u6709\u6a21\u5757\u6216\u5b50\u5305 \u8bf4\u660e __all__\u5217\u8868\u53ea\u5728from xxx import * \u5bfc\u5165\u65f6\u8d77\u4f5c\u7528","title":"\u5305\uff08\u6a21\u5757\u5305\uff09 Package"},{"location":"python/python%E5%8C%85/#_1","text":"\u8bed\u6cd5\u89c4\u5219\u7c7b\u4f3c\u4e8e\u6a21\u5757\u7684\u5bfc\u5165\u89c4\u5219 import \u5305\u540d[as \u5305\u65b0\u540d] import \u5305\u540d.\u6a21\u5757\u540d [as \u6a21\u5757\u65b0\u540d] import \u5305\u540d.\u5b50\u5305\u540d.\u6a21\u5757\u540d [as \u6a21\u5757\u65b0\u540d] ... form \u5305\u540d import \u6a21\u5757\u540d [as \u6a21\u5757\u65b0\u540d] from \u5305\u540d.\u5b50\u5305\u540d import \u6a21\u5757\u540d [as \u6a21\u5757\u65b0\u540d] from \u5305\u540d.\u5b50\u5305\u540d.\u6a21\u5757\u540d import \u5c5e\u6027\u540d [as \u5c5e\u6027\u65b0\u540d] ... from \u5305\u540d import * from \u5305\u540d.\u6a21\u5757\u540d import * ...","title":"\u5305\u7684\u5bfc\u5165"},{"location":"python/python%E5%8C%85/#import","text":"\u641c\u7d22\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u8def\u5f84 sys.path\u63d0\u4f9b\u7684\u8def\u5f84","title":"import \u8bed\u53e5\u641c\u7d22  \u5305\u7684\u8def\u5f84\u548c\u987a\u5e8f"},{"location":"python/python%E5%8C%85/#_2","text":"\u5305\u7684\u76f8\u5bf9\u5bfc\u5165\u662f\u6307\u5305\u5185\u6a21\u5757\u7684\u76f8\u4e92\u5bfc\u5165 \u8bed\u6cd5 from \u76f8\u5bf9\u8def\u5f84\u5305\u6216\u6a21\u5757\u540d\uff0cimport \u5c5e\u6027\u6216\u6a21\u5757\u540d \u6216 from \u76f8\u5bf9\u8def\u5f84\u5305\u6216\u6a21\u5757\u540d\uff0cimport * \u76f8\u5bf9\u8def\u5f84 \u5728from \u548c import \u95f4\u53ef\u4ee5\u7528\u76f8\u5bf9\u8def\u5f84 . \u4ee3\u8868\u5f53\u524d\u76ee\u5f55 .. \u4ee3\u8868\u4e0a\u4e00\u7ea7\u76ee\u5f55 ... \u4ee3\u8868\u4e0a\u4e8c\u7ea7\u76ee\u5f55 .... \u4ee5\u6b64\u7c7b\u63a8 \u6ce8\uff1a\u76f8\u5bf9\u5bfc\u5165\u65f6\u4e0d\u80fd\u8d85\u51fa\u5305\u7684\u5916\u90e8","title":"\u5305\u7684\u76f8\u5bf9\u5bfc\u5165"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","text":"\u590d\u5408\u8d4b\u503c\u7b97\u672f\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u8bf4\u660e y+=x -> y=y+x y-=x -> y=y-x y*=x -> y=y*x y/=x -> y=y/x y//=x -> y=y//x y%=x -> y=y%x y**=x -> y=y**x \u6bd4\u8f83\u8fd0\u7b97\u7b26 \u00b6 < \u5c0f\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e >= \u5927\u4e8e\u7b49\u4e8e == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e \u8bed\u6cd5 \u5de6\u8868\u8fbe\u5f0f > \u53f3\u8868\u8fbe\u5f0f \u8bf4\u660e \u6bd4\u8f83\u8fd0\u7b97\u7b26\u901a\u5e38\u8fd4\u56de\u5e03\u5c14\u7c7b\u578b\u7684\u503c \u793a\u4f8b 100<200 #True 100>=200 #False 1+5==2+4 #True \u6570\u5740\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff08\u521b\u5efa\u51fd\u6570\uff09 \u00b6 float(obj) \u7528\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u53c2\u6570\uff0c\u5219\u8fd4\u56de0.0 int(x,base=10) \u6216 int(x=0) \u7528\u6570\u5b57\u6216\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u53c2\u6570\u5219\u8fd4\u56de0\uff0c base\u4e3a\u8fdb\u5236\u8f6c\u6362\u7684\u5e95\u6570 complex(r=0.0,i=0.0) \u7528\u6570\u5b57\u521b\u5efa\u4e00\u4e2a\u590d\u6570\uff08\u5b9e\u90e8\u4e3ar,\u865a\u90e8\u4e3ai\uff09 bool(x) \u7528x\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u503c\uff08True/False\uff09 bool(x)\u8fd4\u56de\u5047\u503c\u7684\u60c5\u51b5 \u00b6 bool(x)\u7528\u4e8e\u663e\u793a\u83b7\u53d6x\u7684\u5e03\u5c14\u503c \u5047\u503c\u60c5\u51b5 None \u7a7a\u503c False \u5e03\u5c14\u5047\u503c 0 0.0 0j \u6240\u6709\u6570\u5b57\u96f6 ----------\u4ee5\u4e0b\u540e\u9762\u4f1a\u8bb2-------- '' \u7a7a\u5b57\u7b26\u4e32 [] \u7a7a\u5217\u8868 () \u7a7a\u5143\u7ec4 {} \u7a7a\u5b57\u5178 set() \u7a7a\u96c6\u5408 .... \u4e00\u5207\u7a7a\u7684\u5bb9\u5668\u5bf9\u8c61bool(x)\u53d6\u503c\u4e3a\u5047 \u7ec3\u4e601 \u00b6 1/ \u5c06\u6570\u5b57\uff083.14\uff09\u7528\u53d8\u91cfpi\u7ed1\u5b9a 2/ \u5c06pi\u53d8\u91cf\u8f6c\u5316\u4e3a\u6574\u6570\u7528\u53d8\u91cf i \u7ed1\u5b9a 3/ \u5c06pi\u53d8\u91cf\u4e0ei\u53d8\u91cf\u76f8\u51cf\uff0c\u7ed3\u679c\u7528\u53d8\u91cff\u7ed1\u5b9a 1. \u5224\u65adf\u662f\u5426\u7b49\u4e8e0.14\uff1f \u4e3a\u4ec0\u4e48\uff1f 2. \u5220\u9664\u6240\u6709\u53d8\u91cf\uff08\u7528\u4ea4\u4e92\u6a21\u5f0f\u6765\u505a\uff09 pi=3.14 i=int(pi) f=pi-i \u9884\u7f6e\u7684\u6570\u503c\u578b\u51fd\u6570 \u00b6 abs(x) \u53d6x\u7684\u7edd\u5bf9\u503c round(number[,ndigits]) \u5bf9\u6570\u503c\u8fdb\u884c\u8fd1\u4f3c\u7684\u56db\u820d\u4e94\u5165\uff0cndigits\u662f\u5c0f\u6570\u5411\u53f3\u53d6\u6574\u7684\u4f4d\u6570\uff0c\u8d1f\u6570\u8868\u793a\u5411\u5de6\u53d6\u6574 pow(x,y,z=None) \u76f8\u5f53\u4e8ex**y \u6216x**y%z help()\u67e5\u770b\u5e2e\u52a9\u51fd\u6570 >>>help(\u51fd\u6570\u540d) \u57fa\u672c\u8f93\u5165\u51fd\u6570 \u00b6 input('\u63d0\u793a\u5b57\u7b26\u4e32') \u8fd4\u56de\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32 s = input ( '\u8bf7\u8f93\u5165\u4e00\u4e9b\u6587\u5b57\uff1a' ) print ( '\u60a8\u521a\u624d\u8f93\u5165\u7684\u6587\u5b57\u662f\uff1a' , s ) s2 = input () print ( '\u60a8\u7b2c\u4e8c\u6b21\u8f93\u5165\u7684\u6587\u5b57\u662f\uff1a' , s2 ) r = int ( input ( '\u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570' )) print ( r , ' / 2 = ' , r / 2 ) \u57fa\u672c\u8f93\u51fa\u51fd\u6570 \u00b6 print \u4f5c\u7528 \u5c06\u4e00\u7cfb\u5217\u7684\u503c\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\u8bbe\u5907\u4e0a\uff0c\u9ed8\u8ba4\u4e3a\u7ec8\u7aef \u683c\u5f0f print(value,...,sep=' ',end='\\n') \u9009\u9879\u7684\u5173\u952e\u5b57\u53c2\u6570\u4e3a sep \u4e24\u4e2a\u503c\u4e4b\u95f4\u7684\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u4e00\u4e2a\u7a7a\u683c end \u8f93\u51fa\u5b8c\u6bd5\u540e\u5728\u6d41\u672b\u81ea\u52a8\u8ffd\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u6362\u884c\u7b26'\\n' \u8bed\u53e5 statement \u00b6 \u8bed\u53e5\u662f\u7531\u4e00\u4e9b\u8868\u8fbe\u5f0f\u7ec4\u6210\uff0c\u901a\u5e38\u4e00\u6761\u8bed\u53e5\u53ef\u4ee5\u72ec\u7acb\u7684\u8fd0\u884c\u6765\u5b8c\u6210\u4e00\u90e8\u5206\u4e8b\u60c5\u5e76\u5f62\u6210\u7ed3\u679c \u4e00\u6761\u8bed\u53e5\u5efa\u8bae\u5199\u5728\u4e00\u884c\u5185 \u591a\u884c\u8bed\u53e5\u5199\u5728\u4e00\u884c\u5185\u9700\u8981\u7528\u5206\u53f7\u9694\u5f00 \u793a\u4f8b x = 100 y = 200 print(x + y) \u5199\u5728\u4e00\u884c\u5185 x = 100; y = 200; print(x + y) \u663e\u793a\u6298\u884c \u00b6 \u6298\u884c\u7b26 \\ \u6298\u884c\u7b26\u5fc5\u987b\u653e\u5728\u4e00\u884c\u7684\u672b\u5c3e\uff0c\u6765\u793a\u610f\u89e3\u91ca\u6267\u884c\u5668\u7684\u4e0b\u4e00\u884c\u4e5f\u662f\u672c\u884c\u7684\u8bed\u53e5 \u9690\u5f0f\u6298\u884c \u00b6 \u6240\u6709\u62ec\u53f7\u7684\u5185\u5bb9\u6298\u884c\uff0c\u79f0\u4e3a\u9690\u5f0f\u6298\u884c () [] {} if \u8bed\u53e5 \u00b6 \u95ee\u9898\uff1a \u6709\u4e24\u6761\u8bed\u53e5\uff0cprint('\u662f\u5947\u6570') , print('\u662f\u5076\u6570') \u5982\u4f55\u53ea\u8ba9\u5176\u4e2d\u4e00\u6761\u8bed\u53e5\u6267\u884c\u5e76\u6253\u5370\u51fa\u7ed3\u679c \u4f5c\u7528 \u8ba9\u7a0b\u5e8f\u6839\u636e\u6761\u4ef6\u9009\u62e9\u6027\u7684\u6267\u884c\u67d0\u6761\u8bed\u53e5\u6216\u67d0\u4e9b\u8bed\u53e5 \u8bed\u6cd5 if \u771f\u503c\u8868\u8fbe\u5f0f1\uff1a \u8bed\u53e5\u57571 elif \u771f\u503c\u8868\u8fbe\u5f0f2\uff1a \u8bed\u53e5\u57572 elif \u771f\u503c\u8868\u8fbe\u5f0f3\uff1a \u8bed\u53e5\u57573 ... else: \u8bed\u53e5\u5757 \u8bf4\u660e elif \u8bed\u53e5\u53ef\u4ee5\u67090\u4e2a\uff0c1\u4e2a\uff0c\u591a\u4e2a else \u5b50\u53e5\u53ef\u4ee5\u67090\u4e2a\uff0c1\u4e2a\uff0c\u4e14\u53ea\u80fd\u653e\u5728\u6b64if\u8bed\u53e5\u7684\u6700\u540e \u793a\u4f8b\uff1a # x = int(input('\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff1a')) # if x % 2 == 0: # print(x, '\u662f\u5076\u6570') # else: # print(x, '\u662f\u5947\u6570') # # # \u4efb\u610f\u8f93\u5165\u4e00\u4e2a\u6570\uff0c\u7528\u7a0b\u5e8f\u5224\u65ad\u8fd9\u4e2a\u6570\u662f\u6b63\u6570\uff0c\u8d1f\u6570\uff0c\u8fd8\u662f0 x = int ( input ( '\u8f93\u5165\u4e00\u4e2a\u6570\uff1a' )) if x == 0 : print ( x , '\u662f0' ) elif x < 0 : print ( x , '\u662f\u8d1f\u6570' ) else : print ( x , '\u662f\u6b63\u6570' ) if \u8bed\u53e5\u7684\u771f\u503c\u8868\u8fbe\u5f0f \u00b6 if 100: print('\u771f\u503c') \u7b49\u540c\u4e8e if bool(100): print('\u771f\u503c') \u6761\u4ef6\u8868\u8fbe\u5f0f \u00b6 \u8bed\u6cd5 \u8868\u8fbe\u5f0f1 if \u771f\u503c\u8868\u8fbe\u5f0f2 else \u8868\u8fbe\u5f0f2 \u4f5c\u7528 \u6839\u636e\u771f\u503c\u8868\u8fbe\u5f0f\u7684\u53d6\u503c\uff08True/False\uff09 \u6765\u51b3\u5b9a\u6267\u884c\u8868\u8fbe\u5f0f1 \u6216\u8005 \u8868\u8fbe\u5f0f2 \u5e76\u8fd4\u56de\u7ed3\u679c \u793a\u4f8b\uff1a # \u5546\u573a\u4fc3\u9500\uff0c\u6ee1100 \u51cf 20 money = int ( input ( '\u8bf7\u8f93\u5165\u5546\u54c1\u91d1\u989d\uff1a' )) pay = money - 20 if money >= 100 else money print ( '\u60a8\u9700\u8981\u652f\u4ed8\uff1a' , pay , '\u5143' ) pass \u8bed\u53e5 \u00b6 \u4f5c\u7528 \u901a\u5e38\u7528\u6765\u586b\u5145\u8bed\u6cd5\u7a7a\u767d \u8bed\u6cd5 pass \u793a\u4f8b\uff1a # \u6b64\u793a\u4f8b\u4e3apass\u8bed\u53e5\u7684\u7528\u6cd5 # \u8f93\u5165\u4e00\u4e2a\u5b66\u751f\u7684\u6210\u7ee9\uff0c\u5982\u679c\u6210\u7ee9\u4e0d\u57280-100\u4e4b\u95f4 # \u5219\u63d0\u793a\u9519\u8bef score = int ( input ( '\u8bf7\u8f93\u5165\u6210\u7ee9\uff1a' )) if 0 <= score <= 100 : pass else : print ( '\u6210\u7ee9\u4e0d\u5408\u6cd5\uff01' ) \u5e03\u5c14\u8fd0\u7b97 \u00b6 not \u8bed\u6cd5 not x \u4f5c\u7528 \u5bf9 x \u8fdb\u884c\u5e03\u5c14\u53d6\u975e\uff0c\u5982bool(x) \u4e3aTrue,\u5219\u8fd4\u56deFalse,\u5426\u5219\u8fd4\u56deTrue \u793a\u4f8b not\u3000True #\u5219\u8fd4\u56deFalse not\u3000False #\u5219\u8fd4\u56deTrue not\u3000100 > 200 #\u5219\u8fd4\u56deTrue and \u8bed\u6cd5 x and y (x,y\u4ee3\u8868\u8868\u8fbe\u5f0f) \u4f5c\u7528 \u4f18\u5148\u8fd4\u56de\u3010\u5047\u3011\u503c\u5bf9\u8c61 \u5f53x\u7684\u5e03\u5c14\u503c\u4e3aFalse\u65f6\uff0c\u8fd4\u56dex,\u5426\u5219\u8fd4\u56dey \u793a\u4f8b True and\u3000True #\u5219\u8fd4\u56deTrue True and False #\u5219\u8fd4\u56deFalse False and\u3000True #\u5219\u8fd4\u56deFalse False and\u3000False #\u5219\u8fd4\u56deFalse 1 and 2 #\u8fd4\u56de2 0 and 1 #\u8fd4\u56de0 0.0 and 0 #\u8fd4\u56de0.0 or \u8bed\u6cd5 x or y (x,y\u4ee3\u8868\u8868\u8fbe\u5f0f) \u4f5c\u7528 \u4f18\u5148\u8fd4\u56de\u3010\u771f\u3011\u503c\u5bf9\u8c61 \u5f53x\u7684\u5e03\u5c14\u503c\u4e3aTrue\u65f6\uff0c\u8fd4\u56dex,\u5426\u5219\u8fd4\u56dey \u793a\u4f8b True or\u3000True #\u5219\u8fd4\u56deTrue True or False #\u5219\u8fd4\u56deTrue False or\u3000True #\u5219\u8fd4\u56deTrue False or\u3000False #\u5219\u8fd4\u56deFalse 1 or 2 #\u8fd4\u56de1 0 or 1 #\u8fd4\u56de1 0.0 or 0 #\u8fd4\u56de0 \u6b63\u8d1f\u53f7\u8fd0\u7b97\u7b26 \u00b6 + \uff08\u6b63\u53f7\uff09 -\uff08\u8d1f\u53f7\uff09 \u4e00\u5143\u8fd0\u7b97\u7b26 \u8bed\u6cd5 + \u8868\u8fbe\u5f0f - \u8868\u8fbe\u5f0f \u793a\u4f8b a = 5 b = -a c = +a","title":"2. python\u57fa\u7840\u8bed\u6cd5"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_1","text":"\u8fd0\u7b97\u7b26 \u8bf4\u660e y+=x -> y=y+x y-=x -> y=y-x y*=x -> y=y*x y/=x -> y=y/x y//=x -> y=y//x y%=x -> y=y%x y**=x -> y=y**x","title":"\u590d\u5408\u8d4b\u503c\u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_2","text":"< \u5c0f\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e >= \u5927\u4e8e\u7b49\u4e8e == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e \u8bed\u6cd5 \u5de6\u8868\u8fbe\u5f0f > \u53f3\u8868\u8fbe\u5f0f \u8bf4\u660e \u6bd4\u8f83\u8fd0\u7b97\u7b26\u901a\u5e38\u8fd4\u56de\u5e03\u5c14\u7c7b\u578b\u7684\u503c \u793a\u4f8b 100<200 #True 100>=200 #False 1+5==2+4 #True","title":"\u6bd4\u8f83\u8fd0\u7b97\u7b26"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_3","text":"float(obj) \u7528\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u53c2\u6570\uff0c\u5219\u8fd4\u56de0.0 int(x,base=10) \u6216 int(x=0) \u7528\u6570\u5b57\u6216\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u53c2\u6570\u5219\u8fd4\u56de0\uff0c base\u4e3a\u8fdb\u5236\u8f6c\u6362\u7684\u5e95\u6570 complex(r=0.0,i=0.0) \u7528\u6570\u5b57\u521b\u5efa\u4e00\u4e2a\u590d\u6570\uff08\u5b9e\u90e8\u4e3ar,\u865a\u90e8\u4e3ai\uff09 bool(x) \u7528x\u521b\u5efa\u4e00\u4e2a\u5e03\u5c14\u503c\uff08True/False\uff09","title":"\u6570\u5740\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff08\u521b\u5efa\u51fd\u6570\uff09"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#boolx","text":"bool(x)\u7528\u4e8e\u663e\u793a\u83b7\u53d6x\u7684\u5e03\u5c14\u503c \u5047\u503c\u60c5\u51b5 None \u7a7a\u503c False \u5e03\u5c14\u5047\u503c 0 0.0 0j \u6240\u6709\u6570\u5b57\u96f6 ----------\u4ee5\u4e0b\u540e\u9762\u4f1a\u8bb2-------- '' \u7a7a\u5b57\u7b26\u4e32 [] \u7a7a\u5217\u8868 () \u7a7a\u5143\u7ec4 {} \u7a7a\u5b57\u5178 set() \u7a7a\u96c6\u5408 .... \u4e00\u5207\u7a7a\u7684\u5bb9\u5668\u5bf9\u8c61bool(x)\u53d6\u503c\u4e3a\u5047","title":"bool(x)\u8fd4\u56de\u5047\u503c\u7684\u60c5\u51b5"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#1","text":"1/ \u5c06\u6570\u5b57\uff083.14\uff09\u7528\u53d8\u91cfpi\u7ed1\u5b9a 2/ \u5c06pi\u53d8\u91cf\u8f6c\u5316\u4e3a\u6574\u6570\u7528\u53d8\u91cf i \u7ed1\u5b9a 3/ \u5c06pi\u53d8\u91cf\u4e0ei\u53d8\u91cf\u76f8\u51cf\uff0c\u7ed3\u679c\u7528\u53d8\u91cff\u7ed1\u5b9a 1. \u5224\u65adf\u662f\u5426\u7b49\u4e8e0.14\uff1f \u4e3a\u4ec0\u4e48\uff1f 2. \u5220\u9664\u6240\u6709\u53d8\u91cf\uff08\u7528\u4ea4\u4e92\u6a21\u5f0f\u6765\u505a\uff09 pi=3.14 i=int(pi) f=pi-i","title":"\u7ec3\u4e601"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_4","text":"abs(x) \u53d6x\u7684\u7edd\u5bf9\u503c round(number[,ndigits]) \u5bf9\u6570\u503c\u8fdb\u884c\u8fd1\u4f3c\u7684\u56db\u820d\u4e94\u5165\uff0cndigits\u662f\u5c0f\u6570\u5411\u53f3\u53d6\u6574\u7684\u4f4d\u6570\uff0c\u8d1f\u6570\u8868\u793a\u5411\u5de6\u53d6\u6574 pow(x,y,z=None) \u76f8\u5f53\u4e8ex**y \u6216x**y%z help()\u67e5\u770b\u5e2e\u52a9\u51fd\u6570 >>>help(\u51fd\u6570\u540d)","title":"\u9884\u7f6e\u7684\u6570\u503c\u578b\u51fd\u6570"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_5","text":"input('\u63d0\u793a\u5b57\u7b26\u4e32') \u8fd4\u56de\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32 s = input ( '\u8bf7\u8f93\u5165\u4e00\u4e9b\u6587\u5b57\uff1a' ) print ( '\u60a8\u521a\u624d\u8f93\u5165\u7684\u6587\u5b57\u662f\uff1a' , s ) s2 = input () print ( '\u60a8\u7b2c\u4e8c\u6b21\u8f93\u5165\u7684\u6587\u5b57\u662f\uff1a' , s2 ) r = int ( input ( '\u8bf7\u8f93\u5165\u4e00\u4e2a\u6574\u6570' )) print ( r , ' / 2 = ' , r / 2 )","title":"\u57fa\u672c\u8f93\u5165\u51fd\u6570"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_6","text":"print \u4f5c\u7528 \u5c06\u4e00\u7cfb\u5217\u7684\u503c\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\u8bbe\u5907\u4e0a\uff0c\u9ed8\u8ba4\u4e3a\u7ec8\u7aef \u683c\u5f0f print(value,...,sep=' ',end='\\n') \u9009\u9879\u7684\u5173\u952e\u5b57\u53c2\u6570\u4e3a sep \u4e24\u4e2a\u503c\u4e4b\u95f4\u7684\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u4e3a\u4e00\u4e2a\u7a7a\u683c end \u8f93\u51fa\u5b8c\u6bd5\u540e\u5728\u6d41\u672b\u81ea\u52a8\u8ffd\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9ed8\u8ba4\u4e3a\u6362\u884c\u7b26'\\n'","title":"\u57fa\u672c\u8f93\u51fa\u51fd\u6570"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#statement","text":"\u8bed\u53e5\u662f\u7531\u4e00\u4e9b\u8868\u8fbe\u5f0f\u7ec4\u6210\uff0c\u901a\u5e38\u4e00\u6761\u8bed\u53e5\u53ef\u4ee5\u72ec\u7acb\u7684\u8fd0\u884c\u6765\u5b8c\u6210\u4e00\u90e8\u5206\u4e8b\u60c5\u5e76\u5f62\u6210\u7ed3\u679c \u4e00\u6761\u8bed\u53e5\u5efa\u8bae\u5199\u5728\u4e00\u884c\u5185 \u591a\u884c\u8bed\u53e5\u5199\u5728\u4e00\u884c\u5185\u9700\u8981\u7528\u5206\u53f7\u9694\u5f00 \u793a\u4f8b x = 100 y = 200 print(x + y) \u5199\u5728\u4e00\u884c\u5185 x = 100; y = 200; print(x + y)","title":"\u8bed\u53e5 statement"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_7","text":"\u6298\u884c\u7b26 \\ \u6298\u884c\u7b26\u5fc5\u987b\u653e\u5728\u4e00\u884c\u7684\u672b\u5c3e\uff0c\u6765\u793a\u610f\u89e3\u91ca\u6267\u884c\u5668\u7684\u4e0b\u4e00\u884c\u4e5f\u662f\u672c\u884c\u7684\u8bed\u53e5","title":"\u663e\u793a\u6298\u884c"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_8","text":"\u6240\u6709\u62ec\u53f7\u7684\u5185\u5bb9\u6298\u884c\uff0c\u79f0\u4e3a\u9690\u5f0f\u6298\u884c () [] {}","title":"\u9690\u5f0f\u6298\u884c"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#if","text":"\u95ee\u9898\uff1a \u6709\u4e24\u6761\u8bed\u53e5\uff0cprint('\u662f\u5947\u6570') , print('\u662f\u5076\u6570') \u5982\u4f55\u53ea\u8ba9\u5176\u4e2d\u4e00\u6761\u8bed\u53e5\u6267\u884c\u5e76\u6253\u5370\u51fa\u7ed3\u679c \u4f5c\u7528 \u8ba9\u7a0b\u5e8f\u6839\u636e\u6761\u4ef6\u9009\u62e9\u6027\u7684\u6267\u884c\u67d0\u6761\u8bed\u53e5\u6216\u67d0\u4e9b\u8bed\u53e5 \u8bed\u6cd5 if \u771f\u503c\u8868\u8fbe\u5f0f1\uff1a \u8bed\u53e5\u57571 elif \u771f\u503c\u8868\u8fbe\u5f0f2\uff1a \u8bed\u53e5\u57572 elif \u771f\u503c\u8868\u8fbe\u5f0f3\uff1a \u8bed\u53e5\u57573 ... else: \u8bed\u53e5\u5757 \u8bf4\u660e elif \u8bed\u53e5\u53ef\u4ee5\u67090\u4e2a\uff0c1\u4e2a\uff0c\u591a\u4e2a else \u5b50\u53e5\u53ef\u4ee5\u67090\u4e2a\uff0c1\u4e2a\uff0c\u4e14\u53ea\u80fd\u653e\u5728\u6b64if\u8bed\u53e5\u7684\u6700\u540e \u793a\u4f8b\uff1a # x = int(input('\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff1a')) # if x % 2 == 0: # print(x, '\u662f\u5076\u6570') # else: # print(x, '\u662f\u5947\u6570') # # # \u4efb\u610f\u8f93\u5165\u4e00\u4e2a\u6570\uff0c\u7528\u7a0b\u5e8f\u5224\u65ad\u8fd9\u4e2a\u6570\u662f\u6b63\u6570\uff0c\u8d1f\u6570\uff0c\u8fd8\u662f0 x = int ( input ( '\u8f93\u5165\u4e00\u4e2a\u6570\uff1a' )) if x == 0 : print ( x , '\u662f0' ) elif x < 0 : print ( x , '\u662f\u8d1f\u6570' ) else : print ( x , '\u662f\u6b63\u6570' )","title":"if \u8bed\u53e5"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#if_1","text":"if 100: print('\u771f\u503c') \u7b49\u540c\u4e8e if bool(100): print('\u771f\u503c')","title":"if \u8bed\u53e5\u7684\u771f\u503c\u8868\u8fbe\u5f0f"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_9","text":"\u8bed\u6cd5 \u8868\u8fbe\u5f0f1 if \u771f\u503c\u8868\u8fbe\u5f0f2 else \u8868\u8fbe\u5f0f2 \u4f5c\u7528 \u6839\u636e\u771f\u503c\u8868\u8fbe\u5f0f\u7684\u53d6\u503c\uff08True/False\uff09 \u6765\u51b3\u5b9a\u6267\u884c\u8868\u8fbe\u5f0f1 \u6216\u8005 \u8868\u8fbe\u5f0f2 \u5e76\u8fd4\u56de\u7ed3\u679c \u793a\u4f8b\uff1a # \u5546\u573a\u4fc3\u9500\uff0c\u6ee1100 \u51cf 20 money = int ( input ( '\u8bf7\u8f93\u5165\u5546\u54c1\u91d1\u989d\uff1a' )) pay = money - 20 if money >= 100 else money print ( '\u60a8\u9700\u8981\u652f\u4ed8\uff1a' , pay , '\u5143' )","title":"\u6761\u4ef6\u8868\u8fbe\u5f0f"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#pass","text":"\u4f5c\u7528 \u901a\u5e38\u7528\u6765\u586b\u5145\u8bed\u6cd5\u7a7a\u767d \u8bed\u6cd5 pass \u793a\u4f8b\uff1a # \u6b64\u793a\u4f8b\u4e3apass\u8bed\u53e5\u7684\u7528\u6cd5 # \u8f93\u5165\u4e00\u4e2a\u5b66\u751f\u7684\u6210\u7ee9\uff0c\u5982\u679c\u6210\u7ee9\u4e0d\u57280-100\u4e4b\u95f4 # \u5219\u63d0\u793a\u9519\u8bef score = int ( input ( '\u8bf7\u8f93\u5165\u6210\u7ee9\uff1a' )) if 0 <= score <= 100 : pass else : print ( '\u6210\u7ee9\u4e0d\u5408\u6cd5\uff01' )","title":"pass \u8bed\u53e5"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_10","text":"not \u8bed\u6cd5 not x \u4f5c\u7528 \u5bf9 x \u8fdb\u884c\u5e03\u5c14\u53d6\u975e\uff0c\u5982bool(x) \u4e3aTrue,\u5219\u8fd4\u56deFalse,\u5426\u5219\u8fd4\u56deTrue \u793a\u4f8b not\u3000True #\u5219\u8fd4\u56deFalse not\u3000False #\u5219\u8fd4\u56deTrue not\u3000100 > 200 #\u5219\u8fd4\u56deTrue and \u8bed\u6cd5 x and y (x,y\u4ee3\u8868\u8868\u8fbe\u5f0f) \u4f5c\u7528 \u4f18\u5148\u8fd4\u56de\u3010\u5047\u3011\u503c\u5bf9\u8c61 \u5f53x\u7684\u5e03\u5c14\u503c\u4e3aFalse\u65f6\uff0c\u8fd4\u56dex,\u5426\u5219\u8fd4\u56dey \u793a\u4f8b True and\u3000True #\u5219\u8fd4\u56deTrue True and False #\u5219\u8fd4\u56deFalse False and\u3000True #\u5219\u8fd4\u56deFalse False and\u3000False #\u5219\u8fd4\u56deFalse 1 and 2 #\u8fd4\u56de2 0 and 1 #\u8fd4\u56de0 0.0 and 0 #\u8fd4\u56de0.0 or \u8bed\u6cd5 x or y (x,y\u4ee3\u8868\u8868\u8fbe\u5f0f) \u4f5c\u7528 \u4f18\u5148\u8fd4\u56de\u3010\u771f\u3011\u503c\u5bf9\u8c61 \u5f53x\u7684\u5e03\u5c14\u503c\u4e3aTrue\u65f6\uff0c\u8fd4\u56dex,\u5426\u5219\u8fd4\u56dey \u793a\u4f8b True or\u3000True #\u5219\u8fd4\u56deTrue True or False #\u5219\u8fd4\u56deTrue False or\u3000True #\u5219\u8fd4\u56deTrue False or\u3000False #\u5219\u8fd4\u56deFalse 1 or 2 #\u8fd4\u56de1 0 or 1 #\u8fd4\u56de1 0.0 or 0 #\u8fd4\u56de0","title":"\u5e03\u5c14\u8fd0\u7b97"},{"location":"python/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#_11","text":"+ \uff08\u6b63\u53f7\uff09 -\uff08\u8d1f\u53f7\uff09 \u4e00\u5143\u8fd0\u7b97\u7b26 \u8bed\u6cd5 + \u8868\u8fbe\u5f0f - \u8868\u8fbe\u5f0f \u793a\u4f8b a = 5 b = -a c = +a","title":"\u6b63\u8d1f\u53f7\u8fd0\u7b97\u7b26"},{"location":"python/python%E5%AD%97%E5%85%B8/","text":"\u5b57\u5178 dict \u00b6 \u58f0\u660e\u65f6\u952e\u4e3a\u4e0d\u53ef\u53d8\u7684\u7b26\u53f7 d = { True : '\u771f', False : '\u5047', None : '\u7a7a', 'name' : '\u59d3\u540d', tuple('ABc') : '\u5143\u7ec4', 100 \uff1a '\u4e00\u767e' } \u4ec0\u4e48\u662f\u5b57\u5178: \u5b57\u5178\u662f\u4e00\u79cd\u53ef\u53d8\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e \u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u90fd\u662f\u7528'\u952e'(key)\u8fdb\u884c\u7d22\u5f15\u7684\uff0c\u800c\u4e0d\u50cf\u5e8f\u5217\u53ef\u4ee5\u7528\u7d22\u5f15\u4e0b\u6807\u8fdb\u884c\u7d22\u5f15 \u5b57\u5178\u4e2d\u7684\u6570\u636e\u6ca1\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb,\u5b57\u5178\u7684\u5b58\u50a8\u662f\u65e0\u5e8f\u7684 \u5b57\u5178\u4e2d\u7684\u6570\u636e\u4ee5\u952e-\u503c\u5bf9(key-value)\u5bf9\u5f62\u5f0f\u8fdb\u884c\u6620\u5c04\u5b58\u50a8 \u5b57\u5178\u7684\u952e\u4e0d\u80fd\u91cd\u590d,\u4e14\u53ea\u80fd\u7528\u4e0d\u53ef\u53d8\u7c7b\u578b\u4f5c\u4e3a\u5b57\u5178\u7684\u952e \u5b57\u5178\u7684\u5b57\u9762\u503c\u8868\u793a\u65b9\u6cd5 \u00b6 \u4ee5{} \u62ec\u8d77\u6765,\u4ee5\u5192\u53f7(:) \u5206\u9694\u952e-\u503c\u5bf9,\u5404\u952e\u503c\u5bf9\u7528\u9017\u53f7\u5206\u9694\u5f00 \u521b\u5efa\u7a7a\u5b57\u5178 \u00b6 d = {} # {} \u8868\u8fbe\u5f0f\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178 \u521b\u5efa\u975e\u7a7a\u5b57\u5178 \u00b6 d = {'name': 'weimingze', 'age': 35} d = {'a': 100} d = {'a': tuple(\"ABC\")} d = {'abc': list(\"ABC\")} d = {'a': {'b':100, 'c':200}} d = {True:'\u771f\u503c', False: '\u5047\u503c', None:'\u7a7a', 100:'\u4e00\u767e'} d = {(1970, 1, 1): '\u8ba1\u7b97\u673a\u5143\u5e74'} \u5b57\u5178\u7684\u6784\u9020\u51fd\u6570 dict \u00b6 dict() \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178,\u7b49\u540c\u4e8e{} dict(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u5178 dict(**kwargs) \u7528\u5173\u952e\u5b57\u4f20\u53c2\u5f62\u5f0f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u5178 # \u793a\u4f8b: d = dict () d = dict ([( 'name' , 'tarena' ), ( 'age' , 15 )]) d = dict (([ 'name' , 'weimingze' ], \"AB\" )) d = dict ( name = 'Tarena' , age = 15 ) \u5b57\u5178\u7684\u64cd\u4f5c \u00b6 \u5b57\u5178\u7684\u952e\u7d22\u5f15 \u7528[] \u8fd0\u7b97\u7b26\u53ef\u4ee5\u83b7\u53d6\u5b57\u5178\u5185'\u952e'\u5bf9\u5e94\u7684'\u503c' \u8bed\u6cd5: v = \u5b57\u5178[\u952e] \u793a\u4f8b: d = {'name': 'tarena', 'age': 15} print(d['name'], '\u4eca\u5e74', d['age'], '\u5c81') \u6dfb\u52a0/\u4fee\u6539\u5b57\u5178\u7684\u5143\u7d20 \u00b6 \u8bed\u6cd5: \u5b57\u5178[\u952e] = \u8868\u8fbe\u5f0f \u793a\u4f8b: d = {} d['name'] = 'tarena' #\u521b\u5efa\u65b0\u7684\u952e'name'\u540c\u65f6\u5173\u8054\u503c d['age'] = 15 # \u521b\u5efa\u952e\u5e76\u7ed1\u5b9a15 d['age'] = 16 # \u4fee\u6539\u539f\u6765\u7684\u952e'age',\u91cd\u65b0\u7ed1\u5b9a\u4e3a16 \u8bf4\u660e: \u952e\u4e0d\u5b58\u5728,\u521b\u5efa\u952e,\u5e76\u7ed1\u5b9a\u503c \u952e\u5b58\u5728,\u4fee\u6539\u952e\u7684\u7ed1\u5b9a\u5173\u7cfb \u5220\u9664\u5b57\u5178\u5143\u7d20 del\u8bed\u53e5 \u00b6 del \u5b57\u5178[\u952e] \u793a\u4f8b: d = {1:'\u4e00', 'hello': 'world', False:'\u5047\u503c'} del d['hello'] \u5b57\u5178\u7684 in / not in \u8fd0\u7b97\u7b26 \u00b6 in\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u952e\u662f\u5426\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d,\u5982\u679c\u5b58\u5728\u8fd4\u56de True,\u5426\u5219\u8fd4\u56deFalse not in \u7684\u8fd4\u56de\u7ed3\u679c\u4e0ein \u76f8\u53cd # \u793a\u4f8b: d = { 'name' : '\u5c0f\u5f20' , 'age' : 20 } 'name' in d # True 'age' not in d # False '\u5c0f\u5f20' in d # False (\u53ea\u5224\u65ad\u952e,\u4e0d\u5224\u65ad\u503c) 20 not in d # True \u7ec3\u4e60 1.\u5199\u7a0b\u5e8f,\u5b9e\u73b0\u4ee5\u4e0b\u8981\u6c42: 1) \u5c06\u5982\u4e0b\u6570\u636e\u5f62\u6210\u4e00\u4e2a\u5b57\u5178 seasons \u952e \u503c 1 '\u6625\u5b63\u67091,2,3\u6708' 2 '\u590f\u5b63\u67094,5,6\u6708' 3 '\u79cb\u5b63\u67097,8,9\u6708' 4 '\u51ac\u5b63\u670910,11,12\u6708' 2) \u8ba9\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u8fd9\u4e2a\u5b63\u5ea6,\u6253\u5370\u8fd9\u4e2a\u5b63\u5ea6\u6709\u4fe1\u606f \u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u4fe1\u606f\u4e0d\u5728\u5b57\u5178\u4e2d,\u5219\u6253\u5370\"\u4fe1\u606f\u4e0d\u5b58\u5728\" \u5b57\u5178\u7684\u8fed\u4ee3\u8bbf\u95ee \u00b6 \u5b57\u5178\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61,\u5b57\u5178\u53ea\u80fd\u5bf9'\u952e'\u8fdb\u884c\u8bbf\u95ee # \u793a\u4f8b: d = { 'aaa' : 111 , 'bbb' : 222 , 'ccc' : 333 } for k in d : print ( k ) \u53ef\u4ee5\u7528\u4e8e\u5b57\u5178\u7684\u51fd\u6570 \u00b6 len(x) \u8fd4\u56de\u5b57\u5178\u7684\u952e\u503c\u5bf9\u4e2a\u6570 max(x) \u8fd4\u56de\u5b57\u5178\u952e\u7684\u6700\u5927\u503c min(x) \u8fd4\u56de\u5b57\u5178\u952e\u7684\u6700\u5c0f\u503c sum(x) \u8fd4\u56de\u5b57\u5178\u6240\u6709\u952e\u7684\u548c any(x) \u771f\u503c\u6d4b\u8bd5,\u53ea\u5bf9\u952e\u8fdb\u884c\u6d4b\u8bd5 all(x) \u771f\u503c\u6d4b\u8bd5,\u5168\u90e8\u952e\u4e3a\u771f\u503c.\u7ed3\u679c\u624d\u4e3aTrue # \u793a\u4f8b: d = { 0 : '\u96f6' , 5 : '\u4f0d' , 8 : '\u634c' , 3 : '\u53c1' } len ( d ) # 4 max ( d ) # 8 min ( d ) # 0 sum ( d ) # 16 any ( d ) # True all ( d ) # False \u5b57\u5178\u7684\u65b9\u6cd5 \u00b6 \u65b9\u6cd5\u540d \u8bf4\u660e D.clear() \u6e05\u7a7a\u5b57\u5178 D.pop(key) \u79fb\u9664\u952e,\u540c\u65f6\u8fd4\u56de\u6b64\u952e\u5bf9\u5e94\u7684\u503c D.copy() \u8fd4\u56de\u5b57\u5178D\u7684\u526f\u672c(\u6d45\u62f7\u8d1d) D.update(D2) \u5c06\u5b57\u5178D2\u5408\u5e76\u5230D\u4e2d,\u5982\u679c\u952e\u76f8\u540c,\u5219\u6b64\u952e\u7684\u503c\u53d6D2\u7684\u503c\u4e3a\u4e3a\u65b0\u503c D.get(key, default=None) \u8fd4\u56de\u952ekey\u6240\u5bf9\u5e94\u7684\u503c,\u5982\u679c\u6ca1\u6709\u6b64\u952e,\u5219\u8fd4\u56deDefault\u7684\u503c D.keys() \u8fd4\u56de\u53ef\u8fed\u4ee3\u7684dict_keys\u96c6\u5408\u5bf9\u8c61 D.values() \u8fd4\u56de\u53ef\u8fed\u4ee3\u7684dict_value\u96c6\u5408\u5bf9\u8c61 D.items() \u8fd4\u56de\u53ef\u8fed\u4ee3\u7684dict_item\u5bf9\u8c61 # \u793a\u4f8b: d = { 1 : 'One' , 2 : \"Two\" } d2 = { 2 : '\u4e8c' , 3 : '\u4e09' } d3 = d . copy () # \u590d\u5236 d3 . pop ( 1 ) # d3 = {2: \"Two\"} d . update ( d2 ) # d = {1: 'One', 2: '\u4e8c', 3: '\u4e09'} d = { 1 : 'One' , 2 : '\u4e8c' , 3 : '\u4e09' } for k in d . keys (): print ( k ) # 1 2 3 for v in d . values (): print ( v ) # 'One' '\u4e8c' '\u4e09' for t in d . items (): print ( t ) # (1, 'One') (2, '\u4e8c') (3, '\u4e09') \u7ec3\u4e60 \u8f93\u5165\u4efb\u610f\u4e00\u6bb5\u5b57\u7b26\u4e32,\u6253\u5370\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u53ca\u51fa\u73b0\u8fc7\u7684\u6b21\u6570: \u5982: \u8f93\u5165: ABCDABCABA \u6253\u5370\u5982\u4e0b: A: 4\u6b21 B: 3\u6b21 D: 1\u6b21 C: 2\u6b21 \u6ce8: \u4e0d\u8981\u6c42\u6253\u5370\u7684\u987a\u5e8f \u5b57\u5178\u63a8\u5bfc\u5f0f \u00b6 \u662f\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u5b57\u5178\u7684\u8868\u8fbe\u5f0f \u8bed\u6cd5: {\u952e\u8868\u8fbe\u5f0f : \u503c\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61[if \u771f\u503c\u8868\u8fbe\u5f0f]} \u6ce8: []\u8868\u793a\u5176\u4e2d\u7684\u5185\u5bb9\u53ef\u7701\u7565 \u793a\u4f8b: # \u751f\u6210\u4e00\u4e2a\u5b57\u5178,\u952e\u4e3a\u6570\u5b57 1 ~ 9,\u503c\u4e3a\u952e\u7684\u5e73\u65b9 d = {x : x ** 2 for x in range(1, 10)} \u5b57\u5178\u63a8\u5bfc\u5f0f\u7ec3\u4e60 1. \u5df2\u77e5\u6709\u5982\u4e0b\u5b57\u7b26\u4e32\u5217\u8868 L = ['tarena', 'xiaozhang', 'abc'] \u751f\u6210\u5982\u4e0b\u5b57\u5178: d = {'tarena': 6, 'xiaozhang': 9, 'abc': 3} \u6ce8: \u5b57\u5178\u7684\u503c\u4e3a\u952e\u7684\u957f\u5ea6 2. \u5df2\u77e5\u6709\u5982\u4e0b\u4e24\u4e2a\u5217\u8868: nos = [1001, 1002, 1005, 1008] names = ['Tom', 'Jerry', 'Spike', 'Tyke'] \u7528\u4e0a\u8ff0\u4e24\u4e2a\u5217\u8868\u751f\u6210\u5982\u4e0b\u5b57\u5178: {1001: 'Tom', 1002: 'Jerry', 1005: 'Spike', 1008: 'Tyke'} \u5b57\u5178 VS \u5217\u8868 \u90fd\u662f\u53ef\u53d8\u5bf9\u8c61 \u7d22\u5f15\u65b9\u5f0f,\u5217\u8868\u7528\u6574\u6570\u7d22\u5f15,\u5b57\u5178\u7528\u952e\u7d22\u5f15 \u5b57\u5178\u7684\u63d2\u5165,\u5220\u9664,\u4fee\u6539\u7684\u901f\u5ea6\u53ef\u80fd\u4f1a\u5feb\u8fc7 \u5217\u8868(\u91cd\u8981) \u5217\u8868\u7684\u5b58\u50a8\u662f\u6709\u5e8f\u7684,\u5b57\u5178\u7684\u5b58\u50a8\u662f\u65e0\u5e8f\u7684","title":"7. \u5b57\u5178"},{"location":"python/python%E5%AD%97%E5%85%B8/#dict","text":"\u58f0\u660e\u65f6\u952e\u4e3a\u4e0d\u53ef\u53d8\u7684\u7b26\u53f7 d = { True : '\u771f', False : '\u5047', None : '\u7a7a', 'name' : '\u59d3\u540d', tuple('ABc') : '\u5143\u7ec4', 100 \uff1a '\u4e00\u767e' } \u4ec0\u4e48\u662f\u5b57\u5178: \u5b57\u5178\u662f\u4e00\u79cd\u53ef\u53d8\u7684\u5bb9\u5668\uff0c\u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e \u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u90fd\u662f\u7528'\u952e'(key)\u8fdb\u884c\u7d22\u5f15\u7684\uff0c\u800c\u4e0d\u50cf\u5e8f\u5217\u53ef\u4ee5\u7528\u7d22\u5f15\u4e0b\u6807\u8fdb\u884c\u7d22\u5f15 \u5b57\u5178\u4e2d\u7684\u6570\u636e\u6ca1\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb,\u5b57\u5178\u7684\u5b58\u50a8\u662f\u65e0\u5e8f\u7684 \u5b57\u5178\u4e2d\u7684\u6570\u636e\u4ee5\u952e-\u503c\u5bf9(key-value)\u5bf9\u5f62\u5f0f\u8fdb\u884c\u6620\u5c04\u5b58\u50a8 \u5b57\u5178\u7684\u952e\u4e0d\u80fd\u91cd\u590d,\u4e14\u53ea\u80fd\u7528\u4e0d\u53ef\u53d8\u7c7b\u578b\u4f5c\u4e3a\u5b57\u5178\u7684\u952e","title":"\u5b57\u5178 dict"},{"location":"python/python%E5%AD%97%E5%85%B8/#_1","text":"\u4ee5{} \u62ec\u8d77\u6765,\u4ee5\u5192\u53f7(:) \u5206\u9694\u952e-\u503c\u5bf9,\u5404\u952e\u503c\u5bf9\u7528\u9017\u53f7\u5206\u9694\u5f00","title":"\u5b57\u5178\u7684\u5b57\u9762\u503c\u8868\u793a\u65b9\u6cd5"},{"location":"python/python%E5%AD%97%E5%85%B8/#_2","text":"d = {} # {} \u8868\u8fbe\u5f0f\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178","title":"\u521b\u5efa\u7a7a\u5b57\u5178"},{"location":"python/python%E5%AD%97%E5%85%B8/#_3","text":"d = {'name': 'weimingze', 'age': 35} d = {'a': 100} d = {'a': tuple(\"ABC\")} d = {'abc': list(\"ABC\")} d = {'a': {'b':100, 'c':200}} d = {True:'\u771f\u503c', False: '\u5047\u503c', None:'\u7a7a', 100:'\u4e00\u767e'} d = {(1970, 1, 1): '\u8ba1\u7b97\u673a\u5143\u5e74'}","title":"\u521b\u5efa\u975e\u7a7a\u5b57\u5178"},{"location":"python/python%E5%AD%97%E5%85%B8/#dict_1","text":"dict() \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178,\u7b49\u540c\u4e8e{} dict(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u5178 dict(**kwargs) \u7528\u5173\u952e\u5b57\u4f20\u53c2\u5f62\u5f0f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u5178 # \u793a\u4f8b: d = dict () d = dict ([( 'name' , 'tarena' ), ( 'age' , 15 )]) d = dict (([ 'name' , 'weimingze' ], \"AB\" )) d = dict ( name = 'Tarena' , age = 15 )","title":"\u5b57\u5178\u7684\u6784\u9020\u51fd\u6570 dict"},{"location":"python/python%E5%AD%97%E5%85%B8/#_4","text":"\u5b57\u5178\u7684\u952e\u7d22\u5f15 \u7528[] \u8fd0\u7b97\u7b26\u53ef\u4ee5\u83b7\u53d6\u5b57\u5178\u5185'\u952e'\u5bf9\u5e94\u7684'\u503c' \u8bed\u6cd5: v = \u5b57\u5178[\u952e] \u793a\u4f8b: d = {'name': 'tarena', 'age': 15} print(d['name'], '\u4eca\u5e74', d['age'], '\u5c81')","title":"\u5b57\u5178\u7684\u64cd\u4f5c"},{"location":"python/python%E5%AD%97%E5%85%B8/#_5","text":"\u8bed\u6cd5: \u5b57\u5178[\u952e] = \u8868\u8fbe\u5f0f \u793a\u4f8b: d = {} d['name'] = 'tarena' #\u521b\u5efa\u65b0\u7684\u952e'name'\u540c\u65f6\u5173\u8054\u503c d['age'] = 15 # \u521b\u5efa\u952e\u5e76\u7ed1\u5b9a15 d['age'] = 16 # \u4fee\u6539\u539f\u6765\u7684\u952e'age',\u91cd\u65b0\u7ed1\u5b9a\u4e3a16 \u8bf4\u660e: \u952e\u4e0d\u5b58\u5728,\u521b\u5efa\u952e,\u5e76\u7ed1\u5b9a\u503c \u952e\u5b58\u5728,\u4fee\u6539\u952e\u7684\u7ed1\u5b9a\u5173\u7cfb","title":"\u6dfb\u52a0/\u4fee\u6539\u5b57\u5178\u7684\u5143\u7d20"},{"location":"python/python%E5%AD%97%E5%85%B8/#del","text":"del \u5b57\u5178[\u952e] \u793a\u4f8b: d = {1:'\u4e00', 'hello': 'world', False:'\u5047\u503c'} del d['hello']","title":"\u5220\u9664\u5b57\u5178\u5143\u7d20 del\u8bed\u53e5"},{"location":"python/python%E5%AD%97%E5%85%B8/#in-not-in","text":"in\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u952e\u662f\u5426\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d,\u5982\u679c\u5b58\u5728\u8fd4\u56de True,\u5426\u5219\u8fd4\u56deFalse not in \u7684\u8fd4\u56de\u7ed3\u679c\u4e0ein \u76f8\u53cd # \u793a\u4f8b: d = { 'name' : '\u5c0f\u5f20' , 'age' : 20 } 'name' in d # True 'age' not in d # False '\u5c0f\u5f20' in d # False (\u53ea\u5224\u65ad\u952e,\u4e0d\u5224\u65ad\u503c) 20 not in d # True \u7ec3\u4e60 1.\u5199\u7a0b\u5e8f,\u5b9e\u73b0\u4ee5\u4e0b\u8981\u6c42: 1) \u5c06\u5982\u4e0b\u6570\u636e\u5f62\u6210\u4e00\u4e2a\u5b57\u5178 seasons \u952e \u503c 1 '\u6625\u5b63\u67091,2,3\u6708' 2 '\u590f\u5b63\u67094,5,6\u6708' 3 '\u79cb\u5b63\u67097,8,9\u6708' 4 '\u51ac\u5b63\u670910,11,12\u6708' 2) \u8ba9\u7528\u6237\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u8fd9\u4e2a\u5b63\u5ea6,\u6253\u5370\u8fd9\u4e2a\u5b63\u5ea6\u6709\u4fe1\u606f \u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u4fe1\u606f\u4e0d\u5728\u5b57\u5178\u4e2d,\u5219\u6253\u5370\"\u4fe1\u606f\u4e0d\u5b58\u5728\"","title":"\u5b57\u5178\u7684 in / not in \u8fd0\u7b97\u7b26"},{"location":"python/python%E5%AD%97%E5%85%B8/#_6","text":"\u5b57\u5178\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61,\u5b57\u5178\u53ea\u80fd\u5bf9'\u952e'\u8fdb\u884c\u8bbf\u95ee # \u793a\u4f8b: d = { 'aaa' : 111 , 'bbb' : 222 , 'ccc' : 333 } for k in d : print ( k )","title":"\u5b57\u5178\u7684\u8fed\u4ee3\u8bbf\u95ee"},{"location":"python/python%E5%AD%97%E5%85%B8/#_7","text":"len(x) \u8fd4\u56de\u5b57\u5178\u7684\u952e\u503c\u5bf9\u4e2a\u6570 max(x) \u8fd4\u56de\u5b57\u5178\u952e\u7684\u6700\u5927\u503c min(x) \u8fd4\u56de\u5b57\u5178\u952e\u7684\u6700\u5c0f\u503c sum(x) \u8fd4\u56de\u5b57\u5178\u6240\u6709\u952e\u7684\u548c any(x) \u771f\u503c\u6d4b\u8bd5,\u53ea\u5bf9\u952e\u8fdb\u884c\u6d4b\u8bd5 all(x) \u771f\u503c\u6d4b\u8bd5,\u5168\u90e8\u952e\u4e3a\u771f\u503c.\u7ed3\u679c\u624d\u4e3aTrue # \u793a\u4f8b: d = { 0 : '\u96f6' , 5 : '\u4f0d' , 8 : '\u634c' , 3 : '\u53c1' } len ( d ) # 4 max ( d ) # 8 min ( d ) # 0 sum ( d ) # 16 any ( d ) # True all ( d ) # False","title":"\u53ef\u4ee5\u7528\u4e8e\u5b57\u5178\u7684\u51fd\u6570"},{"location":"python/python%E5%AD%97%E5%85%B8/#_8","text":"\u65b9\u6cd5\u540d \u8bf4\u660e D.clear() \u6e05\u7a7a\u5b57\u5178 D.pop(key) \u79fb\u9664\u952e,\u540c\u65f6\u8fd4\u56de\u6b64\u952e\u5bf9\u5e94\u7684\u503c D.copy() \u8fd4\u56de\u5b57\u5178D\u7684\u526f\u672c(\u6d45\u62f7\u8d1d) D.update(D2) \u5c06\u5b57\u5178D2\u5408\u5e76\u5230D\u4e2d,\u5982\u679c\u952e\u76f8\u540c,\u5219\u6b64\u952e\u7684\u503c\u53d6D2\u7684\u503c\u4e3a\u4e3a\u65b0\u503c D.get(key, default=None) \u8fd4\u56de\u952ekey\u6240\u5bf9\u5e94\u7684\u503c,\u5982\u679c\u6ca1\u6709\u6b64\u952e,\u5219\u8fd4\u56deDefault\u7684\u503c D.keys() \u8fd4\u56de\u53ef\u8fed\u4ee3\u7684dict_keys\u96c6\u5408\u5bf9\u8c61 D.values() \u8fd4\u56de\u53ef\u8fed\u4ee3\u7684dict_value\u96c6\u5408\u5bf9\u8c61 D.items() \u8fd4\u56de\u53ef\u8fed\u4ee3\u7684dict_item\u5bf9\u8c61 # \u793a\u4f8b: d = { 1 : 'One' , 2 : \"Two\" } d2 = { 2 : '\u4e8c' , 3 : '\u4e09' } d3 = d . copy () # \u590d\u5236 d3 . pop ( 1 ) # d3 = {2: \"Two\"} d . update ( d2 ) # d = {1: 'One', 2: '\u4e8c', 3: '\u4e09'} d = { 1 : 'One' , 2 : '\u4e8c' , 3 : '\u4e09' } for k in d . keys (): print ( k ) # 1 2 3 for v in d . values (): print ( v ) # 'One' '\u4e8c' '\u4e09' for t in d . items (): print ( t ) # (1, 'One') (2, '\u4e8c') (3, '\u4e09') \u7ec3\u4e60 \u8f93\u5165\u4efb\u610f\u4e00\u6bb5\u5b57\u7b26\u4e32,\u6253\u5370\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u8fc7\u7684\u5b57\u7b26\u53ca\u51fa\u73b0\u8fc7\u7684\u6b21\u6570: \u5982: \u8f93\u5165: ABCDABCABA \u6253\u5370\u5982\u4e0b: A: 4\u6b21 B: 3\u6b21 D: 1\u6b21 C: 2\u6b21 \u6ce8: \u4e0d\u8981\u6c42\u6253\u5370\u7684\u987a\u5e8f","title":"\u5b57\u5178\u7684\u65b9\u6cd5"},{"location":"python/python%E5%AD%97%E5%85%B8/#_9","text":"\u662f\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u5b57\u5178\u7684\u8868\u8fbe\u5f0f \u8bed\u6cd5: {\u952e\u8868\u8fbe\u5f0f : \u503c\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61[if \u771f\u503c\u8868\u8fbe\u5f0f]} \u6ce8: []\u8868\u793a\u5176\u4e2d\u7684\u5185\u5bb9\u53ef\u7701\u7565 \u793a\u4f8b: # \u751f\u6210\u4e00\u4e2a\u5b57\u5178,\u952e\u4e3a\u6570\u5b57 1 ~ 9,\u503c\u4e3a\u952e\u7684\u5e73\u65b9 d = {x : x ** 2 for x in range(1, 10)} \u5b57\u5178\u63a8\u5bfc\u5f0f\u7ec3\u4e60 1. \u5df2\u77e5\u6709\u5982\u4e0b\u5b57\u7b26\u4e32\u5217\u8868 L = ['tarena', 'xiaozhang', 'abc'] \u751f\u6210\u5982\u4e0b\u5b57\u5178: d = {'tarena': 6, 'xiaozhang': 9, 'abc': 3} \u6ce8: \u5b57\u5178\u7684\u503c\u4e3a\u952e\u7684\u957f\u5ea6 2. \u5df2\u77e5\u6709\u5982\u4e0b\u4e24\u4e2a\u5217\u8868: nos = [1001, 1002, 1005, 1008] names = ['Tom', 'Jerry', 'Spike', 'Tyke'] \u7528\u4e0a\u8ff0\u4e24\u4e2a\u5217\u8868\u751f\u6210\u5982\u4e0b\u5b57\u5178: {1001: 'Tom', 1002: 'Jerry', 1005: 'Spike', 1008: 'Tyke'} \u5b57\u5178 VS \u5217\u8868 \u90fd\u662f\u53ef\u53d8\u5bf9\u8c61 \u7d22\u5f15\u65b9\u5f0f,\u5217\u8868\u7528\u6574\u6570\u7d22\u5f15,\u5b57\u5178\u7528\u952e\u7d22\u5f15 \u5b57\u5178\u7684\u63d2\u5165,\u5220\u9664,\u4fee\u6539\u7684\u901f\u5ea6\u53ef\u80fd\u4f1a\u5feb\u8fc7 \u5217\u8868(\u91cd\u8981) \u5217\u8868\u7684\u5b58\u50a8\u662f\u6709\u5e8f\u7684,\u5b57\u5178\u7684\u5b58\u50a8\u662f\u65e0\u5e8f\u7684","title":"\u5b57\u5178\u63a8\u5bfc\u5f0f"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"\u5b57\u7b26\u4e32str \u00b6 \u4f5c\u7528 \u7528\u6765\u8bb0\u5f55\u6587\u5b57\u4fe1\u606f \u8868\u793a\u65b9\u6cd5 \u5728\u975e\u6ce8\u91ca\u5f53\u4e2d\u51e1\u662f\u7528\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u90e8\u5206\u90fd\u662f\u5b57\u7b26\u4e32 ' ' \" \" \"\"\" \"\"\" ''' ''' \u7a7a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u8868\u793a\u65b9\u5f0f '' \"\" \"\"\"\"\"\" '''''' \u6ce8 \uff1a \u7a7a\u5b57\u7b26\u4e32\u7684\u5e03\u5c14\u6d4b\u8bd5\u503cbool ( x ) \u4e3a False \u975e\u7a7a\u5b57\u7b26\u4e32\u5b57\u9762\u503c 'Hello' \"hello\" \"\"\"hello\"\"\" '''hello''' \u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u7684\u533a\u522b \u5355\u5f15\u53f7\u5185\u7684\u53cc\u5f15\u53f7\u4e0d\u7b97\u7ed3\u675f\u7b26 \u53cc\u5f15\u53f7\u5185\u7684\u5355\u5f15\u53f7\u4e0d\u7b97\u7ed3\u675f\u7b26 \u793a\u4f8b \uff1a print ( \"I'm a student\" ) \u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 \u4ee5 ''' \u6216\"\"\"\u5f00\u5934 \uff0c \u4ee5''' \u6216 \"\"\"\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32 \u4f5c\u7528 \u4e09\u5f15\u53f7\u5b57\u7b26\u4e32\u4e2d\u7684\u6362\u884c\u7b26\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a' \\n ' \u4e09\u5f15\u53f7\u53ef\u4ee5\u5305\u542b\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7 \u9690\u5f0f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u62fc\u63a5 \u00b6 \"I'am Student.\" 'I am \"YangWenjun\"' # \u5f97\u5230\u7684\u5b57\u7b26\u4e32\u7b49\u540c\u4e8e '''I'am Student.I am \"YangWenjun\"''' \u7528\u8f6c\u4e49\u5e8f\u5217\u4ee3\u8868\u7279\u6b8a\u5b57\u7b26 \u00b6 \u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u7528\u5b57\u7b26\u53cd\u659c\u6760\\\u540e\u8ddf\u4e00\u4e9b\u5b57\u7b26\u4ee3\u8868\u7279\u6b8a\u7684\u4e00\u4e2a\u5b57\u7b26 \u5b57\u7b26\u8868 \\' \u4ee3\u8868\u4e00\u4e2a\u5355\u5f15\u53f7 \\\" \u4ee3\u8868\u4e00\u4e2a\u53cc\u5f15\u53f7 \\n \u4ee3\u8868\u4e00\u4e2a\u6362\u884c\u7b26 \\\\ \u4ee3\u8868\u4e00\u4e2a\u53cd\u659c\u6760 \\r \u8fd4\u56de\u5149\u6807\u81f3\u884c\u9996 \\t \u6c34\u5e73\u5236\u8868\u7b26 \\f \u6362\u9875 \\v \u5782\u76f4\u5236\u8868\u7b26 \\b \u5012\u9000 \\0 \u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u503c\u4e3a0 \\0oo oo\u4e3a\u4e24\u4f4d\u516b\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26 \\xXX XX\u4e3a\u4e24\u4f4d\u5341\u516d\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26 \\uXXXX Unicode 16\u7684\u5341\u516d\u8fdb\u5236\u7684\u5b57\u7b26 \\UXXXXXXXX Unicode 32\u7684\u5341\u516d\u8fdb\u5236\u7684\u5b57\u7b26 ASCII\u7f16\u7801 \u00b6 # \u67e5\u770bASCII\u7f16\u7801\u8868 $ man ascii #\u4ec5linux\u53ef\u7528 \u5e38\u7528\u7684ASCII\u7f16\u7801 \u5b57\u7b26 \u5341\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 '0' 48 0x30 'A' 65 0x41 'a' 97 0x61 \u5e8f\u5217\u7684\u6982\u5ff5 \u00b6 \u5b57\u7b26\u4e32\u5c31\u662f\u5e8f\u5217 # \u6c42\u5e8f\u5217\u7684\u957f\u5ea6\u51fd\u6570 len ( x ) \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u4e2a\u6570 raw \u5b57\u7b26\u4e32\uff08\u539f\u59cb\u5b57\u7b26\u4e32\uff09 \u00b6 \u683c\u5f0f\uff1a r\"\u5b57\u7b26\u4e32\u5185\u5bb9\" r'\u5b57\u7b26\u4e32\u5185\u5bb9' r'''\u5b57\u7b26\u4e32\u5185\u5b58''' r\"\"\"\u5b57\u7b26\u4e32\u5185\u5bb9\"\"\" \u4f5c\u7528\uff1a \u8ba9\u8f6c\u4e49\u5b57\u7b26\u65e0\u6548 \u793a\u4f8b a = 'C:\\newfile\\test.py' print(a) b = r'C:\\newfile\\test.py' print(b) print(len(a)) print(len(b)) \u5b57\u7b26\u4e32\u7684\u8fd0\u7b97 \u00b6 + \u52a0\u53f7\u8fd0\u7b97\u7b26\u7528\u4e8e\u62fc\u63a5\u5b57\u7b26\u4e32 += \u7528\u4e8e\u62fc\u63a5\u8fd0\u7b97\u540e\u6539\u53d8\u539f\u53d8\u91cf\u7684\u7ed1\u5b9a\u5173\u7cfb \u793a\u4f8b x = 'abcd' + 'efg' print(x) #abcdefg x += '123' print(x) #abcdefg123 * \u4e58\u53f7\u8fd0\u7b97\u7b26\u751f\u6210\u91cd\u590d\u7684\u5b57\u7b26\u4e32 x = \"abcd\"*3 #'abcdabcdabcd' y = 2 * '123' #'123123' \u5b57\u7b26\u4e32\u53ea\u80fd\u548c\u6574\u6570\u76f8\u4e58 *= \u751f\u6210\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u5e76\u6539\u53d8\u539f\u53d8\u91cf\u7684\u7ed1\u5b9a\u5173\u7cfb x = '123' x *= 2 #x = '123123' y = 3 y *= 'ABC' #y = 'ABCABCABC' \u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 < <= > >= == != \u793a\u4f8b 'A' < 'B' #True 'AB' <='AC' #True in / not in \u8fd0\u7b97\u7b26 \u00b6 \u4f5c\u7528 in \u7528\u4e8e\u5e8f\u5217\uff0c\u5b57\u5178\uff0c\u96c6\u5408\u4e2d\uff0c\u7528\u4e8e\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u5b58\u5728\u4e8e\u5bb9\u5668\u4e2d\uff0c \u5982\u679c\u5b58\u5728\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse \u8bf4\u660e not in \u8fd4\u56de\u7ed3\u679c\u548c in \u76f8\u53cd \u683c\u5f0f \u5bf9\u8c61 in \u5e8f\u5217 \u793a\u4f8b x = 'welcome to tarena!' 'to' in x #True 'e t' in x #True 'hello' in x #False 'hello' not in x #True \u5b57\u7b26\u4e32\u7d22\u5f15 \u00b6 python \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u4ee5\u6539\u53d8\u7684\u5e8f\u5217\uff0c\u6240\u6709\u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u6765\u83b7\u53d6\u5176\u4e2d\u7684\u6570\u636e\u5143\u7d20 \u8bed\u6cd5 \u5b57\u7b26\u4e32[\u6574\u6570\u8868\u8fbe\u5f0f] \u8bf4\u660e \u5e8f\u5217\u7684\u6b63\u5411\u7d22\u5f15\u662f\u4ece0 \u5f00\u59cb\u7684\uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u4e3a1\uff0c\u6700\u540e\u4e00\u4e2a \u7d22\u5f15\u4e3alen(s) - 1 \u5e8f\u5217\u7684\u53cd\u5411\u7d22\u5f15\u662f\u4ece-1 \u5f00\u59cb\u7684\uff0c-1 \u4ee3\u8868\u6700\u540e\u4e00\u4e2a\uff0c-2\u4ee3\u8868\u5012\u6570\u7b2c\u4e8c\u4e2a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u7b2c\u4e00\u4e2a\u662f-len(s) \u5207\u7247\u64cd\u4f5c slice \u00b6 \u4ece\u5b57\u7b26\u4e32\u5e8f\u5217\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684\u5143\u7d20\u91cd\u65b0\u7ec4\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217 \u8bed\u6cd5 \u5b57\u7b26\u4e32[(\u5f00\u59cb\u7d22\u5f15b):(\u4ecb\u7ecd\u7d22\u5f15e):(\u6b65\u957fs)] \u6ce8\uff1a \u5c0f\u62ec\u53f7\uff08\uff09\u4ee3\u8868\u53ef\u7701\u7565 \u8bf4\u660e 1. \u5f00\u59cb\u7d22\u5f15\u662f\u5207\u7247\u5207\u4e0b\u7684\u4f4d\u7f6e\uff0c0\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c1\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c -1\u4ee3\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20... 2. \u7ed3\u675f\u7d22\u5f15\u662f\u5207\u7247\u7684\u7ec8\u6b62\u7d22\u5f15\uff08\u4f46\u4e0d\u5305\u542b\u7ec8\u6b62\u70b9\uff09 3. \u6b65\u957f\u662f\u5207\u7247\u6bcf\u6b21\u83b7\u53d6\u5b8c\u5f53\u524d\u5143\u7d20\u540e\u79fb\u52a8\u7684\u65b9\u5411\u548c\u504f\u79fb\u91cf \u504f\u79fb\u91cf 3.1 \u6ca1\u6709\u6b65\u957f\uff0c\u76f8\u5e94\u4e8e\u6b65\u957f\u4e3a1\uff08\u9ed8\u8ba4\u4e3a1\uff09 3.2 \u5f53\u6b65\u957f\u4e3a\u6574\u6570\u65f6\uff0c\u53d6\u6b63\u5411\u5207\u7247\uff0c\u5f00\u59cb\u7d22\u5f15\u9ed8\u8ba4\u4e3a0\uff0c\u7ed3\u675f\u7d22\u5f15\u4e3a\u6700\u540e \u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e 3.3 \u5f53\u6b65\u957f\u4e3a\u8d1f\u6570\u65f6\uff0c\u53d6\u53cd\u5411\u5207\u7247\uff0c\u53cd\u5411\u5207\u7247\u65f6\uff0c\u9ed8\u8ba4\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e3a\u6700\u540e \u4e00\u4e2a\u5143\u7d20\uff0c\u7ec8\u6b62\u4f4d\u7f6e\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e \u793a\u4f8b s = 'ABCDE' # \u5b57\u7b26\u4e32\u5012\u5e8f a = s[::-1] print(a) # \u5b57\u7b26\u4e32\u590d\u5236 b = s[:] print(b) python3 \u5f53\u4e2d\u80fd\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u51fd\u6570 \u00b6 len(s) \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 max(x) \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7f16\u7801\u503c\u6700\u5927\u7684\u5b57\u7b26 min(x) \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7f16\u7801\u503c\u6700\u5c0f\u7684\u5b57\u7b26 \u793a\u4f8b s = \"Hello\" len(s) # 5 max(s) # 'o' min(s) # 'H' \u5b57\u7b26\u4e32\u7684\u7f16\u7801\u8f6c\u6362\u51fd\u6570 \u00b6 ord(c) \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u7684Unicode\u503c chr(i) \u8fd4\u56dei\u8fd9\u4e2a\u503c\u6240\u5bf9\u5e94\u7684 \u5b57\u7b26 \u793a\u4f8b print(ord('A')) #65 print(ord('\u4e2d')) #\uff1f\uff1f\uff1f print(chr('65')) #A print(chr('2345')) #??? \u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u51fd\u6570 \u00b6 bin(i) \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 (binary) oct(i) \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u516b\u8fdb\u5236\u5b57\u7b26\u4e32 hex(i) \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u7684\u6784\u9020\u51fd\u6570 \u00b6 str(obj=\"\") \u5c06\u5bf9\u8c61\u8f6c\u4e3a\u5b57\u7b26\u4e32 \u5e2e\u52a9\u51fd\u6570help(xxx) \u00b6 >>> help(\u51fd\u6570\u540d) >>> help(\u7c7b\u578b\u540d) python3\u4e2d\u5e38\u7528\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5 \u00b6 \u65b9\u6cd5\u7684\u8c03\u7528\u8bed\u6cd5 \u5bf9\u8c61.\u65b9\u6cd5\u540d(\u53c2\u6570) \u793a\u4f8b \"abc\".isalpha() #True\u5224\u65ad'abc'\u662f\u5426\u662f\u5b57\u6bcd 123.isalpha() #\u62a5\u9519 S.isdigit() \u5224\u65ad\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u662f\u5426\u5168\u4e3a\u6570\u5b57 S.isalpha() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u82f1\u6587\u5b57\u6bcd S.islower() \u5224\u65ad\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u662f\u5426\u5168\u4e3a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd S.isupper() \u5224\u65ad\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u662f\u5426\u5168\u4e3a\u5927\u5199\u82f1\u6587\u5b57\u6bcd S.isspace() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u7a7a\u767d\u5b57\u7b26 S.center(width[,fill]) \u5c06\u539f\u5b57\u7b26\u4e32\u5c45\u4e2d\uff0c\u5de6\u53f3\u9ed8\u8ba4\u586b\u5145\u7a7a\u683c s.center(20) s.center(20,\"#\") S.count(sub[, start[,end]]) \u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u5b50\u4e32\u7684\u4e2a\u6570 s = \"ABCD ABC AB A\" s.count('AB') s.count('AB',3) s.count('A',3,8) S.find(sub[, start[,end]]) \u83b7\u53d6\u5b57\u7b26\u4e32\u4e2d\u5b50\u4e32sub\u7684\u7d22\u5f15,\u5931\u8d25\u8fd4\u56de-1 s .find('A') s .find('A',3) s .find('A',3,8) S.strip([chars]) \u8fd4\u56de\u53bb\u6389\u5de6\u53f3char\u5b57\u7b26\u7684\u5b57\u7b26\u4e32(\u9ed8\u8ba4char\u4e3a\u7a7a\u767d\u5b57\u7b26) s.strip() s.strip('@') s.lstrip() s.rstrip() S.lstrip([chars]) \u8fd4\u56de\u53bb\u6389\u5de6\u4fa7char\u5b57\u7b26\u7684\u5b57\u7b26\u4e32(\u9ed8\u8ba4char\u4e3a\u7a7a\u767d\u5b57\u7b26) S.rstrip([chars]) \u8fd4\u56de\u53bb\u6389\u53f3\u4fa7char\u5b57\u7b26\u7684\u5b57\u7b26\u4e32(\u9ed8\u8ba4char\u4e3a\u7a7a\u767d\u5b57\u7b26) S.upper() \u751f\u6210\u5c06\u82f1\u6587\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u5b57\u7b26\u4e32 S.lower() \u751f\u6210\u5c06\u82f1\u6587\u8f6c\u6362\u4e3a\u5c0f\u5199\u7684\u5b57\u7b26\u4e32 S.replace(old, new[, count]) \u5c06\u539f\u5b57\u7b26\u4e32\u7684old\u7528new\u4ee3\u66ff\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 S.startswith(prefix[, start[, end]]) \u8fd4\u56deS\u662f\u5426\u662f\u4ee5prefix\u5f00\u5934\uff0c\u5982\u679c\u4ee5prefix\u5f00\u5934\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56deFalse, S.endswith(suffix[, start[, end]]) \u8fd4\u56deS\u662f\u5426\u662f\u4ee5suffix\u7ed3\u5c3e\uff0c\u5982\u679c\u4ee5suffix\u7ed3\u5c3e\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56deFalse \u4ee5\u4e0b\u662f\u4e0d\u5e38\u7528\u7684 S.title() \u751f\u6210\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\u5b57\u7b26\u4e32 S.isnumeric() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u6570\u5b57\u5b57\u7b26 \u7a7a\u767d\u5b57\u7b26 \u00b6 \u662f\u6307\u7a7a\u683c,\u6c34\u5e73\u5236\u8868\u7b26(\\t),\u6362\u884c\u7b26(\\n)\u7b49\u4e0d\u53ef\u89c1\u7684\u5b57\u7b26 \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u8868\u8fbe\u5f0f \u00b6 \u4f5c\u7528 \u751f\u6210\u4e00\u5b9a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 \u8fd0\u7b97\u7b26 % \u8bed\u6cd5\u683c\u5f0f \u683c\u5f0f\u5b57\u7b26\u4e32 % \u53c2\u6570\u503c \u683c\u5f0f\u5b57\u7b26\u4e32 % \uff08\u53c2\u6570\u503c1\uff0c \u53c2\u6570\u503c2\uff0c ...\uff09 \u8bf4\u660e % \u5de6\u4fa7\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c % \u53f3\u4fa7\u4e3a\u53c2\u6570\u503c\uff0c\u5f53\u6709\u591a\u4e2a\u53c2\u6570\u503c\u662f\u7528\u62ec\u53f7\uff08\uff09\u62ec\u8d77\u6765\uff0c\u5e76\u7528\u9017\u53f7\uff08,\uff09\u5206\u9694 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u4ee5% \u5f00\u5934\u7684\u4e3a\u5360\u4f4d\u7b26\uff0c\u5360\u4f4d\u7b26\u7684\u4f4d\u7f6e\u5c06\u7528\u53c2\u6570\u503c\u66ff\u6362 \u793a\u4f8b fmt = 'name: %s, age\uff1a % d' s = fmt % ('yangwenjun','22') print(s) \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u5360\u4f4d\u7b26\u548c\u7c7b\u578b\u7801 \u00b6 %s \u5b57\u7b26\u4e32\uff0c\u4f7f\u7528str(x)\u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 %r \u5b57\u7b26\u4e32\uff0c\u4f7f\u7528repr(x)\u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 repr \u5c06 x\u8f6c\u6362\u4e3a\u8868\u8fbe\u5f0f %c \u6574\u6570\u8f6c\u4e3a\u5355\u4e2a\u5b57\u7b26 %d \u8f6c\u4e3a\u5341\u8fdb\u5236\u6574\u6570 %o \u8f6c\u4e3a\u516b\u8fdb\u5236\u6574\u6570 %x \u5341\u516d\u8fdb\u5236\u6574\u6570\uff08\u5b57\u7b26a-f\u5c0f\u5199\uff09 %X \u5341\u516d\u8fdb\u5236\u6574\u6570\uff08\u5b57\u7b26A-F\u5927\u5199\uff09 %e \u6307\u6570\u578b\u6d6e\u70b9\u6570\uff08e\u5c0f\u5199\uff09\uff0c\u59822.9e+10 %E \u6307\u6570\u578b\u6d6e\u70b9\u6570\uff08E\u5c0f\u5199\uff09\uff0c\u59822.9E+10 %f, %F \u6d6e\u70b9\u6570\uff08\u5c0f\u6570\u5f62\u5f0f\uff09 %g, %G \u5341\u8fdb\u5236\u6d6e\u70b9\u6570\u6216\u6307\u6570\u6d6e\u70b9\u6570\u81ea\u52a8\u8f6c\u6362 %% \u7b49\u540c\u4e8e\u4e00\u4e2a%\u5b57\u7b26 \u5360\u4f4d\u7b26\u548c\u7c7b\u578b\u7801\u4e4b\u95f4\u7684\u683c\u5f0f\u5316\u8bed\u6cd5 \u00b6 % [- + 0 \u5bbd\u5ea6 \u7cbe\u5ea6] \u7c7b\u578b\u7801 - : \u5de6\u5bf9\u9f50 + : \u663e\u793a\u6b63\u53f7 0 : \u5de6\u4fa7\u7a7a\u767d\u4f4d\u7f6e\u8865\u96f6 \u5bbd\u5ea6: \u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e2a\u6570 \u7cbe\u5ea6: \u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u591a\u5c11\u4f4d\uff08\u9ed8\u8ba46\u4f4d\uff09 \u793a\u4f8b \"%10d\" % 123 #' 123' \"%+10d\" % 123 #' +123' '%-10d' % 123 #'123 ' '%10s' % 'abc' #' abc' '%-5s' % 'abc' #'abc ' '%010d' % '123' #'0000000123' '%7.3f' % '3.141592535897932' #' 3.141' '%07.2f' % '3.141592535897932' #'0003.14'","title":"3. \u5b57\u7b26\u4e32"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#str","text":"\u4f5c\u7528 \u7528\u6765\u8bb0\u5f55\u6587\u5b57\u4fe1\u606f \u8868\u793a\u65b9\u6cd5 \u5728\u975e\u6ce8\u91ca\u5f53\u4e2d\u51e1\u662f\u7528\u5f15\u53f7\u62ec\u8d77\u6765\u7684\u90e8\u5206\u90fd\u662f\u5b57\u7b26\u4e32 ' ' \" \" \"\"\" \"\"\" ''' ''' \u7a7a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u8868\u793a\u65b9\u5f0f '' \"\" \"\"\"\"\"\" '''''' \u6ce8 \uff1a \u7a7a\u5b57\u7b26\u4e32\u7684\u5e03\u5c14\u6d4b\u8bd5\u503cbool ( x ) \u4e3a False \u975e\u7a7a\u5b57\u7b26\u4e32\u5b57\u9762\u503c 'Hello' \"hello\" \"\"\"hello\"\"\" '''hello''' \u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u7684\u533a\u522b \u5355\u5f15\u53f7\u5185\u7684\u53cc\u5f15\u53f7\u4e0d\u7b97\u7ed3\u675f\u7b26 \u53cc\u5f15\u53f7\u5185\u7684\u5355\u5f15\u53f7\u4e0d\u7b97\u7ed3\u675f\u7b26 \u793a\u4f8b \uff1a print ( \"I'm a student\" ) \u4e09\u5f15\u53f7\u5b57\u7b26\u4e32 \u4ee5 ''' \u6216\"\"\"\u5f00\u5934 \uff0c \u4ee5''' \u6216 \"\"\"\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32 \u4f5c\u7528 \u4e09\u5f15\u53f7\u5b57\u7b26\u4e32\u4e2d\u7684\u6362\u884c\u7b26\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a' \\n ' \u4e09\u5f15\u53f7\u53ef\u4ee5\u5305\u542b\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7","title":"\u5b57\u7b26\u4e32str"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_1","text":"\"I'am Student.\" 'I am \"YangWenjun\"' # \u5f97\u5230\u7684\u5b57\u7b26\u4e32\u7b49\u540c\u4e8e '''I'am Student.I am \"YangWenjun\"'''","title":"\u9690\u5f0f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u62fc\u63a5"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","text":"\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u7528\u5b57\u7b26\u53cd\u659c\u6760\\\u540e\u8ddf\u4e00\u4e9b\u5b57\u7b26\u4ee3\u8868\u7279\u6b8a\u7684\u4e00\u4e2a\u5b57\u7b26 \u5b57\u7b26\u8868 \\' \u4ee3\u8868\u4e00\u4e2a\u5355\u5f15\u53f7 \\\" \u4ee3\u8868\u4e00\u4e2a\u53cc\u5f15\u53f7 \\n \u4ee3\u8868\u4e00\u4e2a\u6362\u884c\u7b26 \\\\ \u4ee3\u8868\u4e00\u4e2a\u53cd\u659c\u6760 \\r \u8fd4\u56de\u5149\u6807\u81f3\u884c\u9996 \\t \u6c34\u5e73\u5236\u8868\u7b26 \\f \u6362\u9875 \\v \u5782\u76f4\u5236\u8868\u7b26 \\b \u5012\u9000 \\0 \u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u503c\u4e3a0 \\0oo oo\u4e3a\u4e24\u4f4d\u516b\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26 \\xXX XX\u4e3a\u4e24\u4f4d\u5341\u516d\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26 \\uXXXX Unicode 16\u7684\u5341\u516d\u8fdb\u5236\u7684\u5b57\u7b26 \\UXXXXXXXX Unicode 32\u7684\u5341\u516d\u8fdb\u5236\u7684\u5b57\u7b26","title":"\u7528\u8f6c\u4e49\u5e8f\u5217\u4ee3\u8868\u7279\u6b8a\u5b57\u7b26"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#ascii","text":"# \u67e5\u770bASCII\u7f16\u7801\u8868 $ man ascii #\u4ec5linux\u53ef\u7528 \u5e38\u7528\u7684ASCII\u7f16\u7801 \u5b57\u7b26 \u5341\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 '0' 48 0x30 'A' 65 0x41 'a' 97 0x61","title":"ASCII\u7f16\u7801"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_3","text":"\u5b57\u7b26\u4e32\u5c31\u662f\u5e8f\u5217 # \u6c42\u5e8f\u5217\u7684\u957f\u5ea6\u51fd\u6570 len ( x ) \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u4e2a\u6570","title":"\u5e8f\u5217\u7684\u6982\u5ff5"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#raw","text":"\u683c\u5f0f\uff1a r\"\u5b57\u7b26\u4e32\u5185\u5bb9\" r'\u5b57\u7b26\u4e32\u5185\u5bb9' r'''\u5b57\u7b26\u4e32\u5185\u5b58''' r\"\"\"\u5b57\u7b26\u4e32\u5185\u5bb9\"\"\" \u4f5c\u7528\uff1a \u8ba9\u8f6c\u4e49\u5b57\u7b26\u65e0\u6548 \u793a\u4f8b a = 'C:\\newfile\\test.py' print(a) b = r'C:\\newfile\\test.py' print(b) print(len(a)) print(len(b))","title":"raw \u5b57\u7b26\u4e32\uff08\u539f\u59cb\u5b57\u7b26\u4e32\uff09"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_4","text":"+ \u52a0\u53f7\u8fd0\u7b97\u7b26\u7528\u4e8e\u62fc\u63a5\u5b57\u7b26\u4e32 += \u7528\u4e8e\u62fc\u63a5\u8fd0\u7b97\u540e\u6539\u53d8\u539f\u53d8\u91cf\u7684\u7ed1\u5b9a\u5173\u7cfb \u793a\u4f8b x = 'abcd' + 'efg' print(x) #abcdefg x += '123' print(x) #abcdefg123 * \u4e58\u53f7\u8fd0\u7b97\u7b26\u751f\u6210\u91cd\u590d\u7684\u5b57\u7b26\u4e32 x = \"abcd\"*3 #'abcdabcdabcd' y = 2 * '123' #'123123' \u5b57\u7b26\u4e32\u53ea\u80fd\u548c\u6574\u6570\u76f8\u4e58 *= \u751f\u6210\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u5e76\u6539\u53d8\u539f\u53d8\u91cf\u7684\u7ed1\u5b9a\u5173\u7cfb x = '123' x *= 2 #x = '123123' y = 3 y *= 'ABC' #y = 'ABCABCABC'","title":"\u5b57\u7b26\u4e32\u7684\u8fd0\u7b97"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_5","text":"\u8fd0\u7b97\u7b26 < <= > >= == != \u793a\u4f8b 'A' < 'B' #True 'AB' <='AC' #True","title":"\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u8fd0\u7b97"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#in-not-in","text":"\u4f5c\u7528 in \u7528\u4e8e\u5e8f\u5217\uff0c\u5b57\u5178\uff0c\u96c6\u5408\u4e2d\uff0c\u7528\u4e8e\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u5b58\u5728\u4e8e\u5bb9\u5668\u4e2d\uff0c \u5982\u679c\u5b58\u5728\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse \u8bf4\u660e not in \u8fd4\u56de\u7ed3\u679c\u548c in \u76f8\u53cd \u683c\u5f0f \u5bf9\u8c61 in \u5e8f\u5217 \u793a\u4f8b x = 'welcome to tarena!' 'to' in x #True 'e t' in x #True 'hello' in x #False 'hello' not in x #True","title":"in / not in \u8fd0\u7b97\u7b26"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_6","text":"python \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u4ee5\u6539\u53d8\u7684\u5e8f\u5217\uff0c\u6240\u6709\u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u901a\u8fc7\u7d22\u5f15\u6765\u83b7\u53d6\u5176\u4e2d\u7684\u6570\u636e\u5143\u7d20 \u8bed\u6cd5 \u5b57\u7b26\u4e32[\u6574\u6570\u8868\u8fbe\u5f0f] \u8bf4\u660e \u5e8f\u5217\u7684\u6b63\u5411\u7d22\u5f15\u662f\u4ece0 \u5f00\u59cb\u7684\uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u4e3a1\uff0c\u6700\u540e\u4e00\u4e2a \u7d22\u5f15\u4e3alen(s) - 1 \u5e8f\u5217\u7684\u53cd\u5411\u7d22\u5f15\u662f\u4ece-1 \u5f00\u59cb\u7684\uff0c-1 \u4ee3\u8868\u6700\u540e\u4e00\u4e2a\uff0c-2\u4ee3\u8868\u5012\u6570\u7b2c\u4e8c\u4e2a\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u7b2c\u4e00\u4e2a\u662f-len(s)","title":"\u5b57\u7b26\u4e32\u7d22\u5f15"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#slice","text":"\u4ece\u5b57\u7b26\u4e32\u5e8f\u5217\u4e2d\u53d6\u51fa\u76f8\u5e94\u7684\u5143\u7d20\u91cd\u65b0\u7ec4\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217 \u8bed\u6cd5 \u5b57\u7b26\u4e32[(\u5f00\u59cb\u7d22\u5f15b):(\u4ecb\u7ecd\u7d22\u5f15e):(\u6b65\u957fs)] \u6ce8\uff1a \u5c0f\u62ec\u53f7\uff08\uff09\u4ee3\u8868\u53ef\u7701\u7565 \u8bf4\u660e 1. \u5f00\u59cb\u7d22\u5f15\u662f\u5207\u7247\u5207\u4e0b\u7684\u4f4d\u7f6e\uff0c0\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c1\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c -1\u4ee3\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20... 2. \u7ed3\u675f\u7d22\u5f15\u662f\u5207\u7247\u7684\u7ec8\u6b62\u7d22\u5f15\uff08\u4f46\u4e0d\u5305\u542b\u7ec8\u6b62\u70b9\uff09 3. \u6b65\u957f\u662f\u5207\u7247\u6bcf\u6b21\u83b7\u53d6\u5b8c\u5f53\u524d\u5143\u7d20\u540e\u79fb\u52a8\u7684\u65b9\u5411\u548c\u504f\u79fb\u91cf \u504f\u79fb\u91cf 3.1 \u6ca1\u6709\u6b65\u957f\uff0c\u76f8\u5e94\u4e8e\u6b65\u957f\u4e3a1\uff08\u9ed8\u8ba4\u4e3a1\uff09 3.2 \u5f53\u6b65\u957f\u4e3a\u6574\u6570\u65f6\uff0c\u53d6\u6b63\u5411\u5207\u7247\uff0c\u5f00\u59cb\u7d22\u5f15\u9ed8\u8ba4\u4e3a0\uff0c\u7ed3\u675f\u7d22\u5f15\u4e3a\u6700\u540e \u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e 3.3 \u5f53\u6b65\u957f\u4e3a\u8d1f\u6570\u65f6\uff0c\u53d6\u53cd\u5411\u5207\u7247\uff0c\u53cd\u5411\u5207\u7247\u65f6\uff0c\u9ed8\u8ba4\u7684\u8d77\u59cb\u4f4d\u7f6e\u4e3a\u6700\u540e \u4e00\u4e2a\u5143\u7d20\uff0c\u7ec8\u6b62\u4f4d\u7f6e\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e \u793a\u4f8b s = 'ABCDE' # \u5b57\u7b26\u4e32\u5012\u5e8f a = s[::-1] print(a) # \u5b57\u7b26\u4e32\u590d\u5236 b = s[:] print(b)","title":"\u5207\u7247\u64cd\u4f5c slice"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#python3","text":"len(s) \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 max(x) \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7f16\u7801\u503c\u6700\u5927\u7684\u5b57\u7b26 min(x) \u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u7f16\u7801\u503c\u6700\u5c0f\u7684\u5b57\u7b26 \u793a\u4f8b s = \"Hello\" len(s) # 5 max(s) # 'o' min(s) # 'H'","title":"python3 \u5f53\u4e2d\u80fd\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u51fd\u6570"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_7","text":"ord(c) \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u7684Unicode\u503c chr(i) \u8fd4\u56dei\u8fd9\u4e2a\u503c\u6240\u5bf9\u5e94\u7684 \u5b57\u7b26 \u793a\u4f8b print(ord('A')) #65 print(ord('\u4e2d')) #\uff1f\uff1f\uff1f print(chr('65')) #A print(chr('2345')) #???","title":"\u5b57\u7b26\u4e32\u7684\u7f16\u7801\u8f6c\u6362\u51fd\u6570"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_8","text":"bin(i) \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 (binary) oct(i) \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u516b\u8fdb\u5236\u5b57\u7b26\u4e32 hex(i) \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32","title":"\u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u51fd\u6570"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_9","text":"str(obj=\"\") \u5c06\u5bf9\u8c61\u8f6c\u4e3a\u5b57\u7b26\u4e32","title":"\u5b57\u7b26\u4e32\u7684\u6784\u9020\u51fd\u6570"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#helpxxx","text":">>> help(\u51fd\u6570\u540d) >>> help(\u7c7b\u578b\u540d)","title":"\u5e2e\u52a9\u51fd\u6570help(xxx)"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#python3_1","text":"\u65b9\u6cd5\u7684\u8c03\u7528\u8bed\u6cd5 \u5bf9\u8c61.\u65b9\u6cd5\u540d(\u53c2\u6570) \u793a\u4f8b \"abc\".isalpha() #True\u5224\u65ad'abc'\u662f\u5426\u662f\u5b57\u6bcd 123.isalpha() #\u62a5\u9519 S.isdigit() \u5224\u65ad\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u662f\u5426\u5168\u4e3a\u6570\u5b57 S.isalpha() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u82f1\u6587\u5b57\u6bcd S.islower() \u5224\u65ad\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u662f\u5426\u5168\u4e3a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd S.isupper() \u5224\u65ad\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u662f\u5426\u5168\u4e3a\u5927\u5199\u82f1\u6587\u5b57\u6bcd S.isspace() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u7a7a\u767d\u5b57\u7b26 S.center(width[,fill]) \u5c06\u539f\u5b57\u7b26\u4e32\u5c45\u4e2d\uff0c\u5de6\u53f3\u9ed8\u8ba4\u586b\u5145\u7a7a\u683c s.center(20) s.center(20,\"#\") S.count(sub[, start[,end]]) \u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u5b50\u4e32\u7684\u4e2a\u6570 s = \"ABCD ABC AB A\" s.count('AB') s.count('AB',3) s.count('A',3,8) S.find(sub[, start[,end]]) \u83b7\u53d6\u5b57\u7b26\u4e32\u4e2d\u5b50\u4e32sub\u7684\u7d22\u5f15,\u5931\u8d25\u8fd4\u56de-1 s .find('A') s .find('A',3) s .find('A',3,8) S.strip([chars]) \u8fd4\u56de\u53bb\u6389\u5de6\u53f3char\u5b57\u7b26\u7684\u5b57\u7b26\u4e32(\u9ed8\u8ba4char\u4e3a\u7a7a\u767d\u5b57\u7b26) s.strip() s.strip('@') s.lstrip() s.rstrip() S.lstrip([chars]) \u8fd4\u56de\u53bb\u6389\u5de6\u4fa7char\u5b57\u7b26\u7684\u5b57\u7b26\u4e32(\u9ed8\u8ba4char\u4e3a\u7a7a\u767d\u5b57\u7b26) S.rstrip([chars]) \u8fd4\u56de\u53bb\u6389\u53f3\u4fa7char\u5b57\u7b26\u7684\u5b57\u7b26\u4e32(\u9ed8\u8ba4char\u4e3a\u7a7a\u767d\u5b57\u7b26) S.upper() \u751f\u6210\u5c06\u82f1\u6587\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u5b57\u7b26\u4e32 S.lower() \u751f\u6210\u5c06\u82f1\u6587\u8f6c\u6362\u4e3a\u5c0f\u5199\u7684\u5b57\u7b26\u4e32 S.replace(old, new[, count]) \u5c06\u539f\u5b57\u7b26\u4e32\u7684old\u7528new\u4ee3\u66ff\uff0c\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 S.startswith(prefix[, start[, end]]) \u8fd4\u56deS\u662f\u5426\u662f\u4ee5prefix\u5f00\u5934\uff0c\u5982\u679c\u4ee5prefix\u5f00\u5934\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56deFalse, S.endswith(suffix[, start[, end]]) \u8fd4\u56deS\u662f\u5426\u662f\u4ee5suffix\u7ed3\u5c3e\uff0c\u5982\u679c\u4ee5suffix\u7ed3\u5c3e\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56deFalse \u4ee5\u4e0b\u662f\u4e0d\u5e38\u7528\u7684 S.title() \u751f\u6210\u6bcf\u4e2a\u82f1\u6587\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u5927\u5199\u5b57\u7b26\u4e32 S.isnumeric() \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u5168\u4e3a\u6570\u5b57\u5b57\u7b26","title":"python3\u4e2d\u5e38\u7528\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_10","text":"\u662f\u6307\u7a7a\u683c,\u6c34\u5e73\u5236\u8868\u7b26(\\t),\u6362\u884c\u7b26(\\n)\u7b49\u4e0d\u53ef\u89c1\u7684\u5b57\u7b26","title":"\u7a7a\u767d\u5b57\u7b26"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_11","text":"\u4f5c\u7528 \u751f\u6210\u4e00\u5b9a\u683c\u5f0f\u7684\u5b57\u7b26\u4e32 \u8fd0\u7b97\u7b26 % \u8bed\u6cd5\u683c\u5f0f \u683c\u5f0f\u5b57\u7b26\u4e32 % \u53c2\u6570\u503c \u683c\u5f0f\u5b57\u7b26\u4e32 % \uff08\u53c2\u6570\u503c1\uff0c \u53c2\u6570\u503c2\uff0c ...\uff09 \u8bf4\u660e % \u5de6\u4fa7\u4e3a\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c % \u53f3\u4fa7\u4e3a\u53c2\u6570\u503c\uff0c\u5f53\u6709\u591a\u4e2a\u53c2\u6570\u503c\u662f\u7528\u62ec\u53f7\uff08\uff09\u62ec\u8d77\u6765\uff0c\u5e76\u7528\u9017\u53f7\uff08,\uff09\u5206\u9694 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u4ee5% \u5f00\u5934\u7684\u4e3a\u5360\u4f4d\u7b26\uff0c\u5360\u4f4d\u7b26\u7684\u4f4d\u7f6e\u5c06\u7528\u53c2\u6570\u503c\u66ff\u6362 \u793a\u4f8b fmt = 'name: %s, age\uff1a % d' s = fmt % ('yangwenjun','22') print(s)","title":"\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u8868\u8fbe\u5f0f"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_12","text":"%s \u5b57\u7b26\u4e32\uff0c\u4f7f\u7528str(x)\u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 %r \u5b57\u7b26\u4e32\uff0c\u4f7f\u7528repr(x)\u5c06x\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 repr \u5c06 x\u8f6c\u6362\u4e3a\u8868\u8fbe\u5f0f %c \u6574\u6570\u8f6c\u4e3a\u5355\u4e2a\u5b57\u7b26 %d \u8f6c\u4e3a\u5341\u8fdb\u5236\u6574\u6570 %o \u8f6c\u4e3a\u516b\u8fdb\u5236\u6574\u6570 %x \u5341\u516d\u8fdb\u5236\u6574\u6570\uff08\u5b57\u7b26a-f\u5c0f\u5199\uff09 %X \u5341\u516d\u8fdb\u5236\u6574\u6570\uff08\u5b57\u7b26A-F\u5927\u5199\uff09 %e \u6307\u6570\u578b\u6d6e\u70b9\u6570\uff08e\u5c0f\u5199\uff09\uff0c\u59822.9e+10 %E \u6307\u6570\u578b\u6d6e\u70b9\u6570\uff08E\u5c0f\u5199\uff09\uff0c\u59822.9E+10 %f, %F \u6d6e\u70b9\u6570\uff08\u5c0f\u6570\u5f62\u5f0f\uff09 %g, %G \u5341\u8fdb\u5236\u6d6e\u70b9\u6570\u6216\u6307\u6570\u6d6e\u70b9\u6570\u81ea\u52a8\u8f6c\u6362 %% \u7b49\u540c\u4e8e\u4e00\u4e2a%\u5b57\u7b26","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u5360\u4f4d\u7b26\u548c\u7c7b\u578b\u7801"},{"location":"python/python%E5%AD%97%E7%AC%A6%E4%B8%B2/#_13","text":"% [- + 0 \u5bbd\u5ea6 \u7cbe\u5ea6] \u7c7b\u578b\u7801 - : \u5de6\u5bf9\u9f50 + : \u663e\u793a\u6b63\u53f7 0 : \u5de6\u4fa7\u7a7a\u767d\u4f4d\u7f6e\u8865\u96f6 \u5bbd\u5ea6: \u6574\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e2a\u6570 \u7cbe\u5ea6: \u4fdd\u7559\u5c0f\u6570\u70b9\u540e\u591a\u5c11\u4f4d\uff08\u9ed8\u8ba46\u4f4d\uff09 \u793a\u4f8b \"%10d\" % 123 #' 123' \"%+10d\" % 123 #' +123' '%-10d' % 123 #'123 ' '%10s' % 'abc' #' abc' '%-5s' % 'abc' #'abc ' '%010d' % '123' #'0000000123' '%7.3f' % '3.141592535897932' #' 3.141' '%07.2f' % '3.141592535897932' #'0003.14'","title":"\u5360\u4f4d\u7b26\u548c\u7c7b\u578b\u7801\u4e4b\u95f4\u7684\u683c\u5f0f\u5316\u8bed\u6cd5"},{"location":"python/python%E5%AE%9E%E7%8E%B0MD5%E5%8A%A0%E5%AF%86/","text":"def md5 ( string ): import hashlib import time ctime = str ( time . time ()) # \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u8f6c\u4e3a\u5b57\u7b26\u4e32 m = hashlib . md5 ( bytes ( string , encoding = \"utf-8\" )) m . update ( bytes ( ctime , encoding = 'utf-8' )) return m . hexdigest () if __name__ == '__main__' : print ( md5 ( '\u8981\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32' ))","title":"python\u5b9e\u73b0MD5\u52a0\u5bc6"},{"location":"python/python%E5%BC%82%E5%B8%B8/","text":"\u5f02\u5e38 exception \u00b6 \u4ec0\u4e48\u662f\u9519\u8bef \u9519\u8bef\u662f\u6307\u7531\u4e8e\u903b\u8f91\u6216\u8bed\u6cd5\u7b49\u5bfc\u81f4\u4e00\u4e2a\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u6267\u884c\u7684\u95ee\u9898 \u4ec0\u4e48\u662f\u5f02\u5e38 \u5f02\u5e38\u662f\u6307\u7a0b\u5e8f\u51fa\u9519\u65f6\u6807\u8bc6\u7684\u4e00\u79cd\u72b6\u6001 \u5f53\u5f02\u5e38\u53d1\u751f\u65f6\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u518d\u5411\u4e0b\u6267\u884c\uff0c\u800c\u8f6c\u53bb\u8c03\u7528\u6b64\u51fd\u6570\u7684\u5730\u65b9\u5f85\u5904\u7406\u6b64\u9519\u8bef\u5e76\u6062\u590d\u4e3a\u6b63\u5e38\u72b6\u6001 \u4f5c\u7528 \u7528\u4f5c\u4fe1\u53f7\uff0c\u901a\u77e5\u4e0a\u5c42\u8c03\u7528\u8005\u6709\u9519\u8bef\u4ea7\u751f\u9700\u8981\u5904\u7406 \u5f02\u5e38\u5904\u7406\u8bed\u53e5 try-except\u8bed\u53e5 try-finally\u8bed\u53e5 try-except\u8bed\u53e5 \u00b6 \u8bed\u6cd5 try: \u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\u7684\u8bed\u53e5 except \u9519\u8bef\u7c7b\u578b1 [as \u53d8\u91cf1]: \u5f02\u5e38\u5904\u7406\u8bed\u53e51 except \u9519\u8bef\u7c7b\u578b2 [as \u53d8\u91cf2]: \u5f02\u5e38\u5904\u7406\u8bed\u53e52 except(\u9519\u8bef\u7c7b\u578b3\uff0c\u9519\u8bef\u7c7b\u578b4): \u5f02\u5e38\u5904\u7406\u8bed\u53e53 ... except: \u5f02\u5e38\u5904\u7406\u8bed\u53e5other else: \u672a\u53d1\u751f\u5f02\u5e38\u7684\u8bed\u53e5 finally: \u6700\u7ec8\u8bed\u53e5 \u4f5c\u7528 \u5c1d\u8bd5\u6355\u83b7\u5f02\u5e38\uff08\u63a5\u53d7\u5f02\u5e38\u901a\u77e5\uff09\uff0c\u5c06\u7a0b\u5e8f\u8f6c\u4e3a\u6b63\u5e38\u72b6\u6001\u5e76\u7ee7\u7eed\u6267\u884c \u8bed\u6cd5\u8bf4\u660e as \u5b50\u53e5\u662f\u7528\u4e8e\u7ed1\u5b9a\u9519\u8bef\u5bf9\u8c61\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u7701\u7565 except \u5b50\u53e5\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u4f46\u81f3\u5c11\u8981\u6709\u4e00\u4e2a else \u5b50\u53e5\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565\u4e0d\u5199 finally \u5b50\u53e5\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565\u4e0d\u5199 def div_apple ( n ): print ( ' %d \u4e2a\u82f9\u679c\u60a8\u60f3\u5206\u7ed9\u51e0\u4e2a\u4eba?' % n ) s = input ( '\u8bf7\u8f93\u5165\u4eba\u6570\uff1a' ) cnt = int ( s ) # <<- \u53ef\u80fd\u89e6\u53d1ValueError\u9519\u8bef\u8fdb\u5165\u5f02\u5e38 result = n / cnt # <<-- \u53ef\u80fd\u89e6\u53d1ZeroDivisionError \u9519\u8bef print ( '\u6bcf\u4e2a\u4eba\u5206\u4e86' , result , '\u4e2a\u82f9\u679c' ) try : div_apple ( 10 ) print ( '\u5206\u82f9\u679c\u5b8c\u6210' ) except ValueError : print ( '\u5728try\u7684\u5185\u90e8\u8bed\u53e5\u4e2d\u53d1\u751f\u4e86\u503c\u9519\u8bef\uff0c\u5df2\u5904\u7406\u5e76\u8f6c\u4e3a\u6b63\u5e38\u72b6\u6001' ) except ZeroDivisionError : print ( '\u8f93\u5165\u4eba\u6570\u4e3a0\uff0c\u5206\u82f9\u679c\u5931\u8d25' ) print ( '\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa' ) \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570\uff0cget_score() \u6765\u83b7\u53d6\u5b66\u751f\u8f93\u5165\u7684\u6210\u7ee9\uff080-100\u7684\u6574\u6570\uff09 \u5982\u679c\u8f93\u5165\u51fa\u73b0\u5f02\u5e38\uff0c\u5219\u8ba9\u6b64\u51fd\u6570\u8fd4\u56de0\uff0c \u5426\u5219\u8fd4\u56de\u7528\u6237\u8f93\u5165\u7684\u6210\u7ee9 try-finally \u8bed\u53e5 \u00b6 \u8bed\u6cd5 try: \u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\u7684\u8bed\u53e5 finally: \u6700\u7ec8\u8bed\u53e5 \u8bf4\u660e finally\u5b50\u53e5\u4e0d\u53ef\u4ee5\u7701\u7565 \u4e00\u5b9a\u4e0d\u5b58\u5728except\u5b50\u53e5 \u4f5c\u7528 \u901a\u5e38\u7528try-finally \u8bed\u53e5\u6765\u505a\u89e6\u53d1\u5f02\u5e38\u65f6\u5fc5\u987b\u8981\u5904\u7406\u7684\u4e8b\u60c5\uff0c\u65e0\u8bba\u5f02\u5e38\u662f\u5426\u53d1\u751f\uff0cfinally\u5b50\u53e5\u90fd\u4f1a\u88ab\u6267\u884c try-finally \u8bed\u53e5\u4e0d\u4f1a\u6539\u53d8\u7a0b\u5e8f\u7684\uff08\u6b63\u5e38/\u5f02\u5e38\uff09\u72b6\u6001 raise\u8bed\u53e5 \u00b6 \u4f5c\u7528 \u89e6\u53d1\u4e00\u4e2a\u9519\u8bef\uff0c\u8ba9\u7a0b\u5e8f\u8fdb\u5165\u5f02\u5e38\u72b6\u6001\uff0c \u53d1\u9001\u9519\u8bef\u901a\u77e5\u7ed9\u8c03\u7528\u8005 \u8bed\u6cd5 raise \u5f02\u5e38\u7c7b\u578b \u6216 raise \u5f02\u5e38\u5bf9\u8c61 \u6216 raise \u91cd\u65b0\u51fa\u53d1\u4e0a\u4e00\u6b21\u5f02\u5e38 def make_except (): print ( '\u5f00\u59cb' ) # raise ValueError # \u6545\u610f\u53d1\u9001\u4e00\u4e2a\u9519\u8bef\u901a\u77e5 raise ValueError ( '\u8fd9\u662f\u6545\u610f\u5236\u4f5c\u7684\u4e00\u4e2a\u9519\u8bef\uff01' ) print ( '\u7ed3\u675f' ) try : make_except () except ValueError as err : print ( 'make_except \u53d1\u51fa\u4e86ValueError\u7c7b\u578b\u7684\u9519\u8bef\uff0c\u5df2\u6355\u83b7' ) print ( err ) print ( '\u7a0b\u5e8f\u7ed3\u675f' ) def make_except (): raise ValueError ( '\u6211\u7684\u4e00\u4e2a\u503c\u9519\u8bef' ) def get_except (): try : make_except () except ValueError as err : print ( '\u9519\u8bef\u7684\u503c\u662f\uff1a' , err ) raise # \u91cd\u65b0\u89e6\u53d1\u521a\u6536\u5230\u7684\u9519\u8bef \u7b49\u540c\u4e8eraise err try : get_except () except ValueError as err : print ( 'get_except\u5185\u90e8\u53d1\u751f\u9519\u8bef\uff01' , err ) print ( '\u7a0b\u5e8f\u7ed3\u675f' ) \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570\uff0cget_age() \u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u4eba\u7684\u5e74\u9f84\u4fe1\u606f \u6b64\u51fd\u6570\u89c4\u5b9a\u7528\u6237\u53ea\u80fd\u8f93\u51651~140\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5982\u679c\u7528\u6237\u8f93\u5165\u5176\u4ed6\u7684\u6570\u5219\u76f4\u63a5\u89e6\u53d1ValueError\u7c7b\u578b\u7684\u9519\u8bef\u6765\u901a\u77e5\u8c03\u7528\u8005 assert\u8bed\u53e5 \u00b6 \uff08\u65ad\u8a00\u8bed\u53e5\uff09 \u8bed\u6cd5 assert \u771f\u503c\u8868\u8fbe\u5f0f\uff0c\u9519\u8bef\u6570\u636e\uff08\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff09 \u4f5c\u7528 \u5f53\u771f\u503c\u8868\u8fbe\u5f0f\u4e3aFalse\u65f6\uff0c\u7528\u9519\u8bef\u6570\u636e\u521b\u5efa\u4e00\u4e2aAssertionError\u7c7b\u578b\u7684\u9519\u8bef\uff0c\u5e76\u8fdb\u5165\u5f02\u5e38\u72b6\u6001 \u7b49\u540c\u4e8e if \u771f\u503c\u8868\u8fbe\u5f0f == False: raise AssertionError(\u9519\u8bef\u6570\u636e) # \u6b64\u793a\u4f8b\u793a\u610fassert\u8bed\u53e5\u7684\u7528\u6cd5 def get_score (): s = int ( input ( '\u8bf7\u8f93\u5165\u5b66\u751f\u7684\u6210\u7ee9(0~100)\uff1a' )) # assert 0 <= s <= 100, '\u6210\u7ee9\u8d85\u51fa\u8303\u56f4\uff01\uff01\uff01 # \u7b49\u540c\u4e8e if ( 0 <= s <= 100 ) == False : raise AssertionError ( '\u6210\u7ee9\u8d85\u51fa\u8303\u56f4' ) return s try : score = get_score () print ( '\u5b66\u751f\u6210\u7ee9\u4e3a\uff1a' , score ) except ValueError : print ( '\u7528\u6237\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u80fd\u8f6c\u4e3a\u6574\u6570...' ) except AssertionError : print ( '\u7528\u6237\u8f93\u5165\u7684\u6574\u6570\u4e0d\u57280~100\u4e4b\u95f4' ) \u4e3a\u4ec0\u4e48\u8981\u7528\u5f02\u5e38\u5904\u7406\u673a\u5236 \u00b6 \u5728\u7a0b\u5e8f\u8c03\u7528\u5c42\u6570\u8f83\u6df1\u65f6\uff0c\u5411\u4e3b\u51fd\u6570\u4f20\u9012\u9519\u8bef\u4fe1\u606f\u9700\u8981\u5c42\u5c42return\u8fd4\u56de\u6bd4\u8f83\u9ebb\u70e6","title":"16. \u5f02\u5e38"},{"location":"python/python%E5%BC%82%E5%B8%B8/#exception","text":"\u4ec0\u4e48\u662f\u9519\u8bef \u9519\u8bef\u662f\u6307\u7531\u4e8e\u903b\u8f91\u6216\u8bed\u6cd5\u7b49\u5bfc\u81f4\u4e00\u4e2a\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u6267\u884c\u7684\u95ee\u9898 \u4ec0\u4e48\u662f\u5f02\u5e38 \u5f02\u5e38\u662f\u6307\u7a0b\u5e8f\u51fa\u9519\u65f6\u6807\u8bc6\u7684\u4e00\u79cd\u72b6\u6001 \u5f53\u5f02\u5e38\u53d1\u751f\u65f6\uff0c\u7a0b\u5e8f\u4e0d\u4f1a\u518d\u5411\u4e0b\u6267\u884c\uff0c\u800c\u8f6c\u53bb\u8c03\u7528\u6b64\u51fd\u6570\u7684\u5730\u65b9\u5f85\u5904\u7406\u6b64\u9519\u8bef\u5e76\u6062\u590d\u4e3a\u6b63\u5e38\u72b6\u6001 \u4f5c\u7528 \u7528\u4f5c\u4fe1\u53f7\uff0c\u901a\u77e5\u4e0a\u5c42\u8c03\u7528\u8005\u6709\u9519\u8bef\u4ea7\u751f\u9700\u8981\u5904\u7406 \u5f02\u5e38\u5904\u7406\u8bed\u53e5 try-except\u8bed\u53e5 try-finally\u8bed\u53e5","title":"\u5f02\u5e38 exception"},{"location":"python/python%E5%BC%82%E5%B8%B8/#try-except","text":"\u8bed\u6cd5 try: \u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\u7684\u8bed\u53e5 except \u9519\u8bef\u7c7b\u578b1 [as \u53d8\u91cf1]: \u5f02\u5e38\u5904\u7406\u8bed\u53e51 except \u9519\u8bef\u7c7b\u578b2 [as \u53d8\u91cf2]: \u5f02\u5e38\u5904\u7406\u8bed\u53e52 except(\u9519\u8bef\u7c7b\u578b3\uff0c\u9519\u8bef\u7c7b\u578b4): \u5f02\u5e38\u5904\u7406\u8bed\u53e53 ... except: \u5f02\u5e38\u5904\u7406\u8bed\u53e5other else: \u672a\u53d1\u751f\u5f02\u5e38\u7684\u8bed\u53e5 finally: \u6700\u7ec8\u8bed\u53e5 \u4f5c\u7528 \u5c1d\u8bd5\u6355\u83b7\u5f02\u5e38\uff08\u63a5\u53d7\u5f02\u5e38\u901a\u77e5\uff09\uff0c\u5c06\u7a0b\u5e8f\u8f6c\u4e3a\u6b63\u5e38\u72b6\u6001\u5e76\u7ee7\u7eed\u6267\u884c \u8bed\u6cd5\u8bf4\u660e as \u5b50\u53e5\u662f\u7528\u4e8e\u7ed1\u5b9a\u9519\u8bef\u5bf9\u8c61\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u7701\u7565 except \u5b50\u53e5\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u4f46\u81f3\u5c11\u8981\u6709\u4e00\u4e2a else \u5b50\u53e5\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565\u4e0d\u5199 finally \u5b50\u53e5\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565\u4e0d\u5199 def div_apple ( n ): print ( ' %d \u4e2a\u82f9\u679c\u60a8\u60f3\u5206\u7ed9\u51e0\u4e2a\u4eba?' % n ) s = input ( '\u8bf7\u8f93\u5165\u4eba\u6570\uff1a' ) cnt = int ( s ) # <<- \u53ef\u80fd\u89e6\u53d1ValueError\u9519\u8bef\u8fdb\u5165\u5f02\u5e38 result = n / cnt # <<-- \u53ef\u80fd\u89e6\u53d1ZeroDivisionError \u9519\u8bef print ( '\u6bcf\u4e2a\u4eba\u5206\u4e86' , result , '\u4e2a\u82f9\u679c' ) try : div_apple ( 10 ) print ( '\u5206\u82f9\u679c\u5b8c\u6210' ) except ValueError : print ( '\u5728try\u7684\u5185\u90e8\u8bed\u53e5\u4e2d\u53d1\u751f\u4e86\u503c\u9519\u8bef\uff0c\u5df2\u5904\u7406\u5e76\u8f6c\u4e3a\u6b63\u5e38\u72b6\u6001' ) except ZeroDivisionError : print ( '\u8f93\u5165\u4eba\u6570\u4e3a0\uff0c\u5206\u82f9\u679c\u5931\u8d25' ) print ( '\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa' ) \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570\uff0cget_score() \u6765\u83b7\u53d6\u5b66\u751f\u8f93\u5165\u7684\u6210\u7ee9\uff080-100\u7684\u6574\u6570\uff09 \u5982\u679c\u8f93\u5165\u51fa\u73b0\u5f02\u5e38\uff0c\u5219\u8ba9\u6b64\u51fd\u6570\u8fd4\u56de0\uff0c \u5426\u5219\u8fd4\u56de\u7528\u6237\u8f93\u5165\u7684\u6210\u7ee9","title":"try-except\u8bed\u53e5"},{"location":"python/python%E5%BC%82%E5%B8%B8/#try-finally","text":"\u8bed\u6cd5 try: \u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\u7684\u8bed\u53e5 finally: \u6700\u7ec8\u8bed\u53e5 \u8bf4\u660e finally\u5b50\u53e5\u4e0d\u53ef\u4ee5\u7701\u7565 \u4e00\u5b9a\u4e0d\u5b58\u5728except\u5b50\u53e5 \u4f5c\u7528 \u901a\u5e38\u7528try-finally \u8bed\u53e5\u6765\u505a\u89e6\u53d1\u5f02\u5e38\u65f6\u5fc5\u987b\u8981\u5904\u7406\u7684\u4e8b\u60c5\uff0c\u65e0\u8bba\u5f02\u5e38\u662f\u5426\u53d1\u751f\uff0cfinally\u5b50\u53e5\u90fd\u4f1a\u88ab\u6267\u884c try-finally \u8bed\u53e5\u4e0d\u4f1a\u6539\u53d8\u7a0b\u5e8f\u7684\uff08\u6b63\u5e38/\u5f02\u5e38\uff09\u72b6\u6001","title":"try-finally \u8bed\u53e5"},{"location":"python/python%E5%BC%82%E5%B8%B8/#raise","text":"\u4f5c\u7528 \u89e6\u53d1\u4e00\u4e2a\u9519\u8bef\uff0c\u8ba9\u7a0b\u5e8f\u8fdb\u5165\u5f02\u5e38\u72b6\u6001\uff0c \u53d1\u9001\u9519\u8bef\u901a\u77e5\u7ed9\u8c03\u7528\u8005 \u8bed\u6cd5 raise \u5f02\u5e38\u7c7b\u578b \u6216 raise \u5f02\u5e38\u5bf9\u8c61 \u6216 raise \u91cd\u65b0\u51fa\u53d1\u4e0a\u4e00\u6b21\u5f02\u5e38 def make_except (): print ( '\u5f00\u59cb' ) # raise ValueError # \u6545\u610f\u53d1\u9001\u4e00\u4e2a\u9519\u8bef\u901a\u77e5 raise ValueError ( '\u8fd9\u662f\u6545\u610f\u5236\u4f5c\u7684\u4e00\u4e2a\u9519\u8bef\uff01' ) print ( '\u7ed3\u675f' ) try : make_except () except ValueError as err : print ( 'make_except \u53d1\u51fa\u4e86ValueError\u7c7b\u578b\u7684\u9519\u8bef\uff0c\u5df2\u6355\u83b7' ) print ( err ) print ( '\u7a0b\u5e8f\u7ed3\u675f' ) def make_except (): raise ValueError ( '\u6211\u7684\u4e00\u4e2a\u503c\u9519\u8bef' ) def get_except (): try : make_except () except ValueError as err : print ( '\u9519\u8bef\u7684\u503c\u662f\uff1a' , err ) raise # \u91cd\u65b0\u89e6\u53d1\u521a\u6536\u5230\u7684\u9519\u8bef \u7b49\u540c\u4e8eraise err try : get_except () except ValueError as err : print ( 'get_except\u5185\u90e8\u53d1\u751f\u9519\u8bef\uff01' , err ) print ( '\u7a0b\u5e8f\u7ed3\u675f' ) \u7ec3\u4e60 \u5199\u4e00\u4e2a\u51fd\u6570\uff0cget_age() \u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u4eba\u7684\u5e74\u9f84\u4fe1\u606f \u6b64\u51fd\u6570\u89c4\u5b9a\u7528\u6237\u53ea\u80fd\u8f93\u51651~140\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5982\u679c\u7528\u6237\u8f93\u5165\u5176\u4ed6\u7684\u6570\u5219\u76f4\u63a5\u89e6\u53d1ValueError\u7c7b\u578b\u7684\u9519\u8bef\u6765\u901a\u77e5\u8c03\u7528\u8005","title":"raise\u8bed\u53e5"},{"location":"python/python%E5%BC%82%E5%B8%B8/#assert","text":"\uff08\u65ad\u8a00\u8bed\u53e5\uff09 \u8bed\u6cd5 assert \u771f\u503c\u8868\u8fbe\u5f0f\uff0c\u9519\u8bef\u6570\u636e\uff08\u901a\u5e38\u662f\u5b57\u7b26\u4e32\uff09 \u4f5c\u7528 \u5f53\u771f\u503c\u8868\u8fbe\u5f0f\u4e3aFalse\u65f6\uff0c\u7528\u9519\u8bef\u6570\u636e\u521b\u5efa\u4e00\u4e2aAssertionError\u7c7b\u578b\u7684\u9519\u8bef\uff0c\u5e76\u8fdb\u5165\u5f02\u5e38\u72b6\u6001 \u7b49\u540c\u4e8e if \u771f\u503c\u8868\u8fbe\u5f0f == False: raise AssertionError(\u9519\u8bef\u6570\u636e) # \u6b64\u793a\u4f8b\u793a\u610fassert\u8bed\u53e5\u7684\u7528\u6cd5 def get_score (): s = int ( input ( '\u8bf7\u8f93\u5165\u5b66\u751f\u7684\u6210\u7ee9(0~100)\uff1a' )) # assert 0 <= s <= 100, '\u6210\u7ee9\u8d85\u51fa\u8303\u56f4\uff01\uff01\uff01 # \u7b49\u540c\u4e8e if ( 0 <= s <= 100 ) == False : raise AssertionError ( '\u6210\u7ee9\u8d85\u51fa\u8303\u56f4' ) return s try : score = get_score () print ( '\u5b66\u751f\u6210\u7ee9\u4e3a\uff1a' , score ) except ValueError : print ( '\u7528\u6237\u8f93\u5165\u7684\u6570\u5b57\u4e0d\u80fd\u8f6c\u4e3a\u6574\u6570...' ) except AssertionError : print ( '\u7528\u6237\u8f93\u5165\u7684\u6574\u6570\u4e0d\u57280~100\u4e4b\u95f4' )","title":"assert\u8bed\u53e5"},{"location":"python/python%E5%BC%82%E5%B8%B8/#_1","text":"\u5728\u7a0b\u5e8f\u8c03\u7528\u5c42\u6570\u8f83\u6df1\u65f6\uff0c\u5411\u4e3b\u51fd\u6570\u4f20\u9012\u9519\u8bef\u4fe1\u606f\u9700\u8981\u5c42\u5c42return\u8fd4\u56de\u6bd4\u8f83\u9ebb\u70e6","title":"\u4e3a\u4ec0\u4e48\u8981\u7528\u5f02\u5e38\u5904\u7406\u673a\u5236"},{"location":"python/python%E5%BE%AA%E7%8E%AF/","text":"while \u8bed\u53e5 \u00b6 \u4f5c\u7528\uff1a \u6839\u636e\u4e00\u5b9a\u6761\u4ef6\uff0c\u91cd\u590d\u6267\u884c\u4e00\u6761\u8bed\u53e5\u6216\u591a\u6761\u8bed\u53e5 \u8bed\u6cd5 while \u771f\u503c\u8868\u8fbe\u5f0f\uff1a \u8bed\u53e5\u5757 else: \u8bed\u53e5\u57572 \u8bf4\u660e 1. \u5148\u5224\u65ad\u771f\u503c\u8868\u8fbe\u5f0f\uff0c\u4e3aTrue \u6216False 2. \u5982\u679c\u4e3aTrue,\u5219\u6267\u884c\u8bed\u53e5\u57571\uff0c\u518d\u56de\u5230\u7b2c\u4e00\u6b65 3. \u5982\u679c\u4e3aFalse,\u5219\u6267\u884c\u8bed\u53e5\u57572\uff0c\u7136\u540e\u7ed3\u675f\u6b64while\u7684\u6267\u884c 4. else \u5b50\u53e5\u90e8\u5206\u53ef\u4ee5\u7701\u7565\uff08\u7c7b\u4f3cif\uff09 \u6ce8\u610f\u4e8b\u9879 \u8981\u63a7\u5236\u5faa\u73af\u771f\u503c\u8868\u8fbe\u5f0f\u7684\u503c\u6765\u9632\u6b62\u6b7b\u5faa\u73af \u901a\u5e38\u7528\u771f\u503c\u8868\u8fbe\u5f0f\u5185\u7684\u5faa\u73af\u53d8\u91cf\u6765\u63a7\u5236\u5faa\u73af\u6761\u4ef6 \u901a\u5e38\u5728\u5faa\u73af\u8bed\u53e5\u5757\u5185\u6539\u53d8\u5faa\u73af\u53d8\u91cf\u6765\u63a7\u5236\u5faa\u73af\u6b21\u6570\u548c\u53d8\u91cf\u8d70\u5411 \u5faa\u73af\u5d4c\u5957 while\u8bed\u53e5\u672c\u8eab\u662f\u8bed\u53e5\uff0c\u548c\u5176\u4ed6\u8bed\u53e5\u4e00\u6837\uff0c\u53ef\u4ee5\u5d4c\u5957\u5728\u4efb\u4f55\u7b26\u5408\u8bed\u53e5\u4e2d \u793a\u4f8b while \u771f\u503c\u8868\u8fbe\u5f0f\uff1a ... while \u771f\u503c\u8868\u8fbe\u5f0f2: ... else: ... else: ... break \u8bed\u53e5 \u00b6 \u4f5c\u7528 \u7528\u4e8e\u5faa\u73af\u8bed\u53e5\u4e2d\uff08while\uff0c for\u8bed\u53e5\uff09\u4e2d\uff0c\u7528\u6765\u7ec8\u6b62\u5f53\u524d\u5faa\u73af\u8bed\u53e5\u7684\u6267\u884c \u8bed\u6cd5 break \u8bf4\u660e 1. \u5f53break \u8bed\u53e5\u6267\u884c\u540e\uff0c\u6b64\u5faa\u73af\u8bed\u53e5break \u540e\u7684\u8bed\u53e5\u5c06\u4e0d\u518d\u6267\u884c 2. break \u8bed\u53e5\u901a\u5e38\u548cif \u8bed\u53e5\u7ec4\u5408\u4f7f\u7528 3. break \u8bed\u53e5\u7ec8\u6b62\u5faa\u73af\u65f6else \u5b57\u53e5\u5c06\u4e0d\u518d\u6267\u884c 4. break \u8bed\u53e5\u53ea\u80fd\u7ec8\u6b62\u5f53\u524d\u5faa\u73af\u8bed\u53e5\u7684\u6267\u884c\uff0c\u5982\u679c\u6709\u5faa\u73af\u5d4c\u5957\uff0c\u4e0d\u4f1a\u8df3\u51fa\u5916\u5c42\u5faa\u73af # ecoding = utf-8 i = 1 while i <= 6 : print ( '\u5faa\u73af\u5f00\u59cb\u65f6\uff1a' , i ) if i == 3 : break print ( '\u5faa\u73af\u7ed3\u675f\u65f6\uff1a' , i ) i += 1 print ( '-------------\u7a0b\u5e8f\u9000\u51fa---------' ) \u6b7b\u5faa\u73af \u00b6 \u6b7b\u5faa\u73af\u662f\u6307\u6761\u4ef6\u4e00\u76f4\u6210\u7acb\u7684\u5faa\u73af\uff0c \u6b7b\u5faa\u73af\u901a\u5e38\u7528break\u8bed\u53e5\u6765\u7ec8\u6b62\u5faa\u73af \u6b7b\u5faa\u73af\u7684else\u5b50\u53e5\u6c38\u8fdc\u4e0d\u4f1a\u6267\u884c # \u5faa\u73af\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u5f53\u8f93\u5165'quit()' \u7ed3\u675f\u8f93\u5165 # \u5c06\u6bcf\u6b21\u8f93\u5165\u7684\u5185\u5bb9\u6253\u5370\u5728\u5c4f\u5e55\u4e0a while True : s = input ( '\u8bf7\u8f93\u5165\uff1a>>>' ) if s == 'quit()' : break print ( s ) else : print ( 'else \u5b50\u53e5\u6c38\u8fdc\u4e0d\u4f1a\u6267\u884c' ) for \u5faa\u73af \u00b6 \u4f5c\u7528 \u7528\u6765\u904d\u5386\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6570\u636e\u5143\u7d20 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u662f\u6307\u80fd\u4f9d\u6b21\u83b7\u53d6\u6570\u636e\u5143\u7d20\u7684\u5bf9\u8c61 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u5305\u62ec\uff1a \u5b57\u7b26\u4e32\uff08str\uff09 \u5217\u8868 (list) \u5143\u7ec4 \uff08tuple\uff09 \u8bed\u6cd5\uff1a for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1a \u8bed\u53e5\u57571 else: \u8bed\u53e5\u57572 s = 'ABCD' for ch in s : print ( 'ch>>>' , ch ) for \u8bed\u6cd5\u8bf4\u660e else \u5b50\u53e5\u90e8\u5206\u53ef\u4ee5\u7701\u7565, \u5f53\u5728\u5faa\u73af\u5185\u90e8\u7528break \u7ec8\u6b62\u5faa\u73af\u65f6\uff0celse \u5b50\u53e5\u90e8\u5206\u4e0d\u4f1a\u6267\u884c # \u8f93\u5165\u4e00\u6bb5\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5185\u662f\u5426\u6709'H'\u8fd9\u4e2a\u5b57\u7b26\uff0c\u5e76\u6253\u5370\u7ed3\u679c s = input ( '\u8f93\u5165\u5b57\u7b26\u4e32\uff1a' ) for ch in s : if ch == 'H' : print ( s , '\u6709H\u5b57\u7b26' ) break else : print ( s , '\u6ca1\u6709H\u5b57\u7b26' ) range \u51fd\u6570 \u00b6 range(stop) \u7528\u6765\u751f\u62100 - stop\u533a\u95f4\u5185\u7684\u6574\u6570\uff0c\u76f4\u5230stop\u4e3a\u6b62\uff08\u4e0d\u5305\u542bstop\uff09 range(start, stop[,step]) \u7528\u6765\u751f\u6210start ~ stop\u533a\u95f4\u5185\u7684\u6574\u6570\uff0c\u76f4\u5230stop\u4e3a\u6b62 \u6bcf\u6b21\u751f\u6210\u6574\u6570\u540e\u79fb\u52a8 step \u683c\u5f0f\u8be6\u89c1 >>> help(range) \u4f5c\u7528 \u7528\u6765\u521b\u5efa\u4e00\u4e2a\u751f\u6210\u4e00\u7cfb\u5217\u6574\u6570\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u4e5f\u53eb\u6574\u6570\u5e8f\u5217\u751f\u6210\u5668\uff09 \u8bf4\u660e range\u8fd4\u56de\u7684\u5bf9\u8c61\u53ef\u4ee5\u6709for \u8bed\u53e5\u6765\u8fdb\u884c\u4f9d\u6b21\u8fed\u4ee3\u8bbf\u95ee\u53d6\u51fa\u5176\u4e2d\u7684\u6574\u6570 \u793a\u4f8b range(4) #\u751f\u62100 1 2 3 range(3 ,6) #\u751f\u6210 3 4 5 range(1, 10, 2) #\u751f\u6210 1 3 5 7 9 range(5, 0, -2) #\u751f\u6210 5 3 1 range(4, 0) #\u7a7a for \u8bed\u53e5\u53d8\u91cf\u53ef\u80fd\u4e0d\u88ab\u521b\u5efa\u7684\u95ee\u9898 \u00b6 for i in range(4,0): print(i) print('\u7ed1\u5b9a', i) # \u62a5\u9519 for i in range(0,4): print(i) print('\u7ed1\u5b9a', i) # 3 for \u8bed\u53e5\u6ce8\u610f\u4e8b\u9879 \u00b6 i = 6 for x in range ( 1 , i ): # for x in range(1, 6) print ( 'x =' , x , 'i =' , i ) i -= 1 # \u8bf7\u95ee\u6253\u5370\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f continue \u8bed\u53e5 \u00b6 \u4f5c\u7528 \u7528\u4e8e\u5faa\u73af\u8bed\u53e5\uff08while for\uff09\u4e2d\uff0c\u4e0d\u518d\u6267\u884c\u672c\u6b21\u5faa\u73afcontinue \u4e4b\u540e\u7684\u8bed\u53e5\uff0c\u91cd\u65b0\u5f00\u59cb\u4e00\u6b21\u65b0\u7684\u5faa\u73af \u8bed\u6cd5 continue \u8bf4\u660e 1. \u5728while\u8bed\u53e5\u4e2d\u6267\u884ccontinue\uff0c\u5c06\u4f1a\u76f4\u63a5\u8df3\u5230while\u8bed\u53e5\u7684\u771f\u503c\u8868\u8fbe\u5f0f\u5904 \u91cd\u65b0\u5224\u65ad\u5faa\u73af\u6761\u4ef6 2. \u5728for \u8bed\u53e5\u4e2d\u6267\u884ccontinue \u8bed\u53e5\uff0c\u5c06\u4f1a\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u53d6\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c \u7ed1\u5b9a\u53d8\u91cf\u540e\u518d\u6b21\u8fdb\u884c\u5faa\u73af # \u6b64\u793a\u4f8b\u793a\u610fcontinue \u8bed\u53e5\u7684\u7528\u6cd5 for x in range ( 5 ): if x == 2 or x == 3 : continue print ( x ) # \u6253\u537010\u4ee5\u5185\u7684\u5947\u6570 for n in range ( 10 ): if n % 2 == 0 : # \u662f\u5076\u6570\uff0c\u8df3\u8fc7\u8f93\u51fa continue print ( n ) #\u6b64\u793a\u4f8b\u793a\u610f\u5728while \u4e2d\u4f7f\u7528continue \u8bed\u53e5 # \u7565\u8fc72 x = - 1 while x < 5 : x += 1 if x == 2 : continue print ( x )","title":"4. \u5faa\u73af"},{"location":"python/python%E5%BE%AA%E7%8E%AF/#while","text":"\u4f5c\u7528\uff1a \u6839\u636e\u4e00\u5b9a\u6761\u4ef6\uff0c\u91cd\u590d\u6267\u884c\u4e00\u6761\u8bed\u53e5\u6216\u591a\u6761\u8bed\u53e5 \u8bed\u6cd5 while \u771f\u503c\u8868\u8fbe\u5f0f\uff1a \u8bed\u53e5\u5757 else: \u8bed\u53e5\u57572 \u8bf4\u660e 1. \u5148\u5224\u65ad\u771f\u503c\u8868\u8fbe\u5f0f\uff0c\u4e3aTrue \u6216False 2. \u5982\u679c\u4e3aTrue,\u5219\u6267\u884c\u8bed\u53e5\u57571\uff0c\u518d\u56de\u5230\u7b2c\u4e00\u6b65 3. \u5982\u679c\u4e3aFalse,\u5219\u6267\u884c\u8bed\u53e5\u57572\uff0c\u7136\u540e\u7ed3\u675f\u6b64while\u7684\u6267\u884c 4. else \u5b50\u53e5\u90e8\u5206\u53ef\u4ee5\u7701\u7565\uff08\u7c7b\u4f3cif\uff09 \u6ce8\u610f\u4e8b\u9879 \u8981\u63a7\u5236\u5faa\u73af\u771f\u503c\u8868\u8fbe\u5f0f\u7684\u503c\u6765\u9632\u6b62\u6b7b\u5faa\u73af \u901a\u5e38\u7528\u771f\u503c\u8868\u8fbe\u5f0f\u5185\u7684\u5faa\u73af\u53d8\u91cf\u6765\u63a7\u5236\u5faa\u73af\u6761\u4ef6 \u901a\u5e38\u5728\u5faa\u73af\u8bed\u53e5\u5757\u5185\u6539\u53d8\u5faa\u73af\u53d8\u91cf\u6765\u63a7\u5236\u5faa\u73af\u6b21\u6570\u548c\u53d8\u91cf\u8d70\u5411 \u5faa\u73af\u5d4c\u5957 while\u8bed\u53e5\u672c\u8eab\u662f\u8bed\u53e5\uff0c\u548c\u5176\u4ed6\u8bed\u53e5\u4e00\u6837\uff0c\u53ef\u4ee5\u5d4c\u5957\u5728\u4efb\u4f55\u7b26\u5408\u8bed\u53e5\u4e2d \u793a\u4f8b while \u771f\u503c\u8868\u8fbe\u5f0f\uff1a ... while \u771f\u503c\u8868\u8fbe\u5f0f2: ... else: ... else: ...","title":"while \u8bed\u53e5"},{"location":"python/python%E5%BE%AA%E7%8E%AF/#break","text":"\u4f5c\u7528 \u7528\u4e8e\u5faa\u73af\u8bed\u53e5\u4e2d\uff08while\uff0c for\u8bed\u53e5\uff09\u4e2d\uff0c\u7528\u6765\u7ec8\u6b62\u5f53\u524d\u5faa\u73af\u8bed\u53e5\u7684\u6267\u884c \u8bed\u6cd5 break \u8bf4\u660e 1. \u5f53break \u8bed\u53e5\u6267\u884c\u540e\uff0c\u6b64\u5faa\u73af\u8bed\u53e5break \u540e\u7684\u8bed\u53e5\u5c06\u4e0d\u518d\u6267\u884c 2. break \u8bed\u53e5\u901a\u5e38\u548cif \u8bed\u53e5\u7ec4\u5408\u4f7f\u7528 3. break \u8bed\u53e5\u7ec8\u6b62\u5faa\u73af\u65f6else \u5b57\u53e5\u5c06\u4e0d\u518d\u6267\u884c 4. break \u8bed\u53e5\u53ea\u80fd\u7ec8\u6b62\u5f53\u524d\u5faa\u73af\u8bed\u53e5\u7684\u6267\u884c\uff0c\u5982\u679c\u6709\u5faa\u73af\u5d4c\u5957\uff0c\u4e0d\u4f1a\u8df3\u51fa\u5916\u5c42\u5faa\u73af # ecoding = utf-8 i = 1 while i <= 6 : print ( '\u5faa\u73af\u5f00\u59cb\u65f6\uff1a' , i ) if i == 3 : break print ( '\u5faa\u73af\u7ed3\u675f\u65f6\uff1a' , i ) i += 1 print ( '-------------\u7a0b\u5e8f\u9000\u51fa---------' )","title":"break \u8bed\u53e5"},{"location":"python/python%E5%BE%AA%E7%8E%AF/#_1","text":"\u6b7b\u5faa\u73af\u662f\u6307\u6761\u4ef6\u4e00\u76f4\u6210\u7acb\u7684\u5faa\u73af\uff0c \u6b7b\u5faa\u73af\u901a\u5e38\u7528break\u8bed\u53e5\u6765\u7ec8\u6b62\u5faa\u73af \u6b7b\u5faa\u73af\u7684else\u5b50\u53e5\u6c38\u8fdc\u4e0d\u4f1a\u6267\u884c # \u5faa\u73af\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u5f53\u8f93\u5165'quit()' \u7ed3\u675f\u8f93\u5165 # \u5c06\u6bcf\u6b21\u8f93\u5165\u7684\u5185\u5bb9\u6253\u5370\u5728\u5c4f\u5e55\u4e0a while True : s = input ( '\u8bf7\u8f93\u5165\uff1a>>>' ) if s == 'quit()' : break print ( s ) else : print ( 'else \u5b50\u53e5\u6c38\u8fdc\u4e0d\u4f1a\u6267\u884c' )","title":"\u6b7b\u5faa\u73af"},{"location":"python/python%E5%BE%AA%E7%8E%AF/#for","text":"\u4f5c\u7528 \u7528\u6765\u904d\u5386\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6570\u636e\u5143\u7d20 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u662f\u6307\u80fd\u4f9d\u6b21\u83b7\u53d6\u6570\u636e\u5143\u7d20\u7684\u5bf9\u8c61 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u5305\u62ec\uff1a \u5b57\u7b26\u4e32\uff08str\uff09 \u5217\u8868 (list) \u5143\u7ec4 \uff08tuple\uff09 \u8bed\u6cd5\uff1a for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1a \u8bed\u53e5\u57571 else: \u8bed\u53e5\u57572 s = 'ABCD' for ch in s : print ( 'ch>>>' , ch ) for \u8bed\u6cd5\u8bf4\u660e else \u5b50\u53e5\u90e8\u5206\u53ef\u4ee5\u7701\u7565, \u5f53\u5728\u5faa\u73af\u5185\u90e8\u7528break \u7ec8\u6b62\u5faa\u73af\u65f6\uff0celse \u5b50\u53e5\u90e8\u5206\u4e0d\u4f1a\u6267\u884c # \u8f93\u5165\u4e00\u6bb5\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5185\u662f\u5426\u6709'H'\u8fd9\u4e2a\u5b57\u7b26\uff0c\u5e76\u6253\u5370\u7ed3\u679c s = input ( '\u8f93\u5165\u5b57\u7b26\u4e32\uff1a' ) for ch in s : if ch == 'H' : print ( s , '\u6709H\u5b57\u7b26' ) break else : print ( s , '\u6ca1\u6709H\u5b57\u7b26' )","title":"for \u5faa\u73af"},{"location":"python/python%E5%BE%AA%E7%8E%AF/#range","text":"range(stop) \u7528\u6765\u751f\u62100 - stop\u533a\u95f4\u5185\u7684\u6574\u6570\uff0c\u76f4\u5230stop\u4e3a\u6b62\uff08\u4e0d\u5305\u542bstop\uff09 range(start, stop[,step]) \u7528\u6765\u751f\u6210start ~ stop\u533a\u95f4\u5185\u7684\u6574\u6570\uff0c\u76f4\u5230stop\u4e3a\u6b62 \u6bcf\u6b21\u751f\u6210\u6574\u6570\u540e\u79fb\u52a8 step \u683c\u5f0f\u8be6\u89c1 >>> help(range) \u4f5c\u7528 \u7528\u6765\u521b\u5efa\u4e00\u4e2a\u751f\u6210\u4e00\u7cfb\u5217\u6574\u6570\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u4e5f\u53eb\u6574\u6570\u5e8f\u5217\u751f\u6210\u5668\uff09 \u8bf4\u660e range\u8fd4\u56de\u7684\u5bf9\u8c61\u53ef\u4ee5\u6709for \u8bed\u53e5\u6765\u8fdb\u884c\u4f9d\u6b21\u8fed\u4ee3\u8bbf\u95ee\u53d6\u51fa\u5176\u4e2d\u7684\u6574\u6570 \u793a\u4f8b range(4) #\u751f\u62100 1 2 3 range(3 ,6) #\u751f\u6210 3 4 5 range(1, 10, 2) #\u751f\u6210 1 3 5 7 9 range(5, 0, -2) #\u751f\u6210 5 3 1 range(4, 0) #\u7a7a","title":"range \u51fd\u6570"},{"location":"python/python%E5%BE%AA%E7%8E%AF/#for_1","text":"for i in range(4,0): print(i) print('\u7ed1\u5b9a', i) # \u62a5\u9519 for i in range(0,4): print(i) print('\u7ed1\u5b9a', i) # 3","title":"for \u8bed\u53e5\u53d8\u91cf\u53ef\u80fd\u4e0d\u88ab\u521b\u5efa\u7684\u95ee\u9898"},{"location":"python/python%E5%BE%AA%E7%8E%AF/#for_2","text":"i = 6 for x in range ( 1 , i ): # for x in range(1, 6) print ( 'x =' , x , 'i =' , i ) i -= 1 # \u8bf7\u95ee\u6253\u5370\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f","title":"for \u8bed\u53e5\u6ce8\u610f\u4e8b\u9879"},{"location":"python/python%E5%BE%AA%E7%8E%AF/#continue","text":"\u4f5c\u7528 \u7528\u4e8e\u5faa\u73af\u8bed\u53e5\uff08while for\uff09\u4e2d\uff0c\u4e0d\u518d\u6267\u884c\u672c\u6b21\u5faa\u73afcontinue \u4e4b\u540e\u7684\u8bed\u53e5\uff0c\u91cd\u65b0\u5f00\u59cb\u4e00\u6b21\u65b0\u7684\u5faa\u73af \u8bed\u6cd5 continue \u8bf4\u660e 1. \u5728while\u8bed\u53e5\u4e2d\u6267\u884ccontinue\uff0c\u5c06\u4f1a\u76f4\u63a5\u8df3\u5230while\u8bed\u53e5\u7684\u771f\u503c\u8868\u8fbe\u5f0f\u5904 \u91cd\u65b0\u5224\u65ad\u5faa\u73af\u6761\u4ef6 2. \u5728for \u8bed\u53e5\u4e2d\u6267\u884ccontinue \u8bed\u53e5\uff0c\u5c06\u4f1a\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u53d6\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c \u7ed1\u5b9a\u53d8\u91cf\u540e\u518d\u6b21\u8fdb\u884c\u5faa\u73af # \u6b64\u793a\u4f8b\u793a\u610fcontinue \u8bed\u53e5\u7684\u7528\u6cd5 for x in range ( 5 ): if x == 2 or x == 3 : continue print ( x ) # \u6253\u537010\u4ee5\u5185\u7684\u5947\u6570 for n in range ( 10 ): if n % 2 == 0 : # \u662f\u5076\u6570\uff0c\u8df3\u8fc7\u8f93\u51fa continue print ( n ) #\u6b64\u793a\u4f8b\u793a\u610f\u5728while \u4e2d\u4f7f\u7528continue \u8bed\u53e5 # \u7565\u8fc72 x = - 1 while x < 5 : x += 1 if x == 2 : continue print ( x )","title":"continue \u8bed\u53e5"},{"location":"python/python%E6%A8%A1%E5%9D%97/","text":"\u6a21\u5757 Moudle \u00b6 \u4ec0\u4e48\u662f\u6a21\u5757 \u6a21\u5757\u662f\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u6570\u636e\uff0c\u51fd\u6570\uff0c\u7c7b\u7b49\u7ec4\u6210\u7684\u7a0b\u5e8f\u7ec4 \u6a21\u5757\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u6a21\u5757\u6587\u4ef6\u540d\u901a\u5e38\u4ee5.py\u7ed3\u5c3e \u4f5c\u7528 \u8ba9\u4e00\u4e9b\u76f8\u5173\u7684\u6570\u636e\uff0c\u51fd\u6570\uff0c\u7c7b\u7b49\u6709\u903b\u8f91\u7684\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u4f7f\u903b\u8f91\u7ed3\u6784\u66f4\u52a0\u6e05\u6670 \u6a21\u5757\u4e2d\u7684\u6570\u636e\uff0c\u51fd\u6570\u548c\u7c7b\u7b49\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u5176\u4ed6\u6a21\u5757\u6216\u7a0b\u5e8f\u4f7f\u7528 \u6a21\u5757\u7684\u5206\u7c7b 1. \u5185\u7f6e\u6a21\u5757\uff0c\u5728\u89e3\u91ca\u6267\u884c\u5668\u5185\u90e8\u5b9a\u4e49\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 2. \u6807\u51c6\u5e93\u6a21\u5757\uff0c\u5b89\u88c5python\u65f6\u5df2\u7ecf\u5b89\u88c5\u4e14\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 3. \u7b2c\u4e09\u65b9\u6a21\u5757\uff08\u901a\u5e38\u4e3a\u5f00\u6e90\uff09\uff0c \u9700\u8981\u81ea\u5df1\u5b89\u88c5 4. \u7528\u6237\u81ea\u5b9a\u4e49\u6a21\u5757\uff08\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u4eba\u7684\u7b2c\u4e09\u65b9\u6a21\u5757\uff09 import \u8bed\u53e5 \u00b6 \u8bed\u6cd5 import \u6a21\u5757\u540d1[as \u6a21\u5757\u65b0\u540d1], \u6a21\u5757\u540d2[as \u6a21\u5757\u65b0\u540d2]... \u4f5c\u7528 \u5c06\u67d0\u6a21\u5757\u6574\u4f53\u5bfc\u5165\u5230\u5f53\u524d\u6a21\u5757\u4e2d \u793a\u4f8b import math # \u5bfc\u5165\u6570\u636e\u6a21\u5757 import sys, time # \u5bfc\u5165\u7cfb\u7edf\u6a21\u5757\u548c\u65f6\u95f4\u6a21\u5757 \u7528\u6cd5 \u6a21\u5757\u540d.\u5c5e\u6027\u540d \u5982 math.factorial(5) math.cos(0) from import \u8bed\u53e5 \u00b6 \u8bed\u6cd5 from \u6a21\u5757\u540d import * \u4f5c\u7528 \u5c06\u67d0\u6a21\u5757\u7684\u6240\u6709\u5c5e\u6027\u5168\u90e8\u5bfc\u5165\u5230\u5f53\u524d\u6a21\u5757 \u793a\u4f8b from math import * print(sin(pi / 2)) print(factorial(5)) # \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528math\u91cc\u7684\u5168\u90e8\u5c5e\u6027 dir \u51fd\u6570 \u00b6 dir([\u5bf9\u8c61]) \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 \u4f5c\u7528 1. \u5982\u679c\u6ca1\u6709\u53c2\u6570\u8c03\u7528\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u4f5c\u7528\u57df\u5185\u6240\u6709\u53d8\u91cf\u7684\u5217\u8868 2. \u5982\u679c\u7ed9\u5b9a\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5219\u8fd4\u56de\u8fd9\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u91cf\u7684\u5217\u8868 \uff081\uff09\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u5757\uff0c\u8fd4\u56de\u8fd9\u4e2a\u6a21\u5757\u7684\u5168\u90e8\u5c5e\u6027 \uff082\uff09\u5bf9\u4e8e\u4e00\u4e2a\u7c7b\u5bf9\u8c61\uff0c\u8fd4\u56de\u7c7b\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u91cf\u5e76\u9012\u5f52\u57fa\u7c7b\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u91cf \uff083\uff09\u5bf9\u4e8e\u5176\u4ed6\u5bf9\u8c61\u8fd4\u56de\u6240\u6709\u53d8\u91cf\uff0c\u7c7b\u53d8\u91cf\u548c\u57fa\u7c7b\u53d8\u91cf \u7528\u6237\u81ea\u5b9a\u4e49\u6a21\u5757 \u00b6 \u8981\u6c42\uff1a \u6a21\u5757\u540d\u4ee5'.py'\u7ed3\u5c3e \u6a21\u5757\u540d\u5fc5\u987b\u662f\u6807\u8bc6\u7b26\u7684\u547d\u540d\u89c4\u5219\uff0c\u907f\u514d\u540d\u79f0\u548c\u5185\u5efa\u6a21\u5757\u51b2\u7a81 \u5bfc\u5165\u65b9\u5f0f import \u8bed\u53e5 from import \u8bed\u53e5 from import * \u8bed\u53e5 import \u8bed\u53e5\u7684\u641c\u7d22\u8def\u5f84 \u00b6 \u7d22\u5f15\u5185\u5efa\u6a21\u5757 bulitin \u641c\u7d22\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u8def\u5f84\uff08\u5f53\u524d\u8def\u5f84\uff09 sys.path\u63d0\u4f9b\u7684\u8def\u5f84 \u4e24\u79cd\u65b9\u6cd5\u8ba9\u7528\u6237\u81ea\u5b9a\u4e49\u6a21\u5757\u88ab\u5bfc\u5165 \u5c06\u6a21\u5757\u590d\u5236\u5230sys.path\u63d0\u4f9b\u7684\u8def\u5f84 \u5728\u8fd0\u884c\u65f6\uff0c\u5728sys.path\u91cc\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8def\u5f84 \u6a21\u5757\u7684\u52a0\u8f7d\u8fc7\u7a0b \u00b6 \u200b \u5728\u6a21\u5757\u5bfc\u5165\u65f6\uff0c\u6a21\u5757\u7684\u6240\u6709\u8bed\u53e5\u90fd\u4f1a\u6267\u884c\uff0c\u5982\u679c\u4e00\u4e2a\u6a21\u5757\u5df2\u7ecf\u88ab\u5bfc\u5165\uff0c\u5219\u518d\u6b21\u5bfc\u5165\u65f6\u4e0d\u4f1a\u91cd\u65b0\u6267\u884c\u6a21\u5757\u5185\u7684\u8bed\u53e5 \u6a21\u5757\u7684\u91cd\u65b0\u52a0\u8f7d \u00b6 import mymod import imp import reload(mymod) \u6a21\u5757\u88ab\u5bfc\u5165\u548c\u6267\u884c\u7684\u8fc7\u7a0b \u00b6 1. \u5148\u641c\u7d22\u76f8\u5173\u8def\u5f84\u627e\u6a21\u5757\u6587\u4ef6(.py) 2. \u5224\u65ad\u662f\u5426\u6709\u6b64\u6a21\u5757\u5bf9\u5e94\u7684.pyc, \u5982\u679c\u6709pyc\u6587\u4ef6\u5b58\u5728\u4e14\u6bd4.pyc\u65b0\u5219\u76f4\u63a5\u52a0\u8f7d.pyc\u6587\u4ef6 3. \u5426\u5219\u7528\u6a21\u5757\u540d.py \u6587\u4ef6\u751f\u6210.pyc \u5e76\u52a0\u8f7d\u6267\u884c \u6a21\u5757\u7684\u7f16\u8bd1 \u00b6 \u7f16\u8bd1 \u89e3\u91ca\u6267\u884c mymod.py --->mymod.pyc ------> python3 \u6a21\u5757\u7684\u5c5e\u6027 \u00b6 \u6a21\u5757\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u6a21\u5757\u5185\u7684\u7b2c\u4e00\u6b21\u6ca1\u6709\u8d4b\u503c\u7ed9\u4efb\u4f55\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u4e3a\u6a21\u5757\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u6a21\u5757\u5185\u7684\u6587\u6863\u5b57\u7b26\u4e32\u7ed1\u5b9a\u5728\u6a21\u5757\u7684__doc__\u5c5e\u6027\u4e0a __doc__\u5c5e\u6027 \u7528\u6765\u7ed1\u5b9a\u6587\u6863\u5b57\u7b26\u4e32 __file__\u5c5e\u6027 \u7528\u4e8e\u7ed1\u5b9a\u6b64\u6a21\u5757\u5bf9\u5e94\u7684\u6587\u4ef6\u8def\u5f84 __name__\u5c5e\u6027 1. \u7528\u6765\u8bb0\u5f55\u6a21\u5757\u81ea\u8eab\u7684\u540d\u5b57 2. \u7528\u6765\u5224\u65ad\u662f\u5426\u4e3a\u4e3b\u6a21\u5757 \uff08\u6ce8\uff1a\u4e3b\u6a21\u5757\u662f\u6307\u7a0b\u5e8f\u6700\u5148\u88abpython3 \u6267\u884c\u7684\u6a21\u5757\uff09 \u8bf4\u660e \u5f53\u6b64\u6a21\u5757\u4e3a\u4e3b\u6a21\u5757\u8fd0\u884c\u65f6\uff0c__name__\u7684\u503c\u4e3a__main__ \u5f53\u6b64\u6a21\u5757\u4e0d\u662f\u4e3b\u6a21\u5757\u65f6\uff0c__name__\u7ed1\u5b9a\u6a21\u5757\u7684\u540d\u5b57 __all__\u5217\u8868 \u6a21\u5757\u4e2d\u7684__all__\u5217\u8868\u5fc5\u987b\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 \u4f5c\u7528 \u5f53\u7528from mymod import * \u5bfc\u5165\u65f6\uff0c\u53ea\u5bfc\u5165__all__\u5217\u8868\u5185\u5c5e\u6027 # \u6b64\u5217\u8868\u9650\u5b9a\u5f53\u7528from mymod2 import * \u65f6\u53ea\u5bfc\u5165 f1 \u548c var1 __all__ = [ 'f1' , 'var1' ] def f1 (): pass def f2 (): pass def f3 (): pass var1 = 100 var2 = 200 \u6a21\u5757\u7684\u9690\u85cf\u5c5e\u6027 \u00b6 \u6a21\u5757\u4e2d\u4ee5\u4e0b\u5212\u7ebf'_' \u5f00\u5934\u7684\u5c5e\u6027\uff0c\u5728from xxx import * \u5bfc\u5165\u65f6\u5c06\u4e0d\u88ab\u5bfc\u5165\uff0c \u901a\u5e38\u79f0\u4e3a\u8fd9\u4e9b\u5c5e\u6027\u4e3a\u9690\u85cf\u5c5e\u6027","title":"14. \u6a21\u5757"},{"location":"python/python%E6%A8%A1%E5%9D%97/#moudle","text":"\u4ec0\u4e48\u662f\u6a21\u5757 \u6a21\u5757\u662f\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u6570\u636e\uff0c\u51fd\u6570\uff0c\u7c7b\u7b49\u7ec4\u6210\u7684\u7a0b\u5e8f\u7ec4 \u6a21\u5757\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u6a21\u5757\u6587\u4ef6\u540d\u901a\u5e38\u4ee5.py\u7ed3\u5c3e \u4f5c\u7528 \u8ba9\u4e00\u4e9b\u76f8\u5173\u7684\u6570\u636e\uff0c\u51fd\u6570\uff0c\u7c7b\u7b49\u6709\u903b\u8f91\u7684\u7ec4\u7ec7\u5728\u4e00\u8d77\uff0c\u4f7f\u903b\u8f91\u7ed3\u6784\u66f4\u52a0\u6e05\u6670 \u6a21\u5757\u4e2d\u7684\u6570\u636e\uff0c\u51fd\u6570\u548c\u7c7b\u7b49\u53ef\u4ee5\u63d0\u4f9b\u7ed9\u5176\u4ed6\u6a21\u5757\u6216\u7a0b\u5e8f\u4f7f\u7528 \u6a21\u5757\u7684\u5206\u7c7b 1. \u5185\u7f6e\u6a21\u5757\uff0c\u5728\u89e3\u91ca\u6267\u884c\u5668\u5185\u90e8\u5b9a\u4e49\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 2. \u6807\u51c6\u5e93\u6a21\u5757\uff0c\u5b89\u88c5python\u65f6\u5df2\u7ecf\u5b89\u88c5\u4e14\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 3. \u7b2c\u4e09\u65b9\u6a21\u5757\uff08\u901a\u5e38\u4e3a\u5f00\u6e90\uff09\uff0c \u9700\u8981\u81ea\u5df1\u5b89\u88c5 4. \u7528\u6237\u81ea\u5b9a\u4e49\u6a21\u5757\uff08\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u4eba\u7684\u7b2c\u4e09\u65b9\u6a21\u5757\uff09","title":"\u6a21\u5757 Moudle"},{"location":"python/python%E6%A8%A1%E5%9D%97/#import","text":"\u8bed\u6cd5 import \u6a21\u5757\u540d1[as \u6a21\u5757\u65b0\u540d1], \u6a21\u5757\u540d2[as \u6a21\u5757\u65b0\u540d2]... \u4f5c\u7528 \u5c06\u67d0\u6a21\u5757\u6574\u4f53\u5bfc\u5165\u5230\u5f53\u524d\u6a21\u5757\u4e2d \u793a\u4f8b import math # \u5bfc\u5165\u6570\u636e\u6a21\u5757 import sys, time # \u5bfc\u5165\u7cfb\u7edf\u6a21\u5757\u548c\u65f6\u95f4\u6a21\u5757 \u7528\u6cd5 \u6a21\u5757\u540d.\u5c5e\u6027\u540d \u5982 math.factorial(5) math.cos(0)","title":"import \u8bed\u53e5"},{"location":"python/python%E6%A8%A1%E5%9D%97/#from-import","text":"\u8bed\u6cd5 from \u6a21\u5757\u540d import * \u4f5c\u7528 \u5c06\u67d0\u6a21\u5757\u7684\u6240\u6709\u5c5e\u6027\u5168\u90e8\u5bfc\u5165\u5230\u5f53\u524d\u6a21\u5757 \u793a\u4f8b from math import * print(sin(pi / 2)) print(factorial(5)) # \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528math\u91cc\u7684\u5168\u90e8\u5c5e\u6027","title":"from import \u8bed\u53e5"},{"location":"python/python%E6%A8%A1%E5%9D%97/#dir","text":"dir([\u5bf9\u8c61]) \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 \u4f5c\u7528 1. \u5982\u679c\u6ca1\u6709\u53c2\u6570\u8c03\u7528\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u4f5c\u7528\u57df\u5185\u6240\u6709\u53d8\u91cf\u7684\u5217\u8868 2. \u5982\u679c\u7ed9\u5b9a\u4e00\u4e2a\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u5219\u8fd4\u56de\u8fd9\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u91cf\u7684\u5217\u8868 \uff081\uff09\u5bf9\u4e8e\u4e00\u4e2a\u6a21\u5757\uff0c\u8fd4\u56de\u8fd9\u4e2a\u6a21\u5757\u7684\u5168\u90e8\u5c5e\u6027 \uff082\uff09\u5bf9\u4e8e\u4e00\u4e2a\u7c7b\u5bf9\u8c61\uff0c\u8fd4\u56de\u7c7b\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u91cf\u5e76\u9012\u5f52\u57fa\u7c7b\u5bf9\u8c61\u7684\u6240\u6709\u53d8\u91cf \uff083\uff09\u5bf9\u4e8e\u5176\u4ed6\u5bf9\u8c61\u8fd4\u56de\u6240\u6709\u53d8\u91cf\uff0c\u7c7b\u53d8\u91cf\u548c\u57fa\u7c7b\u53d8\u91cf","title":"dir \u51fd\u6570"},{"location":"python/python%E6%A8%A1%E5%9D%97/#_1","text":"\u8981\u6c42\uff1a \u6a21\u5757\u540d\u4ee5'.py'\u7ed3\u5c3e \u6a21\u5757\u540d\u5fc5\u987b\u662f\u6807\u8bc6\u7b26\u7684\u547d\u540d\u89c4\u5219\uff0c\u907f\u514d\u540d\u79f0\u548c\u5185\u5efa\u6a21\u5757\u51b2\u7a81 \u5bfc\u5165\u65b9\u5f0f import \u8bed\u53e5 from import \u8bed\u53e5 from import * \u8bed\u53e5","title":"\u7528\u6237\u81ea\u5b9a\u4e49\u6a21\u5757"},{"location":"python/python%E6%A8%A1%E5%9D%97/#import_1","text":"\u7d22\u5f15\u5185\u5efa\u6a21\u5757 bulitin \u641c\u7d22\u7a0b\u5e8f\u7684\u8fd0\u884c\u65f6\u8def\u5f84\uff08\u5f53\u524d\u8def\u5f84\uff09 sys.path\u63d0\u4f9b\u7684\u8def\u5f84 \u4e24\u79cd\u65b9\u6cd5\u8ba9\u7528\u6237\u81ea\u5b9a\u4e49\u6a21\u5757\u88ab\u5bfc\u5165 \u5c06\u6a21\u5757\u590d\u5236\u5230sys.path\u63d0\u4f9b\u7684\u8def\u5f84 \u5728\u8fd0\u884c\u65f6\uff0c\u5728sys.path\u91cc\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8def\u5f84","title":"import \u8bed\u53e5\u7684\u641c\u7d22\u8def\u5f84"},{"location":"python/python%E6%A8%A1%E5%9D%97/#_2","text":"\u200b \u5728\u6a21\u5757\u5bfc\u5165\u65f6\uff0c\u6a21\u5757\u7684\u6240\u6709\u8bed\u53e5\u90fd\u4f1a\u6267\u884c\uff0c\u5982\u679c\u4e00\u4e2a\u6a21\u5757\u5df2\u7ecf\u88ab\u5bfc\u5165\uff0c\u5219\u518d\u6b21\u5bfc\u5165\u65f6\u4e0d\u4f1a\u91cd\u65b0\u6267\u884c\u6a21\u5757\u5185\u7684\u8bed\u53e5","title":"\u6a21\u5757\u7684\u52a0\u8f7d\u8fc7\u7a0b"},{"location":"python/python%E6%A8%A1%E5%9D%97/#_3","text":"import mymod import imp import reload(mymod)","title":"\u6a21\u5757\u7684\u91cd\u65b0\u52a0\u8f7d"},{"location":"python/python%E6%A8%A1%E5%9D%97/#_4","text":"1. \u5148\u641c\u7d22\u76f8\u5173\u8def\u5f84\u627e\u6a21\u5757\u6587\u4ef6(.py) 2. \u5224\u65ad\u662f\u5426\u6709\u6b64\u6a21\u5757\u5bf9\u5e94\u7684.pyc, \u5982\u679c\u6709pyc\u6587\u4ef6\u5b58\u5728\u4e14\u6bd4.pyc\u65b0\u5219\u76f4\u63a5\u52a0\u8f7d.pyc\u6587\u4ef6 3. \u5426\u5219\u7528\u6a21\u5757\u540d.py \u6587\u4ef6\u751f\u6210.pyc \u5e76\u52a0\u8f7d\u6267\u884c","title":"\u6a21\u5757\u88ab\u5bfc\u5165\u548c\u6267\u884c\u7684\u8fc7\u7a0b"},{"location":"python/python%E6%A8%A1%E5%9D%97/#_5","text":"\u7f16\u8bd1 \u89e3\u91ca\u6267\u884c mymod.py --->mymod.pyc ------> python3","title":"\u6a21\u5757\u7684\u7f16\u8bd1"},{"location":"python/python%E6%A8%A1%E5%9D%97/#_6","text":"\u6a21\u5757\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u6a21\u5757\u5185\u7684\u7b2c\u4e00\u6b21\u6ca1\u6709\u8d4b\u503c\u7ed9\u4efb\u4f55\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u4e3a\u6a21\u5757\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u6a21\u5757\u5185\u7684\u6587\u6863\u5b57\u7b26\u4e32\u7ed1\u5b9a\u5728\u6a21\u5757\u7684__doc__\u5c5e\u6027\u4e0a __doc__\u5c5e\u6027 \u7528\u6765\u7ed1\u5b9a\u6587\u6863\u5b57\u7b26\u4e32 __file__\u5c5e\u6027 \u7528\u4e8e\u7ed1\u5b9a\u6b64\u6a21\u5757\u5bf9\u5e94\u7684\u6587\u4ef6\u8def\u5f84 __name__\u5c5e\u6027 1. \u7528\u6765\u8bb0\u5f55\u6a21\u5757\u81ea\u8eab\u7684\u540d\u5b57 2. \u7528\u6765\u5224\u65ad\u662f\u5426\u4e3a\u4e3b\u6a21\u5757 \uff08\u6ce8\uff1a\u4e3b\u6a21\u5757\u662f\u6307\u7a0b\u5e8f\u6700\u5148\u88abpython3 \u6267\u884c\u7684\u6a21\u5757\uff09 \u8bf4\u660e \u5f53\u6b64\u6a21\u5757\u4e3a\u4e3b\u6a21\u5757\u8fd0\u884c\u65f6\uff0c__name__\u7684\u503c\u4e3a__main__ \u5f53\u6b64\u6a21\u5757\u4e0d\u662f\u4e3b\u6a21\u5757\u65f6\uff0c__name__\u7ed1\u5b9a\u6a21\u5757\u7684\u540d\u5b57 __all__\u5217\u8868 \u6a21\u5757\u4e2d\u7684__all__\u5217\u8868\u5fc5\u987b\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 \u4f5c\u7528 \u5f53\u7528from mymod import * \u5bfc\u5165\u65f6\uff0c\u53ea\u5bfc\u5165__all__\u5217\u8868\u5185\u5c5e\u6027 # \u6b64\u5217\u8868\u9650\u5b9a\u5f53\u7528from mymod2 import * \u65f6\u53ea\u5bfc\u5165 f1 \u548c var1 __all__ = [ 'f1' , 'var1' ] def f1 (): pass def f2 (): pass def f3 (): pass var1 = 100 var2 = 200","title":"\u6a21\u5757\u7684\u5c5e\u6027"},{"location":"python/python%E6%A8%A1%E5%9D%97/#_7","text":"\u6a21\u5757\u4e2d\u4ee5\u4e0b\u5212\u7ebf'_' \u5f00\u5934\u7684\u5c5e\u6027\uff0c\u5728from xxx import * \u5bfc\u5165\u65f6\u5c06\u4e0d\u88ab\u5bfc\u5165\uff0c \u901a\u5e38\u79f0\u4e3a\u8fd9\u4e9b\u5c5e\u6027\u4e3a\u9690\u85cf\u5c5e\u6027","title":"\u6a21\u5757\u7684\u9690\u85cf\u5c5e\u6027"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/","text":"Python \u7b80\u4ecb \u00b6 \u200b \u521b\u5efa\u4eba\uff1aGuido Van Rossum(\u8377\u5170\u4eba) \u200b \u65f6 \u95f4\uff1a1989\u5e74\u521b\u5efapython Python\u7684\u5e94\u7528\u9886\u57df \u00b6 /\u7cfb\u7edf\u8fd0\u7ef4 /\u7f51\u7edc\u7f16\u7a0b /\u79d1\u5b66\u8ba1\u7b97 /\u4eba\u5de5\u667a\u80fd /\u673a\u5668\u4eba /web\u5f00\u53d1 /\u4e91\u8ba1\u7b97 /\u5927\u6570\u636e\u53ca\u6570\u636e\u5e93\u7f16\u7a0b /\u6559\u80b2 /\u6e38\u620f\uff0c\u56fe\u50cf /\u5176\u4ed6 Python\u4f18\u7f3a\u70b9 \u00b6 \u200b \u9762\u5411\u5bf9\u8c61 \u200b \u514d\u8d39 \u200b \u53ef\u79fb\u690d \u200b \u53ef\u6df7\u5408\u7f16\u7a0b \u200b \u7b80\u5355\u6613\u5b66\u6613\u7528 \u5f00\u53d1\u6548\u7387\u9ad8 \u200b \u5e94\u7528\u9886\u57df\u5e7f\u6cdb \u200b \u5f00\u6e90 \u200b \u7f3a\u70b9 \u200b \u4e0eC/C++\u76f8\u6bd4\uff0c\u6267\u884c\u901f\u5ea6\u4e0d\u591f\u5feb \u200b \u4e0d\u80fd\u5c01\u95ed\u6e90\u4ee3\u7801 Python\u7684\u5b98\u7f51 \u00b6 https://www.python.org python\u7684\u89e3\u91ca\u6267\u884c\u5668 \u00b6 \u200b CPython (C\u8bed\u8a00\u5f00\u53d1) \u200b Iython (Java\u5f00\u53d1) \u200b IronPython (.net\u5f00\u53d1) \u5e38\u7528\u7684\u7a0b\u5e8f\u6587\u4ef6\u7684\u540e\u7f00 \u00b6 .py python\u6587\u4ef6\u7684\u540e\u7f00 .c C\u8bed\u8a00\u6587\u4ef6\u7684\u540e\u7f00 .cpp C++\u8bed\u8a00\u6587\u4ef6\u7684\u540e\u7f00 .java Java\u8bed\u8a00\u6587\u4ef6\u7684\u540e\u7f00 \u4ea4\u4e92\u6a21\u5f0f\u4e0b\u7f16\u5199\u5e76\u6267\u884c\u4ee3\u7801 \u00b6 \u8fdb\u5165python\u4ea4\u4e92\u73af\u5883 python3 \u56de\u8f66 \u9000\u51fa exit() qiue() \u8f93\u5165 Ctrl + d \uff08\u8f93\u5165\u6587\u4ef6\u7ed3\u675f\u7b26\uff09 Python\u7684\u6ce8\u91ca \u00b6 #\u5f00\u5934\u76f4\u81f3\u884c\u5c3e \u4f5c\u7528\uff1a\u8ba9\u6ce8\u91ca\u5185\u5bb9\u4e0d\u53c2\u52a0\u6267\u884c Python\u7684\u6838\u5fc3\u6570\u636e\u7c7b\u578b \u00b6 \u6570\u5b57\uff08\u6574\u578b/\u6d6e\u70b9\u578b/\u590d\u6570/\u5e03\u5c14\u578b\uff09 \u5b57\u7b26\u4e32 str \u5217\u8868 list ... \u6570\u5b57 \u6574\u578b\u6570 int \u6574\u578b\u6570\u662f\u4e0d\u5e26\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u636e\uff0c\u5305\u62ec\u81ea\u7136\u6570\uff0c\u8d1f\u6570 \u5982\uff1a-5\uff0c0\uff0c100\u7b49 \u6574\u578b\u5b57\u9762\u503c\u7684\u8868\u793a\u65b9\u5f0f \u5341\u8fdb\u5236\u8868\u793a 10\uff0c 200\uff0c-100\uff0c99999999 \u516b\u8fdb\u5236\u8868\u793a\uff080o\u5f00\u5934\uff0c\u540e\u8ddf0~7\uff09 0o11 (9) 0o177 (127) \u5341\u516d\u8fdb\u5236\u8868\u793a\uff080x\u5f00\u5934\uff0c\u540e\u8ddf0-9\uff0cA-F,a-f\uff09 \u6ce8\uff1aa\u8868\u793a10\uff0cb\u8868\u793a11\u3002\u3002\u3002\u3002f\u8868\u793a15 0x11 \uff0817\uff09 0xff (255) 0x1234zbcd \u4e8c\u8fdb\u5236\u7684\u8868\u793a\uff080b\u5f00\u5934\uff0c\u540e\u8ddf0-1\uff09 0b111 (7) 0b1000 (8) \u6d6e\u70b9\u6570\u7684\u8868\u793a\u65b9\u5f0f \u6d6e\u70b9\u6570\u662f\u5e26\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\uff08\u5c0f\u6570\u90e8\u5206\u53ef\u4ee5\u662f0\uff09 \u6d6e\u70b9\u6570\u7684\u4e24\u79cd\u8868\u793a\u65b9\u5f0f\uff1a \u5c0f\u6570\u5f62\u5f0f 3.14 3.1 3. 0.14 .14 \u79d1\u5b66\u8ba1\u6570\u6cd5 \u5c0f\u6570e/E\uff08\u6b63\u8d1f\u53f7\uff09\u6307\u6570 \u5982\uff1a 6.18E-1 (\u7b49\u540c\u4e8e0.618) 2.9979e8 (\u7b49\u540c\u4e8e299790000.0) \u590d\u6570complex \u5206\u4e3a\u4e24\u90e8\u5206 \u5b9e\u90e8\uff08real\uff09 \u865a\u90e8\uff08image\uff09 \u6ce8\uff1a\u865a\u90e8\u662f\u4ee5j\u6216J\u7ed3\u5c3e \u590d\u6570\u7684\u5b57\u9762\u503c\u8868\u793a\uff1a 1j (2J) 1+1J 1-1j (-100+100J) \u5e03\u5c14\u578b\u6570 \u7528\u6765\u8868\u793a\u771f\u548c\u5047\u4e24\u79cd\u72b6\u6001\u7684\u7c7b\u578b True \u8868\u793a\u771f\uff08\u6761\u4ef6\u6ee1\u8db3\u6216\u6210\u7acb\uff09 False \u8868\u793a\u5047\uff08\u6761\u4ef6\u4e0d\u6ee1\u8db3\u6216\u4e0d\u6210\u7acb\uff09 \u8bf4\u660e True \u7684\u503c\u662f1 False \u7684\u503c\u662f0 \u7a7a\u503cNone None\u662f\u4e00\u4e2a\u8868\u793a\u4e0d\u5b58\u5728\u7684\u7279\u6b8a\u5bf9\u8c61 \u4f5c\u7528\uff1a \u7528\u6765\u5360\u4f4d/\u53d8\u91cf\u89e3\u9664\u7ed1\u5b9a \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8868\u8fbe\u5f0fexpression \u7531\u4e00\u4e2a\u6570\u5b57\u6216\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u7ec4\u6210 \u4f5c\u7528 \u901a\u5e38\u8ba9\u8ba1\u7b97\u673a\u505a\u4e00\u4e9b\u4e8b\u60c5\u5e76\u8fd4\u56de\u7ed3\u679c \u5982 1 + 2 * 3 - 4 \u7b97\u672f\u8fd0\u7b97\u7b26 + \u52a0\u6cd5 - \u51cf\u6cd5 * \u4e58\u6cd5 / \u9664\u6cd5 // \u5730\u677f\u9664 floordiv % \u6c42\u4f59 ** \u5e42\u8fd0\u7b97 /\u9664\u6cd5 \u5f97\u5230\u7684\u6570\u662f\u6d6e\u70b9\u6570\uff0c\u4e0d\u4f1a\u4e22\u5f03\u5c0f\u6570\u90e8\u5206 1/3 \u5f97 0.333333333333 8/2 \u5f97 4.0 //\u5730\u677f\u9664 \u9664\u7684\u7ed3\u679c\u53bb\u6389\u5c0f\u6570\u90e8\u5206\u5411\u4e0b\u53d6\u6574 7/3 \u5f972.3333333333333 7//3 \u5f972 8//3 \u5f972 3.25//1.5 \u5f972.0 %\u6c42\u4f59 7%3 \u5f971 3.25%1.5 \u5f970.25 \u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 ** * / // % + - \u62ec\u53f7\u5206\u7ec4\u5b50\u8868\u8fbe\u5f0f \u7528\uff08\uff09\u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u5206\u7ec4\uff0c\uff08\uff09\u5185\u90e8\u7684\u8868\u8fbe\u5f0f\u5148\u8fdb\u884c\u8ba1\u7b97 \u6df7\u5408\u7c7b\u578b\u81ea\u52a8\u5347\u7ea7 1 + 2.14 \u8fd4\u56de\u7c7b\u578b\u4e3a\u6d6e\u70b9\u578b 3.14 \u57fa\u672c\u8f93\u51fa\u51fd\u6570 print('\u8981\u6253\u5370\u7684\u4e1c\u897f') \u53d8\u91cf \u53d8\u91cf\u662f\u5173\u8054\u4e00\u4e2a\u5bf9\u8c61\u7684\u6807\u8bc6\u7b26 \u53d8\u91cf\u53ef\u4ee5\u7ed1\u5b9a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u540d\u6765\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u6807\u8bc6\u7b26\u7684\u547d\u540d\u65b9\u6cd5 \u6807\u8bc6\u7b26\u5fc5\u987b\u4e3a\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u540e\u8ddf\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u6216\u6570\u5b57 \u8bf4\u660e \u4e0d\u80fd\u7528python\u7684\u5173\u952e\u5b57\u4f5c\u53d8\u91cf\u540d python\u53d8\u91cf\u540d\u533a\u5206\u5927\u5c0f\u5199 \u5408\u6cd5\u7684\u53d8\u91cf\u793a\u4f8b a a1 b bbb _a __ABCD var alb2 \u4e0d\u5408\u6cd5\u7684\u53d8\u91cf\u540d\u793a\u4f8b 1a 123 $ABC +a -b @abc \u8d4b\u503c\u8bed\u53e5 \u8bed\u6cd5 \u53d8\u91cf = \u8868\u8fbe\u5f0f \u53d8\u91cf\u540d1 = \u53d8\u91cf\u540d2 = \u53d8\u91cf\u540d3 = \u8868\u8fbe\u5f0f \u53d8\u91cf\u540d1\uff0c\u53d8\u91cf\u540d2\uff0c\u53d8\u91cf\u540d3\uff0c... =\u5e8f\u5217 \u4f5c\u7528 \u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u6216\u4fee\u6539\u4e00\u4e2a\u53d8\u91cf\u7684\u7ed1\u5b9a\u7684\u5bf9\u8c61 \u8bf4\u660e \u5f53\u53d8\u91cf\u4e0d\u5b58\u5728\u65f6\uff0c\u521b\u5efa\u8be5\u53d8\u91cf\uff0c\u540c\u65f6\u5c06\u53d8\u91cf\u7ed1\u5b9a\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e0a \u5f53\u53d8\u91cf\u5b58\u5728\u65f6\uff0c\u6539\u53d8\u6b64\u53d8\u91cf\u7ed1\u5b9a\u7684\u5bf9\u8c61 \u4e00\u4e2a\u53d8\u91cf\u53ea\u80fd\u7ed1\u5b9a\u4e00\u4e2a\u5bf9\u8c61 \u4e24\u4e2a\u53d8\u91cf\u53ef\u4ee5\u540c\u65f6\u7ed1\u5b9a\u5728\u4e00\u4e2a\u5bf9\u8c61\u4e0a \u793a\u4f8b a = 10 b = 20 Python \u4e2d\u81ea\u52a8\u5316\u7684\u5185\u5b58\u7ba1\u7406\uff08\u91cd\u70b9\uff09 a = 10000 b = 20000 a = a + b #10000\u91ca\u653e\uff0ca\u7ed1\u5b9a\u572830000\u4e0a c = a c\u548ca\u540c\u65f6\u7ed1\u5b9a\u572830000\u4e0a Python\u4e2d \u5173\u8054/\u7ed1\u5b9a/\u5f15\u7528\u7684\u542b\u4e49 \u5728python\u4e2d\uff0c\u53d8\u91cf\u6ca1\u6709\u7c7b\u578b \u5173\u8054/\u7ed1\u5b9a/\u5f15\u7528 \u90fd\u662f\u6307\u4e00\u4e2a\u53d8\u91cf\u548c\u4e00\u4e2a\u5bf9\u8c61\u7684\u5173\u8054\u5173\u7cfb \u7ec3\u4e601 \u00b6 \u7ec3\u4e60\uff1a 1/ \u6307\u5b9a\u4e00\u4e2a\u534a\u5f84\u4e3ar = 3 \u5398\u7c73\u7684\u5706 (1) \u8ba1\u7b97\u5706\u7684\u5468\u957f\u662f\u591a\u5c11\u5398\u7c73 (2) \u8ba1\u7b97\u5706\u7684\u9762\u79ef\u662f\u591a\u5c11\u5e73\u65b9\u5398\u7c73 2/ \u5df2\u77e5\u6709\u4e24\u4e2a\u53d8\u91cf a \u7ed1\u5b9a 10000 b \u7ed1\u5b9a 20000 \u95ee\uff1a \u5728\u4e0d\u521b\u5efa\u4efb\u4f55\u65b0\u5bf9\u8c61\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u8ba9a\u548cb\u4ea4\u6362\u7ed1\u5b9a\u7684\u5bf9\u8c61 \u7b54\uff1a a, b = b ,a #\u5e8f\u5217\u8d4b\u503c \u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u67e5\u770b\u5f53\u524d\u4f5c\u7528\u57df\u5185\u7684\u6240\u6709\u53d8\u91cf \u00b6 >>>help('__main__') \u9000\u51fa\u952e \u6ce8\uff1ahelp\u51fd\u6570\u7528\u6765\u67e5\u770b\u5e2e\u52a9\u6216\u8fd0\u884c\u65f6\u4fe1\u606f del\u8bed\u53e5 \uff08delete\u7b80\u5199\uff09 \u00b6 \u200b \u7528\u4e8e\u5220\u9664\u53d8\u91cf\uff0c\u540c\u65f6\u89e3\u9664\u6b64\u53d8\u91cf\u4e0e\u5bf9\u8c61\u7684\u7ed1\u5b9a\u5173\u7cfb \u200b \u5982\u679c\u53ef\u80fd\u5219\u91ca\u653e\u5bf9\u8c61 \u8bed\u6cd5 del \u53d8\u91cf\u540d \u81ea\u52a8\u5316\u5185\u5b58\u7ba1\u7406\u548c\u5f15\u7528\u8ba1\u6570 \u00b6 \u6bcf\u4e2a\u5bf9\u8c61\u4f1a\u8bb0\u5f55\u6709\u51e0\u4e2a\u53d8\u91cf\u5f15\u7528\u81ea\u8eab\uff0c\u5f53\u5f15\u7528\u7684\u6570\u91cf\u4e3a0\u65f6\u6b64\u5bf9\u8c61\u88ab\u9500\u6bc1\uff0c\u6b64\u79cd\u81ea\u52a8\u5316\u5185\u5b58\u7ba1\u7406\u7684\u65b9\u5f0f\u53eb\u5f15\u7528\u8ba1\u6570 is/is not \u8fd0\u7b97\u7b26 \u00b6 is\u7684\u4f5c\u7528\uff1a\u5224\u65ad\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5f53\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse is not \u7684\u4f5c\u7528\u4e0e is\u76f8\u53cd \u8bed\u6cd5 x is y x is not y \u5c0f\u6574\u6570\u5bf9\u8c61\u6c60 \u00b6 CPython \u4e2d \u6574\u6570 -5 \u81f3 256\u6c38\u8fdc\u5b58\u5728\u4e8e\u5c0f\u6574\u6570\u5bf9\u8c61\u6c60\u4e2d\uff0c\u4e0d\u4f1a\u91ca\u653e\u5e76\u53ef\u91cd\u590d\u4f7f\u7528 id(x) \u51fd\u6570 \u00b6 \u4f5c\u7528\uff1a\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740 \u7ec3\u4e602 \u00b6 \u7ec3\u4e60\uff1a 1/ \u5728\u7ec8\u7aef\u6253\u5370\u51fa\u5982\u4e0b\u56fe\u5f62 * *** ***** ******* print(' * \\n *** \\n ***** \\n*******') 2/ \u4e2d\u56fd\u53e4\u4ee3\u7684\u79e4\u662f16\u4e24\u4e00\u65a4\uff0c\u8bf7\u95ee\u4e2d\u56fd\u53e4\u4ee3\u7684216\u4e24\u662f\u53e4\u4ee3\u7684\u51e0\u65a4\u51e0\u4e24\uff0c\u5199\u7a0b\u5e8f\u6253\u5370\u51fa\u6765 >>> 216//16 13 \u65a4 >>> 216%16 8 \u4e24 print('\u53e4\u4ee3\u7684216\u4e24\u662f\uff1a',216//16,'\u65a4',216%16,'\u4e24') 3/ \u4ece\u51cc\u66680\uff1a0\uff1a0\u8ba1\u65f6\uff0c\u5230\u73b0\u5728\u5df2\u7ecf\u8fc7\u4e8663320\u79d2 \u8bf7\u95ee\u73b0\u5728\u662f\u51e0\u65f6\u51e0\u5206\u51e0\u79d2\uff1f \u5199\u7a0b\u5e8f\u6253\u5370\u51fa\u6765 >>> 63320//(60*60) 17 >>> (63320-(60*60)*17)//60 35 >>> ((63320-(60*60)*17)-(35*60)) 20 print('63320\u79d2\u662f\uff1a',63320//(60*60),'\u65f6',(63320-(60*60)*17)//60,'\u5206',((63320-(60*60)*17)-(35*60)),'\u79d2') 4/ \u6e29\u5ea6\u8f6c\u6362 \u6444\u6c0f\u6e29\u5ea6 = 5.0 /9.0 *\uff08\u534e\u6c0f\u6e29\u5ea6-32\uff09 \u5f00\u6c0f\u6e29\u5ea6 = \u6444\u6c0f\u6e29\u5ea6 + 273.15 \u95ee\uff1a100\u534e\u6c0f\u6e29\u5ea6\u8f6c\u4e3a\u6444\u6c0f\u6e29\u5ea6\u662f\u591a\u5c11\u5ea6\uff1f \u8f6c\u4e3a\u5f00\u6c0f\u6e29\u5ea6\u662f\u591a\u5c11\u5ea6\uff1f >>> 5.0/9.0*(100-32) 37.77777777777778 >>> 37.777777777777+273.15 310.92777777777695 >>>","title":"1. python\u76f8\u5173\u4ecb\u7ecd"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#python","text":"\u200b \u521b\u5efa\u4eba\uff1aGuido Van Rossum(\u8377\u5170\u4eba) \u200b \u65f6 \u95f4\uff1a1989\u5e74\u521b\u5efapython","title":"Python \u7b80\u4ecb"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#python_1","text":"/\u7cfb\u7edf\u8fd0\u7ef4 /\u7f51\u7edc\u7f16\u7a0b /\u79d1\u5b66\u8ba1\u7b97 /\u4eba\u5de5\u667a\u80fd /\u673a\u5668\u4eba /web\u5f00\u53d1 /\u4e91\u8ba1\u7b97 /\u5927\u6570\u636e\u53ca\u6570\u636e\u5e93\u7f16\u7a0b /\u6559\u80b2 /\u6e38\u620f\uff0c\u56fe\u50cf /\u5176\u4ed6","title":"Python\u7684\u5e94\u7528\u9886\u57df"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#python_2","text":"\u200b \u9762\u5411\u5bf9\u8c61 \u200b \u514d\u8d39 \u200b \u53ef\u79fb\u690d \u200b \u53ef\u6df7\u5408\u7f16\u7a0b \u200b \u7b80\u5355\u6613\u5b66\u6613\u7528 \u5f00\u53d1\u6548\u7387\u9ad8 \u200b \u5e94\u7528\u9886\u57df\u5e7f\u6cdb \u200b \u5f00\u6e90 \u200b \u7f3a\u70b9 \u200b \u4e0eC/C++\u76f8\u6bd4\uff0c\u6267\u884c\u901f\u5ea6\u4e0d\u591f\u5feb \u200b \u4e0d\u80fd\u5c01\u95ed\u6e90\u4ee3\u7801","title":"Python\u4f18\u7f3a\u70b9"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#python_3","text":"https://www.python.org","title":"Python\u7684\u5b98\u7f51"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#python_4","text":"\u200b CPython (C\u8bed\u8a00\u5f00\u53d1) \u200b Iython (Java\u5f00\u53d1) \u200b IronPython (.net\u5f00\u53d1)","title":"python\u7684\u89e3\u91ca\u6267\u884c\u5668"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#_1","text":".py python\u6587\u4ef6\u7684\u540e\u7f00 .c C\u8bed\u8a00\u6587\u4ef6\u7684\u540e\u7f00 .cpp C++\u8bed\u8a00\u6587\u4ef6\u7684\u540e\u7f00 .java Java\u8bed\u8a00\u6587\u4ef6\u7684\u540e\u7f00","title":"\u5e38\u7528\u7684\u7a0b\u5e8f\u6587\u4ef6\u7684\u540e\u7f00"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#_2","text":"\u8fdb\u5165python\u4ea4\u4e92\u73af\u5883 python3 \u56de\u8f66 \u9000\u51fa exit() qiue() \u8f93\u5165 Ctrl + d \uff08\u8f93\u5165\u6587\u4ef6\u7ed3\u675f\u7b26\uff09","title":"\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u7f16\u5199\u5e76\u6267\u884c\u4ee3\u7801"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#python_5","text":"#\u5f00\u5934\u76f4\u81f3\u884c\u5c3e \u4f5c\u7528\uff1a\u8ba9\u6ce8\u91ca\u5185\u5bb9\u4e0d\u53c2\u52a0\u6267\u884c","title":"Python\u7684\u6ce8\u91ca"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#python_6","text":"\u6570\u5b57\uff08\u6574\u578b/\u6d6e\u70b9\u578b/\u590d\u6570/\u5e03\u5c14\u578b\uff09 \u5b57\u7b26\u4e32 str \u5217\u8868 list ... \u6570\u5b57 \u6574\u578b\u6570 int \u6574\u578b\u6570\u662f\u4e0d\u5e26\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u636e\uff0c\u5305\u62ec\u81ea\u7136\u6570\uff0c\u8d1f\u6570 \u5982\uff1a-5\uff0c0\uff0c100\u7b49 \u6574\u578b\u5b57\u9762\u503c\u7684\u8868\u793a\u65b9\u5f0f \u5341\u8fdb\u5236\u8868\u793a 10\uff0c 200\uff0c-100\uff0c99999999 \u516b\u8fdb\u5236\u8868\u793a\uff080o\u5f00\u5934\uff0c\u540e\u8ddf0~7\uff09 0o11 (9) 0o177 (127) \u5341\u516d\u8fdb\u5236\u8868\u793a\uff080x\u5f00\u5934\uff0c\u540e\u8ddf0-9\uff0cA-F,a-f\uff09 \u6ce8\uff1aa\u8868\u793a10\uff0cb\u8868\u793a11\u3002\u3002\u3002\u3002f\u8868\u793a15 0x11 \uff0817\uff09 0xff (255) 0x1234zbcd \u4e8c\u8fdb\u5236\u7684\u8868\u793a\uff080b\u5f00\u5934\uff0c\u540e\u8ddf0-1\uff09 0b111 (7) 0b1000 (8) \u6d6e\u70b9\u6570\u7684\u8868\u793a\u65b9\u5f0f \u6d6e\u70b9\u6570\u662f\u5e26\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\uff08\u5c0f\u6570\u90e8\u5206\u53ef\u4ee5\u662f0\uff09 \u6d6e\u70b9\u6570\u7684\u4e24\u79cd\u8868\u793a\u65b9\u5f0f\uff1a \u5c0f\u6570\u5f62\u5f0f 3.14 3.1 3. 0.14 .14 \u79d1\u5b66\u8ba1\u6570\u6cd5 \u5c0f\u6570e/E\uff08\u6b63\u8d1f\u53f7\uff09\u6307\u6570 \u5982\uff1a 6.18E-1 (\u7b49\u540c\u4e8e0.618) 2.9979e8 (\u7b49\u540c\u4e8e299790000.0) \u590d\u6570complex \u5206\u4e3a\u4e24\u90e8\u5206 \u5b9e\u90e8\uff08real\uff09 \u865a\u90e8\uff08image\uff09 \u6ce8\uff1a\u865a\u90e8\u662f\u4ee5j\u6216J\u7ed3\u5c3e \u590d\u6570\u7684\u5b57\u9762\u503c\u8868\u793a\uff1a 1j (2J) 1+1J 1-1j (-100+100J) \u5e03\u5c14\u578b\u6570 \u7528\u6765\u8868\u793a\u771f\u548c\u5047\u4e24\u79cd\u72b6\u6001\u7684\u7c7b\u578b True \u8868\u793a\u771f\uff08\u6761\u4ef6\u6ee1\u8db3\u6216\u6210\u7acb\uff09 False \u8868\u793a\u5047\uff08\u6761\u4ef6\u4e0d\u6ee1\u8db3\u6216\u4e0d\u6210\u7acb\uff09 \u8bf4\u660e True \u7684\u503c\u662f1 False \u7684\u503c\u662f0 \u7a7a\u503cNone None\u662f\u4e00\u4e2a\u8868\u793a\u4e0d\u5b58\u5728\u7684\u7279\u6b8a\u5bf9\u8c61 \u4f5c\u7528\uff1a \u7528\u6765\u5360\u4f4d/\u53d8\u91cf\u89e3\u9664\u7ed1\u5b9a \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8868\u8fbe\u5f0fexpression \u7531\u4e00\u4e2a\u6570\u5b57\u6216\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u7ec4\u6210 \u4f5c\u7528 \u901a\u5e38\u8ba9\u8ba1\u7b97\u673a\u505a\u4e00\u4e9b\u4e8b\u60c5\u5e76\u8fd4\u56de\u7ed3\u679c \u5982 1 + 2 * 3 - 4 \u7b97\u672f\u8fd0\u7b97\u7b26 + \u52a0\u6cd5 - \u51cf\u6cd5 * \u4e58\u6cd5 / \u9664\u6cd5 // \u5730\u677f\u9664 floordiv % \u6c42\u4f59 ** \u5e42\u8fd0\u7b97 /\u9664\u6cd5 \u5f97\u5230\u7684\u6570\u662f\u6d6e\u70b9\u6570\uff0c\u4e0d\u4f1a\u4e22\u5f03\u5c0f\u6570\u90e8\u5206 1/3 \u5f97 0.333333333333 8/2 \u5f97 4.0 //\u5730\u677f\u9664 \u9664\u7684\u7ed3\u679c\u53bb\u6389\u5c0f\u6570\u90e8\u5206\u5411\u4e0b\u53d6\u6574 7/3 \u5f972.3333333333333 7//3 \u5f972 8//3 \u5f972 3.25//1.5 \u5f972.0 %\u6c42\u4f59 7%3 \u5f971 3.25%1.5 \u5f970.25 \u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 ** * / // % + - \u62ec\u53f7\u5206\u7ec4\u5b50\u8868\u8fbe\u5f0f \u7528\uff08\uff09\u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u5206\u7ec4\uff0c\uff08\uff09\u5185\u90e8\u7684\u8868\u8fbe\u5f0f\u5148\u8fdb\u884c\u8ba1\u7b97 \u6df7\u5408\u7c7b\u578b\u81ea\u52a8\u5347\u7ea7 1 + 2.14 \u8fd4\u56de\u7c7b\u578b\u4e3a\u6d6e\u70b9\u578b 3.14 \u57fa\u672c\u8f93\u51fa\u51fd\u6570 print('\u8981\u6253\u5370\u7684\u4e1c\u897f') \u53d8\u91cf \u53d8\u91cf\u662f\u5173\u8054\u4e00\u4e2a\u5bf9\u8c61\u7684\u6807\u8bc6\u7b26 \u53d8\u91cf\u53ef\u4ee5\u7ed1\u5b9a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u540d\u6765\u4f7f\u7528\u8fd9\u4e2a\u5bf9\u8c61\u6807\u8bc6\u7b26\u7684\u547d\u540d\u65b9\u6cd5 \u6807\u8bc6\u7b26\u5fc5\u987b\u4e3a\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u540e\u8ddf\u5b57\u6bcd\u6216\u4e0b\u5212\u7ebf\u6216\u6570\u5b57 \u8bf4\u660e \u4e0d\u80fd\u7528python\u7684\u5173\u952e\u5b57\u4f5c\u53d8\u91cf\u540d python\u53d8\u91cf\u540d\u533a\u5206\u5927\u5c0f\u5199 \u5408\u6cd5\u7684\u53d8\u91cf\u793a\u4f8b a a1 b bbb _a __ABCD var alb2 \u4e0d\u5408\u6cd5\u7684\u53d8\u91cf\u540d\u793a\u4f8b 1a 123 $ABC +a -b @abc \u8d4b\u503c\u8bed\u53e5 \u8bed\u6cd5 \u53d8\u91cf = \u8868\u8fbe\u5f0f \u53d8\u91cf\u540d1 = \u53d8\u91cf\u540d2 = \u53d8\u91cf\u540d3 = \u8868\u8fbe\u5f0f \u53d8\u91cf\u540d1\uff0c\u53d8\u91cf\u540d2\uff0c\u53d8\u91cf\u540d3\uff0c... =\u5e8f\u5217 \u4f5c\u7528 \u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u6216\u4fee\u6539\u4e00\u4e2a\u53d8\u91cf\u7684\u7ed1\u5b9a\u7684\u5bf9\u8c61 \u8bf4\u660e \u5f53\u53d8\u91cf\u4e0d\u5b58\u5728\u65f6\uff0c\u521b\u5efa\u8be5\u53d8\u91cf\uff0c\u540c\u65f6\u5c06\u53d8\u91cf\u7ed1\u5b9a\u5728\u8fd9\u4e2a\u5bf9\u8c61\u4e0a \u5f53\u53d8\u91cf\u5b58\u5728\u65f6\uff0c\u6539\u53d8\u6b64\u53d8\u91cf\u7ed1\u5b9a\u7684\u5bf9\u8c61 \u4e00\u4e2a\u53d8\u91cf\u53ea\u80fd\u7ed1\u5b9a\u4e00\u4e2a\u5bf9\u8c61 \u4e24\u4e2a\u53d8\u91cf\u53ef\u4ee5\u540c\u65f6\u7ed1\u5b9a\u5728\u4e00\u4e2a\u5bf9\u8c61\u4e0a \u793a\u4f8b a = 10 b = 20 Python \u4e2d\u81ea\u52a8\u5316\u7684\u5185\u5b58\u7ba1\u7406\uff08\u91cd\u70b9\uff09 a = 10000 b = 20000 a = a + b #10000\u91ca\u653e\uff0ca\u7ed1\u5b9a\u572830000\u4e0a c = a c\u548ca\u540c\u65f6\u7ed1\u5b9a\u572830000\u4e0a Python\u4e2d \u5173\u8054/\u7ed1\u5b9a/\u5f15\u7528\u7684\u542b\u4e49 \u5728python\u4e2d\uff0c\u53d8\u91cf\u6ca1\u6709\u7c7b\u578b \u5173\u8054/\u7ed1\u5b9a/\u5f15\u7528 \u90fd\u662f\u6307\u4e00\u4e2a\u53d8\u91cf\u548c\u4e00\u4e2a\u5bf9\u8c61\u7684\u5173\u8054\u5173\u7cfb","title":"Python\u7684\u6838\u5fc3\u6570\u636e\u7c7b\u578b"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#1","text":"\u7ec3\u4e60\uff1a 1/ \u6307\u5b9a\u4e00\u4e2a\u534a\u5f84\u4e3ar = 3 \u5398\u7c73\u7684\u5706 (1) \u8ba1\u7b97\u5706\u7684\u5468\u957f\u662f\u591a\u5c11\u5398\u7c73 (2) \u8ba1\u7b97\u5706\u7684\u9762\u79ef\u662f\u591a\u5c11\u5e73\u65b9\u5398\u7c73 2/ \u5df2\u77e5\u6709\u4e24\u4e2a\u53d8\u91cf a \u7ed1\u5b9a 10000 b \u7ed1\u5b9a 20000 \u95ee\uff1a \u5728\u4e0d\u521b\u5efa\u4efb\u4f55\u65b0\u5bf9\u8c61\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u4f55\u8ba9a\u548cb\u4ea4\u6362\u7ed1\u5b9a\u7684\u5bf9\u8c61 \u7b54\uff1a a, b = b ,a #\u5e8f\u5217\u8d4b\u503c","title":"\u7ec3\u4e601"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#_3","text":">>>help('__main__') \u9000\u51fa\u952e \u6ce8\uff1ahelp\u51fd\u6570\u7528\u6765\u67e5\u770b\u5e2e\u52a9\u6216\u8fd0\u884c\u65f6\u4fe1\u606f","title":"\u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u67e5\u770b\u5f53\u524d\u4f5c\u7528\u57df\u5185\u7684\u6240\u6709\u53d8\u91cf"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#del-delete","text":"\u200b \u7528\u4e8e\u5220\u9664\u53d8\u91cf\uff0c\u540c\u65f6\u89e3\u9664\u6b64\u53d8\u91cf\u4e0e\u5bf9\u8c61\u7684\u7ed1\u5b9a\u5173\u7cfb \u200b \u5982\u679c\u53ef\u80fd\u5219\u91ca\u653e\u5bf9\u8c61 \u8bed\u6cd5 del \u53d8\u91cf\u540d","title":"del\u8bed\u53e5 \uff08delete\u7b80\u5199\uff09"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#_4","text":"\u6bcf\u4e2a\u5bf9\u8c61\u4f1a\u8bb0\u5f55\u6709\u51e0\u4e2a\u53d8\u91cf\u5f15\u7528\u81ea\u8eab\uff0c\u5f53\u5f15\u7528\u7684\u6570\u91cf\u4e3a0\u65f6\u6b64\u5bf9\u8c61\u88ab\u9500\u6bc1\uff0c\u6b64\u79cd\u81ea\u52a8\u5316\u5185\u5b58\u7ba1\u7406\u7684\u65b9\u5f0f\u53eb\u5f15\u7528\u8ba1\u6570","title":"\u81ea\u52a8\u5316\u5185\u5b58\u7ba1\u7406\u548c\u5f15\u7528\u8ba1\u6570"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#isis-not","text":"is\u7684\u4f5c\u7528\uff1a\u5224\u65ad\u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5f53\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse is not \u7684\u4f5c\u7528\u4e0e is\u76f8\u53cd \u8bed\u6cd5 x is y x is not y","title":"is/is not \u8fd0\u7b97\u7b26"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#_5","text":"CPython \u4e2d \u6574\u6570 -5 \u81f3 256\u6c38\u8fdc\u5b58\u5728\u4e8e\u5c0f\u6574\u6570\u5bf9\u8c61\u6c60\u4e2d\uff0c\u4e0d\u4f1a\u91ca\u653e\u5e76\u53ef\u91cd\u590d\u4f7f\u7528","title":"\u5c0f\u6574\u6570\u5bf9\u8c61\u6c60"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#idx","text":"\u4f5c\u7528\uff1a\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740","title":"id(x) \u51fd\u6570"},{"location":"python/python%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/#2","text":"\u7ec3\u4e60\uff1a 1/ \u5728\u7ec8\u7aef\u6253\u5370\u51fa\u5982\u4e0b\u56fe\u5f62 * *** ***** ******* print(' * \\n *** \\n ***** \\n*******') 2/ \u4e2d\u56fd\u53e4\u4ee3\u7684\u79e4\u662f16\u4e24\u4e00\u65a4\uff0c\u8bf7\u95ee\u4e2d\u56fd\u53e4\u4ee3\u7684216\u4e24\u662f\u53e4\u4ee3\u7684\u51e0\u65a4\u51e0\u4e24\uff0c\u5199\u7a0b\u5e8f\u6253\u5370\u51fa\u6765 >>> 216//16 13 \u65a4 >>> 216%16 8 \u4e24 print('\u53e4\u4ee3\u7684216\u4e24\u662f\uff1a',216//16,'\u65a4',216%16,'\u4e24') 3/ \u4ece\u51cc\u66680\uff1a0\uff1a0\u8ba1\u65f6\uff0c\u5230\u73b0\u5728\u5df2\u7ecf\u8fc7\u4e8663320\u79d2 \u8bf7\u95ee\u73b0\u5728\u662f\u51e0\u65f6\u51e0\u5206\u51e0\u79d2\uff1f \u5199\u7a0b\u5e8f\u6253\u5370\u51fa\u6765 >>> 63320//(60*60) 17 >>> (63320-(60*60)*17)//60 35 >>> ((63320-(60*60)*17)-(35*60)) 20 print('63320\u79d2\u662f\uff1a',63320//(60*60),'\u65f6',(63320-(60*60)*17)//60,'\u5206',((63320-(60*60)*17)-(35*60)),'\u79d2') 4/ \u6e29\u5ea6\u8f6c\u6362 \u6444\u6c0f\u6e29\u5ea6 = 5.0 /9.0 *\uff08\u534e\u6c0f\u6e29\u5ea6-32\uff09 \u5f00\u6c0f\u6e29\u5ea6 = \u6444\u6c0f\u6e29\u5ea6 + 273.15 \u95ee\uff1a100\u534e\u6c0f\u6e29\u5ea6\u8f6c\u4e3a\u6444\u6c0f\u6e29\u5ea6\u662f\u591a\u5c11\u5ea6\uff1f \u8f6c\u4e3a\u5f00\u6c0f\u6e29\u5ea6\u662f\u591a\u5c11\u5ea6\uff1f >>> 5.0/9.0*(100-32) 37.77777777777778 >>> 37.777777777777+273.15 310.92777777777695 >>>","title":"\u7ec3\u4e602"},{"location":"python/python%E8%A3%85%E9%A5%B0%E5%99%A8/","text":"\u88c5\u9970\u5668 decorator \u00b6 \u4ec0\u4e48\u662f\u88c5\u9970\u5668 \u88c5\u9970\u5668\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u7528\u6765\u5305\u88c5\u53e6\u4e00\u4e2a\u51fd\u6570\u6216\u7c7b \u5305\u88c5\u7684\u76ee\u7684\u662f\u5728\u4e0d\u6539\u53d8\u539f\u51fd\u6570\uff08\u6216\u7c7b\u540d\uff09\u7684\u60c5\u51b5\u4e0b\u6539\u53d8\u88ab\u5305\u88c5\u5bf9\u8c61\u7684\u884c\u4e3a \u51fd\u6570\u88c5\u9970\u5668 \u00b6 \u662f\u6307\u88c5\u9970\u5668\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u51fd\u6570 \u8bed\u6cd5 def \u88c5\u9970\u5668\u51fd\u6570\u540d(\u53c2\u6570): \u8bed\u53e5\u5757 return \u51fd\u6570\u5bf9\u8c61 @\u88c5\u9970\u5668\u51fd\u6570\u540d<\u6362\u884c> def \u51fd\u6570\u540d(\u5f62\u53c2\u5217\u8868): \u8bed\u53e5\u5757 \u539f\u7406 \u88ab\u88c5\u9970\u5668\u51fd\u6570\u7684\u53d8\u91cf\uff08\u51fd\u6570\u540d\uff09\u7ed1\u5b9a\u88c5\u9970\u5668\u51fd\u6570\u8c03\u7528\u540e\u7684\u8fd4\u56de\u7684\u51fd\u6570 # \u6b64\u793a\u4f8b\u793a\u610f\u88c5\u9970\u5668\u51fd\u6570\u7684\u5b9a\u4e49\u548c\u8c03\u7528\u88c5\u9970\u5668\u539f\u7406 def mydeco ( fn ): # <<<----- \u88c5\u9970\u5668\u51fd\u6570 def fx (): print ( 'fx\u88ab\u8c03\u7528' ) return fx @mydeco def myfun (): print ( 'myfun\u88ab\u8c03\u7528' ) # \u4e0a\u8ff0 mydeco\u7684\u539f\u7406\u662f\u5728 def myfun\u8bed\u53e5\u8c03\u7528\u4e4b\u540e\u52a0\u4e86\u4e00\u6761\u5982\u4e0b\u8bed\u53e5 # myfun = mydeco(myfun) myfun () #\u8c03\u7528myfun myfun () myfun () # \u6b64\u793a\u4f8b\u793a\u610f\u88c5\u9970\u5668\u51fd\u6570\u7528\u6765\u5305\u88c5\u88ab\u88c5\u675f\u51fd\u6570 def mydeco ( fn ): # <<<----- \u88c5\u9970\u5668\u51fd\u6570 def fx (): print ( '------\u8fd9\u4e2a\u88ab\u88c5\u9970\u51fd\u6570\u8c03\u7528\u4e4b\u524d-------' ) fn () # \u88ab\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570 print ( '++++++\u8fd9\u4e2a\u88ab\u88c5\u9970\u51fd\u6570\u8c03\u7528\u4e4b\u540e+++++++' ) return fx @mydeco def myfun (): print ( 'myfun\u88ab\u8c03\u7528' ) # \u4e0a\u8ff0 mydeco\u7684\u539f\u7406\u662f\u5728 def myfun\u8bed\u53e5\u8c03\u7528\u4e4b\u540e\u52a0\u4e86\u4e00\u6761\u5982\u4e0b\u8bed\u53e5 # myfun = mydeco(myfun) myfun () #\u8c03\u7528myfun myfun () myfun () # \u6b64\u793a\u4f8b\u793a\u610f\u88c5\u9970\u5668\u7684\u5e94\u7528\u573a\u5408\u53ca\u529f\u80fd # ---------------------\u4ee5\u4e0b\u662f\u9b4f\u8001\u5e08\u5199\u7684\u7a0b\u5e8f-------------------------- def privileged_check ( fn ): def fx ( name , x ): print ( '\u6b63\u5728\u8fdb\u884c\u6743\u9650\u9a8c\u8bc1\u3002\u3002\u3002' ) if True : fn ( name , x ) else : print ( '\u6743\u9650\u9a8c\u8bc1\u5931\u8d25' ) return fx def message_send ( fn ): def fy ( n , money ): fn ( n , money ) # \u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570 print ( '\u6b63\u5728\u53d1\u9001\u77ed\u4fe1\u7ed9' , n , '...' ) return fy # ---------------------\u4ee5\u4e0b\u662f\u9b4f\u8001\u5e08\u5199\u7684\u7a0b\u5e8f-------------------------- @ message_send @ privileged_check def savemoney ( name , x ): print ( name , '\u5b58\u94b1' , x , '\u5143' ) # \u5b9e\u8d28\u662f # savemoney = privileged_check(savemoney) # savemoney = message_send(savemoney) def withdraw ( name , x ): print ( name , '\u53d6\u94b1' , x , '\u5143' ) # ---------------------\u4ee5\u4e0b\u662f\u8c03\u7528\u8005\u5199\u7684\u7a0b\u5e8f-------------------------- savemoney ( '\u5c0f\u738b' , 200 ) savemoney ( '\u5c0f\u8d75' , 400 ) withdraw ( '\u5c0f\u674e' , 500 ) \u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u00b6 \u51fd\u6570\u5185\u7b2c\u4e00\u6b21\u672a\u8d4b\u503c\u7ed9\u4efb\u4f55\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u662f\u6b64\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u8bed\u6cd5 def \u51fd\u6570\u540d(\u53c2\u6570\u5217\u8868): '''\u51fd\u6570\u6587\u6863\u5b57\u7b26\u4e32''' \u8bed\u53e5\u5757 \u8bf4\u660e 1. \u6587\u6863\u5b57\u7b26\u4e32\u901a\u5e38\u7528\u6765\u8bf4\u660e\u51fd\u6570\u529f\u80fd\u548c\u4f7f\u7528\u65b9\u6cd5 2. \u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\uff0c\u8f93\u5165: >>>help(\u51fd\u6570\u540d) \u53ef\u4ee5\u67e5\u770b\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32 3. \u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u7ed1\u5b9a\u5728\u51fd\u6570\u7684__doc__\u5c5e\u6027\u4e0a \u793a\u4f8b def mysum(n): '''1 + 2 + 3 + 4 + ...+ n''' return 100 help(mysum) \u51fd\u6570\u7684__doc__\u5c5e\u6027 __doc__\u5c5e\u6027\u7528\u4e8e\u8bb0\u5f55\u6587\u6863\u5b57\u7b26\u4e32 \u51fd\u6570\u7684__name__\u5c5e\u6027 __name__\u5c5e\u6027\u7528\u4e8e\u8bb0\u5f55\u51fd\u6570\u540d \u8bf4\u660e \u4ee5\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4ee5\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u6807\u8bc6\u7b26\u901a\u5e38\u4ee3\u8868python\u7684\u7279\u6b8a\u53d8\u91cf \u51fd\u6570\u5b9a\u4e49\u7684\u5b8c\u6574\u8bed\u6cd5 \u00b6 [@\u88c5\u9970\u5668\u540d1] [@\u88c5\u9970\u5668\u540d2] [...] def \u51fd\u6570\u540d(\u4f4d\u7f6e\u5f62\u53c2, *\u5143\u7ec4\u5f62\u53c2, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2, **\u5b57\u5178\u5f62\u53c2): '''\u6587\u6863\u5b57\u7b26\u4e32''' \u8bed\u53e5\u5757","title":"13. \u88c5\u9970\u5668"},{"location":"python/python%E8%A3%85%E9%A5%B0%E5%99%A8/#decorator","text":"\u4ec0\u4e48\u662f\u88c5\u9970\u5668 \u88c5\u9970\u5668\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4e3b\u8981\u4f5c\u7528\u662f\u7528\u6765\u5305\u88c5\u53e6\u4e00\u4e2a\u51fd\u6570\u6216\u7c7b \u5305\u88c5\u7684\u76ee\u7684\u662f\u5728\u4e0d\u6539\u53d8\u539f\u51fd\u6570\uff08\u6216\u7c7b\u540d\uff09\u7684\u60c5\u51b5\u4e0b\u6539\u53d8\u88ab\u5305\u88c5\u5bf9\u8c61\u7684\u884c\u4e3a","title":"\u88c5\u9970\u5668 decorator"},{"location":"python/python%E8%A3%85%E9%A5%B0%E5%99%A8/#_1","text":"\u662f\u6307\u88c5\u9970\u5668\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f20\u5165\u7684\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u51fd\u6570 \u8bed\u6cd5 def \u88c5\u9970\u5668\u51fd\u6570\u540d(\u53c2\u6570): \u8bed\u53e5\u5757 return \u51fd\u6570\u5bf9\u8c61 @\u88c5\u9970\u5668\u51fd\u6570\u540d<\u6362\u884c> def \u51fd\u6570\u540d(\u5f62\u53c2\u5217\u8868): \u8bed\u53e5\u5757 \u539f\u7406 \u88ab\u88c5\u9970\u5668\u51fd\u6570\u7684\u53d8\u91cf\uff08\u51fd\u6570\u540d\uff09\u7ed1\u5b9a\u88c5\u9970\u5668\u51fd\u6570\u8c03\u7528\u540e\u7684\u8fd4\u56de\u7684\u51fd\u6570 # \u6b64\u793a\u4f8b\u793a\u610f\u88c5\u9970\u5668\u51fd\u6570\u7684\u5b9a\u4e49\u548c\u8c03\u7528\u88c5\u9970\u5668\u539f\u7406 def mydeco ( fn ): # <<<----- \u88c5\u9970\u5668\u51fd\u6570 def fx (): print ( 'fx\u88ab\u8c03\u7528' ) return fx @mydeco def myfun (): print ( 'myfun\u88ab\u8c03\u7528' ) # \u4e0a\u8ff0 mydeco\u7684\u539f\u7406\u662f\u5728 def myfun\u8bed\u53e5\u8c03\u7528\u4e4b\u540e\u52a0\u4e86\u4e00\u6761\u5982\u4e0b\u8bed\u53e5 # myfun = mydeco(myfun) myfun () #\u8c03\u7528myfun myfun () myfun () # \u6b64\u793a\u4f8b\u793a\u610f\u88c5\u9970\u5668\u51fd\u6570\u7528\u6765\u5305\u88c5\u88ab\u88c5\u675f\u51fd\u6570 def mydeco ( fn ): # <<<----- \u88c5\u9970\u5668\u51fd\u6570 def fx (): print ( '------\u8fd9\u4e2a\u88ab\u88c5\u9970\u51fd\u6570\u8c03\u7528\u4e4b\u524d-------' ) fn () # \u88ab\u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570 print ( '++++++\u8fd9\u4e2a\u88ab\u88c5\u9970\u51fd\u6570\u8c03\u7528\u4e4b\u540e+++++++' ) return fx @mydeco def myfun (): print ( 'myfun\u88ab\u8c03\u7528' ) # \u4e0a\u8ff0 mydeco\u7684\u539f\u7406\u662f\u5728 def myfun\u8bed\u53e5\u8c03\u7528\u4e4b\u540e\u52a0\u4e86\u4e00\u6761\u5982\u4e0b\u8bed\u53e5 # myfun = mydeco(myfun) myfun () #\u8c03\u7528myfun myfun () myfun () # \u6b64\u793a\u4f8b\u793a\u610f\u88c5\u9970\u5668\u7684\u5e94\u7528\u573a\u5408\u53ca\u529f\u80fd # ---------------------\u4ee5\u4e0b\u662f\u9b4f\u8001\u5e08\u5199\u7684\u7a0b\u5e8f-------------------------- def privileged_check ( fn ): def fx ( name , x ): print ( '\u6b63\u5728\u8fdb\u884c\u6743\u9650\u9a8c\u8bc1\u3002\u3002\u3002' ) if True : fn ( name , x ) else : print ( '\u6743\u9650\u9a8c\u8bc1\u5931\u8d25' ) return fx def message_send ( fn ): def fy ( n , money ): fn ( n , money ) # \u8c03\u7528\u88ab\u88c5\u9970\u51fd\u6570 print ( '\u6b63\u5728\u53d1\u9001\u77ed\u4fe1\u7ed9' , n , '...' ) return fy # ---------------------\u4ee5\u4e0b\u662f\u9b4f\u8001\u5e08\u5199\u7684\u7a0b\u5e8f-------------------------- @ message_send @ privileged_check def savemoney ( name , x ): print ( name , '\u5b58\u94b1' , x , '\u5143' ) # \u5b9e\u8d28\u662f # savemoney = privileged_check(savemoney) # savemoney = message_send(savemoney) def withdraw ( name , x ): print ( name , '\u53d6\u94b1' , x , '\u5143' ) # ---------------------\u4ee5\u4e0b\u662f\u8c03\u7528\u8005\u5199\u7684\u7a0b\u5e8f-------------------------- savemoney ( '\u5c0f\u738b' , 200 ) savemoney ( '\u5c0f\u8d75' , 400 ) withdraw ( '\u5c0f\u674e' , 500 )","title":"\u51fd\u6570\u88c5\u9970\u5668"},{"location":"python/python%E8%A3%85%E9%A5%B0%E5%99%A8/#_2","text":"\u51fd\u6570\u5185\u7b2c\u4e00\u6b21\u672a\u8d4b\u503c\u7ed9\u4efb\u4f55\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u662f\u6b64\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u8bed\u6cd5 def \u51fd\u6570\u540d(\u53c2\u6570\u5217\u8868): '''\u51fd\u6570\u6587\u6863\u5b57\u7b26\u4e32''' \u8bed\u53e5\u5757 \u8bf4\u660e 1. \u6587\u6863\u5b57\u7b26\u4e32\u901a\u5e38\u7528\u6765\u8bf4\u660e\u51fd\u6570\u529f\u80fd\u548c\u4f7f\u7528\u65b9\u6cd5 2. \u5728\u4ea4\u4e92\u6a21\u5f0f\u4e0b\uff0c\u8f93\u5165: >>>help(\u51fd\u6570\u540d) \u53ef\u4ee5\u67e5\u770b\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32 3. \u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u7ed1\u5b9a\u5728\u51fd\u6570\u7684__doc__\u5c5e\u6027\u4e0a \u793a\u4f8b def mysum(n): '''1 + 2 + 3 + 4 + ...+ n''' return 100 help(mysum) \u51fd\u6570\u7684__doc__\u5c5e\u6027 __doc__\u5c5e\u6027\u7528\u4e8e\u8bb0\u5f55\u6587\u6863\u5b57\u7b26\u4e32 \u51fd\u6570\u7684__name__\u5c5e\u6027 __name__\u5c5e\u6027\u7528\u4e8e\u8bb0\u5f55\u51fd\u6570\u540d \u8bf4\u660e \u4ee5\u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u4ee5\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u6807\u8bc6\u7b26\u901a\u5e38\u4ee3\u8868python\u7684\u7279\u6b8a\u53d8\u91cf","title":"\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32"},{"location":"python/python%E8%A3%85%E9%A5%B0%E5%99%A8/#_3","text":"[@\u88c5\u9970\u5668\u540d1] [@\u88c5\u9970\u5668\u540d2] [...] def \u51fd\u6570\u540d(\u4f4d\u7f6e\u5f62\u53c2, *\u5143\u7ec4\u5f62\u53c2, \u547d\u540d\u5173\u952e\u5b57\u5f62\u53c2, **\u5b57\u5178\u5f62\u53c2): '''\u6587\u6863\u5b57\u7b26\u4e32''' \u8bed\u53e5\u5757","title":"\u51fd\u6570\u5b9a\u4e49\u7684\u5b8c\u6574\u8bed\u6cd5"},{"location":"python/python%E8%AE%A1%E7%AE%97%E9%87%91%E9%A2%9Ddecimal%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","text":"decimal\u6a21\u5757 \u00b6 \u7b80\u4ecb \u00b6 decimal\u610f\u601d\u4e3a\u5341\u8fdb\u5236\uff0c\u8fd9\u4e2a\u6a21\u5757\u63d0\u4f9b\u4e86\u5341\u8fdb\u5236\u6d6e\u70b9\u8fd0\u7b97\u652f\u6301\u3002 \u5e38\u7528\u65b9\u6cd5 \u00b6 \u53ef\u4ee5\u4f20\u9012\u7ed9Decimal\u6574\u578b\u6216\u8005\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u662f\u6d6e\u70b9\u6570\u636e\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u636e\u672c\u8eab\u5c31\u4e0d\u51c6\u786e\u3002 \u8981\u4ece\u6d6e\u70b9\u6570\u636e\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b from decimal import * Decimal . from_float ( 12.222 ) # \u7ed3\u679c\u4e3aDecimal('12.2219999999999995310417943983338773250579833984375') \u901a\u8fc7\u8bbe\u5b9a\u6709\u6548\u6570\u5b57\uff0c\u9650\u5b9a\u7ed3\u679c\u6837\u5f0f\uff1a from decimal import * getcontext () . prec = 6 Decimal ( 1 ) / Decimal ( 7 ) # \u7ed3\u679c\u4e3aDecimal('0.142857')\uff0c\u516d\u4e2a\u6709\u6548\u6570\u5b57 \u56db\u820d\u4e94\u5165\uff0c\u4fdd\u7559\u51e0\u4f4d\u5c0f\u6570 from decimal import * Decimal ( '50.5679' ) . quantize ( Decimal ( '0.00' )) # \u7ed3\u679c\u4e3aDecimal('50.57')\uff0c\u7ed3\u679c\u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e86\u4e24\u4f4d\u5c0f\u6570 Decimal \u7ed3\u679c\u8f6c\u5316\u4e3astring from decimal import * str ( Decimal ( '3.40' ) . quantize ( Decimal ( '0.0' ))) # \u7ed3\u679c\u4e3a'3.4'\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b","title":"python\u8ba1\u7b97\u91d1\u989ddecimal\u5e38\u7528\u64cd\u4f5c"},{"location":"python/python%E8%AE%A1%E7%AE%97%E9%87%91%E9%A2%9Ddecimal%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/#decimal","text":"","title":"decimal\u6a21\u5757"},{"location":"python/python%E8%AE%A1%E7%AE%97%E9%87%91%E9%A2%9Ddecimal%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/#_1","text":"decimal\u610f\u601d\u4e3a\u5341\u8fdb\u5236\uff0c\u8fd9\u4e2a\u6a21\u5757\u63d0\u4f9b\u4e86\u5341\u8fdb\u5236\u6d6e\u70b9\u8fd0\u7b97\u652f\u6301\u3002","title":"\u7b80\u4ecb"},{"location":"python/python%E8%AE%A1%E7%AE%97%E9%87%91%E9%A2%9Ddecimal%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/#_2","text":"\u53ef\u4ee5\u4f20\u9012\u7ed9Decimal\u6574\u578b\u6216\u8005\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u662f\u6d6e\u70b9\u6570\u636e\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u636e\u672c\u8eab\u5c31\u4e0d\u51c6\u786e\u3002 \u8981\u4ece\u6d6e\u70b9\u6570\u636e\u8f6c\u6362\u4e3aDecimal\u7c7b\u578b from decimal import * Decimal . from_float ( 12.222 ) # \u7ed3\u679c\u4e3aDecimal('12.2219999999999995310417943983338773250579833984375') \u901a\u8fc7\u8bbe\u5b9a\u6709\u6548\u6570\u5b57\uff0c\u9650\u5b9a\u7ed3\u679c\u6837\u5f0f\uff1a from decimal import * getcontext () . prec = 6 Decimal ( 1 ) / Decimal ( 7 ) # \u7ed3\u679c\u4e3aDecimal('0.142857')\uff0c\u516d\u4e2a\u6709\u6548\u6570\u5b57 \u56db\u820d\u4e94\u5165\uff0c\u4fdd\u7559\u51e0\u4f4d\u5c0f\u6570 from decimal import * Decimal ( '50.5679' ) . quantize ( Decimal ( '0.00' )) # \u7ed3\u679c\u4e3aDecimal('50.57')\uff0c\u7ed3\u679c\u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e86\u4e24\u4f4d\u5c0f\u6570 Decimal \u7ed3\u679c\u8f6c\u5316\u4e3astring from decimal import * str ( Decimal ( '3.40' ) . quantize ( Decimal ( '0.0' ))) # \u7ed3\u679c\u4e3a'3.4'\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b","title":"\u5e38\u7528\u65b9\u6cd5"},{"location":"python/python%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/","text":"\u8fd0\u7b97\u7b26\u91cd\u8f7d \u00b6 \u4ec0\u4e48\u662f\u8fd0\u7b97\u7b26\u91cd\u8f7d \u8ba9\u81ea\u5b9a\u4e49\u7684\u7c7b\u751f\u6210\u7684\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\uff0c \u80fd\u591f\u4f7f\u7528\u8fd0\u7b97\u7b26\u8fdb\u884c\u64cd\u4f5c \u4f5c\u7528 1. \u8ba9\u81ea\u5b9a\u4e49\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u50cf\u5185\u5efa\u51fd\u6570\u4e00\u6837\u8fdb\u884c\u8fd0\u7b97\u7b26\u7684\u64cd\u4f5c 2. \u8ba9\u7a0b\u5e8f\u7b80\u6d01\u6613\u8bfb 3. \u8ba9\u81ea\u5b9a\u4e49\u5bf9\u8c61\u5c06\u8fd0\u7b97\u7b26\u8d4b\u4e88\u65b0\u7684\u89c4\u5219 \u7b97\u672f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u00b6 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __add__(self, rhs) self + rhs \u52a0\u6cd5 __sub__(self, rhs) self - rhs \u51cf\u6cd5 __mul__(self, rhs) self * rhs \u4e58\u6cd5 __truediv__(self, rhs) self / rhs \u9664\u6cd5 __floordiv__(self, rhs) self // rhs \u5730\u677f\u6cd5 __mod__(self, rhs) self % rhs \u53d6\u6a21\uff08\u6c42\u4f59\uff09 __pow__(self, rhs) self ** rhs \u5e42\u8fd0\u7b97 rhs (right hand side) \u53f3\u624b\u8fb9 \u8bf4\u660e \u8fd0\u7b97\u7b26\u91cd\u8f7d\u65b9\u6cd5\u7684\u53c2\u6570\u5df2\u7ecf\u6709\u56fa\u5b9a\u7684\u542b\u4e49\uff0c\u4e0d\u5efa\u8bae\u6539\u53d8\u539f\u6709\u7684\u8fd0\u7b97\u7b26\u7684\u542b\u4e49\u53ca\u53c2\u6570\u7684\u610f\u4e49 \u4e8c\u5143\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d\u65b9\u6cd5\u7684\u683c\u5f0f\uff1a def __xxx__(self, rhs): \u8bed\u53e5\u5757 # \u6b64\u793a\u4f8b\u793a\u610f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d\u65b9\u6cd5 class MyNumber : def __init__ ( self , v ): self . data = v def __repr__ ( self ): return 'MyNumber( %d )' % self . data def __add__ ( self , rhs ): '''\u6b64\u65b9\u6cd5\u7528\u6765\u5236\u5b9aself + rhs \u7684\u89c4\u5219''' v = self . data + rhs . data return MyNumber ( v ) # \u7528v\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u8fd4\u56de\u7ed9\u8c03\u7528\u8005 def __sub__ ( self , rhs ): v = self . data - rhs . data return MyNumber ( v ) n1 = MyNumber ( 100 ) n2 = MyNumber ( 200 ) n3 = n1 + n2 # \u7b49\u540c\u4e8e n3 = n1.__add__(n2) print ( n3 ) n4 = n3 - n2 print ( 'n4 =' , n4 ) \u7ec3\u4e60 \u00b6 # \u5b9e\u73b0\u4e24\u4e2a\u81ea\u5b9a\u4e49\u5217\u8868\u7684\u60f3\u52a0 class MyList : def __init__ ( self , iterable = ()): self . data = list ( iterable ) ... \u4ee5\u4e0b\u81ea\u5df1\u5b9e\u73b0 l1 = MyList ([ 1 , 2 , 3 ]) l2 = MyList ([ 4 , 5 , 6 ]) l3 = l1 + l2 print ( l3 ) # MyList([1, 2, 3, 4, 5, 6]) l4 = l2 + l1 print ( l4 ) # MyList([4, 5, 6, 1, 2, 3]) # \u8bd5\u60f3\u80fd\u5426\u5b9e\u73b0\u4ee5\u4e0b\u64cd\u4f5c l5 = l1 * 3 print ( l5 ) # MyList([1, 2, 3, 1, 2, 3, 1, 2, 3]) \u53cd\u5411\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u00b6 \u5f53\u8fd0\u7b97\u7b26\u7684\u5de6\u4fa7\u4e3a\u5185\u5efa\u7c7b\u578b\u65f6\uff0c\u53f3\u4fa7\u4e3a\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u8fdb\u884c\u7684\u7b97\u672f\u8fd0\u7b97\u7b26\u8fd0\u7b97\u65f6\u4f1a\u51fa\u73b0TypeError\u9519\u8bef\uff0c \u56e0\u65e0\u6cd5\u4fee\u6539\u5185\u5efa\u7c7b\u578b\u7684\u4ee3\u7801\u5b9e\u73b0\u8fd0\u7b97\u7684\u91cd\u8f7d\uff0c\u6b64\u65f6\u9700\u8981\u4f7f\u7528\u53cd\u5411\u7b97\u672f\u8fd0\u7b97\u7b26\u91cd\u8f7d \u53cd\u5411\u7b97\u672f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __radd__(self, lhs) lhs + self \u52a0\u6cd5 __rsub__(self, lhs) lhs - self \u51cf\u6cd5 __rmul__(self, lhs) lhs * self \u4e58\u6cd5 __rtruediv__(self, lhs) lhs / self \u9664\u6cd5 __rfloordiv__(self, lhs) lhs // self \u5730\u677f\u6cd5 __rmod__(self, lhs) lhs % self \u53d6\u6a21\uff08\u6c42\u4f59\uff09 __rpow__(self, lhs) lhs ** self \u5e42\u8fd0\u7b97 \u793a\u4f8b\u89c1 exercise_add_list.py \u590d\u5408\u8d4b\u503c\u7b97\u672f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u4ee5\u590d\u5408\u8d4b\u503c\u7b97\u672f\u8fd0\u7b97\u7b26 x += y \u4e3a\u4f8b\uff0c \u6b64\u8fd0\u7b97\u7b26\u4f1a\u4f18\u5148\u8c03\u7528 x.__iadd__(y) \u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709__iadd__\u65b9\u6cd5\u65f6 \u5c06\u4f1a\u590d\u5408\u8d4b\u503c\u62c6\u89e3\u4e3a\uff1a x = x + y \u7136\u540e\u8c03\u7528 x = x.__add__(y)\u65b9\u6cd5\uff0c\u5982\u679c\u518d\u4e0d\u5b58\u5728\u5219\u4f1a\u89e6\u53d1TypeError\u7c7b\u578b\u7684\u9519\u8bef\u5f02\u5e38 \u590d\u5408\u7b97\u672f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __iadd__(self, rhs) self += rhs \u52a0\u6cd5 __isub__(self, rhs) self -= rhs \u51cf\u6cd5 __imul__(self, rhs) self *= rhs \u4e58\u6cd5 __itruediv__(self, rhs) self /= rhs \u9664\u6cd5 __ifloordiv__(self, rhs) self //= rhs \u5730\u677f\u6cd5 __imod__(self, rhs) self %= rhs \u53d6\u6a21\uff08\u6c42\u4f59\uff09 __ipow__(self, rhs) self **= rhs \u5e42\u8fd0\u7b97 \u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __lt__(self, rhs) self < rhs \u5c0f\u4e8e little than __le__(self, rhs) self <= rhs \u5c0f\u4e8e\u7b49\u4e8e little equal __gt__(self, rhs) self > rhs \u5927\u4e8e great than __ge__(self, rhs) self >= rhs \u5927\u4e8e\u7b49\u4e8e great equal __eq__(self, rhs) self == rhs \u7b49\u4e8e equal __ne__(self, rhs) self != rhs \u4e0d\u7b49\u4e8e not equal \u6ce8\uff1a \u6bd4\u8f83\u8fd0\u7b97\u7b26\u901a\u5e38\u8fd4\u56de\u5e03\u5c14\u503c True \u6216 False \u4f4d\u76f8\u5173\u8fd0\u7b97\u7b26\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __and__(self, rhs) self & rhs \u4f4d\u4e0e __or__(self, rhs) self | rhs \u4f4d\u6216 __xor__(self, rhs) self ^ rhs \u4f4d\u5f02\u6216 __lshift__(self, rhs) self << rhs \u5de6\u79fb __rshift__(self, rhs) self >> rhs \u53f3\u79fb \u53cd\u5411\u8fd0\u7b97\u7b26\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __rand__(self, lhs) lhs & self \u4f4d\u4e0e __ror__(self, lhs) lhs | self \u4f4d\u6216 __rxor__(self, lhs) lhs ^ self \u4f4d\u5f02\u6216 __rlshift__(self, lhs) lhs << self \u5de6\u79fb __rrshift__(self, lhs) lhs >> self \u53f3\u79fb \u590d\u5408\u8d4b\u503c\u4f4d\u76f8\u5173\u8fd0\u7b97\u7b26\u91cd\u8f7d __iand__(self, rhs) self &= rhs \u4f4d\u4e0e __ior__(self, rhs) self |= rhs \u4f4d\u6216 __ixor__(self, rhs) self ^= rhs \u4f4d\u5f02\u6216 __ilshift__(self, rhs) self <<= rhs \u5de6\u79fb __irshift__(self, rhs) self >>= rhs \u53f3\u79fb \u4e00\u5143\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __neg__(self) -self \u8d1f\u53f7 __pos__(self) +self \u6b63\u53f7 __invert__(self) ~self \u53d6\u53cd \u8bed\u6cd5 class \u7c7b\u540d: def __xxx__(self): ... \u793a\u4f8b\u89c1 my_list.py \u4e8c\u5143\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d in / not in \u8fd0\u7b97\u7b26\u91cd\u8f7d \u683c\u5f0f def __contains__(self, e): \u8bed\u53e5\u5757 \u6ce8\uff1ain / not in \u8fd4\u56de\u5e03\u5c14\u503c True / False \u5f53\u91cd\u8f7d\u4e86__contains__\u540e\uff0c in \u548c not in \u8fd0\u7b97\u7b26\u90fd\u53ef\u7528 not in \u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u503c\u4e0ein \u76f8\u53cd \u793a\u4f8b\u89c1 my_list2.py \u7d22\u5f15\u548c\u5207\u7247\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d\u65b9\u6cd5 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __getitem__(self, item) x = self[item] \u7d22\u5f15/\u5207\u7247 \u53d6\u503c __setitem__(self, item, v) self[item] = v \u7d22\u5f15/\u5207\u7247 \u8d4b\u503c __delitem__(self, item) del self[item] del\u8bed\u53e5\u5220\u9664 \u7d22\u5f15/\u5207\u7247 \u4f5c\u7528 \u8ba9\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u7684\u5bf9\u8c61\u80fd\u591f\u652f\u6301\u7d22\u5f15\u548c\u5207\u7247\u64cd\u4f5c slice \u6784\u9020\u51fd\u6570 \u4f5c\u7528 \u7528\u4e8e\u521b\u5efa\u4e00\u4e2aslice \u5bf9\u8c61\uff0c\u6b64\u5bf9\u8c61\u7528\u4e8e\u5207\u7247\u64cd\u4f5c\u7684\u4f20\u503c \u683c\u5f0f slice(start=None, stop=None, step=None) slice\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5c5e\u6027 start \u5207\u7247\u7684\u8d77\u59cb\u503c \u9ed8\u8ba4\u4e3aNone stop \u5207\u7247\u7684\u7ec8\u6b62\u503c \u9ed8\u8ba4\u4e3aNone step \u5207\u7247\u7684\u6b65\u957f \u9ed8\u8ba4\u4e3aNone \u7279\u6027\u5c5e\u6027 @property \u5b9e\u73b0\u5176\u4ed6\u8bed\u8a00\u6240\u62e5\u6709\u7684getter \u548c setter \u529f\u80fd \u4f5c\u7528 \u7528\u6765\u6a21\u62df\u4e00\u4e2a\u5c5e\u6027 \u901a\u8fc7@property \u88c5\u9970\u5668\uff0c\u53ef\u4ee5\u5bf9\u6a21\u62df\u5c5e\u6027\u7684\u8d4b\u503c\u548c\u53d6\u503c\u52a0\u4ee5\u63a7\u5236 \u5b9e\u4f8b\u89c1 property.py","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"python/python%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/#_1","text":"\u4ec0\u4e48\u662f\u8fd0\u7b97\u7b26\u91cd\u8f7d \u8ba9\u81ea\u5b9a\u4e49\u7684\u7c7b\u751f\u6210\u7684\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09\uff0c \u80fd\u591f\u4f7f\u7528\u8fd0\u7b97\u7b26\u8fdb\u884c\u64cd\u4f5c \u4f5c\u7528 1. \u8ba9\u81ea\u5b9a\u4e49\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u50cf\u5185\u5efa\u51fd\u6570\u4e00\u6837\u8fdb\u884c\u8fd0\u7b97\u7b26\u7684\u64cd\u4f5c 2. \u8ba9\u7a0b\u5e8f\u7b80\u6d01\u6613\u8bfb 3. \u8ba9\u81ea\u5b9a\u4e49\u5bf9\u8c61\u5c06\u8fd0\u7b97\u7b26\u8d4b\u4e88\u65b0\u7684\u89c4\u5219","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"python/python%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/#_2","text":"\u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __add__(self, rhs) self + rhs \u52a0\u6cd5 __sub__(self, rhs) self - rhs \u51cf\u6cd5 __mul__(self, rhs) self * rhs \u4e58\u6cd5 __truediv__(self, rhs) self / rhs \u9664\u6cd5 __floordiv__(self, rhs) self // rhs \u5730\u677f\u6cd5 __mod__(self, rhs) self % rhs \u53d6\u6a21\uff08\u6c42\u4f59\uff09 __pow__(self, rhs) self ** rhs \u5e42\u8fd0\u7b97 rhs (right hand side) \u53f3\u624b\u8fb9 \u8bf4\u660e \u8fd0\u7b97\u7b26\u91cd\u8f7d\u65b9\u6cd5\u7684\u53c2\u6570\u5df2\u7ecf\u6709\u56fa\u5b9a\u7684\u542b\u4e49\uff0c\u4e0d\u5efa\u8bae\u6539\u53d8\u539f\u6709\u7684\u8fd0\u7b97\u7b26\u7684\u542b\u4e49\u53ca\u53c2\u6570\u7684\u610f\u4e49 \u4e8c\u5143\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d\u65b9\u6cd5\u7684\u683c\u5f0f\uff1a def __xxx__(self, rhs): \u8bed\u53e5\u5757 # \u6b64\u793a\u4f8b\u793a\u610f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d\u65b9\u6cd5 class MyNumber : def __init__ ( self , v ): self . data = v def __repr__ ( self ): return 'MyNumber( %d )' % self . data def __add__ ( self , rhs ): '''\u6b64\u65b9\u6cd5\u7528\u6765\u5236\u5b9aself + rhs \u7684\u89c4\u5219''' v = self . data + rhs . data return MyNumber ( v ) # \u7528v\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\u8fd4\u56de\u7ed9\u8c03\u7528\u8005 def __sub__ ( self , rhs ): v = self . data - rhs . data return MyNumber ( v ) n1 = MyNumber ( 100 ) n2 = MyNumber ( 200 ) n3 = n1 + n2 # \u7b49\u540c\u4e8e n3 = n1.__add__(n2) print ( n3 ) n4 = n3 - n2 print ( 'n4 =' , n4 )","title":"\u7b97\u672f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d"},{"location":"python/python%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/#_3","text":"# \u5b9e\u73b0\u4e24\u4e2a\u81ea\u5b9a\u4e49\u5217\u8868\u7684\u60f3\u52a0 class MyList : def __init__ ( self , iterable = ()): self . data = list ( iterable ) ... \u4ee5\u4e0b\u81ea\u5df1\u5b9e\u73b0 l1 = MyList ([ 1 , 2 , 3 ]) l2 = MyList ([ 4 , 5 , 6 ]) l3 = l1 + l2 print ( l3 ) # MyList([1, 2, 3, 4, 5, 6]) l4 = l2 + l1 print ( l4 ) # MyList([4, 5, 6, 1, 2, 3]) # \u8bd5\u60f3\u80fd\u5426\u5b9e\u73b0\u4ee5\u4e0b\u64cd\u4f5c l5 = l1 * 3 print ( l5 ) # MyList([1, 2, 3, 1, 2, 3, 1, 2, 3])","title":"\u7ec3\u4e60"},{"location":"python/python%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/#_4","text":"\u5f53\u8fd0\u7b97\u7b26\u7684\u5de6\u4fa7\u4e3a\u5185\u5efa\u7c7b\u578b\u65f6\uff0c\u53f3\u4fa7\u4e3a\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u8fdb\u884c\u7684\u7b97\u672f\u8fd0\u7b97\u7b26\u8fd0\u7b97\u65f6\u4f1a\u51fa\u73b0TypeError\u9519\u8bef\uff0c \u56e0\u65e0\u6cd5\u4fee\u6539\u5185\u5efa\u7c7b\u578b\u7684\u4ee3\u7801\u5b9e\u73b0\u8fd0\u7b97\u7684\u91cd\u8f7d\uff0c\u6b64\u65f6\u9700\u8981\u4f7f\u7528\u53cd\u5411\u7b97\u672f\u8fd0\u7b97\u7b26\u91cd\u8f7d \u53cd\u5411\u7b97\u672f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __radd__(self, lhs) lhs + self \u52a0\u6cd5 __rsub__(self, lhs) lhs - self \u51cf\u6cd5 __rmul__(self, lhs) lhs * self \u4e58\u6cd5 __rtruediv__(self, lhs) lhs / self \u9664\u6cd5 __rfloordiv__(self, lhs) lhs // self \u5730\u677f\u6cd5 __rmod__(self, lhs) lhs % self \u53d6\u6a21\uff08\u6c42\u4f59\uff09 __rpow__(self, lhs) lhs ** self \u5e42\u8fd0\u7b97 \u793a\u4f8b\u89c1 exercise_add_list.py \u590d\u5408\u8d4b\u503c\u7b97\u672f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u4ee5\u590d\u5408\u8d4b\u503c\u7b97\u672f\u8fd0\u7b97\u7b26 x += y \u4e3a\u4f8b\uff0c \u6b64\u8fd0\u7b97\u7b26\u4f1a\u4f18\u5148\u8c03\u7528 x.__iadd__(y) \u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709__iadd__\u65b9\u6cd5\u65f6 \u5c06\u4f1a\u590d\u5408\u8d4b\u503c\u62c6\u89e3\u4e3a\uff1a x = x + y \u7136\u540e\u8c03\u7528 x = x.__add__(y)\u65b9\u6cd5\uff0c\u5982\u679c\u518d\u4e0d\u5b58\u5728\u5219\u4f1a\u89e6\u53d1TypeError\u7c7b\u578b\u7684\u9519\u8bef\u5f02\u5e38 \u590d\u5408\u7b97\u672f\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __iadd__(self, rhs) self += rhs \u52a0\u6cd5 __isub__(self, rhs) self -= rhs \u51cf\u6cd5 __imul__(self, rhs) self *= rhs \u4e58\u6cd5 __itruediv__(self, rhs) self /= rhs \u9664\u6cd5 __ifloordiv__(self, rhs) self //= rhs \u5730\u677f\u6cd5 __imod__(self, rhs) self %= rhs \u53d6\u6a21\uff08\u6c42\u4f59\uff09 __ipow__(self, rhs) self **= rhs \u5e42\u8fd0\u7b97 \u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __lt__(self, rhs) self < rhs \u5c0f\u4e8e little than __le__(self, rhs) self <= rhs \u5c0f\u4e8e\u7b49\u4e8e little equal __gt__(self, rhs) self > rhs \u5927\u4e8e great than __ge__(self, rhs) self >= rhs \u5927\u4e8e\u7b49\u4e8e great equal __eq__(self, rhs) self == rhs \u7b49\u4e8e equal __ne__(self, rhs) self != rhs \u4e0d\u7b49\u4e8e not equal \u6ce8\uff1a \u6bd4\u8f83\u8fd0\u7b97\u7b26\u901a\u5e38\u8fd4\u56de\u5e03\u5c14\u503c True \u6216 False \u4f4d\u76f8\u5173\u8fd0\u7b97\u7b26\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __and__(self, rhs) self & rhs \u4f4d\u4e0e __or__(self, rhs) self | rhs \u4f4d\u6216 __xor__(self, rhs) self ^ rhs \u4f4d\u5f02\u6216 __lshift__(self, rhs) self << rhs \u5de6\u79fb __rshift__(self, rhs) self >> rhs \u53f3\u79fb \u53cd\u5411\u8fd0\u7b97\u7b26\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __rand__(self, lhs) lhs & self \u4f4d\u4e0e __ror__(self, lhs) lhs | self \u4f4d\u6216 __rxor__(self, lhs) lhs ^ self \u4f4d\u5f02\u6216 __rlshift__(self, lhs) lhs << self \u5de6\u79fb __rrshift__(self, lhs) lhs >> self \u53f3\u79fb \u590d\u5408\u8d4b\u503c\u4f4d\u76f8\u5173\u8fd0\u7b97\u7b26\u91cd\u8f7d __iand__(self, rhs) self &= rhs \u4f4d\u4e0e __ior__(self, rhs) self |= rhs \u4f4d\u6216 __ixor__(self, rhs) self ^= rhs \u4f4d\u5f02\u6216 __ilshift__(self, rhs) self <<= rhs \u5de6\u79fb __irshift__(self, rhs) self >>= rhs \u53f3\u79fb \u4e00\u5143\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __neg__(self) -self \u8d1f\u53f7 __pos__(self) +self \u6b63\u53f7 __invert__(self) ~self \u53d6\u53cd \u8bed\u6cd5 class \u7c7b\u540d: def __xxx__(self): ... \u793a\u4f8b\u89c1 my_list.py \u4e8c\u5143\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d in / not in \u8fd0\u7b97\u7b26\u91cd\u8f7d \u683c\u5f0f def __contains__(self, e): \u8bed\u53e5\u5757 \u6ce8\uff1ain / not in \u8fd4\u56de\u5e03\u5c14\u503c True / False \u5f53\u91cd\u8f7d\u4e86__contains__\u540e\uff0c in \u548c not in \u8fd0\u7b97\u7b26\u90fd\u53ef\u7528 not in \u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u503c\u4e0ein \u76f8\u53cd \u793a\u4f8b\u89c1 my_list2.py \u7d22\u5f15\u548c\u5207\u7247\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d\u65b9\u6cd5 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u8bf4\u660e __getitem__(self, item) x = self[item] \u7d22\u5f15/\u5207\u7247 \u53d6\u503c __setitem__(self, item, v) self[item] = v \u7d22\u5f15/\u5207\u7247 \u8d4b\u503c __delitem__(self, item) del self[item] del\u8bed\u53e5\u5220\u9664 \u7d22\u5f15/\u5207\u7247 \u4f5c\u7528 \u8ba9\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u7684\u5bf9\u8c61\u80fd\u591f\u652f\u6301\u7d22\u5f15\u548c\u5207\u7247\u64cd\u4f5c slice \u6784\u9020\u51fd\u6570 \u4f5c\u7528 \u7528\u4e8e\u521b\u5efa\u4e00\u4e2aslice \u5bf9\u8c61\uff0c\u6b64\u5bf9\u8c61\u7528\u4e8e\u5207\u7247\u64cd\u4f5c\u7684\u4f20\u503c \u683c\u5f0f slice(start=None, stop=None, step=None) slice\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5c5e\u6027 start \u5207\u7247\u7684\u8d77\u59cb\u503c \u9ed8\u8ba4\u4e3aNone stop \u5207\u7247\u7684\u7ec8\u6b62\u503c \u9ed8\u8ba4\u4e3aNone step \u5207\u7247\u7684\u6b65\u957f \u9ed8\u8ba4\u4e3aNone \u7279\u6027\u5c5e\u6027 @property \u5b9e\u73b0\u5176\u4ed6\u8bed\u8a00\u6240\u62e5\u6709\u7684getter \u548c setter \u529f\u80fd \u4f5c\u7528 \u7528\u6765\u6a21\u62df\u4e00\u4e2a\u5c5e\u6027 \u901a\u8fc7@property \u88c5\u9970\u5668\uff0c\u53ef\u4ee5\u5bf9\u6a21\u62df\u5c5e\u6027\u7684\u8d4b\u503c\u548c\u53d6\u503c\u52a0\u4ee5\u63a7\u5236 \u5b9e\u4f8b\u89c1 property.py","title":"\u53cd\u5411\u8fd0\u7b97\u7b26\u7684\u91cd\u8f7d"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/","text":"\u8fed\u4ee3\u5668 Iterator \u00b6 \u4ec0\u4e48\u662f\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u662f\u8bbf\u95ee\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5de5\u5177 \u8fed\u4ee3\u5668\u662f\u6307\u7528iter(obj)\u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u8fed\u4ee3\u5668\u53ef\u4ee5\u7528next(it)\u51fd\u6570\u83b7\u53d6\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6570\u636e \u8fed\u4ee3\u5668\u51fd\u6570iter \u548c next \u00b6 iter(iterable) \u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0citerable \u5fc5\u987b\u662f\u80fd\u63d0\u4f9b\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u5bf9\u8c61 next(iterator) \u4ece\u8fed\u4ee3\u5668iterable\u4e2d\u83b7\u53d6\u4e0b\u4e00\u4e2a\u8bb0\u5f55\uff0c\u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u4e0b\u4e00\u6761\u8bb0\u5f55\uff0c\u5219\u89e6\u53d1StopIteration \u5f02\u5e38 \u8bf4\u660e 1. \u8fed\u4ee3\u5668\u53ea\u80fd\u5f80\u524d\u53d6\u503c\uff0c\u4e0d\u4f1a\u540e\u9000 2. \u7528iter \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668 l = [ 1 , 3 , 5 , 7 ] it = iter ( l ) # \u8ba9l\u63d0\u4f9b\u4e00\u4e2a\u80fd\u8bbf\u95ee\u81ea\u5df1\u7684\u8fed\u4ee3\u5668 print ( next ( it )) # 1 \u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c\uff0c\u8ba9\u8fed\u4ee3\u5668\u53bb\u83b7\u53d6l\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 print ( next ( it )) # 3 \u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c\uff0c\u8ba9\u8fed\u4ee3\u5668\u53bb\u83b7\u53d6l\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 print ( next ( it )) # 5 \u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c\uff0c\u8ba9\u8fed\u4ee3\u5668\u53bb\u83b7\u53d6l\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 print ( next ( it )) # 7 \u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c\uff0c\u8ba9\u8fed\u4ee3\u5668\u53bb\u83b7\u53d6l\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 # next(it) # StopIteration \u5f02\u5e38 \u8fed\u4ee3\u5668\u7684\u7528\u9014 \u00b6 \u7528\u8fed\u4ee3\u5668\u53ef\u4ee5\u4f9d\u6b21\u8bbf\u95ee\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6570\u636e l = [ 2 , 3 , 5 , 7 ] for i in l : print ( l ) # \u4ee5\u4e0b\u7528\u8fed\u4ee3\u5668\u6765\u8bbf\u95ee l = [ 2 , 3 , 5 , 7 ] it = iter ( l ) while True : try : x = next ( it ) print ( x ) except StopIteration : break \u7ec3\u4e60 \u00b6 \u6709\u4e00\u4e2a\u96c6\u5408\uff0c s = {'\u5510\u50e7', '\u609f\u7a7a', '\u516b\u6212', '\u6c99\u50e7'} \u7528for\u8bed\u53e5\u6765\u904d\u5386\u6240\u6709\u5143\u7d20\u5982\u4e0b for x in s: print(x) else: print('\u904d\u5386\u7ed3\u675f') \u5c06for\u8bed\u53e5\u6539\u5199\u4e3awhile\u8bed\u53e5\u548c\u8fed\u4ee3\u5668\u5b9e\u73b0 \u751f\u6210\u5668 Generator \u00b6 \u4ec0\u4e48\u662f\u751f\u6210\u5668 \u751f\u6210\u5668\u662f\u80fd\u591f\u52a8\u6001\u63d0\u4f9b\u6570\u636e\u7684\u5bf9\u8c61\uff0c\u751f\u6210\u5668\u5bf9\u8c61\u4e5f\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u751f\u6210\u5668\u6709\u4e24\u79cd \u751f\u6210\u5668\u51fd\u6570 \u751f\u6210\u5668\u8868\u8fbe\u5f0f \u751f\u6210\u5668\u51fd\u6570\u7684\u5b9a\u4e49 \u542b\u6709yield\u8bed\u53e5\u7684\u51fd\u6570\u662f\u751f\u6210\u5668\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u88ab\u8c03\u7528\u5c06\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61 yield \u7ffb\u8bd1\u4e3a\uff08\u4ea7\u751f\u6216\u751f\u6210\uff09 yield \u8bed\u53e5 \u00b6 \u8bed\u6cd5 yield\u8868\u8fbe\u5f0f \u8bf4\u660e yield \u7528\u4e8e def \u51fd\u6570\u4e2d\uff0c\u76ee\u7684\u662f\u5c06\u6b64\u51fd\u6570\u4f5c\u4e3a\u751f\u6210\u5668\u51fd\u6570\u4f7f\u7528 yield \u7528\u6765\u751f\u6210\u6570\u636e\uff0c \u4f9b\u8fed\u4ee3\u5668\u548cnext(it) \u51fd\u6570\u4f7f\u7528 # \u751f\u6210\u5668\u51fd\u6570\u53ea\u6709\u5728next(it) \u51fd\u6570\u8c03\u7528\u65f6\u624d\u4f1a\u6267\u884c\uff0c\u4e14\u9047\u5230yield\u540e\u8fd4\u56de\u76f8\u5e94\u7684\u503c\u7ed9next(it)\u51fd\u6570 def my_yield (): print ( '\u5373\u5c06\u751f\u62102' ) yield 2 print ( '\u5373\u5c06\u751f\u62103' ) yield 3 print ( '\u5373\u5c06\u751f\u62105' ) yield 5 print ( '\u5373\u5c06\u751f\u62107' ) yield 7 print ( '\u751f\u6210\u5668\u751f\u6210\u7ed3\u675f ' ) for i in my_yield (): print ( i ) g = my_yield () # \u8c03\u7528\u751f\u6210\u5668\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u6b64\u751f\u6210\u5668\u80fd\u751f\u6210 2 3 5 7 \u56db\u4e2a\u6570 it = iter ( g ) # \u7528\u751f\u6210\u5668\u62ff\u5230\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668 print ( next ( it )) print ( next ( it )) # \u7528\u751f\u6210\u5668\u51fd\u6570\u6765\u751f\u6210\u4e00\u4e9b\u5217\u7684\u6574\u6570\uff0c 0 - n def myinteger ( n ): i = 0 while i < n : yield i i += 1 for x in myinteger ( 3 ): print ( x ) l = [ x for x in myinteger ( 100 ) if x % 2 == 1 ] print ( l ) \u751f\u6210\u5668\u51fd\u6570\u7684\u8bf4\u660e \u00b6 \u751f\u6210\u5668\u51fd\u6570\u7684\u8c03\u7528\u5c06\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u751f\u6210\u5668\u5bf9\u8c61\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u901a\u5e38\u7528\u6765\u52a8\u6001\u751f\u6210\u6570\u636e \u751f\u6210\u5668\u51fd\u6570\u8c03\u7528return \u8bed\u53e5\u4f1a\u89e6\u53d1\u4e00\u4e2aStopIteration \u5f02\u5e38 \u7ec3\u4e60 \u5199\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0cmyeven(start, stop)\u7528\u6765\u751f\u6210start\u5f00\u59cb\u5e26stop\u7ed3\u675f\uff08\u4e0d\u5305\u542b\uff09\u7684\u5076\u6570 \u751f\u6210\u5668\u8868\u8fbe\u5f0f \u00b6 \u8bed\u6cd5 \uff08\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u771f\u503c\u8868\u8fbe\u5f0f]\uff09 \u4f5c\u7528 \u7528\u63a8\u5bfc\u5f0f\u5f62\u5f0f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u751f\u6210\u5668 \u8bf4\u660e if \u5b50\u53e5\u53ef\u4ee5\u7701\u7565 \u793a\u4f8b gen = (x**2 for x in range(1, 5)) it = iter(gen) print(next(it)) # 1 print(next(it)) # 4 print(next(it)) # 9 print(next(it)) # 16 print(next(it)) # StopIteration \u7ec3\u4e60 \u00b6 \u5df2\u77e5\u6709\u5217\u8868 l = [2, 3, 5, 7] 1) \u5199\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u8ba9\u6b64\u51fd\u6570\u80fd\u591f\u52a8\u6001\u63d0\u4f9b\u6570\u636e\uff0c\u6570\u636e\u4e3a\u539f\u5217\u8868\u6570\u5b57\u7684\u5e73\u65b9\u52a01 2) \u5199\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c\u8ba9\u6b64\u8868\u8fbe\u5f0f\u80fd\u591f\u52a8\u6001\u63d0\u4f9b\u6570\u636e\uff0c\u6570\u636e\u4e3a\u539f\u5217\u8868\u6570\u5b57\u7684\u5e73\u65b9\u52a01 3) \u751f\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u6b64\u5217\u8868\u5185\u7684\u6570\u636e\u662f\u539f\u5217\u8868\u6570\u636e\u7684\u5e73\u65b9\u52a01 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u533a\u522b \u00b6 l = [ 2 , 3 , 5 , 7 ] l2 = [ x ** 2 + 1 for x in l ] it = iter ( l2 ) print ( next ( it )) # ? l [ 1 ] = 30 print ( next ( it )) # ?? # \u4ee5\u4e0b\u662f\u751f\u6210\u5668\u8868\u8fbe\u5f0f l = [ 2 , 3 , 5 , 7 ] l2 = ( x ** 2 + 1 for x in l ) it = iter ( l2 ) print ( next ( it )) # ? l [ 1 ] = 30 print ( next ( it )) # ?? # \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u662f\u73b0\u7528\u73b0\u751f\u6210\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u4e00\u6b21\u6027\u751f\u6210\u9759\u6001\u6570\u636e \u8fed\u4ee3\u5de5\u5177\u51fd\u6570 \u00b6 \u4f5c\u7528\u662f\u751f\u6210\u4e00\u4e2a\u4e2a\u6027\u5316\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 zip(iter1 [, iter2[...]]) \u8fd4\u56de\u4e00\u4e2azip\u5bf9\u8c61\uff0c\u6b64\u5bf9\u8c61\u7528\u4e8e\u751f\u6210\u5143\u7ec4\uff0c\u6b64\u5143\u7ec4\u7684\u6bcf\u4e2a\u6570\u636e\u6765\u6e90\u4e8e\u53c2\u6570\u4e2d\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5f53\u6700\u5c0f\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0d\u518d\u63d0\u4f9b\u6570\u636e\u65f6\u8fed\u4ee3\u7ed3\u675f enumerate(iterable [, start]) zip\u793a\u4f8b \u00b6 numbers = [ 10086 , 10000 , 10010 , 95588 ] names = [ '\u4e2d\u56fd\u79fb\u52a8' , '\u4e2d\u56fd\u8054\u901a' , '\u4e2d\u56fd\u7535\u4fe1' ] for t in zip ( numbers , names ): print ( t ) for No , number , name in zip ( range ( 1 , 100 ), numbers , names ): print ( '\u5e8f\u53f7' , No , name , '\u7684\u5ba2\u670d\u7535\u8bdd\u662f' , number ) enumerate \u793a\u4f8b \u00b6 names = [ '\u4e2d\u56fd\u79fb\u52a8' , '\u4e2d\u56fd\u8054\u901a' , '\u4e2d\u56fd\u7535\u4fe1' ] for t in enumerate ( names ): print ( t ) for t in enumerate ( names , 101 ): print ( t ) # \u65e2\u80fd\u5f97\u5230\u7d22\u5f15\u53c8\u80fd\u5f97\u5230\u503c for index , name in enumerate ( name ): print ( index , name ) \u7ec3\u4e60 \u00b6 \u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8bfb\u5165\u4efb\u610f\u884c\u6587\u5b57\uff0c\u5f53\u8f93\u5165\u7a7a\u884c\u65f6\u7ed3\u675f\uff0c\u6253\u5370\u5e26\u6709\u884c\u53f7\u7684\u8f93\u5165\u7684\u7ed3\u679c \u5982\uff1a \u8bf7\u8f93\u5165\uff1aabdce <\u56de\u8f66> \u8bf7\u8f93\u5165\uff1ahello <\u56de\u8f66> \u8bf7\u8f93\u5165\uff1abye <\u56de\u8f66> \u8bf7\u8f93\u5165\uff1a<\u56de\u8f66> \u8f93\u51fa\u5982\u4e0b\uff1a \u7b2c1\u884c\uff1aabdce <\u56de\u8f66> \u7b2c2\u884c\uff1ahello <\u56de\u8f66> \u7b2c3\u884c\uff1abye <\u56de\u8f66>","title":"17. \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#iterator","text":"\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u662f\u8bbf\u95ee\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u5de5\u5177 \u8fed\u4ee3\u5668\u662f\u6307\u7528iter(obj)\u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u8fed\u4ee3\u5668\u53ef\u4ee5\u7528next(it)\u51fd\u6570\u83b7\u53d6\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6570\u636e","title":"\u8fed\u4ee3\u5668 Iterator"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#iter-next","text":"iter(iterable) \u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0citerable \u5fc5\u987b\u662f\u80fd\u63d0\u4f9b\u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u5bf9\u8c61 next(iterator) \u4ece\u8fed\u4ee3\u5668iterable\u4e2d\u83b7\u53d6\u4e0b\u4e00\u4e2a\u8bb0\u5f55\uff0c\u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u4e0b\u4e00\u6761\u8bb0\u5f55\uff0c\u5219\u89e6\u53d1StopIteration \u5f02\u5e38 \u8bf4\u660e 1. \u8fed\u4ee3\u5668\u53ea\u80fd\u5f80\u524d\u53d6\u503c\uff0c\u4e0d\u4f1a\u540e\u9000 2. \u7528iter \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668 l = [ 1 , 3 , 5 , 7 ] it = iter ( l ) # \u8ba9l\u63d0\u4f9b\u4e00\u4e2a\u80fd\u8bbf\u95ee\u81ea\u5df1\u7684\u8fed\u4ee3\u5668 print ( next ( it )) # 1 \u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c\uff0c\u8ba9\u8fed\u4ee3\u5668\u53bb\u83b7\u53d6l\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 print ( next ( it )) # 3 \u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c\uff0c\u8ba9\u8fed\u4ee3\u5668\u53bb\u83b7\u53d6l\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 print ( next ( it )) # 5 \u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c\uff0c\u8ba9\u8fed\u4ee3\u5668\u53bb\u83b7\u53d6l\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 print ( next ( it )) # 7 \u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u503c\uff0c\u8ba9\u8fed\u4ee3\u5668\u53bb\u83b7\u53d6l\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20 # next(it) # StopIteration \u5f02\u5e38","title":"\u8fed\u4ee3\u5668\u51fd\u6570iter \u548c next"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_1","text":"\u7528\u8fed\u4ee3\u5668\u53ef\u4ee5\u4f9d\u6b21\u8bbf\u95ee\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6570\u636e l = [ 2 , 3 , 5 , 7 ] for i in l : print ( l ) # \u4ee5\u4e0b\u7528\u8fed\u4ee3\u5668\u6765\u8bbf\u95ee l = [ 2 , 3 , 5 , 7 ] it = iter ( l ) while True : try : x = next ( it ) print ( x ) except StopIteration : break","title":"\u8fed\u4ee3\u5668\u7684\u7528\u9014"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_2","text":"\u6709\u4e00\u4e2a\u96c6\u5408\uff0c s = {'\u5510\u50e7', '\u609f\u7a7a', '\u516b\u6212', '\u6c99\u50e7'} \u7528for\u8bed\u53e5\u6765\u904d\u5386\u6240\u6709\u5143\u7d20\u5982\u4e0b for x in s: print(x) else: print('\u904d\u5386\u7ed3\u675f') \u5c06for\u8bed\u53e5\u6539\u5199\u4e3awhile\u8bed\u53e5\u548c\u8fed\u4ee3\u5668\u5b9e\u73b0","title":"\u7ec3\u4e60"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#generator","text":"\u4ec0\u4e48\u662f\u751f\u6210\u5668 \u751f\u6210\u5668\u662f\u80fd\u591f\u52a8\u6001\u63d0\u4f9b\u6570\u636e\u7684\u5bf9\u8c61\uff0c\u751f\u6210\u5668\u5bf9\u8c61\u4e5f\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u751f\u6210\u5668\u6709\u4e24\u79cd \u751f\u6210\u5668\u51fd\u6570 \u751f\u6210\u5668\u8868\u8fbe\u5f0f \u751f\u6210\u5668\u51fd\u6570\u7684\u5b9a\u4e49 \u542b\u6709yield\u8bed\u53e5\u7684\u51fd\u6570\u662f\u751f\u6210\u5668\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u88ab\u8c03\u7528\u5c06\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61 yield \u7ffb\u8bd1\u4e3a\uff08\u4ea7\u751f\u6216\u751f\u6210\uff09","title":"\u751f\u6210\u5668 Generator"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#yield","text":"\u8bed\u6cd5 yield\u8868\u8fbe\u5f0f \u8bf4\u660e yield \u7528\u4e8e def \u51fd\u6570\u4e2d\uff0c\u76ee\u7684\u662f\u5c06\u6b64\u51fd\u6570\u4f5c\u4e3a\u751f\u6210\u5668\u51fd\u6570\u4f7f\u7528 yield \u7528\u6765\u751f\u6210\u6570\u636e\uff0c \u4f9b\u8fed\u4ee3\u5668\u548cnext(it) \u51fd\u6570\u4f7f\u7528 # \u751f\u6210\u5668\u51fd\u6570\u53ea\u6709\u5728next(it) \u51fd\u6570\u8c03\u7528\u65f6\u624d\u4f1a\u6267\u884c\uff0c\u4e14\u9047\u5230yield\u540e\u8fd4\u56de\u76f8\u5e94\u7684\u503c\u7ed9next(it)\u51fd\u6570 def my_yield (): print ( '\u5373\u5c06\u751f\u62102' ) yield 2 print ( '\u5373\u5c06\u751f\u62103' ) yield 3 print ( '\u5373\u5c06\u751f\u62105' ) yield 5 print ( '\u5373\u5c06\u751f\u62107' ) yield 7 print ( '\u751f\u6210\u5668\u751f\u6210\u7ed3\u675f ' ) for i in my_yield (): print ( i ) g = my_yield () # \u8c03\u7528\u751f\u6210\u5668\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u6b64\u751f\u6210\u5668\u80fd\u751f\u6210 2 3 5 7 \u56db\u4e2a\u6570 it = iter ( g ) # \u7528\u751f\u6210\u5668\u62ff\u5230\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668 print ( next ( it )) print ( next ( it )) # \u7528\u751f\u6210\u5668\u51fd\u6570\u6765\u751f\u6210\u4e00\u4e9b\u5217\u7684\u6574\u6570\uff0c 0 - n def myinteger ( n ): i = 0 while i < n : yield i i += 1 for x in myinteger ( 3 ): print ( x ) l = [ x for x in myinteger ( 100 ) if x % 2 == 1 ] print ( l )","title":"yield \u8bed\u53e5"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_3","text":"\u751f\u6210\u5668\u51fd\u6570\u7684\u8c03\u7528\u5c06\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u751f\u6210\u5668\u5bf9\u8c61\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u901a\u5e38\u7528\u6765\u52a8\u6001\u751f\u6210\u6570\u636e \u751f\u6210\u5668\u51fd\u6570\u8c03\u7528return \u8bed\u53e5\u4f1a\u89e6\u53d1\u4e00\u4e2aStopIteration \u5f02\u5e38 \u7ec3\u4e60 \u5199\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0cmyeven(start, stop)\u7528\u6765\u751f\u6210start\u5f00\u59cb\u5e26stop\u7ed3\u675f\uff08\u4e0d\u5305\u542b\uff09\u7684\u5076\u6570","title":"\u751f\u6210\u5668\u51fd\u6570\u7684\u8bf4\u660e"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_4","text":"\u8bed\u6cd5 \uff08\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u771f\u503c\u8868\u8fbe\u5f0f]\uff09 \u4f5c\u7528 \u7528\u63a8\u5bfc\u5f0f\u5f62\u5f0f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u751f\u6210\u5668 \u8bf4\u660e if \u5b50\u53e5\u53ef\u4ee5\u7701\u7565 \u793a\u4f8b gen = (x**2 for x in range(1, 5)) it = iter(gen) print(next(it)) # 1 print(next(it)) # 4 print(next(it)) # 9 print(next(it)) # 16 print(next(it)) # StopIteration","title":"\u751f\u6210\u5668\u8868\u8fbe\u5f0f"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_5","text":"\u5df2\u77e5\u6709\u5217\u8868 l = [2, 3, 5, 7] 1) \u5199\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u8ba9\u6b64\u51fd\u6570\u80fd\u591f\u52a8\u6001\u63d0\u4f9b\u6570\u636e\uff0c\u6570\u636e\u4e3a\u539f\u5217\u8868\u6570\u5b57\u7684\u5e73\u65b9\u52a01 2) \u5199\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c\u8ba9\u6b64\u8868\u8fbe\u5f0f\u80fd\u591f\u52a8\u6001\u63d0\u4f9b\u6570\u636e\uff0c\u6570\u636e\u4e3a\u539f\u5217\u8868\u6570\u5b57\u7684\u5e73\u65b9\u52a01 3) \u751f\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u6b64\u5217\u8868\u5185\u7684\u6570\u636e\u662f\u539f\u5217\u8868\u6570\u636e\u7684\u5e73\u65b9\u52a01","title":"\u7ec3\u4e60"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_6","text":"l = [ 2 , 3 , 5 , 7 ] l2 = [ x ** 2 + 1 for x in l ] it = iter ( l2 ) print ( next ( it )) # ? l [ 1 ] = 30 print ( next ( it )) # ?? # \u4ee5\u4e0b\u662f\u751f\u6210\u5668\u8868\u8fbe\u5f0f l = [ 2 , 3 , 5 , 7 ] l2 = ( x ** 2 + 1 for x in l ) it = iter ( l2 ) print ( next ( it )) # ? l [ 1 ] = 30 print ( next ( it )) # ?? # \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u662f\u73b0\u7528\u73b0\u751f\u6210\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u4e00\u6b21\u6027\u751f\u6210\u9759\u6001\u6570\u636e","title":"\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u548c\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u533a\u522b"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_7","text":"\u4f5c\u7528\u662f\u751f\u6210\u4e00\u4e2a\u4e2a\u6027\u5316\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 zip(iter1 [, iter2[...]]) \u8fd4\u56de\u4e00\u4e2azip\u5bf9\u8c61\uff0c\u6b64\u5bf9\u8c61\u7528\u4e8e\u751f\u6210\u5143\u7ec4\uff0c\u6b64\u5143\u7ec4\u7684\u6bcf\u4e2a\u6570\u636e\u6765\u6e90\u4e8e\u53c2\u6570\u4e2d\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u5f53\u6700\u5c0f\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0d\u518d\u63d0\u4f9b\u6570\u636e\u65f6\u8fed\u4ee3\u7ed3\u675f enumerate(iterable [, start])","title":"\u8fed\u4ee3\u5de5\u5177\u51fd\u6570"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#zip","text":"numbers = [ 10086 , 10000 , 10010 , 95588 ] names = [ '\u4e2d\u56fd\u79fb\u52a8' , '\u4e2d\u56fd\u8054\u901a' , '\u4e2d\u56fd\u7535\u4fe1' ] for t in zip ( numbers , names ): print ( t ) for No , number , name in zip ( range ( 1 , 100 ), numbers , names ): print ( '\u5e8f\u53f7' , No , name , '\u7684\u5ba2\u670d\u7535\u8bdd\u662f' , number )","title":"zip\u793a\u4f8b"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#enumerate","text":"names = [ '\u4e2d\u56fd\u79fb\u52a8' , '\u4e2d\u56fd\u8054\u901a' , '\u4e2d\u56fd\u7535\u4fe1' ] for t in enumerate ( names ): print ( t ) for t in enumerate ( names , 101 ): print ( t ) # \u65e2\u80fd\u5f97\u5230\u7d22\u5f15\u53c8\u80fd\u5f97\u5230\u503c for index , name in enumerate ( name ): print ( index , name )","title":"enumerate \u793a\u4f8b"},{"location":"python/python%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/#_8","text":"\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8bfb\u5165\u4efb\u610f\u884c\u6587\u5b57\uff0c\u5f53\u8f93\u5165\u7a7a\u884c\u65f6\u7ed3\u675f\uff0c\u6253\u5370\u5e26\u6709\u884c\u53f7\u7684\u8f93\u5165\u7684\u7ed3\u679c \u5982\uff1a \u8bf7\u8f93\u5165\uff1aabdce <\u56de\u8f66> \u8bf7\u8f93\u5165\uff1ahello <\u56de\u8f66> \u8bf7\u8f93\u5165\uff1abye <\u56de\u8f66> \u8bf7\u8f93\u5165\uff1a<\u56de\u8f66> \u8f93\u51fa\u5982\u4e0b\uff1a \u7b2c1\u884c\uff1aabdce <\u56de\u8f66> \u7b2c2\u884c\uff1ahello <\u56de\u8f66> \u7b2c3\u884c\uff1abye <\u56de\u8f66>","title":"\u7ec3\u4e60"},{"location":"python/python%E9%80%92%E5%BD%92/","text":"\u9012\u5f52\u51fd\u6570 recursion \u00b6 \u9012\u5f52\u662f\u6307\uff1a\u51fd\u6570\u76f4\u63a5\u6216\u95f4\u63a5\u8c03\u7528\u81ea\u8eab \u9012\u5f52\u793a\u4f8b \u00b6 # \u51fd\u6570\u76f4\u63a5\u8c03\u7528\u81ea\u8eab def f (): f () # \u76f4\u63a5\u8c03\u7528\u81ea\u8eab f () print ( '\u9012\u5f52\u5b8c\u6210' ) #\u51fd\u6570\u95f4\u63a5\u8c03\u7528\u81ea\u8eab def fa (): fb () def fb () fa () fa () print ( '\u9012\u5f52\u5b8c\u6210' ) \u9012\u5f52\u8bf4\u660e \u00b6 \u9012\u5f52\u4e00\u5b9a\u8981\u63a7\u5236\u9012\u5f52\u7684\u5c42\u6570\uff0c\u5f53\u7b26\u5408\u67d0\u4e00\u6761\u4ef6\u65f6\u8981\u7ec8\u6b62\u9012\u5f52\u8c03\u7528 \u51e0\u4e4e\u6240\u6709\u7684\u9012\u5f52\u90fd\u80fd\u7528while\u5faa\u73af\u6765\u4ee3\u66ff \u9012\u5f52\u7684\u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9: \u53ef\u4ee5\u628a\u95ee\u9898\u7b80\u5355\u5316\uff0c\u8ba9\u601d\u8def\u7406\u4f1a\u4e3a\u6e05\u6670\uff0c\u4ee3\u7801\u66f4\u7b80\u6d01 \u7f3a\u70b9: \u9012\u5f52\u56e0\u7cfb\u7edf\u73af\u5883\u5f71\u54cd\u5927\uff0c\u5f53\u9012\u5f52\u6df1\u5ea6\u592a\u5927\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u4e0d\u53ef\u9884\u77e5\u7684\u7ed3\u679c \u9012\u5f52\u8c03\u7528\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5 \u00b6 \u9012\u63a8\u9636\u6bb5: \u4ece\u539f\u95ee\u9898\u51fa\u53d1\uff0c\u6309\u9012\u5f52\u516c\u5f0f\u9012\u63a8\uff0c\u4ece\u672a\u77e5\u5230\u5df2\u77e5\uff0c\u6700\u7ec8\u8fbe\u5230\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 \u56de\u5f52\u9636\u6bb5: \u6309\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u6c42\u51fa\u7ed3\u679c\uff0c\u9006\u5411\u9010\u6b65\u4ee3\u5165\u9012\u5f52\u516c\u5f0f\uff0c\u56de\u5f52\u5230\u539f\u95ee\u9898\u6c42\u89e3 # \u9650\u5236\u9012\u5f52\u5c42\u6570\u7684\u793a\u4f8b def fx ( n ): print ( '\u9012\u5f52\u8fdb\u5165\u7b2c %d \u5c42' % n ) if n == 3 : return fx ( n + 1 ) print ( '\u9012\u5f52\u9000\u51fa\u7b2c %d \u5c42' % n ) fx ( 1 ) print ( '\u7a0b\u5e8f\u7ed3\u675f' ) \u9012\u5f52\u6c42\u9636\u4e58\u793a\u4f8b \u00b6 # \u7ed9\u51fa\u4e00\u4e2a\u6570n \uff0c\u5199\u4e00\u4e2a\u51fd\u6570myfac(n)\u6765\u8ba1\u7b97n! # n! =1*2*3*4*5*...*n # print(myfac(5)) # 120 def myfac ( n ): # \u7528\u9012\u5f52\u6765\u5b9e\u73b0 if n == 1 : return 1 # \u5982\u679c\u4e0d\u662f1\uff0c\u5219\u9012\u63a8\u5230\u4e0b\u4e00\u7ea7\u6c42\u89e3 return n * myfac ( n - 1 ) print ( myfac ( 6 )) \u7ec3\u4e60 \u7528\u9012\u5f52\u5b9e\u73b0\u6c42\u548c def mysum(n): # \u8fd4\u56de1 + 2 + 3 + 4 + 5...+ n\u7684\u548c print(mysum(100)) # 5050","title":"12. \u9012\u5f52"},{"location":"python/python%E9%80%92%E5%BD%92/#recursion","text":"\u9012\u5f52\u662f\u6307\uff1a\u51fd\u6570\u76f4\u63a5\u6216\u95f4\u63a5\u8c03\u7528\u81ea\u8eab","title":"\u9012\u5f52\u51fd\u6570 recursion"},{"location":"python/python%E9%80%92%E5%BD%92/#_1","text":"# \u51fd\u6570\u76f4\u63a5\u8c03\u7528\u81ea\u8eab def f (): f () # \u76f4\u63a5\u8c03\u7528\u81ea\u8eab f () print ( '\u9012\u5f52\u5b8c\u6210' ) #\u51fd\u6570\u95f4\u63a5\u8c03\u7528\u81ea\u8eab def fa (): fb () def fb () fa () fa () print ( '\u9012\u5f52\u5b8c\u6210' )","title":"\u9012\u5f52\u793a\u4f8b"},{"location":"python/python%E9%80%92%E5%BD%92/#_2","text":"\u9012\u5f52\u4e00\u5b9a\u8981\u63a7\u5236\u9012\u5f52\u7684\u5c42\u6570\uff0c\u5f53\u7b26\u5408\u67d0\u4e00\u6761\u4ef6\u65f6\u8981\u7ec8\u6b62\u9012\u5f52\u8c03\u7528 \u51e0\u4e4e\u6240\u6709\u7684\u9012\u5f52\u90fd\u80fd\u7528while\u5faa\u73af\u6765\u4ee3\u66ff","title":"\u9012\u5f52\u8bf4\u660e"},{"location":"python/python%E9%80%92%E5%BD%92/#_3","text":"\u4f18\u70b9: \u53ef\u4ee5\u628a\u95ee\u9898\u7b80\u5355\u5316\uff0c\u8ba9\u601d\u8def\u7406\u4f1a\u4e3a\u6e05\u6670\uff0c\u4ee3\u7801\u66f4\u7b80\u6d01 \u7f3a\u70b9: \u9012\u5f52\u56e0\u7cfb\u7edf\u73af\u5883\u5f71\u54cd\u5927\uff0c\u5f53\u9012\u5f52\u6df1\u5ea6\u592a\u5927\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u4e0d\u53ef\u9884\u77e5\u7684\u7ed3\u679c","title":"\u9012\u5f52\u7684\u4f18\u7f3a\u70b9"},{"location":"python/python%E9%80%92%E5%BD%92/#_4","text":"\u9012\u63a8\u9636\u6bb5: \u4ece\u539f\u95ee\u9898\u51fa\u53d1\uff0c\u6309\u9012\u5f52\u516c\u5f0f\u9012\u63a8\uff0c\u4ece\u672a\u77e5\u5230\u5df2\u77e5\uff0c\u6700\u7ec8\u8fbe\u5230\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 \u56de\u5f52\u9636\u6bb5: \u6309\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u6c42\u51fa\u7ed3\u679c\uff0c\u9006\u5411\u9010\u6b65\u4ee3\u5165\u9012\u5f52\u516c\u5f0f\uff0c\u56de\u5f52\u5230\u539f\u95ee\u9898\u6c42\u89e3 # \u9650\u5236\u9012\u5f52\u5c42\u6570\u7684\u793a\u4f8b def fx ( n ): print ( '\u9012\u5f52\u8fdb\u5165\u7b2c %d \u5c42' % n ) if n == 3 : return fx ( n + 1 ) print ( '\u9012\u5f52\u9000\u51fa\u7b2c %d \u5c42' % n ) fx ( 1 ) print ( '\u7a0b\u5e8f\u7ed3\u675f' )","title":"\u9012\u5f52\u8c03\u7528\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5"},{"location":"python/python%E9%80%92%E5%BD%92/#_5","text":"# \u7ed9\u51fa\u4e00\u4e2a\u6570n \uff0c\u5199\u4e00\u4e2a\u51fd\u6570myfac(n)\u6765\u8ba1\u7b97n! # n! =1*2*3*4*5*...*n # print(myfac(5)) # 120 def myfac ( n ): # \u7528\u9012\u5f52\u6765\u5b9e\u73b0 if n == 1 : return 1 # \u5982\u679c\u4e0d\u662f1\uff0c\u5219\u9012\u63a8\u5230\u4e0b\u4e00\u7ea7\u6c42\u89e3 return n * myfac ( n - 1 ) print ( myfac ( 6 )) \u7ec3\u4e60 \u7528\u9012\u5f52\u5b9e\u73b0\u6c42\u548c def mysum(n): # \u8fd4\u56de1 + 2 + 3 + 4 + 5...+ n\u7684\u548c print(mysum(100)) # 5050","title":"\u9012\u5f52\u6c42\u9636\u4e58\u793a\u4f8b"},{"location":"python/python%E9%9B%86%E5%90%88/","text":"\u96c6\u5408 set \u00b6 \u96c6\u5408\u662f\u53ef\u53d8\u7684\u5bb9\u5668 \u96c6\u5408\u5185\u7684\u6570\u636e\u5bf9\u8c61\u90fd\u662f\u552f\u4e00\u7684 \u96c6\u5408\u662f\u65e0\u5e8f\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u96c6\u5408\u4e2d\u7684\u6570\u636e\u6ca1\u6709\u5148\u540e\u987a\u5e8f \u96c6\u5408\u5185\u7684\u5143\u7d20\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61 \u96c6\u5408\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u521b\u5efa\u7a7a\u7684\u96c6\u5408 \u00b6 \u200b set() \u521b\u5efa\u975e\u7a7a\u96c6\u5408\u7684\u5b57\u9762\u503c\u8868\u793a \u00b6 s = {1, 2, 3} \u96c6\u5408\u7684\u6784\u9020\u51fd\u6570 \u00b6 set() #\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\uff08\u4e0d\u80fd\u7528{} \u6765\u521b\u5efa\u96c6\u5408\uff09 set(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u96c6\u5408 # \u793a\u4f8b\uff1a s = set () s = { 2 , 3 , 5 , 7 } s = set ( 'ABC' ) # s = {'A', 'B', 'C'} s = set ( 'ABCCBA' ) # s = {'A', 'B', 'C'} s = set ({ 1 : '1' , 2 : '2' , 5 : '5' }) # s = {1, 2, 5} s = set \uff08 ( 'ABC' , '123' , True ) \uff09 s = { True , None , 'ABc' , ( 1 , 2 , 3 )} \u96c6\u5408\u7684\u8fd0\u7b97 \u00b6 \u4ea4\u96c6 & \u5e76\u96c6 | \u8865\u96c6 - \u5bf9\u79f0\u8865\u96c6 ^ \u5b50\u96c6 < \u8d85\u96c6 > & \u7528\u4e8e\u751f\u6210\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 s1 = {1, 2, 3} s2 = {2, 3, 4} s1 & s2 #{2, 3} | \u7528\u4e8e\u751f\u6210\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 s1 = {1, 2, 3} s2 = {2, 3, 4} s1 | s2 #{1, 2, 3, 4} - \u751f\u6210\u4e24\u4e2a\u96c6\u5408\u7684\u8865\u96c6 s1 = {1, 2, 3} s2 = {2, 3, 4} s1 - s2 # \u751f\u6210s1 \u4f46\u4e0d\u5c5e\u4e8e s2 \u7684\u6240\u6709\u5143\u7d20 ^ \u5bf9\u79f0\u8865\u96c6 s1 = {1, 2, 3} s2 = {2, 3, 4} s1 ^ s2 # {1\uff0c 4} < \u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 > \u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u8d85\u96c6 s1 = {1, 2, 3} s2 = {2, 3} s1 > s2 #True s2 < s1 #True == != \u76f8\u540c/\u4e0d\u540c s1 = {1, 3, 2} s2 = {1, 2, 3} s1 == s2 # True \u80fd\u7528\u4e8e\u96c6\u5408\u7684\u51fd\u6570 \u00b6 len(s) \u8fd4\u56de\u96c6\u5408\u7684\u957f\u5ea6 max(s) \u8fd4\u56de\u96c6\u5408\u7684\u6700\u5927\u503c\u5143\u7d20 min(s) \u8fd4\u56de\u96c6\u5408\u7684\u6700\u5c0f\u503c\u5143\u7d20 sum(s) \u8fd4\u56de\u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c any(s) \u771f\u503c\u6d4b\u8bd5\uff0c\u89c4\u5219\u4e0e\u5217\u8868\u76f8\u540c all(s) \u5047\u503c\u6d4b\u8bd5\uff0c\u89c4\u5219\u4e0e\u5217\u8868\u76f8\u540c \u96c6\u5408\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u00b6 \u53ef\u4ee5\u7528\u4e8efor \u8bed\u53e5\u4e2d \u7ec3\u4e60 \u7ecf\u7406\u6709 : \u66f9\u64cd\uff0c \u5218\u5907\uff0c \u5b59\u6743 \u6280\u672f\u6709 : \u66f9\u64cd\uff0c \u5b59\u6743\uff0c\u5f20\u98de\uff0c\u5173\u7fbd \u7528\u96c6\u5408\u6c42\uff1a 1. \u65e2\u662f\u7ecf\u7406\u53c8\u662f\u6280\u672f\u7684\u6709 2. \u662f\u7ecf\u7406\uff0c \u4f46\u4e0d\u662f\u6280\u672f\u7684\u6709 3. \u662f\u6280\u672f\uff0c\u4f46\u4e0d\u662f\u7ecf\u7406\u7684\u6709 4. \u5f20\u98de\u662f\u7ecf\u7406\u5417 5. \u8eab\u517c\u4e00\u804c\u7684\u4eba\u90fd\u6709\u8c01 6. \u7ecf\u7406\u548c\u6280\u672f\u5171\u6709\u51e0\u4eba \u96c6\u5408\u63a8\u5bfc\u5f0f \u00b6 \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u96c6\u5408\u7684\u8868\u8fbe\u5f0f \u8bed\u6cd5\uff1a {\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u771f\u503c\u8868\u8fbe\u5f0f]} [] \u90e8\u5206\u53ef\u7701\u7565 \u793a\u4f8b numbers = [1, 2, 3, 4, 5, 6, 7, 8 ,9] s = {x ** 2 for x in numbers} s = set(i for i in range(10)) \u56fa\u5b9a\u96c6\u5408 frozenset \u00b6 \u56fa\u5b9a\u96c6\u5408\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff0c\u65e0\u5e8f\u7684\uff0c\u542b\u6709\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408 \u4f5c\u7528 \u56fa\u5b9a\u96c6\u5408\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u5178\u7684\u952e\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u96c6\u5408\u7684\u503c \u56fa\u5b9a\u96c6\u5408\u7684\u6784\u9020\u51fd\u6570 frozenset() \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u56fa\u5b9a\u96c6\u5408 frozenset(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u56fa\u5b9a\u96c6\u5408 \u793a\u4f8b fz = frozenset() fz = frozenset('ABCACA') fz = frozenset([1, 2, 3, 4, 5]) \u56fa\u5b9a\u96c6\u5408\u7684\u8fd0\u7b97 & \u4ea4\u96c6 | \u5e76\u96c6 - \u8865\u96c6 ^ \u5bf9\u79f0\u8865\u96c6 in / not in > >= < <= == != (\u4ee5\u4e0a\u8fd0\u7b97\u7b49\u540c\u4e8e\u96c6\u5408\u7684\u8fd0\u7b97) \u56fa\u5b9a\u96c6\u5408\u7684\u65b9\u6cd5 \u200b \u76f8\u5f53\u4e8e\u96c6\u5408\u7684\u5168\u90e8\u7684\u65b9\u6cd5\u53bb\u6389\u4fee\u6539\u96c6\u5408\u7684\u65b9\u6cd5","title":"8. \u96c6\u5408"},{"location":"python/python%E9%9B%86%E5%90%88/#set","text":"\u96c6\u5408\u662f\u53ef\u53d8\u7684\u5bb9\u5668 \u96c6\u5408\u5185\u7684\u6570\u636e\u5bf9\u8c61\u90fd\u662f\u552f\u4e00\u7684 \u96c6\u5408\u662f\u65e0\u5e8f\u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u96c6\u5408\u4e2d\u7684\u6570\u636e\u6ca1\u6709\u5148\u540e\u987a\u5e8f \u96c6\u5408\u5185\u7684\u5143\u7d20\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61 \u96c6\u5408\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61","title":"\u96c6\u5408 set"},{"location":"python/python%E9%9B%86%E5%90%88/#_1","text":"\u200b set()","title":"\u521b\u5efa\u7a7a\u7684\u96c6\u5408"},{"location":"python/python%E9%9B%86%E5%90%88/#_2","text":"s = {1, 2, 3}","title":"\u521b\u5efa\u975e\u7a7a\u96c6\u5408\u7684\u5b57\u9762\u503c\u8868\u793a"},{"location":"python/python%E9%9B%86%E5%90%88/#_3","text":"set() #\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\uff08\u4e0d\u80fd\u7528{} \u6765\u521b\u5efa\u96c6\u5408\uff09 set(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u96c6\u5408 # \u793a\u4f8b\uff1a s = set () s = { 2 , 3 , 5 , 7 } s = set ( 'ABC' ) # s = {'A', 'B', 'C'} s = set ( 'ABCCBA' ) # s = {'A', 'B', 'C'} s = set ({ 1 : '1' , 2 : '2' , 5 : '5' }) # s = {1, 2, 5} s = set \uff08 ( 'ABC' , '123' , True ) \uff09 s = { True , None , 'ABc' , ( 1 , 2 , 3 )}","title":"\u96c6\u5408\u7684\u6784\u9020\u51fd\u6570"},{"location":"python/python%E9%9B%86%E5%90%88/#_4","text":"\u4ea4\u96c6 & \u5e76\u96c6 | \u8865\u96c6 - \u5bf9\u79f0\u8865\u96c6 ^ \u5b50\u96c6 < \u8d85\u96c6 > & \u7528\u4e8e\u751f\u6210\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 s1 = {1, 2, 3} s2 = {2, 3, 4} s1 & s2 #{2, 3} | \u7528\u4e8e\u751f\u6210\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6 s1 = {1, 2, 3} s2 = {2, 3, 4} s1 | s2 #{1, 2, 3, 4} - \u751f\u6210\u4e24\u4e2a\u96c6\u5408\u7684\u8865\u96c6 s1 = {1, 2, 3} s2 = {2, 3, 4} s1 - s2 # \u751f\u6210s1 \u4f46\u4e0d\u5c5e\u4e8e s2 \u7684\u6240\u6709\u5143\u7d20 ^ \u5bf9\u79f0\u8865\u96c6 s1 = {1, 2, 3} s2 = {2, 3, 4} s1 ^ s2 # {1\uff0c 4} < \u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 > \u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u8d85\u96c6 s1 = {1, 2, 3} s2 = {2, 3} s1 > s2 #True s2 < s1 #True == != \u76f8\u540c/\u4e0d\u540c s1 = {1, 3, 2} s2 = {1, 2, 3} s1 == s2 # True","title":"\u96c6\u5408\u7684\u8fd0\u7b97"},{"location":"python/python%E9%9B%86%E5%90%88/#_5","text":"len(s) \u8fd4\u56de\u96c6\u5408\u7684\u957f\u5ea6 max(s) \u8fd4\u56de\u96c6\u5408\u7684\u6700\u5927\u503c\u5143\u7d20 min(s) \u8fd4\u56de\u96c6\u5408\u7684\u6700\u5c0f\u503c\u5143\u7d20 sum(s) \u8fd4\u56de\u96c6\u5408\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c any(s) \u771f\u503c\u6d4b\u8bd5\uff0c\u89c4\u5219\u4e0e\u5217\u8868\u76f8\u540c all(s) \u5047\u503c\u6d4b\u8bd5\uff0c\u89c4\u5219\u4e0e\u5217\u8868\u76f8\u540c","title":"\u80fd\u7528\u4e8e\u96c6\u5408\u7684\u51fd\u6570"},{"location":"python/python%E9%9B%86%E5%90%88/#_6","text":"\u53ef\u4ee5\u7528\u4e8efor \u8bed\u53e5\u4e2d \u7ec3\u4e60 \u7ecf\u7406\u6709 : \u66f9\u64cd\uff0c \u5218\u5907\uff0c \u5b59\u6743 \u6280\u672f\u6709 : \u66f9\u64cd\uff0c \u5b59\u6743\uff0c\u5f20\u98de\uff0c\u5173\u7fbd \u7528\u96c6\u5408\u6c42\uff1a 1. \u65e2\u662f\u7ecf\u7406\u53c8\u662f\u6280\u672f\u7684\u6709 2. \u662f\u7ecf\u7406\uff0c \u4f46\u4e0d\u662f\u6280\u672f\u7684\u6709 3. \u662f\u6280\u672f\uff0c\u4f46\u4e0d\u662f\u7ecf\u7406\u7684\u6709 4. \u5f20\u98de\u662f\u7ecf\u7406\u5417 5. \u8eab\u517c\u4e00\u804c\u7684\u4eba\u90fd\u6709\u8c01 6. \u7ecf\u7406\u548c\u6280\u672f\u5171\u6709\u51e0\u4eba","title":"\u96c6\u5408\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"python/python%E9%9B%86%E5%90%88/#_7","text":"\u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u96c6\u5408\u7684\u8868\u8fbe\u5f0f \u8bed\u6cd5\uff1a {\u8868\u8fbe\u5f0f for \u53d8\u91cf in \u53ef\u8fed\u4ee3\u5bf9\u8c61 [if \u771f\u503c\u8868\u8fbe\u5f0f]} [] \u90e8\u5206\u53ef\u7701\u7565 \u793a\u4f8b numbers = [1, 2, 3, 4, 5, 6, 7, 8 ,9] s = {x ** 2 for x in numbers} s = set(i for i in range(10))","title":"\u96c6\u5408\u63a8\u5bfc\u5f0f"},{"location":"python/python%E9%9B%86%E5%90%88/#frozenset","text":"\u56fa\u5b9a\u96c6\u5408\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff0c\u65e0\u5e8f\u7684\uff0c\u542b\u6709\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408 \u4f5c\u7528 \u56fa\u5b9a\u96c6\u5408\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u5178\u7684\u952e\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u96c6\u5408\u7684\u503c \u56fa\u5b9a\u96c6\u5408\u7684\u6784\u9020\u51fd\u6570 frozenset() \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u56fa\u5b9a\u96c6\u5408 frozenset(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u56fa\u5b9a\u96c6\u5408 \u793a\u4f8b fz = frozenset() fz = frozenset('ABCACA') fz = frozenset([1, 2, 3, 4, 5]) \u56fa\u5b9a\u96c6\u5408\u7684\u8fd0\u7b97 & \u4ea4\u96c6 | \u5e76\u96c6 - \u8865\u96c6 ^ \u5bf9\u79f0\u8865\u96c6 in / not in > >= < <= == != (\u4ee5\u4e0a\u8fd0\u7b97\u7b49\u540c\u4e8e\u96c6\u5408\u7684\u8fd0\u7b97) \u56fa\u5b9a\u96c6\u5408\u7684\u65b9\u6cd5 \u200b \u76f8\u5f53\u4e8e\u96c6\u5408\u7684\u5168\u90e8\u7684\u65b9\u6cd5\u53bb\u6389\u4fee\u6539\u96c6\u5408\u7684\u65b9\u6cd5","title":"\u56fa\u5b9a\u96c6\u5408 frozenset"},{"location":"python/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/","text":"\u51fd\u6570\u5f0f\u7f16\u7a0b \u00b6 \u200b \u6307\u7528\u4e00\u7cfb\u5217\u51fd\u6570\u89e3\u51b3\u95ee\u9898 # \u793a\u4f8b \u6c42 1 + 2 + 3 + 4 +...+ 100 \u7684\u548c # \u65b9\u6cd51 s = 0 for x in range ( 1 , 101 ): s += x print ( s ) # \u65b9\u6cd52 print ( sum ( range ( 1 , 101 ))) \u51fd\u6570\u7684\u53ef\u91cd\u5165\u6027 \u00b6 \u5f53\u4e00\u4e2a\u51fd\u6570\u7684\u8f93\u5165\u4e00\u5b9a\uff0c\u5219\u8f93\u51fa\u5fc5\u7136\u4e00\u5b9a\u7684\u51fd\u6570\u79f0\u4e3a\u53ef\u91cd\u5165\u51fd\u6570 \u8bf4\u660e \u200b \u53ef\u91cd\u5165\u51fd\u6570\u5185\u4e00\u5b9a\u4e0d\u4f1a\u8bbf\u95ee\u9664\u5c40\u90e8\u53d8\u91cf\u4ee5\u5916\u7684\u53d8\u91cf # \u793a\u4f8b # \u53ef\u91cd\u5165\u51fd\u6570 def myadd ( x , y ): return x + y print ( myadd ( 100 , 200 )) # 300 # \u4e0d\u53ef\u91cd\u5165\u51fd\u6570 y = 200 def myadd ( x ): return x + y print ( myadd ( y )) # 300 y = 300 print ( myadd ( 100 )) # 400 \u9ad8\u9636\u51fd\u6570 \u00b6 \uff08\u53ef\u7528\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u51fd\u6570\uff09 \u4ec0\u4e48\u662f\u9ad8\u9636\u51fd\u6570\uff1f\uff1f \u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u4e2d\u7684\u4e00\u4e2a\u7684\u51fd\u6570\u5373\u4e3a\u9ad8\u9636\u51fd\u6570 1. \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 2. \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570 python\u5185\u7f6e\u7684\u9ad8\u9636\u51fd\u6570 \u00b6 map filter sorted map\u51fd\u6570 \u00b6 map(func, *iterable) \u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6b64\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7528\u51fd\u6570func\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61iterable\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u53c2\u6570\u8ba1\u7b97\u540e\u5f97\u65b0\u7684\u6570\u636e # \u6b64\u793a\u4f8b\u793a\u610fmap\u51fd\u6570\u7684\u4f7f\u7528 def power2 ( x ): return x ** 2 for x in map ( power2 , range ( 1 , 10 )): print ( x ) # 1, 4, 9, 16 ... 81 \u7ec3\u4e60 \u6c42 1**2 + 2**2 +3**2 +...+ 9**2 \u7684\u548c \u6c42 1**3 + 2**3 +3**3 +...+ 9**3 \u7684\u548c \u7b54\u6848 s = sum((map(lambda x : x**2, range(1, 10)))) print(s) s = sum((map(lambda x : x**3, range(1, 10)))) print(s) filter \u51fd\u6570 \u00b6 \u8bed\u6cd5 filter(function, iterbale) \u4f5c\u7528 1. \u7b5b\u9009\u53ef\u8fed\u4ee3\u5bf9\u8c61iterable \u4e2d\u7684\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6b64\u53ef\u8fed\u4ee3\u5bf9\u8c61\u53ea\u8fd4\u56deiterable\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u6570\u636e 2. function\u5c06\u5bf9iterbale\u4e2d\u63d0\u4f9b\u7684\u6bcf\u4e2a\u6570\u636e\u8fdb\u884c\u6c42\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\u5219\u4fdd\u7559\uff0c\u5426\u5219\u4e3aFalse \u4e22\u5f03\u6570\u636e names = ['Tom', 'Jerry', 'Spike', 'Tyke'] l5 = sorted(names, key=lambda s : s[::-1]) print(l5) \u7ec3\u4e60 1. \u5c061-20\u7684\u5076\u6570\u7528filter\u751f\u6210\u53ef\u8fed\u4ee3\u5bf9\u8c61\u540e\uff0c\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u7684\u6570\u636e\u5b58\u4e8e\u5217\u8868\u4e2d l = list(filter(lambda x : x%2==0, range(1,21))) print(l) 2. \u7528filter \u51fd\u6570\u5c061-100\u4e4b\u95f4\u7684\u6240\u6709\u7d20\u6570\u5b58\u5728\u5217\u8868\u4e2d def isprime(n): if n < 2: return False for i in range(2, n): if n % i == 0: return False return True l = list(filter(isprime, range(1,100))) print(l) sorted \u51fd\u6570 \u00b6 \u4f5c\u7528 \u5c06\u539f\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u751f\u6210\u6392\u5e8f\u540e\u7684\u5217\u8868 \u51fd\u6570\u53c2\u6570\u683c\u5f0f sorted(iterable, key=None, reverse=False) \u8bf4\u660e iterable \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u3010key\u51fd\u6570\u3011\u662f\u7528\u6765\u63d0\u4f9b\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u5c06\u4f5c\u4e3a\u6392\u5e8f\u7684\u4f9d\u636e\uff0c\u5982\u679c\u4e0d\u7ed9\u51fakey\u51fd\u6570\uff0c\u5219\u7528 \u539f\u6570\u636e\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\u548c\u6392\u5e8f reverse \u6807\u5fd7\u7528\u6765\u8bbe\u7f6e\u662f\u5426\u964d\u5e8f\u6392\u5e8f \u793a\u4f8b l = [5, -2, -4, 0, 3, 1] l2 = sorted(l) # [-4, -2, 0, 1, 3, 5] l3 = sorted(l, reverse=True) # [5, 3, 1, 0, -2, -4] l4 = sorted(l, key=abs) # [0, 1, -2, 3, -4, 5] names = ['Tom', 'Jerry', 'Spike', 'Tyke'] l5 = sorted(names) # ['Jerry', 'Spike', 'Tom', 'Tyke'] names = ['Tom', 'Jerry', 'Spike', 'Tyke'] l5 = sorted(names, key=len) # ['Tom', 'Tyke', 'Jerry', 'Spike'] \u7ec3\u4e60 names = ['Tom', 'Jerry', 'Spike', 'Tyke'] \u6392\u5e8f\u7684\u4f9d\u636e\u4e3a\u5b57\u7b26\u4e32\u7684\u53cd\u5e8f 'moT' 'yrreJ' 'ekipS' 'ekyT' \u7ed3\u679c\u4e3a ['Spike', 'Tyke', 'Tom', 'Jerry'] names = ['Tom', 'Jerry', 'Spike', 'Tyke'] l5 = sorted(names, key=lambda s : s[::-1])","title":"11. \u9ad8\u9636\u51fd\u6570"},{"location":"python/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/#_1","text":"\u200b \u6307\u7528\u4e00\u7cfb\u5217\u51fd\u6570\u89e3\u51b3\u95ee\u9898 # \u793a\u4f8b \u6c42 1 + 2 + 3 + 4 +...+ 100 \u7684\u548c # \u65b9\u6cd51 s = 0 for x in range ( 1 , 101 ): s += x print ( s ) # \u65b9\u6cd52 print ( sum ( range ( 1 , 101 )))","title":"\u51fd\u6570\u5f0f\u7f16\u7a0b"},{"location":"python/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/#_2","text":"\u5f53\u4e00\u4e2a\u51fd\u6570\u7684\u8f93\u5165\u4e00\u5b9a\uff0c\u5219\u8f93\u51fa\u5fc5\u7136\u4e00\u5b9a\u7684\u51fd\u6570\u79f0\u4e3a\u53ef\u91cd\u5165\u51fd\u6570 \u8bf4\u660e \u200b \u53ef\u91cd\u5165\u51fd\u6570\u5185\u4e00\u5b9a\u4e0d\u4f1a\u8bbf\u95ee\u9664\u5c40\u90e8\u53d8\u91cf\u4ee5\u5916\u7684\u53d8\u91cf # \u793a\u4f8b # \u53ef\u91cd\u5165\u51fd\u6570 def myadd ( x , y ): return x + y print ( myadd ( 100 , 200 )) # 300 # \u4e0d\u53ef\u91cd\u5165\u51fd\u6570 y = 200 def myadd ( x ): return x + y print ( myadd ( y )) # 300 y = 300 print ( myadd ( 100 )) # 400","title":"\u51fd\u6570\u7684\u53ef\u91cd\u5165\u6027"},{"location":"python/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/#_3","text":"\uff08\u53ef\u7528\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u51fd\u6570\uff09 \u4ec0\u4e48\u662f\u9ad8\u9636\u51fd\u6570\uff1f\uff1f \u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u4e2d\u7684\u4e00\u4e2a\u7684\u51fd\u6570\u5373\u4e3a\u9ad8\u9636\u51fd\u6570 1. \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 2. \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570","title":"\u9ad8\u9636\u51fd\u6570"},{"location":"python/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/#python","text":"map filter sorted","title":"python\u5185\u7f6e\u7684\u9ad8\u9636\u51fd\u6570"},{"location":"python/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/#map","text":"map(func, *iterable) \u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6b64\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7528\u51fd\u6570func\u5bf9\u53ef\u8fed\u4ee3\u5bf9\u8c61iterable\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u53c2\u6570\u8ba1\u7b97\u540e\u5f97\u65b0\u7684\u6570\u636e # \u6b64\u793a\u4f8b\u793a\u610fmap\u51fd\u6570\u7684\u4f7f\u7528 def power2 ( x ): return x ** 2 for x in map ( power2 , range ( 1 , 10 )): print ( x ) # 1, 4, 9, 16 ... 81 \u7ec3\u4e60 \u6c42 1**2 + 2**2 +3**2 +...+ 9**2 \u7684\u548c \u6c42 1**3 + 2**3 +3**3 +...+ 9**3 \u7684\u548c \u7b54\u6848 s = sum((map(lambda x : x**2, range(1, 10)))) print(s) s = sum((map(lambda x : x**3, range(1, 10)))) print(s)","title":"map\u51fd\u6570"},{"location":"python/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/#filter","text":"\u8bed\u6cd5 filter(function, iterbale) \u4f5c\u7528 1. \u7b5b\u9009\u53ef\u8fed\u4ee3\u5bf9\u8c61iterable \u4e2d\u7684\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u6b64\u53ef\u8fed\u4ee3\u5bf9\u8c61\u53ea\u8fd4\u56deiterable\u4e2d\u7b26\u5408\u6761\u4ef6\u7684\u6570\u636e 2. function\u5c06\u5bf9iterbale\u4e2d\u63d0\u4f9b\u7684\u6bcf\u4e2a\u6570\u636e\u8fdb\u884c\u6c42\u5e03\u5c14\u503c\uff0c\u5982\u679c\u4e3aTrue\u5219\u4fdd\u7559\uff0c\u5426\u5219\u4e3aFalse \u4e22\u5f03\u6570\u636e names = ['Tom', 'Jerry', 'Spike', 'Tyke'] l5 = sorted(names, key=lambda s : s[::-1]) print(l5) \u7ec3\u4e60 1. \u5c061-20\u7684\u5076\u6570\u7528filter\u751f\u6210\u53ef\u8fed\u4ee3\u5bf9\u8c61\u540e\uff0c\u5c06\u53ef\u8fed\u4ee3\u5bf9\u8c61\u751f\u6210\u7684\u6570\u636e\u5b58\u4e8e\u5217\u8868\u4e2d l = list(filter(lambda x : x%2==0, range(1,21))) print(l) 2. \u7528filter \u51fd\u6570\u5c061-100\u4e4b\u95f4\u7684\u6240\u6709\u7d20\u6570\u5b58\u5728\u5217\u8868\u4e2d def isprime(n): if n < 2: return False for i in range(2, n): if n % i == 0: return False return True l = list(filter(isprime, range(1,100))) print(l)","title":"filter \u51fd\u6570"},{"location":"python/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/#sorted","text":"\u4f5c\u7528 \u5c06\u539f\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u751f\u6210\u6392\u5e8f\u540e\u7684\u5217\u8868 \u51fd\u6570\u53c2\u6570\u683c\u5f0f sorted(iterable, key=None, reverse=False) \u8bf4\u660e iterable \u53ef\u8fed\u4ee3\u5bf9\u8c61 \u3010key\u51fd\u6570\u3011\u662f\u7528\u6765\u63d0\u4f9b\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u5c06\u4f5c\u4e3a\u6392\u5e8f\u7684\u4f9d\u636e\uff0c\u5982\u679c\u4e0d\u7ed9\u51fakey\u51fd\u6570\uff0c\u5219\u7528 \u539f\u6570\u636e\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\u548c\u6392\u5e8f reverse \u6807\u5fd7\u7528\u6765\u8bbe\u7f6e\u662f\u5426\u964d\u5e8f\u6392\u5e8f \u793a\u4f8b l = [5, -2, -4, 0, 3, 1] l2 = sorted(l) # [-4, -2, 0, 1, 3, 5] l3 = sorted(l, reverse=True) # [5, 3, 1, 0, -2, -4] l4 = sorted(l, key=abs) # [0, 1, -2, 3, -4, 5] names = ['Tom', 'Jerry', 'Spike', 'Tyke'] l5 = sorted(names) # ['Jerry', 'Spike', 'Tom', 'Tyke'] names = ['Tom', 'Jerry', 'Spike', 'Tyke'] l5 = sorted(names, key=len) # ['Tom', 'Tyke', 'Jerry', 'Spike'] \u7ec3\u4e60 names = ['Tom', 'Jerry', 'Spike', 'Tyke'] \u6392\u5e8f\u7684\u4f9d\u636e\u4e3a\u5b57\u7b26\u4e32\u7684\u53cd\u5e8f 'moT' 'yrreJ' 'ekipS' 'ekyT' \u7ed3\u679c\u4e3a ['Spike', 'Tyke', 'Tom', 'Jerry'] names = ['Tom', 'Jerry', 'Spike', 'Tyke'] l5 = sorted(names, key=lambda s : s[::-1])","title":"sorted \u51fd\u6570"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/","text":"Pytest \u662f Python \u7684\u4e00\u79cd\u6613\u7528\u3001\u9ad8\u6548\u548c\u7075\u6d3b\u7684\u5355\u5143\u6d4b\u8bd5\u6846\u67b6\uff0c\u53ef\u4ee5\u652f\u6301\u5355\u5143\u6d4b\u8bd5\u548c\u529f\u80fd\u6d4b\u8bd5\u3002\u672c\u6587\u4e0d\u4ee5\u4ecb\u7ecd Pytest \u5de5\u5177\u672c\u8eab\u4e3a\u76ee\u7684\uff0c\u800c\u662f\u4ee5\u4e00\u4e2a\u5b9e\u9645\u7684 API \u6d4b\u8bd5\u9879\u76ee\u4e3a\u4f8b\uff0c\u5c06 Pytest \u7684\u529f\u80fd\u5e94\u7528\u5230\u5b9e\u9645\u7684\u6d4b\u8bd5\u5de5\u7a0b\u5b9e\u8df5\u4e2d\uff0c\u6559\u5927\u5bb6\u5c06 Pytest \u7528\u8d77\u6765\u3002 \u5728\u5f00\u59cb\u672c\u6587\u4e4b\u524d\uff0c\u6211\u60f3\u8ddf\u5927\u5bb6\u6f84\u6e05\u4e24\u4e2a\u6982\u5ff5\uff0c\u4e00\u4e2a\u662f\u6d4b\u8bd5\u6846\u67b6\u4e00\u4e2a\u662f\u6d4b\u8bd5\u5de5\u5177\u3002\u5f88\u591a\u4eba\u5bb9\u6613\u628a\u4ed6\u4eec\u641e\u6df7\u4e86\uff0c\u6d4b\u8bd5\u6846\u67b6\u662f\u8bf8\u5982 Unittest\u3001Pytest\u3001TestNG \u8fd9\u7c7b\uff0c\u800c\u6d4b\u8bd5\u5de5\u5177\u6307\u7684\u5219\u662f Selenium\u3001Appium\u3001Jmeter \u8fd9\u7c7b\u3002 \u6d4b\u8bd5\u6846\u67b6\u7684\u4f5c\u7528\u662f\uff0c\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u6d4b\u8bd5\u7528\u4f8b\u3001\u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\u3001\u53c2\u6570\u5316\u3001\u65ad\u8a00\u3001\u751f\u6210\u6d4b\u8bd5\u62a5\u544a\u7b49\u57fa\u7840\u6027\u5de5\u4f5c\uff0c\u8ba9\u6211\u4eec\u5c06\u7cbe\u529b\u7528\u5728\u6d4b\u8bd5\u7528\u4f8b\u7684\u7f16\u5199\u4e0a\u3002\u597d\u7684\u6d4b\u8bd5\u6846\u67b6\u5e94\u8be5\u5177\u6709\u5f88\u9ad8\u7684\u6269\u5c55\u6027\uff0c\u652f\u6301\u4e8c\u6b21\u5f00\u53d1\uff0c\u5e76\u80fd\u591f\u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u3002 \u6d4b\u8bd5\u5de5\u5177\u7684\u4f5c\u7528\u662f\u4e3a\u4e86\u5b8c\u6210\u67d0\u4e00\u7c7b\u578b\u7684\u6d4b\u8bd5\uff0c\u6bd4\u5982 Selenium \u7528\u4e8e\u5bf9 WEB UI \u8fdb\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0cAppium \u7528\u6765\u5bf9 APP \u8fdb\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\uff0cJmeter \u53ef\u4ee5\u7528\u6765\u8fdb\u884c API \u81ea\u52a8\u5316\u6d4b\u8bd5\u548c\u6027\u80fd\u6d4b\u8bd5\u3002\u53e6\u5916\uff0cJava \u8bed\u8a00\u4e2d OkHttp \u5e93\uff0cPython \u8bed\u8a00\u4e2d\u7684 requests \u5e93\uff0c\u8fd9\u4e9b HTTP \u7684 client \u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u79cd API \u6d4b\u8bd5\u5de5\u5177\u3002 \u6f84\u6e05\u4e86\u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u8bf4\u4e00\u4e0b\u672c\u6587\u7684\u76ee\u7684\u3002\u5176\u5b9e\u7f51\u4e0a\u5df2\u7ecf\u6709\u5f88\u591a\u6559\u7a0b\uff0c\u5305\u62ec\u5b98\u65b9\u6587\u6863\uff0c\u90fd\u662f\u4ee5\u4ecb\u7ecd Pytest \u7684\u529f\u80fd\u4e3a\u51fa\u53d1\u70b9\uff0c\u7f57\u5217\u4e86\u5404\u79cd\u529f\u80fd\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u5927\u5bb6\u770b\u5b8c\u4e4b\u540e\u4f1a\u611f\u89c9\u90fd\u660e\u767d\u4e86\uff0c\u4f46\u662f\u8fd8\u662f\u4e0d\u77e5\u9053\u5982\u4f55\u4e0e\u5b9e\u9645\u9879\u76ee\u76f8\u7ed3\u5408\uff0c\u771f\u6b63\u843d\u5730\u7528\u8d77\u6765\u3002\u672c\u6587\u4e0d\u4ee5\u4ecb\u7ecd Pytest \u5de5\u5177\u672c\u8eab\u4e3a\u76ee\u7684\uff0c\u800c\u662f\u4ee5\u4e00\u4e2a\u5b9e\u9645\u7684 API \u6d4b\u8bd5\u9879\u76ee\u4e3a\u4f8b\uff0c\u901a\u8fc7\u5355\u5143\u6d4b\u8bd5\u6846\u67b6 Pytest \u548c Python \u7684 Requests \u5e93\u76f8\u7ed3\u5408\uff0c\u5c06 Pytest \u529f\u80fd\u5e94\u7528\u5230\u5b9e\u9645\u7684\u6d4b\u8bd5\u5de5\u7a0b\u5b9e\u8df5\u4e2d\uff0c\u6559\u5927\u5bb6\u5c06 Pytest \u7528\u8d77\u6765\u3002 \u8bf7\u76f8\u4fe1\u6211\uff0c\u4f7f\u7528 Pytest \u4f1a\u8ba9\u4f60\u7684\u6d4b\u8bd5\u5de5\u4f5c\u975e\u5e38\u9ad8\u6548\u3002 01 Pytest \u6838\u5fc3\u529f\u80fd \u00b6 \u5728\u5f00\u59cb\u4f7f\u7528 Pytest \u4e4b\u524d\uff0c\u5148\u6765\u4e86\u89e3\u4e00\u4e0b Pytest \u7684\u6838\u5fc3\u529f\u80fd\uff0c\u6839\u636e\u5b98\u65b9\u7f51\u7ad9\u4ecb\u7ecd\uff0c\u5b83\u5177\u6709\u5982\u4e0b\u529f\u80fd\u548c\u7279\u70b9\uff1a \u975e\u5e38\u5bb9\u6613\u4e0a\u624b\uff0c\u5165\u95e8\u7b80\u5355\uff0c\u6587\u6863\u4e30\u5bcc\uff0c\u6587\u6863\u4e2d\u6709\u5f88\u591a\u5b9e\u4f8b\u53ef\u4ee5\u53c2\u8003\u3002 \u80fd\u591f\u652f\u6301\u7b80\u5355\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u590d\u6742\u7684\u529f\u80fd\u6d4b\u8bd5\u3002 \u652f\u6301\u53c2\u6570\u5316\u3002 \u80fd\u591f\u6267\u884c\u5168\u90e8\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u6311\u9009\u90e8\u5206\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\uff0c\u5e76\u80fd\u91cd\u590d\u6267\u884c\u5931\u8d25\u7684\u7528\u4f8b\u3002 \u652f\u6301\u5e76\u53d1\u6267\u884c\uff0c\u8fd8\u80fd\u8fd0\u884c\u7531 nose, unittest \u7f16\u5199\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u65b9\u4fbf\u3001\u7b80\u5355\u7684\u65ad\u8a00\u65b9\u5f0f\u3002 \u80fd\u591f\u751f\u6210\u6807\u51c6\u7684 Junit XML \u683c\u5f0f\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002 \u5177\u6709\u5f88\u591a\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6269\u5c55\u3002 \u65b9\u4fbf\u7684\u548c\u6301\u7eed\u96c6\u6210\u5de5\u5177\u96c6\u6210\u3002 Pytest \u7684\u5b89\u88c5\u65b9\u6cd5\u4e0e\u5b89\u88c5\u5176\u4ed6\u7684 python \u8f6f\u4ef6\u65e0\u5f02\uff0c\u76f4\u63a5\u4f7f\u7528 pip \u5b89\u88c5\u5373\u53ef\u3002 pip install pytest \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u5f0f\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a pytest --help \u5982\u679c\u80fd\u591f\u8f93\u51fa\u5e2e\u52a9\u4fe1\u606f\uff0c\u5219\u8868\u793a\u5b89\u88c5\u6210\u529f\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u901a\u8fc7\u5f00\u53d1\u4e00\u4e2a API \u81ea\u52a8\u5316\u6d4b\u8bd5\u9879\u76ee\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4ee5\u4e0a\u8fd9\u4e9b\u529f\u80fd\u662f\u5982\u4f55\u4f7f\u7528\u7684\u3002 02 \u521b\u5efa\u6d4b\u8bd5\u9879\u76ee \u00b6 \u5148\u521b\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u9879\u76ee\u76ee\u5f55 api_pytest\uff0c\u4e3a\u8fd9\u4e2a\u9879\u76ee\u521b\u5efa\u865a\u62df\u73af\u5883\u3002\u5173\u4e8e\u865a\u62df\u73af\u5883\u7684\u521b\u5efa\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0 \u865a\u62df\u73af\u5883 \u3002\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\uff0c\u6267\u884c\u4e0b\u9762\u4e24\u6761\u547d\u4ee4\uff1a mkdir api_pytest cd api_pytest virtualenv --python = python3 env \u8fd9\u6837\uff0c\u9879\u76ee\u76ee\u5f55\u548c\u865a\u62df\u73af\u5883\u5c31\u521b\u5efa\u5b8c\u6210\u4e86\u3002 \u5e94\u7528\u865a\u62df\u73af\u5883 source env/bin/activate \u63a5\u7740\uff0c\u5b89\u88c5\u4f9d\u8d56\u5305\uff0c\u7b2c\u4e00\u4e2a\u662f\u8981\u5b89\u88c5 pytest\uff0c\u53e6\u5916\u672c\u6587\u662f\u4ee5 API \u81ea\u52a8\u5316\u6d4b\u8bd5\u4e3a\u4f8b\uff0c\u56e0\u6b64\u8fd8\u8981\u5b89\u88c5\u4e00\u4e0b HTTP \u7684 client \u5305 requests\u3002 pip install pytest requests \u73b0\u5728\u6211\u4eec\u521b\u5efa\u4e00\u4e2a data \u76ee\u5f55\uff0c\u7528\u6765\u5b58\u653e\u6d4b\u8bd5\u6570\u636e\uff0c\u4e00\u4e2a tests \u76ee\u5f55\uff0c\u7528\u6765\u5b58\u653e\u6d4b\u8bd5\u811a\u672c\uff0c\u4e00\u4e2a config \u76ee\u5f55\uff0c\u7528\u6765\u5b58\u653e\u914d\u7f6e\u6587\u4ef6\uff0c\u4e00\u4e2a utils \u76ee\u5f55\u4ece\u6765\u5b58\u653e\u5de5\u5177\u3002 mkdir data tests config utils \u73b0\u5728\uff0c\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u5e94\u8be5\u662f\u5982\u4e0b\u8fd9\u6837\uff1a \u251c\u2500\u2500 config \u251c\u2500\u2500 data \u251c\u2500\u2500 env \u251c\u2500\u2500 tests \u2514\u2500\u2500 utils \u81f3\u6b64\u6d4b\u8bd5\u9879\u76ee\u5c31\u521b\u5efa\u5b8c\u6210\u4e86\u3002\u63a5\u7740\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u3002 03 \u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b \u00b6 \u5728\u8fd9\u90e8\u5206\uff0c\u6211\u4eec\u4ee5\u6d4b\u8bd5\u8c46\u74e3\u7535\u5f71\u5217\u8868 API \u548c\u7535\u5f71\u8be6\u60c5 API \u4e3a\u4f8b\uff0c\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u3002 \u8fd9\u4e24\u4e2a API \u4fe1\u606f\u5982\u4e0b\uff1a \u63a5\u53e3 \u793a\u4f8b \u7535\u5f71\u5217\u8868 http://api.douban.com/v2/movie/in_theaters?apikey=0df993c66c0c636e29ecbb5344252a4a&start=0&count=10 \u7535\u5f71\u8be6\u60c5 https://api.douban.com/v2/movie/subject/30261964?apikey=0df993c66c0c636e29ecbb5344252a4a \u6211\u4eec\u5148\u5199\u7535\u5f71\u5217\u8868 API \u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8bbe\u7f6e 3 \u4e2a\u6821\u9a8c\u70b9\uff1a 1. \u9a8c\u8bc1\u8bf7\u6c42\u4e2d\u7684 start \u4e0e\u54cd\u5e94\u4e2d\u7684 start \u4e00\u81f4\u3002 - \u9a8c\u8bc1\u8bf7\u6c42\u4e2d\u7684 count \u4e0e\u54cd\u5e94\u4e2d\u7684 count \u4e00\u81f4\u3002 - \u9a8c\u8bc1\u54cd\u5e94\u4e2d\u7684 title \u662f\"\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77\"\u3002 \u5728 tests \u76ee\u5f55\u91cc\u9762\uff0c\u521b\u5efa\u4e2a testintheaters.py \u6587\u4ef6\uff0c\u91cc\u9762\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a import requests \u200b \u200b class TestInTheaters ( object ): def test_in_theaters ( self ): host = \"http://api.douban.com\" path = \"/v2/movie/in_theaters\" params = { \"apikey\" : \"0df993c66c0c636e29ecbb5344252a4a\" , \"start\" : 0 , \"count\" : 10 } headers = { \"User-Agent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\" } r = requests . request ( \"GET\" , url = host + path , headers = headers , params = params ) response = r . json () assert response [ \"count\" ] == params [ \"count\" ] assert response [ \"start\" ] == params [ \"start\" ] assert response [ \"title\" ] == \"\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77\" , \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a {} \" . format ( response [ \"title\" ]) \u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u5c31\u662f\u6d4b\u8bd5\u7528\u4f8b\u4e86\uff1f\u8fd9\u5c31\u662f\u57fa\u4e8e Pytest \u7684\u6d4b\u8bd5\u7528\u4f8b\u4e86\u5417\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u57fa\u4e8e Pytest \u7f16\u5199\u81ea\u52a8\u5316\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4e0e\u7f16\u5199\u5e73\u5e38\u7684 Python \u4ee3\u7801\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u6587\u4ef6\u540d\u3001\u51fd\u6570\u540d\u6216\u8005\u65b9\u6cd5\u540d\u8981\u4ee5 test\u5f00\u5934\u6216\u8005test \u7ed3\u5c3e\uff0c\u7c7b\u540d\u4ee5 Test \u5f00\u5934\u3002 Pytest \u4f1a\u5728 test*.py \u6216\u8005 *test.py \u6587\u4ef6\u4e2d\uff0c\u5bfb\u627e class \u5916\u8fb9\u7684 test\u5f00\u5934\u7684\u51fd\u6570\uff0c\u6216\u8005 Test \u5f00\u5934\u7684 class \u91cc\u9762\u7684 test\u5f00\u5934\u7684\u65b9\u6cd5\uff0c\u5c06\u8fd9\u4e9b\u51fd\u6570\u548c\u65b9\u6cd5\u4f5c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6765\u7ba1\u7406\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u67e5\u770b Pytest \u6536\u96c6\u5230\u54ea\u4e9b\u6d4b\u8bd5\u7528\u4f8b\uff1a $ py.test tests/testintheaters.py --collect-only ====================================================== test session starts ======================================================= platform linux -- Python 3 .5.2, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 rootdir: /root/api_pytest collected 1 item <Module tests/testintheaters.py> <Class TestInTheaters> <Function test_in_theaters> \u200b ===================================================== no tests ran in 0 .10s ====================================================== \u4ece\u7ed3\u679c\u4e2d\u770b\u5230\uff0c\u4e00\u5171\u6709\u4e00\u6761\u6d4b\u8bd5\u7528\u4f8b\uff0cTestInTheaters \u8fd9\u4e2a\u7c7b\u4e2d\u7684 testintheaters \u8fd9\u4e2a\u65b9\u6cd5\u3002 \u5728 Pytest \u4e2d\u65ad\u8a00\u4f7f\u7528\u7684\u662f Python \u81ea\u5e26\u7684 assert \u8bed\u53e5\uff0c\u975e\u5e38\u7b80\u5355\u3002 04 \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b \u00b6 \u4e0b\u9762\u6765\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff1a $ pytest tests/testintheaters.py ========================================================= test session starts ========================================================== platform linux -- Python 3 .5.2, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 rootdir: /root/api_pytest collected 1 item <Module tests/testintheaters.py> <Class TestInTheaters> <Function test_in_theaters> ======================================================== no tests ran in 0 .08s ========================================================= ( env ) root@iZ2zec08ev0qz7nmp85ewsZ:~/api_pytest# pytest tests/testintheaters.py ========================================================= test session starts ========================================================== platform linux -- Python 3 .5.2, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 rootdir: /root/api_pytest collected 1 item tests/testintheaters.py F [ 100 % ] =============================================================== FAILURES =============================================================== ___________________________________________________ TestInTheaters.test_in_theaters ____________________________________________________ self = <testintheaters.TestInTheaters object at 0x7f83d108e4e0> def test_in_theaters ( self ) : host = \"http://api.douban.com\" path = \"/v2/movie/in_theaters\" params = { \"apikey\" : \"0df993c66c0c636e29ecbb5344252a4a\" , \"start\" : 0 , \"count\" : 10 } headers = { \"User-Agent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\" } r = requests.request ( \"GET\" , url = host + path, headers = headers, params = params ) response = r.json () assert response [ \"count\" ] == params [ \"count\" ] assert response [ \"start\" ] == params [ \"start\" ] > assert response [ \"title\" ] == \"\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77\" , \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a{}\" .format ( response [ \"title\" ]) E AssertionError: \u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac E assert '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac' == '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77' E - \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77 E ? ^^ E + \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac E ? ^^ tests/testintheaters.py:19: AssertionError ======================================================= short test summary info ======================================================== FAILED tests/testintheaters.py::TestInTheaters::test_in_theaters - AssertionError: \u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac ========================================================== 1 failed in 0 .51s =========================================================== \u901a\u8fc7\u4e0a\u9762\u7684\u6d4b\u8bd5\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8be5\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5171\u6536\u96c6\u5230\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6d4b\u8bd5\u7ed3\u679c\u662f\u5931\u8d25\u7684\uff08\u6807\u8bb0\u4e3a F\uff09\uff0c\u5e76\u4e14\u5728 FAILURES \u90e8\u5206\u8f93\u51fa\u4e86\u8be6\u7ec6\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u6d4b\u8bd5\u5931\u8d25\u7684\u539f\u56e0\u3002\u4e0a\u9762\u6d4b\u8bd5\u7528\u4f8b\u7684\u5931\u8d25\u539f\u56e0\u662f\u5728\u65ad\u8a00 title \u7684\u65f6\u5019\u51fa\u9519\u4e86\uff0c\u9884\u671f\u7684 title \u662f\u201c\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77\u201d\uff0c\u4f46\u662f\u5b9e\u9645\u662f\u201c\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac\u201d\uff0c\u9884\u671f\u548c\u5b9e\u9645\u7684\u5bf9\u6bd4\u975e\u5e38\u76f4\u89c2\u3002 \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\u7684\u65b9\u6cd5\u8fd8\u6709\u5f88\u591a\u79cd\uff0c\u90fd\u662f\u5728 py.test \u540e\u9762\u6dfb\u52a0\u4e0d\u540c\u7684\u53c2\u6570\u5373\u53ef\uff0c\u6211\u5728\u4e0b\u9762\u7f57\u5217\u4e86\u4e00\u4e0b\uff1a $ py.test # run all tests below current dir $ py.test test_module.py # run tests in module $ py.test somepath # run all tests below somepath $ py.test -k stringexpr # only run tests with names that match the # the \"string expression\", e.g. \"MyClass and not method\" # will select TestMyClass.test_something # but not TestMyClass.test_method_simple $ py.test test_module.py::test_func # only run tests that match the \"node ID\", # e.g \"test_mod.py::test_func\" will select # only test_func in test_mod.py \u4e0a\u9762\u8fd9\u4e9b\u7528\u6cd5\uff0c\u901a\u8fc7\u6ce8\u91ca\u5f88\u5bb9\u6613\u7406\u89e3\u3002\u5728\u6d4b\u8bd5\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u6709\u673a\u4f1a\u88ab\u7528\u5230\uff0c\u6700\u597d\u638c\u63e1\u4e00\u4e0b\u3002 05 \u6570\u636e\u4e0e\u811a\u672c\u5206\u79bb \u00b6 \u5c0f\u8282\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5c06\u6d4b\u8bd5\u6570\u636e\u548c\u6d4b\u8bd5\u4ee3\u7801\u653e\u5230\u4e86\u540c\u4e00\u4e2a py \u6587\u4ef6\u4e2d\uff0c\u800c\u4e14\u662f\u540c\u4e00\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\u4e2d\uff0c\u4ea7\u751f\u4e86\u7d27\u8026\u5408\uff0c\u4f1a\u5bfc\u81f4\u4fee\u6539\u6d4b\u8bd5\u6570\u636e\u6216\u6d4b\u8bd5\u4ee3\u7801\u65f6\uff0c\u53ef\u80fd\u4f1a\u76f8\u4e92\u5f71\u54cd\uff0c\u4e0d\u5229\u4e8e\u6d4b\u8bd5\u6570\u636e\u548c\u6d4b\u8bd5\u811a\u672c\u7684\u7ef4\u62a4\u3002\u6bd4\u5982\uff0c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0\u51e0\u7ec4\u65b0\u7684\u6d4b\u8bd5\u6570\u636e\uff0c\u9664\u4e86\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\u5916\uff0c\u8fd8\u8981\u4fee\u6539\u6d4b\u8bd5\u4ee3\u7801\uff0c\u964d\u4f4e\u4e86\u6d4b\u8bd5\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u3002 \u53e6\u5916\u63a5\u53e3\u6d4b\u8bd5\u5f80\u5f80\u662f\u6570\u636e\u9a71\u52a8\u7684\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u6570\u636e\u548c\u6d4b\u8bd5\u4ee3\u7801\u653e\u5230\u4e00\u8d77\u4e5f\u4e0d\u65b9\u4fbf\u501f\u52a9 Pytest \u505a\u53c2\u6570\u5316\u3002 \u5c06\u6d4b\u8bd5\u4ee3\u7801\u548c\u6d4b\u8bd5\u6570\u636e\u5206\u79bb\u5df2\u7ecf\u662f\u6d4b\u8bd5\u9886\u57df\u4e2d\u7684\u5171\u8bc6\u4e86\u3002\u5728 data/\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u6d4b\u8bd5\u6570\u636e\u7684 Yaml \u6587\u4ef6 testintheaters.yaml\uff0c\u5185\u5bb9\u5982\u4e0b: \u719f\u6089 Yaml \u683c\u5f0f\u7684\u540c\u5b66\uff0c\u5e94\u8be5\u5f88\u5bb9\u6613\u770b\u61c2\u4e0a\u9762\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u4e2d\uff0c\u6709\u4e00\u4e2a\u6570\u7ec4 tests\uff0c\u91cc\u9762\u5305\u542b\u7684\u662f\u4e00\u6761\u5b8c\u6574\u7684\u6d4b\u8bd5\u6570\u636e\u3002\u4e00\u4e2a\u5b8c\u6574\u7684\u6d4b\u8bd5\u6570\u636e\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a - case\uff0c\u8868\u793a\u6d4b\u8bd5\u7528\u4f8b\u540d\u79f0\u3002 - http\uff0c\u8868\u793a\u8bf7\u6c42\u5bf9\u8c61\u3002 - expected\uff0c\u8868\u793a\u9884\u671f\u7ed3\u679c\u3002 http \u8fd9\u4e2a\u8bf7\u6c42\u5bf9\u8c61\u5305\u542b\u4e86\u88ab\u6d4b\u63a5\u53e3\u7684\u6240\u6709\u53c2\u6570\uff0c\u5305\u62ec\u8bf7\u6c42\u65b9\u6cd5\u3001\u8bf7\u6c42\u8def\u5f84\u3001\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u53c2\u6570\u3002 expected \u8868\u793a\u9884\u671f\u7ed3\u679c\uff0c\u4e0a\u9762\u7684\u6d4b\u8bd5\u6570\u636e\u4e2d\uff0c\u53ea\u5217\u51fa\u4e86\u5bf9\u8bf7\u6c42\u54cd\u5e94\u7684\u9884\u671f\u503c\uff0c\u5b9e\u9645\u6d4b\u8bd5\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u5217\u51fa\u5bf9\u6570\u636e\u5e93\u7684\u9884\u671f\u503c\u3002 \u6d4b\u8bd5\u811a\u672c\u4e5f\u8981\u505a\u76f8\u5e94\u7684\u6539\u9020\uff0c\u9700\u8981\u8bfb\u53d6 testintheaters.yaml \u6587\u4ef6\u83b7\u53d6\u8bf7\u6c42\u6570\u636e\u548c\u9884\u671f\u7ed3\u679c\uff0c\u7136\u540e\u901a\u8fc7 requests \u53d1\u51fa\u8bf7\u6c42\u3002\u4fee\u6539\u540e\u7684\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a import requests import yaml \u200b \u200b def get_test_data ( test_data_path ): case = [] # \u5b58\u50a8\u6d4b\u8bd5\u7528\u4f8b\u540d\u79f0 http = [] # \u5b58\u50a8\u8bf7\u6c42\u5bf9\u8c61 expected = [] # \u5b58\u50a8\u9884\u671f\u7ed3\u679c with open ( test_data_path ) as f : dat = yaml . load ( f . read (), Loader = yaml . SafeLoader ) test = dat [ 'tests' ] for td in test : case . append ( td . get ( 'case' , '' )) http . append ( td . get ( 'http' , {})) expected . append ( td . get ( 'expected' , {})) parameters = zip ( case , http , expected ) return case , parameters \u200b \u200b cases , parameters = get_test_data ( \"../data/testintheaters.yaml\" ) list_params = list ( parameters ) \u200b class TestInTheaters ( object ): def test_in_theaters ( self ): host = \"http://api.douban.com\" r = requests . request ( list_params [ 0 ][ 1 ][ \"method\" ], url = host + list_params [ 0 ][ 1 ][ \"path\" ], headers = list_params [ 0 ][ 1 ][ \"headers\" ], params = list_params [ 0 ][ 1 ][ \"params\" ]) response = r . json () assert response [ \"count\" ] == list_params [ 0 ][ 2 ][ 'response' ][ \"count\" ] assert response [ \"start\" ] == list_params [ 0 ][ 2 ][ 'response' ][ \"start\" ] assert response [ \"total\" ] == len ( response [ \"subjects\" ]) assert response [ \"title\" ] == list_params [ 0 ][ 2 ][ 'response' ][ \"title\" ], \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a {} \" . format ( response [ \"title\" ]) \u6ce8\u610f\uff0c\u8bfb\u53d6 Yaml \u6587\u4ef6\uff0c\u9700\u8981\u5b89\u88c5 PyYAML \u5305\u3002 \u6d4b\u8bd5\u811a\u672c\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8bfb\u53d6\u6d4b\u8bd5\u6570\u636e\u7684\u51fd\u6570 gettestdata\uff0c\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\u4ece\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6 testintheaters.yaml \u4e2d\u8bfb\u53d6\u5230\u4e86\u6d4b\u8bd5\u7528\u4f8b\u540d\u79f0 case\uff0c\u8bf7\u6c42\u5bf9\u8c61 http \u548c\u9884\u671f\u7ed3\u679c expected\u3002\u8fd9\u4e09\u90e8\u5206\u5206\u522b\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u901a\u8fc7 zip \u5c06\u4ed6\u4eec\u538b\u7f29\u5230\u4e00\u8d77\u3002 \u6d4b\u8bd5\u65b9\u6cd5 testintheaters \u5e76\u6ca1\u6709\u592a\u5927\u53d8\u5316\uff0c\u53ea\u662f\u53d1\u9001\u8bf7\u6c42\u6240\u4f7f\u7528\u7684\u6d4b\u8bd5\u6570\u636e\u4e0d\u662f\u5199\u6b7b\u7684\uff0c\u800c\u662f\u6765\u81ea\u4e8e\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u4e86\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8bfb\u53d6\u6d4b\u8bd5\u6570\u636e\u7684\u51fd\u6570\u4e0d\u4f1a\u5b9a\u4e49\u5728\u6d4b\u8bd5\u7528\u4f8b\u6587\u4ef6\u4e2d\uff0c\u800c\u662f\u4f1a\u653e\u5230 utils \u5305\u4e2d\uff0c\u6bd4\u5982\u653e\u5230 utils/commonlib.py \u4e2d\u3002\u81f3\u6b64\uff0c\u6574\u4e2a\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u5e94\u8be5\u662f\u5982\u4e0b\u6240\u793a\uff1a \u251c\u2500\u2500 config \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 testintheaters.yaml \u251c\u2500\u2500 env \u2502 \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 pyvenv.cfg \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u2502 \u2514\u2500\u2500 __init__.cpython-35.pyc \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u2514\u2500\u2500 testintheaters.py \u2514\u2500\u2500 utils \u251c\u2500\u2500 commonlib.py \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 __pycache__ \u8fd9\u6837\uff0c\u6211\u4eec\u4fee\u6539\u6d4b\u8bd5\u811a\u672c\uff0c\u5c31\u4fee\u6539 testintheaters.py\uff0c\u53d8\u66f4\u6d4b\u8bd5\u6570\u636e\uff0c\u5c31\u4fee\u6539 testintheaters.yaml\u3002\u4f46\u662f\u76ee\u524d\u770b\uff0c\u611f\u89c9\u597d\u50cf\u5e76\u6ca1\u6709\u771f\u6b63\u770b\u5230\u6d4b\u8bd5\u6570\u636e\u548c\u811a\u672c\u5206\u79bb\u7684\u5389\u5bb3\u4e4b\u5904\uff0c\u6216\u8005\u66f4\u52a0\u6709\u4ef7\u503c\u7684\u5730\u65b9\uff0c\u90a3\u4e48\u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770b\u3002 06 \u53c2\u6570\u5316 \u00b6 \u4e0a\u9762\u6211\u4eec\u5c06\u6d4b\u8bd5\u6570\u636e\u548c\u6d4b\u8bd5\u811a\u672c\u76f8\u5206\u79bb\uff0c\u5982\u679c\u8981\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0\u66f4\u591a\u7684\u6d4b\u8bd5\u6570\u636e\uff0c\u5f80 tests \u6570\u7ec4\u4e2d\u6dfb\u52a0\u66f4\u591a\u7684\u540c\u6837\u683c\u5f0f\u7684\u6d4b\u8bd5\u6570\u636e\u5373\u53ef\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u4f5c\u53c2\u6570\u5316\u3002 \u53c2\u6570\u5316\u7684\u610f\u601d\u662f\u5bf9\u540c\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u7684\u8f93\u5165\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u9a8c\u8bc1\u662f\u5426\u6bcf\u4e00\u7ec4\u8f93\u5165\u53c2\u6570\u90fd\u80fd\u5f97\u5230\u9884\u671f\u7ed3\u679c\u3002Pytest \u63d0\u4f9b\u4e86 pytest.mark.paramtrize \u8fd9\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u53c2\u6570\u5316\uff0c\u6211\u4eec\u5148\u770b\u4e0b\u5b98\u65b9\u7f51\u7ad9\u63d0\u4f9b\u7684\u4ecb\u7ecd pytest.mark.paramtrize \u7528\u6cd5\u7684\u4f8b\u5b50\uff1a # content of tests/test_time.py import pytest \u200b from datetime import datetime , timedelta \u200b testdata = [ ( datetime ( 2001 , 12 , 12 ), datetime ( 2001 , 12 , 11 ), timedelta ( 1 )), ( datetime ( 2001 , 12 , 11 ), datetime ( 2001 , 12 , 12 ), timedelta ( - 1 )), ] \u200b \u200b @pytest . mark . parametrize ( \"a,b,expected\" , testdata ) def test_timedistance_v0 ( a , b , expected ): diff = a - b assert diff == expected \u6267\u884c\u4e0a\u9762\u7684\u811a\u672c\u5c06\u4f1a\u5f97\u5230\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6d4b\u8bd5\u65b9\u6cd5 test_timedistance_v0 \u88ab\u6267\u884c\u4e86\u4e24\u904d\uff0c\u7b2c\u4e00\u904d\u6267\u884c\u7528\u7684\u6d4b\u8bd5\u6570\u636e\u662f testdata \u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7ec4\uff0c\u7b2c\u4e8c\u904d\u6267\u884c\u65f6\u7528\u7684\u6d4b\u8bd5\u6570\u636e\u662f testdata \u5217\u8868\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5143\u7ec4\u3002\u8fd9\u5c31\u662f\u53c2\u6570\u5316\u7684\u6548\u679c\uff0c\u540c\u4e00\u4e2a\u811a\u672c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u8f93\u5165\u53c2\u6570\u6267\u884c\u6d4b\u8bd5\u3002 ============================= test session starts ============================== platform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /Users/chunming.liu/.local/share/virtualenvs/api_pytest-wCozfXSU/bin/python cachedir: .pytest_cache rootdir: /Users/chunming.liu/learn/api_pytest/tests collecting ... collected 2 items \u200b test_time.py::test_timedistance_v0[a0-b0-expected0] PASSED [ 50%] test_time.py::test_timedistance_v0[a1-b1-expected1] PASSED [100%] \u200b ============================== 2 passed in 0.02s =============================== \u7167\u732b\u753b\u864e\uff0c\u5bf9\u6211\u4eec\u81ea\u5df1\u7684\u6d4b\u8bd5\u9879\u76ee\u4e2d\u7684\u6d4b\u8bd5\u811a\u672c\u8fdb\u884c\u5982\u4e0b\u4fee\u6539\u3002 import pytest import requests from api_pytest.utils.commonlib import get_test_data cases , list_params = get_test_data ( \"../data/testintheaters.yaml\" ) class TestInTheaters ( object ): @pytest . mark . parametrize ( \"case,http,expected\" , list ( list_params ), ids = cases ) def test_in_theaters ( self , case , http , expected ): host = \"http://api.douban.com\" r = requests . request ( http [ \"method\" ], url = host + http [ \"path\" ], headers = http [ \"headers\" ], params = http [ \"params\" ]) response = r . json () assert response [ \"count\" ] == expected [ 'response' ][ \"count\" ] assert response [ \"start\" ] == expected [ 'response' ][ \"start\" ] assert response [ \"title\" ] == expected [ 'response' ][ \"title\" ], \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a {} \" . format ( response [ \"title\" ]) \u5728\u6d4b\u8bd5\u65b9\u6cd5\u4e0a\u9762\u6dfb\u52a0\u4e86\u4e00\u4e2a\u88c5\u9970\u5668 @pytest.mark.parametrize\uff0c\u88c5\u9970\u5668\u4f1a\u81ea\u52a8\u5bf9 list(list_params)\u89e3\u5305\u5e76\u8d4b\u503c\u7ed9\u88c5\u9970\u5668\u7684\u7b2c\u4e00\u53c2\u6570\u3002\u88c5\u9970\u5668\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u9017\u53f7\u5206\u9694\u7684\u53d8\u91cf\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u5728\u6d4b\u8bd5\u65b9\u6cd5\u5185\u5c31\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u8fd9\u4e9b\u53d8\u91cf\u7684\u503c\uff0c\u5229\u7528\u8fd9\u4e9b\u503c\u53d1\u8d77\u8bf7\u6c42\u548c\u8fdb\u884c\u65ad\u8a00\u3002\u88c5\u9970\u5668\u8fd8\u6709\u4e00\u4e2a\u53c2\u6570\u53eb ids\uff0c\u8fd9\u4e2a\u503c\u4f5c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u7684\u540d\u79f0\u5c06\u6253\u5370\u5230\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u3002 \u5728\u6267\u884c\u4fee\u6539\u540e\u7684\u6d4b\u8bd5\u811a\u672c\u524d\uff0c\u6211\u4eec\u5728\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u518d\u589e\u52a0\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u73b0\u5728\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u4e2d\uff0c\u5305\u542b\u4e86\u4e24\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a --- tests : - case : \u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4 http : method : GET path : /v2/movie/in_theaters headers : User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 params : apikey : 0df993c66c0c636e29ecbb5344252a4a start : 0 count : 10 expected : response : title : \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77 count : 10 start : 0 - case : \u9a8c\u8bc1\u54cd\u5e94\u4e2d title \u662f\"\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac\" http : method : GET path : /v2/movie/in_theaters headers : User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 params : apikey : 0df993c66c0c636e29ecbb5344252a4a start : 1 count : 5 expected : response : title : \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac count : 5 start : 1 \u73b0\u5728\u6211\u4eec\u6267\u884c\u4e00\u4e0b\u6d4b\u8bd5\u811a\u672c\uff0c\u770b\u770b\u6548\u679c\uff1a ============================================================================================================================ test session starts ============================================================================================================================= platform linux -- Python 3 .5.2, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 rootdir: /root/api_pytest/tests collected 2 items testintheaters.py F. [ 100 % ] ================================================================================================================================== FAILURES ================================================================================================================================== _________________________________________________________________ TestInTheaters.test_in_theaters [ \\u 9a8c \\u 8bc1 \\u 54cd \\u 5e94 \\u 4e2d start \\u 548c count \\u 4e0e \\u 8bf7 \\u 6c42 \\u 4e2d \\u 7684 \\u 53c2 \\u 6570 \\u 4e00 \\u 81f4 ] __________________________________________________________________ self = <api_pytest.tests.testintheaters.TestInTheaters object at 0x7fc79177b048>, case = '\u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4' http = { 'headers' : { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chr...T' , 'params' : { 'apikey' : '0df993c66c0c636e29ecbb5344252a4a' , 'count' : 10 , 'start' : 0 } , 'path' : '/v2/movie/in_theaters' } expected = { 'response' : { 'count' : 10 , 'start' : 0 , 'title' : '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77' }} @pytest.mark.parametrize ( \"case,http,expected\" , list ( list_params ) , ids = cases ) def test_in_theaters ( self, case , http, expected ) : host = \"http://api.douban.com\" r = requests.request ( http [ \"method\" ] , url = host + http [ \"path\" ] , headers = http [ \"headers\" ] , params = http [ \"params\" ]) response = r.json () assert response [ \"count\" ] == expected [ 'response' ][ \"count\" ] assert response [ \"start\" ] == expected [ 'response' ][ \"start\" ] > assert response [ \"title\" ] == expected [ 'response' ][ \"title\" ] , \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a{}\" .format ( response [ \"title\" ]) E AssertionError: \u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac E assert '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac' == '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77' E - \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77 E ? ^^ E + \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac E ? ^^ testintheaters.py:20: AssertionError ========================================================================================================================== short test summary info =========================================================================================================================== FAILED testintheaters.py::TestInTheaters::test_in_theaters [ \\u 9a8c \\u 8bc1 \\u 54cd \\u 5e94 \\u 4e2d start \\u 548c count \\u 4e0e \\u 8bf7 \\u 6c42 \\u 4e2d \\u 7684 \\u 53c2 \\u 6570 \\u 4e00 \\u 81f4 ] - AssertionError: \u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac ======================================================================================================================== 1 failed, 1 passed in 0 .63s ========================================================================================================================= \u4ece\u7ed3\u679c\u770b\uff0cPytest \u6536\u96c6\u5230\u4e86 2 \u4e2a items\uff0c\u6d4b\u8bd5\u811a\u672c\u6267\u884c\u4e86\u4e24\u904d\uff0c\u7b2c\u4e00\u904d\u6267\u884c\u7528\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7ed3\u679c\u662f\u5931\u8d25(F)\uff0c\u7b2c\u4e8c\u904d\u6267\u884c\u7528\u7b2c\u4e8c\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7ed3\u679c\u662f\u901a\u8fc7(.)\u3002\u6267\u884c\u5b8c\u6210\u540e\u7684 summary info \u90e8\u5206\uff0c\u770b\u5230\u4e86\u4e00\u4e9b Unicode \u7f16\u7801\uff0c\u8fd9\u91cc\u5176\u5b9e\u662f ids \u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u662f\u4e2d\u6587\uff0c\u6240\u4ee5\u9ed8\u8ba4\u8fd9\u91cc\u663e\u793a Unicode \u7f16\u7801\u3002\u4e3a\u4e86\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5728\u6d4b\u8bd5\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a Pytest \u7684\u914d\u7f6e\u6587\u4ef6 pytest.ini\uff0c\u5728\u5176\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a [ pytest ] disable_test_id_escaping_and_forfeit_all_rights_to_community_support = True \u518d\u6b21\u6267\u884c\u6d4b\u8bd5\u811a\u672c\uff0c\u5728\u6d4b\u8bd5\u7ed3\u679c\u7684 summary_info \u90e8\u5206\uff0c\u5219\u4f1a\u663e\u793a\u6b63\u786e\u4e2d\u6587\u5185\u5bb9\u4e86\u3002 FAILED tests/test_in_theaters.py::TestInTheaters::test_in_theaters [ \u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4 ] - AssertionError: ... \u6309\u7167\u8fd9\u79cd\u53c2\u6570\u5316\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u60f3\u4fee\u6539\u6216\u8005\u6dfb\u52a0\u6d4b\u8bd5\u6570\u636e\uff0c\u53ea\u9700\u8981\u4fee\u6539\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u5373\u53ef\u3002 \u73b0\u5728\uff0c\u81ea\u52a8\u5316\u6d4b\u8bd5\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u5e94\u8be5\u662f\u5982\u4e0b\u8fd9\u6837\uff1a \u251c\u2500\u2500 config \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 testintheaters.yaml \u251c\u2500\u2500 env \u2502 \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 pyvenv.cfg \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u2502 \u2514\u2500\u2500 __init__.cpython-35.pyc \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u251c\u2500\u2500 pytest.ini \u2502 \u2514\u2500\u2500 testintheaters.py \u2514\u2500\u2500 utils \u251c\u2500\u2500 commonlib.py \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 __pycache__ 07 \u6d4b\u8bd5\u914d\u7f6e\u7ba1\u7406 \u00b6 \u81ea\u52a8\u5316\u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0chost \u662f\u5199\u5728\u6d4b\u8bd5\u811a\u672c\u4e2d\u7684\uff0c\u8fd9\u79cd\u786c\u7f16\u7801\u65b9\u5f0f\u663e\u7136\u662f\u4e0d\u5408\u9002\u7684\u3002\u8fd9\u4e2a host \u5728\u4e0d\u540c\u7684\u6d4b\u8bd5\u811a\u672c\u90fd\u4f1a\u7528\u5230\uff0c\u5e94\u8be5\u653e\u5230\u4e00\u4e2a\u516c\u5171\u7684\u5730\u65b9\u6765\u7ef4\u62a4\u3002\u5982\u679c\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e2a\u5730\u65b9\u5c31\u53ef\u4ee5\u4e86\u3002\u6839\u636e\u6211\u7684\u5b9e\u8df5\u7ecf\u9a8c\uff0c\u5c06\u5176\u653e\u5230 config \u6587\u4ef6\u5939\u4e2d\uff0c\u662f\u6bd4\u8f83\u597d\u7684\u3002 \u9664\u4e86 host \u5916\uff0c\u5176\u4ed6\u4e0e\u6d4b\u8bd5\u73af\u5883\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f\u4e5f\u53ef\u4ee5\u653e\u5230 config \u6587\u4ef6\u5939\u4e2d\uff0c\u6bd4\u5982\u6570\u636e\u5e93\u4fe1\u606f\u3001kafka \u8fde\u63a5\u4fe1\u606f\u7b49\uff0c\u4ee5\u53ca\u4e0e\u6d4b\u8bd5\u73af\u5883\u76f8\u5173\u7684\u57fa\u7840\u6d4b\u8bd5\u6570\u636e\uff0c\u6bd4\u5982\u6d4b\u8bd5\u8d26\u53f7\u3002\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u6709\u4e0d\u540c\u7684\u6d4b\u8bd5\u73af\u5883\uff0c\u6bd4\u5982 dev \u73af\u5883\u3001test \u73af\u5883\u3001stg \u73af\u5883\u3001prod \u73af\u5883\u7b49\u3002\u6211\u4eec\u53ef\u4ee5\u5728 config \u6587\u4ef6\u5939\u4e0b\u9762\u521b\u5efa\u5b50\u76ee\u5f55\u6765\u533a\u5206\u4e0d\u540c\u7684\u6d4b\u8bd5\u73af\u5883\u3002\u56e0\u6b64 config \u6587\u4ef6\u5939\uff0c\u5e94\u8be5\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\u7ed3\u6784\uff1a \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 prod \u2502 \u2502 \u2514\u2500\u2500 config.yaml \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 config.yaml \u5728 config.yaml \u4e2d\u5b58\u653e\u4e0d\u540c\u73af\u5883\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u4ee5\u524d\u9762\u7684\u4f8b\u5b50\u4e3a\u4f8b\uff0c\u5e94\u8be5\u662f\u8fd9\u6837\uff1a host : douban : http://api.douban.com \u5c06\u6d4b\u8bd5\u914d\u7f6e\u4fe1\u606f\u4ece\u811a\u672c\u4e2d\u62c6\u5206\u51fa\u6765\uff0c\u5c31\u9700\u8981\u6709\u4e00\u79cd\u673a\u5236\u5c06\u5176\u8bfb\u53d6\u5230\uff0c\u624d\u80fd\u5728\u6d4b\u8bd5\u811a\u672c\u4e2d\u4f7f\u7528\u3002Pytest \u63d0\u4f9b\u4e86 fixture \u673a\u5236\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5728\u6d4b\u8bd5\u6267\u884c\u524d\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5229\u7528 fixture \u63d0\u524d\u8bfb\u53d6\u5230\u914d\u7f6e\u4fe1\u606f\u3002\u6211\u4eec\u5148\u5bf9\u5b98\u65b9\u6587\u6863\u4e0a\u7684\u4f8b\u5b50\u7a0d\u52a0\u4fee\u6539\uff0c\u6765\u4ecb\u7ecd fixture \u7684\u4f7f\u7528\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a import pytest \u200b \u200b @pytest . fixture def smtp_connection (): import smtplib connection = smtplib . SMTP_SSL ( \"smtp.163.com\" , 465 , timeout = 5 ) yield connection print ( \"teardown smtp\" ) connection . close () \u200b \u200b def test_ehlo ( smtp_connection ): response , msg = smtp_connection . ehlo () assert response == 250 assert 0 \u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0csmtpconnection \u88ab\u88c5\u9970\u5668 @pytest.fixture \u88c5\u9970\uff0c\u8868\u660e\u5b83\u662f\u4e00\u4e2a fixture \u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u662f\u8fde\u63a5 163 \u90ae\u7bb1\u670d\u52a1\u5668\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u5bf9\u8c61\u3002\u5f53 test_ehlo \u7684\u6700\u540e\u4e00\u6b21\u6d4b\u8bd5\u6267\u884c\u5b8c\u6210\u540e\uff0c\u6267\u884c print(\"teardown smtp\")\u548c connection.close()\u65ad\u5f00 smtp \u8fde\u63a5\u3002 fixture \u51fd\u6570\u540d\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u65b9\u6cd5 test_ehlo \u7684\u53c2\u6570\uff0c\u5728\u6d4b\u8bd5\u65b9\u6cd5\u5185\u90e8\uff0c\u4f7f\u7528 fixture \u51fd\u6570\u540d\u8fd9\u4e2a\u53d8\u91cf\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u4f7f\u7528 fixture \u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 \u56de\u5230\u6211\u4eec\u8bfb\u53d6\u6d4b\u8bd5\u914d\u7f6e\u4fe1\u606f\u7684\u9700\u6c42\u4e0a\uff0c\u5728\u81ea\u52a8\u5316\u6d4b\u8bd5\u9879\u76ee tests/\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 conftest.py\uff0c\u5b9a\u4e49\u4e00\u4e2a fixture \u51fd\u6570 env\uff1a @pytest . fixture ( scope = \"session\" ) def env ( request ): config_path = os . path . join ( request . config . rootdir , \"config\" , \"test\" , \"config.yaml\" ) with open ( config_path ) as f : env_config = yaml . load ( f . read (), Loader = yaml . SafeLoader ) return env_config conftest.py \u6587\u4ef6\u662f\u4e00\u4e2a plugin \u6587\u4ef6\uff0c\u91cc\u9762\u53ef\u4ee5\u5b9e\u73b0 Pytest \u63d0\u4f9b\u7684 Hook \u51fd\u6570\u6216\u8005\u81ea\u5b9a\u4e49\u7684 fixture \u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u53ea\u5728 conftest.py \u6240\u5728\u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55\u4e2d\u751f\u6548\u3002scope=\"session\"\u8868\u793a\u8fd9\u4e2a fixture \u51fd\u6570\u7684\u4f5c\u7528\u57df\u662f session \u7ea7\u522b\u7684\uff0c\u5728\u6574\u4e2a\u6d4b\u8bd5\u6d3b\u52a8\u4e2d\u5f00\u59cb\u524d\u6267\u884c\uff0c\u5e76\u4e14\u53ea\u4f1a\u88ab\u6267\u884c\u4e00\u6b21\u3002\u9664\u4e86 session \u7ea7\u522b\u7684 fixture \u51fd\u6570\uff0c\u8fd8\u6709 function \u7ea7\u522b\u3001class \u7ea7\u522b\u7b49\u3002 env \u51fd\u6570\u4e2d\u6709\u4e00\u4e2a\u53c2\u6570 request\uff0c\u5176\u5b9e request \u4e5f\u662f\u4e00\u4e2a fixture \u51fd\u6570\u3002\u5728\u8fd9\u91cc\u7528\u5230\u4e86\u5b83\u7684 request.config.rootdir \u5c5e\u6027\uff0c\u8fd9\u4e2a\u5c5e\u6027\u8868\u793a\u7684\u662f pytest.ini \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u6d4b\u8bd5\u9879\u76ee\u4e2d pytest.ini \u5904\u4e8e\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u6240\u4ee5 config_path \u7684\u5b8c\u6574\u8def\u5f84\u5c31\u662f\uff1a /root/api_pytest/config/config.yaml \u5c06 env \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u6d4b\u8bd5\u65b9\u6cd5 testintheaters\uff0c\u5c06\u6d4b\u8bd5\u65b9\u6cd5\u5185\u7684 host \u6539\u4e3a env[\"host\"][\"douban\"]\uff1a import pytest import requests from api_pytest.utils.commonlib import get_test_data cases , list_params = get_test_data ( \"../data/testintheaters.yaml\" ) class TestInTheaters ( object ): @pytest . mark . parametrize ( \"case,http,expected\" , list ( list_params ), ids = cases ) def test_in_theaters ( self , case , http , expected ): host = env [ \"host\" ][ \"douban\" ] r = requests . request ( http [ \"method\" ], url = host + http [ \"path\" ], headers = http [ \"headers\" ], params = http [ \"params\" ]) response = r . json () assert response [ \"count\" ] == expected [ 'response' ][ \"count\" ] assert response [ \"start\" ] == expected [ 'response' ][ \"start\" ] assert response [ \"title\" ] == expected [ 'response' ][ \"title\" ], \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a {} \" . format ( response [ \"title\" ]) \u8fd9\u6837\u5c31\u8fbe\u5230\u4e86\u6d4b\u8bd5\u914d\u7f6e\u6587\u4ef6\u4e0e\u6d4b\u8bd5\u811a\u672c\u76f8\u4e92\u5206\u79bb\u7684\u6548\u679c\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539 host\uff0c\u53ea\u9700\u8981\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5373\u53ef\uff0c\u6d4b\u8bd5\u811a\u672c\u6587\u4ef6\u5c31\u4e0d\u7528\u4fee\u6539\u4e86\u3002\u4fee\u6539\u5b8c\u6210\u540e\u6267\u884c\u6d4b\u8bd5\u7684\u65b9\u6cd5\u4e0d\u53d8\u3002 \u4e0a\u9762\u7684 env \u51fd\u6570\u5b9e\u73b0\u4e2d\uff0c\u6709\u70b9\u70b9\u5c0f\u7f3a\u61be\uff0c\u5c31\u662f\u8bfb\u53d6\u7684\u914d\u7f6e\u6587\u4ef6\u662f\u56fa\u5b9a\u7684\uff0c\u8bfb\u53d6\u7684\u90fd\u662f test \u73af\u5883\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u6267\u884c\u6d4b\u8bd5\u65f6\uff0c\u901a\u8fc7\u547d\u4ee4\u884c\u9009\u9879\uff0c\u53ef\u6307\u5b9a\u8bfb\u53d6\u54ea\u4e2a\u73af\u5883\u7684\u914d\u7f6e\uff0c\u4ee5\u4fbf\u5728\u4e0d\u540c\u7684\u6d4b\u8bd5\u73af\u5883\u4e0b\u5f00\u5c55\u6d4b\u8bd5\u3002Pytest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb\u4f5c pytest_addoption \u7684 Hook \u51fd\u6570\uff0c\u53ef\u4ee5\u63a5\u53d7\u547d\u4ee4\u884c\u9009\u9879\u7684\u53c2\u6570\uff0c\u5199\u6cd5\u5982\u4e0b\uff1a def pytest_addoption ( parser ): parser . addoption ( \"--env\" , action = \"store\" , dest = \"environment\" , default = \"test\" , help = \"environment: test or prod\" ) pytest_addoption \u7684\u542b\u4e49\u662f\uff0c\u63a5\u6536\u547d\u4ee4\u884c\u9009\u9879--env \u9009\u9879\u7684\u503c\uff0c\u5b58\u5230 environment \u53d8\u91cf\u4e2d\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u547d\u4ee4\u884c\u9009\u9879\uff0cenvironment \u53d8\u91cf\u9ed8\u8ba4\u503c\u662f test\u3002\u5c06\u4e0a\u9762\u4ee3\u7801\u4e5f\u653e\u5165 conftest.py \u4e2d\uff0c\u5e76\u4fee\u6539 env \u51fd\u6570\uff0c\u5c06 os.path.join \u4e2d\u7684\"test\"\u66ff\u6362\u4e3a request.config.getoption(\"environment\")\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u9009\u9879\u6765\u63a7\u5236\u8bfb\u53d6\u7684\u914d\u7f6e\u6587\u4ef6\u4e86\u3002\u6bd4\u5982\u6267\u884c test \u73af\u5883\u7684\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u6307\u5b9a--env test\uff1a py.test --env test tests/test_in_theaters.py \u5982\u679c\u4e0d\u60f3\u6bcf\u6b21\u90fd\u5728\u547d\u4ee4\u884c\u4e0a\u6307\u5b9a--env\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5176\u653e\u5165 pytest.ini \u4e2d\uff1a [ pytest ] addopts = --env prod \u547d\u4ee4\u884c\u4e0a\u7684\u53c2\u6570\u4f1a\u8986\u76d6 pyest.ini \u91cc\u9762\u7684\u53c2\u6570\u3002 08 \u6d4b\u8bd5\u7684\u51c6\u5907\u4e0e\u6536\u5c3e \u00b6 \u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5728\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u524d\u505a\u6570\u636e\u5e93\u8fde\u63a5\u7684\u51c6\u5907\uff0c\u505a\u6d4b\u8bd5\u6570\u636e\u7684\u51c6\u5907\uff0c\u6d4b\u8bd5\u6267\u884c\u540e\u65ad\u5f00\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u6e05\u7406\u6d4b\u8bd5\u810f\u6570\u636e\u8fd9\u4e9b\u5de5\u4f5c\u3002\u901a\u8fc7 07 \u5c0f\u8282\u5927\u5bb6\u5bf9\u4e8e\u901a\u8fc7 env \u8fd9\u4e2a fixture \u51fd\u6570\uff0c\u5982\u4f55\u5728\u6d4b\u8bd5\u5f00\u59cb\u524d\u7684\u5f00\u5c55\u51c6\u5907\u5de5\u4f5c\u6709\u6240\u4e86\u89e3\uff0c\u672c\u5c0f\u8282\u5c06\u4ecb\u7ecd\u66f4\u591a\u5185\u5bb9\u3002 @pytest.fixture \u51fd\u6570\u7684 scope \u53ef\u80fd\u7684\u53d6\u503c\u6709 function\uff0cclass\uff0cmodule\uff0cpackage \u6216 session\u3002\u4ed6\u4eec\u7684\u5177\u4f53\u542b\u4e49\u5982\u4e0b\uff1a function\uff0c\u8868\u793a fixture \u51fd\u6570\u5728\u6d4b\u8bd5\u65b9\u6cd5\u6267\u884c\u524d\u548c\u6267\u884c\u540e\u6267\u884c\u4e00\u6b21\u3002 class\uff0c\u8868\u793a fixture \u51fd\u6570\u5728\u6d4b\u8bd5\u7c7b\u6267\u884c\u524d\u548c\u6267\u884c\u540e\u6267\u884c\u4e00\u6b21\u3002 module\uff0c\u8868\u793a fixture \u51fd\u6570\u5728\u6d4b\u8bd5\u811a\u672c\u6267\u884c\u524d\u548c\u6267\u884c\u540e\u6267\u884c\u4e00\u6b21\u3002 package\uff0c\u8868\u793a fixture \u51fd\u6570\u5728\u6d4b\u8bd5\u5305\uff08\u6587\u4ef6\u5939\uff09\u4e2d\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u524d\u548c\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u540e\u6267\u884c\u4e00\u6b21\u3002 session\uff0c\u8868\u793a\u6240\u6709\u6d4b\u8bd5\u7684\u6700\u5f00\u59cb\u548c\u6d4b\u8bd5\u7ed3\u675f\u540e\u6267\u884c\u4e00\u6b21\u3002 \u901a\u5e38\uff0c\u6570\u636e\u5e93\u8fde\u63a5\u548c\u65ad\u5f00\u3001\u6d4b\u8bd5\u914d\u7f6e\u6587\u4ef6\u7684\u8bfb\u53d6\u7b49\u5de5\u4f5c\uff0c\u662f\u9700\u8981\u653e\u5230 session \u7ea7\u522b\u7684 fixture \u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u9488\u5bf9\u6574\u4e2a\u6d4b\u8bd5\u6d3b\u52a8\u53ea\u9700\u8981\u505a\u4e00\u6b21\u3002\u800c\u9488\u5bf9\u6d4b\u8bd5\u6570\u636e\u7684\u51c6\u5907\uff0c\u901a\u5e38\u662f function \u7ea7\u522b\u6216\u8005 class \u7ea7\u522b\u7684\uff0c\u56e0\u4e3a\u6d4b\u8bd5\u6570\u636e\u9488\u5bf9\u4e0d\u540c\u7684\u6d4b\u8bd5\u65b9\u6cd5\u6216\u8005\u6d4b\u8bd5\u7c7b\u5f80\u5f80\u90fd\u4e0d\u76f8\u540c\u3002 \u5728 TestInTheaters \u6d4b\u8bd5\u7c7b\u4e2d\uff0c\u6a21\u62df\u4e00\u4e2a\u51c6\u5907\u548c\u6e05\u7406\u6d4b\u8bd5\u6570\u636e\u7684 fixture \u51fd\u6570 preparation\uff0cscope \u8bbe\u7f6e\u4e3a function\uff1a @pytest . fixture ( scope = \"function\" ) def preparation ( self ): print ( \"\u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\" ) test_data = \"\u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\" yield test_data print ( \"\u6e05\u7406\u6d4b\u8bd5\u6570\u636e\" ) \u5728\u6d4b\u8bd5\u65b9\u6cd5\u4e2d\uff0c\u5c06 preparation \u4f5c\u4e3a\u53c2\u6570\uff0c\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\u6267\u884c\u6d4b\u8bd5\uff1a $ py.test -s -q --tb=no tests/test_in_theaters.py ====================================================== test session starts ======================================================= platform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 rootdir: /Users/chunming.liu/learn/api_pytest, inifile: pytest.ini collected 2 items tests/test_in_theaters.py \u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e F \u6e05\u7406\u6d4b\u8bd5\u6570\u636e \u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e .\u6e05\u7406\u6d4b\u8bd5\u6570\u636e \u200b \u200b ==================================================== short test summary info ===================================================== FAILED tests/test_in_theaters.py::TestInTheaters::test_in_theaters[\u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4] - AssertionError: ... ================================================== 1 failed, 1 passed in 0.81s =================================================== \u901a\u8fc7\u8f93\u51fa\u53ef\u4ee5\u770b\u5230\u5728\u6bcf\u4e00\u6761\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u524d\u540e\uff0c\u5404\u6267\u884c\u4e86\u4e00\u6b21\u201c\u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\u201d\u548c\u201c\u6e05\u7406\u6d4b\u8bd5\u6570\u636e\u201d\u3002\u5982\u679c scope \u7684\u503c\u6539\u4e3a class\uff0c\u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\u7684\u8f93\u51fa\u4fe1\u606f\u5c06\u662f\u4e0b\u9762\u8fd9\u6837\uff1a tests/testintheaters.py \u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e F.\u6e05\u7406\u6d4b\u8bd5\u6570\u636e \u5728\u6d4b\u8bd5\u7c7b\u6267\u884c\u524d\u540e\u5404\u6267\u884c\u4e00\u6b21\u201c\u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\u201d\u548c\u201c\u6e05\u7406\u6d4b\u8bd5\u6570\u636e\u201d\u3002 09 \u6807\u8bb0\u4e0e\u5206\u7ec4 \u00b6 \u901a\u8fc7 pytest.mark \u53ef\u4ee5\u7ed9\u6d4b\u8bd5\u7528\u4f8b\u6253\u4e0a\u6807\u8bb0\uff0c\u5e38\u89c1\u7684\u5e94\u7528\u573a\u666f\u662f\uff1a\u9488\u5bf9\u67d0\u4e9b\u8fd8\u672a\u5b9e\u73b0\u7684\u529f\u80fd\uff0c\u5c06\u6d4b\u8bd5\u7528\u4f8b\u4e3b\u52a8\u8df3\u8fc7\u4e0d\u6267\u884c\u3002\u6216\u8005\u5728\u67d0\u4e9b\u6761\u4ef6\u4e0b\uff0c\u6d4b\u8bd5\u7528\u4f8b\u8df3\u8fc7\u4e0d\u6267\u884c\u3002\u8fd8\u6709\u53ef\u4ee5\u4e3b\u52a8\u5c06\u6d4b\u8bd5\u7528\u4f8b\u6807\u8bb0\u4e3a\u5931\u8d25\u7b49\u7b49\u3002\u9488\u5bf9\u4e09\u4e2a\u573a\u666f\uff0cpytest \u63d0\u4f9b\u4e86\u5185\u7f6e\u7684\u6807\u7b7e\uff0c\u6211\u4eec\u901a\u8fc7\u5177\u4f53\u4ee3\u7801\u6765\u770b\u4e00\u4e0b\uff1a import sys import pytest \u200b \u200b class TestMarks ( object ): @pytest . mark . skip ( reason = \"not implementation\" ) def test_the_unknown ( self ): \"\"\" \u8df3\u8fc7\u4e0d\u6267\u884c\uff0c\u56e0\u4e3a\u88ab\u6d4b\u903b\u8f91\u8fd8\u6ca1\u6709\u88ab\u5b9e\u73b0 \"\"\" assert 0 \u200b @pytest . mark . skipif ( sys . version_info < ( 3 , 7 ), reason = \"requires python3.7 or higher\" ) def test_skipif ( self ): \"\"\" \u4f4e\u4e8e python3.7 \u7248\u672c\u4e0d\u6267\u884c\u8fd9\u6761\u6d4b\u8bd5\u7528\u4f8b :return: \"\"\" assert 1 \u200b @pytest . mark . xfail def test_xfail ( self ): \"\"\" Indicate that you expect it to fail \u8fd9\u6761\u7528\u4f8b\u5931\u8d25\u65f6\uff0c\u6d4b\u8bd5\u7ed3\u679c\u88ab\u6807\u8bb0\u4e3a xfail\uff08expected to fail\uff09\uff0c\u5e76\u4e14\u4e0d\u6253\u5370\u9519\u8bef\u4fe1\u606f\u3002 \u8fd9\u6761\u7528\u4f8b\u6267\u884c\u6210\u529f\u65f6\uff0c\u6d4b\u8bd5\u7ed3\u679c\u88ab\u6807\u8bb0\u4e3a xpassed\uff08unexpectedly passing\uff09 \"\"\" assert 0 \u200b @pytest . mark . xfail ( run = False ) def test_xfail_not_run ( self ): \"\"\" run=False \u8868\u793a\u8fd9\u6761\u7528\u4f8b\u4e0d\u7528\u6267\u884c \"\"\" assert 0 \u4e0b\u9762\u6765\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff1a $ py.test -s -q --tb=no tests/test_marks.py ====================================================== test session starts ======================================================= platform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 rootdir: /Users/chunming.liu/learn/api_pytest, inifile: pytest.ini collected 4 items \u200b tests/test_marks.py s.xx ============================================ 1 passed, 1 skipped, 2 xfailed in 0.06s ============================================= \u4ece\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e00\u6761\u6d4b\u8bd5\u7528\u4f8b skipped \u4e86\uff0c\u7b2c\u4e8c\u6761\u6d4b\u8bd5\u7528\u4f8b passed \u4e86\uff0c\u7b2c\u4e09\u6761\u548c\u7b2c\u56db\u6761\u6d4b\u8bd5\u7528\u4f8b xfailed \u4e86\u3002 \u9664\u4e86\u5185\u7f6e\u7684\u6807\u7b7e\uff0c\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6807\u7b7e\u5e76\u52a0\u5230\u6d4b\u8bd5\u65b9\u6cd5\u4e0a\uff1a @pytest . mark . slow def test_slow ( self ): \"\"\" \u81ea\u5b9a\u4e49\u6807\u7b7e \"\"\" assert 0 \u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7-m \u8fc7\u6ee4\u6216\u8005\u53cd\u8fc7\u6ee4\uff0c\u6bd4\u5982\u53ea\u6267\u884c\u88ab\u6807\u8bb0\u4e3a slow \u7684\u6d4b\u8bd5\u7528\u4f8b\uff1a $ py.test -s -q --tb=no -m \"slow\" tests/test_marks.py $ py.test -s -q --tb=no -m \"not slow\" tests/test_marks.py \u5bf9\u4e8e\u81ea\u5b9a\u4e49\u6807\u7b7e\uff0c\u4e3a\u4e86\u907f\u514d\u51fa\u73b0 PytestUnknownMarkWarning\uff0c\u6700\u597d\u5728 pytest.ini \u4e2d\u6ce8\u518c\u4e00\u4e0b\uff1a [pytest] markers = slow: marks tests as slow (deselect with '-m \"not slow\"') 10 \u5e76\u53d1\u6267\u884c \u00b6 \u5982\u679c\u81ea\u52a8\u5316\u6d4b\u8bd5\u7528\u4f8b\u6570\u91cf\u6210\u5343\u4e0a\u4e07\uff0c\u90a3\u4e48\u5e76\u53d1\u6267\u884c\u5b83\u4eec\u662f\u4e2a\u5f88\u597d\u7684\u4e3b\u610f\uff0c\u53ef\u4ee5\u52a0\u5feb\u6574\u4f53\u6d4b\u8bd5\u7528\u4f8b\u7684\u6267\u884c\u65f6\u95f4\u3002 pyest \u6709\u4e00\u4e2a\u63d2\u4ef6 pytest-xdist \u53ef\u4ee5\u505a\u5230\u5e76\u53d1\u6267\u884c\uff0c\u5b89\u88c5\u4e4b\u540e\uff0c\u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\u901a\u8fc7\u6267\u884c-n \u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u5e76\u53d1\u5ea6\uff0c\u901a\u8fc7 auto \u53c2\u6570\u81ea\u52a8\u5339\u914d CPU \u6570\u91cf\u4f5c\u4e3a\u5e76\u53d1\u5ea6\u3002\u5e76\u53d1\u6267\u884c\u672c\u6587\u7684\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\uff1a $ py . test - s - q -- tb = no - n auto tests / ====================================================== test session starts ======================================================= platform darwin -- Python 3.7 . 7 , pytest - 5.4 . 1 , py - 1.8 . 1 , pluggy - 0.13 . 1 rootdir : / Users / chunming . liu / learn / api_pytest , inifile : pytest . ini plugins : xdist - 1.31 . 0 , forked - 1.1 . 3 gw0 [ 10 ] / gw1 [ 10 ] / gw2 [ 10 ] / gw3 [ 10 ] / gw4 [ 10 ] / gw5 [ 10 ] / gw6 [ 10 ] / gw7 [ 10 ] s . FxxF .. F . ==================================================== short test summary info ===================================================== FAILED tests / test_marks . py :: TestMarks :: test_slow - assert 0 FAILED tests / test_smtpsimple . py :: test_ehlo - assert 0 FAILED tests / test_in_theaters . py :: TestInTheaters :: test_in_theaters [ \u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4 ] - AssertionError : ... ======================================= 3 failed , 4 passed , 1 skipped , 2 xfailed in 1.91 s ======================================== \u53ef\u4ee5\u975e\u5e38\u76f4\u89c2\u7684\u611f\u53d7\u5230\uff0c\u5e76\u53d1\u6267\u884c\u6bd4\u987a\u5e8f\u6267\u884c\u5feb\u5f97\u591a\u3002\u4f46\u662f\u5e76\u53d1\u6267\u884c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u540c\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\u4e0d\u8981\u6709\u6d4b\u8bd5\u6570\u636e\u7684\u76f8\u4e92\u5e72\u6270\uff0c\u6700\u597d\u4e0d\u540c\u7684\u6d4b\u8bd5\u7528\u4f8b\u4f7f\u7528\u4e0d\u540c\u7684\u6d4b\u8bd5\u6570\u636e\u3002 \u8fd9\u91cc\u63d0\u4e00\u4e0b\uff0cpytest \u751f\u6001\u4e2d\uff0c\u6709\u5f88\u591a\u7b2c\u4e09\u65b9\u63d2\u4ef6\u5f88\u597d\u7528\uff0c\u66f4\u591a\u7684\u63d2\u4ef6\u53ef\u4ee5\u5728\u8fd9\u91cc https://pypi.org/search/?q=pytest \u67e5\u770b\u548c\u641c\u7d22\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f00\u53d1\u81ea\u5df1\u7684\u63d2\u4ef6\u3002 11 \u6d4b\u8bd5\u62a5\u544a \u00b6 Pytest \u53ef\u4ee5\u65b9\u4fbf\u7684\u751f\u6210\u6d4b\u8bd5\u62a5\u544a\uff0c\u901a\u8fc7\u6307\u5b9a--junitxml \u53c2\u6570\u53ef\u4ee5\u751f\u6210 XML \u683c\u5f0f\u7684\u6d4b\u8bd5\u62a5\u544a\uff0cjunitxml \u662f\u4e00\u79cd\u975e\u5e38\u901a\u7528\u7684\u6807\u51c6\u7684\u6d4b\u8bd5\u62a5\u544a\u683c\u5f0f\uff0c\u53ef\u4ee5\u7528\u6765\u4e0e\u6301\u7eed\u96c6\u6210\u5de5\u5177\u7b49\u5f88\u591a\u5de5\u5177\u96c6\u6210\uff1a $ py.test -s -q --junitxml=./report.xml tests/ 12 \u603b\u7ed3 \u00b6 \u672c\u6587\u7ae0\u4ee5\u5b9e\u9645\u9879\u76ee\u51fa\u53d1\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u3001\u5982\u4f55\u53c2\u6570\u5316\u3001\u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\u914d\u7f6e\u7ba1\u7406\u3001\u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\u7684\u51c6\u5907\u548c\u6e05\u7406\uff0c\u5982\u4f55\u8fdb\u884c\u5e76\u53d1\u6d4b\u8bd5\u5e76\u751f\u6210\u62a5\u544a\u3002\u6839\u636e\u672c\u6587\u7684\u4ecb\u7ecd\uff0c\u4f60\u80fd\u591f\u9010\u6b65\u642d\u5efa\u8d77\u4e00\u5957\u5b8c\u6574\u7684\u6d4b\u8bd5\u9879\u76ee\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u9879\u76ee\u5b8c\u6574\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 config.yaml \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 testintheaters.yaml \u251c\u2500\u2500 env \u2502 \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 pyvenv.cfg \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 pytest.ini \u2502 \u251c\u2500\u2500 testintheaters.py \u2502 \u2514\u2500\u2500 test_marks.py \u2514\u2500\u2500 utils \u251c\u2500\u2500 commonlib.py \u251c\u2500\u2500 __init__.py","title":"\u57fa\u4e8ePytest\u6846\u67b6\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u5f00\u53d1\u5b9e\u8df5"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#01-pytest","text":"\u5728\u5f00\u59cb\u4f7f\u7528 Pytest \u4e4b\u524d\uff0c\u5148\u6765\u4e86\u89e3\u4e00\u4e0b Pytest \u7684\u6838\u5fc3\u529f\u80fd\uff0c\u6839\u636e\u5b98\u65b9\u7f51\u7ad9\u4ecb\u7ecd\uff0c\u5b83\u5177\u6709\u5982\u4e0b\u529f\u80fd\u548c\u7279\u70b9\uff1a \u975e\u5e38\u5bb9\u6613\u4e0a\u624b\uff0c\u5165\u95e8\u7b80\u5355\uff0c\u6587\u6863\u4e30\u5bcc\uff0c\u6587\u6863\u4e2d\u6709\u5f88\u591a\u5b9e\u4f8b\u53ef\u4ee5\u53c2\u8003\u3002 \u80fd\u591f\u652f\u6301\u7b80\u5355\u7684\u5355\u5143\u6d4b\u8bd5\u548c\u590d\u6742\u7684\u529f\u80fd\u6d4b\u8bd5\u3002 \u652f\u6301\u53c2\u6570\u5316\u3002 \u80fd\u591f\u6267\u884c\u5168\u90e8\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u6311\u9009\u90e8\u5206\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\uff0c\u5e76\u80fd\u91cd\u590d\u6267\u884c\u5931\u8d25\u7684\u7528\u4f8b\u3002 \u652f\u6301\u5e76\u53d1\u6267\u884c\uff0c\u8fd8\u80fd\u8fd0\u884c\u7531 nose, unittest \u7f16\u5199\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002 \u65b9\u4fbf\u3001\u7b80\u5355\u7684\u65ad\u8a00\u65b9\u5f0f\u3002 \u80fd\u591f\u751f\u6210\u6807\u51c6\u7684 Junit XML \u683c\u5f0f\u7684\u6d4b\u8bd5\u7ed3\u679c\u3002 \u5177\u6709\u5f88\u591a\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6269\u5c55\u3002 \u65b9\u4fbf\u7684\u548c\u6301\u7eed\u96c6\u6210\u5de5\u5177\u96c6\u6210\u3002 Pytest \u7684\u5b89\u88c5\u65b9\u6cd5\u4e0e\u5b89\u88c5\u5176\u4ed6\u7684 python \u8f6f\u4ef6\u65e0\u5f02\uff0c\u76f4\u63a5\u4f7f\u7528 pip \u5b89\u88c5\u5373\u53ef\u3002 pip install pytest \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u5f0f\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a pytest --help \u5982\u679c\u80fd\u591f\u8f93\u51fa\u5e2e\u52a9\u4fe1\u606f\uff0c\u5219\u8868\u793a\u5b89\u88c5\u6210\u529f\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u901a\u8fc7\u5f00\u53d1\u4e00\u4e2a API \u81ea\u52a8\u5316\u6d4b\u8bd5\u9879\u76ee\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4ee5\u4e0a\u8fd9\u4e9b\u529f\u80fd\u662f\u5982\u4f55\u4f7f\u7528\u7684\u3002","title":"01 Pytest \u6838\u5fc3\u529f\u80fd"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#02","text":"\u5148\u521b\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u9879\u76ee\u76ee\u5f55 api_pytest\uff0c\u4e3a\u8fd9\u4e2a\u9879\u76ee\u521b\u5efa\u865a\u62df\u73af\u5883\u3002\u5173\u4e8e\u865a\u62df\u73af\u5883\u7684\u521b\u5efa\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0 \u865a\u62df\u73af\u5883 \u3002\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\uff0c\u6267\u884c\u4e0b\u9762\u4e24\u6761\u547d\u4ee4\uff1a mkdir api_pytest cd api_pytest virtualenv --python = python3 env \u8fd9\u6837\uff0c\u9879\u76ee\u76ee\u5f55\u548c\u865a\u62df\u73af\u5883\u5c31\u521b\u5efa\u5b8c\u6210\u4e86\u3002 \u5e94\u7528\u865a\u62df\u73af\u5883 source env/bin/activate \u63a5\u7740\uff0c\u5b89\u88c5\u4f9d\u8d56\u5305\uff0c\u7b2c\u4e00\u4e2a\u662f\u8981\u5b89\u88c5 pytest\uff0c\u53e6\u5916\u672c\u6587\u662f\u4ee5 API \u81ea\u52a8\u5316\u6d4b\u8bd5\u4e3a\u4f8b\uff0c\u56e0\u6b64\u8fd8\u8981\u5b89\u88c5\u4e00\u4e0b HTTP \u7684 client \u5305 requests\u3002 pip install pytest requests \u73b0\u5728\u6211\u4eec\u521b\u5efa\u4e00\u4e2a data \u76ee\u5f55\uff0c\u7528\u6765\u5b58\u653e\u6d4b\u8bd5\u6570\u636e\uff0c\u4e00\u4e2a tests \u76ee\u5f55\uff0c\u7528\u6765\u5b58\u653e\u6d4b\u8bd5\u811a\u672c\uff0c\u4e00\u4e2a config \u76ee\u5f55\uff0c\u7528\u6765\u5b58\u653e\u914d\u7f6e\u6587\u4ef6\uff0c\u4e00\u4e2a utils \u76ee\u5f55\u4ece\u6765\u5b58\u653e\u5de5\u5177\u3002 mkdir data tests config utils \u73b0\u5728\uff0c\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u5e94\u8be5\u662f\u5982\u4e0b\u8fd9\u6837\uff1a \u251c\u2500\u2500 config \u251c\u2500\u2500 data \u251c\u2500\u2500 env \u251c\u2500\u2500 tests \u2514\u2500\u2500 utils \u81f3\u6b64\u6d4b\u8bd5\u9879\u76ee\u5c31\u521b\u5efa\u5b8c\u6210\u4e86\u3002\u63a5\u7740\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u3002","title":"02 \u521b\u5efa\u6d4b\u8bd5\u9879\u76ee"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#03","text":"\u5728\u8fd9\u90e8\u5206\uff0c\u6211\u4eec\u4ee5\u6d4b\u8bd5\u8c46\u74e3\u7535\u5f71\u5217\u8868 API \u548c\u7535\u5f71\u8be6\u60c5 API \u4e3a\u4f8b\uff0c\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u3002 \u8fd9\u4e24\u4e2a API \u4fe1\u606f\u5982\u4e0b\uff1a \u63a5\u53e3 \u793a\u4f8b \u7535\u5f71\u5217\u8868 http://api.douban.com/v2/movie/in_theaters?apikey=0df993c66c0c636e29ecbb5344252a4a&start=0&count=10 \u7535\u5f71\u8be6\u60c5 https://api.douban.com/v2/movie/subject/30261964?apikey=0df993c66c0c636e29ecbb5344252a4a \u6211\u4eec\u5148\u5199\u7535\u5f71\u5217\u8868 API \u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8bbe\u7f6e 3 \u4e2a\u6821\u9a8c\u70b9\uff1a 1. \u9a8c\u8bc1\u8bf7\u6c42\u4e2d\u7684 start \u4e0e\u54cd\u5e94\u4e2d\u7684 start \u4e00\u81f4\u3002 - \u9a8c\u8bc1\u8bf7\u6c42\u4e2d\u7684 count \u4e0e\u54cd\u5e94\u4e2d\u7684 count \u4e00\u81f4\u3002 - \u9a8c\u8bc1\u54cd\u5e94\u4e2d\u7684 title \u662f\"\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77\"\u3002 \u5728 tests \u76ee\u5f55\u91cc\u9762\uff0c\u521b\u5efa\u4e2a testintheaters.py \u6587\u4ef6\uff0c\u91cc\u9762\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a import requests \u200b \u200b class TestInTheaters ( object ): def test_in_theaters ( self ): host = \"http://api.douban.com\" path = \"/v2/movie/in_theaters\" params = { \"apikey\" : \"0df993c66c0c636e29ecbb5344252a4a\" , \"start\" : 0 , \"count\" : 10 } headers = { \"User-Agent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\" } r = requests . request ( \"GET\" , url = host + path , headers = headers , params = params ) response = r . json () assert response [ \"count\" ] == params [ \"count\" ] assert response [ \"start\" ] == params [ \"start\" ] assert response [ \"title\" ] == \"\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77\" , \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a {} \" . format ( response [ \"title\" ]) \u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u5c31\u662f\u6d4b\u8bd5\u7528\u4f8b\u4e86\uff1f\u8fd9\u5c31\u662f\u57fa\u4e8e Pytest \u7684\u6d4b\u8bd5\u7528\u4f8b\u4e86\u5417\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u57fa\u4e8e Pytest \u7f16\u5199\u81ea\u52a8\u5316\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4e0e\u7f16\u5199\u5e73\u5e38\u7684 Python \u4ee3\u7801\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u6587\u4ef6\u540d\u3001\u51fd\u6570\u540d\u6216\u8005\u65b9\u6cd5\u540d\u8981\u4ee5 test\u5f00\u5934\u6216\u8005test \u7ed3\u5c3e\uff0c\u7c7b\u540d\u4ee5 Test \u5f00\u5934\u3002 Pytest \u4f1a\u5728 test*.py \u6216\u8005 *test.py \u6587\u4ef6\u4e2d\uff0c\u5bfb\u627e class \u5916\u8fb9\u7684 test\u5f00\u5934\u7684\u51fd\u6570\uff0c\u6216\u8005 Test \u5f00\u5934\u7684 class \u91cc\u9762\u7684 test\u5f00\u5934\u7684\u65b9\u6cd5\uff0c\u5c06\u8fd9\u4e9b\u51fd\u6570\u548c\u65b9\u6cd5\u4f5c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6765\u7ba1\u7406\u3002\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u67e5\u770b Pytest \u6536\u96c6\u5230\u54ea\u4e9b\u6d4b\u8bd5\u7528\u4f8b\uff1a $ py.test tests/testintheaters.py --collect-only ====================================================== test session starts ======================================================= platform linux -- Python 3 .5.2, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 rootdir: /root/api_pytest collected 1 item <Module tests/testintheaters.py> <Class TestInTheaters> <Function test_in_theaters> \u200b ===================================================== no tests ran in 0 .10s ====================================================== \u4ece\u7ed3\u679c\u4e2d\u770b\u5230\uff0c\u4e00\u5171\u6709\u4e00\u6761\u6d4b\u8bd5\u7528\u4f8b\uff0cTestInTheaters \u8fd9\u4e2a\u7c7b\u4e2d\u7684 testintheaters \u8fd9\u4e2a\u65b9\u6cd5\u3002 \u5728 Pytest \u4e2d\u65ad\u8a00\u4f7f\u7528\u7684\u662f Python \u81ea\u5e26\u7684 assert \u8bed\u53e5\uff0c\u975e\u5e38\u7b80\u5355\u3002","title":"03 \u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#04","text":"\u4e0b\u9762\u6765\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff1a $ pytest tests/testintheaters.py ========================================================= test session starts ========================================================== platform linux -- Python 3 .5.2, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 rootdir: /root/api_pytest collected 1 item <Module tests/testintheaters.py> <Class TestInTheaters> <Function test_in_theaters> ======================================================== no tests ran in 0 .08s ========================================================= ( env ) root@iZ2zec08ev0qz7nmp85ewsZ:~/api_pytest# pytest tests/testintheaters.py ========================================================= test session starts ========================================================== platform linux -- Python 3 .5.2, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 rootdir: /root/api_pytest collected 1 item tests/testintheaters.py F [ 100 % ] =============================================================== FAILURES =============================================================== ___________________________________________________ TestInTheaters.test_in_theaters ____________________________________________________ self = <testintheaters.TestInTheaters object at 0x7f83d108e4e0> def test_in_theaters ( self ) : host = \"http://api.douban.com\" path = \"/v2/movie/in_theaters\" params = { \"apikey\" : \"0df993c66c0c636e29ecbb5344252a4a\" , \"start\" : 0 , \"count\" : 10 } headers = { \"User-Agent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\" } r = requests.request ( \"GET\" , url = host + path, headers = headers, params = params ) response = r.json () assert response [ \"count\" ] == params [ \"count\" ] assert response [ \"start\" ] == params [ \"start\" ] > assert response [ \"title\" ] == \"\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77\" , \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a{}\" .format ( response [ \"title\" ]) E AssertionError: \u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac E assert '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac' == '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77' E - \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77 E ? ^^ E + \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac E ? ^^ tests/testintheaters.py:19: AssertionError ======================================================= short test summary info ======================================================== FAILED tests/testintheaters.py::TestInTheaters::test_in_theaters - AssertionError: \u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac ========================================================== 1 failed in 0 .51s =========================================================== \u901a\u8fc7\u4e0a\u9762\u7684\u6d4b\u8bd5\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8be5\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u5171\u6536\u96c6\u5230\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6d4b\u8bd5\u7ed3\u679c\u662f\u5931\u8d25\u7684\uff08\u6807\u8bb0\u4e3a F\uff09\uff0c\u5e76\u4e14\u5728 FAILURES \u90e8\u5206\u8f93\u51fa\u4e86\u8be6\u7ec6\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u901a\u8fc7\u8fd9\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u6d4b\u8bd5\u5931\u8d25\u7684\u539f\u56e0\u3002\u4e0a\u9762\u6d4b\u8bd5\u7528\u4f8b\u7684\u5931\u8d25\u539f\u56e0\u662f\u5728\u65ad\u8a00 title \u7684\u65f6\u5019\u51fa\u9519\u4e86\uff0c\u9884\u671f\u7684 title \u662f\u201c\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77\u201d\uff0c\u4f46\u662f\u5b9e\u9645\u662f\u201c\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac\u201d\uff0c\u9884\u671f\u548c\u5b9e\u9645\u7684\u5bf9\u6bd4\u975e\u5e38\u76f4\u89c2\u3002 \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\u7684\u65b9\u6cd5\u8fd8\u6709\u5f88\u591a\u79cd\uff0c\u90fd\u662f\u5728 py.test \u540e\u9762\u6dfb\u52a0\u4e0d\u540c\u7684\u53c2\u6570\u5373\u53ef\uff0c\u6211\u5728\u4e0b\u9762\u7f57\u5217\u4e86\u4e00\u4e0b\uff1a $ py.test # run all tests below current dir $ py.test test_module.py # run tests in module $ py.test somepath # run all tests below somepath $ py.test -k stringexpr # only run tests with names that match the # the \"string expression\", e.g. \"MyClass and not method\" # will select TestMyClass.test_something # but not TestMyClass.test_method_simple $ py.test test_module.py::test_func # only run tests that match the \"node ID\", # e.g \"test_mod.py::test_func\" will select # only test_func in test_mod.py \u4e0a\u9762\u8fd9\u4e9b\u7528\u6cd5\uff0c\u901a\u8fc7\u6ce8\u91ca\u5f88\u5bb9\u6613\u7406\u89e3\u3002\u5728\u6d4b\u8bd5\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u6709\u673a\u4f1a\u88ab\u7528\u5230\uff0c\u6700\u597d\u638c\u63e1\u4e00\u4e0b\u3002","title":"04 \u6267\u884c\u6d4b\u8bd5\u7528\u4f8b"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#05","text":"\u5c0f\u8282\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5c06\u6d4b\u8bd5\u6570\u636e\u548c\u6d4b\u8bd5\u4ee3\u7801\u653e\u5230\u4e86\u540c\u4e00\u4e2a py \u6587\u4ef6\u4e2d\uff0c\u800c\u4e14\u662f\u540c\u4e00\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\u4e2d\uff0c\u4ea7\u751f\u4e86\u7d27\u8026\u5408\uff0c\u4f1a\u5bfc\u81f4\u4fee\u6539\u6d4b\u8bd5\u6570\u636e\u6216\u6d4b\u8bd5\u4ee3\u7801\u65f6\uff0c\u53ef\u80fd\u4f1a\u76f8\u4e92\u5f71\u54cd\uff0c\u4e0d\u5229\u4e8e\u6d4b\u8bd5\u6570\u636e\u548c\u6d4b\u8bd5\u811a\u672c\u7684\u7ef4\u62a4\u3002\u6bd4\u5982\uff0c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0\u51e0\u7ec4\u65b0\u7684\u6d4b\u8bd5\u6570\u636e\uff0c\u9664\u4e86\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\u5916\uff0c\u8fd8\u8981\u4fee\u6539\u6d4b\u8bd5\u4ee3\u7801\uff0c\u964d\u4f4e\u4e86\u6d4b\u8bd5\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u3002 \u53e6\u5916\u63a5\u53e3\u6d4b\u8bd5\u5f80\u5f80\u662f\u6570\u636e\u9a71\u52a8\u7684\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u6570\u636e\u548c\u6d4b\u8bd5\u4ee3\u7801\u653e\u5230\u4e00\u8d77\u4e5f\u4e0d\u65b9\u4fbf\u501f\u52a9 Pytest \u505a\u53c2\u6570\u5316\u3002 \u5c06\u6d4b\u8bd5\u4ee3\u7801\u548c\u6d4b\u8bd5\u6570\u636e\u5206\u79bb\u5df2\u7ecf\u662f\u6d4b\u8bd5\u9886\u57df\u4e2d\u7684\u5171\u8bc6\u4e86\u3002\u5728 data/\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u6d4b\u8bd5\u6570\u636e\u7684 Yaml \u6587\u4ef6 testintheaters.yaml\uff0c\u5185\u5bb9\u5982\u4e0b: \u719f\u6089 Yaml \u683c\u5f0f\u7684\u540c\u5b66\uff0c\u5e94\u8be5\u5f88\u5bb9\u6613\u770b\u61c2\u4e0a\u9762\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u7684\u5185\u5bb9\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u4e2d\uff0c\u6709\u4e00\u4e2a\u6570\u7ec4 tests\uff0c\u91cc\u9762\u5305\u542b\u7684\u662f\u4e00\u6761\u5b8c\u6574\u7684\u6d4b\u8bd5\u6570\u636e\u3002\u4e00\u4e2a\u5b8c\u6574\u7684\u6d4b\u8bd5\u6570\u636e\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a - case\uff0c\u8868\u793a\u6d4b\u8bd5\u7528\u4f8b\u540d\u79f0\u3002 - http\uff0c\u8868\u793a\u8bf7\u6c42\u5bf9\u8c61\u3002 - expected\uff0c\u8868\u793a\u9884\u671f\u7ed3\u679c\u3002 http \u8fd9\u4e2a\u8bf7\u6c42\u5bf9\u8c61\u5305\u542b\u4e86\u88ab\u6d4b\u63a5\u53e3\u7684\u6240\u6709\u53c2\u6570\uff0c\u5305\u62ec\u8bf7\u6c42\u65b9\u6cd5\u3001\u8bf7\u6c42\u8def\u5f84\u3001\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u53c2\u6570\u3002 expected \u8868\u793a\u9884\u671f\u7ed3\u679c\uff0c\u4e0a\u9762\u7684\u6d4b\u8bd5\u6570\u636e\u4e2d\uff0c\u53ea\u5217\u51fa\u4e86\u5bf9\u8bf7\u6c42\u54cd\u5e94\u7684\u9884\u671f\u503c\uff0c\u5b9e\u9645\u6d4b\u8bd5\u4e2d\uff0c\u8fd8\u53ef\u4ee5\u5217\u51fa\u5bf9\u6570\u636e\u5e93\u7684\u9884\u671f\u503c\u3002 \u6d4b\u8bd5\u811a\u672c\u4e5f\u8981\u505a\u76f8\u5e94\u7684\u6539\u9020\uff0c\u9700\u8981\u8bfb\u53d6 testintheaters.yaml \u6587\u4ef6\u83b7\u53d6\u8bf7\u6c42\u6570\u636e\u548c\u9884\u671f\u7ed3\u679c\uff0c\u7136\u540e\u901a\u8fc7 requests \u53d1\u51fa\u8bf7\u6c42\u3002\u4fee\u6539\u540e\u7684\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a import requests import yaml \u200b \u200b def get_test_data ( test_data_path ): case = [] # \u5b58\u50a8\u6d4b\u8bd5\u7528\u4f8b\u540d\u79f0 http = [] # \u5b58\u50a8\u8bf7\u6c42\u5bf9\u8c61 expected = [] # \u5b58\u50a8\u9884\u671f\u7ed3\u679c with open ( test_data_path ) as f : dat = yaml . load ( f . read (), Loader = yaml . SafeLoader ) test = dat [ 'tests' ] for td in test : case . append ( td . get ( 'case' , '' )) http . append ( td . get ( 'http' , {})) expected . append ( td . get ( 'expected' , {})) parameters = zip ( case , http , expected ) return case , parameters \u200b \u200b cases , parameters = get_test_data ( \"../data/testintheaters.yaml\" ) list_params = list ( parameters ) \u200b class TestInTheaters ( object ): def test_in_theaters ( self ): host = \"http://api.douban.com\" r = requests . request ( list_params [ 0 ][ 1 ][ \"method\" ], url = host + list_params [ 0 ][ 1 ][ \"path\" ], headers = list_params [ 0 ][ 1 ][ \"headers\" ], params = list_params [ 0 ][ 1 ][ \"params\" ]) response = r . json () assert response [ \"count\" ] == list_params [ 0 ][ 2 ][ 'response' ][ \"count\" ] assert response [ \"start\" ] == list_params [ 0 ][ 2 ][ 'response' ][ \"start\" ] assert response [ \"total\" ] == len ( response [ \"subjects\" ]) assert response [ \"title\" ] == list_params [ 0 ][ 2 ][ 'response' ][ \"title\" ], \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a {} \" . format ( response [ \"title\" ]) \u6ce8\u610f\uff0c\u8bfb\u53d6 Yaml \u6587\u4ef6\uff0c\u9700\u8981\u5b89\u88c5 PyYAML \u5305\u3002 \u6d4b\u8bd5\u811a\u672c\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8bfb\u53d6\u6d4b\u8bd5\u6570\u636e\u7684\u51fd\u6570 gettestdata\uff0c\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\u4ece\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6 testintheaters.yaml \u4e2d\u8bfb\u53d6\u5230\u4e86\u6d4b\u8bd5\u7528\u4f8b\u540d\u79f0 case\uff0c\u8bf7\u6c42\u5bf9\u8c61 http \u548c\u9884\u671f\u7ed3\u679c expected\u3002\u8fd9\u4e09\u90e8\u5206\u5206\u522b\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u901a\u8fc7 zip \u5c06\u4ed6\u4eec\u538b\u7f29\u5230\u4e00\u8d77\u3002 \u6d4b\u8bd5\u65b9\u6cd5 testintheaters \u5e76\u6ca1\u6709\u592a\u5927\u53d8\u5316\uff0c\u53ea\u662f\u53d1\u9001\u8bf7\u6c42\u6240\u4f7f\u7528\u7684\u6d4b\u8bd5\u6570\u636e\u4e0d\u662f\u5199\u6b7b\u7684\uff0c\u800c\u662f\u6765\u81ea\u4e8e\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u4e86\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8bfb\u53d6\u6d4b\u8bd5\u6570\u636e\u7684\u51fd\u6570\u4e0d\u4f1a\u5b9a\u4e49\u5728\u6d4b\u8bd5\u7528\u4f8b\u6587\u4ef6\u4e2d\uff0c\u800c\u662f\u4f1a\u653e\u5230 utils \u5305\u4e2d\uff0c\u6bd4\u5982\u653e\u5230 utils/commonlib.py \u4e2d\u3002\u81f3\u6b64\uff0c\u6574\u4e2a\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u5e94\u8be5\u662f\u5982\u4e0b\u6240\u793a\uff1a \u251c\u2500\u2500 config \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 testintheaters.yaml \u251c\u2500\u2500 env \u2502 \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 pyvenv.cfg \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u2502 \u2514\u2500\u2500 __init__.cpython-35.pyc \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u2514\u2500\u2500 testintheaters.py \u2514\u2500\u2500 utils \u251c\u2500\u2500 commonlib.py \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 __pycache__ \u8fd9\u6837\uff0c\u6211\u4eec\u4fee\u6539\u6d4b\u8bd5\u811a\u672c\uff0c\u5c31\u4fee\u6539 testintheaters.py\uff0c\u53d8\u66f4\u6d4b\u8bd5\u6570\u636e\uff0c\u5c31\u4fee\u6539 testintheaters.yaml\u3002\u4f46\u662f\u76ee\u524d\u770b\uff0c\u611f\u89c9\u597d\u50cf\u5e76\u6ca1\u6709\u771f\u6b63\u770b\u5230\u6d4b\u8bd5\u6570\u636e\u548c\u811a\u672c\u5206\u79bb\u7684\u5389\u5bb3\u4e4b\u5904\uff0c\u6216\u8005\u66f4\u52a0\u6709\u4ef7\u503c\u7684\u5730\u65b9\uff0c\u90a3\u4e48\u6211\u4eec\u63a5\u7740\u5f80\u4e0b\u770b\u3002","title":"05 \u6570\u636e\u4e0e\u811a\u672c\u5206\u79bb"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#06","text":"\u4e0a\u9762\u6211\u4eec\u5c06\u6d4b\u8bd5\u6570\u636e\u548c\u6d4b\u8bd5\u811a\u672c\u76f8\u5206\u79bb\uff0c\u5982\u679c\u8981\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u6dfb\u52a0\u66f4\u591a\u7684\u6d4b\u8bd5\u6570\u636e\uff0c\u5f80 tests \u6570\u7ec4\u4e2d\u6dfb\u52a0\u66f4\u591a\u7684\u540c\u6837\u683c\u5f0f\u7684\u6d4b\u8bd5\u6570\u636e\u5373\u53ef\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53eb\u4f5c\u53c2\u6570\u5316\u3002 \u53c2\u6570\u5316\u7684\u610f\u601d\u662f\u5bf9\u540c\u4e00\u4e2a\u63a5\u53e3\uff0c\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u7684\u8f93\u5165\u5bf9\u5176\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u9a8c\u8bc1\u662f\u5426\u6bcf\u4e00\u7ec4\u8f93\u5165\u53c2\u6570\u90fd\u80fd\u5f97\u5230\u9884\u671f\u7ed3\u679c\u3002Pytest \u63d0\u4f9b\u4e86 pytest.mark.paramtrize \u8fd9\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u53c2\u6570\u5316\uff0c\u6211\u4eec\u5148\u770b\u4e0b\u5b98\u65b9\u7f51\u7ad9\u63d0\u4f9b\u7684\u4ecb\u7ecd pytest.mark.paramtrize \u7528\u6cd5\u7684\u4f8b\u5b50\uff1a # content of tests/test_time.py import pytest \u200b from datetime import datetime , timedelta \u200b testdata = [ ( datetime ( 2001 , 12 , 12 ), datetime ( 2001 , 12 , 11 ), timedelta ( 1 )), ( datetime ( 2001 , 12 , 11 ), datetime ( 2001 , 12 , 12 ), timedelta ( - 1 )), ] \u200b \u200b @pytest . mark . parametrize ( \"a,b,expected\" , testdata ) def test_timedistance_v0 ( a , b , expected ): diff = a - b assert diff == expected \u6267\u884c\u4e0a\u9762\u7684\u811a\u672c\u5c06\u4f1a\u5f97\u5230\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6d4b\u8bd5\u65b9\u6cd5 test_timedistance_v0 \u88ab\u6267\u884c\u4e86\u4e24\u904d\uff0c\u7b2c\u4e00\u904d\u6267\u884c\u7528\u7684\u6d4b\u8bd5\u6570\u636e\u662f testdata \u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7ec4\uff0c\u7b2c\u4e8c\u904d\u6267\u884c\u65f6\u7528\u7684\u6d4b\u8bd5\u6570\u636e\u662f testdata \u5217\u8868\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u5143\u7ec4\u3002\u8fd9\u5c31\u662f\u53c2\u6570\u5316\u7684\u6548\u679c\uff0c\u540c\u4e00\u4e2a\u811a\u672c\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u8f93\u5165\u53c2\u6570\u6267\u884c\u6d4b\u8bd5\u3002 ============================= test session starts ============================== platform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /Users/chunming.liu/.local/share/virtualenvs/api_pytest-wCozfXSU/bin/python cachedir: .pytest_cache rootdir: /Users/chunming.liu/learn/api_pytest/tests collecting ... collected 2 items \u200b test_time.py::test_timedistance_v0[a0-b0-expected0] PASSED [ 50%] test_time.py::test_timedistance_v0[a1-b1-expected1] PASSED [100%] \u200b ============================== 2 passed in 0.02s =============================== \u7167\u732b\u753b\u864e\uff0c\u5bf9\u6211\u4eec\u81ea\u5df1\u7684\u6d4b\u8bd5\u9879\u76ee\u4e2d\u7684\u6d4b\u8bd5\u811a\u672c\u8fdb\u884c\u5982\u4e0b\u4fee\u6539\u3002 import pytest import requests from api_pytest.utils.commonlib import get_test_data cases , list_params = get_test_data ( \"../data/testintheaters.yaml\" ) class TestInTheaters ( object ): @pytest . mark . parametrize ( \"case,http,expected\" , list ( list_params ), ids = cases ) def test_in_theaters ( self , case , http , expected ): host = \"http://api.douban.com\" r = requests . request ( http [ \"method\" ], url = host + http [ \"path\" ], headers = http [ \"headers\" ], params = http [ \"params\" ]) response = r . json () assert response [ \"count\" ] == expected [ 'response' ][ \"count\" ] assert response [ \"start\" ] == expected [ 'response' ][ \"start\" ] assert response [ \"title\" ] == expected [ 'response' ][ \"title\" ], \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a {} \" . format ( response [ \"title\" ]) \u5728\u6d4b\u8bd5\u65b9\u6cd5\u4e0a\u9762\u6dfb\u52a0\u4e86\u4e00\u4e2a\u88c5\u9970\u5668 @pytest.mark.parametrize\uff0c\u88c5\u9970\u5668\u4f1a\u81ea\u52a8\u5bf9 list(list_params)\u89e3\u5305\u5e76\u8d4b\u503c\u7ed9\u88c5\u9970\u5668\u7684\u7b2c\u4e00\u53c2\u6570\u3002\u88c5\u9970\u5668\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e2d\u9017\u53f7\u5206\u9694\u7684\u53d8\u91cf\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u65b9\u6cd5\u7684\u53c2\u6570\uff0c\u5728\u6d4b\u8bd5\u65b9\u6cd5\u5185\u5c31\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u8fd9\u4e9b\u53d8\u91cf\u7684\u503c\uff0c\u5229\u7528\u8fd9\u4e9b\u503c\u53d1\u8d77\u8bf7\u6c42\u548c\u8fdb\u884c\u65ad\u8a00\u3002\u88c5\u9970\u5668\u8fd8\u6709\u4e00\u4e2a\u53c2\u6570\u53eb ids\uff0c\u8fd9\u4e2a\u503c\u4f5c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u7684\u540d\u79f0\u5c06\u6253\u5370\u5230\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u3002 \u5728\u6267\u884c\u4fee\u6539\u540e\u7684\u6d4b\u8bd5\u811a\u672c\u524d\uff0c\u6211\u4eec\u5728\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u518d\u589e\u52a0\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u73b0\u5728\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u4e2d\uff0c\u5305\u542b\u4e86\u4e24\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a --- tests : - case : \u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4 http : method : GET path : /v2/movie/in_theaters headers : User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 params : apikey : 0df993c66c0c636e29ecbb5344252a4a start : 0 count : 10 expected : response : title : \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77 count : 10 start : 0 - case : \u9a8c\u8bc1\u54cd\u5e94\u4e2d title \u662f\"\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac\" http : method : GET path : /v2/movie/in_theaters headers : User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36 params : apikey : 0df993c66c0c636e29ecbb5344252a4a start : 1 count : 5 expected : response : title : \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac count : 5 start : 1 \u73b0\u5728\u6211\u4eec\u6267\u884c\u4e00\u4e0b\u6d4b\u8bd5\u811a\u672c\uff0c\u770b\u770b\u6548\u679c\uff1a ============================================================================================================================ test session starts ============================================================================================================================= platform linux -- Python 3 .5.2, pytest-5.4.3, py-1.8.1, pluggy-0.13.1 rootdir: /root/api_pytest/tests collected 2 items testintheaters.py F. [ 100 % ] ================================================================================================================================== FAILURES ================================================================================================================================== _________________________________________________________________ TestInTheaters.test_in_theaters [ \\u 9a8c \\u 8bc1 \\u 54cd \\u 5e94 \\u 4e2d start \\u 548c count \\u 4e0e \\u 8bf7 \\u 6c42 \\u 4e2d \\u 7684 \\u 53c2 \\u 6570 \\u 4e00 \\u 81f4 ] __________________________________________________________________ self = <api_pytest.tests.testintheaters.TestInTheaters object at 0x7fc79177b048>, case = '\u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4' http = { 'headers' : { 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chr...T' , 'params' : { 'apikey' : '0df993c66c0c636e29ecbb5344252a4a' , 'count' : 10 , 'start' : 0 } , 'path' : '/v2/movie/in_theaters' } expected = { 'response' : { 'count' : 10 , 'start' : 0 , 'title' : '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77' }} @pytest.mark.parametrize ( \"case,http,expected\" , list ( list_params ) , ids = cases ) def test_in_theaters ( self, case , http, expected ) : host = \"http://api.douban.com\" r = requests.request ( http [ \"method\" ] , url = host + http [ \"path\" ] , headers = http [ \"headers\" ] , params = http [ \"params\" ]) response = r.json () assert response [ \"count\" ] == expected [ 'response' ][ \"count\" ] assert response [ \"start\" ] == expected [ 'response' ][ \"start\" ] > assert response [ \"title\" ] == expected [ 'response' ][ \"title\" ] , \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a{}\" .format ( response [ \"title\" ]) E AssertionError: \u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac E assert '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac' == '\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77' E - \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u4e0a\u6d77 E ? ^^ E + \u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac E ? ^^ testintheaters.py:20: AssertionError ========================================================================================================================== short test summary info =========================================================================================================================== FAILED testintheaters.py::TestInTheaters::test_in_theaters [ \\u 9a8c \\u 8bc1 \\u 54cd \\u 5e94 \\u 4e2d start \\u 548c count \\u 4e0e \\u 8bf7 \\u 6c42 \\u 4e2d \\u 7684 \\u 53c2 \\u 6570 \\u 4e00 \\u 81f4 ] - AssertionError: \u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a\u6b63\u5728\u4e0a\u6620\u7684\u7535\u5f71-\u5317\u4eac ======================================================================================================================== 1 failed, 1 passed in 0 .63s ========================================================================================================================= \u4ece\u7ed3\u679c\u770b\uff0cPytest \u6536\u96c6\u5230\u4e86 2 \u4e2a items\uff0c\u6d4b\u8bd5\u811a\u672c\u6267\u884c\u4e86\u4e24\u904d\uff0c\u7b2c\u4e00\u904d\u6267\u884c\u7528\u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7ed3\u679c\u662f\u5931\u8d25(F)\uff0c\u7b2c\u4e8c\u904d\u6267\u884c\u7528\u7b2c\u4e8c\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u7ed3\u679c\u662f\u901a\u8fc7(.)\u3002\u6267\u884c\u5b8c\u6210\u540e\u7684 summary info \u90e8\u5206\uff0c\u770b\u5230\u4e86\u4e00\u4e9b Unicode \u7f16\u7801\uff0c\u8fd9\u91cc\u5176\u5b9e\u662f ids \u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u662f\u4e2d\u6587\uff0c\u6240\u4ee5\u9ed8\u8ba4\u8fd9\u91cc\u663e\u793a Unicode \u7f16\u7801\u3002\u4e3a\u4e86\u663e\u793a\u4e2d\u6587\uff0c\u9700\u8981\u5728\u6d4b\u8bd5\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a Pytest \u7684\u914d\u7f6e\u6587\u4ef6 pytest.ini\uff0c\u5728\u5176\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a [ pytest ] disable_test_id_escaping_and_forfeit_all_rights_to_community_support = True \u518d\u6b21\u6267\u884c\u6d4b\u8bd5\u811a\u672c\uff0c\u5728\u6d4b\u8bd5\u7ed3\u679c\u7684 summary_info \u90e8\u5206\uff0c\u5219\u4f1a\u663e\u793a\u6b63\u786e\u4e2d\u6587\u5185\u5bb9\u4e86\u3002 FAILED tests/test_in_theaters.py::TestInTheaters::test_in_theaters [ \u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4 ] - AssertionError: ... \u6309\u7167\u8fd9\u79cd\u53c2\u6570\u5316\u7684\u65b9\u6cd5\uff0c\u5982\u679c\u60f3\u4fee\u6539\u6216\u8005\u6dfb\u52a0\u6d4b\u8bd5\u6570\u636e\uff0c\u53ea\u9700\u8981\u4fee\u6539\u6d4b\u8bd5\u6570\u636e\u6587\u4ef6\u5373\u53ef\u3002 \u73b0\u5728\uff0c\u81ea\u52a8\u5316\u6d4b\u8bd5\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u5e94\u8be5\u662f\u5982\u4e0b\u8fd9\u6837\uff1a \u251c\u2500\u2500 config \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 testintheaters.yaml \u251c\u2500\u2500 env \u2502 \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 pyvenv.cfg \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __pycache__ \u2502 \u2514\u2500\u2500 __init__.cpython-35.pyc \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u251c\u2500\u2500 pytest.ini \u2502 \u2514\u2500\u2500 testintheaters.py \u2514\u2500\u2500 utils \u251c\u2500\u2500 commonlib.py \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 __pycache__","title":"06 \u53c2\u6570\u5316"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#07","text":"\u81ea\u52a8\u5316\u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0chost \u662f\u5199\u5728\u6d4b\u8bd5\u811a\u672c\u4e2d\u7684\uff0c\u8fd9\u79cd\u786c\u7f16\u7801\u65b9\u5f0f\u663e\u7136\u662f\u4e0d\u5408\u9002\u7684\u3002\u8fd9\u4e2a host \u5728\u4e0d\u540c\u7684\u6d4b\u8bd5\u811a\u672c\u90fd\u4f1a\u7528\u5230\uff0c\u5e94\u8be5\u653e\u5230\u4e00\u4e2a\u516c\u5171\u7684\u5730\u65b9\u6765\u7ef4\u62a4\u3002\u5982\u679c\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u4fee\u6539\u4e00\u4e2a\u5730\u65b9\u5c31\u53ef\u4ee5\u4e86\u3002\u6839\u636e\u6211\u7684\u5b9e\u8df5\u7ecf\u9a8c\uff0c\u5c06\u5176\u653e\u5230 config \u6587\u4ef6\u5939\u4e2d\uff0c\u662f\u6bd4\u8f83\u597d\u7684\u3002 \u9664\u4e86 host \u5916\uff0c\u5176\u4ed6\u4e0e\u6d4b\u8bd5\u73af\u5883\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f\u4e5f\u53ef\u4ee5\u653e\u5230 config \u6587\u4ef6\u5939\u4e2d\uff0c\u6bd4\u5982\u6570\u636e\u5e93\u4fe1\u606f\u3001kafka \u8fde\u63a5\u4fe1\u606f\u7b49\uff0c\u4ee5\u53ca\u4e0e\u6d4b\u8bd5\u73af\u5883\u76f8\u5173\u7684\u57fa\u7840\u6d4b\u8bd5\u6570\u636e\uff0c\u6bd4\u5982\u6d4b\u8bd5\u8d26\u53f7\u3002\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u6709\u4e0d\u540c\u7684\u6d4b\u8bd5\u73af\u5883\uff0c\u6bd4\u5982 dev \u73af\u5883\u3001test \u73af\u5883\u3001stg \u73af\u5883\u3001prod \u73af\u5883\u7b49\u3002\u6211\u4eec\u53ef\u4ee5\u5728 config \u6587\u4ef6\u5939\u4e0b\u9762\u521b\u5efa\u5b50\u76ee\u5f55\u6765\u533a\u5206\u4e0d\u540c\u7684\u6d4b\u8bd5\u73af\u5883\u3002\u56e0\u6b64 config \u6587\u4ef6\u5939\uff0c\u5e94\u8be5\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\u7ed3\u6784\uff1a \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 prod \u2502 \u2502 \u2514\u2500\u2500 config.yaml \u2502 \u2514\u2500\u2500 test \u2502 \u2514\u2500\u2500 config.yaml \u5728 config.yaml \u4e2d\u5b58\u653e\u4e0d\u540c\u73af\u5883\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u4ee5\u524d\u9762\u7684\u4f8b\u5b50\u4e3a\u4f8b\uff0c\u5e94\u8be5\u662f\u8fd9\u6837\uff1a host : douban : http://api.douban.com \u5c06\u6d4b\u8bd5\u914d\u7f6e\u4fe1\u606f\u4ece\u811a\u672c\u4e2d\u62c6\u5206\u51fa\u6765\uff0c\u5c31\u9700\u8981\u6709\u4e00\u79cd\u673a\u5236\u5c06\u5176\u8bfb\u53d6\u5230\uff0c\u624d\u80fd\u5728\u6d4b\u8bd5\u811a\u672c\u4e2d\u4f7f\u7528\u3002Pytest \u63d0\u4f9b\u4e86 fixture \u673a\u5236\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u5728\u6d4b\u8bd5\u6267\u884c\u524d\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5229\u7528 fixture \u63d0\u524d\u8bfb\u53d6\u5230\u914d\u7f6e\u4fe1\u606f\u3002\u6211\u4eec\u5148\u5bf9\u5b98\u65b9\u6587\u6863\u4e0a\u7684\u4f8b\u5b50\u7a0d\u52a0\u4fee\u6539\uff0c\u6765\u4ecb\u7ecd fixture \u7684\u4f7f\u7528\u3002\u8bf7\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a import pytest \u200b \u200b @pytest . fixture def smtp_connection (): import smtplib connection = smtplib . SMTP_SSL ( \"smtp.163.com\" , 465 , timeout = 5 ) yield connection print ( \"teardown smtp\" ) connection . close () \u200b \u200b def test_ehlo ( smtp_connection ): response , msg = smtp_connection . ehlo () assert response == 250 assert 0 \u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0csmtpconnection \u88ab\u88c5\u9970\u5668 @pytest.fixture \u88c5\u9970\uff0c\u8868\u660e\u5b83\u662f\u4e00\u4e2a fixture \u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u662f\u8fde\u63a5 163 \u90ae\u7bb1\u670d\u52a1\u5668\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u5bf9\u8c61\u3002\u5f53 test_ehlo \u7684\u6700\u540e\u4e00\u6b21\u6d4b\u8bd5\u6267\u884c\u5b8c\u6210\u540e\uff0c\u6267\u884c print(\"teardown smtp\")\u548c connection.close()\u65ad\u5f00 smtp \u8fde\u63a5\u3002 fixture \u51fd\u6570\u540d\u53ef\u4ee5\u4f5c\u4e3a\u6d4b\u8bd5\u65b9\u6cd5 test_ehlo \u7684\u53c2\u6570\uff0c\u5728\u6d4b\u8bd5\u65b9\u6cd5\u5185\u90e8\uff0c\u4f7f\u7528 fixture \u51fd\u6570\u540d\u8fd9\u4e2a\u53d8\u91cf\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u5728\u4f7f\u7528 fixture \u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 \u56de\u5230\u6211\u4eec\u8bfb\u53d6\u6d4b\u8bd5\u914d\u7f6e\u4fe1\u606f\u7684\u9700\u6c42\u4e0a\uff0c\u5728\u81ea\u52a8\u5316\u6d4b\u8bd5\u9879\u76ee tests/\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 conftest.py\uff0c\u5b9a\u4e49\u4e00\u4e2a fixture \u51fd\u6570 env\uff1a @pytest . fixture ( scope = \"session\" ) def env ( request ): config_path = os . path . join ( request . config . rootdir , \"config\" , \"test\" , \"config.yaml\" ) with open ( config_path ) as f : env_config = yaml . load ( f . read (), Loader = yaml . SafeLoader ) return env_config conftest.py \u6587\u4ef6\u662f\u4e00\u4e2a plugin \u6587\u4ef6\uff0c\u91cc\u9762\u53ef\u4ee5\u5b9e\u73b0 Pytest \u63d0\u4f9b\u7684 Hook \u51fd\u6570\u6216\u8005\u81ea\u5b9a\u4e49\u7684 fixture \u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u53ea\u5728 conftest.py \u6240\u5728\u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55\u4e2d\u751f\u6548\u3002scope=\"session\"\u8868\u793a\u8fd9\u4e2a fixture \u51fd\u6570\u7684\u4f5c\u7528\u57df\u662f session \u7ea7\u522b\u7684\uff0c\u5728\u6574\u4e2a\u6d4b\u8bd5\u6d3b\u52a8\u4e2d\u5f00\u59cb\u524d\u6267\u884c\uff0c\u5e76\u4e14\u53ea\u4f1a\u88ab\u6267\u884c\u4e00\u6b21\u3002\u9664\u4e86 session \u7ea7\u522b\u7684 fixture \u51fd\u6570\uff0c\u8fd8\u6709 function \u7ea7\u522b\u3001class \u7ea7\u522b\u7b49\u3002 env \u51fd\u6570\u4e2d\u6709\u4e00\u4e2a\u53c2\u6570 request\uff0c\u5176\u5b9e request \u4e5f\u662f\u4e00\u4e2a fixture \u51fd\u6570\u3002\u5728\u8fd9\u91cc\u7528\u5230\u4e86\u5b83\u7684 request.config.rootdir \u5c5e\u6027\uff0c\u8fd9\u4e2a\u5c5e\u6027\u8868\u793a\u7684\u662f pytest.ini \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u6d4b\u8bd5\u9879\u76ee\u4e2d pytest.ini \u5904\u4e8e\u9879\u76ee\u7684\u6839\u76ee\u5f55\uff0c\u6240\u4ee5 config_path \u7684\u5b8c\u6574\u8def\u5f84\u5c31\u662f\uff1a /root/api_pytest/config/config.yaml \u5c06 env \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u6d4b\u8bd5\u65b9\u6cd5 testintheaters\uff0c\u5c06\u6d4b\u8bd5\u65b9\u6cd5\u5185\u7684 host \u6539\u4e3a env[\"host\"][\"douban\"]\uff1a import pytest import requests from api_pytest.utils.commonlib import get_test_data cases , list_params = get_test_data ( \"../data/testintheaters.yaml\" ) class TestInTheaters ( object ): @pytest . mark . parametrize ( \"case,http,expected\" , list ( list_params ), ids = cases ) def test_in_theaters ( self , case , http , expected ): host = env [ \"host\" ][ \"douban\" ] r = requests . request ( http [ \"method\" ], url = host + http [ \"path\" ], headers = http [ \"headers\" ], params = http [ \"params\" ]) response = r . json () assert response [ \"count\" ] == expected [ 'response' ][ \"count\" ] assert response [ \"start\" ] == expected [ 'response' ][ \"start\" ] assert response [ \"title\" ] == expected [ 'response' ][ \"title\" ], \"\u5b9e\u9645\u7684\u6807\u9898\u662f\uff1a {} \" . format ( response [ \"title\" ]) \u8fd9\u6837\u5c31\u8fbe\u5230\u4e86\u6d4b\u8bd5\u914d\u7f6e\u6587\u4ef6\u4e0e\u6d4b\u8bd5\u811a\u672c\u76f8\u4e92\u5206\u79bb\u7684\u6548\u679c\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539 host\uff0c\u53ea\u9700\u8981\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5373\u53ef\uff0c\u6d4b\u8bd5\u811a\u672c\u6587\u4ef6\u5c31\u4e0d\u7528\u4fee\u6539\u4e86\u3002\u4fee\u6539\u5b8c\u6210\u540e\u6267\u884c\u6d4b\u8bd5\u7684\u65b9\u6cd5\u4e0d\u53d8\u3002 \u4e0a\u9762\u7684 env \u51fd\u6570\u5b9e\u73b0\u4e2d\uff0c\u6709\u70b9\u70b9\u5c0f\u7f3a\u61be\uff0c\u5c31\u662f\u8bfb\u53d6\u7684\u914d\u7f6e\u6587\u4ef6\u662f\u56fa\u5b9a\u7684\uff0c\u8bfb\u53d6\u7684\u90fd\u662f test \u73af\u5883\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u6267\u884c\u6d4b\u8bd5\u65f6\uff0c\u901a\u8fc7\u547d\u4ee4\u884c\u9009\u9879\uff0c\u53ef\u6307\u5b9a\u8bfb\u53d6\u54ea\u4e2a\u73af\u5883\u7684\u914d\u7f6e\uff0c\u4ee5\u4fbf\u5728\u4e0d\u540c\u7684\u6d4b\u8bd5\u73af\u5883\u4e0b\u5f00\u5c55\u6d4b\u8bd5\u3002Pytest \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb\u4f5c pytest_addoption \u7684 Hook \u51fd\u6570\uff0c\u53ef\u4ee5\u63a5\u53d7\u547d\u4ee4\u884c\u9009\u9879\u7684\u53c2\u6570\uff0c\u5199\u6cd5\u5982\u4e0b\uff1a def pytest_addoption ( parser ): parser . addoption ( \"--env\" , action = \"store\" , dest = \"environment\" , default = \"test\" , help = \"environment: test or prod\" ) pytest_addoption \u7684\u542b\u4e49\u662f\uff0c\u63a5\u6536\u547d\u4ee4\u884c\u9009\u9879--env \u9009\u9879\u7684\u503c\uff0c\u5b58\u5230 environment \u53d8\u91cf\u4e2d\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u547d\u4ee4\u884c\u9009\u9879\uff0cenvironment \u53d8\u91cf\u9ed8\u8ba4\u503c\u662f test\u3002\u5c06\u4e0a\u9762\u4ee3\u7801\u4e5f\u653e\u5165 conftest.py \u4e2d\uff0c\u5e76\u4fee\u6539 env \u51fd\u6570\uff0c\u5c06 os.path.join \u4e2d\u7684\"test\"\u66ff\u6362\u4e3a request.config.getoption(\"environment\")\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u9009\u9879\u6765\u63a7\u5236\u8bfb\u53d6\u7684\u914d\u7f6e\u6587\u4ef6\u4e86\u3002\u6bd4\u5982\u6267\u884c test \u73af\u5883\u7684\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u6307\u5b9a--env test\uff1a py.test --env test tests/test_in_theaters.py \u5982\u679c\u4e0d\u60f3\u6bcf\u6b21\u90fd\u5728\u547d\u4ee4\u884c\u4e0a\u6307\u5b9a--env\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5176\u653e\u5165 pytest.ini \u4e2d\uff1a [ pytest ] addopts = --env prod \u547d\u4ee4\u884c\u4e0a\u7684\u53c2\u6570\u4f1a\u8986\u76d6 pyest.ini \u91cc\u9762\u7684\u53c2\u6570\u3002","title":"07 \u6d4b\u8bd5\u914d\u7f6e\u7ba1\u7406"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#08","text":"\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5728\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u524d\u505a\u6570\u636e\u5e93\u8fde\u63a5\u7684\u51c6\u5907\uff0c\u505a\u6d4b\u8bd5\u6570\u636e\u7684\u51c6\u5907\uff0c\u6d4b\u8bd5\u6267\u884c\u540e\u65ad\u5f00\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u6e05\u7406\u6d4b\u8bd5\u810f\u6570\u636e\u8fd9\u4e9b\u5de5\u4f5c\u3002\u901a\u8fc7 07 \u5c0f\u8282\u5927\u5bb6\u5bf9\u4e8e\u901a\u8fc7 env \u8fd9\u4e2a fixture \u51fd\u6570\uff0c\u5982\u4f55\u5728\u6d4b\u8bd5\u5f00\u59cb\u524d\u7684\u5f00\u5c55\u51c6\u5907\u5de5\u4f5c\u6709\u6240\u4e86\u89e3\uff0c\u672c\u5c0f\u8282\u5c06\u4ecb\u7ecd\u66f4\u591a\u5185\u5bb9\u3002 @pytest.fixture \u51fd\u6570\u7684 scope \u53ef\u80fd\u7684\u53d6\u503c\u6709 function\uff0cclass\uff0cmodule\uff0cpackage \u6216 session\u3002\u4ed6\u4eec\u7684\u5177\u4f53\u542b\u4e49\u5982\u4e0b\uff1a function\uff0c\u8868\u793a fixture \u51fd\u6570\u5728\u6d4b\u8bd5\u65b9\u6cd5\u6267\u884c\u524d\u548c\u6267\u884c\u540e\u6267\u884c\u4e00\u6b21\u3002 class\uff0c\u8868\u793a fixture \u51fd\u6570\u5728\u6d4b\u8bd5\u7c7b\u6267\u884c\u524d\u548c\u6267\u884c\u540e\u6267\u884c\u4e00\u6b21\u3002 module\uff0c\u8868\u793a fixture \u51fd\u6570\u5728\u6d4b\u8bd5\u811a\u672c\u6267\u884c\u524d\u548c\u6267\u884c\u540e\u6267\u884c\u4e00\u6b21\u3002 package\uff0c\u8868\u793a fixture \u51fd\u6570\u5728\u6d4b\u8bd5\u5305\uff08\u6587\u4ef6\u5939\uff09\u4e2d\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u524d\u548c\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u540e\u6267\u884c\u4e00\u6b21\u3002 session\uff0c\u8868\u793a\u6240\u6709\u6d4b\u8bd5\u7684\u6700\u5f00\u59cb\u548c\u6d4b\u8bd5\u7ed3\u675f\u540e\u6267\u884c\u4e00\u6b21\u3002 \u901a\u5e38\uff0c\u6570\u636e\u5e93\u8fde\u63a5\u548c\u65ad\u5f00\u3001\u6d4b\u8bd5\u914d\u7f6e\u6587\u4ef6\u7684\u8bfb\u53d6\u7b49\u5de5\u4f5c\uff0c\u662f\u9700\u8981\u653e\u5230 session \u7ea7\u522b\u7684 fixture \u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u9488\u5bf9\u6574\u4e2a\u6d4b\u8bd5\u6d3b\u52a8\u53ea\u9700\u8981\u505a\u4e00\u6b21\u3002\u800c\u9488\u5bf9\u6d4b\u8bd5\u6570\u636e\u7684\u51c6\u5907\uff0c\u901a\u5e38\u662f function \u7ea7\u522b\u6216\u8005 class \u7ea7\u522b\u7684\uff0c\u56e0\u4e3a\u6d4b\u8bd5\u6570\u636e\u9488\u5bf9\u4e0d\u540c\u7684\u6d4b\u8bd5\u65b9\u6cd5\u6216\u8005\u6d4b\u8bd5\u7c7b\u5f80\u5f80\u90fd\u4e0d\u76f8\u540c\u3002 \u5728 TestInTheaters \u6d4b\u8bd5\u7c7b\u4e2d\uff0c\u6a21\u62df\u4e00\u4e2a\u51c6\u5907\u548c\u6e05\u7406\u6d4b\u8bd5\u6570\u636e\u7684 fixture \u51fd\u6570 preparation\uff0cscope \u8bbe\u7f6e\u4e3a function\uff1a @pytest . fixture ( scope = \"function\" ) def preparation ( self ): print ( \"\u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\" ) test_data = \"\u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\" yield test_data print ( \"\u6e05\u7406\u6d4b\u8bd5\u6570\u636e\" ) \u5728\u6d4b\u8bd5\u65b9\u6cd5\u4e2d\uff0c\u5c06 preparation \u4f5c\u4e3a\u53c2\u6570\uff0c\u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\u6267\u884c\u6d4b\u8bd5\uff1a $ py.test -s -q --tb=no tests/test_in_theaters.py ====================================================== test session starts ======================================================= platform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 rootdir: /Users/chunming.liu/learn/api_pytest, inifile: pytest.ini collected 2 items tests/test_in_theaters.py \u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e F \u6e05\u7406\u6d4b\u8bd5\u6570\u636e \u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e .\u6e05\u7406\u6d4b\u8bd5\u6570\u636e \u200b \u200b ==================================================== short test summary info ===================================================== FAILED tests/test_in_theaters.py::TestInTheaters::test_in_theaters[\u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4] - AssertionError: ... ================================================== 1 failed, 1 passed in 0.81s =================================================== \u901a\u8fc7\u8f93\u51fa\u53ef\u4ee5\u770b\u5230\u5728\u6bcf\u4e00\u6761\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\u524d\u540e\uff0c\u5404\u6267\u884c\u4e86\u4e00\u6b21\u201c\u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\u201d\u548c\u201c\u6e05\u7406\u6d4b\u8bd5\u6570\u636e\u201d\u3002\u5982\u679c scope \u7684\u503c\u6539\u4e3a class\uff0c\u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\u7684\u8f93\u51fa\u4fe1\u606f\u5c06\u662f\u4e0b\u9762\u8fd9\u6837\uff1a tests/testintheaters.py \u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e F.\u6e05\u7406\u6d4b\u8bd5\u6570\u636e \u5728\u6d4b\u8bd5\u7c7b\u6267\u884c\u524d\u540e\u5404\u6267\u884c\u4e00\u6b21\u201c\u5728\u6570\u636e\u5e93\u4e2d\u51c6\u5907\u6d4b\u8bd5\u6570\u636e\u201d\u548c\u201c\u6e05\u7406\u6d4b\u8bd5\u6570\u636e\u201d\u3002","title":"08 \u6d4b\u8bd5\u7684\u51c6\u5907\u4e0e\u6536\u5c3e"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#09","text":"\u901a\u8fc7 pytest.mark \u53ef\u4ee5\u7ed9\u6d4b\u8bd5\u7528\u4f8b\u6253\u4e0a\u6807\u8bb0\uff0c\u5e38\u89c1\u7684\u5e94\u7528\u573a\u666f\u662f\uff1a\u9488\u5bf9\u67d0\u4e9b\u8fd8\u672a\u5b9e\u73b0\u7684\u529f\u80fd\uff0c\u5c06\u6d4b\u8bd5\u7528\u4f8b\u4e3b\u52a8\u8df3\u8fc7\u4e0d\u6267\u884c\u3002\u6216\u8005\u5728\u67d0\u4e9b\u6761\u4ef6\u4e0b\uff0c\u6d4b\u8bd5\u7528\u4f8b\u8df3\u8fc7\u4e0d\u6267\u884c\u3002\u8fd8\u6709\u53ef\u4ee5\u4e3b\u52a8\u5c06\u6d4b\u8bd5\u7528\u4f8b\u6807\u8bb0\u4e3a\u5931\u8d25\u7b49\u7b49\u3002\u9488\u5bf9\u4e09\u4e2a\u573a\u666f\uff0cpytest \u63d0\u4f9b\u4e86\u5185\u7f6e\u7684\u6807\u7b7e\uff0c\u6211\u4eec\u901a\u8fc7\u5177\u4f53\u4ee3\u7801\u6765\u770b\u4e00\u4e0b\uff1a import sys import pytest \u200b \u200b class TestMarks ( object ): @pytest . mark . skip ( reason = \"not implementation\" ) def test_the_unknown ( self ): \"\"\" \u8df3\u8fc7\u4e0d\u6267\u884c\uff0c\u56e0\u4e3a\u88ab\u6d4b\u903b\u8f91\u8fd8\u6ca1\u6709\u88ab\u5b9e\u73b0 \"\"\" assert 0 \u200b @pytest . mark . skipif ( sys . version_info < ( 3 , 7 ), reason = \"requires python3.7 or higher\" ) def test_skipif ( self ): \"\"\" \u4f4e\u4e8e python3.7 \u7248\u672c\u4e0d\u6267\u884c\u8fd9\u6761\u6d4b\u8bd5\u7528\u4f8b :return: \"\"\" assert 1 \u200b @pytest . mark . xfail def test_xfail ( self ): \"\"\" Indicate that you expect it to fail \u8fd9\u6761\u7528\u4f8b\u5931\u8d25\u65f6\uff0c\u6d4b\u8bd5\u7ed3\u679c\u88ab\u6807\u8bb0\u4e3a xfail\uff08expected to fail\uff09\uff0c\u5e76\u4e14\u4e0d\u6253\u5370\u9519\u8bef\u4fe1\u606f\u3002 \u8fd9\u6761\u7528\u4f8b\u6267\u884c\u6210\u529f\u65f6\uff0c\u6d4b\u8bd5\u7ed3\u679c\u88ab\u6807\u8bb0\u4e3a xpassed\uff08unexpectedly passing\uff09 \"\"\" assert 0 \u200b @pytest . mark . xfail ( run = False ) def test_xfail_not_run ( self ): \"\"\" run=False \u8868\u793a\u8fd9\u6761\u7528\u4f8b\u4e0d\u7528\u6267\u884c \"\"\" assert 0 \u4e0b\u9762\u6765\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff1a $ py.test -s -q --tb=no tests/test_marks.py ====================================================== test session starts ======================================================= platform darwin -- Python 3.7.7, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 rootdir: /Users/chunming.liu/learn/api_pytest, inifile: pytest.ini collected 4 items \u200b tests/test_marks.py s.xx ============================================ 1 passed, 1 skipped, 2 xfailed in 0.06s ============================================= \u4ece\u7ed3\u679c\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e00\u6761\u6d4b\u8bd5\u7528\u4f8b skipped \u4e86\uff0c\u7b2c\u4e8c\u6761\u6d4b\u8bd5\u7528\u4f8b passed \u4e86\uff0c\u7b2c\u4e09\u6761\u548c\u7b2c\u56db\u6761\u6d4b\u8bd5\u7528\u4f8b xfailed \u4e86\u3002 \u9664\u4e86\u5185\u7f6e\u7684\u6807\u7b7e\uff0c\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6807\u7b7e\u5e76\u52a0\u5230\u6d4b\u8bd5\u65b9\u6cd5\u4e0a\uff1a @pytest . mark . slow def test_slow ( self ): \"\"\" \u81ea\u5b9a\u4e49\u6807\u7b7e \"\"\" assert 0 \u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7-m \u8fc7\u6ee4\u6216\u8005\u53cd\u8fc7\u6ee4\uff0c\u6bd4\u5982\u53ea\u6267\u884c\u88ab\u6807\u8bb0\u4e3a slow \u7684\u6d4b\u8bd5\u7528\u4f8b\uff1a $ py.test -s -q --tb=no -m \"slow\" tests/test_marks.py $ py.test -s -q --tb=no -m \"not slow\" tests/test_marks.py \u5bf9\u4e8e\u81ea\u5b9a\u4e49\u6807\u7b7e\uff0c\u4e3a\u4e86\u907f\u514d\u51fa\u73b0 PytestUnknownMarkWarning\uff0c\u6700\u597d\u5728 pytest.ini \u4e2d\u6ce8\u518c\u4e00\u4e0b\uff1a [pytest] markers = slow: marks tests as slow (deselect with '-m \"not slow\"')","title":"09 \u6807\u8bb0\u4e0e\u5206\u7ec4"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#10","text":"\u5982\u679c\u81ea\u52a8\u5316\u6d4b\u8bd5\u7528\u4f8b\u6570\u91cf\u6210\u5343\u4e0a\u4e07\uff0c\u90a3\u4e48\u5e76\u53d1\u6267\u884c\u5b83\u4eec\u662f\u4e2a\u5f88\u597d\u7684\u4e3b\u610f\uff0c\u53ef\u4ee5\u52a0\u5feb\u6574\u4f53\u6d4b\u8bd5\u7528\u4f8b\u7684\u6267\u884c\u65f6\u95f4\u3002 pyest \u6709\u4e00\u4e2a\u63d2\u4ef6 pytest-xdist \u53ef\u4ee5\u505a\u5230\u5e76\u53d1\u6267\u884c\uff0c\u5b89\u88c5\u4e4b\u540e\uff0c\u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\u901a\u8fc7\u6267\u884c-n \u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u5e76\u53d1\u5ea6\uff0c\u901a\u8fc7 auto \u53c2\u6570\u81ea\u52a8\u5339\u914d CPU \u6570\u91cf\u4f5c\u4e3a\u5e76\u53d1\u5ea6\u3002\u5e76\u53d1\u6267\u884c\u672c\u6587\u7684\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\uff1a $ py . test - s - q -- tb = no - n auto tests / ====================================================== test session starts ======================================================= platform darwin -- Python 3.7 . 7 , pytest - 5.4 . 1 , py - 1.8 . 1 , pluggy - 0.13 . 1 rootdir : / Users / chunming . liu / learn / api_pytest , inifile : pytest . ini plugins : xdist - 1.31 . 0 , forked - 1.1 . 3 gw0 [ 10 ] / gw1 [ 10 ] / gw2 [ 10 ] / gw3 [ 10 ] / gw4 [ 10 ] / gw5 [ 10 ] / gw6 [ 10 ] / gw7 [ 10 ] s . FxxF .. F . ==================================================== short test summary info ===================================================== FAILED tests / test_marks . py :: TestMarks :: test_slow - assert 0 FAILED tests / test_smtpsimple . py :: test_ehlo - assert 0 FAILED tests / test_in_theaters . py :: TestInTheaters :: test_in_theaters [ \u9a8c\u8bc1\u54cd\u5e94\u4e2d start \u548c count \u4e0e\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u4e00\u81f4 ] - AssertionError : ... ======================================= 3 failed , 4 passed , 1 skipped , 2 xfailed in 1.91 s ======================================== \u53ef\u4ee5\u975e\u5e38\u76f4\u89c2\u7684\u611f\u53d7\u5230\uff0c\u5e76\u53d1\u6267\u884c\u6bd4\u987a\u5e8f\u6267\u884c\u5feb\u5f97\u591a\u3002\u4f46\u662f\u5e76\u53d1\u6267\u884c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u540c\u7684\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u95f4\u4e0d\u8981\u6709\u6d4b\u8bd5\u6570\u636e\u7684\u76f8\u4e92\u5e72\u6270\uff0c\u6700\u597d\u4e0d\u540c\u7684\u6d4b\u8bd5\u7528\u4f8b\u4f7f\u7528\u4e0d\u540c\u7684\u6d4b\u8bd5\u6570\u636e\u3002 \u8fd9\u91cc\u63d0\u4e00\u4e0b\uff0cpytest \u751f\u6001\u4e2d\uff0c\u6709\u5f88\u591a\u7b2c\u4e09\u65b9\u63d2\u4ef6\u5f88\u597d\u7528\uff0c\u66f4\u591a\u7684\u63d2\u4ef6\u53ef\u4ee5\u5728\u8fd9\u91cc https://pypi.org/search/?q=pytest \u67e5\u770b\u548c\u641c\u7d22\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u5f00\u53d1\u81ea\u5df1\u7684\u63d2\u4ef6\u3002","title":"10 \u5e76\u53d1\u6267\u884c"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#11","text":"Pytest \u53ef\u4ee5\u65b9\u4fbf\u7684\u751f\u6210\u6d4b\u8bd5\u62a5\u544a\uff0c\u901a\u8fc7\u6307\u5b9a--junitxml \u53c2\u6570\u53ef\u4ee5\u751f\u6210 XML \u683c\u5f0f\u7684\u6d4b\u8bd5\u62a5\u544a\uff0cjunitxml \u662f\u4e00\u79cd\u975e\u5e38\u901a\u7528\u7684\u6807\u51c6\u7684\u6d4b\u8bd5\u62a5\u544a\u683c\u5f0f\uff0c\u53ef\u4ee5\u7528\u6765\u4e0e\u6301\u7eed\u96c6\u6210\u5de5\u5177\u7b49\u5f88\u591a\u5de5\u5177\u96c6\u6210\uff1a $ py.test -s -q --junitxml=./report.xml tests/","title":"11 \u6d4b\u8bd5\u62a5\u544a"},{"location":"python/%E5%9F%BA%E4%BA%8EPytest%E6%A1%86%E6%9E%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/#12","text":"\u672c\u6587\u7ae0\u4ee5\u5b9e\u9645\u9879\u76ee\u51fa\u53d1\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u3001\u5982\u4f55\u53c2\u6570\u5316\u3001\u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\u914d\u7f6e\u7ba1\u7406\u3001\u5982\u4f55\u8fdb\u884c\u6d4b\u8bd5\u7684\u51c6\u5907\u548c\u6e05\u7406\uff0c\u5982\u4f55\u8fdb\u884c\u5e76\u53d1\u6d4b\u8bd5\u5e76\u751f\u6210\u62a5\u544a\u3002\u6839\u636e\u672c\u6587\u7684\u4ecb\u7ecd\uff0c\u4f60\u80fd\u591f\u9010\u6b65\u642d\u5efa\u8d77\u4e00\u5957\u5b8c\u6574\u7684\u6d4b\u8bd5\u9879\u76ee\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u7684\u81ea\u52a8\u5316\u6d4b\u8bd5\u9879\u76ee\u5b8c\u6574\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 config.yaml \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 testintheaters.yaml \u251c\u2500\u2500 env \u2502 \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 lib \u2502 \u2514\u2500\u2500 pyvenv.cfg \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 pytest.ini \u2502 \u251c\u2500\u2500 testintheaters.py \u2502 \u2514\u2500\u2500 test_marks.py \u2514\u2500\u2500 utils \u251c\u2500\u2500 commonlib.py \u251c\u2500\u2500 __init__.py","title":"12 \u603b\u7ed3"},{"location":"python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/","text":"\u6c49\u5b57\u7f16\u7801\uff08\u53ea\u8bb2\u4e24\u79cd\uff09 \u00b6 \u95ee\u9898 \u5341\u4e2a\u6c49\u5b57\u5360\u591a\u5c11\u5b57\u8282\uff1f 20\u4e2a \uff08gbk\u7f16\u7801\uff09 20\u4e2a \uff08utf-8\u7f16\u7801\uff09 \u56fd\u6807\u7f16\u7801 \u00b6 GB18020 (\u4e8c\u5b57\u8282\u6216\u56db\u5b57\u8282\u7f16\u7801 27533\u4e2a\u5b57) GBK(\u4e8c\u5b57\u8282\u7f16\u7801 21003\u4e2a\u5b57) GB2312(\u4e8c\u5b57\u8282\u7f16\u7801 6763\u4e2a\u5b57) (Windows\u5e38\u7528) \u56fd\u9645\u6807\u51c6 \u00b6 UNICODE <--------> UTF-8 (Linux / Max OS X / IOS / Android\u5e38\u7528) UTF-8 \u00b6 \u200b (8-bit Unicode Transformation Format) python \u7684\u7f16\u7801(encode)\u5b57\u7b26\u4e32 \u00b6 'gb2312' 'gbk' 'gb18030' 'utf-8' 'ascii' \u7f16\u7801\u6ce8\u91ca \u00b6 \u5728\u6e90\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u6216\u7b2c\u4e8c\u884c\u5199\u5165\u5982\u4e0b\u5185\u5bb9\u4e3a\u7f16\u7801\u6ce8\u91ca # -*- coding:gbk -*- # \u8bbe\u7f6e\u6e90\u6587\u4ef6\u683c\u5f0f\u4e3agbk \u6216 # -*- coding:utf-8 -*- # \u8bbe\u7f6e\u6e90\u6587\u4ef6\u683c\u5f0f\u4e3autf-8 \u6216 # coding='utf-8' \u4f5c\u7528 \u544a\u8bc9\u89e3\u91ca\u6267\u884c\u5668\uff0c\u5f53\u524d\u7684.py\u6587\u4ef6\u7684\u7f16\u7801\u683c\u5f0f\u662f\u4ec0\u4e48","title":"20. \u5b57\u7b26\u7f16\u7801"},{"location":"python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/#_1","text":"\u95ee\u9898 \u5341\u4e2a\u6c49\u5b57\u5360\u591a\u5c11\u5b57\u8282\uff1f 20\u4e2a \uff08gbk\u7f16\u7801\uff09 20\u4e2a \uff08utf-8\u7f16\u7801\uff09","title":"\u6c49\u5b57\u7f16\u7801\uff08\u53ea\u8bb2\u4e24\u79cd\uff09"},{"location":"python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/#_2","text":"GB18020 (\u4e8c\u5b57\u8282\u6216\u56db\u5b57\u8282\u7f16\u7801 27533\u4e2a\u5b57) GBK(\u4e8c\u5b57\u8282\u7f16\u7801 21003\u4e2a\u5b57) GB2312(\u4e8c\u5b57\u8282\u7f16\u7801 6763\u4e2a\u5b57) (Windows\u5e38\u7528)","title":"\u56fd\u6807\u7f16\u7801"},{"location":"python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/#_3","text":"UNICODE <--------> UTF-8 (Linux / Max OS X / IOS / Android\u5e38\u7528)","title":"\u56fd\u9645\u6807\u51c6"},{"location":"python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/#utf-8","text":"\u200b (8-bit Unicode Transformation Format)","title":"UTF-8"},{"location":"python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/#python-encode","text":"'gb2312' 'gbk' 'gb18030' 'utf-8' 'ascii'","title":"python \u7684\u7f16\u7801(encode)\u5b57\u7b26\u4e32"},{"location":"python/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/#_4","text":"\u5728\u6e90\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u6216\u7b2c\u4e8c\u884c\u5199\u5165\u5982\u4e0b\u5185\u5bb9\u4e3a\u7f16\u7801\u6ce8\u91ca # -*- coding:gbk -*- # \u8bbe\u7f6e\u6e90\u6587\u4ef6\u683c\u5f0f\u4e3agbk \u6216 # -*- coding:utf-8 -*- # \u8bbe\u7f6e\u6e90\u6587\u4ef6\u683c\u5f0f\u4e3autf-8 \u6216 # coding='utf-8' \u4f5c\u7528 \u544a\u8bc9\u89e3\u91ca\u6267\u884c\u5668\uff0c\u5f53\u524d\u7684.py\u6587\u4ef6\u7684\u7f16\u7801\u683c\u5f0f\u662f\u4ec0\u4e48","title":"\u7f16\u7801\u6ce8\u91ca"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/","text":"\u5b57\u8282\u4e32\u548c\u5b57\u8282\u6570\u7ec4 \u00b6 \u5b57\u8282\u4e32\uff08\u5b57\u8282\u5e8f\u5217\uff09bytes \u4f5c\u7528 \u5b58\u50a8\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\u6570\u636e \u5b57\u8282\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u5b57\u8282\u5e8f\u5217 \u5b57\u8282 \u00b6 \u5b57\u8282\u662f0~255\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5b57\u8282\u662f\u6570\u636e\u4f20\u8f93\u548c\u6570\u636e\u5b58\u50a8\u7684\u57fa\u672c\u5355\u4f4d \uff08\u4f8b\u5982\uff1a\u4e2d\u56fd\u79fb\u52a8\u7684\u6d41\u91cf...\uff0c\u6587\u4ef6\u5927\u5c0f\u7b49\uff09 \u521b\u5efa\u7a7a\u5b57\u8282\u4e32\u7684\u5b57\u9762\u503c \u00b6 b'' b\"\" b\"\"\"\"\"\" b'''''' \u521b\u5efa\u975e\u7a7a\u5b57\u8282\u4e32\u7684\u5b57\u9762\u503c \u00b6 b'ABCD' b\"ABCD\" b'\\x41\\x42' \u5b57\u8282\u4e32\u7684\u6784\u9020\u51fd\u6570 \u00b6 bytes() # \u751f\u6210\u4e00\u4e2a\u5b57\u7684\u5b57\u8282\u4e32\uff0c\u7b49\u540c\u4e8eb'' bytes(\u6574\u578b\u53ef\u8fed\u4ee3\u5bf9\u8c61) # \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u5b57\u8282\u4e32 bytes(\u6574\u6570n) # \u751f\u6210n\u4e2a\u503c\u4e3a0\u7684\u5b57\u8282\u4e32 bytes(\u5b57\u7b26\u4e32, encoding='utf-8') # \u7528\u5b57\u7b26\u4e32\u7684\u8f6c\u6362\u7f16\u7801\u751f\u6210\u4e00\u4e2a\u5b57\u8282\u4e32 # \u793a\u4f8b b = bytes () b = bytes ( range ( 65 , 91 )) b = bytes ( 10 ) b = bytes ( 'hello' , encoding = 'utf-8' ) b = bytes ( '\u4e2d\u6587' , encoding = 'utf-8' ) \u5b57\u8282\u4e32\u7684\u8fd0\u7b97 \u00b6 \u4e0e\u5176\u4ed6\u5e8f\u5217\u7684\u8fd0\u7b97\u89c4\u5219\u76f8\u540c + += * *= < <= > >= == != in not in \u7d22\u5f15\u548c\u5207\u7247 \u5b57\u7b26\u4e32\u548c\u5b57\u8282\u4e32\u7684\u533a\u522b \u00b6 bytes \u5b58\u50a8\u5b57\u8282(0-255) str \u5b58\u50a8\u5b57\u7b26\uff08\u7528\u6765\u5b58\u50a8\u6587\u5b57\u4fe1\u606f\uff0c \u503c\u4e3a0~65535\u66f4\u5927\uff09 bytes \u4e0estr \u8f6c\u6362 \u00b6 \u7f16\u7801\uff08encode\uff09 str -------------> bytes b = s.encode(encoding='utf-8') \u89e3\u7801\uff08decode\uff09 bytes -------------> str s = b.decode(encoding='utf-8') \u5b57\u8282\u6570\u7ec4 bytearray \u00b6 \u200b \u53ef\u53d8\u7684\u5b57\u8282\u5e8f\u5217 \u6784\u9020\u51fd\u6570 bytearray() # \u751f\u6210\u4e00\u4e2a\u5b57\u7684\u5b57\u8282\u6570\u7ec4 bytearray(\u6574\u578b\u53ef\u8fed\u4ee3\u5bf9\u8c61) # \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4 bytearray(\u6574\u6570n) # \u751f\u6210n\u4e2a\u503c\u4e3a0\u7684\u5b57\u8282\u6570\u7ec4 bytearray(\u5b57\u7b26\u4e32, encoding='utf-8') # \u7528\u5b57\u7b26\u4e32\u7684\u8f6c\u6362\u7f16\u7801\u751f\u6210\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4 \u5b57\u8282\u6570\u7ec4\u652f\u6301\u7d22\u5f15\u548c\u5207\u7247\u8d4b\u503c\uff08\u91cd\u8981\uff09","title":"18. \u5b57\u8282\u4e32\u548c\u5b57\u8282\u6570\u7ec4"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#_1","text":"\u5b57\u8282\u4e32\uff08\u5b57\u8282\u5e8f\u5217\uff09bytes \u4f5c\u7528 \u5b58\u50a8\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\u6570\u636e \u5b57\u8282\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u5b57\u8282\u5e8f\u5217","title":"\u5b57\u8282\u4e32\u548c\u5b57\u8282\u6570\u7ec4"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#_2","text":"\u5b57\u8282\u662f0~255\u4e4b\u95f4\u7684\u6574\u6570\uff0c\u5b57\u8282\u662f\u6570\u636e\u4f20\u8f93\u548c\u6570\u636e\u5b58\u50a8\u7684\u57fa\u672c\u5355\u4f4d \uff08\u4f8b\u5982\uff1a\u4e2d\u56fd\u79fb\u52a8\u7684\u6d41\u91cf...\uff0c\u6587\u4ef6\u5927\u5c0f\u7b49\uff09","title":"\u5b57\u8282"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#_3","text":"b'' b\"\" b\"\"\"\"\"\" b''''''","title":"\u521b\u5efa\u7a7a\u5b57\u8282\u4e32\u7684\u5b57\u9762\u503c"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#_4","text":"b'ABCD' b\"ABCD\" b'\\x41\\x42'","title":"\u521b\u5efa\u975e\u7a7a\u5b57\u8282\u4e32\u7684\u5b57\u9762\u503c"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#_5","text":"bytes() # \u751f\u6210\u4e00\u4e2a\u5b57\u7684\u5b57\u8282\u4e32\uff0c\u7b49\u540c\u4e8eb'' bytes(\u6574\u578b\u53ef\u8fed\u4ee3\u5bf9\u8c61) # \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u5b57\u8282\u4e32 bytes(\u6574\u6570n) # \u751f\u6210n\u4e2a\u503c\u4e3a0\u7684\u5b57\u8282\u4e32 bytes(\u5b57\u7b26\u4e32, encoding='utf-8') # \u7528\u5b57\u7b26\u4e32\u7684\u8f6c\u6362\u7f16\u7801\u751f\u6210\u4e00\u4e2a\u5b57\u8282\u4e32 # \u793a\u4f8b b = bytes () b = bytes ( range ( 65 , 91 )) b = bytes ( 10 ) b = bytes ( 'hello' , encoding = 'utf-8' ) b = bytes ( '\u4e2d\u6587' , encoding = 'utf-8' )","title":"\u5b57\u8282\u4e32\u7684\u6784\u9020\u51fd\u6570"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#_6","text":"\u4e0e\u5176\u4ed6\u5e8f\u5217\u7684\u8fd0\u7b97\u89c4\u5219\u76f8\u540c + += * *= < <= > >= == != in not in \u7d22\u5f15\u548c\u5207\u7247","title":"\u5b57\u8282\u4e32\u7684\u8fd0\u7b97"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#_7","text":"bytes \u5b58\u50a8\u5b57\u8282(0-255) str \u5b58\u50a8\u5b57\u7b26\uff08\u7528\u6765\u5b58\u50a8\u6587\u5b57\u4fe1\u606f\uff0c \u503c\u4e3a0~65535\u66f4\u5927\uff09","title":"\u5b57\u7b26\u4e32\u548c\u5b57\u8282\u4e32\u7684\u533a\u522b"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#bytes-str","text":"\u7f16\u7801\uff08encode\uff09 str -------------> bytes b = s.encode(encoding='utf-8') \u89e3\u7801\uff08decode\uff09 bytes -------------> str s = b.decode(encoding='utf-8')","title":"bytes \u4e0estr \u8f6c\u6362"},{"location":"python/%E5%AD%97%E8%8A%82%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/#bytearray","text":"\u200b \u53ef\u53d8\u7684\u5b57\u8282\u5e8f\u5217 \u6784\u9020\u51fd\u6570 bytearray() # \u751f\u6210\u4e00\u4e2a\u5b57\u7684\u5b57\u8282\u6570\u7ec4 bytearray(\u6574\u578b\u53ef\u8fed\u4ee3\u5bf9\u8c61) # \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4 bytearray(\u6574\u6570n) # \u751f\u6210n\u4e2a\u503c\u4e3a0\u7684\u5b57\u8282\u6570\u7ec4 bytearray(\u5b57\u7b26\u4e32, encoding='utf-8') # \u7528\u5b57\u7b26\u4e32\u7684\u8f6c\u6362\u7f16\u7801\u751f\u6210\u4e00\u4e2a\u5b57\u8282\u6570\u7ec4 \u5b57\u8282\u6570\u7ec4\u652f\u6301\u7d22\u5f15\u548c\u5207\u7247\u8d4b\u503c\uff08\u91cd\u8981\uff09","title":"\u5b57\u8282\u6570\u7ec4 bytearray"},{"location":"python/%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BDPython%20for%20ubuntu/","text":"1\u3001\u5378\u8f7dpython2.7 sudo apt-get remove python2.7 2\u3001\u5378\u8f7dpython2.7\u53ca\u5176\u4f9d\u8d56 sudo apt-get remove --auto-remove python2.7 3\u3001\u6e05\u9664python2.7 sudo apt-get purge python2.7 or sudo apt-get purge --auto-remove python2.7 \u6ce8\u91ca\uff1a \u6b64\u65b9\u6cd5\u5378\u8f7dpython\u6bd4\u8f83\u5f7b\u5e95\uff0c\u6240\u4ee5\u9002\u5408\u66f4\u6362python\u7248\u672c\u65f6\u4f7f\u7528\u3002 \u2014\u2014\u5bf9\u4e8e\u65e2\u60f3\u5b8c\u5168\u5378\u8f7dpython\uff0c\u53c8\u65e0\u6cd5\u63a5\u53d7\u5b8c\u5168\u5378\u8f7d\u540e\u67d0\u4e9bpython\u7ec4\u4ef6\u65e0\u6cd5\u4f7f\u7528\u7684\u7ae5\u978b\uff0c\u8bf7\u614e\u91cd\uff01\uff01","title":"\u5b8c\u5168\u5378\u8f7dPython for ubuntu"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/","text":"import os os.path.abspath(path) \u00b6 python.org/zh-cn/3/library/os.path.html#os.path.abspath\" title=\"\u6c38\u4e45\u94fe\u63a5\u81f3\u76ee\u6807\"#### Return a normalized absolutized version of the pathname path. \u8fd4\u56de\u8def\u5f84\u540d\u5bf9\u5e94\u7684\u7edd\u5bf9\u8def\u5f84 os.path.basename(path) \u00b6 \u53d6\u5230\u6587\u4ef6\u540d os.path.commonpath(paths) \u00b6 \u8fd4\u56de\u5e8f\u5217\u8def\u5f84\u4e2d\u6bcf\u4e2a\u8def\u5f84\u540d\u7684\u6700\u957f\u516c\u5171\u5b50\u8def\u5f84\u3002\u5982\u679c\u8def\u5f84\u540c\u65f6\u5305\u542b\u7edd\u5bf9\u8def\u5f84\u540d\u548c\u76f8\u5bf9\u8def\u5f84\u540d\uff0c\u6216\u8005\u8def\u5f84\u4e3a\u7a7a\uff0c\u5219\u5f15\u53d1ValueError\u3002\u4e0ecommonPrefix\uff08\uff09\u4e0d\u540c\uff0c\u5b83\u8fd4\u56de\u6709\u6548\u8def\u5f84\u3002 os.path.commonprefix(list) \u00b6 \u8fd4\u56de\u6700\u957f\u8def\u5f84\u524d\u7f00\uff08\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d\uff09\uff0c\u5b83\u662f\u5217\u8868\u4e2d\u6240\u6709\u8def\u5f84\u7684\u524d\u7f00\u3002\u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff08\u201c\u201d\uff09\u3002 os.path.dirname(path) \u00b6 \u8fd4\u56de\u8def\u5f84\u540d\u8def\u5f84\u7684\u76ee\u5f55\u540d\u3002 os.path.exists(path) \u00b6 \u5982\u679c\u8def\u5f84\u5f15\u7528\u73b0\u6709\u8def\u5f84\u6216\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5219\u8fd4\u56detrue\u3002 os.path.lexists(path) \u00b6 \u5982\u679c\u8def\u5f84\u5f15\u7528\u73b0\u6709\u8def\u5f84\uff0c\u5219\u8fd4\u56detrue\u3002\u5bf9\u4e8e\u65ad\u5f00\u7684\u7b26\u53f7\u94fe\u63a5\u8fd4\u56detrue\u3002 os.path.expanduser(path) \u00b6 \u5728UNIX\u548cWindows\u4e0a\uff0c\u8fd4\u56de\u53c2\u6570\uff0c\u5176\u521d\u59cb\u7ec4\u4ef6\u4e3a \u6216 user\uff0c\u66ff\u6362\u4e3a\u8be5\u7528\u6237\u7684\u4e3b\u76ee\u5f55\u3002 \u5728Unix\u4e0a\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cfhome\uff0c\u5219\u7528\u5b83\u66ff\u6362\u521d\u59cb \uff1b\u5426\u5219\uff0c\u5c06\u901a\u8fc7\u5185\u7f6e\u6a21\u5757pwd\u5728\u5bc6\u7801\u76ee\u5f55\u4e2d\u67e5\u627e\u5f53\u524d\u7528\u6237\u7684home\u76ee\u5f55\u3002\u76f4\u63a5\u5728\u5bc6\u7801\u76ee\u5f55\u4e2d\u67e5\u627e\u521d\u59cb user\u3002 \u5728Windows\u4e0a\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u4e3b\u914d\u7f6e\u6587\u4ef6\u548c\u7528\u6237\u914d\u7f6e\u6587\u4ef6\uff0c\u5219\u5c06\u4f7f\u7528homepath\u548chomedrive\u7684\u7ec4\u5408\u3002\u901a\u8fc7\u4ece\u4e0a\u9762\u6d3e\u751f\u7684\u5df2\u521b\u5efa\u7528\u6237\u8def\u5f84\u4e2d\u5265\u79bb\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u7ec4\u4ef6\u6765\u5904\u7406\u521d\u59cb~user\u3002 os.path.expandvars(path) \u00b6 \u8fd4\u56de\u6269\u5c55\u4e86\u73af\u5883\u53d8\u91cf\u7684\u53c2\u6570\u3002 name\u6216 name\u6216 name\u5f62\u5f0f\u7684\u5b50\u5b57\u7b26\u4e32\u5c06\u66ff\u6362\u4e3a\u73af\u5883\u53d8\u91cfname\u7684\u503c\u3002\u683c\u5f0f\u9519\u8bef\u7684\u53d8\u91cf\u540d\u548c\u5bf9\u4e0d\u5b58\u5728\u53d8\u91cf\u7684\u5f15\u7528\u4fdd\u6301\u4e0d\u53d8\u3002 \u5728Windows\u4e0a\uff0c\u9664\u4e86 name\u548c name\u548c name\u4e4b\u5916\uff0c\u8fd8\u652f\u6301%name%\u6269\u5c55\u3002 \u793a\u4f8b print(os.path.expandvars('$path')) os.path.getatime(path) \u00b6 \u8fd4\u56de\u4e0a\u6b21\u8bbf\u95ee\u67d0\u4e2a\u8def\u5f84\u7684\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u7ed9\u51fa\u4e86\u81eaepoch\u4ee5\u6765\u7684\u79d2\u6570\uff08\u8bf7\u53c2\u89c1\u65f6\u95f4\u6a21\u5757\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5219\u5f15\u53d1OSError\u3002 os.path.getmtime(path) \u00b6 Return the time of last modification of path. The return value is a floating point number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible. \u8fd4\u56de\u4e0a\u6b21\u4fee\u6539\u8def\u5f84\u7684\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u7ed9\u51fa\u4e86\u81eaepoch\u4ee5\u6765\u7684\u79d2\u6570\uff08\u8bf7\u53c2\u89c1\u65f6\u95f4\u6a21\u5757\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5219\u5f15\u53d1OSError\u3002 os.path.getctime(path) \u00b6 Return the system's ctime which, on some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time for path. The return value is a number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible. \u8fd4\u56de\u7cfb\u7edf\u7684ctime\uff0c\u5728\u67d0\u4e9b\u7cfb\u7edf\uff08\u5982unix\uff09\u4e0a\uff0c\u5b83\u662f\u6700\u540e\u4e00\u6b21\u5143\u6570\u636e\u66f4\u6539\u7684\u65f6\u95f4\uff0c\u800c\u5728\u5176\u4ed6\u7cfb\u7edf\uff08\u5982windows\uff09\u4e0a\uff0c\u5b83\u662f\u8def\u5f84\u7684\u521b\u5efa\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7ed9\u51fa\u4e86\u4eceepoch\u5f00\u59cb\u7684\u79d2\u6570\uff08\u8bf7\u53c2\u89c1\u65f6\u95f4\u6a21\u5757\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5219\u5f15\u53d1OSError\u3002 os.path.getsize(path) \u00b6 Return the size, in bytes, of path. Raise OSError if the file does not exist or is inaccessible. \u8fd4\u56de\u8def\u5f84\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5219\u5f15\u53d1OSError\u3002 os.path.isabs(path) \u00b6 Return True if path is an absolute pathname. On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter. \u5982\u679c\u8def\u5f84\u662f\u7edd\u5bf9\u8def\u5f84\u540d\uff0c\u5219\u8fd4\u56detrue\u3002\u5728UNIX\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4ee5\u659c\u7ebf\u5f00\u5934\uff0c\u5728Windows\u4e0a\uff0c\u5b83\u5728\u5207\u6389\u4e00\u4e2a\u53ef\u80fd\u7684\u9a71\u52a8\u5668\u53f7\u540e\u4ee5\uff08\u53cd\uff09\u659c\u7ebf\u5f00\u5934\u3002 os.path.isfile(path) \u00b6 Return True if path is an existing regular file. This follows symbolic links, so both islink() and isfile()can be true for the same path. \u5982\u679c\u8def\u5f84\u662f\u73b0\u6709\u7684\u5e38\u89c4\u6587\u4ef6\uff0c\u5219\u8fd4\u56detrue\u3002\u8fd9\u9075\u5faa\u7b26\u53f7\u94fe\u63a5\uff0c\u56e0\u6b64islink\uff08\uff09\u548cisfile\uff08\uff09\u5bf9\u4e8e\u540c\u4e00\u8def\u5f84\u90fd\u53ef\u4ee5\u4e3a\u771f\u3002 os.path.isdir(path) \u00b6 Return True if path is an existing directory. This follows symbolic links, so both islink() and isdir() can be true for the same path. \u5982\u679c\u8def\u5f84\u662f\u73b0\u6709\u76ee\u5f55\uff0c\u5219\u8fd4\u56detrue\u3002\u8fd9\u9075\u5faa\u7b26\u53f7\u94fe\u63a5\uff0c\u56e0\u6b64islink\uff08\uff09\u548cisdir\uff08\uff09\u5bf9\u4e8e\u540c\u4e00\u8def\u5f84\u90fd\u53ef\u4ee5\u4e3a\u771f\u3002 os.path.islink(path) \u00b6 Return True if path refers to an existing directory entry that is a symbolic link. Always False if symbolic links are not supported by the Python runtime. \u5982\u679c\u8def\u5f84\u5f15\u7528\u7684\u662f\u7b26\u53f7\u94fe\u63a5\u7684\u73b0\u6709\u76ee\u5f55\u9879\uff0c\u5219\u8fd4\u56detrue\u3002\u5982\u679cPython\u8fd0\u884c\u65f6\u4e0d\u652f\u6301\u7b26\u53f7\u94fe\u63a5\uff0c\u5219\u59cb\u7ec8\u4e3afalse\u3002 os.path.ismount(path) \u00b6 Return True if pathname path is a mount point: a point in a file system where a different file system has been mounted. On POSIX, the function checks whether path's parent, path/.., is on a different device than path, or whether path/.. and path point to the same i-node on the same device --- this should detect mount points for all Unix and POSIX variants. It is not able to reliably detect bind mounts on the same filesystem. On Windows, a drive letter root and a share UNC are always mount points, and for any other path GetVolumePathName is called to see if it is different from the input path. \u5982\u679c\u8def\u5f84\u540d\u8def\u5f84\u662f\u88c5\u5165\u70b9\uff0c\u5219\u8fd4\u56detrue\uff1a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5df2\u88c5\u5165\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u7684\u70b9\u3002\u5728posix\u4e0a\uff0c\u51fd\u6570\u68c0\u67e5path\u7684\u7236\u7ea7path/\uff0c\u4e0epath\u662f\u5426\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\uff0c\u6216\u8005path/\u3002\u8def\u5f84\u6307\u5411\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u540c\u4e00\u4e2ai\u8282\u70b9\u2014\u2014\u8fd9\u5e94\u8be5\u53ef\u4ee5\u68c0\u6d4b\u5230\u6240\u6709unix\u548cposix\u53d8\u4f53\u7684\u6302\u8f7d\u70b9\u3002\u5b83\u4e0d\u80fd\u53ef\u9760\u5730\u68c0\u6d4b\u540c\u4e00\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u7ed1\u5b9a\u88c5\u8f7d\u3002\u5728Windows\u4e0a\uff0c\u9a71\u52a8\u5668\u53f7\u6839\u76ee\u5f55\u548c\u5171\u4eabUNC\u59cb\u7ec8\u662f\u88c5\u5165\u70b9\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5176\u4ed6\u8def\u5f84\uff0c\u8c03\u7528getvolumepathname\u67e5\u770b\u5b83\u662f\u5426\u4e0e\u8f93\u5165\u8def\u5f84\u4e0d\u540c\u3002 os.path.join(path, *paths) \u00b6 Join one or more path components intelligently. The return value is the concatenation of path and any members of *paths with exactly one directory separator (os.sep) following each non-empty part except the last, meaning that the result will only end in a separator if the last part is empty. If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component. On Windows, the drive letter is not reset when an absolute path component (e.g., r'\\foo') is encountered. If a component contains a drive letter, all previous components are thrown away and the drive letter is reset. Note that since there is a current directory for each drive, os.path.join(\"c:\", \"foo\") represents a path relative to the current directory on drive C: (c:foo), not c:\\foo. \u667a\u80fd\u5730\u8fde\u63a5\u4e00\u4e2a\u6216\u591a\u4e2a\u8def\u5f84\u7ec4\u4ef6\u3002\u8fd4\u56de\u503c\u662f\u8def\u5f84\u548c*\u8def\u5f84\u7684\u4efb\u4f55\u6210\u5458\u7684\u4e32\u8054\uff0c\u6bcf\u4e2a\u975e\u7a7a\u90e8\u5206\u540e\u9762\u53ea\u6709\u4e00\u4e2a\u76ee\u5f55\u5206\u9694\u7b26\uff08os.sep\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u9664\u5916\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u4e3a\u7a7a\uff0c\u7ed3\u679c\u5c06\u4ec5\u4ee5\u5206\u9694\u7b26\u7ed3\u5c3e\u3002\u5982\u679c\u67d0\u4e2a\u7ec4\u4ef6\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u5219\u4f1a\u4e22\u5f03\u6240\u6709\u4ee5\u524d\u7684\u7ec4\u4ef6\uff0c\u5e76\u4ece\u7edd\u5bf9\u8def\u5f84\u7ec4\u4ef6\u7ee7\u7eed\u8fde\u63a5\u3002 \u5728Windows\u4e0a\uff0c\u9047\u5230\u7edd\u5bf9\u8def\u5f84\u7ec4\u4ef6\uff08\u4f8b\u5982R'\\foo'\uff09\u65f6\uff0c\u4e0d\u4f1a\u91cd\u7f6e\u9a71\u52a8\u5668\u53f7\u3002\u5982\u679c\u67d0\u4e2a\u7ec4\u4ef6\u5305\u542b\u9a71\u52a8\u5668\u53f7\uff0c\u5219\u4f1a\u4e22\u5f03\u6240\u6709\u4ee5\u524d\u7684\u7ec4\u4ef6\u5e76\u91cd\u7f6e\u9a71\u52a8\u5668\u53f7\u3002\u6ce8\u610f\uff0c\u7531\u4e8e\u6bcf\u4e2a\u9a71\u52a8\u5668\u90fd\u6709\u4e00\u4e2a\u5f53\u524d\u76ee\u5f55\uff0cos.path.join\uff08\u201cc\uff1a\u201d\uff0c\u201cfoo\u201d\uff09\u8868\u793a\u76f8\u5bf9\u4e8e\u9a71\u52a8\u5668c:\uff08c:foo\uff09\u4e0a\u5f53\u524d\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u800c\u4e0d\u662fc:\\foo\u3002 os.path.normcase(path) \u00b6 Normalize the case of a pathname. On Windows, convert all characters in the pathname to lowercase, and also convert forward slashes to backward slashes. On other operating systems, return the path unchanged. Raise a TypeError if the type of path is not str or bytes (directly or indirectly through the os.PathLikeinterface). \u89c4\u8303\u5316\u8def\u5f84\u540d\u7684\u5927\u5c0f\u5199\u3002\u5728Windows\u4e0a\uff0c\u5c06\u8def\u5f84\u540d\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u5e76\u5c06\u6b63\u659c\u6760\u8f6c\u6362\u4e3a\u53cd\u659c\u6760\u3002\u5728\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u8fd4\u56de\u8def\u5f84\u4e0d\u53d8\u3002\u5982\u679c\u8def\u5f84\u7c7b\u578b\u4e0d\u662fstr\u6216bytes\uff08\u76f4\u63a5\u6216\u95f4\u63a5\u901a\u8fc7os.pathlikeinterface\uff09\uff0c\u5219\u5f15\u53d1\u7c7b\u578b\u9519\u8bef\u3002 os.path.normpath(path) \u00b6 Normalize a pathname by collapsing redundant separators and up-level references so that A//B, A/B/, A/./Band A/foo/../B all become A/B. This string manipulation may change the meaning of a path that contains symbolic links. On Windows, it converts forward slashes to backward slashes. To normalize case, use normcase(). \u901a\u8fc7\u6298\u53e0\u5197\u4f59\u5206\u9694\u7b26\u548c\u4e0a\u4e00\u7ea7\u5f15\u7528\u6765\u89c4\u8303\u5316\u8def\u5f84\u540d\uff0c\u4f7fa//b\u3001a/b/\u3001a//b and a/foo/\u3002/b\u90fd\u6210\u4e3aa/b\u3002\u6b64\u5b57\u7b26\u4e32\u64cd\u4f5c\u53ef\u80fd\u4f1a\u66f4\u6539\u5305\u542b\u7b26\u53f7\u94fe\u63a5\u7684\u8def\u5f84\u7684\u542b\u4e49\u3002\u5728Windows\u4e0a\uff0c\u5b83\u5c06\u524d\u659c\u6760\u8f6c\u6362\u4e3a\u540e\u659c\u6760\u3002\u8981\u89c4\u8303\u5316\u5927\u5c0f\u5199\uff0c\u8bf7\u4f7f\u7528normcase\uff08\uff09\u3002 os.path.realpath(path) \u00b6 Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path (if they are supported by the operating system). \u8fd4\u56de\u6307\u5b9a\u6587\u4ef6\u540d\u7684\u89c4\u8303\u8def\u5f84\uff0c\u6d88\u9664\u8def\u5f84\u4e2d\u9047\u5230\u7684\u4efb\u4f55\u7b26\u53f7\u94fe\u63a5\uff08\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\uff09\u3002 os.path.relpath(path, start=os.curdir) \u00b6 Return a relative filepath to path either from the current directory or from an optional start directory. This is a path computation: the filesystem is not accessed to confirm the existence or nature of path or start. \u4ece\u5f53\u524d\u76ee\u5f55\u6216\u53ef\u9009\u7684\u5f00\u59cb\u76ee\u5f55\u8fd4\u56de\u8def\u5f84\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\u3002\u8fd9\u662f\u4e00\u4e2a\u8def\u5f84\u8ba1\u7b97\uff1a\u4e0d\u80fd\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u6765\u786e\u8ba4\u8def\u5f84\u6216\u5f00\u59cb\u7684\u5b58\u5728\u6216\u6027\u8d28\u3002 os.path.samefile(path1, path2) \u00b6 Return True if both pathname arguments refer to the same file or directory. This is determined by the device number and i-node number and raises an exception if an os.stat() call on either pathname fails. \u5982\u679c\u4e24\u4e2a\u8def\u5f84\u6307\u5411\u76f8\u540c\u7684\u6587\u4ef6\u6216\u76ee\u5f55\uff0c\u5219\u8fd4\u56deTrue os.path.sameopenfile(fp1, fp2) \u00b6 Return True if the file descriptors fp1 and fp2 refer to the same file. \u5982\u679c\u6587\u4ef6\u63cf\u8ff0\u7b26fp1\u548cfp2\u5f15\u7528\u540c\u4e00\u6587\u4ef6\uff0c\u5219\u8fd4\u56detrue\u3002 os.path.samestat(stat1, stat2) \u00b6 Return True if the stat tuples stat1 and stat2 refer to the same file. These structures may have been returned by os.fstat(), os.lstat(), or os.stat(). This function implements the underlying comparison used by samefile() and sameopenfile(). os.path.split(path) \u00b6 Split the pathname path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. Trailing slashes are stripped from head unless it is the root (one or more slashes only). In all cases, join(head, tail)returns a path to the same location as path (but the strings may differ). Also see the functions dirname() andbasename(). \u5c06\u8def\u5f84\u540d\u8def\u5f84\u62c6\u5206\u4e3a\u4e00\u5bf9\uff08head\uff0ctail\uff09\uff0c\u5176\u4e2dtail\u662f\u6700\u540e\u4e00\u4e2a\u8def\u5f84\u540d\u7ec4\u4ef6\uff0chead\u662f\u6307\u5411\u8be5\u7ec4\u4ef6\u7684\u6240\u6709\u5185\u5bb9\u3002\u5c3e\u90e8\u90e8\u5206\u6c38\u8fdc\u4e0d\u4f1a\u5305\u542b\u659c\u7ebf\uff1b\u5982\u679c\u8def\u5f84\u4ee5\u659c\u7ebf\u7ed3\u5c3e\uff0c\u5219\u5c3e\u90e8\u5c06\u4e3a\u7a7a\u3002\u5982\u679c\u8def\u5f84\u4e2d\u6ca1\u6709\u659c\u7ebf\uff0c\u5219\u5934\u90e8\u5c06\u4e3a\u7a7a\u3002\u5982\u679c\u8def\u5f84\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5934\u90e8\u548c\u5c3e\u90e8\u90fd\u662f\u7a7a\u7684\u3002\u5c3e\u968f\u659c\u7ebf\u4ece\u5934\u90e8\u5265\u79bb\uff0c\u9664\u975e\u5b83\u662f\u6839\uff08\u4ec5\u4e00\u4e2a\u6216\u591a\u4e2a\u659c\u7ebf\uff09\u3002\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0cjoin\uff08head\uff0ctail\uff09\u90fd\u5c06\u8def\u5f84\u8fd4\u56de\u5230\u4e0epath\u76f8\u540c\u7684\u4f4d\u7f6e\uff08\u4f46\u5b57\u7b26\u4e32\u53ef\u80fd\u4e0d\u540c\uff09\u3002\u53e6\u8bf7\u53c2\u89c1\u51fd\u6570dirname\uff08\uff09\u548cbasename\uff08\uff09\u3002 os.path.splitdrive(path) \u00b6 Split the pathname path into a pair (drive, tail) where drive is either a mount point or the empty string. On systems which do not use drive specifications, drive will always be the empty string. In all cases, drive +tail will be the same as path. On Windows, splits a pathname into drive/UNC sharepoint and relative path. If the path contains a drive letter, drive will contain everything up to and including the colon. e.g. splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\") If the path contains a UNC path, drive will contain the host name and share, up to but not including the fourth separator. e.g. splitdrive(\"//host/computer/dir\") returns (\"//host/computer\", \"/dir\") \u5c06\u8def\u5f84\u540d\u8def\u5f84\u62c6\u5206\u4e3a\u4e00\u5bf9\uff08drive\uff0ctail\uff09\uff0c\u5176\u4e2ddrive\u662f\u88c5\u5165\u70b9\u6216\u7a7a\u5b57\u7b26\u4e32\u3002\u5728\u4e0d\u4f7f\u7528\u9a71\u52a8\u5668\u89c4\u683c\u7684\u7cfb\u7edf\u4e0a\uff0c\u9a71\u52a8\u5668\u59cb\u7ec8\u662f\u7a7a\u5b57\u7b26\u4e32\u3002\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u9a71\u52a8+\u5c3e\u90e8\u5c06\u4e0e\u8def\u5f84\u76f8\u540c\u3002 \u5728Windows\u4e0a\uff0c\u5c06\u8def\u5f84\u540d\u62c6\u5206\u4e3a\u9a71\u52a8\u5668/UNC SharePoint\u548c\u76f8\u5bf9\u8def\u5f84\u3002 \u5982\u679c\u8def\u5f84\u5305\u542b\u9a71\u52a8\u5668\u53f7\uff0c\u5219\u9a71\u52a8\u5668\u5c06\u5305\u542b\u5192\u53f7\u4e4b\u524d\uff08\u5305\u62ec\u5192\u53f7\uff09\u7684\u6240\u6709\u5185\u5bb9\u3002\u4f8b\u5982splitdrive\uff08\u201cc:/dir\u201d\uff09\u8fd4\u56de\uff08\u201cc\uff1a\u201d\uff0c/dir\u201d\uff09 \u5982\u679c\u8def\u5f84\u5305\u542bUNC\u8def\u5f84\uff0c\u9a71\u52a8\u5668\u5c06\u5305\u542b\u4e3b\u673a\u540d\u548c\u5171\u4eab\uff0c\u6700\u591a\u4e0d\u5305\u62ec\u7b2c\u56db\u4e2a\u5206\u9694\u7b26\u3002\u4f8b\u5982splitdrive\uff08\u201c//host/computer/dir\u201d\uff09\u8fd4\u56de\uff08\u201c//host/computer\u201d\uff0c\u201c/dir\u201d\uff09\u3002 os.path.splitext(path) \u00b6 Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored; splitext('.cshrc') returns ('.cshrc', ''). \u5c06\u8def\u5f84\u540d\u8def\u5f84\u62c6\u5206\u4e3a\u4e00\u5bf9\uff08root\uff0cext\uff09\uff0c\u8fd9\u6837root+ext==path\uff0cext\u4e3a\u7a7a\u6216\u4ee5\u53e5\u70b9\u5f00\u5934\uff0c\u6700\u591a\u5305\u542b\u4e00\u4e2a\u53e5\u70b9\u3002\u5ffd\u7565basename\u4e0a\u7684\u524d\u5bfc\u53e5\u70b9\uff1bsplitext\uff08\u201c.cshrc\u201d\uff09\u8fd4\u56de\uff08\u201c.cshrc\u201d\uff0c\u201c\u201d\u3002 os.path.supports_unicode_filenames \u00b6 True if arbitrary Unicode strings can be used as file names (within limitations imposed by the file system). True\u5982\u679c\u4efb\u610fUnicode\u5b57\u7b26\u4e32can be used as names\uff08\u6587\u4ef6\u5728\u6587\u4ef6\u7cfb\u7edf\u7684\u5c40\u9650\u6027imposed by the\uff09\u3002","title":"os.path"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathabspathpath","text":"python.org/zh-cn/3/library/os.path.html#os.path.abspath\" title=\"\u6c38\u4e45\u94fe\u63a5\u81f3\u76ee\u6807\"#### Return a normalized absolutized version of the pathname path. \u8fd4\u56de\u8def\u5f84\u540d\u5bf9\u5e94\u7684\u7edd\u5bf9\u8def\u5f84","title":"os.path.abspath(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathbasenamepath","text":"\u53d6\u5230\u6587\u4ef6\u540d","title":"os.path.basename(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathcommonpathpaths","text":"\u8fd4\u56de\u5e8f\u5217\u8def\u5f84\u4e2d\u6bcf\u4e2a\u8def\u5f84\u540d\u7684\u6700\u957f\u516c\u5171\u5b50\u8def\u5f84\u3002\u5982\u679c\u8def\u5f84\u540c\u65f6\u5305\u542b\u7edd\u5bf9\u8def\u5f84\u540d\u548c\u76f8\u5bf9\u8def\u5f84\u540d\uff0c\u6216\u8005\u8def\u5f84\u4e3a\u7a7a\uff0c\u5219\u5f15\u53d1ValueError\u3002\u4e0ecommonPrefix\uff08\uff09\u4e0d\u540c\uff0c\u5b83\u8fd4\u56de\u6709\u6548\u8def\u5f84\u3002","title":"os.path.commonpath(paths)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathcommonprefixlist","text":"\u8fd4\u56de\u6700\u957f\u8def\u5f84\u524d\u7f00\uff08\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d\uff09\uff0c\u5b83\u662f\u5217\u8868\u4e2d\u6240\u6709\u8def\u5f84\u7684\u524d\u7f00\u3002\u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff08\u201c\u201d\uff09\u3002","title":"os.path.commonprefix(list)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathdirnamepath","text":"\u8fd4\u56de\u8def\u5f84\u540d\u8def\u5f84\u7684\u76ee\u5f55\u540d\u3002","title":"os.path.dirname(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathexistspath","text":"\u5982\u679c\u8def\u5f84\u5f15\u7528\u73b0\u6709\u8def\u5f84\u6216\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u5219\u8fd4\u56detrue\u3002","title":"os.path.exists(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathlexistspath","text":"\u5982\u679c\u8def\u5f84\u5f15\u7528\u73b0\u6709\u8def\u5f84\uff0c\u5219\u8fd4\u56detrue\u3002\u5bf9\u4e8e\u65ad\u5f00\u7684\u7b26\u53f7\u94fe\u63a5\u8fd4\u56detrue\u3002","title":"os.path.lexists(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathexpanduserpath","text":"\u5728UNIX\u548cWindows\u4e0a\uff0c\u8fd4\u56de\u53c2\u6570\uff0c\u5176\u521d\u59cb\u7ec4\u4ef6\u4e3a \u6216 user\uff0c\u66ff\u6362\u4e3a\u8be5\u7528\u6237\u7684\u4e3b\u76ee\u5f55\u3002 \u5728Unix\u4e0a\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cfhome\uff0c\u5219\u7528\u5b83\u66ff\u6362\u521d\u59cb \uff1b\u5426\u5219\uff0c\u5c06\u901a\u8fc7\u5185\u7f6e\u6a21\u5757pwd\u5728\u5bc6\u7801\u76ee\u5f55\u4e2d\u67e5\u627e\u5f53\u524d\u7528\u6237\u7684home\u76ee\u5f55\u3002\u76f4\u63a5\u5728\u5bc6\u7801\u76ee\u5f55\u4e2d\u67e5\u627e\u521d\u59cb user\u3002 \u5728Windows\u4e0a\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u4e3b\u914d\u7f6e\u6587\u4ef6\u548c\u7528\u6237\u914d\u7f6e\u6587\u4ef6\uff0c\u5219\u5c06\u4f7f\u7528homepath\u548chomedrive\u7684\u7ec4\u5408\u3002\u901a\u8fc7\u4ece\u4e0a\u9762\u6d3e\u751f\u7684\u5df2\u521b\u5efa\u7528\u6237\u8def\u5f84\u4e2d\u5265\u79bb\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u7ec4\u4ef6\u6765\u5904\u7406\u521d\u59cb~user\u3002","title":"os.path.expanduser(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathexpandvarspath","text":"\u8fd4\u56de\u6269\u5c55\u4e86\u73af\u5883\u53d8\u91cf\u7684\u53c2\u6570\u3002 name\u6216 name\u6216 name\u5f62\u5f0f\u7684\u5b50\u5b57\u7b26\u4e32\u5c06\u66ff\u6362\u4e3a\u73af\u5883\u53d8\u91cfname\u7684\u503c\u3002\u683c\u5f0f\u9519\u8bef\u7684\u53d8\u91cf\u540d\u548c\u5bf9\u4e0d\u5b58\u5728\u53d8\u91cf\u7684\u5f15\u7528\u4fdd\u6301\u4e0d\u53d8\u3002 \u5728Windows\u4e0a\uff0c\u9664\u4e86 name\u548c name\u548c name\u4e4b\u5916\uff0c\u8fd8\u652f\u6301%name%\u6269\u5c55\u3002 \u793a\u4f8b print(os.path.expandvars('$path'))","title":"os.path.expandvars(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathgetatimepath","text":"\u8fd4\u56de\u4e0a\u6b21\u8bbf\u95ee\u67d0\u4e2a\u8def\u5f84\u7684\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u7ed9\u51fa\u4e86\u81eaepoch\u4ee5\u6765\u7684\u79d2\u6570\uff08\u8bf7\u53c2\u89c1\u65f6\u95f4\u6a21\u5757\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5219\u5f15\u53d1OSError\u3002","title":"os.path.getatime(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathgetmtimepath","text":"Return the time of last modification of path. The return value is a floating point number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible. \u8fd4\u56de\u4e0a\u6b21\u4fee\u6539\u8def\u5f84\u7684\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u7ed9\u51fa\u4e86\u81eaepoch\u4ee5\u6765\u7684\u79d2\u6570\uff08\u8bf7\u53c2\u89c1\u65f6\u95f4\u6a21\u5757\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5219\u5f15\u53d1OSError\u3002","title":"os.path.getmtime(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathgetctimepath","text":"Return the system's ctime which, on some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time for path. The return value is a number giving the number of seconds since the epoch (see the time module). Raise OSError if the file does not exist or is inaccessible. \u8fd4\u56de\u7cfb\u7edf\u7684ctime\uff0c\u5728\u67d0\u4e9b\u7cfb\u7edf\uff08\u5982unix\uff09\u4e0a\uff0c\u5b83\u662f\u6700\u540e\u4e00\u6b21\u5143\u6570\u636e\u66f4\u6539\u7684\u65f6\u95f4\uff0c\u800c\u5728\u5176\u4ed6\u7cfb\u7edf\uff08\u5982windows\uff09\u4e0a\uff0c\u5b83\u662f\u8def\u5f84\u7684\u521b\u5efa\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7ed9\u51fa\u4e86\u4eceepoch\u5f00\u59cb\u7684\u79d2\u6570\uff08\u8bf7\u53c2\u89c1\u65f6\u95f4\u6a21\u5757\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5219\u5f15\u53d1OSError\u3002","title":"os.path.getctime(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathgetsizepath","text":"Return the size, in bytes, of path. Raise OSError if the file does not exist or is inaccessible. \u8fd4\u56de\u8def\u5f84\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u53ef\u8bbf\u95ee\uff0c\u5219\u5f15\u53d1OSError\u3002","title":"os.path.getsize(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathisabspath","text":"Return True if path is an absolute pathname. On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter. \u5982\u679c\u8def\u5f84\u662f\u7edd\u5bf9\u8def\u5f84\u540d\uff0c\u5219\u8fd4\u56detrue\u3002\u5728UNIX\u4e0a\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4ee5\u659c\u7ebf\u5f00\u5934\uff0c\u5728Windows\u4e0a\uff0c\u5b83\u5728\u5207\u6389\u4e00\u4e2a\u53ef\u80fd\u7684\u9a71\u52a8\u5668\u53f7\u540e\u4ee5\uff08\u53cd\uff09\u659c\u7ebf\u5f00\u5934\u3002","title":"os.path.isabs(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathisfilepath","text":"Return True if path is an existing regular file. This follows symbolic links, so both islink() and isfile()can be true for the same path. \u5982\u679c\u8def\u5f84\u662f\u73b0\u6709\u7684\u5e38\u89c4\u6587\u4ef6\uff0c\u5219\u8fd4\u56detrue\u3002\u8fd9\u9075\u5faa\u7b26\u53f7\u94fe\u63a5\uff0c\u56e0\u6b64islink\uff08\uff09\u548cisfile\uff08\uff09\u5bf9\u4e8e\u540c\u4e00\u8def\u5f84\u90fd\u53ef\u4ee5\u4e3a\u771f\u3002","title":"os.path.isfile(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathisdirpath","text":"Return True if path is an existing directory. This follows symbolic links, so both islink() and isdir() can be true for the same path. \u5982\u679c\u8def\u5f84\u662f\u73b0\u6709\u76ee\u5f55\uff0c\u5219\u8fd4\u56detrue\u3002\u8fd9\u9075\u5faa\u7b26\u53f7\u94fe\u63a5\uff0c\u56e0\u6b64islink\uff08\uff09\u548cisdir\uff08\uff09\u5bf9\u4e8e\u540c\u4e00\u8def\u5f84\u90fd\u53ef\u4ee5\u4e3a\u771f\u3002","title":"os.path.isdir(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathislinkpath","text":"Return True if path refers to an existing directory entry that is a symbolic link. Always False if symbolic links are not supported by the Python runtime. \u5982\u679c\u8def\u5f84\u5f15\u7528\u7684\u662f\u7b26\u53f7\u94fe\u63a5\u7684\u73b0\u6709\u76ee\u5f55\u9879\uff0c\u5219\u8fd4\u56detrue\u3002\u5982\u679cPython\u8fd0\u884c\u65f6\u4e0d\u652f\u6301\u7b26\u53f7\u94fe\u63a5\uff0c\u5219\u59cb\u7ec8\u4e3afalse\u3002","title":"os.path.islink(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathismountpath","text":"Return True if pathname path is a mount point: a point in a file system where a different file system has been mounted. On POSIX, the function checks whether path's parent, path/.., is on a different device than path, or whether path/.. and path point to the same i-node on the same device --- this should detect mount points for all Unix and POSIX variants. It is not able to reliably detect bind mounts on the same filesystem. On Windows, a drive letter root and a share UNC are always mount points, and for any other path GetVolumePathName is called to see if it is different from the input path. \u5982\u679c\u8def\u5f84\u540d\u8def\u5f84\u662f\u88c5\u5165\u70b9\uff0c\u5219\u8fd4\u56detrue\uff1a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5df2\u88c5\u5165\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u7684\u70b9\u3002\u5728posix\u4e0a\uff0c\u51fd\u6570\u68c0\u67e5path\u7684\u7236\u7ea7path/\uff0c\u4e0epath\u662f\u5426\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\uff0c\u6216\u8005path/\u3002\u8def\u5f84\u6307\u5411\u540c\u4e00\u8bbe\u5907\u4e0a\u7684\u540c\u4e00\u4e2ai\u8282\u70b9\u2014\u2014\u8fd9\u5e94\u8be5\u53ef\u4ee5\u68c0\u6d4b\u5230\u6240\u6709unix\u548cposix\u53d8\u4f53\u7684\u6302\u8f7d\u70b9\u3002\u5b83\u4e0d\u80fd\u53ef\u9760\u5730\u68c0\u6d4b\u540c\u4e00\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u7ed1\u5b9a\u88c5\u8f7d\u3002\u5728Windows\u4e0a\uff0c\u9a71\u52a8\u5668\u53f7\u6839\u76ee\u5f55\u548c\u5171\u4eabUNC\u59cb\u7ec8\u662f\u88c5\u5165\u70b9\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5176\u4ed6\u8def\u5f84\uff0c\u8c03\u7528getvolumepathname\u67e5\u770b\u5b83\u662f\u5426\u4e0e\u8f93\u5165\u8def\u5f84\u4e0d\u540c\u3002","title":"os.path.ismount(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathjoinpath-paths","text":"Join one or more path components intelligently. The return value is the concatenation of path and any members of *paths with exactly one directory separator (os.sep) following each non-empty part except the last, meaning that the result will only end in a separator if the last part is empty. If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component. On Windows, the drive letter is not reset when an absolute path component (e.g., r'\\foo') is encountered. If a component contains a drive letter, all previous components are thrown away and the drive letter is reset. Note that since there is a current directory for each drive, os.path.join(\"c:\", \"foo\") represents a path relative to the current directory on drive C: (c:foo), not c:\\foo. \u667a\u80fd\u5730\u8fde\u63a5\u4e00\u4e2a\u6216\u591a\u4e2a\u8def\u5f84\u7ec4\u4ef6\u3002\u8fd4\u56de\u503c\u662f\u8def\u5f84\u548c*\u8def\u5f84\u7684\u4efb\u4f55\u6210\u5458\u7684\u4e32\u8054\uff0c\u6bcf\u4e2a\u975e\u7a7a\u90e8\u5206\u540e\u9762\u53ea\u6709\u4e00\u4e2a\u76ee\u5f55\u5206\u9694\u7b26\uff08os.sep\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u9664\u5916\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u4e3a\u7a7a\uff0c\u7ed3\u679c\u5c06\u4ec5\u4ee5\u5206\u9694\u7b26\u7ed3\u5c3e\u3002\u5982\u679c\u67d0\u4e2a\u7ec4\u4ef6\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u5219\u4f1a\u4e22\u5f03\u6240\u6709\u4ee5\u524d\u7684\u7ec4\u4ef6\uff0c\u5e76\u4ece\u7edd\u5bf9\u8def\u5f84\u7ec4\u4ef6\u7ee7\u7eed\u8fde\u63a5\u3002 \u5728Windows\u4e0a\uff0c\u9047\u5230\u7edd\u5bf9\u8def\u5f84\u7ec4\u4ef6\uff08\u4f8b\u5982R'\\foo'\uff09\u65f6\uff0c\u4e0d\u4f1a\u91cd\u7f6e\u9a71\u52a8\u5668\u53f7\u3002\u5982\u679c\u67d0\u4e2a\u7ec4\u4ef6\u5305\u542b\u9a71\u52a8\u5668\u53f7\uff0c\u5219\u4f1a\u4e22\u5f03\u6240\u6709\u4ee5\u524d\u7684\u7ec4\u4ef6\u5e76\u91cd\u7f6e\u9a71\u52a8\u5668\u53f7\u3002\u6ce8\u610f\uff0c\u7531\u4e8e\u6bcf\u4e2a\u9a71\u52a8\u5668\u90fd\u6709\u4e00\u4e2a\u5f53\u524d\u76ee\u5f55\uff0cos.path.join\uff08\u201cc\uff1a\u201d\uff0c\u201cfoo\u201d\uff09\u8868\u793a\u76f8\u5bf9\u4e8e\u9a71\u52a8\u5668c:\uff08c:foo\uff09\u4e0a\u5f53\u524d\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u800c\u4e0d\u662fc:\\foo\u3002","title":"os.path.join(path, *paths)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathnormcasepath","text":"Normalize the case of a pathname. On Windows, convert all characters in the pathname to lowercase, and also convert forward slashes to backward slashes. On other operating systems, return the path unchanged. Raise a TypeError if the type of path is not str or bytes (directly or indirectly through the os.PathLikeinterface). \u89c4\u8303\u5316\u8def\u5f84\u540d\u7684\u5927\u5c0f\u5199\u3002\u5728Windows\u4e0a\uff0c\u5c06\u8def\u5f84\u540d\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u5e76\u5c06\u6b63\u659c\u6760\u8f6c\u6362\u4e3a\u53cd\u659c\u6760\u3002\u5728\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u8fd4\u56de\u8def\u5f84\u4e0d\u53d8\u3002\u5982\u679c\u8def\u5f84\u7c7b\u578b\u4e0d\u662fstr\u6216bytes\uff08\u76f4\u63a5\u6216\u95f4\u63a5\u901a\u8fc7os.pathlikeinterface\uff09\uff0c\u5219\u5f15\u53d1\u7c7b\u578b\u9519\u8bef\u3002","title":"os.path.normcase(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathnormpathpath","text":"Normalize a pathname by collapsing redundant separators and up-level references so that A//B, A/B/, A/./Band A/foo/../B all become A/B. This string manipulation may change the meaning of a path that contains symbolic links. On Windows, it converts forward slashes to backward slashes. To normalize case, use normcase(). \u901a\u8fc7\u6298\u53e0\u5197\u4f59\u5206\u9694\u7b26\u548c\u4e0a\u4e00\u7ea7\u5f15\u7528\u6765\u89c4\u8303\u5316\u8def\u5f84\u540d\uff0c\u4f7fa//b\u3001a/b/\u3001a//b and a/foo/\u3002/b\u90fd\u6210\u4e3aa/b\u3002\u6b64\u5b57\u7b26\u4e32\u64cd\u4f5c\u53ef\u80fd\u4f1a\u66f4\u6539\u5305\u542b\u7b26\u53f7\u94fe\u63a5\u7684\u8def\u5f84\u7684\u542b\u4e49\u3002\u5728Windows\u4e0a\uff0c\u5b83\u5c06\u524d\u659c\u6760\u8f6c\u6362\u4e3a\u540e\u659c\u6760\u3002\u8981\u89c4\u8303\u5316\u5927\u5c0f\u5199\uff0c\u8bf7\u4f7f\u7528normcase\uff08\uff09\u3002","title":"os.path.normpath(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathrealpathpath","text":"Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path (if they are supported by the operating system). \u8fd4\u56de\u6307\u5b9a\u6587\u4ef6\u540d\u7684\u89c4\u8303\u8def\u5f84\uff0c\u6d88\u9664\u8def\u5f84\u4e2d\u9047\u5230\u7684\u4efb\u4f55\u7b26\u53f7\u94fe\u63a5\uff08\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u652f\u6301\uff09\u3002","title":"os.path.realpath(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathrelpathpath-startoscurdir","text":"Return a relative filepath to path either from the current directory or from an optional start directory. This is a path computation: the filesystem is not accessed to confirm the existence or nature of path or start. \u4ece\u5f53\u524d\u76ee\u5f55\u6216\u53ef\u9009\u7684\u5f00\u59cb\u76ee\u5f55\u8fd4\u56de\u8def\u5f84\u7684\u76f8\u5bf9\u6587\u4ef6\u8def\u5f84\u3002\u8fd9\u662f\u4e00\u4e2a\u8def\u5f84\u8ba1\u7b97\uff1a\u4e0d\u80fd\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u6765\u786e\u8ba4\u8def\u5f84\u6216\u5f00\u59cb\u7684\u5b58\u5728\u6216\u6027\u8d28\u3002","title":"os.path.relpath(path, start=os.curdir)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathsamefilepath1-path2","text":"Return True if both pathname arguments refer to the same file or directory. This is determined by the device number and i-node number and raises an exception if an os.stat() call on either pathname fails. \u5982\u679c\u4e24\u4e2a\u8def\u5f84\u6307\u5411\u76f8\u540c\u7684\u6587\u4ef6\u6216\u76ee\u5f55\uff0c\u5219\u8fd4\u56deTrue","title":"os.path.samefile(path1, path2)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathsameopenfilefp1-fp2","text":"Return True if the file descriptors fp1 and fp2 refer to the same file. \u5982\u679c\u6587\u4ef6\u63cf\u8ff0\u7b26fp1\u548cfp2\u5f15\u7528\u540c\u4e00\u6587\u4ef6\uff0c\u5219\u8fd4\u56detrue\u3002","title":"os.path.sameopenfile(fp1, fp2)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathsamestatstat1-stat2","text":"Return True if the stat tuples stat1 and stat2 refer to the same file. These structures may have been returned by os.fstat(), os.lstat(), or os.stat(). This function implements the underlying comparison used by samefile() and sameopenfile().","title":"os.path.samestat(stat1, stat2)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathsplitpath","text":"Split the pathname path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. Trailing slashes are stripped from head unless it is the root (one or more slashes only). In all cases, join(head, tail)returns a path to the same location as path (but the strings may differ). Also see the functions dirname() andbasename(). \u5c06\u8def\u5f84\u540d\u8def\u5f84\u62c6\u5206\u4e3a\u4e00\u5bf9\uff08head\uff0ctail\uff09\uff0c\u5176\u4e2dtail\u662f\u6700\u540e\u4e00\u4e2a\u8def\u5f84\u540d\u7ec4\u4ef6\uff0chead\u662f\u6307\u5411\u8be5\u7ec4\u4ef6\u7684\u6240\u6709\u5185\u5bb9\u3002\u5c3e\u90e8\u90e8\u5206\u6c38\u8fdc\u4e0d\u4f1a\u5305\u542b\u659c\u7ebf\uff1b\u5982\u679c\u8def\u5f84\u4ee5\u659c\u7ebf\u7ed3\u5c3e\uff0c\u5219\u5c3e\u90e8\u5c06\u4e3a\u7a7a\u3002\u5982\u679c\u8def\u5f84\u4e2d\u6ca1\u6709\u659c\u7ebf\uff0c\u5219\u5934\u90e8\u5c06\u4e3a\u7a7a\u3002\u5982\u679c\u8def\u5f84\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u5934\u90e8\u548c\u5c3e\u90e8\u90fd\u662f\u7a7a\u7684\u3002\u5c3e\u968f\u659c\u7ebf\u4ece\u5934\u90e8\u5265\u79bb\uff0c\u9664\u975e\u5b83\u662f\u6839\uff08\u4ec5\u4e00\u4e2a\u6216\u591a\u4e2a\u659c\u7ebf\uff09\u3002\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0cjoin\uff08head\uff0ctail\uff09\u90fd\u5c06\u8def\u5f84\u8fd4\u56de\u5230\u4e0epath\u76f8\u540c\u7684\u4f4d\u7f6e\uff08\u4f46\u5b57\u7b26\u4e32\u53ef\u80fd\u4e0d\u540c\uff09\u3002\u53e6\u8bf7\u53c2\u89c1\u51fd\u6570dirname\uff08\uff09\u548cbasename\uff08\uff09\u3002","title":"os.path.split(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathsplitdrivepath","text":"Split the pathname path into a pair (drive, tail) where drive is either a mount point or the empty string. On systems which do not use drive specifications, drive will always be the empty string. In all cases, drive +tail will be the same as path. On Windows, splits a pathname into drive/UNC sharepoint and relative path. If the path contains a drive letter, drive will contain everything up to and including the colon. e.g. splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\") If the path contains a UNC path, drive will contain the host name and share, up to but not including the fourth separator. e.g. splitdrive(\"//host/computer/dir\") returns (\"//host/computer\", \"/dir\") \u5c06\u8def\u5f84\u540d\u8def\u5f84\u62c6\u5206\u4e3a\u4e00\u5bf9\uff08drive\uff0ctail\uff09\uff0c\u5176\u4e2ddrive\u662f\u88c5\u5165\u70b9\u6216\u7a7a\u5b57\u7b26\u4e32\u3002\u5728\u4e0d\u4f7f\u7528\u9a71\u52a8\u5668\u89c4\u683c\u7684\u7cfb\u7edf\u4e0a\uff0c\u9a71\u52a8\u5668\u59cb\u7ec8\u662f\u7a7a\u5b57\u7b26\u4e32\u3002\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u9a71\u52a8+\u5c3e\u90e8\u5c06\u4e0e\u8def\u5f84\u76f8\u540c\u3002 \u5728Windows\u4e0a\uff0c\u5c06\u8def\u5f84\u540d\u62c6\u5206\u4e3a\u9a71\u52a8\u5668/UNC SharePoint\u548c\u76f8\u5bf9\u8def\u5f84\u3002 \u5982\u679c\u8def\u5f84\u5305\u542b\u9a71\u52a8\u5668\u53f7\uff0c\u5219\u9a71\u52a8\u5668\u5c06\u5305\u542b\u5192\u53f7\u4e4b\u524d\uff08\u5305\u62ec\u5192\u53f7\uff09\u7684\u6240\u6709\u5185\u5bb9\u3002\u4f8b\u5982splitdrive\uff08\u201cc:/dir\u201d\uff09\u8fd4\u56de\uff08\u201cc\uff1a\u201d\uff0c/dir\u201d\uff09 \u5982\u679c\u8def\u5f84\u5305\u542bUNC\u8def\u5f84\uff0c\u9a71\u52a8\u5668\u5c06\u5305\u542b\u4e3b\u673a\u540d\u548c\u5171\u4eab\uff0c\u6700\u591a\u4e0d\u5305\u62ec\u7b2c\u56db\u4e2a\u5206\u9694\u7b26\u3002\u4f8b\u5982splitdrive\uff08\u201c//host/computer/dir\u201d\uff09\u8fd4\u56de\uff08\u201c//host/computer\u201d\uff0c\u201c/dir\u201d\uff09\u3002","title":"os.path.splitdrive(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathsplitextpath","text":"Split the pathname path into a pair (root, ext) such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are ignored; splitext('.cshrc') returns ('.cshrc', ''). \u5c06\u8def\u5f84\u540d\u8def\u5f84\u62c6\u5206\u4e3a\u4e00\u5bf9\uff08root\uff0cext\uff09\uff0c\u8fd9\u6837root+ext==path\uff0cext\u4e3a\u7a7a\u6216\u4ee5\u53e5\u70b9\u5f00\u5934\uff0c\u6700\u591a\u5305\u542b\u4e00\u4e2a\u53e5\u70b9\u3002\u5ffd\u7565basename\u4e0a\u7684\u524d\u5bfc\u53e5\u70b9\uff1bsplitext\uff08\u201c.cshrc\u201d\uff09\u8fd4\u56de\uff08\u201c.cshrc\u201d\uff0c\u201c\u201d\u3002","title":"os.path.splitext(path)"},{"location":"python/%E5%B8%B8%E8%A7%81%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C/#ospathsupports_unicode_filenames","text":"True if arbitrary Unicode strings can be used as file names (within limitations imposed by the file system). True\u5982\u679c\u4efb\u610fUnicode\u5b57\u7b26\u4e32can be used as names\uff08\u6587\u4ef6\u5728\u6587\u4ef6\u7cfb\u7edf\u7684\u5c40\u9650\u6027imposed by the\uff09\u3002","title":"os.path.supports_unicode_filenames"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/","text":"\u6587\u4ef6 file \u00b6 \u4ec0\u4e48\u662f\u6587\u4ef6 \u6587\u4ef6\u662f\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u7684\u5355\u4f4d \u6587\u4ef6\u901a\u5e38\u7528\u6765\u957f\u671f\u5b58\u50a8\u6570\u636e \u6587\u4ef6\u4e2d\u7684\u6570\u636e\u662f\u4ee5\u5b57\u8282(byte)\u4e3a\u5355\u4f4d\u8fdb\u884c\u5b58\u50a8\u7684 \u6587\u4ef6\u7684\u64cd\u4f5c\u6d41\u7a0b \u00b6 \u6253\u5f00\u6587\u4ef6 \u8bfb/\u5199 \u6587\u4ef6 \u5173\u95ed\u6587\u4ef6 \u6ce8\uff1a \u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edf\uff0c \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u540c\u65f6\u6253\u5f00\u6587\u4ef6\u7684\u6570\u91cf\u6709\u6700\u5927\u6570\u9650\u5236 \u6587\u4ef6\u7684\u6253\u5f00\u51fd\u6570 \u00b6 open(file, mode='rt') \u7528\u4e8e\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u8fd4\u56de\u6587\u4ef6\u6d41\u5bf9\u8c61\uff0c\u5982\u679c\u6253\u5f00\u5931\u8d25\u5219\u4f1a\u89e6\u53d1OSError\u9519\u8bef \u6587\u4ef6\u6d41\u7684\u5173\u95ed\u65b9\u6cd5 \u00b6 \u200b F.close() # \u5173\u95ed\u6587\u4ef6\uff0c\u91ca\u653e\u7cfb\u7edf\u8d44\u6e90 with open ( 'mynote.txt' , 'w' , encoding = 'utf-8' ) as f : try : f . write ( '\u4eca\u5929\u5929\u6c14\u597d\u6674\u6717' ) finally : f . close () \u6587\u672c\u6587\u4ef6\u7684\u64cd\u4f5c \u00b6 \u6587\u672c\u6587\u4ef6\u7684\u6a21\u5f0f\u5b57\u7b26 't' \u8bf4\u660e 1. \u5bf9\u6587\u672c\u6587\u4ef6\u7684\u8bfb\u5199\u9700\u8981\u7528\u5b57\u7b26\u4e32str \u8fdb\u884c\u8bfb\u53d6\u548c\u5199\u5165\u6570\u636e 2. \u9ed8\u8ba4\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u90fd\u662f\u5b57\u7b26\uff08\u6587\u5b57\uff09\u6570\u636e\uff0c\u5728\u8bfb\u5199\u4e2d\u4f1a\u81ea\u52a8\u8fdb\u884c\u7f16\u7801\u8f6c\u6362\u64cd\u4f5c 3. \u4ee5\u884c\u4e3a\u5355\u4f4d\u5206\u9694\uff0c\u5728python\u5185\u7edf\u4e00\u7528'\\n'\u4f5c\u4e3a\u6362\u884c\u7b26\u8fdb\u884c\u5206\u9694 \u5404\u64cd\u4f5c\u7cfb\u7edf\u7684\u6362\u884c\u7b26 Linux\u6362\u884c\u7b26: '\\n' Windows \u6362\u884c\u7b26\uff1a '\\r\\n' \u65e7\u7684Macintosh\u6362\u884c\u7b26\uff1a '\\r' \u65b0\u7684Mac Os\u6362\u884c\u7b26\uff1a '\\n' \u6587\u672c\u6587\u4ef6\u8bfb\u65b9\u6cd5 \u00b6 f.readline() f.readlines() f.read(\u5b57\u7b26\u6570\u6216\u5b57\u8282\u6570) \u6587\u672c\u6587\u4ef6\u7684\u5199\u65b9\u6cd5 \u00b6 f.write(\u5b57\u7b26\u4e32) f.writelines(\u5b57\u7b26\u4e32\u5217\u8868) \u7ec3\u4e60 \u00b6 \u81ea\u5df1\u5199\u4e00\u4e2a\u6587\u4ef6'info.txt' \u5185\u90e8\u5b58\u4e00\u4e9b\u6587\u5b57\u4fe1\u606f\u5982\u4e0b \u5f20\u4e09 20 100 \u674e\u56db 21 96 \u5c0f\u738b 20 98 \u6ce8 \u4ee5\u4e0a\u4fe1\u606f\u7528\u7a7a\u683c\u4f5c\u7528\u5206\u9694\u7b26\u5206\u5f00 \u5199\u7a0b\u5e8f\u5c06\u8fd9\u4e9b\u6570\u636e\u8bfb\u53d6\u51fa\u6765\uff0c\u5e76\u4ee5\u5982\u4e0b\u683c\u5f0f\u6253\u5370\u51fa\u6765 \u5f20\u4e09 \u4eca\u5e74 20\u5c81\uff0c \u6210\u7ee9\u662f\uff1a100 \u674e\u56db \u4eca\u5e74 21\u5c81\uff0c \u6210\u7ee9\u662f\uff1a96 \u5c0f\u738b \u4eca\u5e74 20\u5c81\uff0c \u6210\u7ee9\u662f\uff1a98 \u6a21\u5f0f\u5b57\u7b26\u4e32 \u00b6 'w' \u53ea\u5199\u8986\u76d6 'x' \u6587\u672c\u6a21\u5f0f 'a' \u53ea\u5199\u8ffd\u52a0 \u6587\u4ef6\u7684\u8fed\u4ee3\u8bfb\u53d6 \u00b6 \u200b \u6587\u4ef6\u6d41\u5bf9\u8c61\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fed\u4ee3\u8fc7\u7a0b\u5c06\u4ee5\u6362\u884c\u7b26'\\n'\u4f5c\u4e3a\u5206\u9694\u7b26\u4f9d\u6b21\u83b7\u53d6 # \u793a\u4f8b f = open ( 'info.txt' , 'rt' , encoding = 'utf-8' ) for line in f : # f\u7ed1\u5b9a\u7684\u6587\u4ef6\u6d41\u5bf9\u8c61\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 print ( line ) f . close () \u7ec3\u4e60 \u00b6 \u5199\u7a0b\u5e8f\uff0c\u8bfb\u8bfb\u5165\u4efb\u610f\u884c\u6587\u5b57\uff0c\u5f53\u8f93\u5165\u7a7a\u884c\u65f6\u7ed3\u675f\u8f93\u5165\uff0c\u5148\u5c06\u8fd9\u4e9b\u8bfb\u5165\u7684\u6587\u5b57\u5b58\u5165\u5217\u8868\u4e2d\uff0c\u7136\u540e\u518d\u628a\u5217\u8868\u91cc\u7684\u5185\u5bb9\u5b58\u5165\u5230'input.txt'\u6587\u4ef6\u4e2d \u5199\u7a0b\u5e8f\uff0c\u4ece\u4e0a\u9898\u7684'input.txt'\u4e2d\u8bfb\u53d6\u4e4b\u524d\u8f93\u5165\u7684\u6570\u636e\uff0c\u8bfb\u53d6\u5230\u5217\u8868\u4e2d\uff0c\u52a0\u4e0a\u884c\u53f7\u8fdb\u884c\u8f93\u51fa \u6807\u51c6\u8f93\u5165\u8f93\u51fa\u6587\u4ef6 \u00b6 sys.stdin \u6807\u51c6\u8f93\u5165\u6587\u4ef6\uff08\u9ed8\u8ba4\u4e3a\u952e\u76d8\u8bbe\u5907\uff09 ctrl + d (Linux) \u662f\u8ba9\u952e\u76d8\u8f93\u5165\u6587\u4ef6\u7ed3\u675f\u7b26 sys.stdout \u6807\u51c6\u8f93\u51fa\u6587\u4ef6\uff08\u9ed8\u8ba4\u4e3a\u5c4f\u5e55\u7ec8\u7aef\uff09 sys.stderr \u6807\u51c6\u9519\u8bef\u8f93\u51fa\u6587\u4ef6\uff08\u9ed8\u8ba4\u4e3a\u5c4f\u5e55\u7ec8\u7aef\uff09 \u6a21\u5757\u540d\uff1asys \u8bf4\u660e 1. \u6807\u51c6\u6587\u4ef6\u4e0d\u9700\u8981\u6253\u5f00\u548c\u5173\u95ed\u5c31\u80fd\u4f7f\u7528 2. \u6bcf\u4e00\u4e2apython\u7a0b\u5e8f\u542f\u52a8\u540e\u90fd\u4f1a\u6709\u4ee5\u4e0a\u4e09\u4e2a\u6587\u4ef6\u4f9b\u6211\u4eec\u4f7f\u7528 # \u6b64\u793a\u4f8b\u793a\u610f\u6807\u51c6\u8f93\u5165\u6587\u4ef6\u7684\u7528\u6cd5 import sys s = sys . stdin . readline () print ( s ) sys . stdin . close () # \u5173\u95edstdin \u6587\u4ef6\uff0c\u5219input\u65e0\u6cd5\u4f7f\u7528 s2 = input ( '\u8bf7\u8f93\u5165' ) print ( s2 ) import sys sys . stdout . write ( '\u6211\u662f\u4e00\u4e2a\u6807\u51c6\u8f93\u51fa \\n ' ) sys . stderr . write ( '\u6211\u7684\u51fa\u73b0\u662f\u4e2a\u9519\u8bef!!! \\n ' ) help ( print ) \u4e8c\u8fdb\u5236\u6587\u4ef6\u64cd\u4f5c \u00b6 \u6a21\u5f0f\u5b57\u7b26\uff1a 'b' \u9ed8\u8ba4\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u90fd\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\u6570\u636e\uff0c\u901a\u5e38\u6709\u4eba\u4e3a\u7684\u683c\u5f0f\uff0c\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u8bfb\u5199\u9700\u8981\u7528\u5b57\u8282\u4e32(bytes) \u8fdb\u884c\u64cd\u4f5c \u5e38\u7528\u7684\u64cd\u4f5c\u65b9\u6cd5 F.read([\u5b57\u8282\u6570/\u5b57\u7b26\u6570]) \u5bf9\u4e8e\u6587\u672c\u6587\u4ef6\uff0cF.read()\u8fd4\u56de\u7c7b\u578b\u4e3a\u5b57\u7b26\u4e32str \u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0cF.read()\u8fd4\u56de\u7c7b\u578b\u4e3a\u5b57\u8282\u4e32bytes F.write() \u540c\u4e0a\uff0c\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5199\u5165\u7684\u6570\u636e\u4e3a\u5b57\u8282\u4e32bytes\u6216\u5b57\u8282\u6570\u7ec4bytearray f.tell()\u65b9\u6cd5 \u00b6 \u8fd4\u56de\u5f53\u524d\u7684\u8bfb\u5199\u4f4d\u7f6e\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff0c\u4ece1\u5f00\u59cb\uff09 # \u6b64\u793a\u4f8b\u793a\u610ftell\u65b9\u6cd5\u7684\u7528\u6cd5 try: with open('text.txt', 'rb') as f: b = f.read(3) # \u8bfb\u4e863\u4e2a\u5b57\u8282 pos = f.tell() print('\u5f53\u524d\u7684\u8bfb\u5199\u4f4d\u7f6e\u662f\uff1a', pos) f.read(1) print('\u518d\u8bfb\u4e00\u6b21\u540e\uff0c\u8bfb\u5199\u4f4d\u7f6e\u662f\uff1a', f.tell()) except OSError: print('\u8bfb\u53d6\u5931\u8d25') finally: f.close() f.seek()\u65b9\u6cd5 \u00b6 \u4f5c\u7528 \u8bbe\u7f6e\u6587\u4ef6\u7684\u8bfb\u5199\u4f4d\u7f6e \u683c\u5f0f f.seek(\u504f\u79fb\u91cf\uff0cwhence=\u76f8\u5bf9\u4f4d\u7f6e) \u504f\u79fb\u91cf \u5927\u4e8e0\u4ee3\u8868\u5411\u6587\u4ef6\u5c3e\u65b9\u5411\u79fb\u52a8 \u5c0f\u4e8e0\u4ee3\u8868\u5411\u6587\u4ef6\u5934\u65b9\u5411\u79fb\u52a8 \u76f8\u5bf9\u4f4d\u7f6e 0 \u4ee3\u8868\u4ece\u6587\u4ef6\u5934\u5f00\u59cb\u504f\u79fb 1 \u4ee3\u8868\u4ece\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u504f\u79fb 2 \u4ee3\u8868\u4ece\u6587\u4ef6\u5c3e\u5f00\u59cb\u504f\u79fb # \u6b64\u793a\u4f8b\u793a\u610fseek\u65b9\u6cd5\u7684\u7528\u6cd5 try : with open ( 'text.txt' , 'rb' ) as f : f . seek ( 5 , 0 ) # \u6587\u4ef6\u8bfb\u6307\u9488\u4ece\u6587\u4ef6\u5934\u5f00\u59cb\u5411\u53f3\u79fb\u52a85\u4e2a\u5b57\u8282 b = f . read ( 3 ) print ( b ) except OSError : print ( '\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25' ) finally : f . close () f.flush() \u65b9\u6cd5 \u00b6 # \u6b64\u793a\u4f8b\u793a\u610fflush\u65b9\u6cd5\u7684\u7528\u6cd5 try : with open ( 'myflush.txt' , 'w' ) as f : f . write ( 'aaaaaaaaaa' ) f . flush () # \u5f3a\u5236\u5c06\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u5199\u5230\u78c1\u76d8\u4e0a s = input ( '\u8bf7\u8f93\u5165\u56de\u8f66\u7ee7\u7eed\uff1a' ) print ( 'ok' ) except OSError : print ( '\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25' ) finally : f . close ()","title":"19. \u6587\u4ef6\u8bfb\u5199"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#file","text":"\u4ec0\u4e48\u662f\u6587\u4ef6 \u6587\u4ef6\u662f\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u7684\u5355\u4f4d \u6587\u4ef6\u901a\u5e38\u7528\u6765\u957f\u671f\u5b58\u50a8\u6570\u636e \u6587\u4ef6\u4e2d\u7684\u6570\u636e\u662f\u4ee5\u5b57\u8282(byte)\u4e3a\u5355\u4f4d\u8fdb\u884c\u5b58\u50a8\u7684","title":"\u6587\u4ef6 file"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_1","text":"\u6253\u5f00\u6587\u4ef6 \u8bfb/\u5199 \u6587\u4ef6 \u5173\u95ed\u6587\u4ef6 \u6ce8\uff1a \u4efb\u4f55\u64cd\u4f5c\u7cfb\u7edf\uff0c \u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u540c\u65f6\u6253\u5f00\u6587\u4ef6\u7684\u6570\u91cf\u6709\u6700\u5927\u6570\u9650\u5236","title":"\u6587\u4ef6\u7684\u64cd\u4f5c\u6d41\u7a0b"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_2","text":"open(file, mode='rt') \u7528\u4e8e\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u8fd4\u56de\u6587\u4ef6\u6d41\u5bf9\u8c61\uff0c\u5982\u679c\u6253\u5f00\u5931\u8d25\u5219\u4f1a\u89e6\u53d1OSError\u9519\u8bef","title":"\u6587\u4ef6\u7684\u6253\u5f00\u51fd\u6570"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_3","text":"\u200b F.close() # \u5173\u95ed\u6587\u4ef6\uff0c\u91ca\u653e\u7cfb\u7edf\u8d44\u6e90 with open ( 'mynote.txt' , 'w' , encoding = 'utf-8' ) as f : try : f . write ( '\u4eca\u5929\u5929\u6c14\u597d\u6674\u6717' ) finally : f . close ()","title":"\u6587\u4ef6\u6d41\u7684\u5173\u95ed\u65b9\u6cd5"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_4","text":"\u6587\u672c\u6587\u4ef6\u7684\u6a21\u5f0f\u5b57\u7b26 't' \u8bf4\u660e 1. \u5bf9\u6587\u672c\u6587\u4ef6\u7684\u8bfb\u5199\u9700\u8981\u7528\u5b57\u7b26\u4e32str \u8fdb\u884c\u8bfb\u53d6\u548c\u5199\u5165\u6570\u636e 2. \u9ed8\u8ba4\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u90fd\u662f\u5b57\u7b26\uff08\u6587\u5b57\uff09\u6570\u636e\uff0c\u5728\u8bfb\u5199\u4e2d\u4f1a\u81ea\u52a8\u8fdb\u884c\u7f16\u7801\u8f6c\u6362\u64cd\u4f5c 3. \u4ee5\u884c\u4e3a\u5355\u4f4d\u5206\u9694\uff0c\u5728python\u5185\u7edf\u4e00\u7528'\\n'\u4f5c\u4e3a\u6362\u884c\u7b26\u8fdb\u884c\u5206\u9694 \u5404\u64cd\u4f5c\u7cfb\u7edf\u7684\u6362\u884c\u7b26 Linux\u6362\u884c\u7b26: '\\n' Windows \u6362\u884c\u7b26\uff1a '\\r\\n' \u65e7\u7684Macintosh\u6362\u884c\u7b26\uff1a '\\r' \u65b0\u7684Mac Os\u6362\u884c\u7b26\uff1a '\\n'","title":"\u6587\u672c\u6587\u4ef6\u7684\u64cd\u4f5c"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_5","text":"f.readline() f.readlines() f.read(\u5b57\u7b26\u6570\u6216\u5b57\u8282\u6570)","title":"\u6587\u672c\u6587\u4ef6\u8bfb\u65b9\u6cd5"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_6","text":"f.write(\u5b57\u7b26\u4e32) f.writelines(\u5b57\u7b26\u4e32\u5217\u8868)","title":"\u6587\u672c\u6587\u4ef6\u7684\u5199\u65b9\u6cd5"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_7","text":"\u81ea\u5df1\u5199\u4e00\u4e2a\u6587\u4ef6'info.txt' \u5185\u90e8\u5b58\u4e00\u4e9b\u6587\u5b57\u4fe1\u606f\u5982\u4e0b \u5f20\u4e09 20 100 \u674e\u56db 21 96 \u5c0f\u738b 20 98 \u6ce8 \u4ee5\u4e0a\u4fe1\u606f\u7528\u7a7a\u683c\u4f5c\u7528\u5206\u9694\u7b26\u5206\u5f00 \u5199\u7a0b\u5e8f\u5c06\u8fd9\u4e9b\u6570\u636e\u8bfb\u53d6\u51fa\u6765\uff0c\u5e76\u4ee5\u5982\u4e0b\u683c\u5f0f\u6253\u5370\u51fa\u6765 \u5f20\u4e09 \u4eca\u5e74 20\u5c81\uff0c \u6210\u7ee9\u662f\uff1a100 \u674e\u56db \u4eca\u5e74 21\u5c81\uff0c \u6210\u7ee9\u662f\uff1a96 \u5c0f\u738b \u4eca\u5e74 20\u5c81\uff0c \u6210\u7ee9\u662f\uff1a98","title":"\u7ec3\u4e60"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_8","text":"'w' \u53ea\u5199\u8986\u76d6 'x' \u6587\u672c\u6a21\u5f0f 'a' \u53ea\u5199\u8ffd\u52a0","title":"\u6a21\u5f0f\u5b57\u7b26\u4e32"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_9","text":"\u200b \u6587\u4ef6\u6d41\u5bf9\u8c61\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u8fed\u4ee3\u8fc7\u7a0b\u5c06\u4ee5\u6362\u884c\u7b26'\\n'\u4f5c\u4e3a\u5206\u9694\u7b26\u4f9d\u6b21\u83b7\u53d6 # \u793a\u4f8b f = open ( 'info.txt' , 'rt' , encoding = 'utf-8' ) for line in f : # f\u7ed1\u5b9a\u7684\u6587\u4ef6\u6d41\u5bf9\u8c61\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 print ( line ) f . close ()","title":"\u6587\u4ef6\u7684\u8fed\u4ee3\u8bfb\u53d6"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_10","text":"\u5199\u7a0b\u5e8f\uff0c\u8bfb\u8bfb\u5165\u4efb\u610f\u884c\u6587\u5b57\uff0c\u5f53\u8f93\u5165\u7a7a\u884c\u65f6\u7ed3\u675f\u8f93\u5165\uff0c\u5148\u5c06\u8fd9\u4e9b\u8bfb\u5165\u7684\u6587\u5b57\u5b58\u5165\u5217\u8868\u4e2d\uff0c\u7136\u540e\u518d\u628a\u5217\u8868\u91cc\u7684\u5185\u5bb9\u5b58\u5165\u5230'input.txt'\u6587\u4ef6\u4e2d \u5199\u7a0b\u5e8f\uff0c\u4ece\u4e0a\u9898\u7684'input.txt'\u4e2d\u8bfb\u53d6\u4e4b\u524d\u8f93\u5165\u7684\u6570\u636e\uff0c\u8bfb\u53d6\u5230\u5217\u8868\u4e2d\uff0c\u52a0\u4e0a\u884c\u53f7\u8fdb\u884c\u8f93\u51fa","title":"\u7ec3\u4e60"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_11","text":"sys.stdin \u6807\u51c6\u8f93\u5165\u6587\u4ef6\uff08\u9ed8\u8ba4\u4e3a\u952e\u76d8\u8bbe\u5907\uff09 ctrl + d (Linux) \u662f\u8ba9\u952e\u76d8\u8f93\u5165\u6587\u4ef6\u7ed3\u675f\u7b26 sys.stdout \u6807\u51c6\u8f93\u51fa\u6587\u4ef6\uff08\u9ed8\u8ba4\u4e3a\u5c4f\u5e55\u7ec8\u7aef\uff09 sys.stderr \u6807\u51c6\u9519\u8bef\u8f93\u51fa\u6587\u4ef6\uff08\u9ed8\u8ba4\u4e3a\u5c4f\u5e55\u7ec8\u7aef\uff09 \u6a21\u5757\u540d\uff1asys \u8bf4\u660e 1. \u6807\u51c6\u6587\u4ef6\u4e0d\u9700\u8981\u6253\u5f00\u548c\u5173\u95ed\u5c31\u80fd\u4f7f\u7528 2. \u6bcf\u4e00\u4e2apython\u7a0b\u5e8f\u542f\u52a8\u540e\u90fd\u4f1a\u6709\u4ee5\u4e0a\u4e09\u4e2a\u6587\u4ef6\u4f9b\u6211\u4eec\u4f7f\u7528 # \u6b64\u793a\u4f8b\u793a\u610f\u6807\u51c6\u8f93\u5165\u6587\u4ef6\u7684\u7528\u6cd5 import sys s = sys . stdin . readline () print ( s ) sys . stdin . close () # \u5173\u95edstdin \u6587\u4ef6\uff0c\u5219input\u65e0\u6cd5\u4f7f\u7528 s2 = input ( '\u8bf7\u8f93\u5165' ) print ( s2 ) import sys sys . stdout . write ( '\u6211\u662f\u4e00\u4e2a\u6807\u51c6\u8f93\u51fa \\n ' ) sys . stderr . write ( '\u6211\u7684\u51fa\u73b0\u662f\u4e2a\u9519\u8bef!!! \\n ' ) help ( print )","title":"\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u6587\u4ef6"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#_12","text":"\u6a21\u5f0f\u5b57\u7b26\uff1a 'b' \u9ed8\u8ba4\u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u90fd\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\u6570\u636e\uff0c\u901a\u5e38\u6709\u4eba\u4e3a\u7684\u683c\u5f0f\uff0c\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u8bfb\u5199\u9700\u8981\u7528\u5b57\u8282\u4e32(bytes) \u8fdb\u884c\u64cd\u4f5c \u5e38\u7528\u7684\u64cd\u4f5c\u65b9\u6cd5 F.read([\u5b57\u8282\u6570/\u5b57\u7b26\u6570]) \u5bf9\u4e8e\u6587\u672c\u6587\u4ef6\uff0cF.read()\u8fd4\u56de\u7c7b\u578b\u4e3a\u5b57\u7b26\u4e32str \u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0cF.read()\u8fd4\u56de\u7c7b\u578b\u4e3a\u5b57\u8282\u4e32bytes F.write() \u540c\u4e0a\uff0c\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5199\u5165\u7684\u6570\u636e\u4e3a\u5b57\u8282\u4e32bytes\u6216\u5b57\u8282\u6570\u7ec4bytearray","title":"\u4e8c\u8fdb\u5236\u6587\u4ef6\u64cd\u4f5c"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#ftell","text":"\u8fd4\u56de\u5f53\u524d\u7684\u8bfb\u5199\u4f4d\u7f6e\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff0c\u4ece1\u5f00\u59cb\uff09 # \u6b64\u793a\u4f8b\u793a\u610ftell\u65b9\u6cd5\u7684\u7528\u6cd5 try: with open('text.txt', 'rb') as f: b = f.read(3) # \u8bfb\u4e863\u4e2a\u5b57\u8282 pos = f.tell() print('\u5f53\u524d\u7684\u8bfb\u5199\u4f4d\u7f6e\u662f\uff1a', pos) f.read(1) print('\u518d\u8bfb\u4e00\u6b21\u540e\uff0c\u8bfb\u5199\u4f4d\u7f6e\u662f\uff1a', f.tell()) except OSError: print('\u8bfb\u53d6\u5931\u8d25') finally: f.close()","title":"f.tell()\u65b9\u6cd5"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#fseek","text":"\u4f5c\u7528 \u8bbe\u7f6e\u6587\u4ef6\u7684\u8bfb\u5199\u4f4d\u7f6e \u683c\u5f0f f.seek(\u504f\u79fb\u91cf\uff0cwhence=\u76f8\u5bf9\u4f4d\u7f6e) \u504f\u79fb\u91cf \u5927\u4e8e0\u4ee3\u8868\u5411\u6587\u4ef6\u5c3e\u65b9\u5411\u79fb\u52a8 \u5c0f\u4e8e0\u4ee3\u8868\u5411\u6587\u4ef6\u5934\u65b9\u5411\u79fb\u52a8 \u76f8\u5bf9\u4f4d\u7f6e 0 \u4ee3\u8868\u4ece\u6587\u4ef6\u5934\u5f00\u59cb\u504f\u79fb 1 \u4ee3\u8868\u4ece\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u504f\u79fb 2 \u4ee3\u8868\u4ece\u6587\u4ef6\u5c3e\u5f00\u59cb\u504f\u79fb # \u6b64\u793a\u4f8b\u793a\u610fseek\u65b9\u6cd5\u7684\u7528\u6cd5 try : with open ( 'text.txt' , 'rb' ) as f : f . seek ( 5 , 0 ) # \u6587\u4ef6\u8bfb\u6307\u9488\u4ece\u6587\u4ef6\u5934\u5f00\u59cb\u5411\u53f3\u79fb\u52a85\u4e2a\u5b57\u8282 b = f . read ( 3 ) print ( b ) except OSError : print ( '\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25' ) finally : f . close ()","title":"f.seek()\u65b9\u6cd5"},{"location":"python/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/#fflush","text":"# \u6b64\u793a\u4f8b\u793a\u610fflush\u65b9\u6cd5\u7684\u7528\u6cd5 try : with open ( 'myflush.txt' , 'w' ) as f : f . write ( 'aaaaaaaaaa' ) f . flush () # \u5f3a\u5236\u5c06\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u5199\u5230\u78c1\u76d8\u4e0a s = input ( '\u8bf7\u8f93\u5165\u56de\u8f66\u7ee7\u7eed\uff1a' ) print ( 'ok' ) except OSError : print ( '\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25' ) finally : f . close ()","title":"f.flush() \u65b9\u6cd5"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/","text":"timedelta \u7c7b\u5bf9\u8c61 \u00b6 timedelta \u5bf9\u8c61\u8868\u793a\u4e24\u4e2a date \u6216\u8005 time \u7684\u65f6\u95f4\u95f4\u9694\u3002 timedelta \u00b6 timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) \u6240\u6709\u7684\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\u5e76\u4e14\u9ed8\u8ba4\u4e3a 0\u3002\u8fd9\u4e9b\u53c2\u6570\u53ef\u4ee5\u662f\u6574\u6570\u6216\u8005\u6d6e\u70b9\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\u3002 \u53ea\u6709 days, seconds \u548c microseconds \u4f1a\u5b58\u50a8\u5728\u5185\u90e8\uff0c\u5373python\u5185\u90e8\u4ee5 days, seconds \u548c microseconds \u4e09\u4e2a\u5355\u4f4d\u4f5c\u4e3a\u5b58\u50a8\u7684\u57fa\u672c\u5355\u4f4d\u3002\u53c2\u6570\u5355\u4f4d\u8f6c\u6362\u89c4\u5219\u5982\u4e0b\uff1a 1\u6beb\u79d2\u4f1a\u8f6c\u6362\u62101000\u5fae\u79d2\u3002 1\u5206\u949f\u4f1a\u8f6c\u6362\u621060\u79d2\u3002 1\u5c0f\u65f6\u4f1a\u8f6c\u6362\u62103600\u79d2\u3002 1\u661f\u671f\u4f1a\u8f6c\u6362\u62107\u5929\u3002 days, seconds, microseconds \u672c\u8eab\u4e5f\u662f\u6807\u51c6\u5316\u7684\uff0c\u4ee5\u4fdd\u8bc1\u8868\u8fbe\u65b9\u5f0f\u7684\u552f\u4e00\u6027\uff0c\u4f8b\uff1a 0 <= microseconds < 1000000 0 <= seconds < 3600*24 (\u4e00\u5929\u7684\u79d2\u6570) -999999999 <= days <= 999999999 \u5728\u6709\u4efb\u4f55\u6d6e\u70b9\u578b\u53c2\u6570\u6216\u8005\u5fae\u79d2\u4e3a\u5c0f\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u5c0f\u6570\u5747\u4f1a\u6309\u7167\u524d\u9762\u7684\u6362\u7b97\u89c4\u5219\u53e0\u52a0\u5230\u4e0b\u4e00\u7ea7\uff0c\u5e76\u4f7f\u7528round-half-to-even\u7684\u65b9\u6cd5\u5bf9\u5fae\u79d2\u8fdb\u884c\u53d6\u820d\u3002\u6ca1\u6709\u6d6e\u70b9\u578b\u53c2\u6570\u60c5\u51b5\u4e0b\uff0c\u8f6c\u6362\u7684\u8fc7\u7a0b\u5c31\u662f\u7cbe\u786e\u7684\uff08\u6ca1\u6709\u4fe1\u606f\u4e22\u5931\uff09\u3002 \u5982\u679c\u6807\u51c6\u5316\u540e\u7684 days \u6570\u503c\u8d85\u8fc7\u4e86\u6307\u5b9a\u8303\u56f4\uff0c\u5c06\u4f1a\u629b\u51fa OverflowError \u5f02\u5e38\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8d1f\u6570\u88ab\u6807\u51c6\u5316\u540e\u7684\u7ed3\u679c\u4f1a\u8ba9\u4f60\u5927\u5403\u4e00\u60ca\u3002\u4f8b\u5982\uff0c >>> from datetime import timedelta >>> d = timedelta(microseconds=-1) >>> (d.days, d.seconds, d.microseconds) (-1, 86399, 999999) \u7c7b\u5c5e\u6027 \u00b6 timedelta.min \u00b6 The most negative timedelta object, timedelta(-999999999). timedelta.max \u00b6 The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999). timedelta.resolution \u00b6 \u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684 timedelta \u7c7b\u5bf9\u8c61\u6700\u5c0f\u7684\u95f4\u9694\u4e3a timedelta(microseconds=1)\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6807\u51c6\u5316\u7684\u7f18\u6545\uff0ctimedelta.max > -timedelta.min\uff0c-timedelta.max \u4e0d\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a timedelta \u7c7b\u5bf9\u8c61\u3002 \u5b9e\u4f8b\u5c5e\u6027\uff08\u53ea\u8bfb\uff09 \u00b6 days \u00b6 -999999999 \u81f3 999999999 \uff0c\u542b999999999 seconds \u00b6 0 \u81f3 86399\uff0c\u5305\u542b86399 microseconds \u00b6 0 \u81f3 999999\uff0c\u5305\u542b999999 \u652f\u6301\u7684\u8fd0\u7b97\uff1a t1 = t2 + t3 t2 \u548c t3 \u7684\u603b\u548c\u3002 t1-t2 == t3 \u548c t1-t3 == t2 \u7684\u503c\u6c38\u8fdc\u4e3a\u771f\u3002(1) t1 = t2 - t3 t2 \u51cf t3 \u7684\u5dee\u3002t1 == t2 - t3 \u548c t2 == t1 + t3 \u503c\u4e3a\u6c38\u8fdc\u4e3a\u7684\u771f. (1)(6) t1 = t2 * i or t1 = i * t2 \u4e58\u4ee5\u4e00\u4e2a\u6574\u6570\u3002\u5047\u5982 i != 0 \u5219 t1 // i == t2 \u7684\u503c\u4e3a\u771f\u3002 In general, t1 * i == t1 * (i-1) + t1 is true. (1) t1 = t2 * f or t1 = f * t2 \u4e58\u4ee5\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u5c0f\u6570\u7ed3\u679c\u4f7f\u7528 round-half-to-even \u65b9\u5f0f\u8fdb\u884c\u53d6\u820d\u3002 f = t2 / t3 Division (3) of overall duration t2 by interval unit t3.\u8fd4\u56de\u4e00\u4e2a float \u5bf9\u8c61\u3002 t1 = t2 / f or t1 = t2 / i \u9664\u4ee5\u4e00\u4e2a \u6d6e\u70b9\u6570\u6216\u8005\u6574\u6570\u3002\u5c0f\u6570\u7ed3\u679c\u91c7\u7528 round-half-to-even \u65b9\u6cd5\u8fdb\u884c\u53d6\u820d\u3002 t1 = t2 // i or t1 = t2 // t3 \u53d6\u6574\u9664\uff0c\u4f59\u6570\u90e8\u5206(\u5982\u679c\u6709\u7684\u8bdd)\u5c06\u88ab\u4e22\u5f03\u3002\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002(3) t1 = t2 % t3 \u4f59\u6570\u4e3a\u4e00\u4e2a timedelta \u5bf9\u8c61\u3002(3) q, r = divmod(t1, t2) \u901a\u8fc7 : q = t1 // t2 (3) and r = t1 % t2 \u8ba1\u7b97\u51fa\u5546\u548c\u4f59\u6570\u3002q\u662f\u4e00\u4e2a\u6574\u6570\uff0cr\u662f\u4e00\u4e2a timedelta \u5bf9\u8c61\u3002 +t1 \u8fd4\u56de\u4e00\u4e2a\u76f8\u540c\u6570\u503c\u7684 timedelta \u5bf9\u8c61\u3002 -t1 \u7b49\u4ef7\u4e8e timedelta(-t1.days, -t1.seconds, -t1.microseconds), \u548c t1* -1. (1)(4) abs(t) \u5f53 t.days >= 0 \u65f6\u7b49\u4e8e +\\ *t*, \u5f53 t.days < 0 \u65f6 -t \u3002 (2) str(t) \u8fd4\u56de\u4e00\u4e2a\u5f62\u5982 [D day[s], ][H]H:MM:SS[.UUUUUU] \u7684\u5b57\u7b26\u4e32\uff0c\u5f53 t \u4e3a\u8d1f\u6570\u7684\u65f6\u5019\uff0c D \u4e5f\u4e3a\u8d1f\u6570\u3002 (5) repr(t) \u8fd4\u56de\u4e00\u4e2a timedelta \u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff0c\u4f5c\u4e3a\u9644\u5e26\u6b63\u89c4\u5c5e\u6027\u503c\u7684\u6784\u9020\u5668\u8c03\u7528\u3002 \u6ce8\u91ca: \u7cbe\u786e\u4f46\u53ef\u80fd\u4f1a\u6ea2\u51fa\u3002 \u7cbe\u786e\u4e14\u4e0d\u4f1a\u6ea2\u51fa\u3002 \u9664\u4ee50\u5c06\u4f1a\u629b\u51fa\u5f02\u5e38 ZeroDivisionError \u3002 -timedelta.max \u4e0d\u662f\u4e00\u4e2a timedelta \u7c7b\u5bf9\u8c61\u3002 String representations of timedelta objects are normalized similarly to their internal representation. This leads to somewhat unusual results for negative timedeltas. For example: >>> timedelta ( hours = -5 ) datetime.timedelta ( days = -1, seconds = 68400 ) >>> print -1 day, 19 :00:00 \u8868\u8fbe\u5f0f t2 - t3 \u901a\u5e38\u4e0e t2 + (-t3) \u662f\u7b49\u4ef7\u7684\uff0c\u9664\u975e t3 \u7b49\u4e8e timedelta.max; \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u524d\u8005\u4f1a\u8fd4\u56de\u7ed3\u679c\uff0c\u800c\u540e\u8005\u5219\u4f1a\u6ea2\u51fa\u3002 \u5b9e\u4f8b\u65b9\u6cd5 \u00b6 timedelta.total_seconds() \u00b6 \u8fd4\u56de\u65f6\u95f4\u95f4\u9694\u5305\u542b\u4e86\u591a\u5c11\u79d2\u3002 from datetime import timedelta print ( timedelta ( days = 1 ) . total_seconds ()) date \u5bf9\u8c61 \u00b6 date(year, month, day) \u6240\u6709\u53c2\u6570\u90fd\u662f\u5fc5\u9009\u7684\u3002\u53c2\u6570\u53ef\u4ee5\u662f\u5728\u4e0b\u9762\u8303\u56f4\u5185\u7684\u6574\u6570\uff1a MINYEAR <= year <= MAXYEAR 1 <= month <= 12 1 <= \u65e5\u671f <= \u7ed9\u5b9a\u5e74\u6708\u5bf9\u5e94\u7684\u5929\u6570 \u7c7b\u65b9\u6cd5classmethod \u00b6 date.today() \u00b6 \u8fd4\u56de\u5f53\u5730\u7684\u5f53\u524d\u65e5\u671f\u3002\u4e0e date.fromtimestamp(time.time()) \u7b49\u4ef7\u3002 date.fromordinal(ordinal) \u00b6 \u8fd4\u56de\u5bf9\u5e94\u4e8e\u65e0\u795e\u8bba\u516c\u5386\u5e8f\u6570\u7684\u65e5\u671f\uff0c\u5176\u4e2d\u7b2c\u4e00\u5e74\u76841\u67081\u65e5\u6709\u5e8f\u65701\u3002 \u7c7b\u5c5e\u6027 \u00b6 date.min \u00b6 \u6700\u5c0f\u7684\u65e5\u671f date(MINYEAR, 1, 1) \u3002 date.max \u00b6 \u6700\u5927\u7684\u65e5\u671f \uff0cdate(MAXYEAR, 12, 31)\u3002 date.resolution \u00b6 \u4e24\u4e2a\u65e5\u671f\u5bf9\u8c61\u7684\u6700\u5c0f\u95f4\u9694\uff0ctimedelta(days=1)\u3002 \u5b9e\u4f8b\u5c5e\u6027\uff08\u53ea\u8bfb\uff09 \u00b6 date.year \u00b6 \u5728 MINYEAR \u548c MAXYEAR \u4e4b\u95f4\uff0c\u5305\u542b\u8fb9\u754c\u3002 date.month \u00b6 1 \u81f3 12\uff08\u542b\uff09 date.day \u00b6 \u8fd4\u56de1\u5230\u6307\u5b9a\u5e74\u6708\u7684\u5929\u6570\u95f4\u7684\u6570\u5b57\u3002 \u652f\u6301\u7684\u8fd0\u7b97 \u00b6 date2 = date1 + timedelta date2 is timedelta.days days removed from date1. (1) date2 = date1 - timedelta Computes date2 such that date2 + timedelta == date1. (2) timedelta = date1 - date2 (3) date1 < date2 date1 is considered less than date2 when date1 precedes date2in time. (4) \u5b9e\u4f8b\u65b9\u6cd5 \u00b6 replace \u00b6 date.replace(year=self.year, month=self.month, day=self.day) \u66ff\u6362\u5e74\u6708\u65e5\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u8fd4\u56de\u66ff\u6362\u540e\u7684date\u5bf9\u8c61 from datetime import date dt = date ( 2019 , 6 , 18 ) dt_new = dt . replace ( year = 2020 ) print ( dt_new ) timetuple \u00b6 date.timetuple() \u8fd4\u56de\u5f53\u524d\u65f6\u95f4\u5bf9\u8c61\u7684\u5143\u7ec4 toordinal \u00b6 date.toordinal() \u8fd4\u56de\u65e5\u671f\u7684\u516c\u5386\u5e8f\u6570\uff0c\u5176\u4e2d\u7b2c\u4e00\u5e74\u76841\u67081\u65e5\u6709\u5e8f\u65701\u3002 \u5bf9\u4e8e\u4efb\u4f55\u65e5\u671f\u5bf9\u8c61d\uff0cdate.fromordinal\uff08d.toordinal\uff08\uff09\uff09=d weekday \u00b6 date.weekday() \u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u661f\u671f\u51e0\uff0c\u661f\u671f\u4e00\u4e3a0\uff0c\u661f\u671f\u5929\u4e3a6\u3002 \u4f8b\u5982\uff0c date(2002, 12, 4).weekday() == 2\uff0c\u8868\u793a\u7684\u662f\u661f\u671f\u4e09\u3002 isoweekday \u00b6 date.isoweekday() \u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u661f\u671f\u51e0\uff0c\u661f\u671f\u4e00\u4e3a1\uff0c\u661f\u671f\u5929\u4e3a7\u3002 \u4f8b\u5982\uff1adate(2002, 12, 4).isoweekday() == 3,\u8868\u793a\u661f\u671f\u4e09\u3002 isocalendar \u00b6 date.isocalendar() \u8fd4\u56de\u4e00\u4e2a\u4e09\u5143\u5143\u7ec4\uff0c(ISO year, ISO week number, ISO weekday) \u3002 isoformat \u00b6 date.isoformat() \u8fd4\u56de\u4e00\u4e2a ISO 8601 \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c 'YYYY-MM-DD'\u3002\u4f8b\u5982 date(2002, 12, 4).isoformat() == '2002-12-04'\u3002 str \u00b6 date. str () \u5bf9\u4e8e\u65e5\u671f\u5bf9\u8c61 d, str(d) \u7b49\u4ef7\u4e8e d.isoformat() \u3002 ctime \u00b6 date.ctime() \u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u65e5\u671f\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u65e5\u671f\uff082002\uff0c12\uff0c4\uff09.ctime\uff08\uff09='Wed Dec 4 00:00:00 2002'\u3002 strftime \u00b6 date.strftime(format) \u8fd4\u56de\u8868\u793a\u65e5\u671f\u7684\u5b57\u7b26\u4e32\uff0c\u7531\u663e\u5f0f\u683c\u5f0f\u5b57\u7b26\u4e32\u63a7\u5236\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u67e5\u770b\uff1a see strftime() and strptime() Behavior. \u5e38\u7528\u7684\uff1a year: %Y month: %m day: %d hour: %H minute: %M second: %S \u672c\u5730\u5de5\u4f5c\u65e5\u7f29\u5199 %a \u672c\u5730\u5de5\u4f5c\u65e5\u5168\u540d %A \u5f53\u5730\u6708\u4efd\u7f29\u5199 %b \u5f53\u5730\u6708\u4efd\u5168\u540d %B \u793a\u4f8b\u4ee3\u7801 from datetime import date dt = date ( 2018 , 6 , 18 ) print ( date . strftime ( dt , '%Y-%m- %d %H:%M:%S %a %A %b %B' )) # \u7ed3\u679c 2018 - 06 - 18 00 : 00 : 00 Mon Monday Jun June datetime \u5bf9\u8c61 \u6784\u9020\u5668 \uff1a class datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) year, month, day \u4e09\u4e2a\u53c2\u6570\u662f\u5fc5\u9009\u7684\u3002 tzinfo \u53ef\u4ee5\u662f None, \u6216\u8005\u662f\u662f\u4e00\u4e2a tzinfo \u5b50\u7c7b\u7684\u5b9e\u4f8b\u3002\u5176\u4f59\u7684\u53c2\u6570\u53ef\u4ee5\u662f\u5728\u4ee5\u4e0b\u8303\u56f4\u5185\u7684\u6574\u6570\uff1a MINYEAR <= year <= MAXYEAR, 1 <= month <= 12, 1 <= day <= \u6307\u5b9a\u5e74\u6708\u7684\u5929\u6570, 0 <= hour < 24, 0 <= minute < 60, 0 <= second < 60, 0 <= microsecond < 1000000, fold in [0, 1]. \u5982\u679c\u53c2\u6570\u4e0d\u5728\u8fd9\u4e9b\u8303\u56f4\u5185\uff0c\u5219\u629b\u51fa ValueError \u5f02\u5e38\u3002 3.6 \u65b0\u7248\u529f\u80fd: \u589e\u52a0\u4e86 fold \u53c2\u6570\u3002 \u7c7b\u65b9\u6cd5: datetime.today() \u8fd4\u56de\u5f53\u524d\u672c\u5730\u65f6\u95f4 datetime.now(tz=None) \u8fd4\u56de\u5f53\u524d\u672c\u5730\u65f6\u95f4 datetime.utcnow() \u8fd4\u56deutc\u65f6\u95f4\uff0c\u548c\u5317\u4eac\u65f6\u95f4\u65e98\u5c0f\u65f6 datetime.fromtimestamp(timestamp, tz=None) \u8fd4\u56de\u4e0eposix\u65f6\u95f4\u6233\u76f8\u5bf9\u5e94\u7684\u672c\u5730\u65e5\u671f\u548c\u65f6\u95f4 datetime.utcfromtimestamp(timestamp) \u8fd4\u56de\u4e0eposix\u65f6\u95f4\u6233\u5bf9\u5e94\u7684UTC\u65e5\u671f\u65f6\u95f4\uff0cTZINFO NONE\u3002 \u5982\u679c\u65f6\u95f4\u6233\u8d85\u51fa\u5e73\u53f0 gmtime\uff08\uff09\u51fd\u6570\u652f\u6301\u7684\u503c\u8303\u56f4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f15\u53d1\u6ea2\u51fa\u9519\u8bef\uff0c\u5e76\u4e14gmtime\uff08\uff09\u5931\u8d25\u65f6\u4f1a\u5f15\u53d1OSError\u3002\u57281970\u5e74\u52302038\u5e74\uff0c\u8fd9\u662f\u5f88\u5e38\u89c1\u7684\u3002 datetime.fromordinal(ordinal) \u8fd4\u56de\u5bf9\u5e94\u4e8e\u65e0\u795e\u8bba\u516c\u5386\u5e8f\u6570\u7684\u65e5\u671f\u65f6\u95f4\uff0c\u5176\u4e2d1\u5e74\u76841\u67081\u65e5\u5177\u6709\u5e8f\u65701\u3002 datetime.combine(date, time, tzinfo=self.tzinfo) \u7ec4\u5408\u65e5\u671f\u548c\u65f6\u95f4\u6210datetime\u7c7b\u578b \u793a\u4f8b\u4ee3\u7801 from datetime import datetime, time, date d = date(2018, 6, 18) t = time(5, 5, 5) dt = datetime.combine(d, t) print(type(dt)) print(dt) result \u00b6 2018-06-18 05:05:05 \u7c7b\u5c5e\u6027\uff1a datetime.min The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None). datetime.max The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None). datetime.resolution The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1). \u5b9e\u4f8b\u5c5e\u6027\uff08\u53ea\u8bfb\uff09\uff1a datetime.year \u5728 MINYEAR \u548c MAXYEAR \u4e4b\u95f4\uff0c\u5305\u542b\u8fb9\u754c\u3002 datetime.month 1 \u81f3 12\uff08\u542b\uff09 datetime.day \u8fd4\u56de1\u5230\u6307\u5b9a\u5e74\u6708\u7684\u5929\u6570\u95f4\u7684\u6570\u5b57\u3002 datetime.hour In range(24). datetime.minute In range(60). datetime.second In range(60). datetime.microsecond In range(1000000). datetime.tzinfo \u4f5c\u4e3atzinfo\u53c2\u6570\u4f20\u9012\u7ed9datetime\u6784\u9020\u51fd\u6570\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u9012\uff0c\u5219\u4e3anone\u3002 \u5b9e\u4f8b\u65b9\u6cd5(\u90e8\u5206)\uff1a datetime.date() \u8fd4\u56dedate\u5bf9\u8c61 datetime.time() \u8fd4\u56detime\u5bf9\u8c61 datetime.timetz() \u8fd4\u56de\u5177\u6709\u76f8\u540c\u5c0f\u65f6\u3001\u5206\u949f\u3001\u79d2\u3001\u5fae\u79d2\u3001\u6298\u53e0\u548ctzinfo\u5c5e\u6027\u7684\u65f6\u95f4\u5bf9\u8c61\u3002 datetime.replace()(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0) \u8fd4\u56de\u5177\u6709\u76f8\u540c\u5c5e\u6027\u7684datetime\uff0c\u9664\u4e86\u90a3\u4e9b\u7531\u6307\u5b9a\u7684\u5173\u952e\u5b57\u53c2\u6570\u8d4b\u4e88\u65b0\u503c\u7684\u5c5e\u6027\u3002\u8bf7\u6ce8\u610f\uff0c\u53ef\u4ee5\u6307\u5b9aTZINFO=NONE\uff0c\u4ee5\u4ece\u4e0d\u8f6c\u6362\u65e5\u671f\u548c\u65f6\u95f4\u6570\u636e\u7684\u5df2\u77e5\u65e5\u671f\u65f6\u95f4\u521b\u5efa\u539f\u59cb\u65e5\u671f\u65f6\u95f4\u3002","title":"datetime"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#timedelta","text":"timedelta \u5bf9\u8c61\u8868\u793a\u4e24\u4e2a date \u6216\u8005 time \u7684\u65f6\u95f4\u95f4\u9694\u3002","title":"timedelta \u7c7b\u5bf9\u8c61"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#timedelta_1","text":"timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0) \u6240\u6709\u7684\u53c2\u6570\u90fd\u662f\u53ef\u9009\u7684\u5e76\u4e14\u9ed8\u8ba4\u4e3a 0\u3002\u8fd9\u4e9b\u53c2\u6570\u53ef\u4ee5\u662f\u6574\u6570\u6216\u8005\u6d6e\u70b9\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\u3002 \u53ea\u6709 days, seconds \u548c microseconds \u4f1a\u5b58\u50a8\u5728\u5185\u90e8\uff0c\u5373python\u5185\u90e8\u4ee5 days, seconds \u548c microseconds \u4e09\u4e2a\u5355\u4f4d\u4f5c\u4e3a\u5b58\u50a8\u7684\u57fa\u672c\u5355\u4f4d\u3002\u53c2\u6570\u5355\u4f4d\u8f6c\u6362\u89c4\u5219\u5982\u4e0b\uff1a 1\u6beb\u79d2\u4f1a\u8f6c\u6362\u62101000\u5fae\u79d2\u3002 1\u5206\u949f\u4f1a\u8f6c\u6362\u621060\u79d2\u3002 1\u5c0f\u65f6\u4f1a\u8f6c\u6362\u62103600\u79d2\u3002 1\u661f\u671f\u4f1a\u8f6c\u6362\u62107\u5929\u3002 days, seconds, microseconds \u672c\u8eab\u4e5f\u662f\u6807\u51c6\u5316\u7684\uff0c\u4ee5\u4fdd\u8bc1\u8868\u8fbe\u65b9\u5f0f\u7684\u552f\u4e00\u6027\uff0c\u4f8b\uff1a 0 <= microseconds < 1000000 0 <= seconds < 3600*24 (\u4e00\u5929\u7684\u79d2\u6570) -999999999 <= days <= 999999999 \u5728\u6709\u4efb\u4f55\u6d6e\u70b9\u578b\u53c2\u6570\u6216\u8005\u5fae\u79d2\u4e3a\u5c0f\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u5c0f\u6570\u5747\u4f1a\u6309\u7167\u524d\u9762\u7684\u6362\u7b97\u89c4\u5219\u53e0\u52a0\u5230\u4e0b\u4e00\u7ea7\uff0c\u5e76\u4f7f\u7528round-half-to-even\u7684\u65b9\u6cd5\u5bf9\u5fae\u79d2\u8fdb\u884c\u53d6\u820d\u3002\u6ca1\u6709\u6d6e\u70b9\u578b\u53c2\u6570\u60c5\u51b5\u4e0b\uff0c\u8f6c\u6362\u7684\u8fc7\u7a0b\u5c31\u662f\u7cbe\u786e\u7684\uff08\u6ca1\u6709\u4fe1\u606f\u4e22\u5931\uff09\u3002 \u5982\u679c\u6807\u51c6\u5316\u540e\u7684 days \u6570\u503c\u8d85\u8fc7\u4e86\u6307\u5b9a\u8303\u56f4\uff0c\u5c06\u4f1a\u629b\u51fa OverflowError \u5f02\u5e38\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8d1f\u6570\u88ab\u6807\u51c6\u5316\u540e\u7684\u7ed3\u679c\u4f1a\u8ba9\u4f60\u5927\u5403\u4e00\u60ca\u3002\u4f8b\u5982\uff0c >>> from datetime import timedelta >>> d = timedelta(microseconds=-1) >>> (d.days, d.seconds, d.microseconds) (-1, 86399, 999999)","title":"timedelta"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#_1","text":"","title":"\u7c7b\u5c5e\u6027"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#timedeltamin","text":"The most negative timedelta object, timedelta(-999999999).","title":"timedelta.min"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#timedeltamax","text":"The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999).","title":"timedelta.max"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#timedeltaresolution","text":"\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684 timedelta \u7c7b\u5bf9\u8c61\u6700\u5c0f\u7684\u95f4\u9694\u4e3a timedelta(microseconds=1)\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a\u6807\u51c6\u5316\u7684\u7f18\u6545\uff0ctimedelta.max > -timedelta.min\uff0c-timedelta.max \u4e0d\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a timedelta \u7c7b\u5bf9\u8c61\u3002","title":"timedelta.resolution"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#_2","text":"","title":"\u5b9e\u4f8b\u5c5e\u6027\uff08\u53ea\u8bfb\uff09"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#days","text":"-999999999 \u81f3 999999999 \uff0c\u542b999999999","title":"days"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#seconds","text":"0 \u81f3 86399\uff0c\u5305\u542b86399","title":"seconds"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#microseconds","text":"0 \u81f3 999999\uff0c\u5305\u542b999999 \u652f\u6301\u7684\u8fd0\u7b97\uff1a t1 = t2 + t3 t2 \u548c t3 \u7684\u603b\u548c\u3002 t1-t2 == t3 \u548c t1-t3 == t2 \u7684\u503c\u6c38\u8fdc\u4e3a\u771f\u3002(1) t1 = t2 - t3 t2 \u51cf t3 \u7684\u5dee\u3002t1 == t2 - t3 \u548c t2 == t1 + t3 \u503c\u4e3a\u6c38\u8fdc\u4e3a\u7684\u771f. (1)(6) t1 = t2 * i or t1 = i * t2 \u4e58\u4ee5\u4e00\u4e2a\u6574\u6570\u3002\u5047\u5982 i != 0 \u5219 t1 // i == t2 \u7684\u503c\u4e3a\u771f\u3002 In general, t1 * i == t1 * (i-1) + t1 is true. (1) t1 = t2 * f or t1 = f * t2 \u4e58\u4ee5\u4e00\u4e2a\u6d6e\u70b9\u6570\uff0c\u5c0f\u6570\u7ed3\u679c\u4f7f\u7528 round-half-to-even \u65b9\u5f0f\u8fdb\u884c\u53d6\u820d\u3002 f = t2 / t3 Division (3) of overall duration t2 by interval unit t3.\u8fd4\u56de\u4e00\u4e2a float \u5bf9\u8c61\u3002 t1 = t2 / f or t1 = t2 / i \u9664\u4ee5\u4e00\u4e2a \u6d6e\u70b9\u6570\u6216\u8005\u6574\u6570\u3002\u5c0f\u6570\u7ed3\u679c\u91c7\u7528 round-half-to-even \u65b9\u6cd5\u8fdb\u884c\u53d6\u820d\u3002 t1 = t2 // i or t1 = t2 // t3 \u53d6\u6574\u9664\uff0c\u4f59\u6570\u90e8\u5206(\u5982\u679c\u6709\u7684\u8bdd)\u5c06\u88ab\u4e22\u5f03\u3002\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u3002(3) t1 = t2 % t3 \u4f59\u6570\u4e3a\u4e00\u4e2a timedelta \u5bf9\u8c61\u3002(3) q, r = divmod(t1, t2) \u901a\u8fc7 : q = t1 // t2 (3) and r = t1 % t2 \u8ba1\u7b97\u51fa\u5546\u548c\u4f59\u6570\u3002q\u662f\u4e00\u4e2a\u6574\u6570\uff0cr\u662f\u4e00\u4e2a timedelta \u5bf9\u8c61\u3002 +t1 \u8fd4\u56de\u4e00\u4e2a\u76f8\u540c\u6570\u503c\u7684 timedelta \u5bf9\u8c61\u3002 -t1 \u7b49\u4ef7\u4e8e timedelta(-t1.days, -t1.seconds, -t1.microseconds), \u548c t1* -1. (1)(4) abs(t) \u5f53 t.days >= 0 \u65f6\u7b49\u4e8e +\\ *t*, \u5f53 t.days < 0 \u65f6 -t \u3002 (2) str(t) \u8fd4\u56de\u4e00\u4e2a\u5f62\u5982 [D day[s], ][H]H:MM:SS[.UUUUUU] \u7684\u5b57\u7b26\u4e32\uff0c\u5f53 t \u4e3a\u8d1f\u6570\u7684\u65f6\u5019\uff0c D \u4e5f\u4e3a\u8d1f\u6570\u3002 (5) repr(t) \u8fd4\u56de\u4e00\u4e2a timedelta \u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\uff0c\u4f5c\u4e3a\u9644\u5e26\u6b63\u89c4\u5c5e\u6027\u503c\u7684\u6784\u9020\u5668\u8c03\u7528\u3002 \u6ce8\u91ca: \u7cbe\u786e\u4f46\u53ef\u80fd\u4f1a\u6ea2\u51fa\u3002 \u7cbe\u786e\u4e14\u4e0d\u4f1a\u6ea2\u51fa\u3002 \u9664\u4ee50\u5c06\u4f1a\u629b\u51fa\u5f02\u5e38 ZeroDivisionError \u3002 -timedelta.max \u4e0d\u662f\u4e00\u4e2a timedelta \u7c7b\u5bf9\u8c61\u3002 String representations of timedelta objects are normalized similarly to their internal representation. This leads to somewhat unusual results for negative timedeltas. For example: >>> timedelta ( hours = -5 ) datetime.timedelta ( days = -1, seconds = 68400 ) >>> print -1 day, 19 :00:00 \u8868\u8fbe\u5f0f t2 - t3 \u901a\u5e38\u4e0e t2 + (-t3) \u662f\u7b49\u4ef7\u7684\uff0c\u9664\u975e t3 \u7b49\u4e8e timedelta.max; \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u524d\u8005\u4f1a\u8fd4\u56de\u7ed3\u679c\uff0c\u800c\u540e\u8005\u5219\u4f1a\u6ea2\u51fa\u3002","title":"microseconds"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#_3","text":"","title":"\u5b9e\u4f8b\u65b9\u6cd5"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#timedeltatotal_seconds","text":"\u8fd4\u56de\u65f6\u95f4\u95f4\u9694\u5305\u542b\u4e86\u591a\u5c11\u79d2\u3002 from datetime import timedelta print ( timedelta ( days = 1 ) . total_seconds ())","title":"timedelta.total_seconds()"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#date","text":"date(year, month, day) \u6240\u6709\u53c2\u6570\u90fd\u662f\u5fc5\u9009\u7684\u3002\u53c2\u6570\u53ef\u4ee5\u662f\u5728\u4e0b\u9762\u8303\u56f4\u5185\u7684\u6574\u6570\uff1a MINYEAR <= year <= MAXYEAR 1 <= month <= 12 1 <= \u65e5\u671f <= \u7ed9\u5b9a\u5e74\u6708\u5bf9\u5e94\u7684\u5929\u6570","title":"date \u5bf9\u8c61"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#classmethod","text":"","title":"\u7c7b\u65b9\u6cd5classmethod"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#datetoday","text":"\u8fd4\u56de\u5f53\u5730\u7684\u5f53\u524d\u65e5\u671f\u3002\u4e0e date.fromtimestamp(time.time()) \u7b49\u4ef7\u3002","title":"date.today()"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#datefromordinalordinal","text":"\u8fd4\u56de\u5bf9\u5e94\u4e8e\u65e0\u795e\u8bba\u516c\u5386\u5e8f\u6570\u7684\u65e5\u671f\uff0c\u5176\u4e2d\u7b2c\u4e00\u5e74\u76841\u67081\u65e5\u6709\u5e8f\u65701\u3002","title":"date.fromordinal(ordinal)"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#_4","text":"","title":"\u7c7b\u5c5e\u6027"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#datemin","text":"\u6700\u5c0f\u7684\u65e5\u671f date(MINYEAR, 1, 1) \u3002","title":"date.min"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#datemax","text":"\u6700\u5927\u7684\u65e5\u671f \uff0cdate(MAXYEAR, 12, 31)\u3002","title":"date.max"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#dateresolution","text":"\u4e24\u4e2a\u65e5\u671f\u5bf9\u8c61\u7684\u6700\u5c0f\u95f4\u9694\uff0ctimedelta(days=1)\u3002","title":"date.resolution"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#_5","text":"","title":"\u5b9e\u4f8b\u5c5e\u6027\uff08\u53ea\u8bfb\uff09"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#dateyear","text":"\u5728 MINYEAR \u548c MAXYEAR \u4e4b\u95f4\uff0c\u5305\u542b\u8fb9\u754c\u3002","title":"date.year"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#datemonth","text":"1 \u81f3 12\uff08\u542b\uff09","title":"date.month"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#dateday","text":"\u8fd4\u56de1\u5230\u6307\u5b9a\u5e74\u6708\u7684\u5929\u6570\u95f4\u7684\u6570\u5b57\u3002","title":"date.day"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#_6","text":"date2 = date1 + timedelta date2 is timedelta.days days removed from date1. (1) date2 = date1 - timedelta Computes date2 such that date2 + timedelta == date1. (2) timedelta = date1 - date2 (3) date1 < date2 date1 is considered less than date2 when date1 precedes date2in time. (4)","title":"\u652f\u6301\u7684\u8fd0\u7b97"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#_7","text":"","title":"\u5b9e\u4f8b\u65b9\u6cd5"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#replace","text":"date.replace(year=self.year, month=self.month, day=self.day) \u66ff\u6362\u5e74\u6708\u65e5\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u8fd4\u56de\u66ff\u6362\u540e\u7684date\u5bf9\u8c61 from datetime import date dt = date ( 2019 , 6 , 18 ) dt_new = dt . replace ( year = 2020 ) print ( dt_new )","title":"replace"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#timetuple","text":"date.timetuple() \u8fd4\u56de\u5f53\u524d\u65f6\u95f4\u5bf9\u8c61\u7684\u5143\u7ec4","title":"timetuple"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#toordinal","text":"date.toordinal() \u8fd4\u56de\u65e5\u671f\u7684\u516c\u5386\u5e8f\u6570\uff0c\u5176\u4e2d\u7b2c\u4e00\u5e74\u76841\u67081\u65e5\u6709\u5e8f\u65701\u3002 \u5bf9\u4e8e\u4efb\u4f55\u65e5\u671f\u5bf9\u8c61d\uff0cdate.fromordinal\uff08d.toordinal\uff08\uff09\uff09=d","title":"toordinal"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#weekday","text":"date.weekday() \u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u661f\u671f\u51e0\uff0c\u661f\u671f\u4e00\u4e3a0\uff0c\u661f\u671f\u5929\u4e3a6\u3002 \u4f8b\u5982\uff0c date(2002, 12, 4).weekday() == 2\uff0c\u8868\u793a\u7684\u662f\u661f\u671f\u4e09\u3002","title":"weekday"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#isoweekday","text":"date.isoweekday() \u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u4ee3\u8868\u661f\u671f\u51e0\uff0c\u661f\u671f\u4e00\u4e3a1\uff0c\u661f\u671f\u5929\u4e3a7\u3002 \u4f8b\u5982\uff1adate(2002, 12, 4).isoweekday() == 3,\u8868\u793a\u661f\u671f\u4e09\u3002","title":"isoweekday"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#isocalendar","text":"date.isocalendar() \u8fd4\u56de\u4e00\u4e2a\u4e09\u5143\u5143\u7ec4\uff0c(ISO year, ISO week number, ISO weekday) \u3002","title":"isocalendar"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#isoformat","text":"date.isoformat() \u8fd4\u56de\u4e00\u4e2a ISO 8601 \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c 'YYYY-MM-DD'\u3002\u4f8b\u5982 date(2002, 12, 4).isoformat() == '2002-12-04'\u3002","title":"isoformat"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#str","text":"date. str () \u5bf9\u4e8e\u65e5\u671f\u5bf9\u8c61 d, str(d) \u7b49\u4ef7\u4e8e d.isoformat() \u3002","title":"str"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#ctime","text":"date.ctime() \u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u65e5\u671f\u7684\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\u65e5\u671f\uff082002\uff0c12\uff0c4\uff09.ctime\uff08\uff09='Wed Dec 4 00:00:00 2002'\u3002","title":"ctime"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#strftime","text":"date.strftime(format) \u8fd4\u56de\u8868\u793a\u65e5\u671f\u7684\u5b57\u7b26\u4e32\uff0c\u7531\u663e\u5f0f\u683c\u5f0f\u5b57\u7b26\u4e32\u63a7\u5236\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u67e5\u770b\uff1a see strftime() and strptime() Behavior. \u5e38\u7528\u7684\uff1a year: %Y month: %m day: %d hour: %H minute: %M second: %S \u672c\u5730\u5de5\u4f5c\u65e5\u7f29\u5199 %a \u672c\u5730\u5de5\u4f5c\u65e5\u5168\u540d %A \u5f53\u5730\u6708\u4efd\u7f29\u5199 %b \u5f53\u5730\u6708\u4efd\u5168\u540d %B \u793a\u4f8b\u4ee3\u7801 from datetime import date dt = date ( 2018 , 6 , 18 ) print ( date . strftime ( dt , '%Y-%m- %d %H:%M:%S %a %A %b %B' )) # \u7ed3\u679c 2018 - 06 - 18 00 : 00 : 00 Mon Monday Jun June datetime \u5bf9\u8c61 \u6784\u9020\u5668 \uff1a class datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0) year, month, day \u4e09\u4e2a\u53c2\u6570\u662f\u5fc5\u9009\u7684\u3002 tzinfo \u53ef\u4ee5\u662f None, \u6216\u8005\u662f\u662f\u4e00\u4e2a tzinfo \u5b50\u7c7b\u7684\u5b9e\u4f8b\u3002\u5176\u4f59\u7684\u53c2\u6570\u53ef\u4ee5\u662f\u5728\u4ee5\u4e0b\u8303\u56f4\u5185\u7684\u6574\u6570\uff1a MINYEAR <= year <= MAXYEAR, 1 <= month <= 12, 1 <= day <= \u6307\u5b9a\u5e74\u6708\u7684\u5929\u6570, 0 <= hour < 24, 0 <= minute < 60, 0 <= second < 60, 0 <= microsecond < 1000000, fold in [0, 1]. \u5982\u679c\u53c2\u6570\u4e0d\u5728\u8fd9\u4e9b\u8303\u56f4\u5185\uff0c\u5219\u629b\u51fa ValueError \u5f02\u5e38\u3002 3.6 \u65b0\u7248\u529f\u80fd: \u589e\u52a0\u4e86 fold \u53c2\u6570\u3002 \u7c7b\u65b9\u6cd5: datetime.today() \u8fd4\u56de\u5f53\u524d\u672c\u5730\u65f6\u95f4 datetime.now(tz=None) \u8fd4\u56de\u5f53\u524d\u672c\u5730\u65f6\u95f4 datetime.utcnow() \u8fd4\u56deutc\u65f6\u95f4\uff0c\u548c\u5317\u4eac\u65f6\u95f4\u65e98\u5c0f\u65f6 datetime.fromtimestamp(timestamp, tz=None) \u8fd4\u56de\u4e0eposix\u65f6\u95f4\u6233\u76f8\u5bf9\u5e94\u7684\u672c\u5730\u65e5\u671f\u548c\u65f6\u95f4 datetime.utcfromtimestamp(timestamp) \u8fd4\u56de\u4e0eposix\u65f6\u95f4\u6233\u5bf9\u5e94\u7684UTC\u65e5\u671f\u65f6\u95f4\uff0cTZINFO NONE\u3002 \u5982\u679c\u65f6\u95f4\u6233\u8d85\u51fa\u5e73\u53f0 gmtime\uff08\uff09\u51fd\u6570\u652f\u6301\u7684\u503c\u8303\u56f4\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f15\u53d1\u6ea2\u51fa\u9519\u8bef\uff0c\u5e76\u4e14gmtime\uff08\uff09\u5931\u8d25\u65f6\u4f1a\u5f15\u53d1OSError\u3002\u57281970\u5e74\u52302038\u5e74\uff0c\u8fd9\u662f\u5f88\u5e38\u89c1\u7684\u3002 datetime.fromordinal(ordinal) \u8fd4\u56de\u5bf9\u5e94\u4e8e\u65e0\u795e\u8bba\u516c\u5386\u5e8f\u6570\u7684\u65e5\u671f\u65f6\u95f4\uff0c\u5176\u4e2d1\u5e74\u76841\u67081\u65e5\u5177\u6709\u5e8f\u65701\u3002 datetime.combine(date, time, tzinfo=self.tzinfo) \u7ec4\u5408\u65e5\u671f\u548c\u65f6\u95f4\u6210datetime\u7c7b\u578b \u793a\u4f8b\u4ee3\u7801 from datetime import datetime, time, date d = date(2018, 6, 18) t = time(5, 5, 5) dt = datetime.combine(d, t) print(type(dt)) print(dt)","title":"strftime"},{"location":"python/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/#result","text":"2018-06-18 05:05:05 \u7c7b\u5c5e\u6027\uff1a datetime.min The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None). datetime.max The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None). datetime.resolution The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1). \u5b9e\u4f8b\u5c5e\u6027\uff08\u53ea\u8bfb\uff09\uff1a datetime.year \u5728 MINYEAR \u548c MAXYEAR \u4e4b\u95f4\uff0c\u5305\u542b\u8fb9\u754c\u3002 datetime.month 1 \u81f3 12\uff08\u542b\uff09 datetime.day \u8fd4\u56de1\u5230\u6307\u5b9a\u5e74\u6708\u7684\u5929\u6570\u95f4\u7684\u6570\u5b57\u3002 datetime.hour In range(24). datetime.minute In range(60). datetime.second In range(60). datetime.microsecond In range(1000000). datetime.tzinfo \u4f5c\u4e3atzinfo\u53c2\u6570\u4f20\u9012\u7ed9datetime\u6784\u9020\u51fd\u6570\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u6ca1\u6709\u4f20\u9012\uff0c\u5219\u4e3anone\u3002 \u5b9e\u4f8b\u65b9\u6cd5(\u90e8\u5206)\uff1a datetime.date() \u8fd4\u56dedate\u5bf9\u8c61 datetime.time() \u8fd4\u56detime\u5bf9\u8c61 datetime.timetz() \u8fd4\u56de\u5177\u6709\u76f8\u540c\u5c0f\u65f6\u3001\u5206\u949f\u3001\u79d2\u3001\u5fae\u79d2\u3001\u6298\u53e0\u548ctzinfo\u5c5e\u6027\u7684\u65f6\u95f4\u5bf9\u8c61\u3002 datetime.replace()(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0) \u8fd4\u56de\u5177\u6709\u76f8\u540c\u5c5e\u6027\u7684datetime\uff0c\u9664\u4e86\u90a3\u4e9b\u7531\u6307\u5b9a\u7684\u5173\u952e\u5b57\u53c2\u6570\u8d4b\u4e88\u65b0\u503c\u7684\u5c5e\u6027\u3002\u8bf7\u6ce8\u610f\uff0c\u53ef\u4ee5\u6307\u5b9aTZINFO=NONE\uff0c\u4ee5\u4ece\u4e0d\u8f6c\u6362\u65e5\u671f\u548c\u65f6\u95f4\u6570\u636e\u7684\u5df2\u77e5\u65e5\u671f\u65f6\u95f4\u521b\u5efa\u539f\u59cb\u65e5\u671f\u65f6\u95f4\u3002","title":"result"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/","text":"\u7ee7\u627f inheritance \u548c \u6d3e\u751f derived \u00b6 \u4ec0\u4e48\u662f\u7ee7\u627f/\u6d3e\u751f 1. \u7ee7\u627f\u662f\u4ece\u5df2\u6709\u7684\u7c7b\u4e2d\u6d3e\u751f\u51fa\u7684\u65b0\u7c7b\uff0c\u65b0\u7c7b\u5177\u6709\u539f\u7c7b\u7684\u6570\u636e\u5c5e\u6027\u548c\u884c\u4e3a\uff0c\u5e76\u80fd\u6269\u5c55\u65b0\u7684\u884c\u4e3a 2. \u6d3e\u751f\u7c7b\u5c31\u662f\u4ece\u4e00\u4e2a\u5df2\u6709\u7684\u7c7b\u4e2d\u884d\u751f\u51fa\u65b0\u7684\u7c7b\uff0c\u5728\u65b0\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0\u65b0\u7684\u5c5e\u6027\u548c\u884c\u4e3a \u4e3a\u4ec0\u4e48\u7ee7\u627f/\u6d3e\u751f 1. \u7ee7\u627f\u7684\u76ee\u7684\u662f\u5ef6\u7eed\u65e7\u7c7b\u7684\u529f\u80fd 2. \u6d3e\u751f\u7684\u76ee\u7684\u662f\u5728\u65e7\u7c7b\u7684\u57fa\u7840\u4e0a\u6539\u53d8\u539f\u6709\u7684\u529f\u80fd \u540d\u8bcd \u57fa\u7c7b(base class) / \u8d85\u7c7b(super calss) / \u7236\u7c7b(father class) \u6d3e\u751f\u7c7b(drived class) / \u5b50\u7c7b(child class) \u5355\u7ee7\u627f \u00b6 \u8bed\u6cd5 class \u7c7b\u540d(\u57fa\u7c7b\u540d): \u8bed\u53e5\u5757 \u8bf4\u660e \u5355\u7ee7\u627f\u662f\u6307\u6d3e\u751f\u7c7b\u7531\u4e00\u4e2a\u57fa\u7c7b\u884d\u751f\u51fa\u6765\u7684\u65b0\u7c7b # \u6b64\u793a\u4f8b\u793a\u610f\u5355\u7ee7\u627f\u7684\u5b9a\u4e49\u65b9\u6cd5\u548c\u7528\u6cd5 class Human : def say ( self , what ): print ( '\u8bf4:' , what ) def walk ( self , distance ): print ( '\u8d70\u4e86' , distance , '\u516c\u91cc' ) class Student ( Human ): def study ( self , subject ): print ( '\u6b63\u5728\u5b66\u4e60 %s ' % subject ) class Teacher ( Human ): def teach ( self , s ): print ( '\u6559\uff1a' , s ) h1 = Human () h1 . say ( '\u4eca\u5929\u5929\u6c14\u771f\u597d' ) h1 . walk ( 5 ) s1 = Student () s1 . walk ( 4 ) s1 . say ( '\u611f\u89c9\u6709\u70b9\u7d2f' ) s1 . study ( 'python' ) t1 = Teacher () t1 . walk ( 3 ) t1 . say ( '\u592a\u7d2f\u4e86\uff0c\u4eca\u665a\u5403\u5565' ) t1 . teach ( '\u9762\u5411\u5bf9\u8c61' ) \u7ee7\u627f\u6d3e\u751f\u673a\u5236\u7684\u4f5c\u7528 \u00b6 \u53ef\u4ee5\u5c06\u4e00\u4e9b\u5171\u6709\u7684\u529f\u80fd\u52a0\u5728\u57fa\u7c7b\u4e2d\u3002\u5b9e\u73b0\u4ee3\u7801\u7684\u5171\u4eab \u5728\u4e0d\u6539\u53d8\u57fa\u7c7b\u7684\u57fa\u7840\u4e0a\u6539\u53d8\u539f\u6709\u7684\u529f\u80fd \u7ee7\u627f\u8bf4\u660e \u00b6 python3 \u4efb\u4f55\u7c7b\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81eaobject\u7c7b object\u7c7b\u662f\u4e00\u5207\u7c7b\u7684\u8d85\u7c7b \u7c7b\u7684__base__\u5c5e\u6027 __base__\u5c5e\u6027\u7528\u6765\u8bb0\u5f55\u6b64\u7c7b\u7684\u7236\u7c7b python\u4e2d\u5185\u5efa\u7684\u7c7b help(__builtins__) \u8986\u76d6override \u00b6 \u4ec0\u4e48\u662f\u8986\u76d6 \u8986\u76d6\u662f\u6307\u5728\u6709\u7ee7\u627f\u5173\u7cfb\u7684\u7c7b\u4e2d\uff0c\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u4e86\u4e0e\u7236\u7c7b\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u5728\u5b50\u7c7b\u7684\u5b9e\u4f8b\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\uff0c\u5b9e\u9645\u8c03\u7528\u7684\u662f\u5b50\u7c7b\u4e2d\u7684\u8986\u76d6\u7248\u672c class A : def work ( self ): print ( 'A.work \u88ab\u8c03\u7528' ) class B ( A ): '''B\u7c7b\u7ee7\u627fA\u7c7b''' def work ( self ): print ( 'B.work \u88ab\u8c03\u7528' ) b = B () b . work () # \u8c03\u7528\u8c01\uff1f\uff1f a = A () a . work () # \u8c03\u7528\u8c01\uff1f\uff1f \u95ee\u9898\uff1a \u5f53\u8986\u76d6\u53d1\u751f\u65f6\uff0c\u5b50\u7c7b\u5bf9\u8c61\u5982\u4f55\u8c03\u7528\u7236\u7c7b\u4e2d\u7684\u88ab\u8986\u76d6\u65b9\u6cd5\uff1f\uff1f \u8c03\u7528\u65b9\u5f0f \u57fa\u7c7b\u540d.\u65b9\u6cd5\u540d(\u5b9e\u4f8b\uff0c \u5b9e\u9645\u8c03\u7528\u4f20\u53c2......) super \u51fd\u6570 \u00b6 super(cls, obj) \u8fd4\u56de\u7ed1\u5b9a\u8d85\u7c7b\u7684\u5b9e\u4f8b\uff08\u8981\u6c42obj \u5fc5\u987b\u4e3acls\u7c7b\u578b\u7684\u5b9e\u4f8b\uff09 super() \u8fd4\u56de\u7ed1\u5b9a\u8d85\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7b49\u540c\u4e8esuper(__class__, \u5b9e\u4f8b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5fc5\u987b\u5728\u65b9\u6cd5\u5185\u8c03\u7528) \u4f5c\u7528 \u501f\u52a9super() \u8fd4\u56de\u5b9e\u4f8b\u95f4\u63a5\u8c03\u7528\u7236\u7c7b\u7684\u8986\u76d6\u65b9\u6cd5 # \u95ee\u9898\uff1a # \u5f53\u8986\u76d6\u53d1\u751f\u65f6\uff0c\u5b50\u7c7b\u5bf9\u8c61\u5982\u4f55\u8c03\u7528\u7236\u7c7b\u4e2d\u7684\u88ab\u8986\u76d6\u65b9\u6cd5\uff1f\uff1f # # \u8c03\u7528\u65b9\u5f0f # super\u51fd\u6570 class A : def work ( self ): print ( 'A.work \u88ab\u8c03\u7528' , self ) class B ( A ): '''B\u7c7b\u7ee7\u627fA\u7c7b''' def work ( self ): print ( 'B.work \u88ab\u8c03\u7528' , self ) def super_work ( self ): #\u8c03\u7528B\u7c7b\u81ea\u5df1\u7684work\u65b9\u6cd5 self . work () # \u8c03\u7528\u7236\u7c7b\u7684work super ( B , self ) . work () b = B () b . work () # \u8c03\u7528\u8c01\uff1f\uff1f super ( B , b ) . work () b . super_work () \u663e\u5f0f\u8c03\u7528\u57fa\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5 \u00b6 \u200b \u5f53\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u4e86__init__\u65b9\u6cd5\uff0c\u57fa\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u8c03\u7528\uff0c\u6b64\u65f6\u9700\u8981\u663e\u5f0f\u8c03\u7528 # \u6b64\u793a\u4f8b\u793a\u610f\u663e\u5f0f\u8c03\u7528\u521d\u59cb\u5316\u65b9\u6cd5 class Human : def __init__ ( self , n , a ): self . name = n self . age = a print ( 'Human\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u88ab\u8c03\u7528...' ) def infos ( self ): print ( '\u59d3\u540d:' , self . name ) print ( '\u5e74\u9f84:' , self . age ) class Student ( Human ): def __init__ ( self , n , a , s ): super ( Student , self ) . __init__ ( n , a ) self . score = s def infos ( self ): super ( Student , self ) . infos () print ( '\u6210\u7ee9' , self . score ) s1 = Student ( '\u5f20\u98de' , 15 , 100 ) s1 . infos () \u7528\u4e8e\u7c7b\u7684\u51fd\u6570 \u00b6 issubclass(cls, class_or_tuple) # \u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u7ee7\u627f\u81ea\u5176\u4ed6\u7684\u7c7b\uff0c\u5982\u679c\u6b64\u7c7bcls\u662fclass\u6216tuple\u4e2d\u4e00\u4e2a\u6d3e\u751f\u5b50\u7c7b\u5219\u8fd4\u56deTrue\uff0c \u5426\u5219\u8fd4\u56deFalse # \u793a\u4f8b class A : pass class B ( A ): pass class C ( B ): pass issubclass ( C , B ) # True issubclass ( B , A ) # True issubclass ( A , C ) # False \u5c01\u88c5 enclosure \u00b6 \u5c01\u88c5\u662f\u6307\u9690\u85cf\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u8ba9\u4f7f\u7528\u8005\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u7ec6\u8282 \u5c01\u88c5\u7684\u76ee\u7684\u662f\u8ba9\u4f7f\u7528\u8005\u901a\u8fc7\u5c3d\u53ef\u80fd\u5c11\u7684\u65b9\u6cd5\uff08\u6216\u5c5e\u6027\uff09\u64cd\u4f5c\u5bf9\u8c61 \u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5 \u00b6 python\u7c7b\u4e2d\uff0c\u4ee5\u53cc\u4e0b\u5212\u7ebf\uff08'__'\uff09\u5f00\u5934\uff0c\u4e0d\u4ee5\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u6807\u8bc6\u7b26\u4e3a\u79c1\u6709\u6210\u5458\uff0c \u79c1\u6709\u6210\u5458\u53ea\u80fd\u4f7f\u7528\u8be5\u7c7b\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539 1. \u4ee5__\u5f00\u5934\u7684\u5c5e\u6027\u4e3a\u79c1\u6709\u5c5e\u6027 2. \u4ee5__\u5f00\u5934\u7684\u65b9\u6cd5\u4e3a\u79c1\u6709\u65b9\u6cd5 \u6ce8\uff1a python\u7684\u5c01\u88c5\u662f\u5047\u7684\u5c01\u88c5\uff0c\u4e5f\u53eb\u6a21\u62df\u7684\u5c01\u88c5 # \u6b64\u793a\u4f8b\u793a\u610f\u7528\u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5\u6765\u5b9e\u73b0\u5c01\u88c5 class A : def __init__ ( self ): self . __p1 = 100 # << p1\u4e3a\u79c1\u6709\u5c5e\u6027 self . _p2 = 200 def show_info ( self ): print ( self . __p1 ) # \u6b64\u5bf9\u8c61\u7684\u5b9e\u4f8b\u65b9\u6cd5\u53ef\u4ee5\u4fee\u6539\u6b64\u79c1\u6709\u5c5e\u6027 self . __a () # \u8c03\u7528\u79c1\u6709\u65b9\u6cd5 def __a ( self ): print ( 'A\u7c7b\u5bf9\u8c61\u7684__a\u65b9\u6cd5\u88ab\u8c03\u7528' ) a = A () # print(a.__p1) # \u4e0d\u5141\u8bb8\u8bbf\u95ee\u79c1\u6709\u5c5e\u6027 print ( a . _p2 ) a . show_info () # a.__a() # \u51fa\u9519\uff0c\u9664A\u7c7b\u7684\u5b9e\u4f8b\u65b9\u6cd5\u5916\uff0c\u4e0d\u80fd\u8c03\u7528a\u5bf9\u8c61\u7684\u79c1\u6709\u65b9\u6cd5 \u591a\u6001 polymocphic \u00b6 \u5b57\u9762\u610f\u601d: \u591a\u79cd\u72b6\u6001 \u591a\u6001\u6307\u5728\u6709\u7ee7\u627f \u6d3e\u751f\u5173\u7cfb\u7684\u7c7b\u4e2d\uff0c\u8c03\u7528\u57fa\u7c7b\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5b9e\u9645\u80fd\u8c03\u7528\u5b50\u7c7b\u7684\u8986\u76d6\u65b9\u6cd5\u7684\u73b0\u8c61 \u7a0b\u5e8f\u7684\u72b6\u6001 \u00b6 \u9759\u6001\uff08\u7f16\u8bd1\u65f6\u72b6\u6001\uff09 \u52a8\u6001\uff08\u8fd0\u884c\u65f6\u72b6\u6001\uff09 \u8bf4\u660e \u591a\u6001\u8c03\u7528\u7684\u65b9\u6cd5\u4e0e\u5bf9\u8c61\u76f8\u5173\uff0c\u4e0d\u5199\u7c7b\u578b\u76f8\u5173\uff0cpython\u5168\u90e8\u5bf9\u8c61\u90fd\u53ea\u6709'\u8fd0\u884c\u65f6\u72b6\u6001\uff08\u52a8\u6001\uff09'\uff0c \u6ca1\u6709'C++'\u8bed\u8a00\u91cc\u7f16\u8bd1\u65f6\u7684\u72b6\u6001\uff08\u9759\u6001\uff09 # \u6b64\u793a\u4f8b\u793a\u610f\u9759\u6001\u548c\u52a8\u6001 class Shape : def draw ( self ): print ( 'Shape\u7684draw()\u88ab\u8c03\u7528' ) class Point ( Shape ): def draw ( self ): print ( '\u6b63\u5728\u753b\u4e00\u4e2a\u70b9' ) class Circle ( Point ): def draw ( self ): print ( '\u6b63\u5728\u753b\u4e00\u4e2a\u5706' ) def my_draw ( s ): s . draw () #<<----- \u6b64\u5904\u663e\u793a\u51fa\u591a\u6001\u4e2d\u7684'\u52a8\u6001' s1 = Circle () # \u521b\u5efa\u4e00\u4e2a\u5706\u5bf9\u8c61 s2 = Point () # \u521b\u5efa\u4e00\u4e2a\u70b9\u5bf9\u8c61 my_draw ( s1 ) my_draw ( s2 ) \u591a\u7ee7\u627f multiple inheritance \u00b6 \u591a\u7ee7\u627f\u662f\u6307\u4e00\u4e2a\u5b50\u7c7b\u7ee7\u627f\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u57fa\u7c7b \u8bed\u6cd5 class \u7c7b\u540d(\u7236\u7c7b\u540d\uff0c \u7236\u7c7b\u540d2....) \u8bf4\u660e \u4e00\u4e2a\u5b50\u7c7b\u540c\u65f6\u7ee7\u627f\u81ea\u591a\u4e2a\u7236\u7c7b\uff0c\u7236\u7c7b\u4e2d\u7684\u65b9\u6cd5\u53ef\u4ee5\u540c\u65f6\u7ee7\u627f\u4e0b\u6765 \u5982\u679c\u4e24\u4e2a\u7236\u7c7b\u4e2d\u6709\u540c\u540d\u65b9\u6cd5\uff0c\u800c\u5728\u5b50\u7c7b\u4e2d\u6ca1\u6709\u8986\u76d6\u6b64\u65b9\u6cd5\u65f6\uff0c\u8c03\u7528\u7ed3\u679c\u96be\u4ee5\u786e\u5b9a # \u6b64\u793a\u4f8b\u793a\u610f\u591a\u7ee7\u627f\u7684\u5b9a\u4e49\u8bed\u6cd5\u7684\u57fa\u672c\u7528\u6cd5 class Car : '''\u6c7d\u8f66\u7c7b''' def run ( self , speed ): print ( '\u6c7d\u8f66\u4ee5' , speed , '\u516c\u91cc/\u5c0f\u65f6\u7684\u901f\u5ea6\u884c\u9a76' ) class Plane : '''\u98de\u673a\u7c7b''' def fly ( self , height ): print ( '\u98de\u673a\u4ee5\u6d77\u62d4' , height , '\u7c73\u7684\u9ad8\u5ea6\u98de\u884c' ) class PlaneCar ( Car , Plane ): '''PlaneCar \u540c\u65f6\u7ee7\u627f\u81eaPlane\u7c7b\u548cCar\u7c7b''' pass pc = PlaneCar () # \u521b\u5efa\u4e00\u4e2a\u98de\u884c\u6c7d\u8f66\u5bf9\u8c61 pc . fly ( 10000 ) pc . run ( 300 ) \u591a\u7ee7\u627f\u7684\u7f3a\u9677 \u00b6 \u6807\u8bc6\u7b26\u51b2\u7a81\u95ee\u9898 \uff08\u8981\u8c28\u614e\u4f7f\u7528\u591a\u7ee7\u627f\uff09 # \u591a\u7ee7\u627f\u7684\u7f3a\u9677 # \u5c0f\u5f20\u5199\u4e86\u4e00\u4e2a\u7c7bA class A : def m ( self ): print ( 'A.m()\u88ab\u8c03\u7528' ) # \u5c0f\u674e\u5199\u4e86\u4e00\u4e2a\u7c7bB class B : def m ( self ): print ( 'B.m()\u88ab\u8c03\u7528' ) # \u5c0f\u738b\u611f\u89c9\u5c0f\u5f20\u548c\u5c0f\u674e\u5199\u7684\u7c7b\u81ea\u5df1\u90fd\u53ef\u4ee5\u7528 class AB ( A , B ): pass ab = AB () ab . m () # \u8bf7\u95ee\u8c03\u7528\u8c01\uff0c\u4e3a\u4ec0\u4e48 \u591a\u7ee7\u627f\u7684 \uff2d\uff32\uff2f\uff08Method Resolution Order\uff09 \u95ee\u9898 \u00b6 python3\u7c7b\u7684 __mro__\u5c5e\u6027 \u4f5c\u7528 \u7528\u6765\u8bb0\u5f55\u7c7b\u7684\u65b9\u6cd5\u7684\u67e5\u627e\u987a\u5e8f class A : def go ( self ): print ( 'A' ) class B ( A ): pass def go ( self ): print ( 'B' ) super () . go () class C ( A ): pass def go ( self ): print ( 'C' ) class D ( B , C ): pass def go ( self ): print ( 'D' ) super ( D , d ) . go () d = D () d . go () # super() \u51fd\u6570\u5c31\u662f\u6839\u636e__mro__\u6765\u8c03\u7528\u4e0a\u5c42\u7684\u65b9\u6cd5 \u7ec3\u4e60 \u00b6 \u5199\u4e00\u4e2a\u519c\u6c11\u7c7bPeasant\u6709\u65b9\u6cd5\uff1a def farm(self, plant): ... \u5199\u4e00\u4e2a\u5de5\u4eba\u7c7bWorker \u65b9\u6cd5\u5982\u4e0b\uff1a def work(self, that): ... \u521b\u5efa\u4e00\u4e2a\u519c\u6c11\u5de5\u4e3aMigrantWorker, \u8ba9\u6b64\u7c7b\u7684\u5bf9\u8c61\u62e5\u6709\u4e0a\u9762\u4e24\u4e2a\u7c7b\u7684\u5168\u90e8\u65b9\u6cd5 person = MigrantWorker() person.farm('\u6c34\u7a3b') # \u6b63\u5728\u79cd\u690d \u6c34\u7a3b person.work('\u6c7d\u8f66') # \u6b63\u5728\u5236\u9020 \u6c7d\u8f66 \u67e5\u770b\u5404\u4e2a\u7c7b\u7684__mro__\u5c5e\u6027 \u51fd\u6570\u91cd\u5199 overwrite \u00b6 \u4ec0\u4e48\u662f\u51fd\u6570\u91cd\u5199 \u5728\u81ea\u5b9a\u4e49\u7684\u7c7b\u6dfb\u52a0\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u8ba9\u81ea\u5b9a\u4e49\u7684\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b\u80fd\u591f\u4f7f\u7528\u5185\u5efa\u51fd\u6570\u4e00\u6837\u8fdb\u884c\u64cd\u4f5c \u5bf9\u8c61\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570 \u00b6 repr(x) \u8fd4\u56de\u4e00\u4e2a\u80fd\u8868\u793apython\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u901a\u5e38eval(repr(obj)) == obj str(x) \u901a\u8fc7\u7ed9\u5b9a\u7684\u5bf9\u8c61\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u8fd9\u4e2a\u5b57\u7b26\u4e32\u901a\u5e38\u4f9b\u4eba\u9605\u8bfb\uff09 \u793a\u4f8b s = 'I'mTeacher' print(str(s)) # I'mTeacher print(repr(s)) # 'I\\'mTeacher' \u5bf9\u8c61\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 \u00b6 repr() \u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 def __repr__(self): return \u5b57\u7b26\u4e32 str() \u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 def __str__(self): return \u5b57\u7b26\u4e32 str(obj) \u51fd\u6570\u8c03\u7528\u65b9\u6cd5\u8bf4\u660e 1. str(obj) \u51fd\u6570\u5148\u67e5\u627eobj.__str__(\u65b9\u6cd5)\uff0c\u8c03\u7528\u6b64\u65b9\u6cd5\u5e76\u8fd4\u56de\u7ed3\u679c 2. \u5982\u679cobj.__str__()\u65b9\u6cd5\u4e0d\u5b58\u5728\uff0c\u5219\u8c03\u7528obj.__repr__()\u65b9\u6cd5\u5e76\u8fd4\u56de\u7ed3\u679c 3. \u5982\u679cobj.__repe__\u65b9\u6cd5\u4e0d\u5b58\u5728\uff0c\u5219\u8c03\u7528object\u7c7b\u7684__repr__\u5b9e\u4f8b\u65b9\u6cd5\u663e\u793a<__main__.xxxx object at 0xXXXXXXXXXX> \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 # \u6b64\u793a\u4f8b\u793a\u610f\u5bf9\u8c61\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 class MyNumber (): def __init__ ( self , data ): self . data = data # \u5728\u6bcf\u4e2a\u5bf9\u8c61\u5185\u90e8\u90fd\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u91cf\u6765\u7ed1\u5b9a\u6570\u636e def __str__ ( self ): return '\u81ea\u5b9a\u4e49\u7684\u6570\u5b57\uff1a %d ' % self . data def __repr__ ( self ): '''\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u80fd\u8868\u8fbeself\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f''' return 'MyNumber( %d )' % self . data n1 = MyNumber ( 100 ) print ( 'str(n1) =' , str ( n1 )) print ( 'repr(n1) =' , repr ( n1 )) n2 = MyNumber ( 200 ) print ( n2 ) # \u5728print\u5185\u90e8\u4f1a\u5c06n2\u7528str(n2) \u8f6c\u4e3a\u5b57\u7b26\u4e32\u5199\u5230sys.stdout print ( str ( n2 )) print ( repr ( n2 )) \u5176\u4ed6\u5185\u5efa\u51fd\u6570\u7684\u91cd\u5199(\u90e8\u5206) \u00b6 \u65b9\u6cd5\u540d \u51fd\u6570\u540d def __abs__(self): abs(obj) \u51fd\u6570\u8c03\u7528 def __len__(self): len(obj) \u51fd\u6570\u8c03\u7528 def __reversed__(self): reversed(obj) \u51fd\u6570\u8c03\u7528 def __round__(self): round(obj) \u51fd\u6570\u8c03\u7528 class MyList : '''\u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5217\u8868\u7c7b\u578b\uff0c\u6b64\u7c7b\u578b\u7684\u5bf9\u8c61\u7528data\u5c5e\u6027\u7ed1\u5b9a\u7684\u5217\u8868\u6765\u5b58\u50a8\u6570\u636e''' def __init__ ( self , iterable = ()): self . __data = [ x for x in iterable ] def __len__ ( self ): return len ( self . __data ) def __str__ ( self ): return ' %s ' % self . __data def __repr__ ( self ): return 'MyList( %s )' % self . __data myl = MyList ( range ( 10 )) print ( myl ) print ( len ( myl )) \u6570\u503c\u8f6c\u5316\u51fd\u6570\u7684\u91cd\u5199 \u00b6 def __complex__(self): complex(obj) \u51fd\u6570\u8c03\u7528 def __init__(self): int(obj) \u51fd\u6570\u8c03\u7528 def __float__(self): float(obj) \u51fd\u6570\u8c03\u7528 def __bool__(self): bool(obj) \u51fd\u6570\u8c03\u7528 # \u6b64\u793a\u4f8b\u793a\u610f\u5bf9\u8c61\u6570\u503c\u8f6c\u6362\u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 class MyNumber (): def __init__ ( self , data ): self . data = data # \u5728\u6bcf\u4e2a\u5bf9\u8c61\u5185\u90e8\u90fd\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u91cf\u6765\u7ed1\u5b9a\u6570\u636e def __repr__ ( self ): '''\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u80fd\u8868\u8fbeself\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f''' return 'MyNumber( %d )' % self . data def __int__ ( self ): '''\u91cd\u5199int(obj)\u51fd\u6570''' return int ( self . data ) def __float__ ( self ): return float ( self . data ) n1 = MyNumber ( 100 ) n = int ( n1 ) f = float ( n1 ) print ( f ) c = complex ( n1 ) # \u5f53\u6ca1\u6709n1.__complex__() \u65f6\u4f1a\u8c03\u7528n1.__float__() + 0j \u9ed8\u8ba4\u67e5\u627e print ( c ) \u5e03\u5c14\u6d4b\u8bd5\u51fd\u6570\u7684\u91cd\u5199 \u00b6 \u683c\u5f0f def __bool__(self): ... \u4f5c\u7528 \u7528\u4e8ebool(obj) \u51fd\u6570\u53d6\u503c \u7528\u4e8eif\u8bed\u53e5\u771f\u503c\u8868\u8fbe\u5f0f\u4e2d \u7528\u4e8ewhile\u8bed\u53e5\u7684\u771f\u503c\u8868\u8fbe\u5f0f\u4e2d \u8bf4\u660e 1. \u5f53\u81ea\u5b9a\u4e49\u7c7b\u6709__bool__(self)\u65b9\u6cd5\u65f6\uff0c\u6b64\u65b9\u6cd5\u7684\u8fd4\u56de\u4f5c\u4e3abool(x)\u7684\u8fd4\u56de\u503c 2. \u5f53\u4e0d\u5b58\u5728__bool__(self) \u65b9\u6cd5\u65f6\uff0c\u8fd4\u56de__len__(self) \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u662f\u5426\u4e3a\u975e\u96f6\u6765\u6d4b\u8bd5\u5e03\u5c14\u503c 3. \u5f53\u4e0d\u5b58\u5728__len__(self) \u65b9\u6cd5\u65f6\uff0c\u5219\u76f4\u63a5\u8fd4\u56deTrue \u5bf9\u8c61\u7684\u5c5e\u6027\u7ba1\u7406\u51fd\u6570 \u00b6 getattr(obj, name[, defalut]) # \u4ece\u4e00\u4e2a\u5bf9\u8c61\u7528\u5b57\u7b26\u4e32name \u5f97\u5230\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c getattr(x, 'y') \u7b49\u540c\u4e8ex.y; \u5f53\u5c5e\u6027\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u7ed9\u5b9adefault\u53c2\u6570\u5219\u8fd4\u56dedefault\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fadefault\u5219\u89e6\u53d1\u4e00\u4e2aAttributeError\u7684\u9519\u8bef hasattr(obj, name, value) \u7528\u7ed9\u5b9a\u7684name \u5b57\u7b26\u4e32\u8fd4\u56deobj \u662f\u5426\u6709\u6b64\u5c5e\u6027\uff0c\u6b64\u79cd\u505a\u6cd5\u53ef\u4ee5\u907f\u514d\u5728gatattr(obj, name)\u65f6\u5f15\u53d1\u9519\u8bef setattr(obj, name, value) \u7ed9\u5bf9\u8c61obj\u7684\u540d\u4e3aname\u7684\u5c5e\u6027\u8bbe\u7f6e\u76f8\u5e94\u7684\u503cvalue\uff0csetattr(x, 'y', v)\u7b49\u540c\u4e8e x.y = v delattr(obj, name) \u5220\u9664\u5bf9\u8c61obj\u4e2d\u7684name\u5c5e\u6027\uff0c del(x, 'y') \u7b49\u540c\u4e8e del x.y","title":"\u7ee7\u627f\u6d3e\u751f"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#inheritance-derived","text":"\u4ec0\u4e48\u662f\u7ee7\u627f/\u6d3e\u751f 1. \u7ee7\u627f\u662f\u4ece\u5df2\u6709\u7684\u7c7b\u4e2d\u6d3e\u751f\u51fa\u7684\u65b0\u7c7b\uff0c\u65b0\u7c7b\u5177\u6709\u539f\u7c7b\u7684\u6570\u636e\u5c5e\u6027\u548c\u884c\u4e3a\uff0c\u5e76\u80fd\u6269\u5c55\u65b0\u7684\u884c\u4e3a 2. \u6d3e\u751f\u7c7b\u5c31\u662f\u4ece\u4e00\u4e2a\u5df2\u6709\u7684\u7c7b\u4e2d\u884d\u751f\u51fa\u65b0\u7684\u7c7b\uff0c\u5728\u65b0\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u6dfb\u52a0\u65b0\u7684\u5c5e\u6027\u548c\u884c\u4e3a \u4e3a\u4ec0\u4e48\u7ee7\u627f/\u6d3e\u751f 1. \u7ee7\u627f\u7684\u76ee\u7684\u662f\u5ef6\u7eed\u65e7\u7c7b\u7684\u529f\u80fd 2. \u6d3e\u751f\u7684\u76ee\u7684\u662f\u5728\u65e7\u7c7b\u7684\u57fa\u7840\u4e0a\u6539\u53d8\u539f\u6709\u7684\u529f\u80fd \u540d\u8bcd \u57fa\u7c7b(base class) / \u8d85\u7c7b(super calss) / \u7236\u7c7b(father class) \u6d3e\u751f\u7c7b(drived class) / \u5b50\u7c7b(child class)","title":"\u7ee7\u627f inheritance \u548c \u6d3e\u751f derived"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_1","text":"\u8bed\u6cd5 class \u7c7b\u540d(\u57fa\u7c7b\u540d): \u8bed\u53e5\u5757 \u8bf4\u660e \u5355\u7ee7\u627f\u662f\u6307\u6d3e\u751f\u7c7b\u7531\u4e00\u4e2a\u57fa\u7c7b\u884d\u751f\u51fa\u6765\u7684\u65b0\u7c7b # \u6b64\u793a\u4f8b\u793a\u610f\u5355\u7ee7\u627f\u7684\u5b9a\u4e49\u65b9\u6cd5\u548c\u7528\u6cd5 class Human : def say ( self , what ): print ( '\u8bf4:' , what ) def walk ( self , distance ): print ( '\u8d70\u4e86' , distance , '\u516c\u91cc' ) class Student ( Human ): def study ( self , subject ): print ( '\u6b63\u5728\u5b66\u4e60 %s ' % subject ) class Teacher ( Human ): def teach ( self , s ): print ( '\u6559\uff1a' , s ) h1 = Human () h1 . say ( '\u4eca\u5929\u5929\u6c14\u771f\u597d' ) h1 . walk ( 5 ) s1 = Student () s1 . walk ( 4 ) s1 . say ( '\u611f\u89c9\u6709\u70b9\u7d2f' ) s1 . study ( 'python' ) t1 = Teacher () t1 . walk ( 3 ) t1 . say ( '\u592a\u7d2f\u4e86\uff0c\u4eca\u665a\u5403\u5565' ) t1 . teach ( '\u9762\u5411\u5bf9\u8c61' )","title":"\u5355\u7ee7\u627f"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_2","text":"\u53ef\u4ee5\u5c06\u4e00\u4e9b\u5171\u6709\u7684\u529f\u80fd\u52a0\u5728\u57fa\u7c7b\u4e2d\u3002\u5b9e\u73b0\u4ee3\u7801\u7684\u5171\u4eab \u5728\u4e0d\u6539\u53d8\u57fa\u7c7b\u7684\u57fa\u7840\u4e0a\u6539\u53d8\u539f\u6709\u7684\u529f\u80fd","title":"\u7ee7\u627f\u6d3e\u751f\u673a\u5236\u7684\u4f5c\u7528"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_3","text":"python3 \u4efb\u4f55\u7c7b\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81eaobject\u7c7b object\u7c7b\u662f\u4e00\u5207\u7c7b\u7684\u8d85\u7c7b \u7c7b\u7684__base__\u5c5e\u6027 __base__\u5c5e\u6027\u7528\u6765\u8bb0\u5f55\u6b64\u7c7b\u7684\u7236\u7c7b python\u4e2d\u5185\u5efa\u7684\u7c7b help(__builtins__)","title":"\u7ee7\u627f\u8bf4\u660e"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#override","text":"\u4ec0\u4e48\u662f\u8986\u76d6 \u8986\u76d6\u662f\u6307\u5728\u6709\u7ee7\u627f\u5173\u7cfb\u7684\u7c7b\u4e2d\uff0c\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u4e86\u4e0e\u7236\u7c7b\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u5728\u5b50\u7c7b\u7684\u5b9e\u4f8b\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\uff0c\u5b9e\u9645\u8c03\u7528\u7684\u662f\u5b50\u7c7b\u4e2d\u7684\u8986\u76d6\u7248\u672c class A : def work ( self ): print ( 'A.work \u88ab\u8c03\u7528' ) class B ( A ): '''B\u7c7b\u7ee7\u627fA\u7c7b''' def work ( self ): print ( 'B.work \u88ab\u8c03\u7528' ) b = B () b . work () # \u8c03\u7528\u8c01\uff1f\uff1f a = A () a . work () # \u8c03\u7528\u8c01\uff1f\uff1f \u95ee\u9898\uff1a \u5f53\u8986\u76d6\u53d1\u751f\u65f6\uff0c\u5b50\u7c7b\u5bf9\u8c61\u5982\u4f55\u8c03\u7528\u7236\u7c7b\u4e2d\u7684\u88ab\u8986\u76d6\u65b9\u6cd5\uff1f\uff1f \u8c03\u7528\u65b9\u5f0f \u57fa\u7c7b\u540d.\u65b9\u6cd5\u540d(\u5b9e\u4f8b\uff0c \u5b9e\u9645\u8c03\u7528\u4f20\u53c2......)","title":"\u8986\u76d6override"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#super","text":"super(cls, obj) \u8fd4\u56de\u7ed1\u5b9a\u8d85\u7c7b\u7684\u5b9e\u4f8b\uff08\u8981\u6c42obj \u5fc5\u987b\u4e3acls\u7c7b\u578b\u7684\u5b9e\u4f8b\uff09 super() \u8fd4\u56de\u7ed1\u5b9a\u8d85\u7c7b\u7684\u5b9e\u4f8b\uff0c\u7b49\u540c\u4e8esuper(__class__, \u5b9e\u4f8b\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5fc5\u987b\u5728\u65b9\u6cd5\u5185\u8c03\u7528) \u4f5c\u7528 \u501f\u52a9super() \u8fd4\u56de\u5b9e\u4f8b\u95f4\u63a5\u8c03\u7528\u7236\u7c7b\u7684\u8986\u76d6\u65b9\u6cd5 # \u95ee\u9898\uff1a # \u5f53\u8986\u76d6\u53d1\u751f\u65f6\uff0c\u5b50\u7c7b\u5bf9\u8c61\u5982\u4f55\u8c03\u7528\u7236\u7c7b\u4e2d\u7684\u88ab\u8986\u76d6\u65b9\u6cd5\uff1f\uff1f # # \u8c03\u7528\u65b9\u5f0f # super\u51fd\u6570 class A : def work ( self ): print ( 'A.work \u88ab\u8c03\u7528' , self ) class B ( A ): '''B\u7c7b\u7ee7\u627fA\u7c7b''' def work ( self ): print ( 'B.work \u88ab\u8c03\u7528' , self ) def super_work ( self ): #\u8c03\u7528B\u7c7b\u81ea\u5df1\u7684work\u65b9\u6cd5 self . work () # \u8c03\u7528\u7236\u7c7b\u7684work super ( B , self ) . work () b = B () b . work () # \u8c03\u7528\u8c01\uff1f\uff1f super ( B , b ) . work () b . super_work ()","title":"super \u51fd\u6570"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_4","text":"\u200b \u5f53\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u4e86__init__\u65b9\u6cd5\uff0c\u57fa\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u8c03\u7528\uff0c\u6b64\u65f6\u9700\u8981\u663e\u5f0f\u8c03\u7528 # \u6b64\u793a\u4f8b\u793a\u610f\u663e\u5f0f\u8c03\u7528\u521d\u59cb\u5316\u65b9\u6cd5 class Human : def __init__ ( self , n , a ): self . name = n self . age = a print ( 'Human\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u88ab\u8c03\u7528...' ) def infos ( self ): print ( '\u59d3\u540d:' , self . name ) print ( '\u5e74\u9f84:' , self . age ) class Student ( Human ): def __init__ ( self , n , a , s ): super ( Student , self ) . __init__ ( n , a ) self . score = s def infos ( self ): super ( Student , self ) . infos () print ( '\u6210\u7ee9' , self . score ) s1 = Student ( '\u5f20\u98de' , 15 , 100 ) s1 . infos ()","title":"\u663e\u5f0f\u8c03\u7528\u57fa\u7c7b\u7684\u521d\u59cb\u5316\u65b9\u6cd5"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_5","text":"issubclass(cls, class_or_tuple) # \u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u7ee7\u627f\u81ea\u5176\u4ed6\u7684\u7c7b\uff0c\u5982\u679c\u6b64\u7c7bcls\u662fclass\u6216tuple\u4e2d\u4e00\u4e2a\u6d3e\u751f\u5b50\u7c7b\u5219\u8fd4\u56deTrue\uff0c \u5426\u5219\u8fd4\u56deFalse # \u793a\u4f8b class A : pass class B ( A ): pass class C ( B ): pass issubclass ( C , B ) # True issubclass ( B , A ) # True issubclass ( A , C ) # False","title":"\u7528\u4e8e\u7c7b\u7684\u51fd\u6570"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#enclosure","text":"\u5c01\u88c5\u662f\u6307\u9690\u85cf\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\uff0c\u8ba9\u4f7f\u7528\u8005\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u7ec6\u8282 \u5c01\u88c5\u7684\u76ee\u7684\u662f\u8ba9\u4f7f\u7528\u8005\u901a\u8fc7\u5c3d\u53ef\u80fd\u5c11\u7684\u65b9\u6cd5\uff08\u6216\u5c5e\u6027\uff09\u64cd\u4f5c\u5bf9\u8c61","title":"\u5c01\u88c5 enclosure"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_6","text":"python\u7c7b\u4e2d\uff0c\u4ee5\u53cc\u4e0b\u5212\u7ebf\uff08'__'\uff09\u5f00\u5934\uff0c\u4e0d\u4ee5\u53cc\u4e0b\u5212\u7ebf\u7ed3\u5c3e\u7684\u6807\u8bc6\u7b26\u4e3a\u79c1\u6709\u6210\u5458\uff0c \u79c1\u6709\u6210\u5458\u53ea\u80fd\u4f7f\u7528\u8be5\u7c7b\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u8bbf\u95ee\u548c\u4fee\u6539 1. \u4ee5__\u5f00\u5934\u7684\u5c5e\u6027\u4e3a\u79c1\u6709\u5c5e\u6027 2. \u4ee5__\u5f00\u5934\u7684\u65b9\u6cd5\u4e3a\u79c1\u6709\u65b9\u6cd5 \u6ce8\uff1a python\u7684\u5c01\u88c5\u662f\u5047\u7684\u5c01\u88c5\uff0c\u4e5f\u53eb\u6a21\u62df\u7684\u5c01\u88c5 # \u6b64\u793a\u4f8b\u793a\u610f\u7528\u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5\u6765\u5b9e\u73b0\u5c01\u88c5 class A : def __init__ ( self ): self . __p1 = 100 # << p1\u4e3a\u79c1\u6709\u5c5e\u6027 self . _p2 = 200 def show_info ( self ): print ( self . __p1 ) # \u6b64\u5bf9\u8c61\u7684\u5b9e\u4f8b\u65b9\u6cd5\u53ef\u4ee5\u4fee\u6539\u6b64\u79c1\u6709\u5c5e\u6027 self . __a () # \u8c03\u7528\u79c1\u6709\u65b9\u6cd5 def __a ( self ): print ( 'A\u7c7b\u5bf9\u8c61\u7684__a\u65b9\u6cd5\u88ab\u8c03\u7528' ) a = A () # print(a.__p1) # \u4e0d\u5141\u8bb8\u8bbf\u95ee\u79c1\u6709\u5c5e\u6027 print ( a . _p2 ) a . show_info () # a.__a() # \u51fa\u9519\uff0c\u9664A\u7c7b\u7684\u5b9e\u4f8b\u65b9\u6cd5\u5916\uff0c\u4e0d\u80fd\u8c03\u7528a\u5bf9\u8c61\u7684\u79c1\u6709\u65b9\u6cd5","title":"\u79c1\u6709\u5c5e\u6027\u548c\u65b9\u6cd5"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#polymocphic","text":"\u5b57\u9762\u610f\u601d: \u591a\u79cd\u72b6\u6001 \u591a\u6001\u6307\u5728\u6709\u7ee7\u627f \u6d3e\u751f\u5173\u7cfb\u7684\u7c7b\u4e2d\uff0c\u8c03\u7528\u57fa\u7c7b\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5b9e\u9645\u80fd\u8c03\u7528\u5b50\u7c7b\u7684\u8986\u76d6\u65b9\u6cd5\u7684\u73b0\u8c61","title":"\u591a\u6001 polymocphic"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_7","text":"\u9759\u6001\uff08\u7f16\u8bd1\u65f6\u72b6\u6001\uff09 \u52a8\u6001\uff08\u8fd0\u884c\u65f6\u72b6\u6001\uff09 \u8bf4\u660e \u591a\u6001\u8c03\u7528\u7684\u65b9\u6cd5\u4e0e\u5bf9\u8c61\u76f8\u5173\uff0c\u4e0d\u5199\u7c7b\u578b\u76f8\u5173\uff0cpython\u5168\u90e8\u5bf9\u8c61\u90fd\u53ea\u6709'\u8fd0\u884c\u65f6\u72b6\u6001\uff08\u52a8\u6001\uff09'\uff0c \u6ca1\u6709'C++'\u8bed\u8a00\u91cc\u7f16\u8bd1\u65f6\u7684\u72b6\u6001\uff08\u9759\u6001\uff09 # \u6b64\u793a\u4f8b\u793a\u610f\u9759\u6001\u548c\u52a8\u6001 class Shape : def draw ( self ): print ( 'Shape\u7684draw()\u88ab\u8c03\u7528' ) class Point ( Shape ): def draw ( self ): print ( '\u6b63\u5728\u753b\u4e00\u4e2a\u70b9' ) class Circle ( Point ): def draw ( self ): print ( '\u6b63\u5728\u753b\u4e00\u4e2a\u5706' ) def my_draw ( s ): s . draw () #<<----- \u6b64\u5904\u663e\u793a\u51fa\u591a\u6001\u4e2d\u7684'\u52a8\u6001' s1 = Circle () # \u521b\u5efa\u4e00\u4e2a\u5706\u5bf9\u8c61 s2 = Point () # \u521b\u5efa\u4e00\u4e2a\u70b9\u5bf9\u8c61 my_draw ( s1 ) my_draw ( s2 )","title":"\u7a0b\u5e8f\u7684\u72b6\u6001"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#multiple-inheritance","text":"\u591a\u7ee7\u627f\u662f\u6307\u4e00\u4e2a\u5b50\u7c7b\u7ee7\u627f\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u57fa\u7c7b \u8bed\u6cd5 class \u7c7b\u540d(\u7236\u7c7b\u540d\uff0c \u7236\u7c7b\u540d2....) \u8bf4\u660e \u4e00\u4e2a\u5b50\u7c7b\u540c\u65f6\u7ee7\u627f\u81ea\u591a\u4e2a\u7236\u7c7b\uff0c\u7236\u7c7b\u4e2d\u7684\u65b9\u6cd5\u53ef\u4ee5\u540c\u65f6\u7ee7\u627f\u4e0b\u6765 \u5982\u679c\u4e24\u4e2a\u7236\u7c7b\u4e2d\u6709\u540c\u540d\u65b9\u6cd5\uff0c\u800c\u5728\u5b50\u7c7b\u4e2d\u6ca1\u6709\u8986\u76d6\u6b64\u65b9\u6cd5\u65f6\uff0c\u8c03\u7528\u7ed3\u679c\u96be\u4ee5\u786e\u5b9a # \u6b64\u793a\u4f8b\u793a\u610f\u591a\u7ee7\u627f\u7684\u5b9a\u4e49\u8bed\u6cd5\u7684\u57fa\u672c\u7528\u6cd5 class Car : '''\u6c7d\u8f66\u7c7b''' def run ( self , speed ): print ( '\u6c7d\u8f66\u4ee5' , speed , '\u516c\u91cc/\u5c0f\u65f6\u7684\u901f\u5ea6\u884c\u9a76' ) class Plane : '''\u98de\u673a\u7c7b''' def fly ( self , height ): print ( '\u98de\u673a\u4ee5\u6d77\u62d4' , height , '\u7c73\u7684\u9ad8\u5ea6\u98de\u884c' ) class PlaneCar ( Car , Plane ): '''PlaneCar \u540c\u65f6\u7ee7\u627f\u81eaPlane\u7c7b\u548cCar\u7c7b''' pass pc = PlaneCar () # \u521b\u5efa\u4e00\u4e2a\u98de\u884c\u6c7d\u8f66\u5bf9\u8c61 pc . fly ( 10000 ) pc . run ( 300 )","title":"\u591a\u7ee7\u627f multiple inheritance"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_8","text":"\u6807\u8bc6\u7b26\u51b2\u7a81\u95ee\u9898 \uff08\u8981\u8c28\u614e\u4f7f\u7528\u591a\u7ee7\u627f\uff09 # \u591a\u7ee7\u627f\u7684\u7f3a\u9677 # \u5c0f\u5f20\u5199\u4e86\u4e00\u4e2a\u7c7bA class A : def m ( self ): print ( 'A.m()\u88ab\u8c03\u7528' ) # \u5c0f\u674e\u5199\u4e86\u4e00\u4e2a\u7c7bB class B : def m ( self ): print ( 'B.m()\u88ab\u8c03\u7528' ) # \u5c0f\u738b\u611f\u89c9\u5c0f\u5f20\u548c\u5c0f\u674e\u5199\u7684\u7c7b\u81ea\u5df1\u90fd\u53ef\u4ee5\u7528 class AB ( A , B ): pass ab = AB () ab . m () # \u8bf7\u95ee\u8c03\u7528\u8c01\uff0c\u4e3a\u4ec0\u4e48","title":"\u591a\u7ee7\u627f\u7684\u7f3a\u9677"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#mromethod-resolution-order","text":"python3\u7c7b\u7684 __mro__\u5c5e\u6027 \u4f5c\u7528 \u7528\u6765\u8bb0\u5f55\u7c7b\u7684\u65b9\u6cd5\u7684\u67e5\u627e\u987a\u5e8f class A : def go ( self ): print ( 'A' ) class B ( A ): pass def go ( self ): print ( 'B' ) super () . go () class C ( A ): pass def go ( self ): print ( 'C' ) class D ( B , C ): pass def go ( self ): print ( 'D' ) super ( D , d ) . go () d = D () d . go () # super() \u51fd\u6570\u5c31\u662f\u6839\u636e__mro__\u6765\u8c03\u7528\u4e0a\u5c42\u7684\u65b9\u6cd5","title":"\u591a\u7ee7\u627f\u7684 \uff2d\uff32\uff2f\uff08Method Resolution Order\uff09 \u95ee\u9898"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_9","text":"\u5199\u4e00\u4e2a\u519c\u6c11\u7c7bPeasant\u6709\u65b9\u6cd5\uff1a def farm(self, plant): ... \u5199\u4e00\u4e2a\u5de5\u4eba\u7c7bWorker \u65b9\u6cd5\u5982\u4e0b\uff1a def work(self, that): ... \u521b\u5efa\u4e00\u4e2a\u519c\u6c11\u5de5\u4e3aMigrantWorker, \u8ba9\u6b64\u7c7b\u7684\u5bf9\u8c61\u62e5\u6709\u4e0a\u9762\u4e24\u4e2a\u7c7b\u7684\u5168\u90e8\u65b9\u6cd5 person = MigrantWorker() person.farm('\u6c34\u7a3b') # \u6b63\u5728\u79cd\u690d \u6c34\u7a3b person.work('\u6c7d\u8f66') # \u6b63\u5728\u5236\u9020 \u6c7d\u8f66 \u67e5\u770b\u5404\u4e2a\u7c7b\u7684__mro__\u5c5e\u6027","title":"\u7ec3\u4e60"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#overwrite","text":"\u4ec0\u4e48\u662f\u51fd\u6570\u91cd\u5199 \u5728\u81ea\u5b9a\u4e49\u7684\u7c7b\u6dfb\u52a0\u76f8\u5e94\u7684\u65b9\u6cd5\uff0c\u8ba9\u81ea\u5b9a\u4e49\u7684\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b\u80fd\u591f\u4f7f\u7528\u5185\u5efa\u51fd\u6570\u4e00\u6837\u8fdb\u884c\u64cd\u4f5c","title":"\u51fd\u6570\u91cd\u5199 overwrite"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_10","text":"repr(x) \u8fd4\u56de\u4e00\u4e2a\u80fd\u8868\u793apython\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u901a\u5e38eval(repr(obj)) == obj str(x) \u901a\u8fc7\u7ed9\u5b9a\u7684\u5bf9\u8c61\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u8fd9\u4e2a\u5b57\u7b26\u4e32\u901a\u5e38\u4f9b\u4eba\u9605\u8bfb\uff09 \u793a\u4f8b s = 'I'mTeacher' print(str(s)) # I'mTeacher print(repr(s)) # 'I\\'mTeacher'","title":"\u5bf9\u8c61\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_11","text":"repr() \u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 def __repr__(self): return \u5b57\u7b26\u4e32 str() \u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 def __str__(self): return \u5b57\u7b26\u4e32 str(obj) \u51fd\u6570\u8c03\u7528\u65b9\u6cd5\u8bf4\u660e 1. str(obj) \u51fd\u6570\u5148\u67e5\u627eobj.__str__(\u65b9\u6cd5)\uff0c\u8c03\u7528\u6b64\u65b9\u6cd5\u5e76\u8fd4\u56de\u7ed3\u679c 2. \u5982\u679cobj.__str__()\u65b9\u6cd5\u4e0d\u5b58\u5728\uff0c\u5219\u8c03\u7528obj.__repr__()\u65b9\u6cd5\u5e76\u8fd4\u56de\u7ed3\u679c 3. \u5982\u679cobj.__repe__\u65b9\u6cd5\u4e0d\u5b58\u5728\uff0c\u5219\u8c03\u7528object\u7c7b\u7684__repr__\u5b9e\u4f8b\u65b9\u6cd5\u663e\u793a<__main__.xxxx object at 0xXXXXXXXXXX> \u683c\u5f0f\u7684\u5b57\u7b26\u4e32 # \u6b64\u793a\u4f8b\u793a\u610f\u5bf9\u8c61\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 class MyNumber (): def __init__ ( self , data ): self . data = data # \u5728\u6bcf\u4e2a\u5bf9\u8c61\u5185\u90e8\u90fd\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u91cf\u6765\u7ed1\u5b9a\u6570\u636e def __str__ ( self ): return '\u81ea\u5b9a\u4e49\u7684\u6570\u5b57\uff1a %d ' % self . data def __repr__ ( self ): '''\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u80fd\u8868\u8fbeself\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f''' return 'MyNumber( %d )' % self . data n1 = MyNumber ( 100 ) print ( 'str(n1) =' , str ( n1 )) print ( 'repr(n1) =' , repr ( n1 )) n2 = MyNumber ( 200 ) print ( n2 ) # \u5728print\u5185\u90e8\u4f1a\u5c06n2\u7528str(n2) \u8f6c\u4e3a\u5b57\u7b26\u4e32\u5199\u5230sys.stdout print ( str ( n2 )) print ( repr ( n2 ))","title":"\u5bf9\u8c61\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_12","text":"\u65b9\u6cd5\u540d \u51fd\u6570\u540d def __abs__(self): abs(obj) \u51fd\u6570\u8c03\u7528 def __len__(self): len(obj) \u51fd\u6570\u8c03\u7528 def __reversed__(self): reversed(obj) \u51fd\u6570\u8c03\u7528 def __round__(self): round(obj) \u51fd\u6570\u8c03\u7528 class MyList : '''\u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5217\u8868\u7c7b\u578b\uff0c\u6b64\u7c7b\u578b\u7684\u5bf9\u8c61\u7528data\u5c5e\u6027\u7ed1\u5b9a\u7684\u5217\u8868\u6765\u5b58\u50a8\u6570\u636e''' def __init__ ( self , iterable = ()): self . __data = [ x for x in iterable ] def __len__ ( self ): return len ( self . __data ) def __str__ ( self ): return ' %s ' % self . __data def __repr__ ( self ): return 'MyList( %s )' % self . __data myl = MyList ( range ( 10 )) print ( myl ) print ( len ( myl ))","title":"\u5176\u4ed6\u5185\u5efa\u51fd\u6570\u7684\u91cd\u5199(\u90e8\u5206)"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_13","text":"def __complex__(self): complex(obj) \u51fd\u6570\u8c03\u7528 def __init__(self): int(obj) \u51fd\u6570\u8c03\u7528 def __float__(self): float(obj) \u51fd\u6570\u8c03\u7528 def __bool__(self): bool(obj) \u51fd\u6570\u8c03\u7528 # \u6b64\u793a\u4f8b\u793a\u610f\u5bf9\u8c61\u6570\u503c\u8f6c\u6362\u51fd\u6570\u7684\u91cd\u5199\u65b9\u6cd5 class MyNumber (): def __init__ ( self , data ): self . data = data # \u5728\u6bcf\u4e2a\u5bf9\u8c61\u5185\u90e8\u90fd\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u53d8\u91cf\u6765\u7ed1\u5b9a\u6570\u636e def __repr__ ( self ): '''\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u80fd\u8868\u8fbeself\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f''' return 'MyNumber( %d )' % self . data def __int__ ( self ): '''\u91cd\u5199int(obj)\u51fd\u6570''' return int ( self . data ) def __float__ ( self ): return float ( self . data ) n1 = MyNumber ( 100 ) n = int ( n1 ) f = float ( n1 ) print ( f ) c = complex ( n1 ) # \u5f53\u6ca1\u6709n1.__complex__() \u65f6\u4f1a\u8c03\u7528n1.__float__() + 0j \u9ed8\u8ba4\u67e5\u627e print ( c )","title":"\u6570\u503c\u8f6c\u5316\u51fd\u6570\u7684\u91cd\u5199"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_14","text":"\u683c\u5f0f def __bool__(self): ... \u4f5c\u7528 \u7528\u4e8ebool(obj) \u51fd\u6570\u53d6\u503c \u7528\u4e8eif\u8bed\u53e5\u771f\u503c\u8868\u8fbe\u5f0f\u4e2d \u7528\u4e8ewhile\u8bed\u53e5\u7684\u771f\u503c\u8868\u8fbe\u5f0f\u4e2d \u8bf4\u660e 1. \u5f53\u81ea\u5b9a\u4e49\u7c7b\u6709__bool__(self)\u65b9\u6cd5\u65f6\uff0c\u6b64\u65b9\u6cd5\u7684\u8fd4\u56de\u4f5c\u4e3abool(x)\u7684\u8fd4\u56de\u503c 2. \u5f53\u4e0d\u5b58\u5728__bool__(self) \u65b9\u6cd5\u65f6\uff0c\u8fd4\u56de__len__(self) \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u662f\u5426\u4e3a\u975e\u96f6\u6765\u6d4b\u8bd5\u5e03\u5c14\u503c 3. \u5f53\u4e0d\u5b58\u5728__len__(self) \u65b9\u6cd5\u65f6\uff0c\u5219\u76f4\u63a5\u8fd4\u56deTrue","title":"\u5e03\u5c14\u6d4b\u8bd5\u51fd\u6570\u7684\u91cd\u5199"},{"location":"python/%E7%BB%A7%E6%89%BF%E6%B4%BE%E7%94%9F/#_15","text":"getattr(obj, name[, defalut]) # \u4ece\u4e00\u4e2a\u5bf9\u8c61\u7528\u5b57\u7b26\u4e32name \u5f97\u5230\u5bf9\u8c61\u7684\u5c5e\u6027\uff0c getattr(x, 'y') \u7b49\u540c\u4e8ex.y; \u5f53\u5c5e\u6027\u4e0d\u5b58\u5728\u65f6\uff0c\u5982\u679c\u7ed9\u5b9adefault\u53c2\u6570\u5219\u8fd4\u56dedefault\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fadefault\u5219\u89e6\u53d1\u4e00\u4e2aAttributeError\u7684\u9519\u8bef hasattr(obj, name, value) \u7528\u7ed9\u5b9a\u7684name \u5b57\u7b26\u4e32\u8fd4\u56deobj \u662f\u5426\u6709\u6b64\u5c5e\u6027\uff0c\u6b64\u79cd\u505a\u6cd5\u53ef\u4ee5\u907f\u514d\u5728gatattr(obj, name)\u65f6\u5f15\u53d1\u9519\u8bef setattr(obj, name, value) \u7ed9\u5bf9\u8c61obj\u7684\u540d\u4e3aname\u7684\u5c5e\u6027\u8bbe\u7f6e\u76f8\u5e94\u7684\u503cvalue\uff0csetattr(x, 'y', v)\u7b49\u540c\u4e8e x.y = v delattr(obj, name) \u5220\u9664\u5bf9\u8c61obj\u4e2d\u7684name\u5c5e\u6027\uff0c del(x, 'y') \u7b49\u540c\u4e8e del x.y","title":"\u5bf9\u8c61\u7684\u5c5e\u6027\u7ba1\u7406\u51fd\u6570"},{"location":"python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","text":"\u4ec0\u4e48\u662f\u865a\u62df\u73af\u5883\uff1f \u00b6 \u5230\u5e95\u4ec0\u4e48\u662f\u865a\u62df\u73af\u5883\uff1f \u865a\u62df\u73af\u5883\u662f\u7528\u4e8e\u4f9d\u8d56\u9879\u7ba1\u7406\u548c\u9879\u76ee\u9694\u79bb\u7684Python\u5de5\u5177\uff0c\u5141\u8bb8Python\u7ad9\u70b9\u5305\uff08\u7b2c\u4e09\u65b9\u5e93\uff09\u5b89\u88c5\u5728\u672c\u5730\u7279\u5b9a\u9879\u76ee\u7684\u9694\u79bb\u76ee\u5f55\u4e2d\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u5b89\u88c5\uff08\u5373\u4f5c\u4e3a\u7cfb\u7edf\u8303\u56f4\u5185\u7684Python\u7684\u4e00\u90e8\u5206\uff09\u3002 \u8fd9\u542c\u8d77\u6765\u4e0d\u9519\uff0c\u4f46\u5230\u5e95\u4ec0\u4e48\u662f\u865a\u62df\u73af\u5883\u5462\uff1f\u865a\u62df\u73af\u5883\u53ea\u662f\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u91cd\u8981\u7ec4\u4ef6\u7684\u76ee\u5f55\uff1a \u5b89\u88c5\u4e86\u7b2c\u4e09\u65b9\u5e93\u7684site-packages /\u6587\u4ef6\u5939\u3002 \u7cfb\u7edf\u4e0a\u5b89\u88c5\u7684Python\u53ef\u6267\u884c\u6587\u4ef6\u7684symlink\u7b26\u53f7\u94fe\u63a5\u3002 \u786e\u4fdd\u6267\u884cPython\u4ee3\u7801\u7684\u811a\u672c\u4f7f\u7528\u5728\u7ed9\u5b9a\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u7684Python\u89e3\u91ca\u5668\u548c\u7ad9\u70b9\u5305\u3002 \u4f7f\u7528\u865a\u62df\u73af\u5883 \u00b6 \u5b89\u88c5virtualenv pip3 install virtualenv \u521b\u5efa\u865a\u62df\u73af\u5883 virtualenv --python = python3 spider_venv \u5207\u6362\u865a\u62df\u73af\u5883 deactivate cd spider_venv/bin source activate \u5728\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u5305 pip install ... \u9000\u51fa\u865a\u62df\u73af\u5883 deactivate \u7ba1\u7406\u73af\u5883 \u00b6 \u4f7f\u6211\u4eec\u7684\u5de5\u4f5c\u6210\u679c\u53ef\u88ab\u4ed6\u4eba\u91cd\u590d\u4f7f\u7528\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e2d\u52a0\u5165\u4e00\u4e2a\u9700\u6c42\u6587\u4ef6\u3002 pip3 freeze > requirements.txt \u66f4\u65b0\u8f6f\u4ef6\u5305\u6216\u5b89\u88c5\u65b0\u8f6f\u4ef6\u5305\u65f6\uff0c\u90fd\u53ef\u4f7f\u7528\u76f8\u540c\u7684\u547d\u4ee4\u91cd\u5199\u9700\u6c42\u6587\u4ef6\u3002 \u73b0\u5728\uff0c\u4efb\u4f55\u5171\u4eab\u9879\u76ee\u7684\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528requirements.txt\u6587\u4ef6\uff0c\u901a\u8fc7\u590d\u5236\u73af\u5883\u4ee5\u5728\u7cfb\u7edf\u4e0a\u8fd0\u884c\u9879\u76ee\u3002 \u5b9e\u73b0\u539f\u7406 \u00b6 \u60f3\u4e86\u89e3\u66f4\u591a\u6709\u5173\u865a\u62df\u73af\u5883\u7684\u4fe1\u606f\u5417\uff1f\u6bd4\u5982\uff0c\u6d3b\u52a8\u73af\u5883\u5982\u4f55\u4f7f\u7528\u6b63\u786e\u7684Python\u89e3\u91ca\u7a0b\u5e8f\u5e76\u5982\u4f55\u627e\u5230\u5408\u9002\u7684\u7b2c\u4e09\u65b9\u5e93\uff1f echo $ PATH \u8fd9\u4e00\u5207\u90fd\u5f52\u7ed3\u4e3aPATH\u7684\u4ef7\u503c\uff0c\u5b83\u544a\u8bc9shell\u4f7f\u7528\u4ec0\u4e48Python\u5b9e\u4f8b\u4ee5\u53ca\u5728\u54ea\u91cc\u5bfb\u627e\u7f51\u7ad9\u5305\u3002\u5728\u57fa\u7840shell\u4e2d\uff0cPATH\u770b\u8d77\u6765\u6216\u591a\u6216\u5c11\u662f\u8fd9\u6837\u8868\u73b0\u7684\u3002 % echo $PATH/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin \u8c03\u7528Python\u89e3\u91ca\u5668\u6216\u8fd0\u884c.py\u811a\u672c\u65f6\uff0cshell\u4f1a\u6309\u987a\u5e8f\u641c\u7d22PATH\u4e2d\u5217\u51fa\u7684\u76ee\u5f55\uff0c\u76f4\u5230\u9047\u5230Python\u5b9e\u4f8b\u3002\u8981\u67e5\u770bPATH\u9996\u5148\u627e\u5230\u7684Python\u5b9e\u4f8b\uff0c\u8bf7\u8fd0\u884cwhich python3\u3002 % which python3 /usr/local/bin/python3 # Your output may differ \u901a\u8fc7\u7ad9\u70b9\u6a21\u5757\uff08\u8fd9\u662fPython\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff09\u67e5\u627e\u6b64Python\u5b9e\u4f8b\u67e5\u627e\u7ad9\u70b9\u5305\u7684\u4f4d\u7f6e\u4e5f\u5f88\u5bb9\u6613\u3002 % python3 # Activates a Python shell >>> import site >>> site.getsitepackages() # Points to site-packages folder['/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages'] \u8fd0\u884c\u811a\u672cvenv / bin / activate\u4fee\u6539PATH\uff0c\u4ee5\u4fbfshell\u5728\u641c\u7d22\u7cfb\u7edf\u7684\u5168\u5c40\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e4b\u524d\u641c\u7d22\u9879\u76ee\u7684\u672c\u5730\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 % cd ~/test-project/ % source venv/bin/activate(ven) % echo $PATH~/test-project/venv/bin:/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin \u73b0\u5728shell\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u9879\u76ee\u7684\u672c\u5730Python\u5b9e\u4f8b\uff1a (venv) % which python3 ~/test-project/venv/bin/python3 \u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u9879\u76ee\u7684\u672c\u5730\u7ad9\u70b9\u5305\uff1f (venv) % python3 >>> import site >>> site.getsitepackages() ['~/test-project/venv/lib/python3.7/site-packages'] # Ka-ching","title":"\u865a\u62df\u73af\u5883"},{"location":"python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#_1","text":"\u5230\u5e95\u4ec0\u4e48\u662f\u865a\u62df\u73af\u5883\uff1f \u865a\u62df\u73af\u5883\u662f\u7528\u4e8e\u4f9d\u8d56\u9879\u7ba1\u7406\u548c\u9879\u76ee\u9694\u79bb\u7684Python\u5de5\u5177\uff0c\u5141\u8bb8Python\u7ad9\u70b9\u5305\uff08\u7b2c\u4e09\u65b9\u5e93\uff09\u5b89\u88c5\u5728\u672c\u5730\u7279\u5b9a\u9879\u76ee\u7684\u9694\u79bb\u76ee\u5f55\u4e2d\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u5b89\u88c5\uff08\u5373\u4f5c\u4e3a\u7cfb\u7edf\u8303\u56f4\u5185\u7684Python\u7684\u4e00\u90e8\u5206\uff09\u3002 \u8fd9\u542c\u8d77\u6765\u4e0d\u9519\uff0c\u4f46\u5230\u5e95\u4ec0\u4e48\u662f\u865a\u62df\u73af\u5883\u5462\uff1f\u865a\u62df\u73af\u5883\u53ea\u662f\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u91cd\u8981\u7ec4\u4ef6\u7684\u76ee\u5f55\uff1a \u5b89\u88c5\u4e86\u7b2c\u4e09\u65b9\u5e93\u7684site-packages /\u6587\u4ef6\u5939\u3002 \u7cfb\u7edf\u4e0a\u5b89\u88c5\u7684Python\u53ef\u6267\u884c\u6587\u4ef6\u7684symlink\u7b26\u53f7\u94fe\u63a5\u3002 \u786e\u4fdd\u6267\u884cPython\u4ee3\u7801\u7684\u811a\u672c\u4f7f\u7528\u5728\u7ed9\u5b9a\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u7684Python\u89e3\u91ca\u5668\u548c\u7ad9\u70b9\u5305\u3002","title":"\u4ec0\u4e48\u662f\u865a\u62df\u73af\u5883\uff1f"},{"location":"python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#_2","text":"\u5b89\u88c5virtualenv pip3 install virtualenv \u521b\u5efa\u865a\u62df\u73af\u5883 virtualenv --python = python3 spider_venv \u5207\u6362\u865a\u62df\u73af\u5883 deactivate cd spider_venv/bin source activate \u5728\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u5305 pip install ... \u9000\u51fa\u865a\u62df\u73af\u5883 deactivate","title":"\u4f7f\u7528\u865a\u62df\u73af\u5883"},{"location":"python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#_3","text":"\u4f7f\u6211\u4eec\u7684\u5de5\u4f5c\u6210\u679c\u53ef\u88ab\u4ed6\u4eba\u91cd\u590d\u4f7f\u7528\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e2d\u52a0\u5165\u4e00\u4e2a\u9700\u6c42\u6587\u4ef6\u3002 pip3 freeze > requirements.txt \u66f4\u65b0\u8f6f\u4ef6\u5305\u6216\u5b89\u88c5\u65b0\u8f6f\u4ef6\u5305\u65f6\uff0c\u90fd\u53ef\u4f7f\u7528\u76f8\u540c\u7684\u547d\u4ee4\u91cd\u5199\u9700\u6c42\u6587\u4ef6\u3002 \u73b0\u5728\uff0c\u4efb\u4f55\u5171\u4eab\u9879\u76ee\u7684\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528requirements.txt\u6587\u4ef6\uff0c\u901a\u8fc7\u590d\u5236\u73af\u5883\u4ee5\u5728\u7cfb\u7edf\u4e0a\u8fd0\u884c\u9879\u76ee\u3002","title":"\u7ba1\u7406\u73af\u5883"},{"location":"python/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/#_4","text":"\u60f3\u4e86\u89e3\u66f4\u591a\u6709\u5173\u865a\u62df\u73af\u5883\u7684\u4fe1\u606f\u5417\uff1f\u6bd4\u5982\uff0c\u6d3b\u52a8\u73af\u5883\u5982\u4f55\u4f7f\u7528\u6b63\u786e\u7684Python\u89e3\u91ca\u7a0b\u5e8f\u5e76\u5982\u4f55\u627e\u5230\u5408\u9002\u7684\u7b2c\u4e09\u65b9\u5e93\uff1f echo $ PATH \u8fd9\u4e00\u5207\u90fd\u5f52\u7ed3\u4e3aPATH\u7684\u4ef7\u503c\uff0c\u5b83\u544a\u8bc9shell\u4f7f\u7528\u4ec0\u4e48Python\u5b9e\u4f8b\u4ee5\u53ca\u5728\u54ea\u91cc\u5bfb\u627e\u7f51\u7ad9\u5305\u3002\u5728\u57fa\u7840shell\u4e2d\uff0cPATH\u770b\u8d77\u6765\u6216\u591a\u6216\u5c11\u662f\u8fd9\u6837\u8868\u73b0\u7684\u3002 % echo $PATH/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin \u8c03\u7528Python\u89e3\u91ca\u5668\u6216\u8fd0\u884c.py\u811a\u672c\u65f6\uff0cshell\u4f1a\u6309\u987a\u5e8f\u641c\u7d22PATH\u4e2d\u5217\u51fa\u7684\u76ee\u5f55\uff0c\u76f4\u5230\u9047\u5230Python\u5b9e\u4f8b\u3002\u8981\u67e5\u770bPATH\u9996\u5148\u627e\u5230\u7684Python\u5b9e\u4f8b\uff0c\u8bf7\u8fd0\u884cwhich python3\u3002 % which python3 /usr/local/bin/python3 # Your output may differ \u901a\u8fc7\u7ad9\u70b9\u6a21\u5757\uff08\u8fd9\u662fPython\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\uff09\u67e5\u627e\u6b64Python\u5b9e\u4f8b\u67e5\u627e\u7ad9\u70b9\u5305\u7684\u4f4d\u7f6e\u4e5f\u5f88\u5bb9\u6613\u3002 % python3 # Activates a Python shell >>> import site >>> site.getsitepackages() # Points to site-packages folder['/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages'] \u8fd0\u884c\u811a\u672cvenv / bin / activate\u4fee\u6539PATH\uff0c\u4ee5\u4fbfshell\u5728\u641c\u7d22\u7cfb\u7edf\u7684\u5168\u5c40\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e4b\u524d\u641c\u7d22\u9879\u76ee\u7684\u672c\u5730\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 % cd ~/test-project/ % source venv/bin/activate(ven) % echo $PATH~/test-project/venv/bin:/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin \u73b0\u5728shell\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u9879\u76ee\u7684\u672c\u5730Python\u5b9e\u4f8b\uff1a (venv) % which python3 ~/test-project/venv/bin/python3 \u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u9879\u76ee\u7684\u672c\u5730\u7ad9\u70b9\u5305\uff1f (venv) % python3 >>> import site >>> site.getsitepackages() ['~/test-project/venv/lib/python3.7/site-packages'] # Ka-ching","title":"\u5b9e\u73b0\u539f\u7406"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/","text":"del \u8bed\u53e5 \u00b6 \u7528\u4e8e\u5220\u9664\u5217\u8868\u7684\u5143\u7d20 \u8bed\u6cd5: del \u5217\u8868[\u7d22\u5f15] \u5982: del L[0] del \u5217\u8868[\u5207\u7247] \u5982: del L[1::2] python 3\u4e2d\u5e38\u7528\u4e8e\u5e8f\u5217\u7684\u51fd\u6570 \u00b6 len(s) \u8fd4\u56de\u5e8f\u5217\u7684\u957f\u5ea6 max(x) \u8fd4\u56de\u5e8f\u5217\u7684\u6700\u5927\u503c\u5143\u7d20 min(x) \u8fd4\u56de\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u5143\u7d20 sum(x) \u8fd4\u56de\u5217\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c(\u5143\u7d20\u5fc5\u987b\u662f\u6570\u503c\u7c7b\u578b) any(x) \u771f\u503c\u6d4b\u8bd5,\u5982\u679c\u5217\u8868\u4e2d\u5176\u4e2d\u4e00\u4e2a\u503c\u4e3a\u771f\u503c\u5219\u8fd4\u56deTrue all(x) \u771f\u503c\u6d4b\u8bd5,\u5982\u679c\u5217\u8868\u4e2d\u6240\u6709\u503c\u4e3a\u771f\u503c\u8fd4\u56deTrue L = [ 3 , 1 , 9 , 7 , 5 ] print ( len ( L )) # 5 print ( max ( L )) # 9 print ( min ( L )) # 1 print ( sum ( L )) # 25 \u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d \u00b6 \u6d45\u62f7\u8d1d shallow copy \u6d45\u62f7\u8d1d\u662f\u6307\u5728\u590d\u5236\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u590d\u5236\u4e00\u5c42\u53d8\u91cf\uff0c\u4e0d\u4f1a\u590d\u5236\u6df1\u5c42\u53d8\u91cf\u7ed1\u5b9a\u7684\u5bf9\u8c61\u7684\u590d\u5236\u8fc7\u7a0b L = [ 3.1 , 3.2 ] L1 = [ 1 , 2 , L ] L2 = L1 . copy () # \u6d45\u62f7\u8d1d print ( L1 ) # [1, 2, [3.1, 3.2]] print ( L2 ) # [1, 2, [3.1, 3.2]] L2 [ 2 ][ 0 ] = 3.14 print ( L1 ) # [1, 2, [3.14, 3.2]] print ( L2 ) # [1, 2, [3.14, 3.2]] \u6df1\u62f7\u8d1d deep copy \u590d\u5236\u5bf9\u8c61\u53ca\u5bf9\u8c61\u5173\u8054\u7684\u5bf9\u8c61\u4e00\u8d77\u590d\u5236\u8fc7\u7a0b\u53eb\u6df1\u62f7\u8d1d import copy # \u5bfc\u5165\u590d\u5236\u6a21\u5757 L = [ 3.1 , 3.2 ] L1 = [ 1 , 2 , L ] L2 = copy . deepcopy ( L1 ) \u3000 # \u6df1\u62f7\u8d1d print ( L1 ) # [1, 2, [3.1, 3.2]] print ( L2 ) # [1, 2, [3.1, 3.2]] L2 [ 2 ][ 0 ] = 3.14 print ( L1 ) # [1, 2, [3.1, 3.2]]\u3000\u3000<<< L1\u4e0d\u53d8 print ( L2 ) # [1, 2, [3.14, 3.2]] \u5217\u8868\u548c\u5b57\u7b26\u4e32\u6bd4\u8f83 \u00b6 \u90fd\u662f\u5e8f\u5217\uff0c\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb\uff0c\u6709\u76f8\u540c\u7684\u8fd0\u7b97\u64cd\u4f5c \u5217\u8868\u662f\u53ef\u53d8\u662f\uff0c\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684 \u5217\u8868\u53ef\u4ee5\u5b58\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5b57\u7b26\u4e32\u53ea\u80fd\u5b58\u5b57\u7b26 \u5b57\u7b26\u4e32\u7684\u6587\u672c\u89e3\u6790\u65b9\u6cd5 \u00b6 S.split(sep=None) \u5c06\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 sep\u4f5c\u7528\u5206\u9694\u7b26\u5206\u5272S\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5206\u5272\u540e\u7684\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5f53\u4e0d\u7ed9\u5b9a\u53c2\u6570\u65f6\uff0c\u7528\u7a7a\u767d\u5b57\u7b26\u4f5c\u4e3a\u5206\u9694\u7b26\u5206\u5272 S.join(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e00\u4e2a\u4e2d\u95f4\u7528S\u8fdb\u884c\u5206\u9694\u7684\u5b57\u7b26\u4e32 s = 'Beijing is capital' L = s . split ( ' ' ) # L = ['hello', 'world', 'tarena'] s2 = \"hello#world#tarena\" L = s2 . split ( '#' ) # L = ['hello', 'world', 'tarena'] L = [ 'aaa' , 'bbbb' , 'ccccc' ] '$' . join ( L ) # \u751f\u6210 'aaa$bbbb$ccccc' python3 \u4e2d\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b \u00b6 bool, int, float, complex, str, tuple, frozenset, bytes python3 \u4e2d\u53ef\u53d8\u6570\u636e\u7c7b\u578b \u00b6 list, dict, set, bytearray \u95ed\u5305 closure \u00b6 \u4ec0\u4e48\u662f\u95ed\u5305 \u95ed\u5305\u662f\u6307\u5f15\u7528\u4e86\u6b64\u51fd\u6570\u5916\u90e8\u53d8\u91cf\u7684\u51fd\u6570 \u5982\u679c\u4e00\u4e2a\u5185\u5d4c\u51fd\u6570\u8bbf\u95ee\u4e86\u5916\u90e8\u5d4c\u5957\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5219\u8fd9\u4e2a\u5185\u5d4c\u51fd\u6570\u5c31\u662f\u95ed\u5305 \u95ed\u5305\u5fc5\u987b\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6 \u5fc5\u987b\u6709\u4e00\u4e2a\u5185\u5d4c\u51fd\u6570 \u5185\u5d4c\u51fd\u6570\u5fc5\u987b\u5f15\u7528\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u53d8\u91cf \u5916\u90e8\u51fd\u6570\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u5185\u5d4c\u51fd\u6570 # \u5199\u4e00\u4e2a\u51fd\u6570\u6765\u521b\u5efa x \u7684y \u6b21\u65b9\u7684\u51fd\u6570 def make_power ( y ): def fn ( x ): return x ** y return fn pow2 = make_power ( 2 ) pow3 = make_power ( 3 ) print ( '5\u7684\u5e73\u65b9\u662f' , pow2 ( 5 )) print ( '6\u7684\u4e09\u6b21\u65b9\u662f' , pow3 ( 6 )) print ( '5\u7684\u4e09\u6b21\u65b9\u662f' , pow3 ( 5 )) dir(obj) \u51fd\u6570 \u00b6 \u8fd4\u56de\u6240\u6709\u5c5e\u6027\u7684\u5b57\u7b26\u4e32\u5217\u8868 help(obj) \u51fd\u6570 \u00b6 \u53ef\u4ee5\u67e5\u770b\u6a21\u5757\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u5f02\u5e38\u9ad8\u7ea7 \u00b6 with \u8bed\u53e5 \u8bed\u6cd5 with \u8868\u8fbe\u5f0f1 [as \u53d8\u91cf1], \u8868\u8fbe\u5f0f2 [as, \u53d8\u91cf2], .... \u8bed\u53e5\u5757 \u4f5c\u7528 \u4f7f\u7528\u4e8e\u5bf9\u8d44\u6e90\u8fdb\u884c\u8bbf\u95ee\u7684\u573a\u5408\uff0c\u786e\u4fdd\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4e0d\u7ba1\u662f\u5426\u53d1\u751f\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\u5fc5\u987b\"\u6e05\u7406\"\u7684\u64cd\u4f5c\uff0c\u5e76\u91ca\u653e\u8d44\u6e90 \u5982 \u6587\u4ef6\u6253\u5f00\u540e\u81ea\u52a8\u5173\u95ed\uff0c\u7ebf\u7a0b\u4e2d\u9501\u7684\u81ea\u52a8\u83b7\u53d6\u548c\u91ca\u653e\u7b49 \u8bf4\u660e as \u5b57\u53e5\u4e2d\u7684\u53d8\u91cf\u7528\u4e8e\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u6267\u884c\u540e\u751f\u6210\u7684\u5bf9\u8c61 with \u8bed\u53e5\u5e76\u4e0d\u4f1a\u6539\u53d8\u5f02\u5e38\u7684\u72b6\u6001 ### \u73af\u5883\u7ba1\u7406\u5668 1. \u7c7b\u5185\u6709__enter__ \u548c __exit__ \u5b9e\u4f8b\u65b9\u6cd5\u7684\u7c7b\u521b\u5efa\u7684\u5bf9\u8c61\u88ab\u79f0\u4e3a\u73af\u5883\u7ba1\u7406\u5668 2. \u80fd\u591f\u4f7f\u7528with\u8bed\u53e5\u8fdb\u884c\u7ba1\u7406\u7684\u5bf9\u8c61\u5fc5\u987b\u662f\u73af\u5883\u7ba1\u7406\u5668 3. __enter__ \u65b9\u6cd5\u5c06\u5728\u8fdb\u5165with\u8bed\u53e5\u65f6\u88ab\u8c03\u7528 \uff0c \u7531as\u53d8\u91cf\u7ed1\u5b9a\u8fd4\u56de\u7684\u5bf9\u8c61 4. __exit__ \u65b9\u6cd5\u5c06\u5728\u79bb\u5f00with\u8bed\u53e5\u65f6\u88ab\u81ea\u52a8\u8c03\u7528 \uff0c \u4e14\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u6765\u5224\u65ad\u79bb\u5f00with\u8bed\u53e5\u65f6\u662f\u5426\u6709\u5f02\u5e38\u53d1\u751f class A : '''\u6b64\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u7528\u4e8ewith\u8bed\u53e5\u8fdb\u884c\u7ba1\u7406''' def __enter__ ( self ): print ( '\u6b64\u65b9\u6cd5\u662f\u5728with\u8bed\u53e5\u5185\u6267\u884c\u7684' ) return self # self \u5c06\u88abwith\u4e2d\u7684as \u53d8\u91cf\u7ed1\u5b9a def __exit__ ( self , exc_type , exc_val , exc_tb ): ''' exc_type \u7528\u6765\u7ed1\u5b9a\u9519\u8bef\u7c7b\u578b,\u5f53\u6ca1\u6709\u5f02\u5e38\u53d1\u751f\u65f6\u7ed1\u5b9aNone exc_val \u7528\u6765\u7ed1\u5b9a\u9519\u8bef\u5bf9\u8c61\uff0c\u5f53\u5185\u6709\u53d1\u751f\u5f02\u5e38\u65f6\u7ed1\u5b9aNone exc_th \u7528\u6765\u7ed1\u5b9aTraceBack\u5bf9\u8c61\uff0c\u5f53\u6ca1\u6709\u5f02\u5e38\u65f6\u7ed1\u5b9aNone ''' if exc_type is None : print ( '\u60a8\u5df2\u79bb\u5f00with\u8bed\u53e5, \u79bb\u5f00\u65f6\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u5f02\u5e38' ) else : print ( '\u60a8\u5df2\u79bb\u5f00with\u8bed\u53e5' ) print ( '\u9519\u8bef\u7c7b\u578b\u662f\uff1a' , exc_type ) print ( '\u9519\u8bef\u7684\u6570\u636e\u662f\uff1a' , exc_val ) print ( 'Traceback\uff1a' , exc_tb ) with A () as a : print ( '\u8fd9\u662fwith\u8bed\u53e5\u5185\u90e8\u7684\u8f93\u51fa' ) int ( input ( '\u8f93\u5165\uff1a' )) print ( '\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa' )","title":"\u8865\u5145\u77e5\u8bc6\u70b9"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#del","text":"\u7528\u4e8e\u5220\u9664\u5217\u8868\u7684\u5143\u7d20 \u8bed\u6cd5: del \u5217\u8868[\u7d22\u5f15] \u5982: del L[0] del \u5217\u8868[\u5207\u7247] \u5982: del L[1::2]","title":"del \u8bed\u53e5"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#python-3","text":"len(s) \u8fd4\u56de\u5e8f\u5217\u7684\u957f\u5ea6 max(x) \u8fd4\u56de\u5e8f\u5217\u7684\u6700\u5927\u503c\u5143\u7d20 min(x) \u8fd4\u56de\u5e8f\u5217\u7684\u6700\u5c0f\u503c\u5143\u7d20 sum(x) \u8fd4\u56de\u5217\u4e2d\u6240\u6709\u5143\u7d20\u7684\u548c(\u5143\u7d20\u5fc5\u987b\u662f\u6570\u503c\u7c7b\u578b) any(x) \u771f\u503c\u6d4b\u8bd5,\u5982\u679c\u5217\u8868\u4e2d\u5176\u4e2d\u4e00\u4e2a\u503c\u4e3a\u771f\u503c\u5219\u8fd4\u56deTrue all(x) \u771f\u503c\u6d4b\u8bd5,\u5982\u679c\u5217\u8868\u4e2d\u6240\u6709\u503c\u4e3a\u771f\u503c\u8fd4\u56deTrue L = [ 3 , 1 , 9 , 7 , 5 ] print ( len ( L )) # 5 print ( max ( L )) # 9 print ( min ( L )) # 1 print ( sum ( L )) # 25","title":"python 3\u4e2d\u5e38\u7528\u4e8e\u5e8f\u5217\u7684\u51fd\u6570"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#_1","text":"\u6d45\u62f7\u8d1d shallow copy \u6d45\u62f7\u8d1d\u662f\u6307\u5728\u590d\u5236\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u590d\u5236\u4e00\u5c42\u53d8\u91cf\uff0c\u4e0d\u4f1a\u590d\u5236\u6df1\u5c42\u53d8\u91cf\u7ed1\u5b9a\u7684\u5bf9\u8c61\u7684\u590d\u5236\u8fc7\u7a0b L = [ 3.1 , 3.2 ] L1 = [ 1 , 2 , L ] L2 = L1 . copy () # \u6d45\u62f7\u8d1d print ( L1 ) # [1, 2, [3.1, 3.2]] print ( L2 ) # [1, 2, [3.1, 3.2]] L2 [ 2 ][ 0 ] = 3.14 print ( L1 ) # [1, 2, [3.14, 3.2]] print ( L2 ) # [1, 2, [3.14, 3.2]] \u6df1\u62f7\u8d1d deep copy \u590d\u5236\u5bf9\u8c61\u53ca\u5bf9\u8c61\u5173\u8054\u7684\u5bf9\u8c61\u4e00\u8d77\u590d\u5236\u8fc7\u7a0b\u53eb\u6df1\u62f7\u8d1d import copy # \u5bfc\u5165\u590d\u5236\u6a21\u5757 L = [ 3.1 , 3.2 ] L1 = [ 1 , 2 , L ] L2 = copy . deepcopy ( L1 ) \u3000 # \u6df1\u62f7\u8d1d print ( L1 ) # [1, 2, [3.1, 3.2]] print ( L2 ) # [1, 2, [3.1, 3.2]] L2 [ 2 ][ 0 ] = 3.14 print ( L1 ) # [1, 2, [3.1, 3.2]]\u3000\u3000<<< L1\u4e0d\u53d8 print ( L2 ) # [1, 2, [3.14, 3.2]]","title":"\u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#_2","text":"\u90fd\u662f\u5e8f\u5217\uff0c\u6709\u5148\u540e\u987a\u5e8f\u5173\u7cfb\uff0c\u6709\u76f8\u540c\u7684\u8fd0\u7b97\u64cd\u4f5c \u5217\u8868\u662f\u53ef\u53d8\u662f\uff0c\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684 \u5217\u8868\u53ef\u4ee5\u5b58\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5b57\u7b26\u4e32\u53ea\u80fd\u5b58\u5b57\u7b26","title":"\u5217\u8868\u548c\u5b57\u7b26\u4e32\u6bd4\u8f83"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#_3","text":"S.split(sep=None) \u5c06\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 sep\u4f5c\u7528\u5206\u9694\u7b26\u5206\u5272S\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5206\u5272\u540e\u7684\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5f53\u4e0d\u7ed9\u5b9a\u53c2\u6570\u65f6\uff0c\u7528\u7a7a\u767d\u5b57\u7b26\u4f5c\u4e3a\u5206\u9694\u7b26\u5206\u5272 S.join(iterable) \u7528\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e00\u4e2a\u4e2d\u95f4\u7528S\u8fdb\u884c\u5206\u9694\u7684\u5b57\u7b26\u4e32 s = 'Beijing is capital' L = s . split ( ' ' ) # L = ['hello', 'world', 'tarena'] s2 = \"hello#world#tarena\" L = s2 . split ( '#' ) # L = ['hello', 'world', 'tarena'] L = [ 'aaa' , 'bbbb' , 'ccccc' ] '$' . join ( L ) # \u751f\u6210 'aaa$bbbb$ccccc'","title":"\u5b57\u7b26\u4e32\u7684\u6587\u672c\u89e3\u6790\u65b9\u6cd5"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#python3","text":"bool, int, float, complex, str, tuple, frozenset, bytes","title":"python3 \u4e2d\u4e0d\u53ef\u53d8\u6570\u636e\u7c7b\u578b"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#python3_1","text":"list, dict, set, bytearray","title":"python3 \u4e2d\u53ef\u53d8\u6570\u636e\u7c7b\u578b"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#closure","text":"\u4ec0\u4e48\u662f\u95ed\u5305 \u95ed\u5305\u662f\u6307\u5f15\u7528\u4e86\u6b64\u51fd\u6570\u5916\u90e8\u53d8\u91cf\u7684\u51fd\u6570 \u5982\u679c\u4e00\u4e2a\u5185\u5d4c\u51fd\u6570\u8bbf\u95ee\u4e86\u5916\u90e8\u5d4c\u5957\u51fd\u6570\u7684\u53d8\u91cf\uff0c\u5219\u8fd9\u4e2a\u5185\u5d4c\u51fd\u6570\u5c31\u662f\u95ed\u5305 \u95ed\u5305\u5fc5\u987b\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6 \u5fc5\u987b\u6709\u4e00\u4e2a\u5185\u5d4c\u51fd\u6570 \u5185\u5d4c\u51fd\u6570\u5fc5\u987b\u5f15\u7528\u5916\u90e8\u51fd\u6570\u4e2d\u7684\u53d8\u91cf \u5916\u90e8\u51fd\u6570\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u5185\u5d4c\u51fd\u6570 # \u5199\u4e00\u4e2a\u51fd\u6570\u6765\u521b\u5efa x \u7684y \u6b21\u65b9\u7684\u51fd\u6570 def make_power ( y ): def fn ( x ): return x ** y return fn pow2 = make_power ( 2 ) pow3 = make_power ( 3 ) print ( '5\u7684\u5e73\u65b9\u662f' , pow2 ( 5 )) print ( '6\u7684\u4e09\u6b21\u65b9\u662f' , pow3 ( 6 )) print ( '5\u7684\u4e09\u6b21\u65b9\u662f' , pow3 ( 5 ))","title":"\u95ed\u5305 closure"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#dirobj","text":"\u8fd4\u56de\u6240\u6709\u5c5e\u6027\u7684\u5b57\u7b26\u4e32\u5217\u8868","title":"dir(obj) \u51fd\u6570"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#helpobj","text":"\u53ef\u4ee5\u67e5\u770b\u6a21\u5757\u7684\u6587\u6863\u5b57\u7b26\u4e32","title":"help(obj) \u51fd\u6570"},{"location":"python/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9/#_4","text":"with \u8bed\u53e5 \u8bed\u6cd5 with \u8868\u8fbe\u5f0f1 [as \u53d8\u91cf1], \u8868\u8fbe\u5f0f2 [as, \u53d8\u91cf2], .... \u8bed\u53e5\u5757 \u4f5c\u7528 \u4f7f\u7528\u4e8e\u5bf9\u8d44\u6e90\u8fdb\u884c\u8bbf\u95ee\u7684\u573a\u5408\uff0c\u786e\u4fdd\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4e0d\u7ba1\u662f\u5426\u53d1\u751f\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\u5fc5\u987b\"\u6e05\u7406\"\u7684\u64cd\u4f5c\uff0c\u5e76\u91ca\u653e\u8d44\u6e90 \u5982 \u6587\u4ef6\u6253\u5f00\u540e\u81ea\u52a8\u5173\u95ed\uff0c\u7ebf\u7a0b\u4e2d\u9501\u7684\u81ea\u52a8\u83b7\u53d6\u548c\u91ca\u653e\u7b49 \u8bf4\u660e as \u5b57\u53e5\u4e2d\u7684\u53d8\u91cf\u7528\u4e8e\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u6267\u884c\u540e\u751f\u6210\u7684\u5bf9\u8c61 with \u8bed\u53e5\u5e76\u4e0d\u4f1a\u6539\u53d8\u5f02\u5e38\u7684\u72b6\u6001 ### \u73af\u5883\u7ba1\u7406\u5668 1. \u7c7b\u5185\u6709__enter__ \u548c __exit__ \u5b9e\u4f8b\u65b9\u6cd5\u7684\u7c7b\u521b\u5efa\u7684\u5bf9\u8c61\u88ab\u79f0\u4e3a\u73af\u5883\u7ba1\u7406\u5668 2. \u80fd\u591f\u4f7f\u7528with\u8bed\u53e5\u8fdb\u884c\u7ba1\u7406\u7684\u5bf9\u8c61\u5fc5\u987b\u662f\u73af\u5883\u7ba1\u7406\u5668 3. __enter__ \u65b9\u6cd5\u5c06\u5728\u8fdb\u5165with\u8bed\u53e5\u65f6\u88ab\u8c03\u7528 \uff0c \u7531as\u53d8\u91cf\u7ed1\u5b9a\u8fd4\u56de\u7684\u5bf9\u8c61 4. __exit__ \u65b9\u6cd5\u5c06\u5728\u79bb\u5f00with\u8bed\u53e5\u65f6\u88ab\u81ea\u52a8\u8c03\u7528 \uff0c \u4e14\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u6765\u5224\u65ad\u79bb\u5f00with\u8bed\u53e5\u65f6\u662f\u5426\u6709\u5f02\u5e38\u53d1\u751f class A : '''\u6b64\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u7528\u4e8ewith\u8bed\u53e5\u8fdb\u884c\u7ba1\u7406''' def __enter__ ( self ): print ( '\u6b64\u65b9\u6cd5\u662f\u5728with\u8bed\u53e5\u5185\u6267\u884c\u7684' ) return self # self \u5c06\u88abwith\u4e2d\u7684as \u53d8\u91cf\u7ed1\u5b9a def __exit__ ( self , exc_type , exc_val , exc_tb ): ''' exc_type \u7528\u6765\u7ed1\u5b9a\u9519\u8bef\u7c7b\u578b,\u5f53\u6ca1\u6709\u5f02\u5e38\u53d1\u751f\u65f6\u7ed1\u5b9aNone exc_val \u7528\u6765\u7ed1\u5b9a\u9519\u8bef\u5bf9\u8c61\uff0c\u5f53\u5185\u6709\u53d1\u751f\u5f02\u5e38\u65f6\u7ed1\u5b9aNone exc_th \u7528\u6765\u7ed1\u5b9aTraceBack\u5bf9\u8c61\uff0c\u5f53\u6ca1\u6709\u5f02\u5e38\u65f6\u7ed1\u5b9aNone ''' if exc_type is None : print ( '\u60a8\u5df2\u79bb\u5f00with\u8bed\u53e5, \u79bb\u5f00\u65f6\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u5f02\u5e38' ) else : print ( '\u60a8\u5df2\u79bb\u5f00with\u8bed\u53e5' ) print ( '\u9519\u8bef\u7c7b\u578b\u662f\uff1a' , exc_type ) print ( '\u9519\u8bef\u7684\u6570\u636e\u662f\uff1a' , exc_val ) print ( 'Traceback\uff1a' , exc_tb ) with A () as a : print ( '\u8fd9\u662fwith\u8bed\u53e5\u5185\u90e8\u7684\u8f93\u51fa' ) int ( input ( '\u8f93\u5165\uff1a' )) print ( '\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa' )","title":"\u5f02\u5e38\u9ad8\u7ea7"},{"location":"python/%E8%B0%83%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1api%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/","text":"python \u8c03\u53d6\u963f\u91cc\u4e91\u77ed\u4fe1api\u53d1\u9001\u77ed\u4fe1 \u00b6 \u7528\u9014 \u00b6 \u62a5\u8b66\uff0c\u544a\u77e5\uff0c\u6bcf\u65e5\u5b9a\u65f6\u53d1\u9001\u6d88\u606f\u7b49\uff0c\u7528\u9014\u592a\u591a \u5b9e\u73b0\u65b9\u5f0f\uff0c\u4e24\u79cd\u90fd\u53ef\u4ee5 \u00b6 \u4f7f\u7528\u963f\u91cc\u4e91\u7684core\u6a21\u5757\uff0c\u4e0d\u7528sms\u7684\u6a21\u5757 \u00b6 # \u9700\u8981\u5b89\u88c5\u7684\u7684\u6a21\u5757 pip install aliyun - python - sdk - core #!/usr/bin/env python #coding=utf-8 from aliyunsdkcore.client import AcsClient from aliyunsdkcore.request import CommonRequest import json accessKeyId = \"accessKeyId\" accessSecret = \"accessSecret\" phone = '\u7535\u8bdd' SignName = \"\u77ed\u4fe1\u6a21\u677f\" TemplateCode = \"\u77ed\u4fe1\u7b7e\u540d\" #data\u662f\u5185\u5bb9\uff0c\u91cc\u9762\u53d8\u91cf\u662f\u963f\u91cc\u4e91\u77ed\u4fe1\u6a21\u677f\u7684\u53d8\u91cf\uff0c\u51e0\u4e2a\u5c31\u5199\u51e0\u4e2a data = { \"hostname\" : \"\u6211\u662f\u5185\u5bb9\" , \"message\" : \"\" } client = AcsClient ( accessKeyId , accessSecret , 'default' ) request = CommonRequest () request . set_accept_format ( 'json' ) request . set_domain ( 'dysmsapi.aliyuncs.com' ) request . set_method ( 'POST' ) request . set_version ( '2017-05-25' ) request . set_action_name ( 'SendSms' ) request . add_query_param ( 'PhoneNumbers' , phone ) request . add_query_param ( 'SignName' , SignName ) request . add_query_param ( 'TemplateCode' , TemplateCode ) request . add_query_param ( 'TemplateParam' , json . dumps ( data )) response = client . do_action_with_exception ( request ) print ( response ) \u901a\u8fc7\u963f\u91cc\u4e91\u7684\u77ed\u4fe1api\u6a21\u5757+core\u6a21\u5757\u5b9e\u73b0 \u00b6 \u9700\u8981\u5b89\u88c5\u7684\u6a21\u5757 aliyun - python - sdk - core\u4ee5\u53cadysms aliyun - python - sdk - core\u76f4\u63a5\u53ef\u4ee5pip\u5b89\u88c5 dysms\u662f\u901a\u8fc7https : // help . aliyun . com / \u627e\u5230\u4e0b\u8f7d\u5730\u5740 \uff0c \u7136\u540e\u627e\u5230sdk\u4e0b\u8f7d\u5730\u5740 \u76ee\u524d\u4e0b\u8f7d\u5730\u5740\u662fdysms_python . zip \u7136\u540e python setup . py install\u6267\u884c\u5b89\u88c5 #!/usr/bin/env python #coding=utf-8 from aliyunsdkcore.client import AcsClient from aliyunsdkdysmsapi.request.v20170525.SendSmsRequest import SendSmsRequest from aliyunsdkcore.profile import region_provider import json REGION = \"cn-hangzhou\" PRODUCT_NAME = \"Dysmsapi\" DOMAIN = \"dysmsapi.aliyuncs.com\" accessKeyId = \"accessKeyId\" accessSecret = \"accessSecret\" SignName = \"\u77ed\u4fe1\u6a21\u677f\" TemplateCode = \"\u77ed\u4fe1\u7b7e\u540d\" phone = '\u53d1\u9001\u7684\u7535\u8bdd\u53f7\u7801' data = { \"fail_reason\" : \"\u6211\u662f\u5185\u5bb9\" , \"telephone\" : phone } client = AcsClient ( accessKeyId , accessSecret , REGION ) region_provider . add_endpoint ( PRODUCT_NAME , REGION , DOMAIN ) request = SendSmsRequest () request . set_PhoneNumbers ( phone ) request . set_SignName ( SignName ) request . set_TemplateCode ( TemplateCode ) request . set_TemplateParam ( json . dumps ( data )) response = client . do_action_with_exception ( request ) print ( response ) \u9700\u8981\u4fee\u6539\u7684\u53c2\u6570\u8bf4\u660e \u00b6 accessKeyId \uff1a\u963f\u91cc\u4e91\u63a7\u5236\u53f0\u767b\u5f55\u5177\u6709\u77ed\u4fe1\u7ba1\u7406\u6743\u9650\u7684\u8d26\u53f7\u7684\u7f16\u7a0baccessKeyId accessSecret\uff1a\u963f\u91cc\u4e91\u5bf9\u5e94accessKeyId\u7684accessSecret phone \uff1a\u9700\u8981\u53d1\u9001\u7ed9\u5bf9\u65b9\u7684\u7535\u8bdd SignName \uff1a \u77ed\u4fe1\u6a21\u677f\uff0c\u9700\u8981\u5ba1\u6838\u901a\u8fc7\u7684 TemplateCode\uff1a\u77ed\u4fe1\u7b7e\u540d\uff0c\u9700\u8981\u5ba1\u6838\u901a\u8fc7\u7684 data \uff1a\u4e00\u4e2ajson\uff0c\u5bf9\u5e94\u7684\u952e\u540d\u662f\u77ed\u4fe1\u6a21\u677f\u91cc\u9762\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5b9a\u4e49\u51e0\u4e2a\u53d8\u91cf\uff0c\u8fd9\u91cc\u5c31\u5199\u51e0\u4e2a\u5bf9\u5e94\u7684\u503c","title":"\u8c03\u53d6\u963f\u91cc\u4e91\u77ed\u4fe1api\u53d1\u9001\u77ed\u4fe1"},{"location":"python/%E8%B0%83%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1api%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/#python-api","text":"","title":"python \u8c03\u53d6\u963f\u91cc\u4e91\u77ed\u4fe1api\u53d1\u9001\u77ed\u4fe1"},{"location":"python/%E8%B0%83%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1api%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/#_1","text":"\u62a5\u8b66\uff0c\u544a\u77e5\uff0c\u6bcf\u65e5\u5b9a\u65f6\u53d1\u9001\u6d88\u606f\u7b49\uff0c\u7528\u9014\u592a\u591a","title":"\u7528\u9014"},{"location":"python/%E8%B0%83%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1api%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/#_2","text":"","title":"\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4e24\u79cd\u90fd\u53ef\u4ee5"},{"location":"python/%E8%B0%83%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1api%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/#coresms","text":"# \u9700\u8981\u5b89\u88c5\u7684\u7684\u6a21\u5757 pip install aliyun - python - sdk - core #!/usr/bin/env python #coding=utf-8 from aliyunsdkcore.client import AcsClient from aliyunsdkcore.request import CommonRequest import json accessKeyId = \"accessKeyId\" accessSecret = \"accessSecret\" phone = '\u7535\u8bdd' SignName = \"\u77ed\u4fe1\u6a21\u677f\" TemplateCode = \"\u77ed\u4fe1\u7b7e\u540d\" #data\u662f\u5185\u5bb9\uff0c\u91cc\u9762\u53d8\u91cf\u662f\u963f\u91cc\u4e91\u77ed\u4fe1\u6a21\u677f\u7684\u53d8\u91cf\uff0c\u51e0\u4e2a\u5c31\u5199\u51e0\u4e2a data = { \"hostname\" : \"\u6211\u662f\u5185\u5bb9\" , \"message\" : \"\" } client = AcsClient ( accessKeyId , accessSecret , 'default' ) request = CommonRequest () request . set_accept_format ( 'json' ) request . set_domain ( 'dysmsapi.aliyuncs.com' ) request . set_method ( 'POST' ) request . set_version ( '2017-05-25' ) request . set_action_name ( 'SendSms' ) request . add_query_param ( 'PhoneNumbers' , phone ) request . add_query_param ( 'SignName' , SignName ) request . add_query_param ( 'TemplateCode' , TemplateCode ) request . add_query_param ( 'TemplateParam' , json . dumps ( data )) response = client . do_action_with_exception ( request ) print ( response )","title":"\u4f7f\u7528\u963f\u91cc\u4e91\u7684core\u6a21\u5757\uff0c\u4e0d\u7528sms\u7684\u6a21\u5757"},{"location":"python/%E8%B0%83%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1api%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/#apicore","text":"\u9700\u8981\u5b89\u88c5\u7684\u6a21\u5757 aliyun - python - sdk - core\u4ee5\u53cadysms aliyun - python - sdk - core\u76f4\u63a5\u53ef\u4ee5pip\u5b89\u88c5 dysms\u662f\u901a\u8fc7https : // help . aliyun . com / \u627e\u5230\u4e0b\u8f7d\u5730\u5740 \uff0c \u7136\u540e\u627e\u5230sdk\u4e0b\u8f7d\u5730\u5740 \u76ee\u524d\u4e0b\u8f7d\u5730\u5740\u662fdysms_python . zip \u7136\u540e python setup . py install\u6267\u884c\u5b89\u88c5 #!/usr/bin/env python #coding=utf-8 from aliyunsdkcore.client import AcsClient from aliyunsdkdysmsapi.request.v20170525.SendSmsRequest import SendSmsRequest from aliyunsdkcore.profile import region_provider import json REGION = \"cn-hangzhou\" PRODUCT_NAME = \"Dysmsapi\" DOMAIN = \"dysmsapi.aliyuncs.com\" accessKeyId = \"accessKeyId\" accessSecret = \"accessSecret\" SignName = \"\u77ed\u4fe1\u6a21\u677f\" TemplateCode = \"\u77ed\u4fe1\u7b7e\u540d\" phone = '\u53d1\u9001\u7684\u7535\u8bdd\u53f7\u7801' data = { \"fail_reason\" : \"\u6211\u662f\u5185\u5bb9\" , \"telephone\" : phone } client = AcsClient ( accessKeyId , accessSecret , REGION ) region_provider . add_endpoint ( PRODUCT_NAME , REGION , DOMAIN ) request = SendSmsRequest () request . set_PhoneNumbers ( phone ) request . set_SignName ( SignName ) request . set_TemplateCode ( TemplateCode ) request . set_TemplateParam ( json . dumps ( data )) response = client . do_action_with_exception ( request ) print ( response )","title":"\u901a\u8fc7\u963f\u91cc\u4e91\u7684\u77ed\u4fe1api\u6a21\u5757+core\u6a21\u5757\u5b9e\u73b0"},{"location":"python/%E8%B0%83%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1api%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/#_3","text":"accessKeyId \uff1a\u963f\u91cc\u4e91\u63a7\u5236\u53f0\u767b\u5f55\u5177\u6709\u77ed\u4fe1\u7ba1\u7406\u6743\u9650\u7684\u8d26\u53f7\u7684\u7f16\u7a0baccessKeyId accessSecret\uff1a\u963f\u91cc\u4e91\u5bf9\u5e94accessKeyId\u7684accessSecret phone \uff1a\u9700\u8981\u53d1\u9001\u7ed9\u5bf9\u65b9\u7684\u7535\u8bdd SignName \uff1a \u77ed\u4fe1\u6a21\u677f\uff0c\u9700\u8981\u5ba1\u6838\u901a\u8fc7\u7684 TemplateCode\uff1a\u77ed\u4fe1\u7b7e\u540d\uff0c\u9700\u8981\u5ba1\u6838\u901a\u8fc7\u7684 data \uff1a\u4e00\u4e2ajson\uff0c\u5bf9\u5e94\u7684\u952e\u540d\u662f\u77ed\u4fe1\u6a21\u677f\u91cc\u9762\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5b9a\u4e49\u51e0\u4e2a\u53d8\u91cf\uff0c\u8fd9\u91cc\u5c31\u5199\u51e0\u4e2a\u5bf9\u5e94\u7684\u503c","title":"\u9700\u8981\u4fee\u6539\u7684\u53c2\u6570\u8bf4\u660e"},{"location":"python/%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/","text":"\u8fed\u4ee3\u5668\uff08\u9ad8\u7ea7\uff09 \u00b6 \u4ec0\u4e48\u662f\u8fed\u4ee3\u5668 \u7531iter(iterable) \u51fd\u6570\u8fd4\u56de\uff0c\u53ef\u4ee5\u901a\u8fc7next(iterator) \u51fd\u6570\u53d6\u503c\u7684\u5bf9\u8c61\u5c31\u662f\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u534f\u8bae \u8fed\u4ee3\u5668\u534f\u8bae\u662f\u6307\u5bf9\u8c61\u80fd\u591f\u4f7f\u7528next()\u51fd\u6570\u83b7\u53d6\u4e0b\u4e00\u9879\u6570\u636e\uff0c\u5728\u6ca1\u6709\u4e0b\u4e00\u9879\u6570\u636e\u65f6\u89e6\u53d1\u4e00\u4e2aStopIteration\u5f02\u5e38\u6765\u7ec8\u6b62\u8fed\u4ee3\u7684\u7ea6\u5b9a \u8fed\u4ee3\u5668\u534f\u8bae\u7684\u5b9e\u73b0\u65b9\u6cd5 def __next__(self): ... \u6ce8\uff1a \u6b64\u65b9\u6cd5\u9700\u8981\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae \u4ec0\u4e48\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u662f\u6307\u80fd\u7528iter(obj) \u51fd\u6570\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u5bf9\u8c61 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u5185\u90e8\u8981\u5b9a\u4e49__iter__(self) \u65b9\u6cd5\u6765\u8fd4\u56de\u8fed\u4ee3\u5668\u5bf9\u8c61 # \u6b64\u793a\u4f8b\u793a\u610f\u5c06\u81ea\u5b9a\u4e49\u7684\u7c7bMyList\u521b\u5efa\u7684\u5bf9\u8c61\u5236\u4f5c\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61 class MyList : '''\u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5217\u8868\u7c7b\u578b\uff0c\u6b64\u7c7b\u578b\u7684\u5bf9\u8c61\u7528data\u5c5e\u6027\u7ed1\u5b9a\u7684\u5217\u8868\u6765\u5b58\u50a8\u6570\u636e''' def __init__ ( self , iterable = ()): self . __data = [ x for x in iterable ] def __repr__ ( self ): return 'MyList( %s )' % self . __data def __iter__ ( self ): '''\u6b64\u65b9\u6cd5\u7528\u6765\u8fd4\u56de\u4e00\u4e2a\u80fd\u8bbf\u95eeself\u5bf9\u8c61''' '''\u6b64\u65b9\u6cd5\u7528\u6765\u8fd4\u56de\u4e00\u4e2a\u80fd\u8bbf\u95eeself\u5bf9\u8c61\u8fed\u4ee3\u5668''' # return iter(self.__data) return MyListIterator ( self . __data ) class MyListIterator : '''\u6b64\u7c7b\u7528\u6765\u63cf\u8ff0\u80fd\u591f\u8bbf\u95eeMyList\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668''' def __init__ ( self , lst ): self . __data_lst = lst self . __cur_index = 0 #\u8fed\u4ee3\u5668\u7684\u8d77\u59cb\u4f4d\u7f6e def __next__ ( self ): '''\u6b64\u65b9\u6cd5\u7528\u6765\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae''' if self . __cur_index >= len ( self . __data_lst ): raise StopIteration r = self . __data_lst [ self . __cur_index ] self . __cur_index += 1 return r myl = MyList ([ 2 , 3 , 5 , 7 ]) # ################ it = iter ( myl ) # \u7b49\u540c\u4e8eit = myl.__iter__() print ( next ( it )) # 2 # ################ for x in myl : print ( x )","title":"22. \u8fed\u4ee3\u5668\uff08\u9ad8\u7ea7\uff09"},{"location":"python/%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/#_1","text":"\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668 \u7531iter(iterable) \u51fd\u6570\u8fd4\u56de\uff0c\u53ef\u4ee5\u901a\u8fc7next(iterator) \u51fd\u6570\u53d6\u503c\u7684\u5bf9\u8c61\u5c31\u662f\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u534f\u8bae \u8fed\u4ee3\u5668\u534f\u8bae\u662f\u6307\u5bf9\u8c61\u80fd\u591f\u4f7f\u7528next()\u51fd\u6570\u83b7\u53d6\u4e0b\u4e00\u9879\u6570\u636e\uff0c\u5728\u6ca1\u6709\u4e0b\u4e00\u9879\u6570\u636e\u65f6\u89e6\u53d1\u4e00\u4e2aStopIteration\u5f02\u5e38\u6765\u7ec8\u6b62\u8fed\u4ee3\u7684\u7ea6\u5b9a \u8fed\u4ee3\u5668\u534f\u8bae\u7684\u5b9e\u73b0\u65b9\u6cd5 def __next__(self): ... \u6ce8\uff1a \u6b64\u65b9\u6cd5\u9700\u8981\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae \u4ec0\u4e48\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u662f\u6307\u80fd\u7528iter(obj) \u51fd\u6570\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u5bf9\u8c61 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u5185\u90e8\u8981\u5b9a\u4e49__iter__(self) \u65b9\u6cd5\u6765\u8fd4\u56de\u8fed\u4ee3\u5668\u5bf9\u8c61 # \u6b64\u793a\u4f8b\u793a\u610f\u5c06\u81ea\u5b9a\u4e49\u7684\u7c7bMyList\u521b\u5efa\u7684\u5bf9\u8c61\u5236\u4f5c\u4e3a\u53ef\u8fed\u4ee3\u5bf9\u8c61 class MyList : '''\u8fd9\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5217\u8868\u7c7b\u578b\uff0c\u6b64\u7c7b\u578b\u7684\u5bf9\u8c61\u7528data\u5c5e\u6027\u7ed1\u5b9a\u7684\u5217\u8868\u6765\u5b58\u50a8\u6570\u636e''' def __init__ ( self , iterable = ()): self . __data = [ x for x in iterable ] def __repr__ ( self ): return 'MyList( %s )' % self . __data def __iter__ ( self ): '''\u6b64\u65b9\u6cd5\u7528\u6765\u8fd4\u56de\u4e00\u4e2a\u80fd\u8bbf\u95eeself\u5bf9\u8c61''' '''\u6b64\u65b9\u6cd5\u7528\u6765\u8fd4\u56de\u4e00\u4e2a\u80fd\u8bbf\u95eeself\u5bf9\u8c61\u8fed\u4ee3\u5668''' # return iter(self.__data) return MyListIterator ( self . __data ) class MyListIterator : '''\u6b64\u7c7b\u7528\u6765\u63cf\u8ff0\u80fd\u591f\u8bbf\u95eeMyList\u7c7b\u578b\u7684\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668''' def __init__ ( self , lst ): self . __data_lst = lst self . __cur_index = 0 #\u8fed\u4ee3\u5668\u7684\u8d77\u59cb\u4f4d\u7f6e def __next__ ( self ): '''\u6b64\u65b9\u6cd5\u7528\u6765\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae''' if self . __cur_index >= len ( self . __data_lst ): raise StopIteration r = self . __data_lst [ self . __cur_index ] self . __cur_index += 1 return r myl = MyList ([ 2 , 3 , 5 , 7 ]) # ################ it = iter ( myl ) # \u7b49\u540c\u4e8eit = myl.__iter__() print ( next ( it )) # 2 # ################ for x in myl : print ( x )","title":"\u8fed\u4ee3\u5668\uff08\u9ad8\u7ea7\uff09"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/","text":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u00b6 Object Oriented Programming \u4ec0\u4e48\u662f\u5bf9\u8c61 \u200b \u5bf9\u8c61\u662f\u6307\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u7269\u4f53\u6216\u5b9e\u4f53 \u4ec0\u4e48\u662f\u9762\u5411\u5bf9\u8c61 \u200b \u628a\u4e00\u5207\u770b\u6210\u5bf9\u8c61\uff0c\u7528\u5404\u79cd\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\u6765\u63cf\u8ff0\u4e8b\u7269 \u5bf9\u8c61\u7684\u7279\u5f81 \u5bf9\u8c61\u6709\u5f88\u591a\u5c5e\u6027\uff08\u540d\u8bcd\u6216\u5f62\u5bb9\u8bcd\uff09 \u5e74\u9f84\uff0c\u59d3\u540d\uff0c\u6027\u522b... \u5bf9\u8c61\u6709\u5f88\u591a\u884c\u4e3a\uff08\u52a8\u4f5c\uff0c\u52a8\u8bcd\uff09 \u5b66\u4e60\uff0c\u5403\u996d\uff0c\u7761\u89c9\uff0c\u8e22\u7403\uff0c\u5de5\u4f5c... \u4ec0\u4e48\u662f\u7c7b \u62e5\u6709\u76f8\u540c\u5c5e\u6027\u4e2a\u884c\u4e3a\u7684\u5bf9\u8c61\u5206\u4e3a\u4e00\u7ec4\uff0c\u5373\u4e3a\u4e00\u4e2a\u7c7b \u7c7b\u662f\u7528\u6765\u63cf\u8ff0\u5bf9\u8c61\u7684\u5de5\u5177\uff0c\u7528\u7c7b\u53ef\u4ee5\u521b\u5efa\u6b64\u7c7b\u7684\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u7c7b\u7684\u521b\u5efa\u8bed\u53e5 \u00b6 class \u8bed\u53e5 \u8bed\u6cd5 class \u7c7b\u540d\uff08\u7ee7\u627f\u5217\u8868\uff09 '''\u7c7b\u6587\u6863\u5b57\u7b26\u4e32''' \u5b9e\u4f8b\u65b9\u6cd5\u5b9a\u4e49 \u7c7b\u53d8\u91cf\u5b9a\u4e49 \u7c7b\u65b9\u6cd5\u5b9a\u4e49(@classmethod) \u9759\u6001\u65b9\u6cd5\u5b9a\u4e49(@staticmethod) \u4f5c\u7528 \u521b\u5efa\u4e00\u4e2a\u7c7b \u7c7b\u7528\u4e8e\u63cf\u8ff0\u5bf9\u8c61\u7684\u884c\u4e3a\u548c\u5c5e\u6027 \u7c7b\u7528\u4e8e\u521b\u5efa\u6b64\u7c7b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u8bf4\u660e \u7c7b\u540d\u5fc5\u987b\u4e3a\u6807\u8bc6\u7b26\uff08\u4e0e\u53d8\u91cf\u547d\u540d\u89c4\u5219\u76f8\u540c\uff0c\u5efa\u8bae\u9996\u5b57\u6bcd\u5927\u5199\uff09 \u7c7b\u540d\u5b9e\u8d28\u4e0a\u5c31\u662f\u53d8\u91cf\uff0c\u5b83\u7ed1\u5b9a\u4e00\u4e2a\u7c7b class Dog (): '''\u521b\u5efa\u4e00\u4e2aDog\u7c7b\uff0c\u6b64\u7c7b\u7528\u4e8e\u63cf\u8ff0\u4e00\u79cd\u5c0f\u52a8\u7269\u7684\u884c\u4e3a\u548c\u5c5e\u6027''' pass dog1 = Dog () # \u521b\u5efaDog\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b print ( id ( dog1 )) dog2 = Dog () # \u521b\u5efaDog\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b print ( id ( dog2 )) \u6784\u9020\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f \u7c7b\u540d([\u521b\u5efa\u4f20\u53c2\u5217\u8868]) \u4f5c\u7528 \u521b\u5efa\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u6b64\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5f15\u7528\u5173\u7cfb \u8bf4\u660e \u5b9e\u4f8b\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df\u548c\u540d\u5b57\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4e3a\u8be5\u5b9e\u4f8b\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff08\u4e5f\u53eb\u5c5e\u6027\uff09 \u5b9e\u4f8b\u53ef\u4ee5\u8c03\u7528\u7c7b\u65b9\u6cd5\u548c\u5b9e\u4f8b\u65b9\u6cd5 \u5b9e\u4f8b\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf \u5b9e\u4f8b\u65b9\u6cd5(method) \u00b6 \u8bed\u6cd5 class \u7c7b\u540d(\u7ee7\u627f\u5217\u8868): def \u5b9e\u4f8b\u65b9\u6cd5\u540d(self, \u5f62\u53c2\u540d1, \u5f62\u53c2\u540d2, ...): '''\u65b9\u6cd5\u6587\u6863\u5b57\u7b26\u4e32''' \u8bed\u53e5\u5757 \u4f5c\u7528 \u7528\u4e8e\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\uff0c\u8ba9\u6b64\u7c7b\u578b\u7684\u5168\u90e8\u5bf9\u8c61\u90fd\u62e5\u6709\u76f8\u540c\u7684\u884c\u4e3a \u8bf4\u660e \u5b9e\u4f8b\u65b9\u6cd5\u7684\u5b9e\u8d28\u662f\u51fd\u6570\uff0c\u662f\u5b9a\u4e49\u5728\u7c7b\u5185\u7684\u51fd\u6570 \u5b9e\u4f8b\u65b9\u6cd5\u81f3\u5c11\u6709\u4e00\u4e2a\u5f62\u53c2\uff0c\u7b2c\u4e00\u4e2a\u5f62\u53c2\u7528\u6765\u7ed1\u5b9a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u4f8b\uff0c\u4e00\u822c\u547d\u540d\u4e3a'self' \u5b9e\u4f8b\u65b9\u6cd5\u7684\u8c03\u7528\u8bed\u53e5 \u5b9e\u4f8b.\u5b9e\u4f8b\u65b9\u6cd5\u540d(\u8c03\u7528\u4f20\u53c2) \u6216 \u7c7b\u540d.\u5b9e\u4f8b\u65b9\u6cd5\u540d(\u5b9e\u4f8b, \u8c03\u7528\u4f20\u53c2) # \u6b64\u793a\u4f8b\u793a\u610f\u793a\u4f8b\u65b9\u6cd5\u7684\u5b9a\u4e49\u548c\u8c03\u7528 class Dog : def eat ( self , food ): '''\u6b64\u65b9\u6cd5\u7528\u6765\u63cf\u8ff0\u5c0f\u72d7\u5403\u4e1c\u897f\u7684\u884c\u4e3a''' print ( '\u5c0f\u72d7\u6b63\u5728\u5403' , food ) def sleep ( self , hour ): print ( '\u5c0f\u72d7\u7761\u4e86 %d \u5c0f\u65f6' % hour ) def play ( self , obj ): print ( '\u5c0f\u72d7\u6b63\u73a9' , obj ) dog = Dog () dog . eat ( '\u9aa8\u5934' ) dog . sleep ( 1 ) dog . play ( '\u98de\u76d8' ) \u5b9e\u4f8b\u5c5e\u6027 attribute \u00b6 \u6bcf\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u5b9e\u4f8b\u53d8\u91cf\u7528\u6765\u4fdd\u5b58\u5bf9\u8c61\u81ea\u5df1\u7684\u6570\u636e \u8bed\u6cd5 \u5b9e\u4f8b.\u5c5e\u6027\u540d \u8d4b\u503c\u89c4\u5219\u540c\u53d8\u91cf\u7684\u8d4b\u503c\u89c4\u5219 \u9996\u6b21\u4e3a\u5c5e\u6027\u8d4b\u503c\u5219\u521b\u5efa\u6b64\u5c5e\u6027 \u518d\u6b21\u4e3a\u5c5e\u6027\u8d4b\u503c\u5219\u6539\u53d8\u5c5e\u6027\u7684\u7ed1\u5b9a\u5173\u7cfb \u4f5c\u7528 \u8bb0\u5f55\u6bcf\u4e2a\u5bf9\u8c61\u81ea\u8eab\u7684\u6570\u636e # \u6b64\u793a\u4f8b\u793a\u610f\u793a\u4f8b\u7684\u5c5e\u6027attribute \u53ca\u8bbf\u95ee\u5c5e\u6027\u7684\u65b9\u6cd5 class Dog : def eat ( self , food ): self . last_food = food print ( self . color , '\u7684' , self . kinds , '\u6b63\u5728\u5403' , food ) def show_last_food ( self ): print ( self . color , '\u7684' , self . kinds , '\u4e0a\u6b21\u5403\u7684' , self . last_food ) dog1 = Dog () dog1 . kinds = '\u4eac\u5df4' # \u6dfb\u52a0\u5b9e\u4f8b\u5c5e\u6027 dog1 . color = '\u767d\u8272' # \u6dfb\u52a0\u72d7\u6bdb\u7684\u989c\u8272 dog1 . color = '\u9ec4\u8272' # \u4fee\u6539\u5b9e\u4f8b\u5c5e\u6027\u7684\u7ed1\u5b9a\u5173\u7cfb dog2 = Dog () dog2 . kinds = '\u85cf\u7352' # \u53e6\u4e00\u4e2a\u5bf9\u8c61 dog2 . color = '\u68d5\u8272' print ( dog1 . color , '\u7684' , dog1 . kinds ) print ( dog2 . color , '\u7684' , dog2 . kinds ) dog1 . eat ( '\u9aa8\u5934' ) dog2 . eat ( '\u72d7\u7cae' ) dog1 . show_last_food () dog2 . show_last_food () \u7ec3\u4e60 \u00b6 \u5b9a\u4e49\u4e00\u4e2a '\u4eba' ( Human ) \u7c7b \uff0c calss Human : def set_info ( self , name , age , address = '\u4e0d\u8be6' ) '''\u6b64\u65b9\u6cd5\u7528\u6765\u7ed9\u4eba\u5bf9\u8c61\u6dfb\u52a0\u59d3\u540d, \u5e74\u9f84, \u5bb6\u5ead\u4f4f\u5740\u7b49\u5c5e\u6027''' def show_info ( self ): '''\u6b64\u5904\u663e\u793a\u6b64\u4eba\u4fe1\u606f''' \u8c03\u7528\u5982\u4e0b \uff1a h1 = Human () h1 . set_info ( '\u5c0f\u5f20' , 20 , '\u5317\u4eac\u5e02\u4e1c\u57ce\u533a' ) h2 = Human () h2 . set_info ( '\u5c0f\u674e' , 18 ) h1 . show_info () h2 . show_info () \u5220\u9664\u5c5e\u6027 \u00b6 del \u8bed\u53e5 \u53ef\u4ee5\u5220\u9664\u5b9e\u4f8b\uff08instance\uff09\u7684\u5c5e\u6027 \u8bed\u53e5 del \u5b9e\u4f8b.\u5b9e\u4f8b\u53d8\u91cf\u540d \u793a\u4f8b class Dog: pass dog1 = Dog() dog1.color = '\u767d\u8272' del dog1.color # \u5220\u9664\u5c5e\u6027 print(dog1.color) # AttributeError \u5c5e\u6027\u9519\u8bef del\u8bed\u53e5\u5c0f\u7ed3 \u5220\u9664\u53d8\u91cf del name \u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d20 del l[0] \u5220\u9664\u5b57\u5178\u7684\u952e del d['name'] \u5220\u9664\u5b9e\u4f8b\u7684\u5c5e\u6027 del \u5b9e\u4f8b.\u5b9e\u4f8b\u53d8\u91cf\u540d \u521d\u59cb\u5316\u65b9\u6cd5 \u00b6 \u4f5c\u7528 \u5bf9\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u6dfb\u52a0\u5c5e\u6027 \u8bed\u6cd5\u683c\u5f0f class \u7c7b\u540d(\u7ee7\u627f\u5217\u8868): del __init__(self, [\u5f62\u53c2\u5217\u8868]): \u8bed\u53e5\u5757 \u6ce8: []\u4ee3\u8868\u5176\u4e2d\u7684\u5185\u5bb9\u53ef\u4ee5\u7701\u7565 \u8bf4\u660e 1. \u521d\u59cb\u5316\u65b9\u6cd5\u540d\u5fc5\u987b\u4e3a '__init__' \u4e0d\u53ef\u4ee5\u6539\u53d8 2. \u521d\u59cb\u5316\u65b9\u6cd5\u4f1a\u5728\u6784\u9020\u51fd\u6570\u521b\u5efa\u5b9e\u4f8b\u540e\u81ea\u52a8\u8c03\u7528\uff0c\u4e14\u5c06\u5b9e\u4f8b\u81ea\u8eab\u901a\u8fc7\u7b2c\u4e00\u4e2a\u53c2\u6570self \u4f20\u5165__init__\u65b9\u6cd5 3. \u6784\u9020\u51fd\u6570\u7684\u5b9e\u53c2\u5c06\u901a\u8fc7__init__\u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\u4f20\u5165\u5230__init__\u65b9\u6cd5\u4e2d 4. \u521d\u59cb\u5316\u65b9\u6cd5\u5185\u5982\u679c\u9700\u8981return\u8bed\u53e5\u8fd4\u56de\uff0c\u5219\u53ea\u80fd\u8fd4\u56deNone # \u6b64\u793a\u4f8b\u793a\u610f\u521d\u59cb\u5316\u65b9\u6cd5\u7684\u5b9a\u4e49\uff0c\u53ca\u521d\u59cb\u5316\u65b9\u6cd5\u5bf9\u65b0\u5bf9\u8c61\u6dfb\u52a0\u5c5e\u6027 class Car : def __init__ ( self , c , b , m ): self . color = c # \u989c\u8272 self . brand = b # \u54c1\u724c self . model = m # \u578b\u53f7 def run ( self , speed ): print ( self . color , '\u7684' , self . brand , self . model , '\u6b63\u5728\u4ee5' , speed , '\u516c\u91cc/\u5c0f\u65f6\u7684\u901f\u5ea6\u884c\u9a76' ) a4 = Car ( '\u7ea2\u8272' , '\u5965\u8fea' , 'A4' ) a4 . run ( 199 ) t1 = Car ( '\u84dd\u8272' , 'TESLA' , 'Model S' ) t1 . run ( 230 ) \u7ec3\u4e60 \u00b6 \u5199\u4e00\u4e2aStudent\u7c7b\uff0c \u6b64\u7c7b\u521b\u5efa\u7684\u5bf9\u8c61\u6709\u4e09\u4e2a\u5c5e\u6027\uff0c\u59d3\u540d\uff0c\u5e74\u9f84\uff0c \u6210\u7ee9 1. \u7528\u521d\u59cb\u5316\u65b9\u6cd5\u4e3a\u8be5\u7c7b\u6dfb\u52a0\u4e0a\u8ff0\u4e09\u4e2a\u5c5e\u6027 2. \u6dfb\u52a0set_score() \u65b9\u6cd5\u80fd\u4e3a\u5bf9\u8c61\u4fee\u6539\u5b66\u751f\u6210\u7ee9 3. \u6dfb\u52a0show_info() \u65b9\u6cd5\u6253\u5370\u5b66\u751f\u4fe1\u606f \u6790\u6784\u65b9\u6cd5 \u00b6 class \u7c7b\u540d(\u7ee7\u627f\u5217\u8868): def __del__(self): \u8bed\u53e5\u5757 \u6790\u6784\u65b9\u6cd5\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u81ea\u52a8\u8c03\u7528 python\u8bed\u8a00\u5efa\u8bae\u4e0d\u8981\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u505a\u4efb\u4f55\u4e8b\uff0c\u56e0\u4e3a\u9500\u6bc1\u65f6\u95f4\u96be\u4ee5\u786e\u5b9a ```python \u6b64\u793a\u4f8b\u793a\u610f\u6790\u6784\u65b9\u6cd5\u7684\u4f7f\u7528 \u00b6 import time class Car: def init (self, info): self.info = info print('\u6c7d\u8f66\u5bf9\u8c61', info, '\u88ab\u521b\u5efa') def del (self): print('\u6c7d\u8f66\u5bf9\u8c61', self.info, '\u88ab\u9500\u6bc1') car = Car('BYD E6') car = None # \u6539\u53d8\u5bf9\u8c61\u7684\u7ed1\u5b9a\u5173\u7cfb\u53ef\u4ee5\u91ca\u653e BYD E6\u5bf9\u8c61 \u00b6 del car # \u5220\u9664\u53d8\u91cf\u91ca\u653e\u5bf9\u8c61 l = [] l.append(Car('\u6c7d\u8f661')) l.append(Car('\u6c7d\u8f662')) l.append(Car('\u6c7d\u8f663')) del l # \u91ca\u653e\u5217\u8868 \u00b6 input('\u8bf7\u8f93\u5165\u56de\u8f66\u952e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f') print('\u7a0b\u5e8f\u9000\u51fa') ``` \u9884\u7f6e\u5b9e\u4f8b\u5c5e\u6027 \u00b6 __dict__\u5c5e\u6027 __dict__\u5c5e\u6027 \u7ed1\u5b9a\u4e00\u4e2a\u5b58\u50a8\u6b64\u5b9e\u4f8b\u81ea\u8eab\u53d8\u91cf\u5b57\u5178 \u793a\u4f8b class Dog: pass dog1 = Dog() print(dog1.__dict__) # {} dog1.color = '\u767d\u8272' print(dog1.__dict__) # {'color': '\u767d\u8272'} dog1.kinds = '\u4eac\u5df4' print(dog1.__dict__) # {'color': '\u767d\u8272', 'kinds':'\u4eac\u5df4'} __class__\u5c5e\u6027 __class__ \u5c5e\u6027\u7ed1\u5b9a\u521b\u5efa\u6b64\u5b9e\u4f8b\u7684\u7c7b \u4f5c\u7528 \u53ef\u4ee5\u501f\u52a9\u6b64\u5c5e\u6027\u6765\u8bbf\u95ee\u521b\u5efa\u6b64\u5b9e\u4f8b\u7684\u7c7b \u793a\u4f8b class Dog: pass dog1 = Dog() print(dog1.__class__) dog2 = dog1.__class__() print(dog2.__class__) \u7528\u4e8e\u5bf9\u8c61\u7684\u51fd\u6570 \u00b6 isinstance(obj, class_or_tuple) \u8fd4\u56de\u8fd9\u4e2a\u5bf9\u8c61obj\u662f\u5426\u662f\u67d0\u4e2a\u7c7b\u7684\u5bf9\u8c61\u6216\u8005\u67d0\u4e9b\u7c7b\u4e2d\u7684\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue, \u5426\u5219\u8fd4\u56deFalse type(obj) \u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u578b \u9762\u5411\u5bf9\u8c61\u7684\u7efc\u5408\u793a\u4f8b \u00b6 \u6709\u4e24\u4e2a\u4eba\uff1a \u5c5e\u6027\uff1a 1. \u59d3\u540d\uff1a\u5f20\u4e09 \u5e74\u9f84\uff1a35 \u5c81 2. \u59d3\u540d\uff1a\u674e\u56db \u5e74\u9f84\uff1a8 \u5c81 \u884c\u4e3a\uff1a 1. \u6559\u522b\u4eba\u5b66\u4e1c\u897f teach 2. \u5de5\u4f5c\u8d5a\u94b1 work 2. \u5de5\u4f5c\u8d5a\u94b1 work 3. \u501f\u94b1 borrow \u4e8b\u60c5\uff1a \u5f20\u4e09 \u6559 \u674e\u56db \u5b66 python \u674e\u56db \u6559 \u5f20\u4e09 \u5b66 \u738b\u8005\u8363\u8000 \u5f20\u4e09 \u4e0a\u73ed\u8d5a\u4e86 1000\u5143\u94b1 \u674e\u56db \u5411 \u5f20\u4e09 \u501f\u4e86 200\u5143\u94b1 35 \u5c81\u7684 \u5f20\u4e09 \u6709\u94b1 800\u5143\uff0c \u5b83\u5b66\u4f1a\u7684\u6280\u80fd\uff1a\u738b\u8005\u8363\u8000 8 \u5c81\u7684 \u674e\u56db \u6709\u94b1 200\u5143\uff0c \u5b83\u5b66\u4f1a\u7684\u6280\u80fd\uff1apython \u7c7b\u53d8\u91cf \u00b6 \u7c7b\u53d8\u91cf\u662f\u7c7b\u7684\u5c5e\u6027\uff0c\u6b64\u5c5e\u6027\u5c5e\u4e8e\u7c7b\uff0c\u4e0d\u5c5e\u4e8e\u6b64\u7c7b\u7684\u5b9e\u4f8b \u4f5c\u7528 \u901a\u5e38\u7528\u6765\u5b58\u50a8\u8be5\u7c7b\u521b\u5efa\u5bf9\u8c61\u7684\u5171\u6709\u5c5e\u6027 \u8bf4\u660e \u7c7b\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7\u8be5\u7c7b\u76f4\u63a5\u8bbf\u95ee \u7c7b\u53d8\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7\u7c7b\u7684\u5b9e\u4f8b\u76f4\u63a5\u8bbf\u95ee \u7c7b\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7\u6b64\u7c7b\u7684\u5bf9\u8c61__class__\u5c5e\u6027\u95f4\u63a5\u8bbf\u95ee \u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u7c7b\u5185\u7b2c\u4e00\u4e2a\u6ca1\u6709\u8d4b\u503c\u7ed9\u4efb\u4f55\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u4e3a\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7help()\u51fd \u6570\u67e5\u770b \u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32\u7ed1\u5b9a\u5728\u7c7b\u7684__doc__\u5c5e\u6027\u4e0a \u7c7b\u7684__slots__\u5217\u8868 \u4f5c\u7528 \u9650\u5b9a\u4e00\u4e2a\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b\u53ea\u80fd\u6709\u56fa\u5b9a\u7684\u5c5e\u6027\uff08\u5b9e\u4f8b\u53d8\u91cf\uff09 \u4e0d\u5141\u8bb8\u5bf9\u8c61\u6dfb\u52a0\u5217\u8868\u4ee5\u5916\u7684\u5b9e\u4f8b\u5c5e\u6027\uff08\u5b9e\u4f8b\u53d8\u91cf\uff09 \u9632\u6b62\u7528\u6237\u56e0\u586b\u9519\u5c5e\u6027\u540d\u800c\u53d1\u751f\u7684\u7a0b\u5e8f\u9519\u8bef \u8bf4\u660e __slots__\u5c5e\u6027\u7ed1\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 \u542b\u6709__slots__\u5c5e\u6027\u7684\u7c7b\u6240\u521b\u5efa\u7684\u5b9e\u4f8b\u5bf9\u8c61\u6ca1\u6709__dict__\u5c5e\u6027\uff0c\u5373\u6b64\u5b9e\u4f8b\u4e0d\u7528\u5b57\u5178\u6765\u5b58\u50a8\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5c5e\u6027 # \u6b64\u793a\u4f8b\u793a\u610f\u7c7b\u5185__slots__\u5217\u8868\u7684\u7528\u6cd5\u548c\u4f5c\u7528 class Human : # __slots__ = ['name', 'age'] # \u4fdd\u5b58\u7c7b\u53ea\u80fd\u6709\u5217\u8868\u91cc\u7684\u5c5e\u6027 def __init__ ( self , n , a ): self . name = n self . age = a def info ( self ): print ( self . name , '\u4eca\u5e74' , self . age , '\u5c81' ) h1 = Human ( '\u5c0f\u5f20' , 8 ) h1 . info () # \u5c0f\u5f20 \u4eca\u5e74 8 \u5c81 h1 . Age = 9 h1 . info () # \u5c0f\u5f20 \u4eca\u5e74 8 \u5c81 \u7c7b\u65b9\u6cd5@classmethod \u00b6 \u7c7b\u65b9\u6cd5\u662f\u7528\u4e8e\u63cf\u8ff0\u7c7b\u7684\u884c\u4e3a\u7684\u65b9\u6cd5\uff0c\u7c7b\u65b9\u6cd5\u5c5e\u4e8e\u7c7b\uff0c\u4e0d\u5c5e\u4e8e\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61 \u8bf4\u660e \u7c7b\u65b9\u6cd5\u9700\u8981\u7528@calssmethod\u88c5\u9970\u5668\u5b9a\u4e49 \u7c7b\u65b9\u6cd5\u81f3\u5c11\u6709\u4e00\u4e2a\u5f62\u53c2\uff0c\u7b2c\u4e00\u4e2a\u5f62\u53c2\u7ed1\u5b9a\u7c7b\uff0c\u7ea6\u5b9a\u4e3a'cls' \u7c7b\u548c\u8be5\u7c7b\u7684\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5 \u7c7b\u65b9\u6cd5\u4e0d\u80fd\u8bbf\u95ee\u6b64\u7c7b\u521b\u5efa\u7684\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5c5e\u6027 \u793a\u4f8b\u89c1 class A: v = 0 # \u7c7b\u53d8\u91cf @classmethod def get_v(cls): return cls.v # \u7528cls\u8bbf\u95ee\u53d8\u91cfv @classmethod def set_v(cls, v): cls.v = v A.set_v(100) print('A.v =', A.get_v()) # \u8c03\u7528\u7c7b\u65b9\u6cd5\u5f97\u5230\u7c7b\u53d8\u91cf\u7684\u503c a = A() # a\u7ed1\u5b9a\u5927A\u7c7b\u578b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61 \u3010 print(a.get_v()) # \u6b64\u7c7b\u7684\u5b9e\u4f8b\u4e5f\u80fd\u8c03\u7528\u8be5\u7c7b\u7684\u65b9\u6cd5\uff0c \u5b9e\u9645\u4e0a\u4f20\u9012\u7684\u662fa.__class__\uff0c\u88c5\u9970\u5668\u7684\u529f\u80fd \u3011 \u9759\u6001\u65b9\u6cd5 @staticmethod \u00b6 \u9759\u6001\u65b9\u6cd5\u662f\u5b9a\u4e49\u5728\u7c7b\u7684\u5185\u90e8\u7684\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u7684\u4f5c\u7528\u57df\u662f\u7c7b\u7684\u5185\u90e8 \u8bf4\u660e \u9759\u6001\u65b9\u6cd5\u662f\u9700\u8981\u4f7f\u7528@staticmethod\u88c5\u9970\u5668\u5b9a\u4e49 \u9759\u6001\u65b9\u6cd5\u4e0e\u666e\u901a\u51fd\u6570\u5b9a\u4e49\u76f8\u540c\uff0c\u4e0d\u9700\u8981\u4f20\u5165self\u5b9e\u9645\u53c2\u6570\u548ccls\u7c7b\u53c2\u6570 \u9759\u6001\u65b9\u6cd5\u53ea\u80fd\u51ed\u501f\u8be5\u7c7b\u6216\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b\u8c03\u7528 \u9759\u6001\u65b9\u6cd5\u4e0d\u80fd\u8bbf\u95ee\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_1","text":"Object Oriented Programming \u4ec0\u4e48\u662f\u5bf9\u8c61 \u200b \u5bf9\u8c61\u662f\u6307\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u7269\u4f53\u6216\u5b9e\u4f53 \u4ec0\u4e48\u662f\u9762\u5411\u5bf9\u8c61 \u200b \u628a\u4e00\u5207\u770b\u6210\u5bf9\u8c61\uff0c\u7528\u5404\u79cd\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\u6765\u63cf\u8ff0\u4e8b\u7269 \u5bf9\u8c61\u7684\u7279\u5f81 \u5bf9\u8c61\u6709\u5f88\u591a\u5c5e\u6027\uff08\u540d\u8bcd\u6216\u5f62\u5bb9\u8bcd\uff09 \u5e74\u9f84\uff0c\u59d3\u540d\uff0c\u6027\u522b... \u5bf9\u8c61\u6709\u5f88\u591a\u884c\u4e3a\uff08\u52a8\u4f5c\uff0c\u52a8\u8bcd\uff09 \u5b66\u4e60\uff0c\u5403\u996d\uff0c\u7761\u89c9\uff0c\u8e22\u7403\uff0c\u5de5\u4f5c... \u4ec0\u4e48\u662f\u7c7b \u62e5\u6709\u76f8\u540c\u5c5e\u6027\u4e2a\u884c\u4e3a\u7684\u5bf9\u8c61\u5206\u4e3a\u4e00\u7ec4\uff0c\u5373\u4e3a\u4e00\u4e2a\u7c7b \u7c7b\u662f\u7528\u6765\u63cf\u8ff0\u5bf9\u8c61\u7684\u5de5\u5177\uff0c\u7528\u7c7b\u53ef\u4ee5\u521b\u5efa\u6b64\u7c7b\u7684\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09","title":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_2","text":"class \u8bed\u53e5 \u8bed\u6cd5 class \u7c7b\u540d\uff08\u7ee7\u627f\u5217\u8868\uff09 '''\u7c7b\u6587\u6863\u5b57\u7b26\u4e32''' \u5b9e\u4f8b\u65b9\u6cd5\u5b9a\u4e49 \u7c7b\u53d8\u91cf\u5b9a\u4e49 \u7c7b\u65b9\u6cd5\u5b9a\u4e49(@classmethod) \u9759\u6001\u65b9\u6cd5\u5b9a\u4e49(@staticmethod) \u4f5c\u7528 \u521b\u5efa\u4e00\u4e2a\u7c7b \u7c7b\u7528\u4e8e\u63cf\u8ff0\u5bf9\u8c61\u7684\u884c\u4e3a\u548c\u5c5e\u6027 \u7c7b\u7528\u4e8e\u521b\u5efa\u6b64\u7c7b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5bf9\u8c61\uff08\u5b9e\u4f8b\uff09 \u8bf4\u660e \u7c7b\u540d\u5fc5\u987b\u4e3a\u6807\u8bc6\u7b26\uff08\u4e0e\u53d8\u91cf\u547d\u540d\u89c4\u5219\u76f8\u540c\uff0c\u5efa\u8bae\u9996\u5b57\u6bcd\u5927\u5199\uff09 \u7c7b\u540d\u5b9e\u8d28\u4e0a\u5c31\u662f\u53d8\u91cf\uff0c\u5b83\u7ed1\u5b9a\u4e00\u4e2a\u7c7b class Dog (): '''\u521b\u5efa\u4e00\u4e2aDog\u7c7b\uff0c\u6b64\u7c7b\u7528\u4e8e\u63cf\u8ff0\u4e00\u79cd\u5c0f\u52a8\u7269\u7684\u884c\u4e3a\u548c\u5c5e\u6027''' pass dog1 = Dog () # \u521b\u5efaDog\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b print ( id ( dog1 )) dog2 = Dog () # \u521b\u5efaDog\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b print ( id ( dog2 ))","title":"\u7c7b\u7684\u521b\u5efa\u8bed\u53e5"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_3","text":"\u6784\u9020\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f \u7c7b\u540d([\u521b\u5efa\u4f20\u53c2\u5217\u8868]) \u4f5c\u7528 \u521b\u5efa\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u6b64\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5f15\u7528\u5173\u7cfb \u8bf4\u660e \u5b9e\u4f8b\u6709\u81ea\u5df1\u7684\u4f5c\u7528\u57df\u548c\u540d\u5b57\u7a7a\u95f4\uff0c\u53ef\u4ee5\u4e3a\u8be5\u5b9e\u4f8b\u6dfb\u52a0\u5b9e\u4f8b\u53d8\u91cf\uff08\u4e5f\u53eb\u5c5e\u6027\uff09 \u5b9e\u4f8b\u53ef\u4ee5\u8c03\u7528\u7c7b\u65b9\u6cd5\u548c\u5b9e\u4f8b\u65b9\u6cd5 \u5b9e\u4f8b\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf","title":"\u6784\u9020\u51fd\u6570"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#method","text":"\u8bed\u6cd5 class \u7c7b\u540d(\u7ee7\u627f\u5217\u8868): def \u5b9e\u4f8b\u65b9\u6cd5\u540d(self, \u5f62\u53c2\u540d1, \u5f62\u53c2\u540d2, ...): '''\u65b9\u6cd5\u6587\u6863\u5b57\u7b26\u4e32''' \u8bed\u53e5\u5757 \u4f5c\u7528 \u7528\u4e8e\u63cf\u8ff0\u4e00\u4e2a\u5bf9\u8c61\u7684\u884c\u4e3a\uff0c\u8ba9\u6b64\u7c7b\u578b\u7684\u5168\u90e8\u5bf9\u8c61\u90fd\u62e5\u6709\u76f8\u540c\u7684\u884c\u4e3a \u8bf4\u660e \u5b9e\u4f8b\u65b9\u6cd5\u7684\u5b9e\u8d28\u662f\u51fd\u6570\uff0c\u662f\u5b9a\u4e49\u5728\u7c7b\u5185\u7684\u51fd\u6570 \u5b9e\u4f8b\u65b9\u6cd5\u81f3\u5c11\u6709\u4e00\u4e2a\u5f62\u53c2\uff0c\u7b2c\u4e00\u4e2a\u5f62\u53c2\u7528\u6765\u7ed1\u5b9a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u4f8b\uff0c\u4e00\u822c\u547d\u540d\u4e3a'self' \u5b9e\u4f8b\u65b9\u6cd5\u7684\u8c03\u7528\u8bed\u53e5 \u5b9e\u4f8b.\u5b9e\u4f8b\u65b9\u6cd5\u540d(\u8c03\u7528\u4f20\u53c2) \u6216 \u7c7b\u540d.\u5b9e\u4f8b\u65b9\u6cd5\u540d(\u5b9e\u4f8b, \u8c03\u7528\u4f20\u53c2) # \u6b64\u793a\u4f8b\u793a\u610f\u793a\u4f8b\u65b9\u6cd5\u7684\u5b9a\u4e49\u548c\u8c03\u7528 class Dog : def eat ( self , food ): '''\u6b64\u65b9\u6cd5\u7528\u6765\u63cf\u8ff0\u5c0f\u72d7\u5403\u4e1c\u897f\u7684\u884c\u4e3a''' print ( '\u5c0f\u72d7\u6b63\u5728\u5403' , food ) def sleep ( self , hour ): print ( '\u5c0f\u72d7\u7761\u4e86 %d \u5c0f\u65f6' % hour ) def play ( self , obj ): print ( '\u5c0f\u72d7\u6b63\u73a9' , obj ) dog = Dog () dog . eat ( '\u9aa8\u5934' ) dog . sleep ( 1 ) dog . play ( '\u98de\u76d8' )","title":"\u5b9e\u4f8b\u65b9\u6cd5(method)"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#attribute","text":"\u6bcf\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u5b9e\u4f8b\u53d8\u91cf\u7528\u6765\u4fdd\u5b58\u5bf9\u8c61\u81ea\u5df1\u7684\u6570\u636e \u8bed\u6cd5 \u5b9e\u4f8b.\u5c5e\u6027\u540d \u8d4b\u503c\u89c4\u5219\u540c\u53d8\u91cf\u7684\u8d4b\u503c\u89c4\u5219 \u9996\u6b21\u4e3a\u5c5e\u6027\u8d4b\u503c\u5219\u521b\u5efa\u6b64\u5c5e\u6027 \u518d\u6b21\u4e3a\u5c5e\u6027\u8d4b\u503c\u5219\u6539\u53d8\u5c5e\u6027\u7684\u7ed1\u5b9a\u5173\u7cfb \u4f5c\u7528 \u8bb0\u5f55\u6bcf\u4e2a\u5bf9\u8c61\u81ea\u8eab\u7684\u6570\u636e # \u6b64\u793a\u4f8b\u793a\u610f\u793a\u4f8b\u7684\u5c5e\u6027attribute \u53ca\u8bbf\u95ee\u5c5e\u6027\u7684\u65b9\u6cd5 class Dog : def eat ( self , food ): self . last_food = food print ( self . color , '\u7684' , self . kinds , '\u6b63\u5728\u5403' , food ) def show_last_food ( self ): print ( self . color , '\u7684' , self . kinds , '\u4e0a\u6b21\u5403\u7684' , self . last_food ) dog1 = Dog () dog1 . kinds = '\u4eac\u5df4' # \u6dfb\u52a0\u5b9e\u4f8b\u5c5e\u6027 dog1 . color = '\u767d\u8272' # \u6dfb\u52a0\u72d7\u6bdb\u7684\u989c\u8272 dog1 . color = '\u9ec4\u8272' # \u4fee\u6539\u5b9e\u4f8b\u5c5e\u6027\u7684\u7ed1\u5b9a\u5173\u7cfb dog2 = Dog () dog2 . kinds = '\u85cf\u7352' # \u53e6\u4e00\u4e2a\u5bf9\u8c61 dog2 . color = '\u68d5\u8272' print ( dog1 . color , '\u7684' , dog1 . kinds ) print ( dog2 . color , '\u7684' , dog2 . kinds ) dog1 . eat ( '\u9aa8\u5934' ) dog2 . eat ( '\u72d7\u7cae' ) dog1 . show_last_food () dog2 . show_last_food ()","title":"\u5b9e\u4f8b\u5c5e\u6027 attribute"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_4","text":"\u5b9a\u4e49\u4e00\u4e2a '\u4eba' ( Human ) \u7c7b \uff0c calss Human : def set_info ( self , name , age , address = '\u4e0d\u8be6' ) '''\u6b64\u65b9\u6cd5\u7528\u6765\u7ed9\u4eba\u5bf9\u8c61\u6dfb\u52a0\u59d3\u540d, \u5e74\u9f84, \u5bb6\u5ead\u4f4f\u5740\u7b49\u5c5e\u6027''' def show_info ( self ): '''\u6b64\u5904\u663e\u793a\u6b64\u4eba\u4fe1\u606f''' \u8c03\u7528\u5982\u4e0b \uff1a h1 = Human () h1 . set_info ( '\u5c0f\u5f20' , 20 , '\u5317\u4eac\u5e02\u4e1c\u57ce\u533a' ) h2 = Human () h2 . set_info ( '\u5c0f\u674e' , 18 ) h1 . show_info () h2 . show_info ()","title":"\u7ec3\u4e60"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_5","text":"del \u8bed\u53e5 \u53ef\u4ee5\u5220\u9664\u5b9e\u4f8b\uff08instance\uff09\u7684\u5c5e\u6027 \u8bed\u53e5 del \u5b9e\u4f8b.\u5b9e\u4f8b\u53d8\u91cf\u540d \u793a\u4f8b class Dog: pass dog1 = Dog() dog1.color = '\u767d\u8272' del dog1.color # \u5220\u9664\u5c5e\u6027 print(dog1.color) # AttributeError \u5c5e\u6027\u9519\u8bef del\u8bed\u53e5\u5c0f\u7ed3 \u5220\u9664\u53d8\u91cf del name \u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d20 del l[0] \u5220\u9664\u5b57\u5178\u7684\u952e del d['name'] \u5220\u9664\u5b9e\u4f8b\u7684\u5c5e\u6027 del \u5b9e\u4f8b.\u5b9e\u4f8b\u53d8\u91cf\u540d","title":"\u5220\u9664\u5c5e\u6027"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_6","text":"\u4f5c\u7528 \u5bf9\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u6dfb\u52a0\u5c5e\u6027 \u8bed\u6cd5\u683c\u5f0f class \u7c7b\u540d(\u7ee7\u627f\u5217\u8868): del __init__(self, [\u5f62\u53c2\u5217\u8868]): \u8bed\u53e5\u5757 \u6ce8: []\u4ee3\u8868\u5176\u4e2d\u7684\u5185\u5bb9\u53ef\u4ee5\u7701\u7565 \u8bf4\u660e 1. \u521d\u59cb\u5316\u65b9\u6cd5\u540d\u5fc5\u987b\u4e3a '__init__' \u4e0d\u53ef\u4ee5\u6539\u53d8 2. \u521d\u59cb\u5316\u65b9\u6cd5\u4f1a\u5728\u6784\u9020\u51fd\u6570\u521b\u5efa\u5b9e\u4f8b\u540e\u81ea\u52a8\u8c03\u7528\uff0c\u4e14\u5c06\u5b9e\u4f8b\u81ea\u8eab\u901a\u8fc7\u7b2c\u4e00\u4e2a\u53c2\u6570self \u4f20\u5165__init__\u65b9\u6cd5 3. \u6784\u9020\u51fd\u6570\u7684\u5b9e\u53c2\u5c06\u901a\u8fc7__init__\u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\u4f20\u5165\u5230__init__\u65b9\u6cd5\u4e2d 4. \u521d\u59cb\u5316\u65b9\u6cd5\u5185\u5982\u679c\u9700\u8981return\u8bed\u53e5\u8fd4\u56de\uff0c\u5219\u53ea\u80fd\u8fd4\u56deNone # \u6b64\u793a\u4f8b\u793a\u610f\u521d\u59cb\u5316\u65b9\u6cd5\u7684\u5b9a\u4e49\uff0c\u53ca\u521d\u59cb\u5316\u65b9\u6cd5\u5bf9\u65b0\u5bf9\u8c61\u6dfb\u52a0\u5c5e\u6027 class Car : def __init__ ( self , c , b , m ): self . color = c # \u989c\u8272 self . brand = b # \u54c1\u724c self . model = m # \u578b\u53f7 def run ( self , speed ): print ( self . color , '\u7684' , self . brand , self . model , '\u6b63\u5728\u4ee5' , speed , '\u516c\u91cc/\u5c0f\u65f6\u7684\u901f\u5ea6\u884c\u9a76' ) a4 = Car ( '\u7ea2\u8272' , '\u5965\u8fea' , 'A4' ) a4 . run ( 199 ) t1 = Car ( '\u84dd\u8272' , 'TESLA' , 'Model S' ) t1 . run ( 230 )","title":"\u521d\u59cb\u5316\u65b9\u6cd5"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_7","text":"\u5199\u4e00\u4e2aStudent\u7c7b\uff0c \u6b64\u7c7b\u521b\u5efa\u7684\u5bf9\u8c61\u6709\u4e09\u4e2a\u5c5e\u6027\uff0c\u59d3\u540d\uff0c\u5e74\u9f84\uff0c \u6210\u7ee9 1. \u7528\u521d\u59cb\u5316\u65b9\u6cd5\u4e3a\u8be5\u7c7b\u6dfb\u52a0\u4e0a\u8ff0\u4e09\u4e2a\u5c5e\u6027 2. \u6dfb\u52a0set_score() \u65b9\u6cd5\u80fd\u4e3a\u5bf9\u8c61\u4fee\u6539\u5b66\u751f\u6210\u7ee9 3. \u6dfb\u52a0show_info() \u65b9\u6cd5\u6253\u5370\u5b66\u751f\u4fe1\u606f","title":"\u7ec3\u4e60"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_8","text":"class \u7c7b\u540d(\u7ee7\u627f\u5217\u8868): def __del__(self): \u8bed\u53e5\u5757 \u6790\u6784\u65b9\u6cd5\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u81ea\u52a8\u8c03\u7528 python\u8bed\u8a00\u5efa\u8bae\u4e0d\u8981\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u505a\u4efb\u4f55\u4e8b\uff0c\u56e0\u4e3a\u9500\u6bc1\u65f6\u95f4\u96be\u4ee5\u786e\u5b9a ```python","title":"\u6790\u6784\u65b9\u6cd5"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_9","text":"import time class Car: def init (self, info): self.info = info print('\u6c7d\u8f66\u5bf9\u8c61', info, '\u88ab\u521b\u5efa') def del (self): print('\u6c7d\u8f66\u5bf9\u8c61', self.info, '\u88ab\u9500\u6bc1') car = Car('BYD E6')","title":"\u6b64\u793a\u4f8b\u793a\u610f\u6790\u6784\u65b9\u6cd5\u7684\u4f7f\u7528"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#car-none-byd-e6","text":"del car # \u5220\u9664\u53d8\u91cf\u91ca\u653e\u5bf9\u8c61 l = [] l.append(Car('\u6c7d\u8f661')) l.append(Car('\u6c7d\u8f662')) l.append(Car('\u6c7d\u8f663'))","title":"car = None  # \u6539\u53d8\u5bf9\u8c61\u7684\u7ed1\u5b9a\u5173\u7cfb\u53ef\u4ee5\u91ca\u653e BYD E6\u5bf9\u8c61"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#del-l","text":"input('\u8bf7\u8f93\u5165\u56de\u8f66\u952e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f') print('\u7a0b\u5e8f\u9000\u51fa') ```","title":"del l  # \u91ca\u653e\u5217\u8868"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_10","text":"__dict__\u5c5e\u6027 __dict__\u5c5e\u6027 \u7ed1\u5b9a\u4e00\u4e2a\u5b58\u50a8\u6b64\u5b9e\u4f8b\u81ea\u8eab\u53d8\u91cf\u5b57\u5178 \u793a\u4f8b class Dog: pass dog1 = Dog() print(dog1.__dict__) # {} dog1.color = '\u767d\u8272' print(dog1.__dict__) # {'color': '\u767d\u8272'} dog1.kinds = '\u4eac\u5df4' print(dog1.__dict__) # {'color': '\u767d\u8272', 'kinds':'\u4eac\u5df4'} __class__\u5c5e\u6027 __class__ \u5c5e\u6027\u7ed1\u5b9a\u521b\u5efa\u6b64\u5b9e\u4f8b\u7684\u7c7b \u4f5c\u7528 \u53ef\u4ee5\u501f\u52a9\u6b64\u5c5e\u6027\u6765\u8bbf\u95ee\u521b\u5efa\u6b64\u5b9e\u4f8b\u7684\u7c7b \u793a\u4f8b class Dog: pass dog1 = Dog() print(dog1.__class__) dog2 = dog1.__class__() print(dog2.__class__)","title":"\u9884\u7f6e\u5b9e\u4f8b\u5c5e\u6027"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_11","text":"isinstance(obj, class_or_tuple) \u8fd4\u56de\u8fd9\u4e2a\u5bf9\u8c61obj\u662f\u5426\u662f\u67d0\u4e2a\u7c7b\u7684\u5bf9\u8c61\u6216\u8005\u67d0\u4e9b\u7c7b\u4e2d\u7684\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue, \u5426\u5219\u8fd4\u56deFalse type(obj) \u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u578b","title":"\u7528\u4e8e\u5bf9\u8c61\u7684\u51fd\u6570"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_12","text":"\u6709\u4e24\u4e2a\u4eba\uff1a \u5c5e\u6027\uff1a 1. \u59d3\u540d\uff1a\u5f20\u4e09 \u5e74\u9f84\uff1a35 \u5c81 2. \u59d3\u540d\uff1a\u674e\u56db \u5e74\u9f84\uff1a8 \u5c81 \u884c\u4e3a\uff1a 1. \u6559\u522b\u4eba\u5b66\u4e1c\u897f teach 2. \u5de5\u4f5c\u8d5a\u94b1 work 2. \u5de5\u4f5c\u8d5a\u94b1 work 3. \u501f\u94b1 borrow \u4e8b\u60c5\uff1a \u5f20\u4e09 \u6559 \u674e\u56db \u5b66 python \u674e\u56db \u6559 \u5f20\u4e09 \u5b66 \u738b\u8005\u8363\u8000 \u5f20\u4e09 \u4e0a\u73ed\u8d5a\u4e86 1000\u5143\u94b1 \u674e\u56db \u5411 \u5f20\u4e09 \u501f\u4e86 200\u5143\u94b1 35 \u5c81\u7684 \u5f20\u4e09 \u6709\u94b1 800\u5143\uff0c \u5b83\u5b66\u4f1a\u7684\u6280\u80fd\uff1a\u738b\u8005\u8363\u8000 8 \u5c81\u7684 \u674e\u56db \u6709\u94b1 200\u5143\uff0c \u5b83\u5b66\u4f1a\u7684\u6280\u80fd\uff1apython","title":"\u9762\u5411\u5bf9\u8c61\u7684\u7efc\u5408\u793a\u4f8b"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#_13","text":"\u7c7b\u53d8\u91cf\u662f\u7c7b\u7684\u5c5e\u6027\uff0c\u6b64\u5c5e\u6027\u5c5e\u4e8e\u7c7b\uff0c\u4e0d\u5c5e\u4e8e\u6b64\u7c7b\u7684\u5b9e\u4f8b \u4f5c\u7528 \u901a\u5e38\u7528\u6765\u5b58\u50a8\u8be5\u7c7b\u521b\u5efa\u5bf9\u8c61\u7684\u5171\u6709\u5c5e\u6027 \u8bf4\u660e \u7c7b\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7\u8be5\u7c7b\u76f4\u63a5\u8bbf\u95ee \u7c7b\u53d8\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7\u7c7b\u7684\u5b9e\u4f8b\u76f4\u63a5\u8bbf\u95ee \u7c7b\u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7\u6b64\u7c7b\u7684\u5bf9\u8c61__class__\u5c5e\u6027\u95f4\u63a5\u8bbf\u95ee \u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u7c7b\u5185\u7b2c\u4e00\u4e2a\u6ca1\u6709\u8d4b\u503c\u7ed9\u4efb\u4f55\u53d8\u91cf\u7684\u5b57\u7b26\u4e32\u4e3a\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32 \u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7help()\u51fd \u6570\u67e5\u770b \u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32\u7ed1\u5b9a\u5728\u7c7b\u7684__doc__\u5c5e\u6027\u4e0a \u7c7b\u7684__slots__\u5217\u8868 \u4f5c\u7528 \u9650\u5b9a\u4e00\u4e2a\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b\u53ea\u80fd\u6709\u56fa\u5b9a\u7684\u5c5e\u6027\uff08\u5b9e\u4f8b\u53d8\u91cf\uff09 \u4e0d\u5141\u8bb8\u5bf9\u8c61\u6dfb\u52a0\u5217\u8868\u4ee5\u5916\u7684\u5b9e\u4f8b\u5c5e\u6027\uff08\u5b9e\u4f8b\u53d8\u91cf\uff09 \u9632\u6b62\u7528\u6237\u56e0\u586b\u9519\u5c5e\u6027\u540d\u800c\u53d1\u751f\u7684\u7a0b\u5e8f\u9519\u8bef \u8bf4\u660e __slots__\u5c5e\u6027\u7ed1\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 \u542b\u6709__slots__\u5c5e\u6027\u7684\u7c7b\u6240\u521b\u5efa\u7684\u5b9e\u4f8b\u5bf9\u8c61\u6ca1\u6709__dict__\u5c5e\u6027\uff0c\u5373\u6b64\u5b9e\u4f8b\u4e0d\u7528\u5b57\u5178\u6765\u5b58\u50a8\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5c5e\u6027 # \u6b64\u793a\u4f8b\u793a\u610f\u7c7b\u5185__slots__\u5217\u8868\u7684\u7528\u6cd5\u548c\u4f5c\u7528 class Human : # __slots__ = ['name', 'age'] # \u4fdd\u5b58\u7c7b\u53ea\u80fd\u6709\u5217\u8868\u91cc\u7684\u5c5e\u6027 def __init__ ( self , n , a ): self . name = n self . age = a def info ( self ): print ( self . name , '\u4eca\u5e74' , self . age , '\u5c81' ) h1 = Human ( '\u5c0f\u5f20' , 8 ) h1 . info () # \u5c0f\u5f20 \u4eca\u5e74 8 \u5c81 h1 . Age = 9 h1 . info () # \u5c0f\u5f20 \u4eca\u5e74 8 \u5c81","title":"\u7c7b\u53d8\u91cf"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#classmethod","text":"\u7c7b\u65b9\u6cd5\u662f\u7528\u4e8e\u63cf\u8ff0\u7c7b\u7684\u884c\u4e3a\u7684\u65b9\u6cd5\uff0c\u7c7b\u65b9\u6cd5\u5c5e\u4e8e\u7c7b\uff0c\u4e0d\u5c5e\u4e8e\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61 \u8bf4\u660e \u7c7b\u65b9\u6cd5\u9700\u8981\u7528@calssmethod\u88c5\u9970\u5668\u5b9a\u4e49 \u7c7b\u65b9\u6cd5\u81f3\u5c11\u6709\u4e00\u4e2a\u5f62\u53c2\uff0c\u7b2c\u4e00\u4e2a\u5f62\u53c2\u7ed1\u5b9a\u7c7b\uff0c\u7ea6\u5b9a\u4e3a'cls' \u7c7b\u548c\u8be5\u7c7b\u7684\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5 \u7c7b\u65b9\u6cd5\u4e0d\u80fd\u8bbf\u95ee\u6b64\u7c7b\u521b\u5efa\u7684\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5c5e\u6027 \u793a\u4f8b\u89c1 class A: v = 0 # \u7c7b\u53d8\u91cf @classmethod def get_v(cls): return cls.v # \u7528cls\u8bbf\u95ee\u53d8\u91cfv @classmethod def set_v(cls, v): cls.v = v A.set_v(100) print('A.v =', A.get_v()) # \u8c03\u7528\u7c7b\u65b9\u6cd5\u5f97\u5230\u7c7b\u53d8\u91cf\u7684\u503c a = A() # a\u7ed1\u5b9a\u5927A\u7c7b\u578b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61 \u3010 print(a.get_v()) # \u6b64\u7c7b\u7684\u5b9e\u4f8b\u4e5f\u80fd\u8c03\u7528\u8be5\u7c7b\u7684\u65b9\u6cd5\uff0c \u5b9e\u9645\u4e0a\u4f20\u9012\u7684\u662fa.__class__\uff0c\u88c5\u9970\u5668\u7684\u529f\u80fd \u3011","title":"\u7c7b\u65b9\u6cd5@classmethod"},{"location":"python/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/#staticmethod","text":"\u9759\u6001\u65b9\u6cd5\u662f\u5b9a\u4e49\u5728\u7c7b\u7684\u5185\u90e8\u7684\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u7684\u4f5c\u7528\u57df\u662f\u7c7b\u7684\u5185\u90e8 \u8bf4\u660e \u9759\u6001\u65b9\u6cd5\u662f\u9700\u8981\u4f7f\u7528@staticmethod\u88c5\u9970\u5668\u5b9a\u4e49 \u9759\u6001\u65b9\u6cd5\u4e0e\u666e\u901a\u51fd\u6570\u5b9a\u4e49\u76f8\u540c\uff0c\u4e0d\u9700\u8981\u4f20\u5165self\u5b9e\u9645\u53c2\u6570\u548ccls\u7c7b\u53c2\u6570 \u9759\u6001\u65b9\u6cd5\u53ea\u80fd\u51ed\u501f\u8be5\u7c7b\u6216\u7c7b\u521b\u5efa\u7684\u5b9e\u4f8b\u8c03\u7528 \u9759\u6001\u65b9\u6cd5\u4e0d\u80fd\u8bbf\u95ee\u7c7b\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf","title":"\u9759\u6001\u65b9\u6cd5 @staticmethod"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/","text":"skynet: \u57fa\u4e8e Actor \u6a21\u5f0f\u7684\u5f00\u6e90\u6846\u67b6 \u00b6 Skynet \u662f\u4e00\u4e2a\u57fa\u4e8eC\u8ddflua\u7684\u5f00\u6e90\u670d\u52a1\u7aef\u5e76\u884c\u6846\u67b6\uff0c \u4f5c\u8005\uff1a\u4e91\u98ce\uff08 \u7b80\u60a6\u79d1\u6280 \u4e91\u98ce\uff09\u3002 \u4f5c\u8005\u89c6\u9891\u89e3\u8bf4skynet\uff1a http://gad.qq.com/content/coursedetail?id=467 skynet\u8bbe\u8ba1\u7efc\u8ff0\uff1a https://blog.codingnow.com/2012/09/the_design_of_skynet.html \u5148\u9605\u8bfb\u5b8c\u8bbe\u8ba1\u7efc\u8ff0\u518d\u770b\u4e0b\u9762\u7684\u5185\u5bb9\u3002 Code Base 1000\u884cC\u6838\u5fc3\u670d\u52a1\u4ee3\u7801 1000\u884clua\u6838\u5fc3\u5e93 5000\u884clua\u5916\u56f4\u5e93 redis/mysql/mongodb driver crypt, sproto, sharedata, etc \u6d88\u606f\u8c03\u5ea6\u6a21\u5757 \u00b6 \u6309\u7167cpu\u7684\u6838\u5fc3\u914d\u7f6e\u5de5\u4f5c\u7ebf\u7a0b\uff0cactor\u7684\u6570\u91cf\u662f\u8fdc\u5927\u4e8e\u5de5\u4f5c\u7ebf\u7a0b\u7684\u6570\u91cf\u7684\uff0c\u4e00\u4e2aactor\u5411\u53e6\u4e00\u4e2aactor\u53d1\u6d88\u606f\uff0cactor\u62ff\u5230\u6d88\u606f\u4e4b\u540e\u518d\u53bb\u5904\u7406\u3002 skynet\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u7684\u6d88\u606f\u961f\u5217\uff0c\u6bcf\u4e2a\u6d88\u606f\u961f\u5217\u91cc\u5305\u542b\u6240\u6709actor\uff08\u542b\u6709\u5f85\u5904\u7406\u6d88\u606f\u7684actor\uff09\uff0c\u6bcf\u4e2aactor\u6709\u81ea\u5df1\u7684\u6d88\u606f\u961f\u5217\uff0c\u6240\u6709\u7684\u5de5\u4f5c\u7ebf\u7a0b\u53bb\u6d88\u606f\u961f\u5217\u91cc\u53bb\u62ff\u5230actor\uff0c\u518d\u4eceactor\u91cc\u62ff\u5230\u6d88\u606f\u518d\u4e22\u7ed9actor\u53bb\u5904\u7406\u3002\u7ebf\u7a0b\u4f1a\u4e00\u76f4\u53bb\u62ff\u6d88\u606f\u5904\u7406\uff0c\u9664\u975e\u5168\u5c40\u6d88\u606f\u961f\u5217\u4e3a\u7a7a\uff0c\u7ebf\u7a0b\u624d\u4f1a\u4f11\u606f\u3002 \u5f02\u6b65\u7f16\u7a0b \u00b6 coroutine vs callback callback\uff1a\u5f02\u5e38\u4f20\u64ad\u56f0\u96be\u3002 coroutine(\u534f\u7a0b)\uff1a\u6709\u81ea\u5df1\u7684\u8c03\u7528\u6808\uff0c\u534f\u7a0b\u95f4\u5207\u6362\u7531\u7a0b\u5e8f\u5458\u63a7\u5236\uff0c\u800c\u7ebf\u7a0b\u95f4\u5207\u6362\u53d7\u7cfb\u7edf\u63a7\u5236\u3002 --\u534f\u7a0b\u5207\u6362\u5185\u5b58\u5f00\u53d1\u5c0f\uff0c\u5f02\u5e38\u4f20\u64ad\u5f88\u5bb9\u6613\u3002 --\u590d\u7528coroutine\u907f\u514d\u8fc7\u9891\u7684GC(\u5783\u573e\u56de\u6536) Actor \u6c99\u76d2 \u00b6 actor \u6a21\u5f0f\u4fdd\u8bc1\u5355\u72ec\u7684actor\u51fa\u95ee\u9898\u5c3d\u91cf\u628a\u4ea7\u751f\u7684\u5f71\u54cd\u53d8\u5f97\u6700\u5c0f\u3002 **\u4f20\u7edf\u6a21\u5f0f**\u4e0b\u7684\u7406\u5ff5\u662f\u4ee3\u7801\u5c3d\u91cf\u4e0d\u8981\u51fa\u9519\uff0c\u4ee3\u7801\u4e0a\u7ebf\u524d\u591a\u6d4b\u8bd5\u3002 **Actor\u6a21\u5f0f**\u662f\u4ee3\u7801\u4e0d\u53ef\u907f\u514d\u7684\u4f1a\u51fa\u9519\uff0c\u51fa\u9519\u5c3d\u91cf\u628a\u51fa\u9519\u7684\u8303\u56f4\u964d\u5230\u6700\u5c0f\uff0c\u4e0d\u8981\u5f71\u54cd\u5230\u5176\u4ed6\u7684\u670d\u52a1\u3002\u5982\u679c\u6709\u4e25\u91cd\u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u4ece\u4e25\u91cd\u7684\u9519\u8bef\u91cc\u6062\u590d\u8d77\u6765\u3002 \u901a\u8baf\u534f\u8bae \u00b6 \u8fdb\u7a0b\u5185\u6d88\u606f\u4f20\u9012 \u901a\u8fc7\u6587\u672c\u534f\u8bae\u5e8f\u5217\u5316\u53d1\u9001\u5230\u5176\u4ed6\u7684\u670d\u52a1\uff0c\u6536\u5230\u6d88\u606f\u7684\u670d\u52a1\u5728\u53cd\u5e8f\u5217\u5316\u56de\u6765\u3002 \u6587\u672c\u534f\u8bae(C\u670d\u52a1) \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5e93(Lua\u670d\u52a1) \u5185\u5b58\u6570\u636e\u7ed3\u6784(\u81ea\u5b9a\u4e49) \u8de8\u8fdb\u7a0b\u6d88\u606f\u4f20\u9012 \u901a\u8fc7\u73b0\u6709\u7684\u534f\u8bae\u8fdb\u884c\u4f20\u9012\u3002 \u81ea\u5b9a\u4e49\u534f\u8bae \u4e16\u9762\u4e0a\u7684\u534f\u8bae\uff1asproto, google proto buffers, json, etc... \u5e7f\u64ad\u548c\u7ec4\u64ad \u200b ... \u5206\u5e03\u5f0f\u89e3\u51b3\u65b9\u6848 \u00b6 skynet\u652f\u6301\u4e24\u79cd\u5206\u5e03\u5f0f\u65b9\u6848 -- harbor \u6a21\u5f0f\u7528\u4e8e\u6269\u5c55\u8ba1\u7b97\u80fd\u529b\u7684\u4e0d\u8db3 --cluster \u6a21\u5f0f\u63d0\u4f9b\u5f39\u6027 --\u53ef\u4ee5\u4e00\u8d77\u4f7f\u7528 \u5982\u679c\u6ca1\u6709\u5fc5\u8981\uff0c\u8bf7\u5728\u4e00\u53f0\u673a\u5668\u89e3\u51b3\uff0c\u4f7f\u7528cluster\u505a\u5f31\u5173\u8054 \u4e0d\u505a\u70ed\u66f4\u65b0\uff0c\u53ea\u505a\u70ed\u4fee\u590d --A/B\u6eda\u670d, \u5b9a\u671f\u7ef4\u62a4\uff0c\u51cf\u5c11\u590d\u6742\u5ea6\u3002 MMOPRG \u00b6 MMORPG: Massive Muti-player Online RPG \u591a\u4eba\u5728\u7ebfRPG \u9b54\u517d \u4f20\u5947 \u90fd\u662fMMO RPG:Role Playing Game\u89d2\u8272\u626e\u6f14\u6e38\u620f agent \u73a9\u5bb6\u7684\u4ee3\u7406\uff0c\u6240\u6709\u7684\u73a9\u5bb6\u64cd\u4f5c\u901a\u8fc7agent\u548c\u5176\u4ed6\u7684\u670d\u52a1\u6253\u4ea4\u4ee3\uff0c\u4e0d\u9700\u8981\u4ea4\u4e92\u7684\u64cd\u4f5c\u901a\u8fc7agent\u81ea\u5df1\u89e3\u51b3\u3002 \u5178\u578b\u624b\u6e38\u96c6\u7fa4 \u00b6 \u8c03\u4f18\u548c\u4f18\u5316 \u00b6 \u5185\u5efa\u6027\u80fd\u5206\u6790\u6a21\u5757 Lua\u6a21\u5757\u5185\u5efa\u76d1\u63a7\u534f\u8bae \u66ff\u6362CRT\u5185\u5b58\u7ba1\u7406\u5e93(jemalloc) \u8fdb\u7a0b\u5185\u6d88\u606f\u4f20\u9012\u51cf\u5c11\u62f7\u8d1d \u4f18\u5316\u5411\u81ea\u8eab\u53d1\u9001\u7684\u6d88\u606f \u5408\u5e76timer\u8bf7\u6c42 \u9ad8\u6027\u80fd\u8981\u6c42\u7684\u670d\u52a1\u4f7f\u7528C/C++\u7f16\u5199(\u614e\u7528) \u4e3aLua\u7ebf\u7a0bC\u6a21\u5757 AOI \u5bfb\u8def \u7ec4\u64ad \u516c\u5f0f\u8ba1\u7b97 \u4f18\u5316\u767b\u9646\uff0c\u627e\u5230\u70ed\u70b9\uff0c\u907f\u514d\u5355\u70b9","title":"2. skynet \u57fa\u4e8e Actor \u6a21\u5f0f\u7684\u5f00\u6e90\u6846\u67b6"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#skynet-actor","text":"Skynet \u662f\u4e00\u4e2a\u57fa\u4e8eC\u8ddflua\u7684\u5f00\u6e90\u670d\u52a1\u7aef\u5e76\u884c\u6846\u67b6\uff0c \u4f5c\u8005\uff1a\u4e91\u98ce\uff08 \u7b80\u60a6\u79d1\u6280 \u4e91\u98ce\uff09\u3002 \u4f5c\u8005\u89c6\u9891\u89e3\u8bf4skynet\uff1a http://gad.qq.com/content/coursedetail?id=467 skynet\u8bbe\u8ba1\u7efc\u8ff0\uff1a https://blog.codingnow.com/2012/09/the_design_of_skynet.html \u5148\u9605\u8bfb\u5b8c\u8bbe\u8ba1\u7efc\u8ff0\u518d\u770b\u4e0b\u9762\u7684\u5185\u5bb9\u3002 Code Base 1000\u884cC\u6838\u5fc3\u670d\u52a1\u4ee3\u7801 1000\u884clua\u6838\u5fc3\u5e93 5000\u884clua\u5916\u56f4\u5e93 redis/mysql/mongodb driver crypt, sproto, sharedata, etc","title":"skynet: \u57fa\u4e8e Actor \u6a21\u5f0f\u7684\u5f00\u6e90\u6846\u67b6"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#_1","text":"\u6309\u7167cpu\u7684\u6838\u5fc3\u914d\u7f6e\u5de5\u4f5c\u7ebf\u7a0b\uff0cactor\u7684\u6570\u91cf\u662f\u8fdc\u5927\u4e8e\u5de5\u4f5c\u7ebf\u7a0b\u7684\u6570\u91cf\u7684\uff0c\u4e00\u4e2aactor\u5411\u53e6\u4e00\u4e2aactor\u53d1\u6d88\u606f\uff0cactor\u62ff\u5230\u6d88\u606f\u4e4b\u540e\u518d\u53bb\u5904\u7406\u3002 skynet\u7ef4\u62a4\u4e00\u4e2a\u5168\u5c40\u7684\u6d88\u606f\u961f\u5217\uff0c\u6bcf\u4e2a\u6d88\u606f\u961f\u5217\u91cc\u5305\u542b\u6240\u6709actor\uff08\u542b\u6709\u5f85\u5904\u7406\u6d88\u606f\u7684actor\uff09\uff0c\u6bcf\u4e2aactor\u6709\u81ea\u5df1\u7684\u6d88\u606f\u961f\u5217\uff0c\u6240\u6709\u7684\u5de5\u4f5c\u7ebf\u7a0b\u53bb\u6d88\u606f\u961f\u5217\u91cc\u53bb\u62ff\u5230actor\uff0c\u518d\u4eceactor\u91cc\u62ff\u5230\u6d88\u606f\u518d\u4e22\u7ed9actor\u53bb\u5904\u7406\u3002\u7ebf\u7a0b\u4f1a\u4e00\u76f4\u53bb\u62ff\u6d88\u606f\u5904\u7406\uff0c\u9664\u975e\u5168\u5c40\u6d88\u606f\u961f\u5217\u4e3a\u7a7a\uff0c\u7ebf\u7a0b\u624d\u4f1a\u4f11\u606f\u3002","title":"\u6d88\u606f\u8c03\u5ea6\u6a21\u5757"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#_2","text":"coroutine vs callback callback\uff1a\u5f02\u5e38\u4f20\u64ad\u56f0\u96be\u3002 coroutine(\u534f\u7a0b)\uff1a\u6709\u81ea\u5df1\u7684\u8c03\u7528\u6808\uff0c\u534f\u7a0b\u95f4\u5207\u6362\u7531\u7a0b\u5e8f\u5458\u63a7\u5236\uff0c\u800c\u7ebf\u7a0b\u95f4\u5207\u6362\u53d7\u7cfb\u7edf\u63a7\u5236\u3002 --\u534f\u7a0b\u5207\u6362\u5185\u5b58\u5f00\u53d1\u5c0f\uff0c\u5f02\u5e38\u4f20\u64ad\u5f88\u5bb9\u6613\u3002 --\u590d\u7528coroutine\u907f\u514d\u8fc7\u9891\u7684GC(\u5783\u573e\u56de\u6536)","title":"\u5f02\u6b65\u7f16\u7a0b"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#actor","text":"actor \u6a21\u5f0f\u4fdd\u8bc1\u5355\u72ec\u7684actor\u51fa\u95ee\u9898\u5c3d\u91cf\u628a\u4ea7\u751f\u7684\u5f71\u54cd\u53d8\u5f97\u6700\u5c0f\u3002 **\u4f20\u7edf\u6a21\u5f0f**\u4e0b\u7684\u7406\u5ff5\u662f\u4ee3\u7801\u5c3d\u91cf\u4e0d\u8981\u51fa\u9519\uff0c\u4ee3\u7801\u4e0a\u7ebf\u524d\u591a\u6d4b\u8bd5\u3002 **Actor\u6a21\u5f0f**\u662f\u4ee3\u7801\u4e0d\u53ef\u907f\u514d\u7684\u4f1a\u51fa\u9519\uff0c\u51fa\u9519\u5c3d\u91cf\u628a\u51fa\u9519\u7684\u8303\u56f4\u964d\u5230\u6700\u5c0f\uff0c\u4e0d\u8981\u5f71\u54cd\u5230\u5176\u4ed6\u7684\u670d\u52a1\u3002\u5982\u679c\u6709\u4e25\u91cd\u7684\u9519\u8bef\uff0c\u53ef\u4ee5\u4ece\u4e25\u91cd\u7684\u9519\u8bef\u91cc\u6062\u590d\u8d77\u6765\u3002","title":"Actor \u6c99\u76d2"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#_3","text":"\u8fdb\u7a0b\u5185\u6d88\u606f\u4f20\u9012 \u901a\u8fc7\u6587\u672c\u534f\u8bae\u5e8f\u5217\u5316\u53d1\u9001\u5230\u5176\u4ed6\u7684\u670d\u52a1\uff0c\u6536\u5230\u6d88\u606f\u7684\u670d\u52a1\u5728\u53cd\u5e8f\u5217\u5316\u56de\u6765\u3002 \u6587\u672c\u534f\u8bae(C\u670d\u52a1) \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5e93(Lua\u670d\u52a1) \u5185\u5b58\u6570\u636e\u7ed3\u6784(\u81ea\u5b9a\u4e49) \u8de8\u8fdb\u7a0b\u6d88\u606f\u4f20\u9012 \u901a\u8fc7\u73b0\u6709\u7684\u534f\u8bae\u8fdb\u884c\u4f20\u9012\u3002 \u81ea\u5b9a\u4e49\u534f\u8bae \u4e16\u9762\u4e0a\u7684\u534f\u8bae\uff1asproto, google proto buffers, json, etc... \u5e7f\u64ad\u548c\u7ec4\u64ad \u200b ...","title":"\u901a\u8baf\u534f\u8bae"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#_4","text":"skynet\u652f\u6301\u4e24\u79cd\u5206\u5e03\u5f0f\u65b9\u6848 -- harbor \u6a21\u5f0f\u7528\u4e8e\u6269\u5c55\u8ba1\u7b97\u80fd\u529b\u7684\u4e0d\u8db3 --cluster \u6a21\u5f0f\u63d0\u4f9b\u5f39\u6027 --\u53ef\u4ee5\u4e00\u8d77\u4f7f\u7528 \u5982\u679c\u6ca1\u6709\u5fc5\u8981\uff0c\u8bf7\u5728\u4e00\u53f0\u673a\u5668\u89e3\u51b3\uff0c\u4f7f\u7528cluster\u505a\u5f31\u5173\u8054 \u4e0d\u505a\u70ed\u66f4\u65b0\uff0c\u53ea\u505a\u70ed\u4fee\u590d --A/B\u6eda\u670d, \u5b9a\u671f\u7ef4\u62a4\uff0c\u51cf\u5c11\u590d\u6742\u5ea6\u3002","title":"\u5206\u5e03\u5f0f\u89e3\u51b3\u65b9\u6848"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#mmoprg","text":"MMORPG: Massive Muti-player Online RPG \u591a\u4eba\u5728\u7ebfRPG \u9b54\u517d \u4f20\u5947 \u90fd\u662fMMO RPG:Role Playing Game\u89d2\u8272\u626e\u6f14\u6e38\u620f agent \u73a9\u5bb6\u7684\u4ee3\u7406\uff0c\u6240\u6709\u7684\u73a9\u5bb6\u64cd\u4f5c\u901a\u8fc7agent\u548c\u5176\u4ed6\u7684\u670d\u52a1\u6253\u4ea4\u4ee3\uff0c\u4e0d\u9700\u8981\u4ea4\u4e92\u7684\u64cd\u4f5c\u901a\u8fc7agent\u81ea\u5df1\u89e3\u51b3\u3002","title":"MMOPRG"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#_5","text":"","title":"\u5178\u578b\u624b\u6e38\u96c6\u7fa4"},{"location":"skynet/skynet%20%E5%9F%BA%E4%BA%8E%20Actor%20%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/#_6","text":"\u5185\u5efa\u6027\u80fd\u5206\u6790\u6a21\u5757 Lua\u6a21\u5757\u5185\u5efa\u76d1\u63a7\u534f\u8bae \u66ff\u6362CRT\u5185\u5b58\u7ba1\u7406\u5e93(jemalloc) \u8fdb\u7a0b\u5185\u6d88\u606f\u4f20\u9012\u51cf\u5c11\u62f7\u8d1d \u4f18\u5316\u5411\u81ea\u8eab\u53d1\u9001\u7684\u6d88\u606f \u5408\u5e76timer\u8bf7\u6c42 \u9ad8\u6027\u80fd\u8981\u6c42\u7684\u670d\u52a1\u4f7f\u7528C/C++\u7f16\u5199(\u614e\u7528) \u4e3aLua\u7ebf\u7a0bC\u6a21\u5757 AOI \u5bfb\u8def \u7ec4\u64ad \u516c\u5f0f\u8ba1\u7b97 \u4f18\u5316\u767b\u9646\uff0c\u627e\u5230\u70ed\u70b9\uff0c\u907f\u514d\u5355\u70b9","title":"\u8c03\u4f18\u548c\u4f18\u5316"},{"location":"skynet/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%92%8C%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B/","text":"\u5e76\u53d1\u7f16\u7a0b\u548c\u5e76\u884c\u7f16\u7a0b \u00b6 \u5e76\u53d1 : \u540c\u4e00\u65f6\u523b\u53ea\u6709\u5355\u4efb\u52a1\u6267\u884c\uff0c\u901a\u8fc7\u65f6\u95f4\u7247\u5207\u6362\u4e0d\u540c\u7684\u4efb\u52a1\u3002 \u5e76\u884c : \u591a\u4e2a\u4efb\u52a1\u5728\u540c\u4e00\u65f6\u523b\u6267\u884c\uff0c\u540c\u65f6\u6267\u884c\u3002 \u4e3a\u4ec0\u4e48\u5e76\u53d1\u7a0b\u5e8f\u8fd9\u4e48\u96be? \u00b6 \u200b \u62ff\u6211\u4eec\u4ece\u6700\u5f00\u59cb\u68b3\u7406\u4e0b\u7a0b\u5e8f\u7684\u62bd\u8c61\u3002\u5f00\u59cb\u6211\u4eec\u7684\u7a0b\u5e8f\u662f\u9762\u5411\u8fc7\u7a0b\u7684\uff0c\u6570\u636e\u7ed3\u6784+func\u3002\u540e\u6765\u6709\u4e86\u9762\u5411\u5bf9\u8c61\uff0c\u5bf9\u8c61\u7ec4\u5408\u4e86\u6570\u7ed3\u6784\u548cfunc\uff0c\u6211\u4eec\u60f3\u7528\u6a21\u62df\u73b0\u5b9e\u4e16\u754c\u7684\u65b9\u5f0f\uff0c\u62bd\u8c61\u51fa\u5bf9\u8c61\uff0c\u6709\u72b6\u6001\u548c\u884c\u4e3a\u3002\u4f46\u65e0\u8bba\u662f\u9762\u5411\u8fc7\u7a0b\u7684func\u8fd8\u662f\u9762\u5411\u5bf9\u8c61\u7684func\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u4ee3\u7801\u5757\u7684\u7ec4\u7ec7\u5355\u5143\uff0c\u672c\u8eab\u5e76\u6ca1\u6709\u5305\u542b\u4ee3\u7801\u5757\u7684\u5e76\u53d1\u7b56\u7565\u7684\u5b9a\u4e49\u3002\u4e8e\u662f\u4e3a\u4e86\u89e3\u51b3\u5e76\u53d1\u7684\u9700\u6c42\uff0c\u5f15\u5165\u4e86Thread\uff08\u7ebf\u7a0b\uff09\u7684\u6982\u5ff5\u3002 \u7ebf\u7a0b\uff08Thread\uff09 \u00b6 CPU\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u4f4d \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u53ef\u5171\u4eab\u8d44\u6e90 \u7ebf\u7a0b\u7684\u51fa\u73b0\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u662fGUI\u51fa\u73b0\u540e\u6025\u5207\u9700\u8981\u5e76\u53d1\u673a\u5236\u6765\u4fdd\u8bc1\u7528\u6237\u754c\u9762\u7684\u54cd\u5e94\u3002\u7b2c\u4e8c\u662f\u4e92\u8054\u7f51\u53d1\u5c55\u540e\u5e26\u6765\u7684\u591a\u7528\u6237\u95ee\u9898\u3002\u6700\u65e9\u7684CGI\u7a0b\u5e8f\u5f88\u7b80\u5355\uff0c\u5c06\u901a\u8fc7\u811a\u672c\u5c06\u539f\u6765\u5355\u673a\u7248\u7684\u7a0b\u5e8f\u5305\u88c5\u5728\u4e00\u4e2a\u8fdb\u7a0b\u91cc\uff0c\u6765\u4e00\u4e2a\u7528\u6237\u5c31\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u3002\u4f46\u660e\u663e\u8fd9\u6837\u627f\u8f7d\u4e0d\u4e86\u591a\u5c11\u7528\u6237\uff0c\u5e76\u4e14\u5982\u679c\u8fdb\u7a0b\u95f4\u9700\u8981\u5171\u4eab\u8d44\u6e90\u8fd8\u5f97\u901a\u8fc7\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u673a\u5236\uff0c\u7ebf\u7a0b\u7684\u51fa\u73b0\u7f13\u89e3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u7ebf\u7a0b\u7684\u4f7f\u7528\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u5757\u4ee3\u7801\u9700\u8981\u5e76\u53d1\uff0c\u5c31\u628a\u5b83\u653e\u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u91cc\u6267\u884c\uff0c\u7531\u7cfb\u7edf\u8d1f\u8d23\u8c03\u5ea6\uff0c\u5177\u4f53\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u7ebf\u7a0b\uff0c\u8981\u7528\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u7531\u8c03\u7528\u65b9\u51b3\u5b9a\u3002\u4f46\u7531\u6b64\u5e26\u6765\u4fbf\u5229\u7684\u540c\u65f6\u4e5f\u5e26\u6765\u590d\u6742\u5ea6\uff1a \u7ade\u6001\u6761\u4ef6\uff08race conditions\uff09 \u5982\u679c\u6bcf\u4e2a\u4efb\u52a1\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u4e0d\u9700\u8981\u5171\u4eab\u4efb\u4f55\u8d44\u6e90\uff0c\u90a3\u7ebf\u7a0b\u4e5f\u5c31\u975e\u5e38\u7b80\u5355\u3002\u4f46\u4e16\u754c\u5f80\u5f80\u662f\u590d\u6742\u7684\uff0c\u603b\u6709\u4e00\u4e9b\u8d44\u6e90\u9700\u8981\u5171\u4eab\u3002 \u4f9d\u8d56\u5173\u7cfb\u4ee5\u53ca\u6267\u884c\u987a\u5e8f \u5982\u679c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u4efb\u52a1\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u9700\u8981\u7b49\u5f85\u4ee5\u53ca\u901a\u77e5\u673a\u5236\u6765\u8fdb\u884c\u534f\u8c03\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u8bb8\u591a\u590d\u6742\u673a\u5236\u6765\u4fdd\u8bc1\u3002 \u7cfb\u7edf\u91cc\u5230\u5e95\u9700\u8981\u591a\u5c11\u7ebf\u7a0b\uff1f \u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u5148\u4ece\u786c\u4ef6\u8d44\u6e90\u5165\u624b\uff0c\u8003\u8651\u4e0b\u7ebf\u7a0b\u7684\u6210\u672c\uff1a \u5185\u5b58\uff08\u7ebf\u7a0b\u7684\u6808\u7a7a\u95f4\uff09 \u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u9700\u8981\u4e00\u4e2a\u6808\uff08Stack\uff09\u7a7a\u95f4\u6765\u4fdd\u5b58\u6302\u8d77\uff08suspending\uff09\u65f6\u7684\u72b6\u6001\u3002Java\u7684\u6808\u7a7a\u95f4\uff0864\u4f4dVM\uff09\u9ed8\u8ba4\u662f1024k\uff0c\u4e0d\u7b97\u522b\u7684\u5185\u5b58\uff0c\u53ea\u662f\u6808\u7a7a\u95f4\uff0c\u542f\u52a81024\u4e2a\u7ebf\u7a0b\u5c31\u89811G\u5185\u5b58\u3002\u867d\u7136\u53ef\u4ee5\u7528-Xss\u53c2\u6570\u63a7\u5236\uff0c\u4f46\u7531\u4e8e\u7ebf\u7a0b\u662f\u672c\u8d28\u4e0a\u4e5f\u662f\u8fdb\u7a0b\uff0c\u7cfb\u7edf\u5047\u5b9a\u662f\u8981\u957f\u671f\u8fd0\u884c\u7684\uff0c\u6808\u7a7a\u95f4\u592a\u5c0f\u4f1a\u5bfc\u81f4\u7a0d\u590d\u6742\u7684\u9012\u5f52\u8c03\u7528\uff08\u6bd4\u5982\u590d\u6742\u70b9\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\uff09\u5bfc\u81f4\u6808\u6ea2\u51fa\u3002\u6240\u4ee5\u8c03\u6574\u53c2\u6570\u6cbb\u6807\u4e0d\u6cbb\u672c\u3002 **\u8c03\u5ea6\u6210\u672c\uff08context-switch\uff09**\u6a21\u62df\u4e24\u4e2a\u7ebf\u7a0b\u4e92\u76f8\u5524\u9192\u8f6e\u6d41\u6302\u8d77\uff0c\u7ebf\u7a0b\u5207\u6362\u6210\u672c\u5927\u7ea66000\u7eb3\u79d2/\u6b21\u3002\u8fd9\u4e2a\u8fd8\u6ca1\u8003\u8651\u6808\u7a7a\u95f4\u5927\u5c0f\u7684\u5f71\u54cd\u3002\u56fd\u5916\u4e00\u7bc7\u8bba\u6587\u4e13\u95e8\u5206\u6790\u7ebf\u7a0b\u5207\u6362\u7684\u6210\u672c\uff0c\u57fa\u672c\u4e0a\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\u5207\u6362\u6210\u672c\u548c\u6808\u7a7a\u95f4\u4f7f\u7528\u5927\u5c0f\u76f4\u63a5\u76f8\u5173\u3002 CPU\u4f7f\u7528\u7387 \u5e76\u53d1/\u5e76\u884c\u6700\u4e3b\u8981\u7684\u4e00\u4e2a\u76ee\u6807\u5c31\u662f\u6211\u4eec\u6709\u4e86\u591a\u6838\uff0c\u60f3\u63d0\u9ad8CPU\u5229\u7528\u7387\uff0c\u6700\u5927\u9650\u5ea6\u7684\u538b\u69a8\u786c\u4ef6\u8d44\u6e90\uff0ccpu\u80fd\u6491\u5f97\u4f4f\uff0c\u90a3\u5176\u4ed6\u7684\u8d44\u6e90\u5462\uff1f Actor\u6a21\u578b\uff08\u5e76\u884c\u7f16\u7a0b\uff09 \u00b6 \u5e76\u884c\u7684\u9762\u5411\u5bf9\u8c61\u6a21\u5f0f\uff0c\u6bd4\u9762\u5411\u5bf9\u8c61\u66f4\u52a0\u8d34\u8fd1\u73b0\u5b9e\u3002 \u9762\u5bf9\u5bf9\u8c61\u7f16\u7a0b\u5bf9\u73b0\u5b9e\u7684\u62bd\u8c61\u662f\u5bf9\u8c61=\u5c5e\u6027+\u884c\u4e3a\uff08method\uff09\uff0c\u4f46\u5f53\u4f7f\u7528\u65b9\u8c03\u7528\u5bf9\u8c61\u884c\u4e3a\uff08method\uff09\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5360\u7528\u7684\u662f\u8c03\u7528\u65b9\u7684CPU\u65f6\u95f4\u7247\uff0c\u662f\u5426\u5e76\u53d1\u4e5f\u662f\u7531\u8c03\u7528\u65b9\u51b3\u5b9a\u7684\u3002 \u6d88\u606f\u9a71\u52a8 \uff1a\u73b0\u5b9e\u4e16\u754c\u66f4\u50cfActor\u7684\u62bd\u8c61\uff0c\u4e92\u76f8\u90fd\u662f\u901a\u8fc7\u6d88\u606f\u901a\u4fe1\u7684\u3002\u6bd4\u5982\u4f60\u5bf9\u4e00\u4e2a\u7f8e\u5973say hi\uff0c\u7f8e\u5973\u662f\u5426\u56de\u5e94\uff0c\u5982\u4f55\u56de\u5e94\u662f\u7531\u7f8e\u5973\u81ea\u5df1\u51b3\u5b9a\u7684\uff0c\u8fd0\u884c\u5728\u7f8e\u5973\u81ea\u5df1\u7684\u5927\u8111\u91cc\uff0c\u5e76\u4e0d\u4f1a\u5360\u7528\u53d1\u9001\u8005\u7684\u5927\u8111\u3002 \u5f53\u6d88\u606f\u53d1\u9001\u51fa\u53bb\u4e4b\u540e\uff0c\u53d1\u9001\u7684\u6d88\u606f\u548c\u53d1\u9001\u8005**\u89e3\u8026**\uff0c\u5176\u4ed6\u7684actor\u6536\u5230\u6d88\u606f\u4e4b\u540e\u53ef\u4ee5\u5904\u7406\u4e5f\u53ef\u4ee5\u53d1\u9001\u7ed9\u5176\u4ed6\u7684actor\u3002 \u5f02\u6b65 \uff1a \u62ff\u90ae\u4ef6\u4e3e\u4f8b\uff0c\u6bcf\u4e2aactor\u90fd\u6709\u4e00\u4e2a\u4e13\u7528\u7684\u90ae\u7bb1\u6765\u63a5\u6536\u6d88\u606f\uff0c\u5f53\u4e00\u4e2aactor\u5b9e\u4f8b\u5411\u53e6\u5916\u4e00\u4e2aactor\u53d1\u6d88\u606f\u7684\u65f6\u5019\uff0c\u5e76\u975e\u76f4\u63a5\u8c03\u7528actor\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u628a\u6d88\u606f\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u90ae\u7bb1\u91cc\uff0c\u5c31\u597d\u50cf\u90ae\u9012\u5458\uff0c\u5e76\u4e0d\u662f\u628a\u90ae\u4ef6\u76f4\u63a5\u9001\u5230\u6536\u4fe1\u4eba\u624b\u91cc\uff0c\u800c\u662f\u653e\u8fdb\u6bcf\u5bb6\u7684\u90ae\u7bb1\uff0c\u8fd9\u6837\u90ae\u9012\u5458\u5c31\u53ef\u4ee5\u5feb\u901f\u7684\u8fdb\u884c\u4e0b\u4e00\u9879\u5de5\u4f5c\u3002\u6240\u4ee5\u5728actor\u7cfb\u7edf\u91cc\uff0cactor\u53d1\u9001\u4e00\u6761\u6d88\u606f\u662f\u975e\u5e38\u5feb\u7684\u3002 \u9694\u79bb : \u6bcf\u4e2aactor\u7684\u5b9e\u4f8b\u90fd\u7ef4\u62a4\u8fd9\u81ea\u5df1\u7684\u72b6\u6001\uff0c\u4e0e\u5176\u4ed6actor\u5b9e\u4f8b\u5904\u4e8e\u7269\u7406\u9694\u79bb\u72b6\u6001\uff0c\u5e76\u975e\u50cf \u591a\u7ebf\u7a0b+\u9501 \u6a21\u5f0f\u90a3\u6837\u57fa\u4e8e\u5171\u4eab\u6570\u636e\u3002actor\u901a\u8fc7\u6d88\u606f\u7684\u6a21\u5f0f\u4e0e\u5176\u4ed6actor\u8fdb\u884c\u901a\u4fe1\uff0c\u4e0eOO\u5f0f\u7684\u6d88\u606f\u4f20\u9012\u65b9\u5f0f\u4e0d\u540c\uff0cactor\u4e4b\u95f4\u6d88\u606f\u7684\u4f20\u9012\u662f\u771f\u6b63\u7269\u7406\u4e0a\u7684\u6d88\u606f\u4f20\u9012\u3002 \u5929\u751f\u5206\u5e03\u5f0f : \u6bcf\u4e2aactor\u5b9e\u4f8b\u7684\u4f4d\u7f6e\u900f\u660e\uff0c\u65e0\u8bbaactor\u5730\u5740\u662f\u5728\u672c\u5730\u8fd8\u662f\u5728\u8fdc\u7a0b\u673a\u5668\u4e0a\u5bf9\u4e8e\u4ee3\u7801\u6765\u8bf4\u90fd\u662f\u4e00\u6837\u7684\u3002\u6bcf\u4e2aactor\u7684\u5b9e\u4f8b\u975e\u5e38\u5c0f\uff0c\u6700\u591a\u51e0\u767e\u5b57\u8282\uff0c\u6240\u4ee5\u5355\u673a\u51e0\u5341\u4e07\u7684actor\u7684\u5b9e\u4f8b\u5f88\u8f7b\u677e\u3002 \u5bb9\u9519 : \u4f20\u7edf\u7684\u7f16\u7a0b\u65b9\u5f0f\u90fd\u662f\u5728\u5c06\u6765\u53ef\u80fd\u51fa\u73b0\u5f02\u5e38\u7684\u5730\u65b9\u53bb\u6355\u83b7\u5f02\u5e38\u6765\u4fdd\u8bc1\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\uff0c\u7cfb\u7edf\u53ef\u80fd\u8fd8\u662f\u4f1a\u5d29\u6e83\uff0c\u8fd9\u6837\u5c31\u5f71\u54cd\u4e86\u6574\u4e2a\u7cfb\u7edf\uff0cactor\u6a21\u5f0f\u7684\u8bdd\uff0c\u6bcf\u4e00\u4e2aactor\u51fa\u73b0\u95ee\u9898\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7684actor\u3002 \u66f4\u7ec6\u8282\u7684\u8bf4\u660e\u5728\u540e\u9762\u7684skynet\u6846\u67b6\u8bf4\u660e\u91cc\u3002","title":"1. \u5e76\u53d1\u7f16\u7a0b\u548c\u5e76\u884c\u7f16\u7a0b"},{"location":"skynet/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%92%8C%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B/#_1","text":"\u5e76\u53d1 : \u540c\u4e00\u65f6\u523b\u53ea\u6709\u5355\u4efb\u52a1\u6267\u884c\uff0c\u901a\u8fc7\u65f6\u95f4\u7247\u5207\u6362\u4e0d\u540c\u7684\u4efb\u52a1\u3002 \u5e76\u884c : \u591a\u4e2a\u4efb\u52a1\u5728\u540c\u4e00\u65f6\u523b\u6267\u884c\uff0c\u540c\u65f6\u6267\u884c\u3002","title":"\u5e76\u53d1\u7f16\u7a0b\u548c\u5e76\u884c\u7f16\u7a0b"},{"location":"skynet/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%92%8C%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B/#_2","text":"\u200b \u62ff\u6211\u4eec\u4ece\u6700\u5f00\u59cb\u68b3\u7406\u4e0b\u7a0b\u5e8f\u7684\u62bd\u8c61\u3002\u5f00\u59cb\u6211\u4eec\u7684\u7a0b\u5e8f\u662f\u9762\u5411\u8fc7\u7a0b\u7684\uff0c\u6570\u636e\u7ed3\u6784+func\u3002\u540e\u6765\u6709\u4e86\u9762\u5411\u5bf9\u8c61\uff0c\u5bf9\u8c61\u7ec4\u5408\u4e86\u6570\u7ed3\u6784\u548cfunc\uff0c\u6211\u4eec\u60f3\u7528\u6a21\u62df\u73b0\u5b9e\u4e16\u754c\u7684\u65b9\u5f0f\uff0c\u62bd\u8c61\u51fa\u5bf9\u8c61\uff0c\u6709\u72b6\u6001\u548c\u884c\u4e3a\u3002\u4f46\u65e0\u8bba\u662f\u9762\u5411\u8fc7\u7a0b\u7684func\u8fd8\u662f\u9762\u5411\u5bf9\u8c61\u7684func\uff0c\u672c\u8d28\u4e0a\u90fd\u662f\u4ee3\u7801\u5757\u7684\u7ec4\u7ec7\u5355\u5143\uff0c\u672c\u8eab\u5e76\u6ca1\u6709\u5305\u542b\u4ee3\u7801\u5757\u7684\u5e76\u53d1\u7b56\u7565\u7684\u5b9a\u4e49\u3002\u4e8e\u662f\u4e3a\u4e86\u89e3\u51b3\u5e76\u53d1\u7684\u9700\u6c42\uff0c\u5f15\u5165\u4e86Thread\uff08\u7ebf\u7a0b\uff09\u7684\u6982\u5ff5\u3002","title":"\u4e3a\u4ec0\u4e48\u5e76\u53d1\u7a0b\u5e8f\u8fd9\u4e48\u96be?"},{"location":"skynet/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%92%8C%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B/#thread","text":"CPU\u8c03\u5ea6\u7684\u6700\u5c0f\u5355\u4f4d \u540c\u4e00\u8fdb\u7a0b\u4e0b\u7684\u591a\u4e2a\u7ebf\u7a0b\u53ef\u5171\u4eab\u8d44\u6e90 \u7ebf\u7a0b\u7684\u51fa\u73b0\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u662fGUI\u51fa\u73b0\u540e\u6025\u5207\u9700\u8981\u5e76\u53d1\u673a\u5236\u6765\u4fdd\u8bc1\u7528\u6237\u754c\u9762\u7684\u54cd\u5e94\u3002\u7b2c\u4e8c\u662f\u4e92\u8054\u7f51\u53d1\u5c55\u540e\u5e26\u6765\u7684\u591a\u7528\u6237\u95ee\u9898\u3002\u6700\u65e9\u7684CGI\u7a0b\u5e8f\u5f88\u7b80\u5355\uff0c\u5c06\u901a\u8fc7\u811a\u672c\u5c06\u539f\u6765\u5355\u673a\u7248\u7684\u7a0b\u5e8f\u5305\u88c5\u5728\u4e00\u4e2a\u8fdb\u7a0b\u91cc\uff0c\u6765\u4e00\u4e2a\u7528\u6237\u5c31\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u3002\u4f46\u660e\u663e\u8fd9\u6837\u627f\u8f7d\u4e0d\u4e86\u591a\u5c11\u7528\u6237\uff0c\u5e76\u4e14\u5982\u679c\u8fdb\u7a0b\u95f4\u9700\u8981\u5171\u4eab\u8d44\u6e90\u8fd8\u5f97\u901a\u8fc7\u8fdb\u7a0b\u95f4\u7684\u901a\u4fe1\u673a\u5236\uff0c\u7ebf\u7a0b\u7684\u51fa\u73b0\u7f13\u89e3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u7ebf\u7a0b\u7684\u4f7f\u7528\u6bd4\u8f83\u7b80\u5355\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u5757\u4ee3\u7801\u9700\u8981\u5e76\u53d1\uff0c\u5c31\u628a\u5b83\u653e\u5728\u5355\u72ec\u7684\u7ebf\u7a0b\u91cc\u6267\u884c\uff0c\u7531\u7cfb\u7edf\u8d1f\u8d23\u8c03\u5ea6\uff0c\u5177\u4f53\u4ec0\u4e48\u65f6\u5019\u4f7f\u7528\u7ebf\u7a0b\uff0c\u8981\u7528\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u7531\u8c03\u7528\u65b9\u51b3\u5b9a\u3002\u4f46\u7531\u6b64\u5e26\u6765\u4fbf\u5229\u7684\u540c\u65f6\u4e5f\u5e26\u6765\u590d\u6742\u5ea6\uff1a \u7ade\u6001\u6761\u4ef6\uff08race conditions\uff09 \u5982\u679c\u6bcf\u4e2a\u4efb\u52a1\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u4e0d\u9700\u8981\u5171\u4eab\u4efb\u4f55\u8d44\u6e90\uff0c\u90a3\u7ebf\u7a0b\u4e5f\u5c31\u975e\u5e38\u7b80\u5355\u3002\u4f46\u4e16\u754c\u5f80\u5f80\u662f\u590d\u6742\u7684\uff0c\u603b\u6709\u4e00\u4e9b\u8d44\u6e90\u9700\u8981\u5171\u4eab\u3002 \u4f9d\u8d56\u5173\u7cfb\u4ee5\u53ca\u6267\u884c\u987a\u5e8f \u5982\u679c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u4efb\u52a1\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u9700\u8981\u7b49\u5f85\u4ee5\u53ca\u901a\u77e5\u673a\u5236\u6765\u8fdb\u884c\u534f\u8c03\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u8bb8\u591a\u590d\u6742\u673a\u5236\u6765\u4fdd\u8bc1\u3002 \u7cfb\u7edf\u91cc\u5230\u5e95\u9700\u8981\u591a\u5c11\u7ebf\u7a0b\uff1f \u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u5148\u4ece\u786c\u4ef6\u8d44\u6e90\u5165\u624b\uff0c\u8003\u8651\u4e0b\u7ebf\u7a0b\u7684\u6210\u672c\uff1a \u5185\u5b58\uff08\u7ebf\u7a0b\u7684\u6808\u7a7a\u95f4\uff09 \u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u9700\u8981\u4e00\u4e2a\u6808\uff08Stack\uff09\u7a7a\u95f4\u6765\u4fdd\u5b58\u6302\u8d77\uff08suspending\uff09\u65f6\u7684\u72b6\u6001\u3002Java\u7684\u6808\u7a7a\u95f4\uff0864\u4f4dVM\uff09\u9ed8\u8ba4\u662f1024k\uff0c\u4e0d\u7b97\u522b\u7684\u5185\u5b58\uff0c\u53ea\u662f\u6808\u7a7a\u95f4\uff0c\u542f\u52a81024\u4e2a\u7ebf\u7a0b\u5c31\u89811G\u5185\u5b58\u3002\u867d\u7136\u53ef\u4ee5\u7528-Xss\u53c2\u6570\u63a7\u5236\uff0c\u4f46\u7531\u4e8e\u7ebf\u7a0b\u662f\u672c\u8d28\u4e0a\u4e5f\u662f\u8fdb\u7a0b\uff0c\u7cfb\u7edf\u5047\u5b9a\u662f\u8981\u957f\u671f\u8fd0\u884c\u7684\uff0c\u6808\u7a7a\u95f4\u592a\u5c0f\u4f1a\u5bfc\u81f4\u7a0d\u590d\u6742\u7684\u9012\u5f52\u8c03\u7528\uff08\u6bd4\u5982\u590d\u6742\u70b9\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\uff09\u5bfc\u81f4\u6808\u6ea2\u51fa\u3002\u6240\u4ee5\u8c03\u6574\u53c2\u6570\u6cbb\u6807\u4e0d\u6cbb\u672c\u3002 **\u8c03\u5ea6\u6210\u672c\uff08context-switch\uff09**\u6a21\u62df\u4e24\u4e2a\u7ebf\u7a0b\u4e92\u76f8\u5524\u9192\u8f6e\u6d41\u6302\u8d77\uff0c\u7ebf\u7a0b\u5207\u6362\u6210\u672c\u5927\u7ea66000\u7eb3\u79d2/\u6b21\u3002\u8fd9\u4e2a\u8fd8\u6ca1\u8003\u8651\u6808\u7a7a\u95f4\u5927\u5c0f\u7684\u5f71\u54cd\u3002\u56fd\u5916\u4e00\u7bc7\u8bba\u6587\u4e13\u95e8\u5206\u6790\u7ebf\u7a0b\u5207\u6362\u7684\u6210\u672c\uff0c\u57fa\u672c\u4e0a\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\u5207\u6362\u6210\u672c\u548c\u6808\u7a7a\u95f4\u4f7f\u7528\u5927\u5c0f\u76f4\u63a5\u76f8\u5173\u3002 CPU\u4f7f\u7528\u7387 \u5e76\u53d1/\u5e76\u884c\u6700\u4e3b\u8981\u7684\u4e00\u4e2a\u76ee\u6807\u5c31\u662f\u6211\u4eec\u6709\u4e86\u591a\u6838\uff0c\u60f3\u63d0\u9ad8CPU\u5229\u7528\u7387\uff0c\u6700\u5927\u9650\u5ea6\u7684\u538b\u69a8\u786c\u4ef6\u8d44\u6e90\uff0ccpu\u80fd\u6491\u5f97\u4f4f\uff0c\u90a3\u5176\u4ed6\u7684\u8d44\u6e90\u5462\uff1f","title":"\u7ebf\u7a0b\uff08Thread\uff09"},{"location":"skynet/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%92%8C%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B/#actor","text":"\u5e76\u884c\u7684\u9762\u5411\u5bf9\u8c61\u6a21\u5f0f\uff0c\u6bd4\u9762\u5411\u5bf9\u8c61\u66f4\u52a0\u8d34\u8fd1\u73b0\u5b9e\u3002 \u9762\u5bf9\u5bf9\u8c61\u7f16\u7a0b\u5bf9\u73b0\u5b9e\u7684\u62bd\u8c61\u662f\u5bf9\u8c61=\u5c5e\u6027+\u884c\u4e3a\uff08method\uff09\uff0c\u4f46\u5f53\u4f7f\u7528\u65b9\u8c03\u7528\u5bf9\u8c61\u884c\u4e3a\uff08method\uff09\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u5360\u7528\u7684\u662f\u8c03\u7528\u65b9\u7684CPU\u65f6\u95f4\u7247\uff0c\u662f\u5426\u5e76\u53d1\u4e5f\u662f\u7531\u8c03\u7528\u65b9\u51b3\u5b9a\u7684\u3002 \u6d88\u606f\u9a71\u52a8 \uff1a\u73b0\u5b9e\u4e16\u754c\u66f4\u50cfActor\u7684\u62bd\u8c61\uff0c\u4e92\u76f8\u90fd\u662f\u901a\u8fc7\u6d88\u606f\u901a\u4fe1\u7684\u3002\u6bd4\u5982\u4f60\u5bf9\u4e00\u4e2a\u7f8e\u5973say hi\uff0c\u7f8e\u5973\u662f\u5426\u56de\u5e94\uff0c\u5982\u4f55\u56de\u5e94\u662f\u7531\u7f8e\u5973\u81ea\u5df1\u51b3\u5b9a\u7684\uff0c\u8fd0\u884c\u5728\u7f8e\u5973\u81ea\u5df1\u7684\u5927\u8111\u91cc\uff0c\u5e76\u4e0d\u4f1a\u5360\u7528\u53d1\u9001\u8005\u7684\u5927\u8111\u3002 \u5f53\u6d88\u606f\u53d1\u9001\u51fa\u53bb\u4e4b\u540e\uff0c\u53d1\u9001\u7684\u6d88\u606f\u548c\u53d1\u9001\u8005**\u89e3\u8026**\uff0c\u5176\u4ed6\u7684actor\u6536\u5230\u6d88\u606f\u4e4b\u540e\u53ef\u4ee5\u5904\u7406\u4e5f\u53ef\u4ee5\u53d1\u9001\u7ed9\u5176\u4ed6\u7684actor\u3002 \u5f02\u6b65 \uff1a \u62ff\u90ae\u4ef6\u4e3e\u4f8b\uff0c\u6bcf\u4e2aactor\u90fd\u6709\u4e00\u4e2a\u4e13\u7528\u7684\u90ae\u7bb1\u6765\u63a5\u6536\u6d88\u606f\uff0c\u5f53\u4e00\u4e2aactor\u5b9e\u4f8b\u5411\u53e6\u5916\u4e00\u4e2aactor\u53d1\u6d88\u606f\u7684\u65f6\u5019\uff0c\u5e76\u975e\u76f4\u63a5\u8c03\u7528actor\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u628a\u6d88\u606f\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u90ae\u7bb1\u91cc\uff0c\u5c31\u597d\u50cf\u90ae\u9012\u5458\uff0c\u5e76\u4e0d\u662f\u628a\u90ae\u4ef6\u76f4\u63a5\u9001\u5230\u6536\u4fe1\u4eba\u624b\u91cc\uff0c\u800c\u662f\u653e\u8fdb\u6bcf\u5bb6\u7684\u90ae\u7bb1\uff0c\u8fd9\u6837\u90ae\u9012\u5458\u5c31\u53ef\u4ee5\u5feb\u901f\u7684\u8fdb\u884c\u4e0b\u4e00\u9879\u5de5\u4f5c\u3002\u6240\u4ee5\u5728actor\u7cfb\u7edf\u91cc\uff0cactor\u53d1\u9001\u4e00\u6761\u6d88\u606f\u662f\u975e\u5e38\u5feb\u7684\u3002 \u9694\u79bb : \u6bcf\u4e2aactor\u7684\u5b9e\u4f8b\u90fd\u7ef4\u62a4\u8fd9\u81ea\u5df1\u7684\u72b6\u6001\uff0c\u4e0e\u5176\u4ed6actor\u5b9e\u4f8b\u5904\u4e8e\u7269\u7406\u9694\u79bb\u72b6\u6001\uff0c\u5e76\u975e\u50cf \u591a\u7ebf\u7a0b+\u9501 \u6a21\u5f0f\u90a3\u6837\u57fa\u4e8e\u5171\u4eab\u6570\u636e\u3002actor\u901a\u8fc7\u6d88\u606f\u7684\u6a21\u5f0f\u4e0e\u5176\u4ed6actor\u8fdb\u884c\u901a\u4fe1\uff0c\u4e0eOO\u5f0f\u7684\u6d88\u606f\u4f20\u9012\u65b9\u5f0f\u4e0d\u540c\uff0cactor\u4e4b\u95f4\u6d88\u606f\u7684\u4f20\u9012\u662f\u771f\u6b63\u7269\u7406\u4e0a\u7684\u6d88\u606f\u4f20\u9012\u3002 \u5929\u751f\u5206\u5e03\u5f0f : \u6bcf\u4e2aactor\u5b9e\u4f8b\u7684\u4f4d\u7f6e\u900f\u660e\uff0c\u65e0\u8bbaactor\u5730\u5740\u662f\u5728\u672c\u5730\u8fd8\u662f\u5728\u8fdc\u7a0b\u673a\u5668\u4e0a\u5bf9\u4e8e\u4ee3\u7801\u6765\u8bf4\u90fd\u662f\u4e00\u6837\u7684\u3002\u6bcf\u4e2aactor\u7684\u5b9e\u4f8b\u975e\u5e38\u5c0f\uff0c\u6700\u591a\u51e0\u767e\u5b57\u8282\uff0c\u6240\u4ee5\u5355\u673a\u51e0\u5341\u4e07\u7684actor\u7684\u5b9e\u4f8b\u5f88\u8f7b\u677e\u3002 \u5bb9\u9519 : \u4f20\u7edf\u7684\u7f16\u7a0b\u65b9\u5f0f\u90fd\u662f\u5728\u5c06\u6765\u53ef\u80fd\u51fa\u73b0\u5f02\u5e38\u7684\u5730\u65b9\u53bb\u6355\u83b7\u5f02\u5e38\u6765\u4fdd\u8bc1\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\uff0c\u7cfb\u7edf\u53ef\u80fd\u8fd8\u662f\u4f1a\u5d29\u6e83\uff0c\u8fd9\u6837\u5c31\u5f71\u54cd\u4e86\u6574\u4e2a\u7cfb\u7edf\uff0cactor\u6a21\u5f0f\u7684\u8bdd\uff0c\u6bcf\u4e00\u4e2aactor\u51fa\u73b0\u95ee\u9898\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7684actor\u3002 \u66f4\u7ec6\u8282\u7684\u8bf4\u660e\u5728\u540e\u9762\u7684skynet\u6846\u67b6\u8bf4\u660e\u91cc\u3002","title":"Actor\u6a21\u578b\uff08\u5e76\u884c\u7f16\u7a0b\uff09"},{"location":"skynet/%E8%AE%BE%E8%AE%A1%E7%BB%BC%E8%BF%B0/","text":"\u539f\u6587: https://blog.codingnow.com/2012/09/the_design_of_skynet.html \u4ee5\u4e0b\u662f\u6458\u8981\u7b14\u8bb0 Skynet \u6838\u5fc3\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898 \u00b6 \u5145\u5206\u5229\u7528\u591a\u6838\u4f18\u52bf\uff0c\u5c06\u4e0d\u540c\u7684\u4e1a\u52a1\u653e\u5728\u72ec\u7acb\u7684\u6267\u884c\u73af\u5883\u4e2d\u5904\u7406\uff0c\u534f\u540c\u5de5\u4f5c\u3002 \u8fd9\u4e2a\u6267\u884c\u73af\u5883\uff0c\u6700\u65e9\u7684\u65f6\u5019\uff0c\u6211\u671f\u671b\u662f\u5229\u7528 OS \u7684\u8fdb\u7a0b\uff0c\u540e\u6765\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u5fc5\u5b9a\u91c7\u7528\u5d4c\u5165\u5f0f\u8bed\u8a00\uff0c\u6bd4\u5982 Lua \u7684\u8bdd\uff0c\u72ec\u7acb OS \u8fdb\u7a0b\u7684\u610f\u4e49\u4e0d\u592a\u5927\u3002Lua State \u5df2\u7ecf\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u6c99\u76d2\uff0c\u9694\u79bb\u4e0d\u540c\u6267\u884c\u73af\u5883\u3002\u800c\u591a\u7ebf\u7a0b\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u5f97\u72b6\u6001\u5171\u4eab\u3001\u6570\u636e\u4ea4\u6362\u66f4\u52a0\u9ad8\u6548\u3002\u800c\u591a\u7ebf\u7a0b\u6a21\u578b\u7684\u8bf8\u591a\u5f0a\u7aef\uff0c\u6bd4\u5982\u590d\u6742\u7684\u7ebf\u7a0b\u9501\u3001\u7ebf\u7a0b\u8c03\u5ea6\u95ee\u9898\u7b49\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f\u5e95\u5c42\u7684\u89c4\u6a21\uff0c\u7cbe\u7b80\u8bbe\u8ba1\uff0c\u6700\u7ec8\u628a\u5371\u5bb3\u9650\u5236\u5728\u5f88\u5c0f\u7684\u8303\u56f4\u5185\u3002\u8fd9\u4e00\u70b9\uff0cSkynet \u6700\u7ec8\u82b1\u4e86\u4e0d\u5230 3000 \u884c C \u4ee3\u7801\u6765\u5b9e\u73b0\u6838\u5fc3\u5c42\u7684\u4ee3\u7801 \u505a\u4e3a\u6838\u5fc3\u529f\u80fd\uff0cSkynet \u4ec5\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff1a \u628a\u4e00\u4e2a\u7b26\u5408\u89c4\u8303\u7684 C \u6a21\u5757\uff0c\u4ece\u52a8\u6001\u5e93\uff08so \u6587\u4ef6\uff09\u4e2d\u542f\u52a8\u8d77\u6765\uff0c\u7ed1\u5b9a\u4e00\u4e2a\u6c38\u4e0d\u91cd\u590d\uff08\u5373\u4f7f\u6a21\u5757\u9000\u51fa\uff09\u7684\u6570\u5b57 id \u505a\u4e3a\u5176 handle \u3002\u6a21\u5757\u88ab\u79f0\u4e3a\u670d\u52a1\uff08Service\uff09\uff0c\u670d\u52a1\u95f4\u53ef\u4ee5\u81ea\u7531\u53d1\u9001\u6d88\u606f\u3002\u6bcf\u4e2a\u6a21\u5757\u53ef\u4ee5\u5411 Skynet \u6846\u67b6\u6ce8\u518c\u4e00\u4e2a callback \u51fd\u6570\uff0c\u7528\u6765\u63a5\u6536\u53d1\u7ed9\u5b83\u7684\u6d88\u606f\u3002\u6bcf\u4e2a\u670d\u52a1\u90fd\u662f\u88ab\u4e00\u4e2a\u4e2a\u6d88\u606f\u5305\u9a71\u52a8\uff0c\u5f53\u6ca1\u6709\u5305\u5230\u6765\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u5c31\u4f1a\u5904\u4e8e\u6302\u8d77\u72b6\u6001\uff0c\u5bf9 CPU \u8d44\u6e90\u96f6\u6d88\u8017\u3002\u5982\u679c\u9700\u8981\u81ea\u4e3b\u903b\u8f91\uff0c\u5219\u53ef\u4ee5\u5229\u7528 Skynet \u7cfb\u7edf\u63d0\u4f9b\u7684 timeout \u6d88\u606f\uff0c\u5b9a\u671f\u89e6\u53d1\u3002 Skynet \u63d0\u4f9b\u4e86\u540d\u5b57\u670d\u52a1\uff0c\u8fd8\u53ef\u4ee5\u7ed9\u7279\u5b9a\u7684\u670d\u52a1\u8d77\u4e00\u4e2a\u6613\u8bfb\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u7528 id \u6765\u6307\u4ee3\u5b83\u3002id \u548c\u8fd0\u884c\u65f6\u6001\u76f8\u5173\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u6bcf\u6b21\u542f\u52a8\u670d\u52a1\uff0c\u90fd\u6709\u4e00\u81f4\u7684 id \uff0c\u4f46\u540d\u5b57\u53ef\u4ee5\u3002 Skynet \u6838\u5fc3\u4e0d\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898 \u00b6 Skynet \u7684\u6d88\u606f\u4f20\u9012\u90fd\u662f\u5355\u5411\u7684\uff0c\u4ee5\u6570\u636e\u5305\u4e3a\u5355\u4f4d\u4f20\u9012\u7684\u3002\u5e76\u6ca1\u6709\u5b9a\u4e49\u51fa\u7c7b\u4f3c TCP \u8fde\u63a5\u7684\u6982\u5ff5\u3002\u4e5f\u6ca1\u6709\u7ea6\u5b9a RPC \u8c03\u7528\u7684\u534f\u8bae\u3002\u4e0d\u89c4\u5b9a\u6570\u636e\u5305\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u6ca1\u6709\u63d0\u4f9b\u4e00\u81f4\u7684\u590d\u6742\u6570\u636e\u7ed3\u6784\u7684\u5217\u96c6 API \u3002 \u7b80\u5355\u8bf4\uff0cSkynet \u53ea\u8d1f\u8d23\u628a\u4e00\u4e2a\u6570\u636e\u5305\u4ece\u4e00\u4e2a\u670d\u52a1\u5185\u53d1\u9001\u51fa\u53bb\uff0c\u8ba9\u540c\u4e00\u8fdb\u7a0b\u5185\u7684\u53e6\u4e00\u4e2a\u670d\u52a1\u6536\u5230\uff0c\u8c03\u7528\u5bf9\u5e94\u7684 callback \u51fd\u6570\u5904\u7406\u3002\u5b83\u4fdd\u8bc1\uff0c\u6a21\u5757\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u6bcf\u4e2a\u72ec\u7acb\u7684 callback \u8c03\u7528\uff0c\u90fd\u662f\u76f8\u4e92\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u7f16\u5199\u670d\u52a1\u7684\u4eba\u4e0d\u9700\u8981\u7279\u522b\u7684\u4e3a\u591a\u7ebf\u7a0b\u73af\u5883\u8003\u8651\u4efb\u4f55\u95ee\u9898\u3002\u4e13\u5fc3\u5904\u7406\u53d1\u9001\u7ed9\u5b83\u7684\u4e00\u4e2a\u4e2a\u6570\u636e\u5305\u3002 \u719f\u6089 Erlang \u7684\u540c\u5b66\u4e00\u773c\u5c31\u80fd\u660e\u4e86\uff0c\u8fd9\u5c31\u662f Erlang \u7684 Actor \u6a21\u578b\u3002\u53ea\u4e0d\u8fc7\uff0c\u6211\u5d4c\u5165\u4e86\u66f4\u4e3a\u6211\u719f\u6089\u7684 Lua \u8bed\u8a00\u3002\u5f53\u7136\uff0c\u5982\u679c\u67e5\u9605 Skynet \u7684\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u5176\u5b9e Lua \u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f60\u5b8c\u5168\u53ef\u4ee5\u7528 C \u7f16\u5199\u670d\u52a1\u6a21\u5757\u3002\u4e5f\u53ef\u4ee5\u65b9\u4fbf\u7684\u6362\u6210 Python \u80fd\u5176\u5b83\u53ef\u4ee5\u5d4c\u5165 C \u7684\u52a8\u6001\u8bed\u8a00\u3002\u8ba9 Lua \u548c Python \u5171\u5b58\u4e5f\u4e0d\u96be\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u5230\u6211\u5df2\u7ecf\u4e3a Skynet \u7f16\u5199\u7684\u4e00\u4e9b\u7528 Lua \u5b9e\u73b0\u7684\u57fa\u7840\u670d\u52a1\u4e86\u3002 \u4e3a\u4ec0\u4e48\u9009\u62e9 Lua ? \u5b83\u7684\u8fd0\u884c\u65f6\u9700\u8981\u7684\u5fc5\u8981\u5e93\u5f88\u5c11\uff0c\u8ba9\u8fd9\u79cd\u9700\u8981\u5927\u91cf\u72ec\u7acb\u6c99\u76d2\u7684\u7cfb\u7edf\u66f4\u4e3a\u8f7b\u91cf\u3002\u542f\u52a8\u548c\u9500\u6bc1\u4e00\u4e2a\u670d\u52a1\u90fd\u5f88\u5feb\u3002 \u4e3a\u4e86\u63d0\u4f9b\u9ad8\u6548\u7684\u670d\u52a1\u95f4\u901a\u8baf\uff0cSkynet \u91c7\u7528\u4e86\u51e0\u70b9\u8bbe\u8ba1\uff0c\u83b7\u5f97\u4e86\u6bd4\u591a\u8fdb\u7a0b\u65b9\u6848\u66f4\u9ad8\u7684\u6027\u80fd\u3002 \u6570\u636e\u5305\u901a\u5e38\u662f\u5728\u4e00\u4e2a\u670d\u52a1\u5185\u6253\u5305\u751f\u6210\u7684\uff0cSkynet \u5e76\u4e0d\u5173\u5fc3\u6570\u636e\u5305\u662f\u600e\u6837\u88ab\u6253\u5305\u7684\uff0c\u5b83\u751a\u81f3\u4e0d\u8981\u6c42\u8fd9\u4e2a\u6570\u636e\u5305\u5185\u7684\u6570\u636e\u662f\u8fde\u7eed\u7684\uff08\u867d\u7136\u8fd9\u6837\u5f88\u5371\u9669\uff0c\u5728\u540e\u9762\u4f1a\u8c08\u53ca\u7684\u8de8\u673a\u901a\u8baf\u4e2d\u4f1a\u51fa\u9519\uff0c\u9664\u975e\u4f60\u4fdd\u8bc1\u4f60\u7684\u6570\u636e\u5305\u7edd\u5bf9\u4e0d\u88ab\u4f20\u9012\u51fa\u5f53\u524d\u6240\u5728\u7684\u8fdb\u7a0b\uff09\u3002\u5b83\u4ec5\u4ec5\u662f\u628a\u6570\u636e\u5305\u7684\u6307\u9488\uff0c\u4ee5\u53ca\u4f60\u58f0\u79f0\u7684\u6570\u636e\u5305\u957f\u5ea6\uff08\u5e76\u4e0d\u4e00\u5b9a\u662f\u771f\u5b9e\u957f\u5ea6\uff09\u4f20\u9012\u51fa\u53bb\u3002\u7531\u4e8e\u670d\u52a1\u90fd\u662f\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u5185\uff0c\u63a5\u6536\u65b9\u53d6\u5f97\u8fd9\u4e2a\u6307\u9488\u540e\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u5176\u5f15\u7528\u7684\u6570\u636e\u4e86\u3002 \u8fd9\u4e2a\u673a\u5236\u53ef\u4ee5\u5728\u5fc5\u8981\u65f6\uff0c\u4fdd\u8bc1\u7edd\u5bf9\u7684\u96f6\u62f7\u8d1d\uff0c\u51e0\u4e4e\u7b49\u4ef7\u4e8e\u5728\u540c\u4e00\u7ebf\u7a0b\u5185\u505a\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u3002 \u4f46\uff0c\u8fd9\u53ea\u662f Skynet \u63d0\u4f9b\u7684\u6027\u80fd\u4e0a\u7684\u53ef\u80fd\u6027\u3002\u5b83\u63a8\u8350\u7684\u662f\u4e00\u79cd\u66f4\u53ef\u9760\uff0c\u6027\u80fd\u7565\u4f4e\u7684\u65b9\u6848\uff1a\u5b83\u7ea6\u5b9a\uff0c\u6bcf\u4e2a\u670d\u52a1\u53d1\u9001\u51fa\u53bb\u7684\u5305\u90fd\u662f\u590d\u5236\u5230\u7528 malloc \u5206\u914d\u51fa\u6765\u7684\u8fde\u7eed\u5185\u5b58\u3002\u63a5\u6536\u65b9\u5728\u5904\u7406\u5b8c\u8fd9\u4e2a\u6570\u636e\u5757\uff08\u5728\u5904\u7406\u7684 callback \u51fd\u6570\u8c03\u7528\u5b8c\u6bd5\uff09\u540e\uff0c\u4f1a\u9ed8\u8ba4\u8c03\u7528 free \u51fd\u6570\u91ca\u653e\u6389\u6240\u5360\u7684\u5185\u5b58\u3002\u5373\uff0c\u53d1\u9001\u65b9\u7533\u8bf7\u5185\u5b58\uff0c\u63a5\u6536\u65b9\u91ca\u653e\u3002 \u6211\u4eec\u6765\u770b\u770b skynet_send \u548c callback \u51fd\u6570\u7684\u5b9a\u4e49\uff1a int skynet_send ( struct skynet_context * context , uint32_t source , uint32_t destination , int type , int session , void * msg , size_t sz ); typedef int ( * skynet_cb )( struct skynet_context * context , void * ud , int type , int session , uint32_t source , const void * msg , size_t sz ); \u6682\u4e14\u4e0d\u53bb\u5173\u6ce8 type \u548c session \u4e24\u4e2a\u53c2\u6570\u3002\u8fd9\u91cc\uff0csource \u548c destination \u90fd\u662f 32 \u4f4d\u6574\u6570\uff0c\u8868\u793a\u5730\u5740\u3002\u539f\u5219\u4e0a\u4e0d\u9700\u8981\u586b\u5199 source \u5730\u5740\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u5c31\u662f\u5b83\u81ea\u5df1\u30020 \u662f\u7cfb\u7edf\u4fdd\u7559\u7684 handle \uff0c\u53ef\u4ee5\u6307\u4ee3\u81ea\u5df1\u3002\u8fd9\u91cc\u5141\u8bb8\u586b\u5199 source \u503c\uff0c\u662f\u56e0\u4e3a\u5728\u67d0\u4e9b\u7279\u6b8a\u573a\u5408\uff0c\u9700\u8981\u4f2a\u9020\u4e00\u4e2a\u7531\u522b\u4eba\u53d1\u51fa\u7684\u5305\u3002\u59d1\u4e14\u53ef\u4ee5\u7406\u89e3 source \u4e3a reply address \u3002 \u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u5c31\u662f\u53d1\u9001 msg/sz \u5bf9\u3002\u6211\u4eec\u53ef\u4ee5\u5728 type \u91cc\u6253\u4e0a dontcopy \u7684 tag (PTYPE_TAG_DONTCOPY) \uff0c\u8ba9\u6846\u67b6\u4e0d\u8981\u590d\u5236 msg/sz \u6307\u4ee3\u7684\u6570\u636e\u5305\u3002\u5426\u5219 skynet \u4f1a\u7528 malloc \u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u628a\u6570\u636e\u590d\u5236\u8fdb\u53bb\u3002callback \u51fd\u6570\u5728\u5904\u7406\u5b8c\u8fd9\u5757\u6570\u636e\u540e\uff0c\u4f1a\u8c03\u7528 free \u91ca\u653e\u5185\u5b58\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8ba9 callback \u8fd4\u56de 1 \uff0c\u963b\u6b62\u6846\u67b6\u91ca\u653e\u5185\u5b58\u3002\u8fd9\u901a\u5e38\u548c\u5728 send \u65f6\u6807\u8bb0 dontcopy \u6807\u8bb0\u914d\u5bf9\u4f7f\u7528\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u60f3\u8c08\u8c08 session \u548c type \u4e24\u4e2a\u53c2\u6570\u3002 session \u662f\u4ec0\u4e48\uff1f \u867d\u7136 skynet \u6838\u5fc3\u53ea\u89e3\u51b3\u5355\u5411\u7684\u6d88\u606f\u5305\u53d1\u9001\u95ee\u9898\uff0c\u6b63\u5982 ip \u534f\u8bae\u53ea\u89e3\u51b3 ip \u5305\u5728\u4e92\u8fde\u7f51\u4e2d\u4ece\u4e00\u4e2a ip \u5730\u5740\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a ip \u5730\u5740\u7684\u95ee\u9898\u3002\u4f46\u662f\uff0c\u6211\u4eec\u7684\u5e94\u7528\u5f88\u5927\u90e8\u5206\u90fd\u9700\u8981\u4f7f\u7528\u8bf7\u6c42\u56de\u5e94\u7684\u6a21\u5f0f\u3002\u5373\uff0c\u4e00\u4e2a\u670d\u52a1\u5411\u53e6\u4e00\u4e2a\u670d\u52a1\u63d0\u51fa\u4e00\u4e2a\u8bf7\u6c42\u5305\uff0c\u5bf9\u65b9\u5904\u7406\u5b8c\u8fd9\u4e2a\u8bf7\u6c42\u540e\uff0c\u628a\u7ed3\u679c\u8fd4\u56de\u3002\u7531\u4e8e\u6bcf\u4e2a\u670d\u52a1\u4ec5\u6709\u4e00\u4e2a callback \u51fd\u6570\uff0c\u597d\u6bd4\u5728 ip \u534f\u8bae\u4e2d\u53bb\u6389\u4e86\u7aef\u53e3\u7684\u8bbe\u5b9a\uff0c\u6240\u6709\u53d1\u9001\u5230\u4e00\u4e2a ip \u5730\u5740\u4e0a\u7684 ip \u5305\u5c31\u65e0\u6cd5\u88ab\u5206\u53d1\u5230\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e86\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6709\u53e6\u4e00\u4e2a\u4e1c\u897f\u6765\u533a\u5206\u8fd9\u4e2a\u5305\u3002\u8fd9\u5c31\u662f session \u7684\u4f5c\u7528\u3002 \u4f7f\u7528 skynet_send \u53d1\u9001\u4e00\u4e2a\u5305\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u5728 type \u91cc\u8bbe\u4e0a alloc session \u7684 tag (PTYPE_TAG_ALLOCSESSION)\u3002send api \u5c31\u4f1a\u5ffd\u7565\u6389\u4f20\u5165\u7684 session \u53c2\u6570\uff0c\u800c\u4f1a\u5206\u914d\u51fa\u4e00\u4e2a\u5f53\u524d\u670d\u52a1\u4ece\u6765\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684 session \u53f7\uff0c\u53d1\u9001\u51fa\u53bb\u3002\u540c\u65f6\u7ea6\u5b9a\uff0c\u63a5\u6536\u65b9\u5728\u5904\u7406\u5b8c\u8fd9\u4e2a\u6d88\u606f\u540e\uff0c\u628a\u8fd9\u4e2a session \u539f\u6837\u53d1\u9001\u56de\u6765\u3002\u8fd9\u6837\uff0c\u7f16\u5199\u670d\u52a1\u7684\u4eba\u53ea\u9700\u8981\u5728 callback \u51fd\u6570\u91cc\u8bb0\u5f55\u4e0b\u6240\u6709\u5f85\u8fd4\u56de\u7684 session \u8868\uff0c\u5c31\u53ef\u4ee5\u5728\u6536\u5230\u6bcf\u4e2a\u6d88\u606f\u540e\uff0c\u6b63\u786e\u7684\u8c03\u7528\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u3002 type \u7684\u4f5c\u7528 \u96c6\u7fa4\u95f4\u901a\u8baf \u00b6 \u867d\u7136\u8bbe\u8ba1\u4e0a\u56f4\u7ed5\u5355\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u6a21\u5757\u8fdb\u884c\u7684\uff0c\u4f46 skynet \u5176\u5b9e\u5e76\u4e0d\u4ec5\u9650\u4e8e\u5355\u8fdb\u7a0b\u3002\u5b83\u5b9e\u9645\u662f\u53ef\u4ee5\u90e8\u7f72\u5230\u4e0d\u540c\u673a\u5668\u4e0a\u8054\u5408\u5de5\u4f5c\u7684\u3002\u8fd9\u867d\u7136\u4e0d\u662f\u6838\u5fc3\u7279\u6027\uff0c\u4f46\u6838\u5fc3\u5c42\u4e3a\u6b64\u505a\u4e86\u8bb8\u591a\u914d\u5408\u3002 \u5355\u4e2a skynet \u8fdb\u7a0b\u5185\u7684\u670d\u52a1\u6570\u91cf\u88ab handle \u6570\u91cf\u9650\u5236\u3002handle \u4e5f\u5c31\u662f\u6bcf\u4e2a\u670d\u52a1\u7684\u5730\u5740\uff0c\u5728\u63a5\u53e3\u4e0a\u770b\u7528\u7684\u662f\u4e00\u4e2a 32 \u4f4d\u6574\u6570\u3002\u4f46\u5b9e\u9645\u4e0a\u5355\u4e2a\u670d\u52a1\u4e2d handle \u7684\u6700\u7ec8\u9650\u5236\u5728 24bit \u5185\uff0c\u4e5f\u5c31\u662f 16M \u4e2a\u3002\u9ad8 8 \u4f4d\u662f\u4fdd\u7559\u7ed9\u96c6\u7fa4\u95f4\u901a\u8baf\u7528\u7684\u3002 \u6211\u4eec\u6700\u7ec8\u5141\u8bb8 255 \u4e2a skynet \u8282\u70b9\u90e8\u7f72\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u534f\u4f5c\u3002\u6bcf\u4e2a skynet \u8282\u70b9\u6709\u4e0d\u540c\u7684 id \u3002\u8fd9\u91cc\u88ab\u79f0\u4e3a harbor id \u3002\u8fd9\u4e2a\u662f\u72ec\u7acb\u6307\u5b9a\uff0c\u4eba\u4e3a\u7ba1\u7406\u5206\u914d\u7684\uff08\u4e5f\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e2d\u592e\u670d\u52a1\u534f\u8c03\u5206\u914d\uff09\u3002\u6bcf\u4e2a\u6d88\u606f\u5305\u4ea7\u751f\u7684\u65f6\u5019\uff0cskynet \u6846\u67b6\u4f1a\u628a\u81ea\u5df1\u7684 harbor id \u7f16\u7801\u5230\u6e90\u5730\u5740\u7684\u9ad8 8 \u4f4d\u3002\u8fd9\u6837\uff0c\u7cfb\u7edf\u5185\u6240\u6709\u7684\u670d\u52a1\u6a21\u5757\uff0c\u90fd\u6709\u4e0d\u540c\u7684\u5730\u5740\u4e86\u3002\u4ece\u6570\u5b57\u5730\u5740\uff0c\u53ef\u4ee5\u8f7b\u6613\u8bc6\u522b\u51fa\uff0c\u8fd9\u4e2a\u6d88\u606f\u662f\u8fdc\u7a0b\u6d88\u606f\uff0c\u8fd8\u662f\u672c\u5730\u6d88\u606f\u3002 \u8fd9\u4e5f\u662f skynet \u6838\u5fc3\u5c42\u505a\u7684\u4e8b\u60c5\uff0c\u6838\u5fc3\u5e76\u4e0d\u89e3\u51b3\u8fdc\u7a0b\u6570\u636e\u4ea4\u4e92\u7684\u5de5\u4f5c\u3002 \u96c6\u7fa4\u95f4\u7684\u901a\u8baf\uff0c\u662f\u7531\u4e00\u4e2a\u72ec\u7acb\u7684 harbor \u670d\u52a1\u6765\u5b8c\u6210\u7684\u3002\u6240\u6709\u7684\u6d88\u606f\u5305\u5728\u53d1\u9001\u65f6\uff0cskynet \u8bc6\u522b\u51fa\u8fd9\u662f\u4e00\u4e2a\u8fdc\u7a0b\u6d88\u606f\u5305\u65f6\uff0c\u90fd\u4f1a\u628a\u5b83\u8f6c\u53d1\u5230 harbor \u670d\u52a1\u5185\u3002harbor \u670d\u52a1\u4f1a\u5efa\u7acb tcp \u8fde\u63a5\u5230\u6240\u6709\u5b83\u8ba4\u8bc6\u7684\u5176\u5b83 skynet \u8282\u70b9\u5185\u7684 harbor \u670d\u52a1\u4e0a\u3002 Harbor \u95f4\u901a\u8fc7\u5355\u5411\u7684 tcp \u8fde\u63a5\u7ba1\u9053\u4f20\u8f93\u6570\u636e\uff0c\u5b8c\u6210\u4e0d\u540c\u7684 skynet \u8282\u70b9\u95f4\u7684\u6570\u636e\u4ea4\u6362\u3002 skynet \u76ee\u524d\u652f\u6301\u4e00\u4e2a\u5168\u5c40\u540d\u5b57\u670d\u52a1\uff0c\u53ef\u4ee5\u628a\u4e00\u4e2a\u6d88\u606f\u5305\u53d1\u9001\u5230\u7279\u5b9a\u540d\u5b57\u7684\u670d\u52a1\u4e0a\u3002\u8fd9\u4e2a\u670d\u52a1\u4e0d\u5fc5\u5b58\u5728\u4e8e\u5f53\u524d skynet \u8282\u70b9\u4e2d\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u673a\u6784\u80fd\u591f\u540c\u6b65\u8fd9\u4e9b\u5168\u5c40\u540d\u5b57\u3002 \u4e3a\u6b64\uff0c\u6211\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a master \u7684\u670d\u52a1\u3002\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u5e7f\u64ad\u540c\u6b65\u6240\u6709\u7684\u5168\u5c40\u540d\u5b57\uff0c\u4ee5\u53ca\u52a0\u5165\u8fdb\u6765\u7684 skynet \u8282\u70b9\u7684\u5730\u5740\u3002\u672c\u8d28\u4e0a\uff0c\u8fd9\u4e9b\u5730\u5740\u4e5f\u662f\u4e00\u79cd\u540d\u5b57\u3002\u540c\u6837\u53ef\u4ee5\u7528 key-value \u7684\u5f62\u5f0f\u50a8\u5b58\u3002\u5373\uff0c\u6bcf\u4e2a skynet \u8282\u70b9\u53f7\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002 \u7ec4\u64ad \u00b6 \u5bf9\u4e8e\u6e38\u620f\u670d\u52a1\uff0c\u7ec4\u64ad\u670d\u52a1\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u4f18\u5316\u3002\u5982\u679c\u6ca1\u6709\u7ec4\u64ad\u670d\u52a1\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u7528\u4e00\u4e2a\u5faa\u73af\uff0c\u628a\u4e00\u4e2a\u5305\u53d1\u9001\u7ed9\u4e0d\u540c\u7684\u5730\u5740\u3002\u4f46\u6e38\u620f\u4e2d\u5927\u91cf\u9700\u8981\u628a\u4e00\u6761\u6d88\u606f\u53d1\u9001\u7ed9\u4e0d\u540c\u7684\u5b9e\u4f53\u3002\u5bf9\u4e8e\u4f20\u7edf\u7684\u505a\u6cd5\uff0c\u9700\u8981\u7ec4\u64ad\u7684\u573a\u5408\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u5b9e\u4f53\u5b9e\u73b0\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5185\u3002\u4f46\u662f\uff0c\u5728\u4f7f\u7528 skynet \u65f6\uff0c\u5f80\u5f80\u4e00\u4e2a\u670d\u52a1\u53ea\u5b9e\u73b0\u5c11\u90e8\u5206\u529f\u80fd\uff0c\u5927\u91cf\u4f9d\u8d56\u670d\u52a1\u95f4\u7684\u901a\u8baf\u3002\u8fd9\u6837\uff0c\u4f18\u5316\u8fd9\u4e9b\u7ec4\u64ad\u5305\uff0c\u5c31\u663e\u5f97\u6709\u5fc5\u8981\u4e86\u3002 \u7ec4\u64ad\u5fc5\u987b\u8ba9 skynet \u5728\u5e95\u5c42\u505a\u4e00\u4e9b\u652f\u6301\uff0c\u800c\u5f88\u5168\u90e8\u653e\u5728\u6838\u5fc3\u5c42\u4e4b\u5916\u7684\u5b9e\u73b0\u3002 \u8fd9\u662f\u56e0\u4e3a\uff0c\u7ec4\u64ad\u5305\u7684\u5206\u914d\u548c\u91ca\u653e\u7b56\u7565\u548c\u5176\u5b83\u5305\u4e0d\u540c\u3002\u5b83\u9700\u8981\u6709\u5f15\u7528\u8ba1\u6570\u3002\u548c\u522b\u7684\u6d88\u606f\u5305\uff0c\u53d1\u9001\u65b9\u5206\u914d\uff0c\u63a5\u6536\u65b9\u91ca\u653e\u662f\u4e0d\u540c\u7684\u3002\u56fa\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6d88\u606f\u5305\u7edf\u4e00\u6210\u5168\u90e8\u5e26\u6709\u5f15\u7528\u8ba1\u6570\uff0c\u53ea\u662f\u5355\u64ad\u5305\u8bb0\u6570\u4e3a 1 \u3002\u4f46\u8fd9\u6837\uff0c\u5c31\u727a\u7272\u4e86\u5355\u64ad\u5305\u7684\u6027\u80fd\u3002\u6211\u5e0c\u671b\u7684\u6548\u679c\u662f \uff0c\u5982\u679c\u4f60\u4e0d\u7528\u8fd9\u4e2a\u673a\u5236\uff08\u6bd4\u5982\u7ec4\u64ad\uff09\u5c31\u4e0d\u5fc5\u4e3a\u4e4b\u4ed8\u51fa\u6210\u672c\u3002\u6240\u4ee5\uff0c\u6211\u5728 skynet \u5e95\u5c42\u505a\u4e86\u6709\u9650\u7684\u652f\u6301\u3002 skynet \u4f1a\u8bc6\u522b\u6d88\u606f\u7684 type \u662f\u5426\u4e3a PTYPE_MULTICAST \uff0c\u7136\u540e\u6709\u4e0d\u540c\u7684\u751f\u547d\u671f\u7ba1\u7406\u7b56\u7565\uff0c\u5e76\u628a\u7ec4\u64ad\u5305\u4ea4\u7ed9\u7ec4\u64ad\u670d\u52a1\u5904\u7406\u3002\u8fd9\u4e00\u70b9\uff0c\u548c\u96c6\u7fa4\u95f4\u901a\u8baf\u7684\u505a\u6cd5\u975e\u5e38\u7c7b\u4f3c\u3002 \u7ec4\u64ad\u670d\u52a1\u5e76\u4e0d\u89e3\u51b3\u5206\u719f\u5728\u4e0d\u540c\u96c6\u7fa4\u8282\u70b9\u4e0a\u7684\u670d\u52a1\u5f52\u7ec4\u7684\u95ee\u9898\u3002\u5373\uff0c\u6bcf\u4e2a\u5206\u7ec4\u5185\u7684\u6210\u5458\u90fd\u5fc5\u987b\u5728\u540c\u4e00\u7cfb\u7edf\u8fdb\u7a0b\u5185\u3002\u8fd9\u53ef\u4ee5\u6781\u5927\u7684\u7b80\u5316\u8bbe\u8ba1\u3002\u7528\u6237\u53ef\u4ee5\u8ba9\u4e0d\u540c\u7684\u670d\u52a1 handle \u5f52\u5c5e\u4e00\u4e2a\u7ec4\u53f7\u3002\u5411 skynet \u7d22\u53d6\u8fd9\u4e2a\u7ec4\u53f7\u5bf9\u5e94\u7684 handle \u3002\u5411\u8fd9\u4e2a\u7ec4\u7684 handle \u53d1\u9001\u6d88\u606f\uff0c\u5c31\u7b49\u540c\u4e8e\u5411\u7ec4\u5185\u6240\u6709 handle \u53d1\u9001\u6d88\u606f\u3002 \u800c\u8de8\u96c6\u7fa4\u5206\u7ec4\u53c8\u5982\u4f55\u505a\u5230\u5462\uff1f\u8fd9\u91cc\u662f\u5728\u4e0a\u5c42\u7528 lua \u6765\u505a\u4e86\u8fdb\u4e00\u6b65\u7684\u5c01\u88c5\u3002 \u9996\u5148\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\uff0c\u7528 C \u7f16\u5199\u7684\u670d\u52a1\uff0c\u53eb\u505a tunnel \u3002\u5b83\u53ef\u4ee5\u628a\u53d1\u9001\u7ed9\u5b83\u7684\u6d88\u606f\uff0c\u65e0\u6761\u4ef6\u7684\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a handle \u4e0a\u3002\u8fd9\u4e2a\u8f6c\u53d1 handle \u53ef\u4ee5\u662f\u5728\u4e0d\u540c skynet \u8282\u70b9\u4e0a\u7684\u3002 \u6211\u7528 lua \u7f16\u5199\u4e86\u4e00\u4e2a\u5168\u5c40\u7684\u5206\u7ec4\u7ba1\u7406\u5668\uff0c\u534f\u8c03\u5728\u4e0d\u540c\u8282\u70b9\u4e0a\uff0c\u521b\u5efa\u51fa\u76f8\u540c\u7ec4\u540d\u7684\u5206\u7ec4\u6765\u3002\u7136\u540e\u7528 tunnel \u670d\u52a1\u8fde\u63a5\u4e0d\u540c\u8282\u70b9\u4e0a\u7684\u540c\u4e00\u5206\u7ec4\u5c31\u591f\u4e86\u3002\u5177\u4f53\u7ec6\u8282\u5c31\u4e0d\u5728\u6b64\u8d58\u8ff0\u3002 skynet \u7684\u6d88\u606f\u8c03\u5ea6 \u00b6 Skynet \u7ef4\u62a4\u4e86\u4e24\u7ea7\u6d88\u606f\u961f\u5217\u3002 \u6bcf\u4e2a\u670d\u52a1\u5b9e\u4f53\u6709\u4e00\u4e2a\u79c1\u6709\u7684\u6d88\u606f\u961f\u5217\uff0c\u961f\u5217\u4e2d\u662f\u4e00\u4e2a\u4e2a\u53d1\u9001\u7ed9\u5b83\u7684\u6d88\u606f\u3002\u6d88\u606f\u7531\u56db\u90e8\u5206\u6784\u6210\uff1a struct skynet_message { uint32_t source; int session; void * data; size_t sz; }; \u5411\u4e00\u4e2a\u670d\u52a1\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\uff0c\u5c31\u662f\u628a\u8fd9\u6837\u4e00\u4e2a\u6d88\u606f\u4f53\u538b\u5165\u8fd9\u4e2a\u670d\u52a1\u7684\u79c1\u6709\u6d88\u606f\u961f\u5217\u4e2d\u3002\u8fd9\u4e2a\u7ed3\u6784\u7684\u503c\u590d\u5236\u8fdb\u6d88\u606f\u961f\u5217\u7684\uff0c\u4f46\u6d88\u606f\u5185\u5bb9\u672c\u8eab\u4e0d\u505a\u590d\u5236\u3002 Skynet \u7ef4\u62a4\u4e86\u4e00\u4e2a\u5168\u5c40\u6d88\u606f\u961f\u5217\uff0c\u91cc\u9762\u653e\u7684\u662f\u8bf8\u4e2a\u4e0d\u4e3a\u7a7a\u7684\u6b21\u7ea7\u6d88\u606f\u961f\u5217\u3002 \u5728 Skynet \u542f\u52a8\u65f6\uff0c\u5efa\u7acb\u4e86\u82e5\u5e72\u5de5\u4f5c\u7ebf\u7a0b\uff08\u6570\u91cf\u53ef\u914d\u7f6e\uff09\uff0c\u5b83\u4eec\u4e0d\u65ad\u7684\u4ece\u4e3b\u6d88\u606f\u5217\u961f\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6b21\u7ea7\u6d88\u606f\u961f\u5217\u6765\uff0c\u518d\u4ece\u6b21\u7ea7\u961f\u5217\u4e2d\u53d6\u53bb\u4e00\u6761\u6d88\u606f\uff0c\u8c03\u7528\u5bf9\u5e94\u7684\u670d\u52a1\u7684 callback \u51fd\u6570\u8fdb\u884c\u51fa\u6765\u3002\u4e3a\u4e86\u8c03\u7528\u516c\u5e73\uff0c\u4e00\u6b21\u4ec5\u5904\u7406\u4e00\u6761\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u8017\u51c0\u6240\u6709\u6d88\u606f\uff08\u867d\u7136\u90a3\u6837\u7684\u5c40\u90e8\u6548\u7387\u66f4\u9ad8\uff0c\u56e0\u4e3a\u51cf\u5c11\u4e86\u67e5\u8be2\u670d\u52a1\u5b9e\u4f53\u7684\u6b21\u6570\uff0c\u4ee5\u53ca\u4e3b\u6d88\u606f\u961f\u5217\u8fdb\u51fa\u7684\u6b21\u6570\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u670d\u52a1\u4f1a\u88ab\u997f\u6b7b\u3002 \u7528\u6237\u5b9a\u4e49\u7684 callback \u51fd\u6570\u4e0d\u5fc5\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u56e0\u4e3a\u5728 callback \u51fd\u6570\u88ab\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5176\u5b83\u5de5\u4f5c\u7ebf\u7a0b\u6ca1\u6709\u53ef\u80fd\u83b7\u5f97\u8fd9\u4e2a callback \u51fd\u6570\u6240\u5c5e\u670d\u52a1\u7684\u6b21\u7ea7\u6d88\u606f\u961f\u5217\uff0c\u4e5f\u5c31\u4e0d\u53ef\u80fd\u88ab\u5e76\u53d1\u4e86\u3002\u4e00\u65e6\u4e00\u4e2a\u670d\u52a1\u7684\u6d88\u606f\u961f\u5217\u6682\u65f6\u4e3a\u7a7a\uff0c\u5b83\u7684\u6d88\u606f\u961f\u5217\u5c31\u4e0d\u518d\u88ab\u653e\u56de\u5168\u5c40\u6d88\u606f\u961f\u5217\u4e86\u3002\u8fd9\u6837\u4f7f\u5927\u90e8\u5206\u4e0d\u5de5\u4f5c\u7684\u670d\u52a1\u4e0d\u4f1a\u7a7a\u8f6c CPU \u3002 btw\uff0c\u5728\u505a\u8fd9\u90e8\u5206\u4ee3\u7801\u5b9e\u73b0\u65f6\uff0c\u6211\u66fe\u7ecf\u9047\u5230\u8fc7\u4e00\u4e9b\u5e76\u53d1\u5f15\u8d77\u7684 bug \uff0c\u597d\u5728\u6700\u7ec8\u90fd\u89e3\u51b3\u4e86\u3002\u8fd9\u6216\u8bb8\u662f\u6574\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u5e76\u53d1\u95ee\u9898\u6700\u590d\u6742\u7684\u90e8\u5206\uff0c\u4f46\u4e5f\u4ec5\u4ec5\u662f\u8fd9\u4e00\u5c0f\u90e8\u5206\u4e86\u3002\u4e0d\u4f1a\u8ba9\u5e76\u53d1\u7684\u590d\u6742\u6027\u8513\u5ef6\u51fa\u53bb\u3002 Gate \u548c Connection \u00b6 \u5916\u754c\u901a\u8baf\u6709\u4e24\u79cd\uff0c\u4e00\u662f\u6e38\u620f\u5ba2\u4e92\u7aef\u4f7f\u7528 TCP \u8fde\u63a5\u63a5\u5165 skynet \u8282\u70b9\u3002 \u53e6\u4e00\u4e2a\u662f\u7b2c\u4e09\u65b9\u7684\u670d\u52a1\uff0c\u6bd4\u5982\u6570\u636e\u5e93\u670d\u52a1\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a TCP \u8fde\u63a5\u3002\u4f60\u9700\u8981\u4ece skynet \u5185\u90e8\u5efa\u7acb\u4e00\u4e2a TCP \u8fde\u63a5\u51fa\u53bb\u4f7f\u7528\u3002 \u524d\u8005\uff0c\u6211\u79f0\u4e3a gate \u670d\u52a1\u3002\u5b83\u7684\u7279\u5f81\u662f\u76d1\u542c\u4e00\u4e2a TCP \u7aef\u53e3\uff0c\u63a5\u53d7\u8fde\u5165\u7684 TCP \u8fde\u63a5\uff0c\u5e76\u628a\u8fde\u63a5\u4e0a\u83b7\u5f97\u7684\u6570\u636e\u8f6c\u53d1\u5230 skynet \u5185\u90e8\u3002Gate \u53ef\u4ee5\u7528\u6765\u6d88\u9664\u5916\u90e8\u6570\u636e\u5305\u548c skynet \u5185\u90e8\u6d88\u606f\u5305\u7684\u4e0d\u4e00\u81f4\u6027\u3002\u5916\u90e8 TCP \u6d41\u7684\u5206\u5305\u95ee\u9898\uff0c\u662f Gate \u5b9e\u73b0\u4e0a\u7684\u7ea6\u5b9a\u3002 Gate \u4f1a\u63a5\u53d7\u5916\u90e8\u8fde\u63a5\uff0c\u5e76\u628a\u8fde\u63a5\u76f8\u5173\u4fe1\u606f\u8f6c\u53d1\u7ed9\u53e6\u4e00\u4e2a\u670d\u52a1\u53bb\u5904\u7406\u3002\u5b83\u81ea\u5df1\u4e0d\u505a\u6570\u636e\u5904\u7406\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4fdd\u6301 gate \u5b9e\u73b0\u7684\u7b80\u6d01\u9ad8\u6548\u3002C \u8bed\u8a00\u8db3\u4ee5\u80dc\u4efb\u8fd9\u9879\u5de5\u4f5c\u3002\u800c\u5305\u5904\u7406\u5de5\u4f5c\u5219\u548c\u4e1a\u52a1\u903b\u8f91\u7cbe\u5bc6\u76f8\u5173\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 Lua \u5b8c\u6210\u3002 \u5916\u90e8\u4fe1\u606f\u5206\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u8fde\u63a5\u672c\u8eab\u7684\u63a5\u5165\u548c\u65ad\u5f00\u6d88\u606f\uff0c\u53e6\u4e00\u7c7b\u662f\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u5305\u3002\u4e00\u5f00\u59cb\uff0cGate \u65e0\u6761\u4ef6\u8f6c\u53d1\u8fd9\u4e24\u7c7b\u6d88\u606f\u5230\u540c\u4e00\u4e2a\u5904\u7406\u670d\u52a1\u3002\u4f46\u5bf9\u4e8e\u8fde\u63a5\u6570\u636e\u5305\uff0c\u6dfb\u52a0\u4e00\u4e2a\u5305\u5934\u65e0\u7591\u6709\u6027\u80fd\u4e0a\u7684\u5f00\u9500\u3002\u6240\u4ee5 Gate \u8fd8\u63a5\u6536\u53e6\u4e00\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff1a\u628a\u6bcf\u4e2a\u4e0d\u540c\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u5305\u8f6c\u53d1\u7ed9\u4e0d\u540c\u7684\u72ec\u7acb\u670d\u52a1\u4e0a\u3002\u6bcf\u4e2a\u72ec\u7acb\u670d\u52a1\u5904\u7406\u5355\u4e00\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u5305\u3002 \u6216\u8005\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u628a\u4e0d\u540c\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u5305\u4ece\u63a7\u5236\u4fe1\u606f\u5305\uff08\u5efa\u7acb/\u65ad\u5f00\u8fde\u63a5\uff09\u4e2d\u5206\u79bb\u5f00\uff0c\u4f46\u4e0d\u533a\u5206\u4e0d\u540c\u8fde\u63a5\u800c\u8f6c\u53d1\u7ed9\u540c\u4e00\u6570\u636e\u5904\u7406\u670d\u52a1\uff08\u5bf9\u6570\u636e\u6765\u6e90\u4e0d\u654f\u611f\uff0c\u53ea\u5bf9\u6570\u636e\u5185\u5bb9\u654f\u611f\u7684\u573a\u5408\uff09\u3002 \u8fd9\u4e09\u79cd\u6a21\u5f0f\uff0c\u6211\u5206\u522b\u79f0\u4e3a watchdog \u6a21\u5f0f\uff0c\u7531 gate \u52a0\u4e0a\u5305\u5934\uff0c\u540c\u65f6\u5904\u7406\u63a7\u5236\u4fe1\u606f\u548c\u6570\u636e\u4fe1\u606f\u7684\u6240\u6709\u6570\u636e\uff1bagent \u6a21\u5f0f\uff0c\u8ba9\u6bcf\u4e2a agent \u5904\u7406\u72ec\u7acb\u8fde\u63a5\uff1b\u4ee5\u53ca broker \u6a21\u5f0f\uff0c\u7531\u4e00\u4e2a broker \u670d\u52a1\u5904\u7406\u4e0d\u540c\u8fde\u63a5\u4e0a\u7684\u6240\u6709\u6570\u636e\u5305\u3002\u65e0\u8bba\u662f\u54ea\u79cd\u6a21\u5f0f\uff0c\u63a7\u5236\u4fe1\u606f\u90fd\u662f\u4ea4\u7ed9 watchdog \u53bb\u5904\u7406\u7684\uff0c\u800c\u6570\u636e\u5305\u5982\u679c\u4e0d\u53d1\u7ed9 watchdog \u800c\u662f\u53d1\u9001\u7ed9 agent \u6216 broker \u7684\u8bdd\uff0c\u5219\u4e0d\u4f1a\u6709\u989d\u5916\u7684\u6570\u636e\u5934\uff08\u4e5f\u51cf\u5c11\u4e86\u6570\u636e\u62f7\u8d1d\uff09\u3002\u8bc6\u522b\u8fd9\u4e9b\u5305\u662f\u4ece\u5916\u90e8\u53d1\u9001\u8fdb\u6765\u7684\u65b9\u6cd5\u662f\u68c0\u67e5\u6d88\u606f\u5305\u7684\u7c7b\u578b\u662f\u5426\u4e3a PTYPE_CLIENT \u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u5236\u6d88\u606f\u7c7b\u578b\u8ba9 gate \u901a\u77e5\u4f60\u3002 \u53e6\u4e00\u4e2a\u91cd\u8981\u7ec4\u4ef6\u53eb Connection \u3002\u5b83\u548c Gate \u4e0d\u540c\uff0c\u5b83\u8d1f\u8d23\u4ece skynet \u5185\u90e8\u5efa\u7acb socket \u5230\u5916\u90e8\u670d\u52a1\u3002 Connection \u5206\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u7528\u4e8e\u76d1\u542c\u4e0d\u540c\u7684\u7cfb\u7edf fd \u7684\u53ef\u8bfb\u72b6\u6001\uff0c\u8fd9\u662f\u7528 epoll \u5b9e\u73b0\u7684\u3002\u5982\u679c\u5728\u6ca1\u6709 epoll \u652f\u6301\u7684\u73af\u5883\uff08\u6bd4\u5982 freebsd \u4e0b\uff09\uff0c\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u5b9e\u73b0\u4e00\u4e2a\u66ff\u4ee3\u54c1\u3002\u5b83\u6536\u5230\u8fd9\u4e2a\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u540e\uff0c\u4f1a\u628a\u6240\u6709\u6570\u636e\u4e0d\u505a\u4efb\u4f55\u5206\u5305\uff0c\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u670d\u52a1\u91cc\u53bb\u5904\u7406\u3002\u8fd9\u548c gate \u7684\u884c\u4e3a\u4e0d\u592a\u4e00\u81f4\uff0c\u8fd9\u662f\u56e0\u4e3a connection \u591a\u7528\u4e8e\u4f7f\u7528\u5916\u90e8\u7b2c\u4e09\u65b9\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5f88\u96be\u7edf\u4e00\u5176\u5206\u5305\u7684\u683c\u5f0f\u3002","title":"3. skynet \u8bbe\u8ba1\u7efc\u8ff0"},{"location":"skynet/%E8%AE%BE%E8%AE%A1%E7%BB%BC%E8%BF%B0/#skynet","text":"\u5145\u5206\u5229\u7528\u591a\u6838\u4f18\u52bf\uff0c\u5c06\u4e0d\u540c\u7684\u4e1a\u52a1\u653e\u5728\u72ec\u7acb\u7684\u6267\u884c\u73af\u5883\u4e2d\u5904\u7406\uff0c\u534f\u540c\u5de5\u4f5c\u3002 \u8fd9\u4e2a\u6267\u884c\u73af\u5883\uff0c\u6700\u65e9\u7684\u65f6\u5019\uff0c\u6211\u671f\u671b\u662f\u5229\u7528 OS \u7684\u8fdb\u7a0b\uff0c\u540e\u6765\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u5fc5\u5b9a\u91c7\u7528\u5d4c\u5165\u5f0f\u8bed\u8a00\uff0c\u6bd4\u5982 Lua \u7684\u8bdd\uff0c\u72ec\u7acb OS \u8fdb\u7a0b\u7684\u610f\u4e49\u4e0d\u592a\u5927\u3002Lua State \u5df2\u7ecf\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u6c99\u76d2\uff0c\u9694\u79bb\u4e0d\u540c\u6267\u884c\u73af\u5883\u3002\u800c\u591a\u7ebf\u7a0b\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u5f97\u72b6\u6001\u5171\u4eab\u3001\u6570\u636e\u4ea4\u6362\u66f4\u52a0\u9ad8\u6548\u3002\u800c\u591a\u7ebf\u7a0b\u6a21\u578b\u7684\u8bf8\u591a\u5f0a\u7aef\uff0c\u6bd4\u5982\u590d\u6742\u7684\u7ebf\u7a0b\u9501\u3001\u7ebf\u7a0b\u8c03\u5ea6\u95ee\u9898\u7b49\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f\u5e95\u5c42\u7684\u89c4\u6a21\uff0c\u7cbe\u7b80\u8bbe\u8ba1\uff0c\u6700\u7ec8\u628a\u5371\u5bb3\u9650\u5236\u5728\u5f88\u5c0f\u7684\u8303\u56f4\u5185\u3002\u8fd9\u4e00\u70b9\uff0cSkynet \u6700\u7ec8\u82b1\u4e86\u4e0d\u5230 3000 \u884c C \u4ee3\u7801\u6765\u5b9e\u73b0\u6838\u5fc3\u5c42\u7684\u4ee3\u7801 \u505a\u4e3a\u6838\u5fc3\u529f\u80fd\uff0cSkynet \u4ec5\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff1a \u628a\u4e00\u4e2a\u7b26\u5408\u89c4\u8303\u7684 C \u6a21\u5757\uff0c\u4ece\u52a8\u6001\u5e93\uff08so \u6587\u4ef6\uff09\u4e2d\u542f\u52a8\u8d77\u6765\uff0c\u7ed1\u5b9a\u4e00\u4e2a\u6c38\u4e0d\u91cd\u590d\uff08\u5373\u4f7f\u6a21\u5757\u9000\u51fa\uff09\u7684\u6570\u5b57 id \u505a\u4e3a\u5176 handle \u3002\u6a21\u5757\u88ab\u79f0\u4e3a\u670d\u52a1\uff08Service\uff09\uff0c\u670d\u52a1\u95f4\u53ef\u4ee5\u81ea\u7531\u53d1\u9001\u6d88\u606f\u3002\u6bcf\u4e2a\u6a21\u5757\u53ef\u4ee5\u5411 Skynet \u6846\u67b6\u6ce8\u518c\u4e00\u4e2a callback \u51fd\u6570\uff0c\u7528\u6765\u63a5\u6536\u53d1\u7ed9\u5b83\u7684\u6d88\u606f\u3002\u6bcf\u4e2a\u670d\u52a1\u90fd\u662f\u88ab\u4e00\u4e2a\u4e2a\u6d88\u606f\u5305\u9a71\u52a8\uff0c\u5f53\u6ca1\u6709\u5305\u5230\u6765\u7684\u65f6\u5019\uff0c\u5b83\u4eec\u5c31\u4f1a\u5904\u4e8e\u6302\u8d77\u72b6\u6001\uff0c\u5bf9 CPU \u8d44\u6e90\u96f6\u6d88\u8017\u3002\u5982\u679c\u9700\u8981\u81ea\u4e3b\u903b\u8f91\uff0c\u5219\u53ef\u4ee5\u5229\u7528 Skynet \u7cfb\u7edf\u63d0\u4f9b\u7684 timeout \u6d88\u606f\uff0c\u5b9a\u671f\u89e6\u53d1\u3002 Skynet \u63d0\u4f9b\u4e86\u540d\u5b57\u670d\u52a1\uff0c\u8fd8\u53ef\u4ee5\u7ed9\u7279\u5b9a\u7684\u670d\u52a1\u8d77\u4e00\u4e2a\u6613\u8bfb\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u7528 id \u6765\u6307\u4ee3\u5b83\u3002id \u548c\u8fd0\u884c\u65f6\u6001\u76f8\u5173\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u6bcf\u6b21\u542f\u52a8\u670d\u52a1\uff0c\u90fd\u6709\u4e00\u81f4\u7684 id \uff0c\u4f46\u540d\u5b57\u53ef\u4ee5\u3002","title":"Skynet \u6838\u5fc3\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898"},{"location":"skynet/%E8%AE%BE%E8%AE%A1%E7%BB%BC%E8%BF%B0/#skynet_1","text":"Skynet \u7684\u6d88\u606f\u4f20\u9012\u90fd\u662f\u5355\u5411\u7684\uff0c\u4ee5\u6570\u636e\u5305\u4e3a\u5355\u4f4d\u4f20\u9012\u7684\u3002\u5e76\u6ca1\u6709\u5b9a\u4e49\u51fa\u7c7b\u4f3c TCP \u8fde\u63a5\u7684\u6982\u5ff5\u3002\u4e5f\u6ca1\u6709\u7ea6\u5b9a RPC \u8c03\u7528\u7684\u534f\u8bae\u3002\u4e0d\u89c4\u5b9a\u6570\u636e\u5305\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u6ca1\u6709\u63d0\u4f9b\u4e00\u81f4\u7684\u590d\u6742\u6570\u636e\u7ed3\u6784\u7684\u5217\u96c6 API \u3002 \u7b80\u5355\u8bf4\uff0cSkynet \u53ea\u8d1f\u8d23\u628a\u4e00\u4e2a\u6570\u636e\u5305\u4ece\u4e00\u4e2a\u670d\u52a1\u5185\u53d1\u9001\u51fa\u53bb\uff0c\u8ba9\u540c\u4e00\u8fdb\u7a0b\u5185\u7684\u53e6\u4e00\u4e2a\u670d\u52a1\u6536\u5230\uff0c\u8c03\u7528\u5bf9\u5e94\u7684 callback \u51fd\u6570\u5904\u7406\u3002\u5b83\u4fdd\u8bc1\uff0c\u6a21\u5757\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u6bcf\u4e2a\u72ec\u7acb\u7684 callback \u8c03\u7528\uff0c\u90fd\u662f\u76f8\u4e92\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u7f16\u5199\u670d\u52a1\u7684\u4eba\u4e0d\u9700\u8981\u7279\u522b\u7684\u4e3a\u591a\u7ebf\u7a0b\u73af\u5883\u8003\u8651\u4efb\u4f55\u95ee\u9898\u3002\u4e13\u5fc3\u5904\u7406\u53d1\u9001\u7ed9\u5b83\u7684\u4e00\u4e2a\u4e2a\u6570\u636e\u5305\u3002 \u719f\u6089 Erlang \u7684\u540c\u5b66\u4e00\u773c\u5c31\u80fd\u660e\u4e86\uff0c\u8fd9\u5c31\u662f Erlang \u7684 Actor \u6a21\u578b\u3002\u53ea\u4e0d\u8fc7\uff0c\u6211\u5d4c\u5165\u4e86\u66f4\u4e3a\u6211\u719f\u6089\u7684 Lua \u8bed\u8a00\u3002\u5f53\u7136\uff0c\u5982\u679c\u67e5\u9605 Skynet \u7684\u4ee3\u7801\u5c31\u80fd\u53d1\u73b0\uff0c\u5176\u5b9e Lua \u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f60\u5b8c\u5168\u53ef\u4ee5\u7528 C \u7f16\u5199\u670d\u52a1\u6a21\u5757\u3002\u4e5f\u53ef\u4ee5\u65b9\u4fbf\u7684\u6362\u6210 Python \u80fd\u5176\u5b83\u53ef\u4ee5\u5d4c\u5165 C \u7684\u52a8\u6001\u8bed\u8a00\u3002\u8ba9 Lua \u548c Python \u5171\u5b58\u4e5f\u4e0d\u96be\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u5230\u6211\u5df2\u7ecf\u4e3a Skynet \u7f16\u5199\u7684\u4e00\u4e9b\u7528 Lua \u5b9e\u73b0\u7684\u57fa\u7840\u670d\u52a1\u4e86\u3002 \u4e3a\u4ec0\u4e48\u9009\u62e9 Lua ? \u5b83\u7684\u8fd0\u884c\u65f6\u9700\u8981\u7684\u5fc5\u8981\u5e93\u5f88\u5c11\uff0c\u8ba9\u8fd9\u79cd\u9700\u8981\u5927\u91cf\u72ec\u7acb\u6c99\u76d2\u7684\u7cfb\u7edf\u66f4\u4e3a\u8f7b\u91cf\u3002\u542f\u52a8\u548c\u9500\u6bc1\u4e00\u4e2a\u670d\u52a1\u90fd\u5f88\u5feb\u3002 \u4e3a\u4e86\u63d0\u4f9b\u9ad8\u6548\u7684\u670d\u52a1\u95f4\u901a\u8baf\uff0cSkynet \u91c7\u7528\u4e86\u51e0\u70b9\u8bbe\u8ba1\uff0c\u83b7\u5f97\u4e86\u6bd4\u591a\u8fdb\u7a0b\u65b9\u6848\u66f4\u9ad8\u7684\u6027\u80fd\u3002 \u6570\u636e\u5305\u901a\u5e38\u662f\u5728\u4e00\u4e2a\u670d\u52a1\u5185\u6253\u5305\u751f\u6210\u7684\uff0cSkynet \u5e76\u4e0d\u5173\u5fc3\u6570\u636e\u5305\u662f\u600e\u6837\u88ab\u6253\u5305\u7684\uff0c\u5b83\u751a\u81f3\u4e0d\u8981\u6c42\u8fd9\u4e2a\u6570\u636e\u5305\u5185\u7684\u6570\u636e\u662f\u8fde\u7eed\u7684\uff08\u867d\u7136\u8fd9\u6837\u5f88\u5371\u9669\uff0c\u5728\u540e\u9762\u4f1a\u8c08\u53ca\u7684\u8de8\u673a\u901a\u8baf\u4e2d\u4f1a\u51fa\u9519\uff0c\u9664\u975e\u4f60\u4fdd\u8bc1\u4f60\u7684\u6570\u636e\u5305\u7edd\u5bf9\u4e0d\u88ab\u4f20\u9012\u51fa\u5f53\u524d\u6240\u5728\u7684\u8fdb\u7a0b\uff09\u3002\u5b83\u4ec5\u4ec5\u662f\u628a\u6570\u636e\u5305\u7684\u6307\u9488\uff0c\u4ee5\u53ca\u4f60\u58f0\u79f0\u7684\u6570\u636e\u5305\u957f\u5ea6\uff08\u5e76\u4e0d\u4e00\u5b9a\u662f\u771f\u5b9e\u957f\u5ea6\uff09\u4f20\u9012\u51fa\u53bb\u3002\u7531\u4e8e\u670d\u52a1\u90fd\u662f\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u5185\uff0c\u63a5\u6536\u65b9\u53d6\u5f97\u8fd9\u4e2a\u6307\u9488\u540e\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5904\u7406\u5176\u5f15\u7528\u7684\u6570\u636e\u4e86\u3002 \u8fd9\u4e2a\u673a\u5236\u53ef\u4ee5\u5728\u5fc5\u8981\u65f6\uff0c\u4fdd\u8bc1\u7edd\u5bf9\u7684\u96f6\u62f7\u8d1d\uff0c\u51e0\u4e4e\u7b49\u4ef7\u4e8e\u5728\u540c\u4e00\u7ebf\u7a0b\u5185\u505a\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u3002 \u4f46\uff0c\u8fd9\u53ea\u662f Skynet \u63d0\u4f9b\u7684\u6027\u80fd\u4e0a\u7684\u53ef\u80fd\u6027\u3002\u5b83\u63a8\u8350\u7684\u662f\u4e00\u79cd\u66f4\u53ef\u9760\uff0c\u6027\u80fd\u7565\u4f4e\u7684\u65b9\u6848\uff1a\u5b83\u7ea6\u5b9a\uff0c\u6bcf\u4e2a\u670d\u52a1\u53d1\u9001\u51fa\u53bb\u7684\u5305\u90fd\u662f\u590d\u5236\u5230\u7528 malloc \u5206\u914d\u51fa\u6765\u7684\u8fde\u7eed\u5185\u5b58\u3002\u63a5\u6536\u65b9\u5728\u5904\u7406\u5b8c\u8fd9\u4e2a\u6570\u636e\u5757\uff08\u5728\u5904\u7406\u7684 callback \u51fd\u6570\u8c03\u7528\u5b8c\u6bd5\uff09\u540e\uff0c\u4f1a\u9ed8\u8ba4\u8c03\u7528 free \u51fd\u6570\u91ca\u653e\u6389\u6240\u5360\u7684\u5185\u5b58\u3002\u5373\uff0c\u53d1\u9001\u65b9\u7533\u8bf7\u5185\u5b58\uff0c\u63a5\u6536\u65b9\u91ca\u653e\u3002 \u6211\u4eec\u6765\u770b\u770b skynet_send \u548c callback \u51fd\u6570\u7684\u5b9a\u4e49\uff1a int skynet_send ( struct skynet_context * context , uint32_t source , uint32_t destination , int type , int session , void * msg , size_t sz ); typedef int ( * skynet_cb )( struct skynet_context * context , void * ud , int type , int session , uint32_t source , const void * msg , size_t sz ); \u6682\u4e14\u4e0d\u53bb\u5173\u6ce8 type \u548c session \u4e24\u4e2a\u53c2\u6570\u3002\u8fd9\u91cc\uff0csource \u548c destination \u90fd\u662f 32 \u4f4d\u6574\u6570\uff0c\u8868\u793a\u5730\u5740\u3002\u539f\u5219\u4e0a\u4e0d\u9700\u8981\u586b\u5199 source \u5730\u5740\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u5c31\u662f\u5b83\u81ea\u5df1\u30020 \u662f\u7cfb\u7edf\u4fdd\u7559\u7684 handle \uff0c\u53ef\u4ee5\u6307\u4ee3\u81ea\u5df1\u3002\u8fd9\u91cc\u5141\u8bb8\u586b\u5199 source \u503c\uff0c\u662f\u56e0\u4e3a\u5728\u67d0\u4e9b\u7279\u6b8a\u573a\u5408\uff0c\u9700\u8981\u4f2a\u9020\u4e00\u4e2a\u7531\u522b\u4eba\u53d1\u51fa\u7684\u5305\u3002\u59d1\u4e14\u53ef\u4ee5\u7406\u89e3 source \u4e3a reply address \u3002 \u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u5c31\u662f\u53d1\u9001 msg/sz \u5bf9\u3002\u6211\u4eec\u53ef\u4ee5\u5728 type \u91cc\u6253\u4e0a dontcopy \u7684 tag (PTYPE_TAG_DONTCOPY) \uff0c\u8ba9\u6846\u67b6\u4e0d\u8981\u590d\u5236 msg/sz \u6307\u4ee3\u7684\u6570\u636e\u5305\u3002\u5426\u5219 skynet \u4f1a\u7528 malloc \u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u628a\u6570\u636e\u590d\u5236\u8fdb\u53bb\u3002callback \u51fd\u6570\u5728\u5904\u7406\u5b8c\u8fd9\u5757\u6570\u636e\u540e\uff0c\u4f1a\u8c03\u7528 free \u91ca\u653e\u5185\u5b58\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8ba9 callback \u8fd4\u56de 1 \uff0c\u963b\u6b62\u6846\u67b6\u91ca\u653e\u5185\u5b58\u3002\u8fd9\u901a\u5e38\u548c\u5728 send \u65f6\u6807\u8bb0 dontcopy \u6807\u8bb0\u914d\u5bf9\u4f7f\u7528\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u60f3\u8c08\u8c08 session \u548c type \u4e24\u4e2a\u53c2\u6570\u3002 session \u662f\u4ec0\u4e48\uff1f \u867d\u7136 skynet \u6838\u5fc3\u53ea\u89e3\u51b3\u5355\u5411\u7684\u6d88\u606f\u5305\u53d1\u9001\u95ee\u9898\uff0c\u6b63\u5982 ip \u534f\u8bae\u53ea\u89e3\u51b3 ip \u5305\u5728\u4e92\u8fde\u7f51\u4e2d\u4ece\u4e00\u4e2a ip \u5730\u5740\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a ip \u5730\u5740\u7684\u95ee\u9898\u3002\u4f46\u662f\uff0c\u6211\u4eec\u7684\u5e94\u7528\u5f88\u5927\u90e8\u5206\u90fd\u9700\u8981\u4f7f\u7528\u8bf7\u6c42\u56de\u5e94\u7684\u6a21\u5f0f\u3002\u5373\uff0c\u4e00\u4e2a\u670d\u52a1\u5411\u53e6\u4e00\u4e2a\u670d\u52a1\u63d0\u51fa\u4e00\u4e2a\u8bf7\u6c42\u5305\uff0c\u5bf9\u65b9\u5904\u7406\u5b8c\u8fd9\u4e2a\u8bf7\u6c42\u540e\uff0c\u628a\u7ed3\u679c\u8fd4\u56de\u3002\u7531\u4e8e\u6bcf\u4e2a\u670d\u52a1\u4ec5\u6709\u4e00\u4e2a callback \u51fd\u6570\uff0c\u597d\u6bd4\u5728 ip \u534f\u8bae\u4e2d\u53bb\u6389\u4e86\u7aef\u53e3\u7684\u8bbe\u5b9a\uff0c\u6240\u6709\u53d1\u9001\u5230\u4e00\u4e2a ip \u5730\u5740\u4e0a\u7684 ip \u5305\u5c31\u65e0\u6cd5\u88ab\u5206\u53d1\u5230\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e86\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6709\u53e6\u4e00\u4e2a\u4e1c\u897f\u6765\u533a\u5206\u8fd9\u4e2a\u5305\u3002\u8fd9\u5c31\u662f session \u7684\u4f5c\u7528\u3002 \u4f7f\u7528 skynet_send \u53d1\u9001\u4e00\u4e2a\u5305\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u5728 type \u91cc\u8bbe\u4e0a alloc session \u7684 tag (PTYPE_TAG_ALLOCSESSION)\u3002send api \u5c31\u4f1a\u5ffd\u7565\u6389\u4f20\u5165\u7684 session \u53c2\u6570\uff0c\u800c\u4f1a\u5206\u914d\u51fa\u4e00\u4e2a\u5f53\u524d\u670d\u52a1\u4ece\u6765\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684 session \u53f7\uff0c\u53d1\u9001\u51fa\u53bb\u3002\u540c\u65f6\u7ea6\u5b9a\uff0c\u63a5\u6536\u65b9\u5728\u5904\u7406\u5b8c\u8fd9\u4e2a\u6d88\u606f\u540e\uff0c\u628a\u8fd9\u4e2a session \u539f\u6837\u53d1\u9001\u56de\u6765\u3002\u8fd9\u6837\uff0c\u7f16\u5199\u670d\u52a1\u7684\u4eba\u53ea\u9700\u8981\u5728 callback \u51fd\u6570\u91cc\u8bb0\u5f55\u4e0b\u6240\u6709\u5f85\u8fd4\u56de\u7684 session \u8868\uff0c\u5c31\u53ef\u4ee5\u5728\u6536\u5230\u6bcf\u4e2a\u6d88\u606f\u540e\uff0c\u6b63\u786e\u7684\u8c03\u7528\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\u3002 type \u7684\u4f5c\u7528","title":"Skynet \u6838\u5fc3\u4e0d\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898"},{"location":"skynet/%E8%AE%BE%E8%AE%A1%E7%BB%BC%E8%BF%B0/#_1","text":"\u867d\u7136\u8bbe\u8ba1\u4e0a\u56f4\u7ed5\u5355\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u6a21\u5757\u8fdb\u884c\u7684\uff0c\u4f46 skynet \u5176\u5b9e\u5e76\u4e0d\u4ec5\u9650\u4e8e\u5355\u8fdb\u7a0b\u3002\u5b83\u5b9e\u9645\u662f\u53ef\u4ee5\u90e8\u7f72\u5230\u4e0d\u540c\u673a\u5668\u4e0a\u8054\u5408\u5de5\u4f5c\u7684\u3002\u8fd9\u867d\u7136\u4e0d\u662f\u6838\u5fc3\u7279\u6027\uff0c\u4f46\u6838\u5fc3\u5c42\u4e3a\u6b64\u505a\u4e86\u8bb8\u591a\u914d\u5408\u3002 \u5355\u4e2a skynet \u8fdb\u7a0b\u5185\u7684\u670d\u52a1\u6570\u91cf\u88ab handle \u6570\u91cf\u9650\u5236\u3002handle \u4e5f\u5c31\u662f\u6bcf\u4e2a\u670d\u52a1\u7684\u5730\u5740\uff0c\u5728\u63a5\u53e3\u4e0a\u770b\u7528\u7684\u662f\u4e00\u4e2a 32 \u4f4d\u6574\u6570\u3002\u4f46\u5b9e\u9645\u4e0a\u5355\u4e2a\u670d\u52a1\u4e2d handle \u7684\u6700\u7ec8\u9650\u5236\u5728 24bit \u5185\uff0c\u4e5f\u5c31\u662f 16M \u4e2a\u3002\u9ad8 8 \u4f4d\u662f\u4fdd\u7559\u7ed9\u96c6\u7fa4\u95f4\u901a\u8baf\u7528\u7684\u3002 \u6211\u4eec\u6700\u7ec8\u5141\u8bb8 255 \u4e2a skynet \u8282\u70b9\u90e8\u7f72\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u534f\u4f5c\u3002\u6bcf\u4e2a skynet \u8282\u70b9\u6709\u4e0d\u540c\u7684 id \u3002\u8fd9\u91cc\u88ab\u79f0\u4e3a harbor id \u3002\u8fd9\u4e2a\u662f\u72ec\u7acb\u6307\u5b9a\uff0c\u4eba\u4e3a\u7ba1\u7406\u5206\u914d\u7684\uff08\u4e5f\u53ef\u4ee5\u5199\u4e00\u4e2a\u4e2d\u592e\u670d\u52a1\u534f\u8c03\u5206\u914d\uff09\u3002\u6bcf\u4e2a\u6d88\u606f\u5305\u4ea7\u751f\u7684\u65f6\u5019\uff0cskynet \u6846\u67b6\u4f1a\u628a\u81ea\u5df1\u7684 harbor id \u7f16\u7801\u5230\u6e90\u5730\u5740\u7684\u9ad8 8 \u4f4d\u3002\u8fd9\u6837\uff0c\u7cfb\u7edf\u5185\u6240\u6709\u7684\u670d\u52a1\u6a21\u5757\uff0c\u90fd\u6709\u4e0d\u540c\u7684\u5730\u5740\u4e86\u3002\u4ece\u6570\u5b57\u5730\u5740\uff0c\u53ef\u4ee5\u8f7b\u6613\u8bc6\u522b\u51fa\uff0c\u8fd9\u4e2a\u6d88\u606f\u662f\u8fdc\u7a0b\u6d88\u606f\uff0c\u8fd8\u662f\u672c\u5730\u6d88\u606f\u3002 \u8fd9\u4e5f\u662f skynet \u6838\u5fc3\u5c42\u505a\u7684\u4e8b\u60c5\uff0c\u6838\u5fc3\u5e76\u4e0d\u89e3\u51b3\u8fdc\u7a0b\u6570\u636e\u4ea4\u4e92\u7684\u5de5\u4f5c\u3002 \u96c6\u7fa4\u95f4\u7684\u901a\u8baf\uff0c\u662f\u7531\u4e00\u4e2a\u72ec\u7acb\u7684 harbor \u670d\u52a1\u6765\u5b8c\u6210\u7684\u3002\u6240\u6709\u7684\u6d88\u606f\u5305\u5728\u53d1\u9001\u65f6\uff0cskynet \u8bc6\u522b\u51fa\u8fd9\u662f\u4e00\u4e2a\u8fdc\u7a0b\u6d88\u606f\u5305\u65f6\uff0c\u90fd\u4f1a\u628a\u5b83\u8f6c\u53d1\u5230 harbor \u670d\u52a1\u5185\u3002harbor \u670d\u52a1\u4f1a\u5efa\u7acb tcp \u8fde\u63a5\u5230\u6240\u6709\u5b83\u8ba4\u8bc6\u7684\u5176\u5b83 skynet \u8282\u70b9\u5185\u7684 harbor \u670d\u52a1\u4e0a\u3002 Harbor \u95f4\u901a\u8fc7\u5355\u5411\u7684 tcp \u8fde\u63a5\u7ba1\u9053\u4f20\u8f93\u6570\u636e\uff0c\u5b8c\u6210\u4e0d\u540c\u7684 skynet \u8282\u70b9\u95f4\u7684\u6570\u636e\u4ea4\u6362\u3002 skynet \u76ee\u524d\u652f\u6301\u4e00\u4e2a\u5168\u5c40\u540d\u5b57\u670d\u52a1\uff0c\u53ef\u4ee5\u628a\u4e00\u4e2a\u6d88\u606f\u5305\u53d1\u9001\u5230\u7279\u5b9a\u540d\u5b57\u7684\u670d\u52a1\u4e0a\u3002\u8fd9\u4e2a\u670d\u52a1\u4e0d\u5fc5\u5b58\u5728\u4e8e\u5f53\u524d skynet \u8282\u70b9\u4e2d\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u673a\u6784\u80fd\u591f\u540c\u6b65\u8fd9\u4e9b\u5168\u5c40\u540d\u5b57\u3002 \u4e3a\u6b64\uff0c\u6211\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a master \u7684\u670d\u52a1\u3002\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u5e7f\u64ad\u540c\u6b65\u6240\u6709\u7684\u5168\u5c40\u540d\u5b57\uff0c\u4ee5\u53ca\u52a0\u5165\u8fdb\u6765\u7684 skynet \u8282\u70b9\u7684\u5730\u5740\u3002\u672c\u8d28\u4e0a\uff0c\u8fd9\u4e9b\u5730\u5740\u4e5f\u662f\u4e00\u79cd\u540d\u5b57\u3002\u540c\u6837\u53ef\u4ee5\u7528 key-value \u7684\u5f62\u5f0f\u50a8\u5b58\u3002\u5373\uff0c\u6bcf\u4e2a skynet \u8282\u70b9\u53f7\u5bf9\u5e94\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002","title":"\u96c6\u7fa4\u95f4\u901a\u8baf"},{"location":"skynet/%E8%AE%BE%E8%AE%A1%E7%BB%BC%E8%BF%B0/#_2","text":"\u5bf9\u4e8e\u6e38\u620f\u670d\u52a1\uff0c\u7ec4\u64ad\u670d\u52a1\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u4f18\u5316\u3002\u5982\u679c\u6ca1\u6709\u7ec4\u64ad\u670d\u52a1\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u7528\u4e00\u4e2a\u5faa\u73af\uff0c\u628a\u4e00\u4e2a\u5305\u53d1\u9001\u7ed9\u4e0d\u540c\u7684\u5730\u5740\u3002\u4f46\u6e38\u620f\u4e2d\u5927\u91cf\u9700\u8981\u628a\u4e00\u6761\u6d88\u606f\u53d1\u9001\u7ed9\u4e0d\u540c\u7684\u5b9e\u4f53\u3002\u5bf9\u4e8e\u4f20\u7edf\u7684\u505a\u6cd5\uff0c\u9700\u8981\u7ec4\u64ad\u7684\u573a\u5408\uff0c\u6211\u4eec\u628a\u6240\u6709\u7684\u5b9e\u4f53\u5b9e\u73b0\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u5185\u3002\u4f46\u662f\uff0c\u5728\u4f7f\u7528 skynet \u65f6\uff0c\u5f80\u5f80\u4e00\u4e2a\u670d\u52a1\u53ea\u5b9e\u73b0\u5c11\u90e8\u5206\u529f\u80fd\uff0c\u5927\u91cf\u4f9d\u8d56\u670d\u52a1\u95f4\u7684\u901a\u8baf\u3002\u8fd9\u6837\uff0c\u4f18\u5316\u8fd9\u4e9b\u7ec4\u64ad\u5305\uff0c\u5c31\u663e\u5f97\u6709\u5fc5\u8981\u4e86\u3002 \u7ec4\u64ad\u5fc5\u987b\u8ba9 skynet \u5728\u5e95\u5c42\u505a\u4e00\u4e9b\u652f\u6301\uff0c\u800c\u5f88\u5168\u90e8\u653e\u5728\u6838\u5fc3\u5c42\u4e4b\u5916\u7684\u5b9e\u73b0\u3002 \u8fd9\u662f\u56e0\u4e3a\uff0c\u7ec4\u64ad\u5305\u7684\u5206\u914d\u548c\u91ca\u653e\u7b56\u7565\u548c\u5176\u5b83\u5305\u4e0d\u540c\u3002\u5b83\u9700\u8981\u6709\u5f15\u7528\u8ba1\u6570\u3002\u548c\u522b\u7684\u6d88\u606f\u5305\uff0c\u53d1\u9001\u65b9\u5206\u914d\uff0c\u63a5\u6536\u65b9\u91ca\u653e\u662f\u4e0d\u540c\u7684\u3002\u56fa\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6d88\u606f\u5305\u7edf\u4e00\u6210\u5168\u90e8\u5e26\u6709\u5f15\u7528\u8ba1\u6570\uff0c\u53ea\u662f\u5355\u64ad\u5305\u8bb0\u6570\u4e3a 1 \u3002\u4f46\u8fd9\u6837\uff0c\u5c31\u727a\u7272\u4e86\u5355\u64ad\u5305\u7684\u6027\u80fd\u3002\u6211\u5e0c\u671b\u7684\u6548\u679c\u662f \uff0c\u5982\u679c\u4f60\u4e0d\u7528\u8fd9\u4e2a\u673a\u5236\uff08\u6bd4\u5982\u7ec4\u64ad\uff09\u5c31\u4e0d\u5fc5\u4e3a\u4e4b\u4ed8\u51fa\u6210\u672c\u3002\u6240\u4ee5\uff0c\u6211\u5728 skynet \u5e95\u5c42\u505a\u4e86\u6709\u9650\u7684\u652f\u6301\u3002 skynet \u4f1a\u8bc6\u522b\u6d88\u606f\u7684 type \u662f\u5426\u4e3a PTYPE_MULTICAST \uff0c\u7136\u540e\u6709\u4e0d\u540c\u7684\u751f\u547d\u671f\u7ba1\u7406\u7b56\u7565\uff0c\u5e76\u628a\u7ec4\u64ad\u5305\u4ea4\u7ed9\u7ec4\u64ad\u670d\u52a1\u5904\u7406\u3002\u8fd9\u4e00\u70b9\uff0c\u548c\u96c6\u7fa4\u95f4\u901a\u8baf\u7684\u505a\u6cd5\u975e\u5e38\u7c7b\u4f3c\u3002 \u7ec4\u64ad\u670d\u52a1\u5e76\u4e0d\u89e3\u51b3\u5206\u719f\u5728\u4e0d\u540c\u96c6\u7fa4\u8282\u70b9\u4e0a\u7684\u670d\u52a1\u5f52\u7ec4\u7684\u95ee\u9898\u3002\u5373\uff0c\u6bcf\u4e2a\u5206\u7ec4\u5185\u7684\u6210\u5458\u90fd\u5fc5\u987b\u5728\u540c\u4e00\u7cfb\u7edf\u8fdb\u7a0b\u5185\u3002\u8fd9\u53ef\u4ee5\u6781\u5927\u7684\u7b80\u5316\u8bbe\u8ba1\u3002\u7528\u6237\u53ef\u4ee5\u8ba9\u4e0d\u540c\u7684\u670d\u52a1 handle \u5f52\u5c5e\u4e00\u4e2a\u7ec4\u53f7\u3002\u5411 skynet \u7d22\u53d6\u8fd9\u4e2a\u7ec4\u53f7\u5bf9\u5e94\u7684 handle \u3002\u5411\u8fd9\u4e2a\u7ec4\u7684 handle \u53d1\u9001\u6d88\u606f\uff0c\u5c31\u7b49\u540c\u4e8e\u5411\u7ec4\u5185\u6240\u6709 handle \u53d1\u9001\u6d88\u606f\u3002 \u800c\u8de8\u96c6\u7fa4\u5206\u7ec4\u53c8\u5982\u4f55\u505a\u5230\u5462\uff1f\u8fd9\u91cc\u662f\u5728\u4e0a\u5c42\u7528 lua \u6765\u505a\u4e86\u8fdb\u4e00\u6b65\u7684\u5c01\u88c5\u3002 \u9996\u5148\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\uff0c\u7528 C \u7f16\u5199\u7684\u670d\u52a1\uff0c\u53eb\u505a tunnel \u3002\u5b83\u53ef\u4ee5\u628a\u53d1\u9001\u7ed9\u5b83\u7684\u6d88\u606f\uff0c\u65e0\u6761\u4ef6\u7684\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a handle \u4e0a\u3002\u8fd9\u4e2a\u8f6c\u53d1 handle \u53ef\u4ee5\u662f\u5728\u4e0d\u540c skynet \u8282\u70b9\u4e0a\u7684\u3002 \u6211\u7528 lua \u7f16\u5199\u4e86\u4e00\u4e2a\u5168\u5c40\u7684\u5206\u7ec4\u7ba1\u7406\u5668\uff0c\u534f\u8c03\u5728\u4e0d\u540c\u8282\u70b9\u4e0a\uff0c\u521b\u5efa\u51fa\u76f8\u540c\u7ec4\u540d\u7684\u5206\u7ec4\u6765\u3002\u7136\u540e\u7528 tunnel \u670d\u52a1\u8fde\u63a5\u4e0d\u540c\u8282\u70b9\u4e0a\u7684\u540c\u4e00\u5206\u7ec4\u5c31\u591f\u4e86\u3002\u5177\u4f53\u7ec6\u8282\u5c31\u4e0d\u5728\u6b64\u8d58\u8ff0\u3002","title":"\u7ec4\u64ad"},{"location":"skynet/%E8%AE%BE%E8%AE%A1%E7%BB%BC%E8%BF%B0/#skynet_2","text":"Skynet \u7ef4\u62a4\u4e86\u4e24\u7ea7\u6d88\u606f\u961f\u5217\u3002 \u6bcf\u4e2a\u670d\u52a1\u5b9e\u4f53\u6709\u4e00\u4e2a\u79c1\u6709\u7684\u6d88\u606f\u961f\u5217\uff0c\u961f\u5217\u4e2d\u662f\u4e00\u4e2a\u4e2a\u53d1\u9001\u7ed9\u5b83\u7684\u6d88\u606f\u3002\u6d88\u606f\u7531\u56db\u90e8\u5206\u6784\u6210\uff1a struct skynet_message { uint32_t source; int session; void * data; size_t sz; }; \u5411\u4e00\u4e2a\u670d\u52a1\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\uff0c\u5c31\u662f\u628a\u8fd9\u6837\u4e00\u4e2a\u6d88\u606f\u4f53\u538b\u5165\u8fd9\u4e2a\u670d\u52a1\u7684\u79c1\u6709\u6d88\u606f\u961f\u5217\u4e2d\u3002\u8fd9\u4e2a\u7ed3\u6784\u7684\u503c\u590d\u5236\u8fdb\u6d88\u606f\u961f\u5217\u7684\uff0c\u4f46\u6d88\u606f\u5185\u5bb9\u672c\u8eab\u4e0d\u505a\u590d\u5236\u3002 Skynet \u7ef4\u62a4\u4e86\u4e00\u4e2a\u5168\u5c40\u6d88\u606f\u961f\u5217\uff0c\u91cc\u9762\u653e\u7684\u662f\u8bf8\u4e2a\u4e0d\u4e3a\u7a7a\u7684\u6b21\u7ea7\u6d88\u606f\u961f\u5217\u3002 \u5728 Skynet \u542f\u52a8\u65f6\uff0c\u5efa\u7acb\u4e86\u82e5\u5e72\u5de5\u4f5c\u7ebf\u7a0b\uff08\u6570\u91cf\u53ef\u914d\u7f6e\uff09\uff0c\u5b83\u4eec\u4e0d\u65ad\u7684\u4ece\u4e3b\u6d88\u606f\u5217\u961f\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6b21\u7ea7\u6d88\u606f\u961f\u5217\u6765\uff0c\u518d\u4ece\u6b21\u7ea7\u961f\u5217\u4e2d\u53d6\u53bb\u4e00\u6761\u6d88\u606f\uff0c\u8c03\u7528\u5bf9\u5e94\u7684\u670d\u52a1\u7684 callback \u51fd\u6570\u8fdb\u884c\u51fa\u6765\u3002\u4e3a\u4e86\u8c03\u7528\u516c\u5e73\uff0c\u4e00\u6b21\u4ec5\u5904\u7406\u4e00\u6761\u6d88\u606f\uff0c\u800c\u4e0d\u662f\u8017\u51c0\u6240\u6709\u6d88\u606f\uff08\u867d\u7136\u90a3\u6837\u7684\u5c40\u90e8\u6548\u7387\u66f4\u9ad8\uff0c\u56e0\u4e3a\u51cf\u5c11\u4e86\u67e5\u8be2\u670d\u52a1\u5b9e\u4f53\u7684\u6b21\u6570\uff0c\u4ee5\u53ca\u4e3b\u6d88\u606f\u961f\u5217\u8fdb\u51fa\u7684\u6b21\u6570\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u6ca1\u6709\u670d\u52a1\u4f1a\u88ab\u997f\u6b7b\u3002 \u7528\u6237\u5b9a\u4e49\u7684 callback \u51fd\u6570\u4e0d\u5fc5\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u56e0\u4e3a\u5728 callback \u51fd\u6570\u88ab\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5176\u5b83\u5de5\u4f5c\u7ebf\u7a0b\u6ca1\u6709\u53ef\u80fd\u83b7\u5f97\u8fd9\u4e2a callback \u51fd\u6570\u6240\u5c5e\u670d\u52a1\u7684\u6b21\u7ea7\u6d88\u606f\u961f\u5217\uff0c\u4e5f\u5c31\u4e0d\u53ef\u80fd\u88ab\u5e76\u53d1\u4e86\u3002\u4e00\u65e6\u4e00\u4e2a\u670d\u52a1\u7684\u6d88\u606f\u961f\u5217\u6682\u65f6\u4e3a\u7a7a\uff0c\u5b83\u7684\u6d88\u606f\u961f\u5217\u5c31\u4e0d\u518d\u88ab\u653e\u56de\u5168\u5c40\u6d88\u606f\u961f\u5217\u4e86\u3002\u8fd9\u6837\u4f7f\u5927\u90e8\u5206\u4e0d\u5de5\u4f5c\u7684\u670d\u52a1\u4e0d\u4f1a\u7a7a\u8f6c CPU \u3002 btw\uff0c\u5728\u505a\u8fd9\u90e8\u5206\u4ee3\u7801\u5b9e\u73b0\u65f6\uff0c\u6211\u66fe\u7ecf\u9047\u5230\u8fc7\u4e00\u4e9b\u5e76\u53d1\u5f15\u8d77\u7684 bug \uff0c\u597d\u5728\u6700\u7ec8\u90fd\u89e3\u51b3\u4e86\u3002\u8fd9\u6216\u8bb8\u662f\u6574\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u5e76\u53d1\u95ee\u9898\u6700\u590d\u6742\u7684\u90e8\u5206\uff0c\u4f46\u4e5f\u4ec5\u4ec5\u662f\u8fd9\u4e00\u5c0f\u90e8\u5206\u4e86\u3002\u4e0d\u4f1a\u8ba9\u5e76\u53d1\u7684\u590d\u6742\u6027\u8513\u5ef6\u51fa\u53bb\u3002","title":"skynet \u7684\u6d88\u606f\u8c03\u5ea6"},{"location":"skynet/%E8%AE%BE%E8%AE%A1%E7%BB%BC%E8%BF%B0/#gate-connection","text":"\u5916\u754c\u901a\u8baf\u6709\u4e24\u79cd\uff0c\u4e00\u662f\u6e38\u620f\u5ba2\u4e92\u7aef\u4f7f\u7528 TCP \u8fde\u63a5\u63a5\u5165 skynet \u8282\u70b9\u3002 \u53e6\u4e00\u4e2a\u662f\u7b2c\u4e09\u65b9\u7684\u670d\u52a1\uff0c\u6bd4\u5982\u6570\u636e\u5e93\u670d\u52a1\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a TCP \u8fde\u63a5\u3002\u4f60\u9700\u8981\u4ece skynet \u5185\u90e8\u5efa\u7acb\u4e00\u4e2a TCP \u8fde\u63a5\u51fa\u53bb\u4f7f\u7528\u3002 \u524d\u8005\uff0c\u6211\u79f0\u4e3a gate \u670d\u52a1\u3002\u5b83\u7684\u7279\u5f81\u662f\u76d1\u542c\u4e00\u4e2a TCP \u7aef\u53e3\uff0c\u63a5\u53d7\u8fde\u5165\u7684 TCP \u8fde\u63a5\uff0c\u5e76\u628a\u8fde\u63a5\u4e0a\u83b7\u5f97\u7684\u6570\u636e\u8f6c\u53d1\u5230 skynet \u5185\u90e8\u3002Gate \u53ef\u4ee5\u7528\u6765\u6d88\u9664\u5916\u90e8\u6570\u636e\u5305\u548c skynet \u5185\u90e8\u6d88\u606f\u5305\u7684\u4e0d\u4e00\u81f4\u6027\u3002\u5916\u90e8 TCP \u6d41\u7684\u5206\u5305\u95ee\u9898\uff0c\u662f Gate \u5b9e\u73b0\u4e0a\u7684\u7ea6\u5b9a\u3002 Gate \u4f1a\u63a5\u53d7\u5916\u90e8\u8fde\u63a5\uff0c\u5e76\u628a\u8fde\u63a5\u76f8\u5173\u4fe1\u606f\u8f6c\u53d1\u7ed9\u53e6\u4e00\u4e2a\u670d\u52a1\u53bb\u5904\u7406\u3002\u5b83\u81ea\u5df1\u4e0d\u505a\u6570\u636e\u5904\u7406\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4fdd\u6301 gate \u5b9e\u73b0\u7684\u7b80\u6d01\u9ad8\u6548\u3002C \u8bed\u8a00\u8db3\u4ee5\u80dc\u4efb\u8fd9\u9879\u5de5\u4f5c\u3002\u800c\u5305\u5904\u7406\u5de5\u4f5c\u5219\u548c\u4e1a\u52a1\u903b\u8f91\u7cbe\u5bc6\u76f8\u5173\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 Lua \u5b8c\u6210\u3002 \u5916\u90e8\u4fe1\u606f\u5206\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u8fde\u63a5\u672c\u8eab\u7684\u63a5\u5165\u548c\u65ad\u5f00\u6d88\u606f\uff0c\u53e6\u4e00\u7c7b\u662f\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u5305\u3002\u4e00\u5f00\u59cb\uff0cGate \u65e0\u6761\u4ef6\u8f6c\u53d1\u8fd9\u4e24\u7c7b\u6d88\u606f\u5230\u540c\u4e00\u4e2a\u5904\u7406\u670d\u52a1\u3002\u4f46\u5bf9\u4e8e\u8fde\u63a5\u6570\u636e\u5305\uff0c\u6dfb\u52a0\u4e00\u4e2a\u5305\u5934\u65e0\u7591\u6709\u6027\u80fd\u4e0a\u7684\u5f00\u9500\u3002\u6240\u4ee5 Gate \u8fd8\u63a5\u6536\u53e6\u4e00\u79cd\u5de5\u4f5c\u6a21\u5f0f\uff1a\u628a\u6bcf\u4e2a\u4e0d\u540c\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u5305\u8f6c\u53d1\u7ed9\u4e0d\u540c\u7684\u72ec\u7acb\u670d\u52a1\u4e0a\u3002\u6bcf\u4e2a\u72ec\u7acb\u670d\u52a1\u5904\u7406\u5355\u4e00\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u5305\u3002 \u6216\u8005\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u628a\u4e0d\u540c\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u5305\u4ece\u63a7\u5236\u4fe1\u606f\u5305\uff08\u5efa\u7acb/\u65ad\u5f00\u8fde\u63a5\uff09\u4e2d\u5206\u79bb\u5f00\uff0c\u4f46\u4e0d\u533a\u5206\u4e0d\u540c\u8fde\u63a5\u800c\u8f6c\u53d1\u7ed9\u540c\u4e00\u6570\u636e\u5904\u7406\u670d\u52a1\uff08\u5bf9\u6570\u636e\u6765\u6e90\u4e0d\u654f\u611f\uff0c\u53ea\u5bf9\u6570\u636e\u5185\u5bb9\u654f\u611f\u7684\u573a\u5408\uff09\u3002 \u8fd9\u4e09\u79cd\u6a21\u5f0f\uff0c\u6211\u5206\u522b\u79f0\u4e3a watchdog \u6a21\u5f0f\uff0c\u7531 gate \u52a0\u4e0a\u5305\u5934\uff0c\u540c\u65f6\u5904\u7406\u63a7\u5236\u4fe1\u606f\u548c\u6570\u636e\u4fe1\u606f\u7684\u6240\u6709\u6570\u636e\uff1bagent \u6a21\u5f0f\uff0c\u8ba9\u6bcf\u4e2a agent \u5904\u7406\u72ec\u7acb\u8fde\u63a5\uff1b\u4ee5\u53ca broker \u6a21\u5f0f\uff0c\u7531\u4e00\u4e2a broker \u670d\u52a1\u5904\u7406\u4e0d\u540c\u8fde\u63a5\u4e0a\u7684\u6240\u6709\u6570\u636e\u5305\u3002\u65e0\u8bba\u662f\u54ea\u79cd\u6a21\u5f0f\uff0c\u63a7\u5236\u4fe1\u606f\u90fd\u662f\u4ea4\u7ed9 watchdog \u53bb\u5904\u7406\u7684\uff0c\u800c\u6570\u636e\u5305\u5982\u679c\u4e0d\u53d1\u7ed9 watchdog \u800c\u662f\u53d1\u9001\u7ed9 agent \u6216 broker \u7684\u8bdd\uff0c\u5219\u4e0d\u4f1a\u6709\u989d\u5916\u7684\u6570\u636e\u5934\uff08\u4e5f\u51cf\u5c11\u4e86\u6570\u636e\u62f7\u8d1d\uff09\u3002\u8bc6\u522b\u8fd9\u4e9b\u5305\u662f\u4ece\u5916\u90e8\u53d1\u9001\u8fdb\u6765\u7684\u65b9\u6cd5\u662f\u68c0\u67e5\u6d88\u606f\u5305\u7684\u7c7b\u578b\u662f\u5426\u4e3a PTYPE_CLIENT \u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9a\u5236\u6d88\u606f\u7c7b\u578b\u8ba9 gate \u901a\u77e5\u4f60\u3002 \u53e6\u4e00\u4e2a\u91cd\u8981\u7ec4\u4ef6\u53eb Connection \u3002\u5b83\u548c Gate \u4e0d\u540c\uff0c\u5b83\u8d1f\u8d23\u4ece skynet \u5185\u90e8\u5efa\u7acb socket \u5230\u5916\u90e8\u670d\u52a1\u3002 Connection \u5206\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u7528\u4e8e\u76d1\u542c\u4e0d\u540c\u7684\u7cfb\u7edf fd \u7684\u53ef\u8bfb\u72b6\u6001\uff0c\u8fd9\u662f\u7528 epoll \u5b9e\u73b0\u7684\u3002\u5982\u679c\u5728\u6ca1\u6709 epoll \u652f\u6301\u7684\u73af\u5883\uff08\u6bd4\u5982 freebsd \u4e0b\uff09\uff0c\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u5b9e\u73b0\u4e00\u4e2a\u66ff\u4ee3\u54c1\u3002\u5b83\u6536\u5230\u8fd9\u4e2a\u8fde\u63a5\u4e0a\u7684\u6570\u636e\u540e\uff0c\u4f1a\u628a\u6240\u6709\u6570\u636e\u4e0d\u505a\u4efb\u4f55\u5206\u5305\uff0c\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u670d\u52a1\u91cc\u53bb\u5904\u7406\u3002\u8fd9\u548c gate \u7684\u884c\u4e3a\u4e0d\u592a\u4e00\u81f4\uff0c\u8fd9\u662f\u56e0\u4e3a connection \u591a\u7528\u4e8e\u4f7f\u7528\u5916\u90e8\u7b2c\u4e09\u65b9\u6570\u636e\u5e93\uff0c\u6211\u4eec\u5f88\u96be\u7edf\u4e00\u5176\u5206\u5305\u7684\u683c\u5f0f\u3002","title":"Gate \u548c Connection"},{"location":"tools/Windows%E4%B8%8B%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/","text":"\u5728windows\u4e0b\uff0c\u6709\u65f6\u5019\u4f1a\u78b0\u5230\u4e00\u4e9b\u6587\u4ef6\u65e0\u6cd5\u5220\u9664\uff0c\u5c3d\u91cf\u4f7f\u7528\u201c\u7ba1\u7406\u5458\u53d6\u5f97\u6240\u6709\u6743\u201d \uff0c\u4f46\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u4f9d\u7136\u65e0\u6cd5\u5220\u9664\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u82e6\u607c\u3002 \u672c\u6587\u8bb0\u5f55\u51e0\u6b3e\u53ef\u4ee5\u89e3\u9501\u6587\u4ef6\u5360\u7528\u7684\u8f6f\u4ef6\u3002 LockHunter \u00b6 \u63a8\u8350\u6b64\u8f6f\u4ef6\uff1aLockHunter - \u53f3\u952e\u89e3\u9501\u5f3a\u5236\u5220\u9664\u987d\u56fa\u6587\u4ef6(\u5939)\uff0c\u5e76\u53ef\u67e5\u770b\u5360\u7528\u9501\u4f4f\u6587\u4ef6\u7684\u8f6f\u4ef6\u8fdb\u7a0b \u4ecb\u7ecd\uff1a http://www.iplaysoft.com/lockhunter.html \u5b98\u7f51\u4e0b\u8f7d\uff1a http://www.lockhunter.com/download.htm Handle \u00b6 https://technet.microsoft.com/en-us/sysinternals/handle IObit Unlocker \u00b6 IObit Unlocker - \u514d\u8d39\u5b9e\u7528\u7684\u6587\u4ef6/\u5939\u5f3a\u5236\u89e3\u9501\u5220\u9664\u5de5\u5177 (\u89e3\u51b3\u6587\u4ef6\u88ab\u5360\u7528\u65e0\u6cd5\u5220\u9664/\u79fb\u52a8\u7684\u95ee\u9898) http://www.iplaysoft.com/iobit-unlocker.html?spm=a2c6h.12873639.0.0.590c7adbzw2OE6 Unlocker \u00b6 \u867d\u7136\u662f\u8001\u724c\u8f6f\u4ef6\uff0c\u4e2a\u4eba\u5728windows7\u548cwindows 8 ,windows 10\u4e0b\u7684\u4f7f\u7528\u611f\u53d7\u662f\u7ecf\u5e38\u662f\u65e0\u6cd5\u89e3\u9501\u6587\u4ef6\uff0c\u4e5f\u65e0\u6cd5\u5220\u9664\u4e00\u4e9b\u88ab\u5360\u7528\u7684\u6587\u4ef6\u3002\u6240\u4ee5\u4e0d\u63a8\u8350\u6b64\u5de5\u5177","title":"Windows\u4e0b\u5f3a\u5236\u5220\u9664\u6587\u4ef6\u6216\u6587\u4ef6\u5939"},{"location":"tools/Windows%E4%B8%8B%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/#lockhunter","text":"\u63a8\u8350\u6b64\u8f6f\u4ef6\uff1aLockHunter - \u53f3\u952e\u89e3\u9501\u5f3a\u5236\u5220\u9664\u987d\u56fa\u6587\u4ef6(\u5939)\uff0c\u5e76\u53ef\u67e5\u770b\u5360\u7528\u9501\u4f4f\u6587\u4ef6\u7684\u8f6f\u4ef6\u8fdb\u7a0b \u4ecb\u7ecd\uff1a http://www.iplaysoft.com/lockhunter.html \u5b98\u7f51\u4e0b\u8f7d\uff1a http://www.lockhunter.com/download.htm","title":"LockHunter"},{"location":"tools/Windows%E4%B8%8B%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/#handle","text":"https://technet.microsoft.com/en-us/sysinternals/handle","title":"Handle"},{"location":"tools/Windows%E4%B8%8B%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/#iobit-unlocker","text":"IObit Unlocker - \u514d\u8d39\u5b9e\u7528\u7684\u6587\u4ef6/\u5939\u5f3a\u5236\u89e3\u9501\u5220\u9664\u5de5\u5177 (\u89e3\u51b3\u6587\u4ef6\u88ab\u5360\u7528\u65e0\u6cd5\u5220\u9664/\u79fb\u52a8\u7684\u95ee\u9898) http://www.iplaysoft.com/iobit-unlocker.html?spm=a2c6h.12873639.0.0.590c7adbzw2OE6","title":"IObit Unlocker"},{"location":"tools/Windows%E4%B8%8B%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/#unlocker","text":"\u867d\u7136\u662f\u8001\u724c\u8f6f\u4ef6\uff0c\u4e2a\u4eba\u5728windows7\u548cwindows 8 ,windows 10\u4e0b\u7684\u4f7f\u7528\u611f\u53d7\u662f\u7ecf\u5e38\u662f\u65e0\u6cd5\u89e3\u9501\u6587\u4ef6\uff0c\u4e5f\u65e0\u6cd5\u5220\u9664\u4e00\u4e9b\u88ab\u5360\u7528\u7684\u6587\u4ef6\u3002\u6240\u4ee5\u4e0d\u63a8\u8350\u6b64\u5de5\u5177","title":"Unlocker"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","text":"\u6587\u4ef6\u548c\u76ee\u5f55\u76f8\u5173\u7684\u547d\u4ee4 \u00b6 \u683c\u5f0f\uff1a \u547d\u4ee4\u540d [\u9009\u9879] [\u53c2\u6570] \u3010pwd\u3011 \u4f5c\u7528: \u7528\u4e8e\u663e\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u8def\u5f84\uff08\u5f53\u524d\u5de5\u4f5c\u6587\u4ef6\u5939\uff09 \u3010ls\u3011 \u4f5c\u7528\uff1a\u663e\u793a\u6307\u5b9a\u76ee\u5f55\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u5e38\u7528\u9009\u9879\uff1a -l \u5217\u8868\u663e\u793a\u6587\u4ef6\u7684 \u8be6\u7ec6\u4fe1\u606f -a \u663e\u793a\u5168\u90e8\u6587\u4ef6 /\u6587\u4ef6\u5939 \u793a\u4f8b\uff1als -l core -rw------- 1 tarena tarena 5943296 7\u670828 2017 core \u6587\u4ef6\u6743\u9650 \u5c5e\u4e3b \u5c5e\u7ec4 \u6587\u4ef6\u5927\u5c0f\uff08\u5b57\u8282\uff09 \u4fee\u6539\u65e5\u671f \u6587\u4ef6\u540d \u3010cd\u3011 \u4f5c\u7528\uff1a\u6539\u53d8\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\uff08\u8fdb\u5165\u67d0\u4e2a\u6587\u4ef6\u5939\uff09 \u683c\u5f0f\uff1a cd \u76ee\u5f55\u540d \u793a\u4f8b\uff1a cd /home/tarena \u8fdb\u5165\u5230/home/tarena\u6587\u4ef6\u5939 cd / \u8fdb\u5165\u5230\u6839\u76ee\u5f55\u4e0b cd \u8fd4\u56de\u5230\u7528\u6237\u7ec4\u76ee\u5f55 cd .. \u8fd4\u56de\u4e0a\u4e00\u7ea7\u76ee\u5f55 cd ~ \u8fd4\u56de\u5230\u7528\u6237\u7ec4\u76ee\u5f55\uff08\u540ccd\uff09 \u3010mkdir\u3011 \u4f5c\u7528\uff1a\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5939 \u3010rmdir\u3011 \u4f5c\u7528\uff1a\u5220\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5939 \u8bf4\u660e\uff1a\u6587\u4ef6\u5939\u5185\u5fc5\u987b\u4e3a\u7a7a \u3010touch\u3011 \u4f5c\u7528\uff1a 1/ \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u7a7a\u6587\u4ef6 2/ \u5982\u679c\u6587\u4ef6\u6216\u76ee\u5f55\u5b58\u5728\uff0c\u5219\u7528\u7cfb\u7edf\u65f6\u95f4\u66f4\u65b0\u5b83\u7684\u4fee\u6539\u65f6\u95f4 \u683c\u5f0f\uff1a touch \u6587\u4ef6\u540d \u793a\u4f8b\uff1a touch newfile \u3010rm\u3011 \u4f5c\u7528\uff1a\u5220\u9664\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u5e38\u7528\u9009\u9879\uff1a -r \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939\u5185\u90e8\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939 -i \u5220\u9664\u524d\u7ed9\u51fa\u63d0\u793a -f \u5f3a\u5236\u5220\u9664\uff0c\u4e0d\u7ed9\u51fa\u4efb\u4f55\u63d0\u793a \u793a\u4f8b\uff1a rm newfile \u3010tree\u3011 \u4f5c\u7528\uff1a\u663e\u793a\u4e00\u4e2a\u6587\u4ef6\u5939\u7684\u7ed3\u6784 \u683c\u5f0f\uff1atree [\u6587\u4ef6\u5939] \u3010help\u3011\u5e2e\u52a9\u9009\u9879\uff1a \u683c\u5f0f: \u547d\u4ee4 --help \u4f8b\uff1als --help \u3010man\u3011\u547d\u4ee4\u5e2e\u52a9 \u683c\u5f0f\uff1aman \u547d\u4ee4 \u4f5c\u7528\uff1a\u67e5\u770b\u547d\u4ee4\u6240\u5bf9\u5e94\u7684\u5e2e\u52a9\u6587\u6863 Linux\u4e0b\u7684\u8def\u5f84 \u00b6 \u6839\uff08root\uff09 / \u8def\u5f84\u5206\u4e24\u79cd\uff1a \u7edd\u5bf9\u8def\u5f84\uff1a\u4ee5\u2018/\u2019\u5b57\u7b26\u5f00\u5934\u7684\u8def\u5f84 \u76f8\u5bf9\u8def\u5f84\uff1a\u4e0d\u4ee5\u2018/\u2019\u5b57\u7b26\u5f00\u5934\u7684\u8def\u5f84 \u5f00\u59cb\u7b26\u53f7\uff1a \u6587\u4ef6/\u6587\u4ef6\u5939\u540d\u79f0 .\u5f53\u524d\u6587\u4ef6\u5939\uff08\u76ee\u5f55\uff09 ..\u4e0a\u4e00\u7ea7\u6587\u4ef6\u5939\uff08\u76ee\u5f55\uff09 ~\u7528\u6237\u4e3b\u76ee\u5f55\uff08\u5bb6\u76ee\u5f55\uff09 \u901a\u914d\u7b26 \u00b6 \u200b *\u4ee3\u88680\u4e2a\uff0c1\u4e2a\u6216\u591a\u4e2a\u4efb\u610f\u5b57\u7b26 \u200b \uff1f\u4ee3\u88681\u4e2a\u4efb\u610f\u5b57\u7b26 \u793a\u4f8b\uff1a touch a ab ac abc aabb bc cd ls a* ls *c rm a*b ls ?? \u663e\u793a\u53ea\u6709\u4e24\u4e2a\u5b57\u7b26\u6784\u6210\u7684\u6587\u4ef6 ls a?? \u6587\u4ef6\u7ba1\u7406\u547d\u4ee4 \u00b6 \u3010cp\u3011 \u4f5c\u7528\uff1a\u590d\u5236\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u683c\u5f0f\uff1acp [\u9009\u9879] \u6e90\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u76ee\u6807\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u793a\u4f8b\uff1a cp a.txt ~/b.txt cp -a /home/tarena/yiouejv ~/ \u5e38\u7528\u9009\u9879\uff1a -a \u53ef\u4ee5\u590d\u5236\u6587\u4ef6\u5939\u53ca\u5176\u5185\u90e8\u7684\u5168\u90e8\u5185\u5bb9 \u3010mv\u3011 \u4f5c\u7528\uff1a\u6587\u4ef6\u642c\u79fb\u6216\u66f4\u540d \u683c\u5f0f\uff1a\u6e90\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u76ee\u6807\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u793a\u4f8b\uff1a mv a.txt b.txt mv a.txt /home/tarena \u3010find\u3011 \u4f5c\u7528\uff1a\u6839\u636e\u6587\u4ef6\u540d\u7b49\u4fe1\u606f\u67e5\u627e\u6307\u5b9a\u7684\u6587\u4ef6\u7684\u4f4d\u7f6e\uff08\u8def\u5f84\uff09 \u683c\u5f0f\uff1afind \u8def\u5f84 -name \u6587\u4ef6\u540d \u793a\u4f8b\uff1a #\u67e5\u627e\u6587\u4ef6 passwd find /etc -name 'password' \u5728etc\u6587\u4ef6\u5939\u4e0b\u67e5\u627e\u6ca1\u6709\u6ca1passwd\u8fd9\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u6709\u5219\u5217\u51fa\u6765 \u3010grep\u3011 \u4f5c\u7528\uff1a\u67e5\u627e\u6587\u4ef6\u4e2d\u76f8\u5e94\u7684\u5185\u5bb9\uff0c\u53ca\u6587\u672c\u4fe1\u606f \u683c\u5f0f\uff1a grep \"\u5185\u5bb9\" [\u9009\u9879] \u6587\u4ef6\u540d\u6216\u8def\u5f84 \u5e38\u7528\u9009\u9879\uff1a -n \u663e\u793a\u884c\u53f7 -r \u9012\u5f52\u641c\u7d22\u6587\u4ef6\u5939\u5185\u7684\u6587\u4ef6 \u538b\u7f29\u89e3\u538b\u7f29\u7684\u547d\u4ee4 \u00b6 \u3010gzip\u3011 \u4f5c\u7528\uff1a\u7528zip\u538b\u7f29\u7b97\u6cd5\u5bf9\u6587\u4ef6\u8fdb\u884c\u538b\u7f29\uff0c\u751f\u6210\u538b\u7f29\u540e\u7684.gz\u6587\u4ef6 \u683c\u5f0f\uff1agzip \u6587\u4ef6\u540d \u3010gunzip\u3011 \u4f5c\u7528\uff1a\u5bf9\u7528zip\u538b\u7f29\u7684.gz\u6587\u4ef6\u8fdb\u884c\u89e3\u538b\u7f29 \u683c\u5f0f\uff1agunzip \u6587\u4ef6\u540d \u6253\u5305\u89e3\u5305\u7684\u547d\u4ee4 \u00b6 \u3010tar\u3011 \u4f5c\u7528\uff1a\u5bf9\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u8fdb\u884c\u6253\u5305\u6216\u89e3\u5305\u64cd\u4f5c \u683c\u5f0f\uff1a tar [\u9009\u9879] \u6587\u4ef6\u540d [\u6587\u4ef6\u540d\u6216\u8def\u5f84] \u5e38\u7528\u9009\u9879\uff1a -c \u521b\u5efa\u5305 -x \u89e3\u5305 -f \u6587\u4ef6\u540d \u64cd\u4f5c\u7684\u6587\u4ef6\u540d -v \u663e\u793a\u64cd\u4f5c\u7684\u6587\u4ef6\u7ec6\u8282 -z \u7528gzip\u6216gunzip\u5bf9\u5305\u8fdb\u884c\u538b\u7f29\u548c\u52a0\u538b\u7f29 \u793a\u4f8b\uff1a \u6253\u5305\uff1a tar czvf a.tar.gz [\u539f\u6587\u4ef6\u8def\u5f84] \u89e3\u5305\uff1a tar xzvf a.tar.gz Linux\u5e38\u7528\u547d\u4ee4 \u00b6 ifconfig \u00b6 \u67e5\u770bip\u5730\u5740\u548cMAC\u5730\u5740 ping \u00b6 \u6d4b\u8bd5\u7f51\u7edc\u7684\u8fde\u901a\u6027\uff1aping ip\u5730\u5740 -c \u6b21\u6570 top \u00b6 Lniux\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668\uff0c\u80fd\u591f\u52a8\u6001\u7684\u663e\u793a\u5f53\u524d\u6240\u6709\u8fdb\u7a0bCPU\u4ee5\u53ca\u5185\u5b58\u7684\u4f7f\u7528\u7387\uff0cq\u9000\u51fa ps \u00b6 ps -aux \u663e\u793a\u7cfb\u7edf\u8fdb\u7a0b\uff08PID\u53f7\uff09 ps -aux | grep \"mysql\" df \u00b6 df -h \u67e5\u770b\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5 ls \u00b6 ls -lh \u6587\u4ef6\u540d l\u8868\u8fbe\u957f\u683c\u5f0f\uff0ch\u63d0\u4f9b\u6613\u8bfb\u5355\u4f4d chmod \u00b6 \u4fee\u6539\u6587\u4ef6\u6743\u9650 chomd +x \u6587\u4ef6\u540d \u6dfb\u52a0\u53ef\u6267\u884c\u6743\u9650 chomd 644 \u6587\u4ef6\u540d rw-r--r-- r: 4 w: 2 x: 1 wc \u00b6 wc -l : \u7edf\u8ba1\u6587\u4ef6\u7684\u884c\u6570 wc -l /etc/passwd: \u7edf\u8ba1\u5f53\u524dLinux\u7cfb\u7edf\u7531\u591a\u5c11\u7528\u6237 sort \u00b6 \u6392\u5e8f\uff0c\u5bf9\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u6392\u5e8f sort ip.txt uniq -c \u00b6 \u53bb\u9664\u91cd\u590d\u7684\u884c\u5e76\u7edf\u8ba1\u6bcf\u884c\u51fa\u73b0\u7684\u6b21\u6570\uff08\u53ea\u80fd\u53bb\u9664\u76f8\u90bb\u884c\uff09 \u7528\u6cd5\uff1asort\u6587\u4ef6\u540d | uniq -c find \u00b6 \u6839\u636e\u6307\u5b9a\u7684\u6761\u4ef6\u6765\u67e5\u627e\u6587\u4ef6\u6216\u76ee\u5f55 -name : \u6839\u636e\u6587\u4ef6\u540d\u67e5\u627e find \u8def\u5f84 -name \u6587\u4ef6\u540d -iname \u4e0d\u533a\u5206\u5927\u5c0f\u5199 \u67e5\u627e~/spider\u76ee\u5f55\u4e0b\u7684\u6240\u6709.py\u6587\u4ef6 find ~/spider -name \"*.py\" -type\uff1a\u6839\u636e\u7c7b\u578b\u67e5\u627e(\u6587\u4ef6|\u76ee\u5f55) -f: \u6587\u4ef6 -d: \u76ee\u5f55 -l: \u94fe\u63a5(link\u5feb\u6377\u65b9\u5f0f) \u67e5\u627e\u4e3b\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u76ee\u5f55 -size: \u6309\u5927\u5c0f\u67e5\u627e + \u5927\u4e8e...\u6587\u4ef6/\u76ee\u5f55 - \u5927\u4e8e...\u6587\u4ef6/\u76ee\u5f55 \u67e5\u627e/home/tarena/software \u5927\u4e8e20M\u7684\u6587\u4ef6 find ~/software -size +20M -type f -ctime \u6839\u636e\u65f6\u95f4\u67e5\u627e ctime + 1: \u8868\u793a\u4e00\u5929\u4ee5\u524d\u7684\u6587\u4ef6\u6216\u76ee\u5f55 \u67e5\u627e~/spider\u4e0b\u4e00\u5929\u4ee5\u5185\u7684\u6587\u4ef6 find ~/spider -ctime -1 -type f \u5904\u7406\u52a8\u4f5c find ... -exec Linux\u547d\u4ee4{} \\; \u67e5\u627e\u4e00\u5929\u4ee5\u5185\u7684\u4ee5.doc\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5220\u9664 find / -name *.doc -ctime -1 -type f -exec rm -rf {} \\; du \u00b6 du -sh \u663e\u793a\u5f53\u524d\u76ee\u5f55\u5927\u5c0f","title":"linux \u64cd\u4f5c\u7cfb\u7edf"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_1","text":"\u683c\u5f0f\uff1a \u547d\u4ee4\u540d [\u9009\u9879] [\u53c2\u6570] \u3010pwd\u3011 \u4f5c\u7528: \u7528\u4e8e\u663e\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u8def\u5f84\uff08\u5f53\u524d\u5de5\u4f5c\u6587\u4ef6\u5939\uff09 \u3010ls\u3011 \u4f5c\u7528\uff1a\u663e\u793a\u6307\u5b9a\u76ee\u5f55\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u5e38\u7528\u9009\u9879\uff1a -l \u5217\u8868\u663e\u793a\u6587\u4ef6\u7684 \u8be6\u7ec6\u4fe1\u606f -a \u663e\u793a\u5168\u90e8\u6587\u4ef6 /\u6587\u4ef6\u5939 \u793a\u4f8b\uff1als -l core -rw------- 1 tarena tarena 5943296 7\u670828 2017 core \u6587\u4ef6\u6743\u9650 \u5c5e\u4e3b \u5c5e\u7ec4 \u6587\u4ef6\u5927\u5c0f\uff08\u5b57\u8282\uff09 \u4fee\u6539\u65e5\u671f \u6587\u4ef6\u540d \u3010cd\u3011 \u4f5c\u7528\uff1a\u6539\u53d8\u5f53\u524d\u7684\u5de5\u4f5c\u76ee\u5f55\uff08\u8fdb\u5165\u67d0\u4e2a\u6587\u4ef6\u5939\uff09 \u683c\u5f0f\uff1a cd \u76ee\u5f55\u540d \u793a\u4f8b\uff1a cd /home/tarena \u8fdb\u5165\u5230/home/tarena\u6587\u4ef6\u5939 cd / \u8fdb\u5165\u5230\u6839\u76ee\u5f55\u4e0b cd \u8fd4\u56de\u5230\u7528\u6237\u7ec4\u76ee\u5f55 cd .. \u8fd4\u56de\u4e0a\u4e00\u7ea7\u76ee\u5f55 cd ~ \u8fd4\u56de\u5230\u7528\u6237\u7ec4\u76ee\u5f55\uff08\u540ccd\uff09 \u3010mkdir\u3011 \u4f5c\u7528\uff1a\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5939 \u3010rmdir\u3011 \u4f5c\u7528\uff1a\u5220\u9664\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5939 \u8bf4\u660e\uff1a\u6587\u4ef6\u5939\u5185\u5fc5\u987b\u4e3a\u7a7a \u3010touch\u3011 \u4f5c\u7528\uff1a 1/ \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u7a7a\u6587\u4ef6 2/ \u5982\u679c\u6587\u4ef6\u6216\u76ee\u5f55\u5b58\u5728\uff0c\u5219\u7528\u7cfb\u7edf\u65f6\u95f4\u66f4\u65b0\u5b83\u7684\u4fee\u6539\u65f6\u95f4 \u683c\u5f0f\uff1a touch \u6587\u4ef6\u540d \u793a\u4f8b\uff1a touch newfile \u3010rm\u3011 \u4f5c\u7528\uff1a\u5220\u9664\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u5e38\u7528\u9009\u9879\uff1a -r \u9012\u5f52\u5220\u9664\u6587\u4ef6\u5939\u5185\u90e8\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939 -i \u5220\u9664\u524d\u7ed9\u51fa\u63d0\u793a -f \u5f3a\u5236\u5220\u9664\uff0c\u4e0d\u7ed9\u51fa\u4efb\u4f55\u63d0\u793a \u793a\u4f8b\uff1a rm newfile \u3010tree\u3011 \u4f5c\u7528\uff1a\u663e\u793a\u4e00\u4e2a\u6587\u4ef6\u5939\u7684\u7ed3\u6784 \u683c\u5f0f\uff1atree [\u6587\u4ef6\u5939] \u3010help\u3011\u5e2e\u52a9\u9009\u9879\uff1a \u683c\u5f0f: \u547d\u4ee4 --help \u4f8b\uff1als --help \u3010man\u3011\u547d\u4ee4\u5e2e\u52a9 \u683c\u5f0f\uff1aman \u547d\u4ee4 \u4f5c\u7528\uff1a\u67e5\u770b\u547d\u4ee4\u6240\u5bf9\u5e94\u7684\u5e2e\u52a9\u6587\u6863","title":"\u6587\u4ef6\u548c\u76ee\u5f55\u76f8\u5173\u7684\u547d\u4ee4"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#linux","text":"\u6839\uff08root\uff09 / \u8def\u5f84\u5206\u4e24\u79cd\uff1a \u7edd\u5bf9\u8def\u5f84\uff1a\u4ee5\u2018/\u2019\u5b57\u7b26\u5f00\u5934\u7684\u8def\u5f84 \u76f8\u5bf9\u8def\u5f84\uff1a\u4e0d\u4ee5\u2018/\u2019\u5b57\u7b26\u5f00\u5934\u7684\u8def\u5f84 \u5f00\u59cb\u7b26\u53f7\uff1a \u6587\u4ef6/\u6587\u4ef6\u5939\u540d\u79f0 .\u5f53\u524d\u6587\u4ef6\u5939\uff08\u76ee\u5f55\uff09 ..\u4e0a\u4e00\u7ea7\u6587\u4ef6\u5939\uff08\u76ee\u5f55\uff09 ~\u7528\u6237\u4e3b\u76ee\u5f55\uff08\u5bb6\u76ee\u5f55\uff09","title":"Linux\u4e0b\u7684\u8def\u5f84"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_2","text":"\u200b *\u4ee3\u88680\u4e2a\uff0c1\u4e2a\u6216\u591a\u4e2a\u4efb\u610f\u5b57\u7b26 \u200b \uff1f\u4ee3\u88681\u4e2a\u4efb\u610f\u5b57\u7b26 \u793a\u4f8b\uff1a touch a ab ac abc aabb bc cd ls a* ls *c rm a*b ls ?? \u663e\u793a\u53ea\u6709\u4e24\u4e2a\u5b57\u7b26\u6784\u6210\u7684\u6587\u4ef6 ls a??","title":"\u901a\u914d\u7b26"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_3","text":"\u3010cp\u3011 \u4f5c\u7528\uff1a\u590d\u5236\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u683c\u5f0f\uff1acp [\u9009\u9879] \u6e90\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u76ee\u6807\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u793a\u4f8b\uff1a cp a.txt ~/b.txt cp -a /home/tarena/yiouejv ~/ \u5e38\u7528\u9009\u9879\uff1a -a \u53ef\u4ee5\u590d\u5236\u6587\u4ef6\u5939\u53ca\u5176\u5185\u90e8\u7684\u5168\u90e8\u5185\u5bb9 \u3010mv\u3011 \u4f5c\u7528\uff1a\u6587\u4ef6\u642c\u79fb\u6216\u66f4\u540d \u683c\u5f0f\uff1a\u6e90\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u76ee\u6807\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u793a\u4f8b\uff1a mv a.txt b.txt mv a.txt /home/tarena \u3010find\u3011 \u4f5c\u7528\uff1a\u6839\u636e\u6587\u4ef6\u540d\u7b49\u4fe1\u606f\u67e5\u627e\u6307\u5b9a\u7684\u6587\u4ef6\u7684\u4f4d\u7f6e\uff08\u8def\u5f84\uff09 \u683c\u5f0f\uff1afind \u8def\u5f84 -name \u6587\u4ef6\u540d \u793a\u4f8b\uff1a #\u67e5\u627e\u6587\u4ef6 passwd find /etc -name 'password' \u5728etc\u6587\u4ef6\u5939\u4e0b\u67e5\u627e\u6ca1\u6709\u6ca1passwd\u8fd9\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u6709\u5219\u5217\u51fa\u6765 \u3010grep\u3011 \u4f5c\u7528\uff1a\u67e5\u627e\u6587\u4ef6\u4e2d\u76f8\u5e94\u7684\u5185\u5bb9\uff0c\u53ca\u6587\u672c\u4fe1\u606f \u683c\u5f0f\uff1a grep \"\u5185\u5bb9\" [\u9009\u9879] \u6587\u4ef6\u540d\u6216\u8def\u5f84 \u5e38\u7528\u9009\u9879\uff1a -n \u663e\u793a\u884c\u53f7 -r \u9012\u5f52\u641c\u7d22\u6587\u4ef6\u5939\u5185\u7684\u6587\u4ef6","title":"\u6587\u4ef6\u7ba1\u7406\u547d\u4ee4"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_4","text":"\u3010gzip\u3011 \u4f5c\u7528\uff1a\u7528zip\u538b\u7f29\u7b97\u6cd5\u5bf9\u6587\u4ef6\u8fdb\u884c\u538b\u7f29\uff0c\u751f\u6210\u538b\u7f29\u540e\u7684.gz\u6587\u4ef6 \u683c\u5f0f\uff1agzip \u6587\u4ef6\u540d \u3010gunzip\u3011 \u4f5c\u7528\uff1a\u5bf9\u7528zip\u538b\u7f29\u7684.gz\u6587\u4ef6\u8fdb\u884c\u89e3\u538b\u7f29 \u683c\u5f0f\uff1agunzip \u6587\u4ef6\u540d","title":"\u538b\u7f29\u89e3\u538b\u7f29\u7684\u547d\u4ee4"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_5","text":"\u3010tar\u3011 \u4f5c\u7528\uff1a\u5bf9\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u8fdb\u884c\u6253\u5305\u6216\u89e3\u5305\u64cd\u4f5c \u683c\u5f0f\uff1a tar [\u9009\u9879] \u6587\u4ef6\u540d [\u6587\u4ef6\u540d\u6216\u8def\u5f84] \u5e38\u7528\u9009\u9879\uff1a -c \u521b\u5efa\u5305 -x \u89e3\u5305 -f \u6587\u4ef6\u540d \u64cd\u4f5c\u7684\u6587\u4ef6\u540d -v \u663e\u793a\u64cd\u4f5c\u7684\u6587\u4ef6\u7ec6\u8282 -z \u7528gzip\u6216gunzip\u5bf9\u5305\u8fdb\u884c\u538b\u7f29\u548c\u52a0\u538b\u7f29 \u793a\u4f8b\uff1a \u6253\u5305\uff1a tar czvf a.tar.gz [\u539f\u6587\u4ef6\u8def\u5f84] \u89e3\u5305\uff1a tar xzvf a.tar.gz","title":"\u6253\u5305\u89e3\u5305\u7684\u547d\u4ee4"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#linux_1","text":"","title":"Linux\u5e38\u7528\u547d\u4ee4"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#ifconfig","text":"\u67e5\u770bip\u5730\u5740\u548cMAC\u5730\u5740","title":"ifconfig"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#ping","text":"\u6d4b\u8bd5\u7f51\u7edc\u7684\u8fde\u901a\u6027\uff1aping ip\u5730\u5740 -c \u6b21\u6570","title":"ping"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#top","text":"Lniux\u4e0b\u7684\u4efb\u52a1\u7ba1\u7406\u5668\uff0c\u80fd\u591f\u52a8\u6001\u7684\u663e\u793a\u5f53\u524d\u6240\u6709\u8fdb\u7a0bCPU\u4ee5\u53ca\u5185\u5b58\u7684\u4f7f\u7528\u7387\uff0cq\u9000\u51fa","title":"top"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#ps","text":"ps -aux \u663e\u793a\u7cfb\u7edf\u8fdb\u7a0b\uff08PID\u53f7\uff09 ps -aux | grep \"mysql\"","title":"ps"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#df","text":"df -h \u67e5\u770b\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5","title":"df"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#ls","text":"ls -lh \u6587\u4ef6\u540d l\u8868\u8fbe\u957f\u683c\u5f0f\uff0ch\u63d0\u4f9b\u6613\u8bfb\u5355\u4f4d","title":"ls"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#chmod","text":"\u4fee\u6539\u6587\u4ef6\u6743\u9650 chomd +x \u6587\u4ef6\u540d \u6dfb\u52a0\u53ef\u6267\u884c\u6743\u9650 chomd 644 \u6587\u4ef6\u540d rw-r--r-- r: 4 w: 2 x: 1","title":"chmod"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#wc","text":"wc -l : \u7edf\u8ba1\u6587\u4ef6\u7684\u884c\u6570 wc -l /etc/passwd: \u7edf\u8ba1\u5f53\u524dLinux\u7cfb\u7edf\u7531\u591a\u5c11\u7528\u6237","title":"wc"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#sort","text":"\u6392\u5e8f\uff0c\u5bf9\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u6392\u5e8f sort ip.txt","title":"sort"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#uniq-c","text":"\u53bb\u9664\u91cd\u590d\u7684\u884c\u5e76\u7edf\u8ba1\u6bcf\u884c\u51fa\u73b0\u7684\u6b21\u6570\uff08\u53ea\u80fd\u53bb\u9664\u76f8\u90bb\u884c\uff09 \u7528\u6cd5\uff1asort\u6587\u4ef6\u540d | uniq -c","title":"uniq -c"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#find","text":"\u6839\u636e\u6307\u5b9a\u7684\u6761\u4ef6\u6765\u67e5\u627e\u6587\u4ef6\u6216\u76ee\u5f55 -name : \u6839\u636e\u6587\u4ef6\u540d\u67e5\u627e find \u8def\u5f84 -name \u6587\u4ef6\u540d -iname \u4e0d\u533a\u5206\u5927\u5c0f\u5199 \u67e5\u627e~/spider\u76ee\u5f55\u4e0b\u7684\u6240\u6709.py\u6587\u4ef6 find ~/spider -name \"*.py\" -type\uff1a\u6839\u636e\u7c7b\u578b\u67e5\u627e(\u6587\u4ef6|\u76ee\u5f55) -f: \u6587\u4ef6 -d: \u76ee\u5f55 -l: \u94fe\u63a5(link\u5feb\u6377\u65b9\u5f0f) \u67e5\u627e\u4e3b\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u76ee\u5f55 -size: \u6309\u5927\u5c0f\u67e5\u627e + \u5927\u4e8e...\u6587\u4ef6/\u76ee\u5f55 - \u5927\u4e8e...\u6587\u4ef6/\u76ee\u5f55 \u67e5\u627e/home/tarena/software \u5927\u4e8e20M\u7684\u6587\u4ef6 find ~/software -size +20M -type f -ctime \u6839\u636e\u65f6\u95f4\u67e5\u627e ctime + 1: \u8868\u793a\u4e00\u5929\u4ee5\u524d\u7684\u6587\u4ef6\u6216\u76ee\u5f55 \u67e5\u627e~/spider\u4e0b\u4e00\u5929\u4ee5\u5185\u7684\u6587\u4ef6 find ~/spider -ctime -1 -type f \u5904\u7406\u52a8\u4f5c find ... -exec Linux\u547d\u4ee4{} \\; \u67e5\u627e\u4e00\u5929\u4ee5\u5185\u7684\u4ee5.doc\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5220\u9664 find / -name *.doc -ctime -1 -type f -exec rm -rf {} \\;","title":"find"},{"location":"tools/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#du","text":"du -sh \u663e\u793a\u5f53\u524d\u76ee\u5f55\u5927\u5c0f","title":"du"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/","text":"sh bash ## /etc/passwd \u67e5\u770b\u7528\u6237\u9ed8\u8ba4bash\uff0csh\u89e3\u91ca\u6267\u884c\u5668\u6ca1\u6709\u9ad8\u4eae\u663e\u793a\uff0c\u4e5f\u6ca1\u6709\u81ea\u52a8\u8865\u5168 shell \u7f16\u7a0b \u00b6 \u6240\u6709\u7684shell\u7a0b\u5e8f\u90fd\u662f\u4ee5 .sh \u7ed3\u5c3e \u6267\u884c\u65b9\u5f0f bash test.sh chmod +x test.sh ./test.sh ## \u4fdd\u8bc1test.sh \u7684\u7b2c\u4e00\u884c\u4e3a\uff1a #!/bin/bash \u53d8\u91cf\u8d4b\u503c \u00b6 \u53d8\u91cf\u540d=\u503c \uff08\u7b49\u53f7\u4e24\u4fa7\u4e0d\u80fd\u6709\u7a7a\u683c\uff09 number=10 name='\u5f20\u4e09\u4e30' \u83b7\u53d6Linux\u547d\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u7ed9\u53d8\u91cf\u8d4b\u503c time=$(Linux\u547d\u4ee4) time=`date` (1\u5de6\u8fb9\u90a3\u4e2a) \u63a5\u6536\u7528\u6237\u4ece\u7ec8\u7aef\u8f93\u5165\u7ed9\u53d8\u91cf\u8d4b\u503c read -p \"\u63d0\u793a\u4fe1\u606f\" \u53d8\u91cf\u540d \u8f93\u51fa\u8bed\u53e5 \u00b6 echo $\u53d8\u91cf\u540d ' ' \u548c \" \" \u7684\u533a\u522b \u00b6 ' ' \u65e0\u6cd5\u83b7\u53d6\u53d8\u91cf\u7684\u503c \" \" \u53ef\u4ee5\u83b7\u53d6\u53d8\u91cf\u7684\u503c read -p 'Input name:' name echo '\u540d\u5b57\u662f\uff1a$name' \u7ed3\u679c\uff1a \u540d\u5b57\u662f$name echo \"\u540d\u5b57\u662f\uff1a$name\" \u7ed3\u679c\uff1a \u540d\u5b57\u662f:\u5f20\u4e09\u4e30 \u8fd0\u7b97\u7b26 \u00b6 \u7b97\u672f\u8fd0\u7b97\u7b26 \u00b6 + - * / % ++ -- \u8fd0\u7b97\u547d\u4ee4\uff08let\uff09\uff1a i=1 let i++ echo $i expr \u8fd0\u7b97\u8868\u8fbe\u5f0f i=1 sum=`expr $i + 5` echo $sum \u6bd4\u8f83\u8fd0\u7b97\u7b26 \u00b6 \u6587\u4ef6\u72b6\u6001 -e: \u6587\u4ef6/\u76ee\u5f55\u662f\u5426\u5b58\u5728 -d: \u5224\u65ad\u662f\u5426\u4e3a\u76ee\u5f55 -f: \u5224\u65ad\u662f\u5426\u4e3a\u6587\u4ef6 \u5b57\u7b26\u6bd4\u8f83 \u00b6 = != \u7a7a\uff1a -z \u975e\u7a7a: \uff01-z \u6216\u8005 -n \u6570\u503c\u6bd4\u8f83 \u00b6 \u7b49\u4e8e\uff1a-eq \u5927\u4e8e\uff1a-gt >= : -ge \u5c0f\u4e8e: -lt <=: -le !=: -ne \u903b\u8f91\u6bd4\u8f83 \u00b6 \u903b\u8f91\u4e0e: && \u903b\u8f91\u6216\uff1a|| if \u6761\u4ef6\u5224\u65ad \u00b6 \u8bed\u6cd5\u683c\u5f0f \u00b6 if [\u6761\u4ef6]; then \u6267\u884c\u8bed\u53e5 elif [ ]; then \u6267\u884c\u8bed\u53e5 else: \u6267\u884c\u8bed\u53e5 fi for \u5faa\u73af1 \u00b6 \u8bed\u6cd5\u683c\u5f0f for \u53d8\u91cf\u540d in \u503c\u5217\u8868 do \u6267\u884c\u8bed\u53e5 done \u9020\u6570\u65b9\u6cd5 seq \u8d77\u59cb\u503c \u6b65\u957f \u7ec8\u6b62\u503c \u00b6 seq 5: 1 2 3 4 5 seq 1 2 10: 1 3 5 7 9 seq 2 2 10: 2 4 6 8 10 \u6253\u5370 1 -5\uff1a for i in ` seq 5 ` do echo $i done for \u5faa\u73af2 \u00b6 \u8bed\u6cd5\u683c\u5f0f for ((\u8d4b\u521d\u503c; \u6761\u4ef6\u5224\u65ad; \u6b65\u957f)) do \u6267\u884c\u8bed\u53e5 done while \u5faa\u73af \u00b6 while [\u6761\u4ef6] do \u6267\u884c\u8bed\u53e5 done \u51fd\u6570 \u00b6 \u51fd\u6570\u540d(){ \u4ee3\u7801\u5757 } \u51fd\u6570\u540d # \u51fd\u6570\u8c03\u7528","title":"shell \u8bed\u8a00\u7f16\u7a0b"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#shell","text":"\u6240\u6709\u7684shell\u7a0b\u5e8f\u90fd\u662f\u4ee5 .sh \u7ed3\u5c3e \u6267\u884c\u65b9\u5f0f bash test.sh chmod +x test.sh ./test.sh ## \u4fdd\u8bc1test.sh \u7684\u7b2c\u4e00\u884c\u4e3a\uff1a #!/bin/bash","title":"shell \u7f16\u7a0b"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_1","text":"\u53d8\u91cf\u540d=\u503c \uff08\u7b49\u53f7\u4e24\u4fa7\u4e0d\u80fd\u6709\u7a7a\u683c\uff09 number=10 name='\u5f20\u4e09\u4e30' \u83b7\u53d6Linux\u547d\u4ee4\u7684\u6267\u884c\u7ed3\u679c\u7ed9\u53d8\u91cf\u8d4b\u503c time=$(Linux\u547d\u4ee4) time=`date` (1\u5de6\u8fb9\u90a3\u4e2a) \u63a5\u6536\u7528\u6237\u4ece\u7ec8\u7aef\u8f93\u5165\u7ed9\u53d8\u91cf\u8d4b\u503c read -p \"\u63d0\u793a\u4fe1\u606f\" \u53d8\u91cf\u540d","title":"\u53d8\u91cf\u8d4b\u503c"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_2","text":"echo $\u53d8\u91cf\u540d","title":"\u8f93\u51fa\u8bed\u53e5"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_3","text":"' ' \u65e0\u6cd5\u83b7\u53d6\u53d8\u91cf\u7684\u503c \" \" \u53ef\u4ee5\u83b7\u53d6\u53d8\u91cf\u7684\u503c read -p 'Input name:' name echo '\u540d\u5b57\u662f\uff1a$name' \u7ed3\u679c\uff1a \u540d\u5b57\u662f$name echo \"\u540d\u5b57\u662f\uff1a$name\" \u7ed3\u679c\uff1a \u540d\u5b57\u662f:\u5f20\u4e09\u4e30","title":"' ' \u548c  \" \" \u7684\u533a\u522b"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_4","text":"","title":"\u8fd0\u7b97\u7b26"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_5","text":"+ - * / % ++ -- \u8fd0\u7b97\u547d\u4ee4\uff08let\uff09\uff1a i=1 let i++ echo $i expr \u8fd0\u7b97\u8868\u8fbe\u5f0f i=1 sum=`expr $i + 5` echo $sum","title":"\u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_6","text":"\u6587\u4ef6\u72b6\u6001 -e: \u6587\u4ef6/\u76ee\u5f55\u662f\u5426\u5b58\u5728 -d: \u5224\u65ad\u662f\u5426\u4e3a\u76ee\u5f55 -f: \u5224\u65ad\u662f\u5426\u4e3a\u6587\u4ef6","title":"\u6bd4\u8f83\u8fd0\u7b97\u7b26"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_7","text":"= != \u7a7a\uff1a -z \u975e\u7a7a: \uff01-z \u6216\u8005 -n","title":"\u5b57\u7b26\u6bd4\u8f83"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_8","text":"\u7b49\u4e8e\uff1a-eq \u5927\u4e8e\uff1a-gt >= : -ge \u5c0f\u4e8e: -lt <=: -le !=: -ne","title":"\u6570\u503c\u6bd4\u8f83"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_9","text":"\u903b\u8f91\u4e0e: && \u903b\u8f91\u6216\uff1a||","title":"\u903b\u8f91\u6bd4\u8f83"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#if","text":"","title":"if \u6761\u4ef6\u5224\u65ad"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_10","text":"if [\u6761\u4ef6]; then \u6267\u884c\u8bed\u53e5 elif [ ]; then \u6267\u884c\u8bed\u53e5 else: \u6267\u884c\u8bed\u53e5 fi","title":"\u8bed\u6cd5\u683c\u5f0f"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#for-1","text":"\u8bed\u6cd5\u683c\u5f0f for \u53d8\u91cf\u540d in \u503c\u5217\u8868 do \u6267\u884c\u8bed\u53e5 done","title":"for \u5faa\u73af1"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#seq","text":"seq 5: 1 2 3 4 5 seq 1 2 10: 1 3 5 7 9 seq 2 2 10: 2 4 6 8 10 \u6253\u5370 1 -5\uff1a for i in ` seq 5 ` do echo $i done","title":"\u9020\u6570\u65b9\u6cd5 seq \u8d77\u59cb\u503c \u6b65\u957f \u7ec8\u6b62\u503c"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#for-2","text":"\u8bed\u6cd5\u683c\u5f0f for ((\u8d4b\u521d\u503c; \u6761\u4ef6\u5224\u65ad; \u6b65\u957f)) do \u6267\u884c\u8bed\u53e5 done","title":"for \u5faa\u73af2"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#while","text":"while [\u6761\u4ef6] do \u6267\u884c\u8bed\u53e5 done","title":"while \u5faa\u73af"},{"location":"tools/shell%20%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/#_11","text":"\u51fd\u6570\u540d(){ \u4ee3\u7801\u5757 } \u51fd\u6570\u540d # \u51fd\u6570\u8c03\u7528","title":"\u51fd\u6570"},{"location":"tools/subl%E4%BD%BF%E7%94%A8%E5%A4%87%E6%B3%A8/","text":"\u5feb\u6377\u952e \u00b6 Shift + Del \u5220\u9664\u6574\u884c Ctrl + Shift + d \u590d\u5236\u5149\u6807\u6240\u5728\u6574\u884c\uff0c\u63d2\u5165\u5728\u8be5\u884c\u4e4b\u524d Ctrl + d \u9009\u8bcd \uff08\u6309\u4f4f-\u7ee7\u7eed\u9009\u62e9\u4e0b\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u518d\u6309\uff0c\u53ef\u8df3\u5230\u76f8\u5e94\u7684\u65b9\u6cd5\u5b9a\u4e49\u5904 Ctrl + Shift + m \u9009\u62e9\u62ec\u53f7\u5185\u7684\u5185\u5bb9\uff08\u6309\u4f4f-\u7ee7\u7eed\u9009\u62e9\u7236\u62ec\u53f7\uff09 Ctrl + / \u6ce8\u91ca\u6574\u884c\uff08\u5982\u5df2\u9009\u62e9\u5185\u5bb9\uff0c\u540c\u201cCtrl+Shift+/\u201d\u6548\u679c\uff09 Ctrl + Shift + UP \u4e0e\u4e0a\u884c\u4e92\u6362 ctrl + shift + up: \u5217\u6a21\u5f0f\u7f16\u8f91 Ctrl + k + \u6570\u7ec4 \u4ee3\u7801\u6309\u5c42\u6b21\u6298\u53e0 Ctrl + k + j \u4ee3\u7801\u5168\u90e8\u5c55\u5f00 Ctrl + k + b \u6253\u5f00\u4fa7\u8fb9\u680f Ctrl + \u56de\u8f66 \u3000 \u5149\u6807\u540e\u63d2\u5165\u884c\uff0c\u3000Ctrl+Shift+Enter \u5149\u6807\u524d\u63d2\u5165\u884c Ctrl + m \u5339\u914d\u62ec\u53f7 Ctrl +z, y \u64a4\u9500\uff0c\u6062\u590d\u64a4\u9500 Ctrl + F2 \u8bbe\u7f6e\u4e66\u7b7e F2 \u4e0b\u4e00\u4e2a\u4e66\u7b7e Shift + F2 \u4e0a\u4e00\u4e2a\u4e66\u7b7e Ctrl + \u5355\u51fb \u591a\u884c\u968f\u610f\u4f4d\u7f6e\u6dfb\u52a0\u5149\u6807 alt + F3( mac: ctrl + command + g): \u9009\u62e9\u9875\u9762\u4e2d\u6240\u6709\u76f8\u540c\u7684\u8bcd Ctrl + p \u5373\u65f6\u7684\u6587\u4ef6\u5207\u6362 Ctrl + R \u5728\u5f53\u524d\u6587\u4ef6\u5185\u641c\u7d22\u7684\u51fd\u6570\u540d Ctrl + Shift + R \u5728\u6574\u4e2a\u9879\u76ee\u5185\u7684\u641c\u7d22\u51fd\u6570\u540d Ctrl + Shift + F \u5728\u6574\u4e2a\u9879\u76ee\u5185\u641c\u7d22\u5173\u952e\u8bcd Ctrl + G \u8df3\u8f6c\u5230\u6307\u5b9a\u884c Alt + - \u540e\u9000 Alt + Shift + - \u524d\u8fdb","title":"subl \u4f7f\u7528\u5907\u6ce8"},{"location":"tools/subl%E4%BD%BF%E7%94%A8%E5%A4%87%E6%B3%A8/#_1","text":"Shift + Del \u5220\u9664\u6574\u884c Ctrl + Shift + d \u590d\u5236\u5149\u6807\u6240\u5728\u6574\u884c\uff0c\u63d2\u5165\u5728\u8be5\u884c\u4e4b\u524d Ctrl + d \u9009\u8bcd \uff08\u6309\u4f4f-\u7ee7\u7eed\u9009\u62e9\u4e0b\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff0c\u518d\u6309\uff0c\u53ef\u8df3\u5230\u76f8\u5e94\u7684\u65b9\u6cd5\u5b9a\u4e49\u5904 Ctrl + Shift + m \u9009\u62e9\u62ec\u53f7\u5185\u7684\u5185\u5bb9\uff08\u6309\u4f4f-\u7ee7\u7eed\u9009\u62e9\u7236\u62ec\u53f7\uff09 Ctrl + / \u6ce8\u91ca\u6574\u884c\uff08\u5982\u5df2\u9009\u62e9\u5185\u5bb9\uff0c\u540c\u201cCtrl+Shift+/\u201d\u6548\u679c\uff09 Ctrl + Shift + UP \u4e0e\u4e0a\u884c\u4e92\u6362 ctrl + shift + up: \u5217\u6a21\u5f0f\u7f16\u8f91 Ctrl + k + \u6570\u7ec4 \u4ee3\u7801\u6309\u5c42\u6b21\u6298\u53e0 Ctrl + k + j \u4ee3\u7801\u5168\u90e8\u5c55\u5f00 Ctrl + k + b \u6253\u5f00\u4fa7\u8fb9\u680f Ctrl + \u56de\u8f66 \u3000 \u5149\u6807\u540e\u63d2\u5165\u884c\uff0c\u3000Ctrl+Shift+Enter \u5149\u6807\u524d\u63d2\u5165\u884c Ctrl + m \u5339\u914d\u62ec\u53f7 Ctrl +z, y \u64a4\u9500\uff0c\u6062\u590d\u64a4\u9500 Ctrl + F2 \u8bbe\u7f6e\u4e66\u7b7e F2 \u4e0b\u4e00\u4e2a\u4e66\u7b7e Shift + F2 \u4e0a\u4e00\u4e2a\u4e66\u7b7e Ctrl + \u5355\u51fb \u591a\u884c\u968f\u610f\u4f4d\u7f6e\u6dfb\u52a0\u5149\u6807 alt + F3( mac: ctrl + command + g): \u9009\u62e9\u9875\u9762\u4e2d\u6240\u6709\u76f8\u540c\u7684\u8bcd Ctrl + p \u5373\u65f6\u7684\u6587\u4ef6\u5207\u6362 Ctrl + R \u5728\u5f53\u524d\u6587\u4ef6\u5185\u641c\u7d22\u7684\u51fd\u6570\u540d Ctrl + Shift + R \u5728\u6574\u4e2a\u9879\u76ee\u5185\u7684\u641c\u7d22\u51fd\u6570\u540d Ctrl + Shift + F \u5728\u6574\u4e2a\u9879\u76ee\u5185\u641c\u7d22\u5173\u952e\u8bcd Ctrl + G \u8df3\u8f6c\u5230\u6307\u5b9a\u884c Alt + - \u540e\u9000 Alt + Shift + - \u524d\u8fdb","title":"\u5feb\u6377\u952e"},{"location":"tools/git/unpack-objects/","text":"\u95ee\u9898 \u00b6 \u5728git pull \u65f6\u53d1\u751funpack-objects failed remote: Counting objects: 80, done. remote: Compressing objects: 100% (79/79), done. Connection to bitbucket.org closed by remote host. fatal: The remote end hung up unexpectedly fatal: early EOF fatal: unpack-objects failed \u89e3\u51b3\u65b9\u6848 \u00b6 \u5728.git/config\u4e2d\u6dfb\u52a0 [core] packedGitLimit = 512m packedGitWindowSize = 512m [pack] deltaCacheSize = 2047m packSizeLimit = 2047m windowMemory = 2047m","title":"unpack-objects failed"},{"location":"tools/git/unpack-objects/#_1","text":"\u5728git pull \u65f6\u53d1\u751funpack-objects failed remote: Counting objects: 80, done. remote: Compressing objects: 100% (79/79), done. Connection to bitbucket.org closed by remote host. fatal: The remote end hung up unexpectedly fatal: early EOF fatal: unpack-objects failed","title":"\u95ee\u9898"},{"location":"tools/git/unpack-objects/#_2","text":"\u5728.git/config\u4e2d\u6dfb\u52a0 [core] packedGitLimit = 512m packedGitWindowSize = 512m [pack] deltaCacheSize = 2047m packSizeLimit = 2047m windowMemory = 2047m","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"tools/git/use_git/","text":"\u5728\u7ebf\u7ec3\u4e60 \u00b6 https://learngitbranching.js.org/?locale=zh_CN \u9605\u8bfbgit\u5b98\u7f51\u7684Book, \u987a\u624b\u8bb0\u5f55\u4e00\u4e0b\uff0c\u65b9\u4fbf\u67e5\u9605 \u00b6 https://git-scm.com/book/en/v2 git \u57fa\u7840\u547d\u4ee4 \u00b6 git config \u00b6 /etc/gitconfig \u6587\u4ef6: \u5305\u542b\u7cfb\u7edf\u4e0a\u6bcf\u4e00\u4e2a\u7528\u6237\u53ca\u4ed6\u4eec\u4ed3\u5e93\u7684\u901a\u7528\u914d\u7f6e\u3002 \u5982\u679c\u5728\u6267\u884c git config \u65f6\u5e26\u4e0a --system \u9009\u9879\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u8bfb\u5199\u8be5\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \uff08\u7531\u4e8e\u5b83\u662f\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u7ba1\u7406\u5458\u6216\u8d85\u7ea7\u7528\u6237\u6743\u9650\u6765\u4fee\u6539\u5b83\u3002\uff09 ~/.gitconfig \u6216 ~/.config/git/config \u6587\u4ef6\uff1a\u53ea\u9488\u5bf9\u5f53\u524d\u7528\u6237\u3002 \u4f60\u53ef\u4ee5\u4f20\u9012 --global \u9009\u9879\u8ba9 Git \u8bfb\u5199\u6b64\u6587\u4ef6\uff0c\u8fd9\u4f1a\u5bf9\u4f60\u7cfb\u7edf\u4e0a \u6240\u6709 \u7684\u4ed3\u5e93\u751f\u6548\u3002 \u5f53\u524d\u4f7f\u7528\u4ed3\u5e93\u7684 Git \u76ee\u5f55\u4e2d\u7684 config \u6587\u4ef6\uff08\u5373 .git/config\uff09\uff1a\u9488\u5bf9\u8be5\u4ed3\u5e93\u3002 \u4f60\u53ef\u4ee5\u4f20\u9012 --local \u9009\u9879\u8ba9 Git \u5f3a\u5236\u8bfb\u5199\u6b64\u6587\u4ef6\uff0c\u867d\u7136\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7528\u7684\u5c31\u662f\u5b83\u3002\u3002 \uff08\u5f53\u7136\uff0c\u4f60\u9700\u8981\u8fdb\u5165\u67d0\u4e2a Git \u4ed3\u5e93\u4e2d\u624d\u80fd\u8ba9\u8be5\u9009\u9879\u751f\u6548\u3002\uff09 \u914d\u7f6e\u7528\u6237\uff1a git config --global user.name \"username\" git config --global user.eamil \"email\" \u5f53\u4f60\u60f3\u9488\u5bf9\u7279\u5b9a\u9879\u76ee\u4f7f\u7528\u4e0d\u540c\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u65f6\uff0c\u53ef\u4ee5\u5728\u90a3\u4e2a\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c\u6ca1\u6709 --global \u9009\u9879\u7684\u547d\u4ee4\u6765\u914d\u7f6e\u3002(--local \u76f8\u5f53\u4e8e\u4e0a\u8ff0\u7684local) \u914d\u7f6e\u7f16\u8f91\u5668 git config --global core.editor.vim \u5f53 Git \u9700\u8981\u4f60\u8f93\u5165\u4fe1\u606f\u65f6\u4f1a\u8c03\u7528\u5b83\u3002 \u5982\u679c\u672a\u914d\u7f6e\uff0cGit \u4f1a\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u9ed8\u8ba4\u7684\u6587\u672c\u7f16\u8f91\u5668\u3002 \u67e5\u770b\u914d\u7f6e\u4fe1\u606f \u67e5\u770b\u5f53\u524d\u4ed3\u5e93\u7684\u914d\u7f6e: git config --list git config < key > git help \u00b6 git help < verb > git < verb > --help man git-< verb > git init \u00b6 \u8be5\u547d\u4ee4\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a .git \u7684\u5b50\u76ee\u5f55\uff0c\u8fd9\u4e2a\u5b50\u76ee\u5f55\u542b\u6709\u4f60\u521d\u59cb\u5316\u7684 Git \u4ed3\u5e93\u4e2d\u6240\u6709\u7684\u5fc5\u987b\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u662f Git \u4ed3\u5e93\u7684\u9aa8\u5e72\u3002 \u4f46\u662f\uff0c\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4ec5\u4ec5\u662f\u505a\u4e86\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u64cd\u4f5c\uff0c\u4f60\u7684\u9879\u76ee\u91cc\u7684\u6587\u4ef6\u8fd8\u6ca1\u6709\u88ab\u8ddf\u8e2a\u3002 git clone \u00b6 \u5982\u679c\u4f60\u60f3\u83b7\u5f97\u4e00\u4efd\u5df2\u7ecf\u5b58\u5728\u4e86\u7684 Git \u4ed3\u5e93\u7684\u62f7\u8d1d\uff0c\u6bd4\u5982\u8bf4\uff0c\u4f60\u60f3\u4e3a\u67d0\u4e2a\u5f00\u6e90\u9879\u76ee\u8d21\u732e\u81ea\u5df1\u7684\u4e00\u4efd\u529b\uff0c\u8fd9\u65f6\u5c31\u8981\u7528\u5230 git clone \u547d\u4ee4\u3002 \u5982\u679c\u4f60\u5bf9\u5176\u5b83\u7684 VCS \u7cfb\u7edf\uff08\u6bd4\u5982\u8bf4 Subversion\uff09\u5f88\u719f\u6089\uff0c\u8bf7\u7559\u5fc3\u4e00\u4e0b\u4f60\u6240\u4f7f\u7528\u7684\u547d\u4ee4\u662f\"clone\"\u800c\u4e0d\u662f\"checkout\"\u3002 \u8fd9\u662f Git \u533a\u522b\u4e8e\u5176\u5b83\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\uff0cGit \u514b\u9686\u7684\u662f\u8be5 Git \u4ed3\u5e93\u670d\u52a1\u5668\u4e0a\u7684\u51e0\u4e4e\u6240\u6709\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u590d\u5236\u5b8c\u6210\u4f60\u7684\u5de5\u4f5c\u6240\u9700\u8981\u6587\u4ef6\u3002 \u5f53\u4f60\u6267\u884c git clone \u547d\u4ee4\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u8fdc\u7a0b Git \u4ed3\u5e93\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7684\u6bcf\u4e00\u4e2a\u7248\u672c\u90fd\u5c06\u88ab\u62c9\u53d6\u4e0b\u6765\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4f60\u7684\u670d\u52a1\u5668\u7684\u78c1\u76d8\u574f\u6389\u4e86\uff0c\u4f60\u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u514b\u9686\u4e0b\u6765\u7684\u7528\u6237\u7aef\u6765\u91cd\u5efa\u670d\u52a1\u5668\u4e0a\u7684\u4ed3\u5e93 \uff08\u867d\u7136\u53ef\u80fd\u4f1a\u4e22\u5931\u67d0\u4e9b\u670d\u52a1\u5668\u7aef\u7684\u94a9\u5b50\uff08hook\uff09\u8bbe\u7f6e\uff0c\u4f46\u662f\u6240\u6709\u7248\u672c\u7684\u6570\u636e\u4ecd\u5728. \u514b\u9686\u4ed3\u5e93\u7684\u547d\u4ee4\u662f git clone < url > \u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\u7684\u65f6\u5019\uff0c\u81ea\u5b9a\u4e49\u672c\u5730\u4ed3\u5e93\u7684\u540d\u5b57 git clone < url > newname git status \u00b6 \u53ef\u4ee5\u7528 git status \u547d\u4ee4\u67e5\u770b\u54ea\u4e9b\u6587\u4ef6\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\u3002 git status --short \u5f97\u5230\u4e00\u79cd\u683c\u5f0f\u66f4\u4e3a\u7d27\u51d1\u7684\u8f93\u51fa git add \u00b6 \u8ddf\u8e2a\u4e00\u4e2a\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6\u3002 \u5c06\u8ddf\u8e2a\u7684\u6587\u4ef6\u653e\u5165\u6682\u5b58\u533a git add -A \u63d0\u4ea4\u6240\u6709\u53d8\u5316 git add -u \u63d0\u4ea4\u88ab\u4fee\u6539(modified)\u548c\u88ab\u5220\u9664(deleted)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u65b0\u6587\u4ef6(new) git add . \u63d0\u4ea4\u65b0\u6587\u4ef6(new)\u548c\u88ab\u4fee\u6539(modified)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u88ab\u5220\u9664(deleted)\u6587\u4ef6 .gitignore \u00b6 \u4e00\u822c\u6211\u4eec\u603b\u4f1a\u6709\u4e9b\u6587\u4ef6\u65e0\u9700\u7eb3\u5165 Git \u7684\u7ba1\u7406\uff0c\u4e5f\u4e0d\u5e0c\u671b\u5b83\u4eec\u603b\u51fa\u73b0\u5728\u672a\u8ddf\u8e2a\u6587\u4ef6\u5217\u8868\u3002 \u901a\u5e38\u90fd\u662f\u4e9b\u81ea\u52a8\u751f\u6210\u7684\u6587\u4ef6\uff0c\u6bd4\u5982\u65e5\u5fd7\u6587\u4ef6\uff0c\u6216\u8005\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u521b\u5efa\u7684\u4e34\u65f6\u6587\u4ef6\u7b49\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a .gitignore \u7684\u6587\u4ef6\uff0c\u5217\u51fa\u8981\u5ffd\u7565\u7684\u6587\u4ef6\u7684\u6a21\u5f0f\u3002 *.[oa] *~ \u7b2c\u4e00\u884c\u544a\u8bc9 Git \u5ffd\u7565\u6240\u6709\u4ee5 .o \u6216 .a \u7ed3\u5c3e\u7684\u6587\u4ef6\u3002 \u7b2c\u4e8c\u884c\u544a\u8bc9 Git \u5ffd\u7565\u6240\u6709\u540d\u5b57\u4ee5\u6ce2\u6d6a\u7b26\uff08~\uff09\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u8bb8\u591a\u6587\u672c\u7f16\u8f91\u8f6f\u4ef6\uff08\u6bd4\u5982 Emacs\uff09\u90fd\u7528\u8fd9\u6837\u7684\u6587\u4ef6\u540d\u4fdd\u5b58\u526f\u672c\u3002 \u6587\u4ef6 .gitignore \u7684\u683c\u5f0f\u89c4\u8303\u5982\u4e0b\uff1a - \u6240\u6709\u7a7a\u884c\u6216\u8005\u4ee5 # \u5f00\u5934\u7684\u884c\u90fd\u4f1a\u88ab Git \u5ffd\u7565\u3002 - \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 glob \u6a21\u5f0f\u5339\u914d\uff0c\u5b83\u4f1a\u9012\u5f52\u5730\u5e94\u7528\u5728\u6574\u4e2a\u5de5\u4f5c\u533a\u4e2d\u3002 - \u5339\u914d\u6a21\u5f0f\u53ef\u4ee5\u4ee5\uff08/\uff09\u5f00\u5934\u9632\u6b62\u9012\u5f52\u3002 - \u5339\u914d\u6a21\u5f0f\u53ef\u4ee5\u4ee5\uff08/\uff09\u7ed3\u5c3e\u6307\u5b9a\u76ee\u5f55\u3002 - \u8981\u5ffd\u7565\u6307\u5b9a\u6a21\u5f0f\u4ee5\u5916\u7684\u6587\u4ef6\u6216\u76ee\u5f55\uff0c\u53ef\u4ee5\u5728\u6a21\u5f0f\u524d\u52a0\u4e0a\u53f9\u53f7\uff08!\uff09\u53d6\u53cd\u3002 git diff \u00b6 \u4e0d\u52a0\u53c2\u6570\u76f4\u63a5\u8f93\u5165 git diff : \u5c1a\u672a\u6682\u5b58\u7684\u6587\u4ef6\u66f4\u65b0\u4e86\u54ea\u4e9b\u90e8\u5206 git diff --staged : \u5df2\u6682\u5b58\u6587\u4ef6\u4e0e\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u5dee\u5f02 git diff --cached : --staged \u548c --cached \u662f\u540c\u4e49\u8bcd git diff --check \uff1a \u5b83\u5c06\u4f1a\u627e\u5230\u53ef\u80fd\u7684\u7a7a\u767d\u9519\u8bef\u5e76\u5c06\u5b83\u4eec\u4e3a\u4f60\u5217\u51fa\u6765 git commit \u00b6 git commit -m \"message\": \u63d0\u4ea4\u4ee3\u7801 \u8bf7\u8bb0\u4f4f\uff0c\u63d0\u4ea4\u65f6\u8bb0\u5f55\u7684\u662f\u653e\u5728\u6682\u5b58\u533a\u57df\u7684\u5feb\u7167\u3002 \u4efb\u4f55\u8fd8\u672a\u6682\u5b58\u6587\u4ef6\u7684\u4ecd\u7136\u4fdd\u6301\u5df2\u4fee\u6539\u72b6\u6001\uff0c\u53ef\u4ee5\u5728\u4e0b\u6b21\u63d0\u4ea4\u65f6\u7eb3\u5165\u7248\u672c\u7ba1\u7406\u3002 \u6bcf\u4e00\u6b21\u8fd0\u884c\u63d0\u4ea4\u64cd\u4f5c\uff0c\u90fd\u662f\u5bf9\u4f60\u9879\u76ee\u4f5c\u4e00\u6b21\u5feb\u7167\uff0c\u4ee5\u540e\u53ef\u4ee5\u56de\u5230\u8fd9\u4e2a\u72b6\u6001\uff0c\u6216\u8005\u8fdb\u884c\u6bd4\u8f83\u3002 git commit -m -a \"message\": \u5c3d\u7ba1\u4f7f\u7528\u6682\u5b58\u533a\u57df\u7684\u65b9\u5f0f\u53ef\u4ee5\u7cbe\u5fc3\u51c6\u5907\u8981\u63d0\u4ea4\u7684\u7ec6\u8282\uff0c\u4f46\u6709\u65f6\u5019\u8fd9\u4e48\u505a\u7565\u663e\u7e41\u7410\u3002 Git \u63d0\u4f9b\u4e86\u4e00\u4e2a\u8df3\u8fc7\u4f7f\u7528\u6682\u5b58\u533a\u57df\u7684\u65b9\u5f0f\uff0c \u53ea\u8981\u5728\u63d0\u4ea4\u7684\u65f6\u5019\uff0c\u7ed9 git commit \u52a0\u4e0a -a \u9009\u9879\uff0cGit \u5c31\u4f1a\u81ea\u52a8\u628a\u6240\u6709\u5df2\u7ecf\u8ddf\u8e2a\u8fc7\u7684\u6587\u4ef6\u6682\u5b58\u8d77\u6765\u4e00\u5e76\u63d0\u4ea4\u3002 git commit -amend: \u4fee\u6539\u63d0\u4ea4 git rm \u00b6 git rm file: \u4ece\u5df2\u8ddf\u8e2a\u6587\u4ef6\u6e05\u5355\u4e2d\u79fb\u9664\uff08\u786e\u5207\u5730\u8bf4\uff0c\u662f\u4ece\u6682\u5b58\u533a\u57df\u79fb\u9664\uff09, \u5e76\u8fde\u5e26\u4ece\u5de5\u4f5c\u76ee\u5f55\u4e2d\u5220\u9664\u6307\u5b9a\u7684\u6587\u4ef6 git rm -f file: \u5982\u679c\u8981\u5220\u9664\u4e4b\u524d\u4fee\u6539\u8fc7\u6216\u5df2\u7ecf\u653e\u5230\u6682\u5b58\u533a\u7684\u6587\u4ef6\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5f3a\u5236\u5220\u9664\u9009\u9879 -f\uff08\u8bd1\u6ce8\uff1a\u5373 force \u7684\u9996\u5b57\u6bcd\uff09 git rm --cached file: \u8ba9\u6587\u4ef6\u4fdd\u7559\u5728\u78c1\u76d8\uff0c\u4f46\u662f\u5e76\u4e0d\u60f3\u8ba9 Git \u7ee7\u7eed\u8ddf\u8e2a\u3002 git mv \u00b6 git mv README.md README \u76f8\u5f53\u4e8e mv README.md README git rm README.md git add README \u4e0d\u50cf\u5176\u5b83\u7684 VCS \u7cfb\u7edf\uff0cGit \u5e76\u4e0d\u663e\u5f0f\u8ddf\u8e2a\u6587\u4ef6\u79fb\u52a8\u64cd\u4f5c\u3002 \u5982\u679c\u5728 Git \u4e2d\u91cd\u547d\u540d\u4e86\u67d0\u4e2a\u6587\u4ef6\uff0c\u4ed3\u5e93\u4e2d\u5b58\u50a8\u7684\u5143\u6570\u636e\u5e76\u4e0d\u4f1a\u4f53\u73b0\u51fa\u8fd9\u662f\u4e00\u6b21\u6539\u540d\u64cd\u4f5c\u3002 \u4e0d\u8fc7 Git \u975e\u5e38\u806a\u660e\uff0c\u5b83\u4f1a\u63a8\u65ad\u51fa\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 git log \u00b6 \u5728\u63d0\u4ea4\u4e86\u82e5\u5e72\u66f4\u65b0\uff0c\u53c8\u6216\u8005\u514b\u9686\u4e86\u67d0\u4e2a\u9879\u76ee\u4e4b\u540e\uff0c\u4f60\u4e5f\u8bb8\u60f3\u56de\u987e\u4e0b\u63d0\u4ea4\u5386\u53f2\u3002 \u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u6700\u7b80\u5355\u800c\u53c8\u6709\u6548\u7684\u5de5\u5177\u662f git log \u547d\u4ee4 git log --patch, \u5b83\u4f1a\u663e\u793a\u6bcf\u6b21\u63d0\u4ea4\u6240\u5f15\u5165\u7684\u5dee\u5f02\uff08\u6309 \u8865\u4e01 \u7684\u683c\u5f0f\u8f93\u51fa\uff09, \u4f60\u4e5f\u53ef\u4ee5\u9650\u5236\u663e\u793a\u7684\u65e5\u5fd7\u6761\u76ee\u6570\u91cf\uff0c\u4f8b\u5982\u4f7f\u7528 -2 \u9009\u9879\u6765\u53ea\u663e\u793a\u6700\u8fd1\u7684\u4e24\u6b21\u63d0\u4ea4\uff1a git log -p -2 git log --stat, \u6bcf\u6b21\u63d0\u4ea4\u7684\u7b80\u7565\u7edf\u8ba1\u4fe1\u606f, \u53ef\u4ee5\u4f7f\u7528 --stat \u9009\u9879 git log --relative-date, \u4f7f\u7528\u8f83\u77ed\u7684\u76f8\u5bf9\u65f6\u95f4\u800c\u4e0d\u662f\u5b8c\u6574\u683c\u5f0f\u663e\u793a\u65e5\u671f\uff08\u6bd4\u5982\u201c2 weeks ago\u201d\uff09 git log --name-status, \u663e\u793a\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664\u7684\u6587\u4ef6\u6e05\u5355 git log -oneline, --pretty=oneline --abbrev-commit \u5408\u7528\u7684\u7b80\u5199\u3002 git log --author author_name, \u663e\u793a\u6307\u5b9a\u4f5c\u8005\u7684\u63d0\u4ea4 git log --grep, \u641c\u7d22\u63d0\u4ea4\u8bf4\u660e\u4e2d\u7684\u5173\u952e\u5b57 git log -S function_name, \u53ea\u4f1a\u663e\u793a\u90a3\u4e9b\u6dfb\u52a0\u6216\u5220\u9664\u4e86\u8be5\u5b57\u7b26\u4e32\u7684\u63d0\u4ea4, \u5047\u8bbe\u4f60\u60f3\u627e\u51fa\u6dfb\u52a0\u6216\u5220\u9664\u4e86\u5bf9\u67d0\u4e00\u4e2a\u7279\u5b9a\u51fd\u6570\u7684\u5f15\u7528\u7684\u63d0\u4ea4\uff0c\u53ef\u4ee5\u8c03\u7528 \u4ee5\u4e0a\u7684\u591f\u7528\u4e86\uff0c\u66f4\u591a\u7684 https://git-scm.com/book/zh/v2/Git-\u57fa\u7840-\u67e5\u770b\u63d0\u4ea4\u5386\u53f2 git reset \u00b6 git reset HEAD [< file >], \u53d6\u6d88\u6682\u5b58\u7684\u6587\u4ef6 git stash \u00b6 \u5e0c\u671b\u56de\u5230\u4ee5\u524d\u7684\u7248\u672c\uff0c\u4f46\u53c8\u4e0d\u60f3\u628a\u73b0\u6709\u7684\u4ee3\u7801\u63d0\u4ea4\u3002 1. git stash \u521b\u5efa\u4e34\u65f6\u5de5\u4f5c\u53bb 2. git stash list \u67e5\u770b\u4fdd\u5b58\u7684\u5de5\u4f5c\u533a 3. git stash apply stash@{1} \u5e94\u7528\u54ea\u4e2a\u5de5\u4f5c\u533a 4. git stash pop \u5e94\u7528\u4e0a\u4e00\u4e2a\u5de5\u4f5c\u533a\u5e76\u4e14\u5220\u9664 5. git stash drop stash@{0} \u5220\u9664\u6307\u5b9a\u7684\u5de5\u4f5c\u533a 6. git stash clear \u5220\u9664\u6240\u6709\u7684\u5de5\u4f5c\u533a git checkout \u00b6 git checkout -- < file >, \u8bf7\u52a1\u5fc5\u8bb0\u5f97 git checkout -- < file > \u662f\u4e00\u4e2a\u5371\u9669\u7684\u547d\u4ee4 \u3002 \u4f60\u5bf9\u90a3\u4e2a\u6587\u4ef6\u5728\u672c\u5730\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4f1a\u6d88\u5931\u2014\u2014Git \u4f1a\u7528\u6700\u8fd1\u63d0\u4ea4\u7684\u7248\u672c\u8986\u76d6\u6389\u5b83\u3002 \u9664\u975e\u4f60\u786e\u5b9e\u6e05\u695a\u4e0d\u60f3\u8981\u5bf9\u90a3\u4e2a\u6587\u4ef6\u7684\u672c\u5730\u4fee\u6539\u4e86\uff0c\u5426\u5219\u8bf7\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e2a\u547d\u4ee4\u3002 git stash \u00b6 git stash: \u521b\u5efa\u4fdd\u5b58\u4e34\u65f6\u5de5\u4f5c\u533a git stash list: \u67e5\u770b\u4fdd\u5b58\u7684\u5de5\u4f5c\u533a git stash apply stash@{1}: \u5e94\u7528\u54ea\u4e2a\u5de5\u4f5c\u533a git stash pop: \u5e94\u7528\u4e0a\u4e00\u4e2a\u5de5\u4f5c\u533a\u5e76\u4e14\u5220\u9664 git stash drop stash@{0}: \u5220\u9664\u6307\u5b9a\u7684\u5de5\u4f5c\u533a git stash clear: \u5220\u9664\u6240\u6709\u7684\u5de5\u4f5c\u533a git remote \u00b6 \u8fd0\u884c git remote \u547d\u4ee4, \u5b83\u4f1a\u5217\u51fa\u4f60\u6307\u5b9a\u7684\u6bcf\u4e00\u4e2a\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u7b80\u5199\u3002 git remote -v, \u4f1a\u663e\u793a\u9700\u8981\u8bfb\u5199\u8fdc\u7a0b\u4ed3\u5e93\u4f7f\u7528\u7684 Git \u4fdd\u5b58\u7684\u7b80\u5199\u4e0e\u5176\u5bf9\u5e94\u7684 URL git remote add < shortname > < url >, \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8fdc\u7a0b Git \u4ed3\u5e93\uff0c\u540c\u65f6\u6307\u5b9a\u4e00\u4e2a\u65b9\u4fbf\u4f7f\u7528\u7684\u7b80\u5199 git remote show < remote >, \u67e5\u770b\u67d0\u4e00\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u66f4\u591a\u4fe1\u606f git remote rename, \u4fee\u6539\u4e00\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u7b80\u5199\u540d git remote rename pb paul\uff0c\u5c06 pb \u91cd\u547d\u540d\u4e3a paul git remote remove, \u79fb\u9664\u4e00\u4e2a\u8fdc\u7a0b\u4ed3\u5e93 \u4f60\u5df2\u7ecf\u4ece\u670d\u52a1\u5668\u4e0a\u642c\u8d70\u4e86\u6216\u4e0d\u518d\u60f3\u4f7f\u7528\u67d0\u4e00\u4e2a\u7279\u5b9a\u7684\u955c\u50cf\u4e86 \u53c8\u6216\u8005\u67d0\u4e00\u4e2a\u8d21\u732e\u8005\u4e0d\u518d\u8d21\u732e\u4e86\u2014\u2014\u53ef\u4ee5\u4f7f\u7528 git remote remove \u6216 git remote rm git fetch \u00b6 git fetch < remote >, \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u8bbf\u95ee\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u4ece\u4e2d\u62c9\u53d6\u6240\u6709\u4f60\u8fd8\u6ca1\u6709\u7684\u6570\u636e, \u6267\u884c\u5b8c\u6210\u540e\uff0c\u4f60\u5c06\u4f1a\u62e5\u6709\u90a3\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u6240\u6709\u5206\u652f\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u968f\u65f6\u5408\u5e76\u6216\u67e5\u770b\u3002 \u5982\u679c\u4f60\u4f7f\u7528 clone \u547d\u4ee4\u514b\u9686\u4e86\u4e00\u4e2a\u4ed3\u5e93\uff0c\u547d\u4ee4\u4f1a\u81ea\u52a8\u5c06\u5176\u6dfb\u52a0\u4e3a\u8fdc\u7a0b\u4ed3\u5e93\u5e76\u9ed8\u8ba4\u4ee5 \u201corigin\u201d \u4e3a\u7b80\u5199\u3002 \u6240\u4ee5\uff0cgit fetch origin \u4f1a\u6293\u53d6\u514b\u9686\uff08\u6216\u4e0a\u4e00\u6b21\u6293\u53d6\uff09\u540e\u65b0\u63a8\u9001\u7684\u6240\u6709\u5de5\u4f5c\u3002 \u5fc5\u987b\u6ce8\u610f git fetch \u547d\u4ee4\u53ea\u4f1a\u5c06\u6570\u636e\u4e0b\u8f7d\u5230\u4f60\u7684\u672c\u5730\u4ed3\u5e93\u2014\u2014\u5b83\u5e76\u4e0d\u4f1a\u81ea\u52a8\u5408\u5e76\u6216\u4fee\u6539\u4f60\u5f53\u524d\u7684\u5de5\u4f5c\u3002 \u5f53\u51c6\u5907\u597d\u65f6\u4f60\u5fc5\u987b\u624b\u52a8\u5c06\u5176\u5408\u5e76\u5165\u4f60\u7684\u5de5\u4f5c\u3002 git push \u00b6 git push origin master, \u53ea\u6709\u5f53\u4f60\u6709\u6240\u514b\u9686\u670d\u52a1\u5668\u7684\u5199\u5165\u6743\u9650\uff0c\u5e76\u4e14\u4e4b\u524d\u6ca1\u6709\u4eba\u63a8\u9001\u8fc7\u65f6\uff0c\u8fd9\u6761\u547d\u4ee4\u624d\u80fd\u751f\u6548\u3002 \u5f53\u4f60\u548c\u5176\u4ed6\u4eba\u5728\u540c\u4e00\u65f6\u95f4\u514b\u9686\uff0c\u4ed6\u4eec\u5148\u63a8\u9001\u5230\u4e0a\u6e38\u7136\u540e\u4f60\u518d\u63a8\u9001\u5230\u4e0a\u6e38\uff0c\u4f60\u7684\u63a8\u9001\u5c31\u4f1a\u6beb\u65e0\u7591\u95ee\u5730\u88ab\u62d2\u7edd\u3002 \u4f60\u5fc5\u987b\u5148\u6293\u53d6\u4ed6\u4eec\u7684\u5de5\u4f5c\u5e76\u5c06\u5176\u5408\u5e76\u8fdb\u4f60\u7684\u5de5\u4f5c\u540e\u624d\u80fd\u63a8\u9001\u3002 git tag \u00b6 git tag --lits, \u5217\u51fa\u5df2\u6709\u7684\u6807\u7b7e git tag -l \"v1.8.5*\", \u4f60\u4e5f\u53ef\u4ee5\u6309\u7167\u7279\u5b9a\u7684\u6a21\u5f0f\u67e5\u627e\u6807\u7b7e\u3002 \u4f8b\u5982\uff0cGit \u81ea\u8eab\u7684\u6e90\u4ee3\u7801\u4ed3\u5e93\u5305\u542b\u6807\u7b7e\u7684\u6570\u91cf\u8d85\u8fc7 500 \u4e2a\u3002 \u5982\u679c\u53ea\u5bf9 1.8.5 \u7cfb\u5217\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8fd0\u884c git tag -l \"v1.8.5*\" git tag -a v1.4 -m \"my version 1.4\", \u521b\u5efa\u9644\u6ce8\u6807\u7b7e(annotated) git show v1.4, \u6807\u7b7e\u4fe1\u606f\u548c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u63d0\u4ea4\u4fe1\u606f git tag v1.4-lw, \u521b\u5efa\u8f7b\u91cf\u6807\u7b7e(lightweight) \u8f7b\u91cf\u6807\u7b7e\u672c\u8d28\u4e0a\u662f\u5c06\u63d0\u4ea4\u6821\u9a8c\u548c\u5b58\u50a8\u5230\u4e00\u4e2a\u6587\u4ef6\u4e2d\u2014\u2014\u6ca1\u6709\u4fdd\u5b58\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f \u521b\u5efa\u8f7b\u91cf\u6807\u7b7e\uff0c\u4e0d\u9700\u8981\u4f7f\u7528 -a\u3001-s \u6216 -m \u9009\u9879\uff0c\u53ea\u9700\u8981\u63d0\u4f9b\u6807\u7b7e\u540d\u5b57 \u540e\u671f\u6253\u6807\u7b7e git tag -a v1.2 9fceb02, \u8981\u5728\u90a3\u4e2a\u63d0\u4ea4\u4e0a\u6253\u6807\u7b7e\uff0c\u4f60\u9700\u8981\u5728\u547d\u4ee4\u7684\u672b\u5c3e\u6307\u5b9a\u63d0\u4ea4\u7684\u6821\u9a8c\u548c\uff08\u6216\u90e8\u5206\u6821\u9a8c\u548c\uff09 \u5171\u4eab\u6807\u7b7e git push origin < tagname >, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgit push \u547d\u4ee4\u5e76\u4e0d\u4f1a\u4f20\u9001\u6807\u7b7e\u5230\u8fdc\u7a0b\u4ed3\u5e93\u670d\u52a1\u5668\u4e0a\u3002 \u5728\u521b\u5efa\u5b8c\u6807\u7b7e\u540e\u4f60\u5fc5\u987b\u663e\u5f0f\u5730\u63a8\u9001\u6807\u7b7e\u5230\u5171\u4eab\u670d\u52a1\u5668\u4e0a git push origin --tags, \u5982\u679c\u60f3\u8981\u4e00\u6b21\u6027\u63a8\u9001\u5f88\u591a\u6807\u7b7e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e26\u6709 --tags \u9009\u9879\u7684 git push \u547d\u4ee4\u3002 \u8fd9\u5c06\u4f1a\u628a\u6240\u6709\u4e0d\u5728\u8fdc\u7a0b\u4ed3\u5e93\u670d\u52a1\u5668\u4e0a\u7684\u6807\u7b7e\u5168\u90e8\u4f20\u9001\u5230\u90a3\u91cc \u4f7f\u7528 git push < remote > --tags \u63a8\u9001\u6807\u7b7e\u5e76\u4e0d\u4f1a\u533a\u5206\u8f7b\u91cf\u6807\u7b7e\u548c\u9644\u6ce8\u6807\u7b7e\uff0c \u6ca1\u6709\u7b80\u5355\u7684\u9009\u9879\u80fd\u591f\u8ba9\u4f60\u53ea\u9009\u62e9\u63a8\u9001\u4e00\u79cd\u6807\u7b7e\u3002 git tag -d < tagname >, \u5220\u9664\u6389\u4f60\u672c\u5730\u4ed3\u5e93\u4e0a\u7684\u6807\u7b7e \u6ce8\u610f\u4e0a\u8ff0\u547d\u4ee4\u5e76\u4e0d\u4f1a\u4ece\u4efb\u4f55\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u79fb\u9664\u8fd9\u4e2a\u6807\u7b7e\uff0c\u4f60\u5fc5\u987b\u7528 git push < remote > :refs/tags/< tagname > \u6765\u66f4\u65b0\u4f60\u7684\u8fdc\u7a0b\u4ed3\u5e93, \u4e0a\u9762\u8fd9\u79cd\u64cd\u4f5c\u7684\u542b\u4e49\u662f\uff0c\u5c06\u5192\u53f7\u524d\u9762\u7684\u7a7a\u503c\u63a8\u9001\u5230\u8fdc\u7a0b\u6807\u7b7e\u540d\uff0c\u4ece\u800c\u9ad8\u6548\u5730\u5220\u9664\u5b83\u3002 \u7b2c\u4e8c\u79cd\u66f4\u76f4\u89c2\u7684\u5220\u9664\u8fdc\u7a0b\u6807\u7b7e\u7684\u65b9\u5f0f\u662f\uff1a git push origin --delete < tagname > git \u5206\u652f \u00b6 git \u5206\u652f\u5de5\u4f5c\u539f\u7406\uff1a https://git-scm.com/book/zh/v2/Git-\u5206\u652f-\u5206\u652f\u7b80\u4ecb git branch \u00b6 git branch, \u5f97\u5230\u5f53\u524d\u6240\u6709\u5206\u652f git branch -v, \u67e5\u770b\u6bcf\u4e00\u4e2a\u5206\u652f\u7684\u6700\u540e\u4e00\u6b21\u63d0\u4ea4 git branch --merged, \u67e5\u770b\u54ea\u4e9b\u5206\u652f\u5df2\u7ecf\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f git branch --no-merged, \u67e5\u770b\u54ea\u4e9b\u5206\u652f\u5c1a\u672a\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f git branch --no-merged master\uff0c\u67e5\u770b\u54ea\u4e9b\u5206\u652f\u5c1a\u672a\u5408\u5e76\u5230master\u5206\u652f git branch < name >, \u521b\u5efa\u5206\u652f\uff0c\u4e3a\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u4ee5\u79fb\u52a8\u7684\u65b0\u7684\u6307\u9488 git branch -d < branchname >, \u5220\u9664\u5206\u652f git branch -u origin/serverfix, \u8bbe\u7f6e\u5df2\u6709\u7684\u672c\u5730\u5206\u652f\u8ddf\u8e2a\u4e00\u4e2a\u521a\u521a\u62c9\u53d6\u4e0b\u6765\u7684\u8fdc\u7a0b\u5206\u652f\uff0c\u6216\u8005\u60f3\u8981\u4fee\u6539\u6b63\u5728\u8ddf\u8e2a\u7684\u4e0a\u6e38\u5206\u652f\uff0c \u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u4f7f\u7528 -u \u6216 --set-upstream-to \u9009\u9879\u8fd0\u884c git branch \u6765\u663e\u5f0f\u5730\u8bbe\u7f6e git branch -vv, \u5982\u679c\u60f3\u8981\u67e5\u770b\u8bbe\u7f6e\u7684\u6240\u6709\u8ddf\u8e2a\u5206\u652f, \u8fd9\u4f1a\u5c06\u6240\u6709\u7684\u672c\u5730\u5206\u652f\u5217\u51fa\u6765\u5e76\u4e14\u5305\u542b\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u5982\u6bcf\u4e00\u4e2a\u5206\u652f\u6b63\u5728\u8ddf\u8e2a\u54ea\u4e2a\u8fdc\u7a0b\u5206\u652f\u4e0e\u672c\u5730\u5206\u652f\u662f\u5426\u662f\u9886\u5148\u3001\u843d\u540e\u6216\u662f\u90fd\u6709\u3002 \u9700\u8981\u91cd\u70b9\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u8fd9\u4e9b\u6570\u5b57\u7684\u503c\u6765\u81ea\u4e8e\u4f60\u4ece\u6bcf\u4e2a\u670d\u52a1\u5668\u4e0a\u6700\u540e\u4e00\u6b21\u6293\u53d6\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u547d\u4ee4\u5e76\u6ca1\u6709\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u5b83\u53ea\u4f1a\u544a\u8bc9\u4f60\u5173\u4e8e\u672c\u5730\u7f13\u5b58\u7684\u670d\u52a1\u5668\u6570\u636e\u3002 \u5982\u679c\u60f3\u8981\u7edf\u8ba1\u6700\u65b0\u7684\u9886\u5148\u4e0e\u843d\u540e\u6570\u5b57\uff0c\u9700\u8981\u5728\u8fd0\u884c\u6b64\u547d\u4ee4\u524d\u6293\u53d6\u6240\u6709\u7684\u8fdc\u7a0b\u4ed3\u5e93\u3002 \u53ef\u4ee5\u50cf\u8fd9\u6837\u505a\uff1agit fetch --all; git branch -vv git branch -f master HEAD~3 git checkout \u00b6 git checkout master, \u8fd9\u6761\u547d\u4ee4\u505a\u4e86\u4e24\u4ef6\u4e8b\u3002 \u4e00\u662f\u4f7f HEAD \u6307\u56de master \u5206\u652f \u4e8c\u662f\u5c06\u5de5\u4f5c\u76ee\u5f55\u6062\u590d\u6210 master \u5206\u652f\u6240\u6307\u5411\u7684\u5feb\u7167\u5185\u5bb9 git checkout -b < newbranchname >, \u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u540e\u7acb\u5373\u5207\u6362\u8fc7\u53bb git checkout -b < branch > < remote >/< branch >, \u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u540e\u7acb\u5373\u5207\u6362\u8fc7\u53bb, \u5e76\u4e14\u8ddf\u8e2a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5206\u652f git merge \u00b6 git merge < branchname >, \u5728\u5f53\u524d\u5206\u652f\u5408\u5e76\u53e6\u4e00\u4e2a\u5206\u652f\u7684\u4fee\u6539 \u5f53\u4f60\u8bd5\u56fe\u5408\u5e76\u4e24\u4e2a\u5206\u652f\u65f6\uff0c \u5982\u679c\u987a\u7740\u4e00\u4e2a\u5206\u652f\u8d70\u4e0b\u53bb\u80fd\u591f\u5230\u8fbe\u53e6\u4e00\u4e2a\u5206\u652f\uff0c\u90a3\u4e48 Git \u5728\u5408\u5e76\u4e24\u8005\u7684\u65f6\u5019\uff0c \u53ea\u4f1a\u7b80\u5355\u7684\u5c06\u6307\u9488\u5411\u524d\u63a8\u8fdb\uff08\u6307\u9488\u53f3\u79fb\uff09\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u5408\u5e76\u64cd\u4f5c\u6ca1\u6709\u9700\u8981\u89e3\u51b3\u7684\u5206\u6b67\u2014\u2014\u8fd9\u5c31\u53eb\u505a \u201c\u5feb\u8fdb\uff08fast-forward\uff09\u201d git add \u00b6 \u5408\u5e76\u65f6\u628a\u6709\u51b2\u7a81\u7684\u6587\u4ef6\u6807\u8bb0\u4e3a\u5df2\u89e3\u51b3\u72b6\u6001 git push \u00b6 git push origin --delete < branchname >, \u5220\u9664\u8fdc\u7a0b\u5206\u652f git rebase \u53d8\u57fa \u00b6 \u8be6\u60c5\uff1a https://git-scm.com/book/zh/v2/Git-\u5206\u652f-\u53d8\u57fa \u5982\u4f55\u907f\u514d\u6bcf\u6b21\u8f93\u5165\u5bc6\u7801 \u00b6 git config --global credential.helper cache, \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 HTTPS URL \u6765\u63a8\u9001\uff0cGit \u670d\u52a1\u5668\u4f1a\u8be2\u95ee\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4f1a\u5728\u7ec8\u7aef\u4e2d\u63d0\u793a\u670d\u52a1\u5668\u662f\u5426\u5141\u8bb8\u4f60\u8fdb\u884c\u63a8\u9001\u3002 \u5982\u679c\u4e0d\u60f3\u5728\u6bcf\u4e00\u6b21\u63a8\u9001\u65f6\u90fd\u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a \u201ccredential cache\u201d\u3002 \u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u5c06\u5176\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u51e0\u5206\u949f\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u8fd0\u884c git config --global credential.helper cache \u6765\u8bbe\u7f6e\u5b83\u3002","title":"\u4f7f\u7528git"},{"location":"tools/git/use_git/#_1","text":"https://learngitbranching.js.org/?locale=zh_CN","title":"\u5728\u7ebf\u7ec3\u4e60"},{"location":"tools/git/use_git/#gitbook","text":"https://git-scm.com/book/en/v2","title":"\u9605\u8bfbgit\u5b98\u7f51\u7684Book, \u987a\u624b\u8bb0\u5f55\u4e00\u4e0b\uff0c\u65b9\u4fbf\u67e5\u9605"},{"location":"tools/git/use_git/#git","text":"","title":"git \u57fa\u7840\u547d\u4ee4"},{"location":"tools/git/use_git/#git-config","text":"/etc/gitconfig \u6587\u4ef6: \u5305\u542b\u7cfb\u7edf\u4e0a\u6bcf\u4e00\u4e2a\u7528\u6237\u53ca\u4ed6\u4eec\u4ed3\u5e93\u7684\u901a\u7528\u914d\u7f6e\u3002 \u5982\u679c\u5728\u6267\u884c git config \u65f6\u5e26\u4e0a --system \u9009\u9879\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u8bfb\u5199\u8be5\u6587\u4ef6\u4e2d\u7684\u914d\u7f6e\u53d8\u91cf\u3002 \uff08\u7531\u4e8e\u5b83\u662f\u7cfb\u7edf\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u7ba1\u7406\u5458\u6216\u8d85\u7ea7\u7528\u6237\u6743\u9650\u6765\u4fee\u6539\u5b83\u3002\uff09 ~/.gitconfig \u6216 ~/.config/git/config \u6587\u4ef6\uff1a\u53ea\u9488\u5bf9\u5f53\u524d\u7528\u6237\u3002 \u4f60\u53ef\u4ee5\u4f20\u9012 --global \u9009\u9879\u8ba9 Git \u8bfb\u5199\u6b64\u6587\u4ef6\uff0c\u8fd9\u4f1a\u5bf9\u4f60\u7cfb\u7edf\u4e0a \u6240\u6709 \u7684\u4ed3\u5e93\u751f\u6548\u3002 \u5f53\u524d\u4f7f\u7528\u4ed3\u5e93\u7684 Git \u76ee\u5f55\u4e2d\u7684 config \u6587\u4ef6\uff08\u5373 .git/config\uff09\uff1a\u9488\u5bf9\u8be5\u4ed3\u5e93\u3002 \u4f60\u53ef\u4ee5\u4f20\u9012 --local \u9009\u9879\u8ba9 Git \u5f3a\u5236\u8bfb\u5199\u6b64\u6587\u4ef6\uff0c\u867d\u7136\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7528\u7684\u5c31\u662f\u5b83\u3002\u3002 \uff08\u5f53\u7136\uff0c\u4f60\u9700\u8981\u8fdb\u5165\u67d0\u4e2a Git \u4ed3\u5e93\u4e2d\u624d\u80fd\u8ba9\u8be5\u9009\u9879\u751f\u6548\u3002\uff09 \u914d\u7f6e\u7528\u6237\uff1a git config --global user.name \"username\" git config --global user.eamil \"email\" \u5f53\u4f60\u60f3\u9488\u5bf9\u7279\u5b9a\u9879\u76ee\u4f7f\u7528\u4e0d\u540c\u7684\u7528\u6237\u540d\u79f0\u4e0e\u90ae\u4ef6\u5730\u5740\u65f6\uff0c\u53ef\u4ee5\u5728\u90a3\u4e2a\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c\u6ca1\u6709 --global \u9009\u9879\u7684\u547d\u4ee4\u6765\u914d\u7f6e\u3002(--local \u76f8\u5f53\u4e8e\u4e0a\u8ff0\u7684local) \u914d\u7f6e\u7f16\u8f91\u5668 git config --global core.editor.vim \u5f53 Git \u9700\u8981\u4f60\u8f93\u5165\u4fe1\u606f\u65f6\u4f1a\u8c03\u7528\u5b83\u3002 \u5982\u679c\u672a\u914d\u7f6e\uff0cGit \u4f1a\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u9ed8\u8ba4\u7684\u6587\u672c\u7f16\u8f91\u5668\u3002 \u67e5\u770b\u914d\u7f6e\u4fe1\u606f \u67e5\u770b\u5f53\u524d\u4ed3\u5e93\u7684\u914d\u7f6e: git config --list git config < key >","title":"git config"},{"location":"tools/git/use_git/#git-help","text":"git help < verb > git < verb > --help man git-< verb >","title":"git help"},{"location":"tools/git/use_git/#git-init","text":"\u8be5\u547d\u4ee4\u5c06\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a .git \u7684\u5b50\u76ee\u5f55\uff0c\u8fd9\u4e2a\u5b50\u76ee\u5f55\u542b\u6709\u4f60\u521d\u59cb\u5316\u7684 Git \u4ed3\u5e93\u4e2d\u6240\u6709\u7684\u5fc5\u987b\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u662f Git \u4ed3\u5e93\u7684\u9aa8\u5e72\u3002 \u4f46\u662f\uff0c\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4ec5\u4ec5\u662f\u505a\u4e86\u4e00\u4e2a\u521d\u59cb\u5316\u7684\u64cd\u4f5c\uff0c\u4f60\u7684\u9879\u76ee\u91cc\u7684\u6587\u4ef6\u8fd8\u6ca1\u6709\u88ab\u8ddf\u8e2a\u3002","title":"git init"},{"location":"tools/git/use_git/#git-clone","text":"\u5982\u679c\u4f60\u60f3\u83b7\u5f97\u4e00\u4efd\u5df2\u7ecf\u5b58\u5728\u4e86\u7684 Git \u4ed3\u5e93\u7684\u62f7\u8d1d\uff0c\u6bd4\u5982\u8bf4\uff0c\u4f60\u60f3\u4e3a\u67d0\u4e2a\u5f00\u6e90\u9879\u76ee\u8d21\u732e\u81ea\u5df1\u7684\u4e00\u4efd\u529b\uff0c\u8fd9\u65f6\u5c31\u8981\u7528\u5230 git clone \u547d\u4ee4\u3002 \u5982\u679c\u4f60\u5bf9\u5176\u5b83\u7684 VCS \u7cfb\u7edf\uff08\u6bd4\u5982\u8bf4 Subversion\uff09\u5f88\u719f\u6089\uff0c\u8bf7\u7559\u5fc3\u4e00\u4e0b\u4f60\u6240\u4f7f\u7528\u7684\u547d\u4ee4\u662f\"clone\"\u800c\u4e0d\u662f\"checkout\"\u3002 \u8fd9\u662f Git \u533a\u522b\u4e8e\u5176\u5b83\u7248\u672c\u63a7\u5236\u7cfb\u7edf\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u6027\uff0cGit \u514b\u9686\u7684\u662f\u8be5 Git \u4ed3\u5e93\u670d\u52a1\u5668\u4e0a\u7684\u51e0\u4e4e\u6240\u6709\u6570\u636e\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u590d\u5236\u5b8c\u6210\u4f60\u7684\u5de5\u4f5c\u6240\u9700\u8981\u6587\u4ef6\u3002 \u5f53\u4f60\u6267\u884c git clone \u547d\u4ee4\u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u914d\u7f6e\u4e0b\u8fdc\u7a0b Git \u4ed3\u5e93\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6587\u4ef6\u7684\u6bcf\u4e00\u4e2a\u7248\u672c\u90fd\u5c06\u88ab\u62c9\u53d6\u4e0b\u6765\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u4f60\u7684\u670d\u52a1\u5668\u7684\u78c1\u76d8\u574f\u6389\u4e86\uff0c\u4f60\u901a\u5e38\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u514b\u9686\u4e0b\u6765\u7684\u7528\u6237\u7aef\u6765\u91cd\u5efa\u670d\u52a1\u5668\u4e0a\u7684\u4ed3\u5e93 \uff08\u867d\u7136\u53ef\u80fd\u4f1a\u4e22\u5931\u67d0\u4e9b\u670d\u52a1\u5668\u7aef\u7684\u94a9\u5b50\uff08hook\uff09\u8bbe\u7f6e\uff0c\u4f46\u662f\u6240\u6709\u7248\u672c\u7684\u6570\u636e\u4ecd\u5728. \u514b\u9686\u4ed3\u5e93\u7684\u547d\u4ee4\u662f git clone < url > \u514b\u9686\u8fdc\u7a0b\u4ed3\u5e93\u7684\u65f6\u5019\uff0c\u81ea\u5b9a\u4e49\u672c\u5730\u4ed3\u5e93\u7684\u540d\u5b57 git clone < url > newname","title":"git clone"},{"location":"tools/git/use_git/#git-status","text":"\u53ef\u4ee5\u7528 git status \u547d\u4ee4\u67e5\u770b\u54ea\u4e9b\u6587\u4ef6\u5904\u4e8e\u4ec0\u4e48\u72b6\u6001\u3002 git status --short \u5f97\u5230\u4e00\u79cd\u683c\u5f0f\u66f4\u4e3a\u7d27\u51d1\u7684\u8f93\u51fa","title":"git status"},{"location":"tools/git/use_git/#git-add","text":"\u8ddf\u8e2a\u4e00\u4e2a\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6\u3002 \u5c06\u8ddf\u8e2a\u7684\u6587\u4ef6\u653e\u5165\u6682\u5b58\u533a git add -A \u63d0\u4ea4\u6240\u6709\u53d8\u5316 git add -u \u63d0\u4ea4\u88ab\u4fee\u6539(modified)\u548c\u88ab\u5220\u9664(deleted)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u65b0\u6587\u4ef6(new) git add . \u63d0\u4ea4\u65b0\u6587\u4ef6(new)\u548c\u88ab\u4fee\u6539(modified)\u6587\u4ef6\uff0c\u4e0d\u5305\u62ec\u88ab\u5220\u9664(deleted)\u6587\u4ef6","title":"git add"},{"location":"tools/git/use_git/#gitignore","text":"\u4e00\u822c\u6211\u4eec\u603b\u4f1a\u6709\u4e9b\u6587\u4ef6\u65e0\u9700\u7eb3\u5165 Git \u7684\u7ba1\u7406\uff0c\u4e5f\u4e0d\u5e0c\u671b\u5b83\u4eec\u603b\u51fa\u73b0\u5728\u672a\u8ddf\u8e2a\u6587\u4ef6\u5217\u8868\u3002 \u901a\u5e38\u90fd\u662f\u4e9b\u81ea\u52a8\u751f\u6210\u7684\u6587\u4ef6\uff0c\u6bd4\u5982\u65e5\u5fd7\u6587\u4ef6\uff0c\u6216\u8005\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u521b\u5efa\u7684\u4e34\u65f6\u6587\u4ef6\u7b49\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a .gitignore \u7684\u6587\u4ef6\uff0c\u5217\u51fa\u8981\u5ffd\u7565\u7684\u6587\u4ef6\u7684\u6a21\u5f0f\u3002 *.[oa] *~ \u7b2c\u4e00\u884c\u544a\u8bc9 Git \u5ffd\u7565\u6240\u6709\u4ee5 .o \u6216 .a \u7ed3\u5c3e\u7684\u6587\u4ef6\u3002 \u7b2c\u4e8c\u884c\u544a\u8bc9 Git \u5ffd\u7565\u6240\u6709\u540d\u5b57\u4ee5\u6ce2\u6d6a\u7b26\uff08~\uff09\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u8bb8\u591a\u6587\u672c\u7f16\u8f91\u8f6f\u4ef6\uff08\u6bd4\u5982 Emacs\uff09\u90fd\u7528\u8fd9\u6837\u7684\u6587\u4ef6\u540d\u4fdd\u5b58\u526f\u672c\u3002 \u6587\u4ef6 .gitignore \u7684\u683c\u5f0f\u89c4\u8303\u5982\u4e0b\uff1a - \u6240\u6709\u7a7a\u884c\u6216\u8005\u4ee5 # \u5f00\u5934\u7684\u884c\u90fd\u4f1a\u88ab Git \u5ffd\u7565\u3002 - \u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 glob \u6a21\u5f0f\u5339\u914d\uff0c\u5b83\u4f1a\u9012\u5f52\u5730\u5e94\u7528\u5728\u6574\u4e2a\u5de5\u4f5c\u533a\u4e2d\u3002 - \u5339\u914d\u6a21\u5f0f\u53ef\u4ee5\u4ee5\uff08/\uff09\u5f00\u5934\u9632\u6b62\u9012\u5f52\u3002 - \u5339\u914d\u6a21\u5f0f\u53ef\u4ee5\u4ee5\uff08/\uff09\u7ed3\u5c3e\u6307\u5b9a\u76ee\u5f55\u3002 - \u8981\u5ffd\u7565\u6307\u5b9a\u6a21\u5f0f\u4ee5\u5916\u7684\u6587\u4ef6\u6216\u76ee\u5f55\uff0c\u53ef\u4ee5\u5728\u6a21\u5f0f\u524d\u52a0\u4e0a\u53f9\u53f7\uff08!\uff09\u53d6\u53cd\u3002","title":".gitignore"},{"location":"tools/git/use_git/#git-diff","text":"\u4e0d\u52a0\u53c2\u6570\u76f4\u63a5\u8f93\u5165 git diff : \u5c1a\u672a\u6682\u5b58\u7684\u6587\u4ef6\u66f4\u65b0\u4e86\u54ea\u4e9b\u90e8\u5206 git diff --staged : \u5df2\u6682\u5b58\u6587\u4ef6\u4e0e\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u6587\u4ef6\u5dee\u5f02 git diff --cached : --staged \u548c --cached \u662f\u540c\u4e49\u8bcd git diff --check \uff1a \u5b83\u5c06\u4f1a\u627e\u5230\u53ef\u80fd\u7684\u7a7a\u767d\u9519\u8bef\u5e76\u5c06\u5b83\u4eec\u4e3a\u4f60\u5217\u51fa\u6765","title":"git diff"},{"location":"tools/git/use_git/#git-commit","text":"git commit -m \"message\": \u63d0\u4ea4\u4ee3\u7801 \u8bf7\u8bb0\u4f4f\uff0c\u63d0\u4ea4\u65f6\u8bb0\u5f55\u7684\u662f\u653e\u5728\u6682\u5b58\u533a\u57df\u7684\u5feb\u7167\u3002 \u4efb\u4f55\u8fd8\u672a\u6682\u5b58\u6587\u4ef6\u7684\u4ecd\u7136\u4fdd\u6301\u5df2\u4fee\u6539\u72b6\u6001\uff0c\u53ef\u4ee5\u5728\u4e0b\u6b21\u63d0\u4ea4\u65f6\u7eb3\u5165\u7248\u672c\u7ba1\u7406\u3002 \u6bcf\u4e00\u6b21\u8fd0\u884c\u63d0\u4ea4\u64cd\u4f5c\uff0c\u90fd\u662f\u5bf9\u4f60\u9879\u76ee\u4f5c\u4e00\u6b21\u5feb\u7167\uff0c\u4ee5\u540e\u53ef\u4ee5\u56de\u5230\u8fd9\u4e2a\u72b6\u6001\uff0c\u6216\u8005\u8fdb\u884c\u6bd4\u8f83\u3002 git commit -m -a \"message\": \u5c3d\u7ba1\u4f7f\u7528\u6682\u5b58\u533a\u57df\u7684\u65b9\u5f0f\u53ef\u4ee5\u7cbe\u5fc3\u51c6\u5907\u8981\u63d0\u4ea4\u7684\u7ec6\u8282\uff0c\u4f46\u6709\u65f6\u5019\u8fd9\u4e48\u505a\u7565\u663e\u7e41\u7410\u3002 Git \u63d0\u4f9b\u4e86\u4e00\u4e2a\u8df3\u8fc7\u4f7f\u7528\u6682\u5b58\u533a\u57df\u7684\u65b9\u5f0f\uff0c \u53ea\u8981\u5728\u63d0\u4ea4\u7684\u65f6\u5019\uff0c\u7ed9 git commit \u52a0\u4e0a -a \u9009\u9879\uff0cGit \u5c31\u4f1a\u81ea\u52a8\u628a\u6240\u6709\u5df2\u7ecf\u8ddf\u8e2a\u8fc7\u7684\u6587\u4ef6\u6682\u5b58\u8d77\u6765\u4e00\u5e76\u63d0\u4ea4\u3002 git commit -amend: \u4fee\u6539\u63d0\u4ea4","title":"git commit"},{"location":"tools/git/use_git/#git-rm","text":"git rm file: \u4ece\u5df2\u8ddf\u8e2a\u6587\u4ef6\u6e05\u5355\u4e2d\u79fb\u9664\uff08\u786e\u5207\u5730\u8bf4\uff0c\u662f\u4ece\u6682\u5b58\u533a\u57df\u79fb\u9664\uff09, \u5e76\u8fde\u5e26\u4ece\u5de5\u4f5c\u76ee\u5f55\u4e2d\u5220\u9664\u6307\u5b9a\u7684\u6587\u4ef6 git rm -f file: \u5982\u679c\u8981\u5220\u9664\u4e4b\u524d\u4fee\u6539\u8fc7\u6216\u5df2\u7ecf\u653e\u5230\u6682\u5b58\u533a\u7684\u6587\u4ef6\uff0c\u5219\u5fc5\u987b\u4f7f\u7528\u5f3a\u5236\u5220\u9664\u9009\u9879 -f\uff08\u8bd1\u6ce8\uff1a\u5373 force \u7684\u9996\u5b57\u6bcd\uff09 git rm --cached file: \u8ba9\u6587\u4ef6\u4fdd\u7559\u5728\u78c1\u76d8\uff0c\u4f46\u662f\u5e76\u4e0d\u60f3\u8ba9 Git \u7ee7\u7eed\u8ddf\u8e2a\u3002","title":"git rm"},{"location":"tools/git/use_git/#git-mv","text":"git mv README.md README \u76f8\u5f53\u4e8e mv README.md README git rm README.md git add README \u4e0d\u50cf\u5176\u5b83\u7684 VCS \u7cfb\u7edf\uff0cGit \u5e76\u4e0d\u663e\u5f0f\u8ddf\u8e2a\u6587\u4ef6\u79fb\u52a8\u64cd\u4f5c\u3002 \u5982\u679c\u5728 Git \u4e2d\u91cd\u547d\u540d\u4e86\u67d0\u4e2a\u6587\u4ef6\uff0c\u4ed3\u5e93\u4e2d\u5b58\u50a8\u7684\u5143\u6570\u636e\u5e76\u4e0d\u4f1a\u4f53\u73b0\u51fa\u8fd9\u662f\u4e00\u6b21\u6539\u540d\u64cd\u4f5c\u3002 \u4e0d\u8fc7 Git \u975e\u5e38\u806a\u660e\uff0c\u5b83\u4f1a\u63a8\u65ad\u51fa\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u3002","title":"git mv"},{"location":"tools/git/use_git/#git-log","text":"\u5728\u63d0\u4ea4\u4e86\u82e5\u5e72\u66f4\u65b0\uff0c\u53c8\u6216\u8005\u514b\u9686\u4e86\u67d0\u4e2a\u9879\u76ee\u4e4b\u540e\uff0c\u4f60\u4e5f\u8bb8\u60f3\u56de\u987e\u4e0b\u63d0\u4ea4\u5386\u53f2\u3002 \u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u6700\u7b80\u5355\u800c\u53c8\u6709\u6548\u7684\u5de5\u5177\u662f git log \u547d\u4ee4 git log --patch, \u5b83\u4f1a\u663e\u793a\u6bcf\u6b21\u63d0\u4ea4\u6240\u5f15\u5165\u7684\u5dee\u5f02\uff08\u6309 \u8865\u4e01 \u7684\u683c\u5f0f\u8f93\u51fa\uff09, \u4f60\u4e5f\u53ef\u4ee5\u9650\u5236\u663e\u793a\u7684\u65e5\u5fd7\u6761\u76ee\u6570\u91cf\uff0c\u4f8b\u5982\u4f7f\u7528 -2 \u9009\u9879\u6765\u53ea\u663e\u793a\u6700\u8fd1\u7684\u4e24\u6b21\u63d0\u4ea4\uff1a git log -p -2 git log --stat, \u6bcf\u6b21\u63d0\u4ea4\u7684\u7b80\u7565\u7edf\u8ba1\u4fe1\u606f, \u53ef\u4ee5\u4f7f\u7528 --stat \u9009\u9879 git log --relative-date, \u4f7f\u7528\u8f83\u77ed\u7684\u76f8\u5bf9\u65f6\u95f4\u800c\u4e0d\u662f\u5b8c\u6574\u683c\u5f0f\u663e\u793a\u65e5\u671f\uff08\u6bd4\u5982\u201c2 weeks ago\u201d\uff09 git log --name-status, \u663e\u793a\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664\u7684\u6587\u4ef6\u6e05\u5355 git log -oneline, --pretty=oneline --abbrev-commit \u5408\u7528\u7684\u7b80\u5199\u3002 git log --author author_name, \u663e\u793a\u6307\u5b9a\u4f5c\u8005\u7684\u63d0\u4ea4 git log --grep, \u641c\u7d22\u63d0\u4ea4\u8bf4\u660e\u4e2d\u7684\u5173\u952e\u5b57 git log -S function_name, \u53ea\u4f1a\u663e\u793a\u90a3\u4e9b\u6dfb\u52a0\u6216\u5220\u9664\u4e86\u8be5\u5b57\u7b26\u4e32\u7684\u63d0\u4ea4, \u5047\u8bbe\u4f60\u60f3\u627e\u51fa\u6dfb\u52a0\u6216\u5220\u9664\u4e86\u5bf9\u67d0\u4e00\u4e2a\u7279\u5b9a\u51fd\u6570\u7684\u5f15\u7528\u7684\u63d0\u4ea4\uff0c\u53ef\u4ee5\u8c03\u7528 \u4ee5\u4e0a\u7684\u591f\u7528\u4e86\uff0c\u66f4\u591a\u7684 https://git-scm.com/book/zh/v2/Git-\u57fa\u7840-\u67e5\u770b\u63d0\u4ea4\u5386\u53f2","title":"git log"},{"location":"tools/git/use_git/#git-reset","text":"git reset HEAD [< file >], \u53d6\u6d88\u6682\u5b58\u7684\u6587\u4ef6","title":"git reset"},{"location":"tools/git/use_git/#git-stash","text":"\u5e0c\u671b\u56de\u5230\u4ee5\u524d\u7684\u7248\u672c\uff0c\u4f46\u53c8\u4e0d\u60f3\u628a\u73b0\u6709\u7684\u4ee3\u7801\u63d0\u4ea4\u3002 1. git stash \u521b\u5efa\u4e34\u65f6\u5de5\u4f5c\u53bb 2. git stash list \u67e5\u770b\u4fdd\u5b58\u7684\u5de5\u4f5c\u533a 3. git stash apply stash@{1} \u5e94\u7528\u54ea\u4e2a\u5de5\u4f5c\u533a 4. git stash pop \u5e94\u7528\u4e0a\u4e00\u4e2a\u5de5\u4f5c\u533a\u5e76\u4e14\u5220\u9664 5. git stash drop stash@{0} \u5220\u9664\u6307\u5b9a\u7684\u5de5\u4f5c\u533a 6. git stash clear \u5220\u9664\u6240\u6709\u7684\u5de5\u4f5c\u533a","title":"git stash"},{"location":"tools/git/use_git/#git-checkout","text":"git checkout -- < file >, \u8bf7\u52a1\u5fc5\u8bb0\u5f97 git checkout -- < file > \u662f\u4e00\u4e2a\u5371\u9669\u7684\u547d\u4ee4 \u3002 \u4f60\u5bf9\u90a3\u4e2a\u6587\u4ef6\u5728\u672c\u5730\u7684\u4efb\u4f55\u4fee\u6539\u90fd\u4f1a\u6d88\u5931\u2014\u2014Git \u4f1a\u7528\u6700\u8fd1\u63d0\u4ea4\u7684\u7248\u672c\u8986\u76d6\u6389\u5b83\u3002 \u9664\u975e\u4f60\u786e\u5b9e\u6e05\u695a\u4e0d\u60f3\u8981\u5bf9\u90a3\u4e2a\u6587\u4ef6\u7684\u672c\u5730\u4fee\u6539\u4e86\uff0c\u5426\u5219\u8bf7\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e2a\u547d\u4ee4\u3002","title":"git checkout"},{"location":"tools/git/use_git/#git-stash_1","text":"git stash: \u521b\u5efa\u4fdd\u5b58\u4e34\u65f6\u5de5\u4f5c\u533a git stash list: \u67e5\u770b\u4fdd\u5b58\u7684\u5de5\u4f5c\u533a git stash apply stash@{1}: \u5e94\u7528\u54ea\u4e2a\u5de5\u4f5c\u533a git stash pop: \u5e94\u7528\u4e0a\u4e00\u4e2a\u5de5\u4f5c\u533a\u5e76\u4e14\u5220\u9664 git stash drop stash@{0}: \u5220\u9664\u6307\u5b9a\u7684\u5de5\u4f5c\u533a git stash clear: \u5220\u9664\u6240\u6709\u7684\u5de5\u4f5c\u533a","title":"git stash"},{"location":"tools/git/use_git/#git-remote","text":"\u8fd0\u884c git remote \u547d\u4ee4, \u5b83\u4f1a\u5217\u51fa\u4f60\u6307\u5b9a\u7684\u6bcf\u4e00\u4e2a\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u7b80\u5199\u3002 git remote -v, \u4f1a\u663e\u793a\u9700\u8981\u8bfb\u5199\u8fdc\u7a0b\u4ed3\u5e93\u4f7f\u7528\u7684 Git \u4fdd\u5b58\u7684\u7b80\u5199\u4e0e\u5176\u5bf9\u5e94\u7684 URL git remote add < shortname > < url >, \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8fdc\u7a0b Git \u4ed3\u5e93\uff0c\u540c\u65f6\u6307\u5b9a\u4e00\u4e2a\u65b9\u4fbf\u4f7f\u7528\u7684\u7b80\u5199 git remote show < remote >, \u67e5\u770b\u67d0\u4e00\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u66f4\u591a\u4fe1\u606f git remote rename, \u4fee\u6539\u4e00\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u7b80\u5199\u540d git remote rename pb paul\uff0c\u5c06 pb \u91cd\u547d\u540d\u4e3a paul git remote remove, \u79fb\u9664\u4e00\u4e2a\u8fdc\u7a0b\u4ed3\u5e93 \u4f60\u5df2\u7ecf\u4ece\u670d\u52a1\u5668\u4e0a\u642c\u8d70\u4e86\u6216\u4e0d\u518d\u60f3\u4f7f\u7528\u67d0\u4e00\u4e2a\u7279\u5b9a\u7684\u955c\u50cf\u4e86 \u53c8\u6216\u8005\u67d0\u4e00\u4e2a\u8d21\u732e\u8005\u4e0d\u518d\u8d21\u732e\u4e86\u2014\u2014\u53ef\u4ee5\u4f7f\u7528 git remote remove \u6216 git remote rm","title":"git remote"},{"location":"tools/git/use_git/#git-fetch","text":"git fetch < remote >, \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u8bbf\u95ee\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u4ece\u4e2d\u62c9\u53d6\u6240\u6709\u4f60\u8fd8\u6ca1\u6709\u7684\u6570\u636e, \u6267\u884c\u5b8c\u6210\u540e\uff0c\u4f60\u5c06\u4f1a\u62e5\u6709\u90a3\u4e2a\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u6240\u6709\u5206\u652f\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u968f\u65f6\u5408\u5e76\u6216\u67e5\u770b\u3002 \u5982\u679c\u4f60\u4f7f\u7528 clone \u547d\u4ee4\u514b\u9686\u4e86\u4e00\u4e2a\u4ed3\u5e93\uff0c\u547d\u4ee4\u4f1a\u81ea\u52a8\u5c06\u5176\u6dfb\u52a0\u4e3a\u8fdc\u7a0b\u4ed3\u5e93\u5e76\u9ed8\u8ba4\u4ee5 \u201corigin\u201d \u4e3a\u7b80\u5199\u3002 \u6240\u4ee5\uff0cgit fetch origin \u4f1a\u6293\u53d6\u514b\u9686\uff08\u6216\u4e0a\u4e00\u6b21\u6293\u53d6\uff09\u540e\u65b0\u63a8\u9001\u7684\u6240\u6709\u5de5\u4f5c\u3002 \u5fc5\u987b\u6ce8\u610f git fetch \u547d\u4ee4\u53ea\u4f1a\u5c06\u6570\u636e\u4e0b\u8f7d\u5230\u4f60\u7684\u672c\u5730\u4ed3\u5e93\u2014\u2014\u5b83\u5e76\u4e0d\u4f1a\u81ea\u52a8\u5408\u5e76\u6216\u4fee\u6539\u4f60\u5f53\u524d\u7684\u5de5\u4f5c\u3002 \u5f53\u51c6\u5907\u597d\u65f6\u4f60\u5fc5\u987b\u624b\u52a8\u5c06\u5176\u5408\u5e76\u5165\u4f60\u7684\u5de5\u4f5c\u3002","title":"git fetch"},{"location":"tools/git/use_git/#git-push","text":"git push origin master, \u53ea\u6709\u5f53\u4f60\u6709\u6240\u514b\u9686\u670d\u52a1\u5668\u7684\u5199\u5165\u6743\u9650\uff0c\u5e76\u4e14\u4e4b\u524d\u6ca1\u6709\u4eba\u63a8\u9001\u8fc7\u65f6\uff0c\u8fd9\u6761\u547d\u4ee4\u624d\u80fd\u751f\u6548\u3002 \u5f53\u4f60\u548c\u5176\u4ed6\u4eba\u5728\u540c\u4e00\u65f6\u95f4\u514b\u9686\uff0c\u4ed6\u4eec\u5148\u63a8\u9001\u5230\u4e0a\u6e38\u7136\u540e\u4f60\u518d\u63a8\u9001\u5230\u4e0a\u6e38\uff0c\u4f60\u7684\u63a8\u9001\u5c31\u4f1a\u6beb\u65e0\u7591\u95ee\u5730\u88ab\u62d2\u7edd\u3002 \u4f60\u5fc5\u987b\u5148\u6293\u53d6\u4ed6\u4eec\u7684\u5de5\u4f5c\u5e76\u5c06\u5176\u5408\u5e76\u8fdb\u4f60\u7684\u5de5\u4f5c\u540e\u624d\u80fd\u63a8\u9001\u3002","title":"git push"},{"location":"tools/git/use_git/#git-tag","text":"git tag --lits, \u5217\u51fa\u5df2\u6709\u7684\u6807\u7b7e git tag -l \"v1.8.5*\", \u4f60\u4e5f\u53ef\u4ee5\u6309\u7167\u7279\u5b9a\u7684\u6a21\u5f0f\u67e5\u627e\u6807\u7b7e\u3002 \u4f8b\u5982\uff0cGit \u81ea\u8eab\u7684\u6e90\u4ee3\u7801\u4ed3\u5e93\u5305\u542b\u6807\u7b7e\u7684\u6570\u91cf\u8d85\u8fc7 500 \u4e2a\u3002 \u5982\u679c\u53ea\u5bf9 1.8.5 \u7cfb\u5217\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8fd0\u884c git tag -l \"v1.8.5*\" git tag -a v1.4 -m \"my version 1.4\", \u521b\u5efa\u9644\u6ce8\u6807\u7b7e(annotated) git show v1.4, \u6807\u7b7e\u4fe1\u606f\u548c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u63d0\u4ea4\u4fe1\u606f git tag v1.4-lw, \u521b\u5efa\u8f7b\u91cf\u6807\u7b7e(lightweight) \u8f7b\u91cf\u6807\u7b7e\u672c\u8d28\u4e0a\u662f\u5c06\u63d0\u4ea4\u6821\u9a8c\u548c\u5b58\u50a8\u5230\u4e00\u4e2a\u6587\u4ef6\u4e2d\u2014\u2014\u6ca1\u6709\u4fdd\u5b58\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f \u521b\u5efa\u8f7b\u91cf\u6807\u7b7e\uff0c\u4e0d\u9700\u8981\u4f7f\u7528 -a\u3001-s \u6216 -m \u9009\u9879\uff0c\u53ea\u9700\u8981\u63d0\u4f9b\u6807\u7b7e\u540d\u5b57 \u540e\u671f\u6253\u6807\u7b7e git tag -a v1.2 9fceb02, \u8981\u5728\u90a3\u4e2a\u63d0\u4ea4\u4e0a\u6253\u6807\u7b7e\uff0c\u4f60\u9700\u8981\u5728\u547d\u4ee4\u7684\u672b\u5c3e\u6307\u5b9a\u63d0\u4ea4\u7684\u6821\u9a8c\u548c\uff08\u6216\u90e8\u5206\u6821\u9a8c\u548c\uff09 \u5171\u4eab\u6807\u7b7e git push origin < tagname >, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cgit push \u547d\u4ee4\u5e76\u4e0d\u4f1a\u4f20\u9001\u6807\u7b7e\u5230\u8fdc\u7a0b\u4ed3\u5e93\u670d\u52a1\u5668\u4e0a\u3002 \u5728\u521b\u5efa\u5b8c\u6807\u7b7e\u540e\u4f60\u5fc5\u987b\u663e\u5f0f\u5730\u63a8\u9001\u6807\u7b7e\u5230\u5171\u4eab\u670d\u52a1\u5668\u4e0a git push origin --tags, \u5982\u679c\u60f3\u8981\u4e00\u6b21\u6027\u63a8\u9001\u5f88\u591a\u6807\u7b7e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5e26\u6709 --tags \u9009\u9879\u7684 git push \u547d\u4ee4\u3002 \u8fd9\u5c06\u4f1a\u628a\u6240\u6709\u4e0d\u5728\u8fdc\u7a0b\u4ed3\u5e93\u670d\u52a1\u5668\u4e0a\u7684\u6807\u7b7e\u5168\u90e8\u4f20\u9001\u5230\u90a3\u91cc \u4f7f\u7528 git push < remote > --tags \u63a8\u9001\u6807\u7b7e\u5e76\u4e0d\u4f1a\u533a\u5206\u8f7b\u91cf\u6807\u7b7e\u548c\u9644\u6ce8\u6807\u7b7e\uff0c \u6ca1\u6709\u7b80\u5355\u7684\u9009\u9879\u80fd\u591f\u8ba9\u4f60\u53ea\u9009\u62e9\u63a8\u9001\u4e00\u79cd\u6807\u7b7e\u3002 git tag -d < tagname >, \u5220\u9664\u6389\u4f60\u672c\u5730\u4ed3\u5e93\u4e0a\u7684\u6807\u7b7e \u6ce8\u610f\u4e0a\u8ff0\u547d\u4ee4\u5e76\u4e0d\u4f1a\u4ece\u4efb\u4f55\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u79fb\u9664\u8fd9\u4e2a\u6807\u7b7e\uff0c\u4f60\u5fc5\u987b\u7528 git push < remote > :refs/tags/< tagname > \u6765\u66f4\u65b0\u4f60\u7684\u8fdc\u7a0b\u4ed3\u5e93, \u4e0a\u9762\u8fd9\u79cd\u64cd\u4f5c\u7684\u542b\u4e49\u662f\uff0c\u5c06\u5192\u53f7\u524d\u9762\u7684\u7a7a\u503c\u63a8\u9001\u5230\u8fdc\u7a0b\u6807\u7b7e\u540d\uff0c\u4ece\u800c\u9ad8\u6548\u5730\u5220\u9664\u5b83\u3002 \u7b2c\u4e8c\u79cd\u66f4\u76f4\u89c2\u7684\u5220\u9664\u8fdc\u7a0b\u6807\u7b7e\u7684\u65b9\u5f0f\u662f\uff1a git push origin --delete < tagname >","title":"git tag"},{"location":"tools/git/use_git/#git_1","text":"git \u5206\u652f\u5de5\u4f5c\u539f\u7406\uff1a https://git-scm.com/book/zh/v2/Git-\u5206\u652f-\u5206\u652f\u7b80\u4ecb","title":"git \u5206\u652f"},{"location":"tools/git/use_git/#git-branch","text":"git branch, \u5f97\u5230\u5f53\u524d\u6240\u6709\u5206\u652f git branch -v, \u67e5\u770b\u6bcf\u4e00\u4e2a\u5206\u652f\u7684\u6700\u540e\u4e00\u6b21\u63d0\u4ea4 git branch --merged, \u67e5\u770b\u54ea\u4e9b\u5206\u652f\u5df2\u7ecf\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f git branch --no-merged, \u67e5\u770b\u54ea\u4e9b\u5206\u652f\u5c1a\u672a\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f git branch --no-merged master\uff0c\u67e5\u770b\u54ea\u4e9b\u5206\u652f\u5c1a\u672a\u5408\u5e76\u5230master\u5206\u652f git branch < name >, \u521b\u5efa\u5206\u652f\uff0c\u4e3a\u4f60\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u4ee5\u79fb\u52a8\u7684\u65b0\u7684\u6307\u9488 git branch -d < branchname >, \u5220\u9664\u5206\u652f git branch -u origin/serverfix, \u8bbe\u7f6e\u5df2\u6709\u7684\u672c\u5730\u5206\u652f\u8ddf\u8e2a\u4e00\u4e2a\u521a\u521a\u62c9\u53d6\u4e0b\u6765\u7684\u8fdc\u7a0b\u5206\u652f\uff0c\u6216\u8005\u60f3\u8981\u4fee\u6539\u6b63\u5728\u8ddf\u8e2a\u7684\u4e0a\u6e38\u5206\u652f\uff0c \u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u4f7f\u7528 -u \u6216 --set-upstream-to \u9009\u9879\u8fd0\u884c git branch \u6765\u663e\u5f0f\u5730\u8bbe\u7f6e git branch -vv, \u5982\u679c\u60f3\u8981\u67e5\u770b\u8bbe\u7f6e\u7684\u6240\u6709\u8ddf\u8e2a\u5206\u652f, \u8fd9\u4f1a\u5c06\u6240\u6709\u7684\u672c\u5730\u5206\u652f\u5217\u51fa\u6765\u5e76\u4e14\u5305\u542b\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u5982\u6bcf\u4e00\u4e2a\u5206\u652f\u6b63\u5728\u8ddf\u8e2a\u54ea\u4e2a\u8fdc\u7a0b\u5206\u652f\u4e0e\u672c\u5730\u5206\u652f\u662f\u5426\u662f\u9886\u5148\u3001\u843d\u540e\u6216\u662f\u90fd\u6709\u3002 \u9700\u8981\u91cd\u70b9\u6ce8\u610f\u7684\u4e00\u70b9\u662f\u8fd9\u4e9b\u6570\u5b57\u7684\u503c\u6765\u81ea\u4e8e\u4f60\u4ece\u6bcf\u4e2a\u670d\u52a1\u5668\u4e0a\u6700\u540e\u4e00\u6b21\u6293\u53d6\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u547d\u4ee4\u5e76\u6ca1\u6709\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u5b83\u53ea\u4f1a\u544a\u8bc9\u4f60\u5173\u4e8e\u672c\u5730\u7f13\u5b58\u7684\u670d\u52a1\u5668\u6570\u636e\u3002 \u5982\u679c\u60f3\u8981\u7edf\u8ba1\u6700\u65b0\u7684\u9886\u5148\u4e0e\u843d\u540e\u6570\u5b57\uff0c\u9700\u8981\u5728\u8fd0\u884c\u6b64\u547d\u4ee4\u524d\u6293\u53d6\u6240\u6709\u7684\u8fdc\u7a0b\u4ed3\u5e93\u3002 \u53ef\u4ee5\u50cf\u8fd9\u6837\u505a\uff1agit fetch --all; git branch -vv git branch -f master HEAD~3","title":"git branch"},{"location":"tools/git/use_git/#git-checkout_1","text":"git checkout master, \u8fd9\u6761\u547d\u4ee4\u505a\u4e86\u4e24\u4ef6\u4e8b\u3002 \u4e00\u662f\u4f7f HEAD \u6307\u56de master \u5206\u652f \u4e8c\u662f\u5c06\u5de5\u4f5c\u76ee\u5f55\u6062\u590d\u6210 master \u5206\u652f\u6240\u6307\u5411\u7684\u5feb\u7167\u5185\u5bb9 git checkout -b < newbranchname >, \u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u540e\u7acb\u5373\u5207\u6362\u8fc7\u53bb git checkout -b < branch > < remote >/< branch >, \u521b\u5efa\u4e00\u4e2a\u65b0\u5206\u652f\u540e\u7acb\u5373\u5207\u6362\u8fc7\u53bb, \u5e76\u4e14\u8ddf\u8e2a\u8fdc\u7a0b\u4ed3\u5e93\u7684\u5206\u652f","title":"git checkout"},{"location":"tools/git/use_git/#git-merge","text":"git merge < branchname >, \u5728\u5f53\u524d\u5206\u652f\u5408\u5e76\u53e6\u4e00\u4e2a\u5206\u652f\u7684\u4fee\u6539 \u5f53\u4f60\u8bd5\u56fe\u5408\u5e76\u4e24\u4e2a\u5206\u652f\u65f6\uff0c \u5982\u679c\u987a\u7740\u4e00\u4e2a\u5206\u652f\u8d70\u4e0b\u53bb\u80fd\u591f\u5230\u8fbe\u53e6\u4e00\u4e2a\u5206\u652f\uff0c\u90a3\u4e48 Git \u5728\u5408\u5e76\u4e24\u8005\u7684\u65f6\u5019\uff0c \u53ea\u4f1a\u7b80\u5355\u7684\u5c06\u6307\u9488\u5411\u524d\u63a8\u8fdb\uff08\u6307\u9488\u53f3\u79fb\uff09\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u5408\u5e76\u64cd\u4f5c\u6ca1\u6709\u9700\u8981\u89e3\u51b3\u7684\u5206\u6b67\u2014\u2014\u8fd9\u5c31\u53eb\u505a \u201c\u5feb\u8fdb\uff08fast-forward\uff09\u201d","title":"git merge"},{"location":"tools/git/use_git/#git-add_1","text":"\u5408\u5e76\u65f6\u628a\u6709\u51b2\u7a81\u7684\u6587\u4ef6\u6807\u8bb0\u4e3a\u5df2\u89e3\u51b3\u72b6\u6001","title":"git add"},{"location":"tools/git/use_git/#git-push_1","text":"git push origin --delete < branchname >, \u5220\u9664\u8fdc\u7a0b\u5206\u652f","title":"git push"},{"location":"tools/git/use_git/#git-rebase","text":"\u8be6\u60c5\uff1a https://git-scm.com/book/zh/v2/Git-\u5206\u652f-\u53d8\u57fa","title":"git rebase \u53d8\u57fa"},{"location":"tools/git/use_git/#_2","text":"git config --global credential.helper cache, \u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 HTTPS URL \u6765\u63a8\u9001\uff0cGit \u670d\u52a1\u5668\u4f1a\u8be2\u95ee\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5b83\u4f1a\u5728\u7ec8\u7aef\u4e2d\u63d0\u793a\u670d\u52a1\u5668\u662f\u5426\u5141\u8bb8\u4f60\u8fdb\u884c\u63a8\u9001\u3002 \u5982\u679c\u4e0d\u60f3\u5728\u6bcf\u4e00\u6b21\u63a8\u9001\u65f6\u90fd\u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a \u201ccredential cache\u201d\u3002 \u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u5c06\u5176\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u51e0\u5206\u949f\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u8fd0\u884c git config --global credential.helper cache \u6765\u8bbe\u7f6e\u5b83\u3002","title":"\u5982\u4f55\u907f\u514d\u6bcf\u6b21\u8f93\u5165\u5bc6\u7801"},{"location":"%E5%85%B6%E4%BB%96/Ubuntu%2020.04%E4%BF%AE%E6%94%B9ip%E5%9C%B0%E5%9D%80/","text":"\u4fee\u6539yaml\u914d\u7f6e\u6587\u4ef6 sudo vi /etc/netplan/00-installer-config.yaml network: ethernets: ens33: #\u914d\u7f6e\u7684\u7f51\u5361\u7684\u540d\u79f0 addresses: [192.168.31.215/24] #\u914d\u7f6e\u7684\u9759\u6001ip\u5730\u5740\u548c\u63a9\u7801 dhcp4: no #\u5173\u95edDHCP\uff0c\u5982\u679c\u9700\u8981\u6253\u5f00DHCP\u5219\u5199yes optional: true gateway4: 192.168.31.1 #\u7f51\u5173\u5730\u5740 nameservers: addresses: [192.168.31.1,114.114.114.114] #DNS\u670d\u52a1\u5668\u5730\u5740\uff0c\u591a\u4e2aDNS\u670d\u52a1\u5668\u5730\u5740\u9700\u8981\u7528\u82f1\u6587\u9017\u53f7\u5206\u9694\u5f00 version: 2 renderer: networkd #\u6307\u5b9a\u540e\u7aef\u91c7\u7528systemd-networkd\u6216\u8005Network Manager\uff0c\u53ef\u4e0d\u586b\u5199\u5219\u9ed8\u8ba4\u4f7f\u7528systemd-workd \u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u914d\u7f6e\u597d\u4e4b\u540e\u4fdd\u5b58\u6587\u4ef6 \u4f7f\u914d\u7f6e\u7684ip\u5730\u5740\u751f\u6548 sudo netplan apply \u597d\u4e86\uff0c\u4f7f\u7528ifconfig\u547d\u4ee4\u67e5\u770b\u914d\u7f6e\u7684\u65b0ip\u5730\u5740\u662f\u5426\u751f\u6548\u4e86\u5427 \u6ce8\u610f\u4e8b\u9879 1\u3001ip\u5730\u5740\u548cDNS\u670d\u52a1\u5668\u5730\u5740\u9700\u8981\u7528[]\u62ec\u8d77\u6765\uff0c\u4f46\u662f\u7f51\u5173\u5730\u5740\u4e0d\u9700\u8981 2\u3001\u6ce8\u610f\u6bcf\u4e2a\u5192\u53f7\u540e\u8fb9\u90fd\u8981\u5148\u52a0\u4e00\u4e2a\u7a7a\u683c 3\u3001\u6ce8\u610f\u6bcf\u4e00\u5c42\u524d\u8fb9\u7684\u7f29\u8fdb\uff0c\u81f3\u5c11\u6bd4\u4e0a\u4e00\u5c42\u591a\u4e24\u4e2a\u7a7a\u683c","title":"Ubuntu 20.04\u4fee\u6539ip\u5730\u5740"},{"location":"%E5%85%B6%E4%BB%96/windows%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/","text":"\u65e0\u5bc6\u7801\u8bbf\u95ee \u00b6 \u9009\u62e9\u9700\u8981\u5171\u4eab\u7684\u6587\u4ef6\u5939\uff0c\u53f3\u952e->\u5c5e\u6027->\u5171\u4eab->\u5171\u4eab(s)... \u6dfb\u52a0\u5171\u4eab\u5bf9\u8c61 \u6dfb\u52a0Everyone\u6216\u8005Guest\u7528\u6237\uff0c\u6dfb\u52a0\u4e00\u4e2a\u5c31\u884c\uff0c\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee\u7684\u7528\u6237\u90fd\u5c5e\u4e8eGuest\uff0c\u800cEveryone\u5305\u542b\u4e86Guest\u3002 \u8bbe\u7f6e\u6743\u9650\u7ea7\u522b\u8bfb\u53d6/\u5199\u5165 \u3002 \u70b9\u51fb\u5171\u4eab(H)\u3002 \u65e0\u5bc6\u7801\u7248\u672c\u5230\u6b64\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\uff0c\u540e\u9762\u4e3a\u6dfb\u52a0\u5bc6\u7801\u7248\u672c\u3002 \u6dfb\u52a0\u5bc6\u7801\u8bbf\u95ee \u00b6 \u7f51\u7edc\u5171\u4eab\u4e2d\u5fc3->\u9ad8\u7ea7\u5171\u4eab\u8bbe\u7f6e->\u542f\u7528\u5bc6\u7801\u5171\u4eab \u53f3\u952e\u8ba1\u7b97\u673a->\u7ba1\u7406->\u672c\u5730\u7528\u6237\u548c\u7ec4->\u7528\u6237->\u53f3\u952e\u6dfb\u52a0\u65b0\u7528\u6237->\u8bbe\u7f6e\u7528\u6237\u540d\u548c\u5bc6\u7801","title":"windows\u7f51\u7edc\u5171\u4eab"},{"location":"%E5%85%B6%E4%BB%96/windows%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/#_1","text":"\u9009\u62e9\u9700\u8981\u5171\u4eab\u7684\u6587\u4ef6\u5939\uff0c\u53f3\u952e->\u5c5e\u6027->\u5171\u4eab->\u5171\u4eab(s)... \u6dfb\u52a0\u5171\u4eab\u5bf9\u8c61 \u6dfb\u52a0Everyone\u6216\u8005Guest\u7528\u6237\uff0c\u6dfb\u52a0\u4e00\u4e2a\u5c31\u884c\uff0c\u901a\u8fc7\u7f51\u7edc\u8bbf\u95ee\u7684\u7528\u6237\u90fd\u5c5e\u4e8eGuest\uff0c\u800cEveryone\u5305\u542b\u4e86Guest\u3002 \u8bbe\u7f6e\u6743\u9650\u7ea7\u522b\u8bfb\u53d6/\u5199\u5165 \u3002 \u70b9\u51fb\u5171\u4eab(H)\u3002 \u65e0\u5bc6\u7801\u7248\u672c\u5230\u6b64\u5c31\u53ef\u4ee5\u7ed3\u675f\u4e86\uff0c\u540e\u9762\u4e3a\u6dfb\u52a0\u5bc6\u7801\u7248\u672c\u3002","title":"\u65e0\u5bc6\u7801\u8bbf\u95ee"},{"location":"%E5%85%B6%E4%BB%96/windows%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB/#_2","text":"\u7f51\u7edc\u5171\u4eab\u4e2d\u5fc3->\u9ad8\u7ea7\u5171\u4eab\u8bbe\u7f6e->\u542f\u7528\u5bc6\u7801\u5171\u4eab \u53f3\u952e\u8ba1\u7b97\u673a->\u7ba1\u7406->\u672c\u5730\u7528\u6237\u548c\u7ec4->\u7528\u6237->\u53f3\u952e\u6dfb\u52a0\u65b0\u7528\u6237->\u8bbe\u7f6e\u7528\u6237\u540d\u548c\u5bc6\u7801","title":"\u6dfb\u52a0\u5bc6\u7801\u8bbf\u95ee"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/","text":"\u4e3a\u4ec0\u4e48\u8981\u7528\u5206\u5e03\u5f0fID\uff1f \u00b6 \u5728\u8bf4\u5206\u5e03\u5f0fID\u7684\u5177\u4f53\u5b9e\u73b0\u4e4b\u524d\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u7528\u5206\u5e03\u5f0fID\uff1f\u5206\u5e03\u5f0fID\u5e94\u8be5\u6ee1\u8db3\u54ea\u4e9b\u7279\u5f81\uff1f \u4ec0\u4e48\u662f\u5206\u5e03\u5f0fID\uff1f \u62ffMySQL\u6570\u636e\u5e93\u4e3e\u4e2a\u6817\u5b50\uff1a \u5728\u6211\u4eec\u4e1a\u52a1\u6570\u636e\u91cf\u4e0d\u5927\u7684\u65f6\u5019\uff0c\u5355\u5e93\u5355\u8868\u5b8c\u5168\u53ef\u4ee5\u652f\u6491\u73b0\u6709\u4e1a\u52a1\uff0c\u6570\u636e\u518d\u5927\u4e00\u70b9\u641e\u4e2aMySQL\u4e3b\u4ece\u540c\u6b65\u8bfb\u5199\u5206\u79bb\u4e5f\u80fd\u5bf9\u4ed8\u3002 \u4f46\u968f\u7740\u6570\u636e\u65e5\u6e10\u589e\u957f\uff0c\u4e3b\u4ece\u540c\u6b65\u4e5f\u625b\u4e0d\u4f4f\u4e86\uff0c\u5c31\u9700\u8981\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u5206\u5e93\u5206\u8868\uff0c\u4f46\u5206\u5e93\u5206\u8868\u540e\u9700\u8981\u6709\u4e00\u4e2a\u552f\u4e00ID\u6765\u6807\u8bc6\u4e00\u6761\u6570\u636e\uff0c\u6570\u636e\u5e93\u7684\u81ea\u589eID\u663e\u7136\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff1b\u7279\u522b\u4e00\u70b9\u7684\u5982\u8ba2\u5355\u3001\u4f18\u60e0\u5238\u4e5f\u90fd\u9700\u8981\u6709\u552f\u4e00ID\u505a\u6807\u8bc6\u3002\u6b64\u65f6\u4e00\u4e2a\u80fd\u591f\u751f\u6210\u5168\u5c40\u552f\u4e00ID\u7684\u7cfb\u7edf\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002\u90a3\u4e48\u8fd9\u4e2a\u5168\u5c40\u552f\u4e00ID\u5c31\u53eb\u5206\u5e03\u5f0fID\u3002 \u90a3\u4e48\u5206\u5e03\u5f0fID\u9700\u8981\u6ee1\u8db3\u90a3\u4e9b\u6761\u4ef6\uff1f \u5168\u5c40\u552f\u4e00\uff1a\u5fc5\u987b\u4fdd\u8bc1ID\u662f\u5168\u5c40\u6027\u552f\u4e00\u7684\uff0c\u57fa\u672c\u8981\u6c42 \u9ad8\u6027\u80fd\uff1a\u9ad8\u53ef\u7528\u4f4e\u5ef6\u65f6\uff0cID\u751f\u6210\u54cd\u5e94\u8981\u5757\uff0c\u5426\u5219\u53cd\u5012\u4f1a\u6210\u4e3a\u4e1a\u52a1\u74f6\u9888 \u9ad8\u53ef\u7528\uff1a100%\u7684\u53ef\u7528\u6027\u662f\u9a97\u4eba\u7684\uff0c\u4f46\u662f\u4e5f\u8981\u65e0\u9650\u63a5\u8fd1\u4e8e100%\u7684\u53ef\u7528\u6027 \u597d\u63a5\u5165\uff1a\u8981\u79c9\u7740\u62ff\u6765\u5373\u7528\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u5728\u7cfb\u7edf\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e0a\u8981\u5c3d\u53ef\u80fd\u7684\u7b80\u5355 \u8d8b\u52bf\u9012\u589e\uff1a\u6700\u597d\u8d8b\u52bf\u9012\u589e\uff0c\u8fd9\u4e2a\u8981\u6c42\u5c31\u5f97\u770b\u5177\u4f53\u4e1a\u52a1\u573a\u666f\u4e86\uff0c\u4e00\u822c\u4e0d\u4e25\u683c\u8981\u6c42 \u5206\u5e03\u5f0fID\u90fd\u6709\u54ea\u4e9b\u751f\u6210\u65b9\u5f0f\uff1f \u00b6 \u4eca\u5929\u4e3b\u8981\u5206\u6790\u4e00\u4e0b\u4ee5\u4e0b9\u79cd\uff0c\u5206\u5e03\u5f0fID\u751f\u6210\u5668\u65b9\u5f0f\u4ee5\u53ca\u4f18\u7f3a\u70b9\uff1a UUID \u6570\u636e\u5e93\u81ea\u589eID \u6570\u636e\u5e93\u591a\u4e3b\u6a21\u5f0f \u53f7\u6bb5\u6a21\u5f0f Redis \u96ea\u82b1\u7b97\u6cd5\uff08SnowFlake\uff09 \u6ef4\u6ef4\u51fa\u54c1\uff08TinyID\uff09 \u767e\u5ea6 \uff08Uidgenerator\uff09 \u7f8e\u56e2\uff08Leaf\uff09 \u90a3\u4e48\u5b83\u4eec\u90fd\u662f\u5982\u4f55\u5b9e\u73b0\uff1f\u4ee5\u53ca\u5404\u81ea\u6709\u4ec0\u4e48\u4f18\u7f3a\u70b9\uff1f\u6211\u4eec\u5f80\u4e0b\u770b \u57fa\u4e8eUUID \u00b6 \u5728Java\u7684\u4e16\u754c\u91cc\uff0c\u60f3\u8981\u5f97\u5230\u4e00\u4e2a\u5177\u6709\u552f\u4e00\u6027\u7684ID\uff0c\u9996\u5148\u88ab\u60f3\u5230\u53ef\u80fd\u5c31\u662fUUID\uff0c\u6bd5\u7adf\u5b83\u6709\u7740\u5168\u7403\u552f\u4e00\u7684\u7279\u6027\u3002\u90a3\u4e48UUID\u53ef\u4ee5\u505a\u5206\u5e03\u5f0fID\u5417\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5e76\u4e0d\u63a8\u8350\uff01 public static void main ( String [] args ) { String uuid = UUID . randomUUID (). toString (). replaceAll ( \"-\" , \"\" ); System . out . println ( uuid ); } UUID \u7684\u751f\u6210\u7b80\u5355\u5230\u53ea\u6709\u4e00\u884c\u4ee3\u7801\uff0c\u8f93\u51fa\u7ed3\u679c c2b8c2b9e46c47e3b30dca3b0d447718 \uff0c\u4f46UUID\u5374\u5e76\u4e0d\u9002\u7528\u4e8e\u5b9e\u9645\u7684\u4e1a\u52a1\u9700\u6c42\u3002\u50cf\u7528\u4f5c\u8ba2\u5355\u53f7UUID\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u4e1d\u6beb\u7684\u610f\u4e49\uff0c\u770b\u4e0d\u51fa\u548c\u8ba2\u5355\u76f8\u5173\u7684\u6709\u7528\u4fe1\u606f\uff1b\u800c\u5bf9\u4e8e\u6570\u636e\u5e93\u6765\u8bf4\u7528\u4f5c\u4e1a\u52a1\u4e3b\u952eID\uff0c\u5b83\u4e0d\u4ec5\u662f\u592a\u957f\u8fd8\u662f\u5b57\u7b26\u4e32\uff0c\u5b58\u50a8\u6027\u80fd\u5dee\u67e5\u8be2\u4e5f\u5f88\u8017\u65f6\uff0c\u6240\u4ee5\u4e0d\u63a8\u8350\u7528\u4f5c\u5206\u5e03\u5f0fID\u3002 \u4f18\u70b9\uff1a\u751f\u6210\u8db3\u591f\u7b80\u5355\uff0c\u672c\u5730\u751f\u6210\u65e0\u7f51\u7edc\u6d88\u8017\uff0c\u5177\u6709\u552f\u4e00\u6027 \u7f3a\u70b9\uff1a - \u65e0\u5e8f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u5177\u5907\u8d8b\u52bf\u81ea\u589e\u7279\u6027 - \u6ca1\u6709\u5177\u4f53\u7684\u4e1a\u52a1\u542b\u4e49 - \u957f\u5ea6\u8fc7\u957f16 \u5b57\u8282128\u4f4d\uff0c36\u4f4d\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\uff0c\u5b58\u50a8\u4ee5\u53ca\u67e5\u8be2\u5bf9MySQL\u7684\u6027\u80fd\u6d88\u8017\u8f83\u5927\uff0cMySQL\u5b98\u65b9\u660e\u786e\u5efa\u8bae\u4e3b\u952e\u8981\u5c3d\u91cf\u8d8a\u77ed\u8d8a\u597d\uff0c\u4f5c\u4e3a\u6570\u636e\u5e93\u4e3b\u952e UUID \u7684\u65e0\u5e8f\u6027\u4f1a\u5bfc\u81f4\u6570\u636e\u4f4d\u7f6e\u9891\u7e41\u53d8\u52a8\uff0c\u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002 \u57fa\u4e8e\u6570\u636e\u5e93\u81ea\u589eID \u00b6 \u57fa\u4e8e\u6570\u636e\u5e93\u7684auto_increment\u81ea\u589eID\u5b8c\u5168\u53ef\u4ee5\u5145\u5f53\u5206\u5e03\u5f0fID\uff0c\u5177\u4f53\u5b9e\u73b0\uff1a\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684MySQL\u5b9e\u4f8b\u7528\u6765\u751f\u6210ID\uff0c\u5efa\u8868\u7ed3\u6784\u5982\u4e0b\uff1a CREATE DATABASE `SEQ_ID` ; CREATE TABLE SEQID . SEQUENCE_ID ( id bigint ( 20 ) unsigned NOT NULL auto_increment , value char ( 10 ) NOT NULL default '' , PRIMARY KEY ( id ), ) ENGINE = MyISAM ; insert into SEQUENCE_ID ( value ) VALUES ( 'values' ); \u5f53\u6211\u4eec\u9700\u8981\u4e00\u4e2aID\u7684\u65f6\u5019\uff0c\u5411\u8868\u4e2d\u63d2\u5165\u4e00\u6761\u8bb0\u5f55\u8fd4\u56de\u4e3b\u952eID\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u6709\u4e00\u4e2a\u6bd4\u8f83\u81f4\u547d\u7684\u7f3a\u70b9\uff0c\u8bbf\u95ee\u91cf\u6fc0\u589e\u65f6MySQL\u672c\u8eab\u5c31\u662f\u7cfb\u7edf\u7684\u74f6\u9888\uff0c\u7528\u5b83\u6765\u5b9e\u73b0\u5206\u5e03\u5f0f\u670d\u52a1\u98ce\u9669\u6bd4\u8f83\u5927\uff0c\u4e0d\u63a8\u8350\uff01 \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\uff0cID\u5355\u8c03\u81ea\u589e\uff0c\u6570\u503c\u7c7b\u578b\u67e5\u8be2\u901f\u5ea6\u5feb \u7f3a\u70b9\uff1aDB\u5355\u70b9\u5b58\u5728\u5b95\u673a\u98ce\u9669\uff0c\u65e0\u6cd5\u625b\u4f4f\u9ad8\u5e76\u53d1\u573a\u666f \u57fa\u4e8e\u6570\u636e\u5e93\u96c6\u7fa4\u6a21\u5f0f \u00b6 \u524d\u8fb9\u8bf4\u4e86\u5355\u70b9\u6570\u636e\u5e93\u65b9\u5f0f\u4e0d\u53ef\u53d6\uff0c\u90a3\u5bf9\u4e0a\u8fb9\u7684\u65b9\u5f0f\u505a\u4e00\u4e9b\u9ad8\u53ef\u7528\u4f18\u5316\uff0c\u6362\u6210\u4e3b\u4ece\u6a21\u5f0f\u96c6\u7fa4\u3002\u5bb3\u6015\u4e00\u4e2a\u4e3b\u8282\u70b9\u6302\u6389\u6ca1\u6cd5\u7528\uff0c\u90a3\u5c31\u505a\u53cc\u4e3b\u6a21\u5f0f\u96c6\u7fa4\uff0c\u4e5f\u5c31\u662f\u4e24\u4e2aMysql\u5b9e\u4f8b\u90fd\u80fd\u5355\u72ec\u7684\u751f\u4ea7\u81ea\u589eID\u3002 \u90a3\u8fd9\u6837\u8fd8\u4f1a\u6709\u4e2a\u95ee\u9898\uff0c\u4e24\u4e2aMySQL\u5b9e\u4f8b\u7684\u81ea\u589eID\u90fd\u4ece1\u5f00\u59cb\uff0c\u4f1a\u751f\u6210\u91cd\u590d\u7684ID\u600e\u4e48\u529e\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u8bbe\u7f6e\u8d77\u59cb\u503c\u548c\u81ea\u589e\u6b65\u957f MySQL_1 \u914d\u7f6e\uff1a set @@auto_increment_offset = 1; -- \u8d77\u59cb\u503c set @@auto_increment_increment = 2; -- \u6b65\u957f MySQL_2 \u914d\u7f6e\uff1a set @@auto_increment_offset = 2; -- \u8d77\u59cb\u503c set @@auto_increment_increment = 2; -- \u6b65\u957f \u8fd9\u6837\u4e24\u4e2aMySQL\u5b9e\u4f8b\u7684\u81ea\u589eID\u5206\u522b\u5c31\u662f\uff1a 1\u30013\u30015\u30017\u30019 2\u30014\u30016\u30018\u300110 \u90a3\u5982\u679c\u96c6\u7fa4\u540e\u7684\u6027\u80fd\u8fd8\u662f\u625b\u4e0d\u4f4f\u9ad8\u5e76\u53d1\u548b\u529e\uff1f\u5c31\u8981\u8fdb\u884cMySQL\u6269\u5bb9\u589e\u52a0\u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u4e8b\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c\u6c34\u5e73\u6269\u5c55\u7684\u6570\u636e\u5e93\u96c6\u7fa4\uff0c\u6709\u5229\u4e8e\u89e3\u51b3\u6570\u636e\u5e93\u5355\u70b9\u538b\u529b\u7684\u95ee\u9898\uff0c\u540c\u65f6\u4e3a\u4e86ID\u751f\u6210\u7279\u6027\uff0c\u5c06\u81ea\u589e\u6b65\u957f\u6309\u7167\u673a\u5668\u6570\u91cf\u6765\u8bbe\u7f6e\u3002 \u589e\u52a0\u7b2c\u4e09\u53f0MySQL\u5b9e\u4f8b\u9700\u8981\u4eba\u5de5\u4fee\u6539\u4e00\u3001\u4e8c\u4e24\u53f0MySQL\u5b9e\u4f8b\u7684\u8d77\u59cb\u503c\u548c\u6b65\u957f\uff0c\u628a\u7b2c\u4e09\u53f0\u673a\u5668\u7684ID\u8d77\u59cb\u751f\u6210\u4f4d\u7f6e\u8bbe\u5b9a\u5728\u6bd4\u73b0\u6709\u6700\u5927\u81ea\u589eID\u7684\u4f4d\u7f6e\u8fdc\u4e00\u4e9b\uff0c\u4f46\u5fc5\u987b\u5728\u4e00\u3001\u4e8c\u4e24\u53f0MySQL\u5b9e\u4f8bID\u8fd8\u6ca1\u6709\u589e\u957f\u5230\u7b2c\u4e09\u53f0MySQL\u5b9e\u4f8b\u7684\u8d77\u59cbID\u503c\u7684\u65f6\u5019\uff0c\u5426\u5219\u81ea\u589eID\u5c31\u8981\u51fa\u73b0\u91cd\u590d\u4e86\uff0c\u5fc5\u8981\u65f6\u53ef\u80fd\u8fd8\u9700\u8981\u505c\u673a\u4fee\u6539\u3002 \u4f18\u70b9\uff1a\u89e3\u51b3DB\u5355\u70b9\u95ee\u9898 \u7f3a\u70b9\uff1a\u4e0d\u5229\u4e8e\u540e\u7eed\u6269\u5bb9\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u5355\u4e2a\u6570\u636e\u5e93\u81ea\u8eab\u538b\u529b\u8fd8\u662f\u5927\uff0c\u4f9d\u65e7\u65e0\u6cd5\u6ee1\u8db3\u9ad8\u5e76\u53d1\u573a\u666f\u3002 \u57fa\u4e8e\u6570\u636e\u5e93\u7684\u53f7\u6bb5\u6a21\u5f0f \u00b6 \u53f7\u6bb5\u6a21\u5f0f\u662f\u5f53\u4e0b\u5206\u5e03\u5f0fID\u751f\u6210\u5668\u7684\u4e3b\u6d41\u5b9e\u73b0\u65b9\u5f0f\u4e4b\u4e00\uff0c\u53f7\u6bb5\u6a21\u5f0f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ece\u6570\u636e\u5e93\u6279\u91cf\u7684\u83b7\u53d6\u81ea\u589eID\uff0c\u6bcf\u6b21\u4ece\u6570\u636e\u5e93\u53d6\u51fa\u4e00\u4e2a\u53f7\u6bb5\u8303\u56f4\uff0c\u4f8b\u5982 (1,1000] \u4ee3\u88681000\u4e2aID\uff0c\u5177\u4f53\u7684\u4e1a\u52a1\u670d\u52a1\u5c06\u672c\u53f7\u6bb5\uff0c\u751f\u62101~1000\u7684\u81ea\u589eID\u5e76\u52a0\u8f7d\u5230\u5185\u5b58\u3002\u8868\u7ed3\u6784\u5982\u4e0b\uff1a CREATE TABLE id_generator ( id int ( 10 ) NOT NULL , max_id bigint ( 20 ) NOT NULL COMMENT '\u5f53\u524d\u6700\u5927id' , step int ( 20 ) NOT NULL COMMENT '\u53f7\u6bb5\u7684\u5e03\u957f' , biz_type int ( 20 ) NOT NULL COMMENT '\u4e1a\u52a1\u7c7b\u578b' , version int ( 20 ) NOT NULL COMMENT '\u7248\u672c\u53f7' , PRIMARY KEY ( `id` ) ) biz_type \uff1a\u4ee3\u8868\u4e0d\u540c\u4e1a\u52a1\u7c7b\u578b max_id \uff1a\u5f53\u524d\u6700\u5927\u7684\u53ef\u7528id step \uff1a\u4ee3\u8868\u53f7\u6bb5\u7684\u957f\u5ea6 version \uff1a\u662f\u4e00\u4e2a\u4e50\u89c2\u9501\uff0c\u6bcf\u6b21\u90fd\u66f4\u65b0version\uff0c\u4fdd\u8bc1\u5e76\u53d1\u65f6\u6570\u636e\u7684\u6b63\u786e\u6027 id biz_type max_id step version 1 101 1000 2000 0 \u7b49\u8fd9\u6279\u53f7\u6bb5ID\u7528\u5b8c\uff0c\u518d\u6b21\u5411\u6570\u636e\u5e93\u7533\u8bf7\u65b0\u53f7\u6bb5\uff0c\u5bf9max_id\u5b57\u6bb5\u505a\u4e00\u6b21update\u64cd\u4f5c\uff0cupdate max_id= max_id + step\uff0cupdate\u6210\u529f\u5219\u8bf4\u660e\u65b0\u53f7\u6bb5\u83b7\u53d6\u6210\u529f\uff0c\u65b0\u7684\u53f7\u6bb5\u8303\u56f4\u662f(max_id ,max_id +step]\u3002 update id_generator set max_id = #{max_id+step}, version = version + 1 where version = # {version} and biz_type = XXX \u7531\u4e8e\u591a\u4e1a\u52a1\u7aef\u53ef\u80fd\u540c\u65f6\u64cd\u4f5c\uff0c\u6240\u4ee5\u91c7\u7528\u7248\u672c\u53f7version\u4e50\u89c2\u9501\u65b9\u5f0f\u66f4\u65b0\uff0c\u8fd9\u79cd\u5206\u5e03\u5f0fID\u751f\u6210\u65b9\u5f0f\u4e0d\u5f3a\u4f9d\u8d56\u4e8e\u6570\u636e\u5e93\uff0c\u4e0d\u4f1a\u9891\u7e41\u7684\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u538b\u529b\u5c0f\u5f88\u591a\u3002 \u57fa\u4e8eRedis\u6a21\u5f0f \u00b6 Redis\u4e5f\u540c\u6837\u53ef\u4ee5\u5b9e\u73b0\uff0c\u539f\u7406\u5c31\u662f\u5229\u7528redis\u7684 incr\u547d\u4ee4\u5b9e\u73b0ID\u7684\u539f\u5b50\u6027\u81ea\u589e\u3002 127.0.0.1 : 6379 > set seq_id 1 // \u521d\u59cb\u5316\u81ea\u589eID\u4e3a1 OK 127.0.0.1 : 6379 > incr seq_id // \u589e\u52a01\uff0c\u5e76\u8fd4\u56de\u9012\u589e\u540e\u7684\u6570\u503c ( integer ) 2 \u7528redis\u5b9e\u73b0\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u8981\u8003\u8651\u5230redis\u6301\u4e45\u5316\u7684\u95ee\u9898\u3002redis\u6709\u4e24\u79cd\u6301\u4e45\u5316\u65b9\u5f0fRDB\u548cAOF RDB\u4f1a\u5b9a\u65f6\u6253\u4e00\u4e2a\u5feb\u7167\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u5047\u5982\u8fde\u7eed\u81ea\u589e\u4f46redis\u6ca1\u53ca\u65f6\u6301\u4e45\u5316\uff0c\u800c\u8fd9\u4f1aRedis\u6302\u6389\u4e86\uff0c\u91cd\u542fRedis\u540e\u4f1a\u51fa\u73b0ID\u91cd\u590d\u7684\u60c5\u51b5\u3002 AOF\u4f1a\u5bf9\u6bcf\u6761\u5199\u547d\u4ee4\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u5373\u4f7fRedis\u6302\u6389\u4e86\u4e5f\u4e0d\u4f1a\u51fa\u73b0ID\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u4f46\u7531\u4e8eincr\u547d\u4ee4\u7684\u7279\u6b8a\u6027\uff0c\u4f1a\u5bfc\u81f4Redis\u91cd\u542f\u6062\u590d\u7684\u6570\u636e\u65f6\u95f4\u8fc7\u957f\u3002 \u57fa\u4e8e\u96ea\u82b1\u7b97\u6cd5\uff08Snowflake\uff09\u6a21\u5f0f \u00b6 \u96ea\u82b1\u7b97\u6cd5\uff08Snowflake\uff09\u662ftwitter\u516c\u53f8\u5185\u90e8\u5206\u5e03\u5f0f\u9879\u76ee\u91c7\u7528\u7684ID\u751f\u6210\u7b97\u6cd5\uff0c\u5f00\u6e90\u540e\u5e7f\u53d7\u56fd\u5185\u5927\u5382\u7684\u597d\u8bc4\uff0c\u5728\u8be5\u7b97\u6cd5\u5f71\u54cd\u4e0b\u5404\u5927\u516c\u53f8\u76f8\u7ee7\u5f00\u53d1\u51fa\u5404\u5177\u7279\u8272\u7684\u5206\u5e03\u5f0f\u751f\u6210\u5668\u3002 Snowflake\u751f\u6210\u7684\u662fLong\u7c7b\u578b\u7684ID\uff0c\u4e00\u4e2aLong\u7c7b\u578b\u53608\u4e2a\u5b57\u8282\uff0c\u6bcf\u4e2a\u5b57\u8282\u53608\u6bd4\u7279\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2aLong\u7c7b\u578b\u536064\u4e2a\u6bd4\u7279\u3002 Snowflake ID\u7ec4\u6210\u7ed3\u6784\uff1a\u6b63\u6570\u4f4d\uff08\u53601\u6bd4\u7279\uff09+ \u65f6\u95f4\u6233\uff08\u536041\u6bd4\u7279\uff09+ \u673a\u5668ID\uff08\u53605\u6bd4\u7279\uff09+ \u6570\u636e\u4e2d\u5fc3\uff08\u53605\u6bd4\u7279\uff09+ \u81ea\u589e\u503c\uff08\u536012\u6bd4\u7279\uff09\uff0c\u603b\u517164\u6bd4\u7279\u7ec4\u6210\u7684\u4e00\u4e2aLong\u7c7b\u578b\u3002 \u7b2c\u4e00\u4e2abit\u4f4d\uff081bit\uff09\uff1aJava\u4e2dlong\u7684\u6700\u9ad8\u4f4d\u662f\u7b26\u53f7\u4f4d\u4ee3\u8868\u6b63\u8d1f\uff0c\u6b63\u6570\u662f0\uff0c\u8d1f\u6570\u662f1\uff0c\u4e00\u822c\u751f\u6210ID\u90fd\u4e3a\u6b63\u6570\uff0c\u6240\u4ee5\u9ed8\u8ba4\u4e3a0\u3002 \u65f6\u95f4\u6233\u90e8\u5206\uff0841bit\uff09\uff1a\u6beb\u79d2\u7ea7\u7684\u65f6\u95f4\uff0c\u4e0d\u5efa\u8bae\u5b58\u5f53\u524d\u65f6\u95f4\u6233\uff0c\u800c\u662f\u7528\uff08\u5f53\u524d\u65f6\u95f4\u6233 - \u56fa\u5b9a\u5f00\u59cb\u65f6\u95f4\u6233\uff09\u7684\u5dee\u503c\uff0c\u53ef\u4ee5\u4f7f\u4ea7\u751f\u7684ID\u4ece\u66f4\u5c0f\u7684\u503c\u5f00\u59cb\uff1b41\u4f4d\u7684\u65f6\u95f4\u6233\u53ef\u4ee5\u4f7f\u752869\u5e74\uff0c(1L << 41) / (1000L * 60 * 60 * 24 * 365) = 69\u5e74 \u5de5\u4f5c\u673a\u5668id\uff0810bit\uff09\uff1a\u4e5f\u88ab\u53eb\u505aworkId\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7075\u6d3b\u914d\u7f6e\uff0c\u673a\u623f\u6216\u8005\u673a\u5668\u53f7\u7ec4\u5408\u90fd\u53ef\u4ee5\u3002 \u5e8f\u5217\u53f7\u90e8\u5206\uff0812bit\uff09\uff0c\u81ea\u589e\u503c\u652f\u6301\u540c\u4e00\u6beb\u79d2\u5185\u540c\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u751f\u62104096\u4e2aID \u6839\u636e\u8fd9\u4e2a\u7b97\u6cd5\u7684\u903b\u8f91\uff0c\u53ea\u9700\u8981\u5c06\u8fd9\u4e2a\u7b97\u6cd5\u7528Java\u8bed\u8a00\u5b9e\u73b0\u51fa\u6765\uff0c\u5c01\u88c5\u4e3a\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5\uff0c\u90a3\u4e48\u5404\u4e2a\u4e1a\u52a1\u5e94\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8be5\u5de5\u5177\u65b9\u6cd5\u6765\u83b7\u53d6\u5206\u5e03\u5f0fID\uff0c\u53ea\u9700\u4fdd\u8bc1\u6bcf\u4e2a\u4e1a\u52a1\u5e94\u7528\u6709\u81ea\u5df1\u7684\u5de5\u4f5c\u673a\u5668id\u5373\u53ef\uff0c\u800c\u4e0d\u9700\u8981\u5355\u72ec\u53bb\u642d\u5efa\u4e00\u4e2a\u83b7\u53d6\u5206\u5e03\u5f0fID\u7684\u5e94\u7528\u3002 Java\u7248\u672c\u7684Snowflake\u7b97\u6cd5\u5b9e\u73b0\uff1a /** * Twitter\u7684SnowFlake\u7b97\u6cd5,\u4f7f\u7528SnowFlake\u7b97\u6cd5\u751f\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u7136\u540e\u8f6c\u5316\u4e3a62\u8fdb\u5236\u53d8\u6210\u4e00\u4e2a\u77ed\u5730\u5740URL * * https://github.com/beyondfengyu/SnowFlake */ public class SnowFlakeShortUrl { /** * \u8d77\u59cb\u7684\u65f6\u95f4\u6233 */ private final static long START_TIMESTAMP = 1480166465631L ; /** * \u6bcf\u4e00\u90e8\u5206\u5360\u7528\u7684\u4f4d\u6570 */ private final static long SEQUENCE_BIT = 12 ; //\u5e8f\u5217\u53f7\u5360\u7528\u7684\u4f4d\u6570 private final static long MACHINE_BIT = 5 ; //\u673a\u5668\u6807\u8bc6\u5360\u7528\u7684\u4f4d\u6570 private final static long DATA_CENTER_BIT = 5 ; //\u6570\u636e\u4e2d\u5fc3\u5360\u7528\u7684\u4f4d\u6570 /** * \u6bcf\u4e00\u90e8\u5206\u7684\u6700\u5927\u503c */ private final static long MAX_SEQUENCE = - 1L ^ ( - 1L << SEQUENCE_BIT ); private final static long MAX_MACHINE_NUM = - 1L ^ ( - 1L << MACHINE_BIT ); private final static long MAX_DATA_CENTER_NUM = - 1L ^ ( - 1L << DATA_CENTER_BIT ); /** * \u6bcf\u4e00\u90e8\u5206\u5411\u5de6\u7684\u4f4d\u79fb */ private final static long MACHINE_LEFT = SEQUENCE_BIT ; private final static long DATA_CENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT ; private final static long TIMESTAMP_LEFT = DATA_CENTER_LEFT + DATA_CENTER_BIT ; private long dataCenterId ; //\u6570\u636e\u4e2d\u5fc3 private long machineId ; //\u673a\u5668\u6807\u8bc6 private long sequence = 0 L ; //\u5e8f\u5217\u53f7 private long lastTimeStamp = - 1L ; //\u4e0a\u4e00\u6b21\u65f6\u95f4\u6233 private long getNextMill () { long mill = getNewTimeStamp (); while ( mill <= lastTimeStamp ) { mill = getNewTimeStamp (); } return mill ; } private long getNewTimeStamp () { return System . currentTimeMillis (); } /** * \u6839\u636e\u6307\u5b9a\u7684\u6570\u636e\u4e2d\u5fc3ID\u548c\u673a\u5668\u6807\u5fd7ID\u751f\u6210\u6307\u5b9a\u7684\u5e8f\u5217\u53f7 * * @param dataCenterId \u6570\u636e\u4e2d\u5fc3ID * @param machineId \u673a\u5668\u6807\u5fd7ID */ public SnowFlakeShortUrl ( long dataCenterId , long machineId ) { if ( dataCenterId > MAX_DATA_CENTER_NUM || dataCenterId < 0 ) { throw new IllegalArgumentException ( \"DtaCenterId can't be greater than MAX_DATA_CENTER_NUM or less than 0\uff01\" ); } if ( machineId > MAX_MACHINE_NUM || machineId < 0 ) { throw new IllegalArgumentException ( \"MachineId can't be greater than MAX_MACHINE_NUM or less than 0\uff01\" ); } this . dataCenterId = dataCenterId ; this . machineId = machineId ; } /** * \u4ea7\u751f\u4e0b\u4e00\u4e2aID * * @return */ public synchronized long nextId () { long currTimeStamp = getNewTimeStamp (); if ( currTimeStamp < lastTimeStamp ) { throw new RuntimeException ( \"Clock moved backwards. Refusing to generate id\" ); } if ( currTimeStamp == lastTimeStamp ) { //\u76f8\u540c\u6beb\u79d2\u5185\uff0c\u5e8f\u5217\u53f7\u81ea\u589e sequence = ( sequence + 1 ) & MAX_SEQUENCE ; //\u540c\u4e00\u6beb\u79d2\u7684\u5e8f\u5217\u6570\u5df2\u7ecf\u8fbe\u5230\u6700\u5927 if ( sequence == 0 L ) { currTimeStamp = getNextMill (); } } else { //\u4e0d\u540c\u6beb\u79d2\u5185\uff0c\u5e8f\u5217\u53f7\u7f6e\u4e3a0 sequence = 0 L ; } lastTimeStamp = currTimeStamp ; return ( currTimeStamp - START_TIMESTAMP ) << TIMESTAMP_LEFT //\u65f6\u95f4\u6233\u90e8\u5206 | dataCenterId << DATA_CENTER_LEFT //\u6570\u636e\u4e2d\u5fc3\u90e8\u5206 | machineId << MACHINE_LEFT //\u673a\u5668\u6807\u8bc6\u90e8\u5206 | sequence ; //\u5e8f\u5217\u53f7\u90e8\u5206 } public static void main ( String [] args ) { SnowFlakeShortUrl snowFlake = new SnowFlakeShortUrl ( 2 , 3 ); for ( int i = 0 ; i < ( 1 << 4 ); i ++ ) { //10\u8fdb\u5236 System . out . println ( snowFlake . nextId ()); } } } \u767e\u5ea6\uff08uid-generator\uff09 \u00b6 uid-generator\u662f\u7531\u767e\u5ea6\u6280\u672f\u90e8\u5f00\u53d1\uff0c\u9879\u76eeGitHub\u5730\u5740 https://github.com/baidu/uid-generator uid-generator\u662f\u57fa\u4e8eSnowflake\u7b97\u6cd5\u5b9e\u73b0\u7684\uff0c\u4e0e\u539f\u59cb\u7684snowflake\u7b97\u6cd5\u4e0d\u540c\u5728\u4e8e\uff0cuid-generator\u652f\u6301\u81ea\u5b9a\u4e49\u65f6\u95f4\u6233\u3001\u5de5\u4f5c\u673a\u5668ID\u548c \u5e8f\u5217\u53f7 \u7b49\u5404\u90e8\u5206\u7684\u4f4d\u6570\uff0c\u800c\u4e14uid-generator\u4e2d\u91c7\u7528\u7528\u6237\u81ea\u5b9a\u4e49workId\u7684\u751f\u6210\u7b56\u7565\u3002 uid-generator\u9700\u8981\u4e0e\u6570\u636e\u5e93\u914d\u5408\u4f7f\u7528\uff0c\u9700\u8981\u65b0\u589e\u4e00\u4e2aWORKER_NODE\u8868\u3002\u5f53\u5e94\u7528\u542f\u52a8\u65f6\u4f1a\u5411\u6570\u636e\u5e93\u8868\u4e2d\u53bb\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u63d2\u5165\u6210\u529f\u540e\u8fd4\u56de\u7684\u81ea\u589eID\u5c31\u662f\u8be5\u673a\u5668\u7684workId\u6570\u636e\u7531host\uff0cport\u7ec4\u6210\u3002 \u5bf9\u4e8euid-generator ID\u7ec4\u6210\u7ed3\u6784\uff1a workId\uff0c\u5360\u7528\u4e8622\u4e2abit\u4f4d\uff0c\u65f6\u95f4\u5360\u7528\u4e8628\u4e2abit\u4f4d\uff0c\u5e8f\u5217\u5316\u5360\u7528\u4e8613\u4e2abit\u4f4d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u548c\u539f\u59cb\u7684snowflake\u4e0d\u592a\u4e00\u6837\uff0c\u65f6\u95f4\u7684\u5355\u4f4d\u662f\u79d2\uff0c\u800c\u4e0d\u662f\u6beb\u79d2\uff0cworkId\u4e5f\u4e0d\u4e00\u6837\uff0c\u800c\u4e14\u540c\u4e00\u5e94\u7528\u6bcf\u6b21\u91cd\u542f\u5c31\u4f1a\u6d88\u8d39\u4e00\u4e2aworkId\u3002 \u53c2\u8003\u6587\u732e https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md \u7f8e\u56e2\uff08Leaf\uff09 \u00b6 Leaf\u7531\u7f8e\u56e2\u5f00\u53d1\uff0cgithub\u5730\u5740\uff1a https://github.com/Meituan-Dianping/Leaf Leaf\u540c\u65f6\u652f\u6301\u53f7\u6bb5\u6a21\u5f0f\u548csnowflake\u7b97\u6cd5\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5207\u6362\u4f7f\u7528\u3002 \u53f7\u6bb5\u6a21\u5f0f \u5148\u5bfc\u5165\u6e90\u7801 https://github.com/Meituan-Dianping/Leaf \uff0c\u5728\u5efa\u4e00\u5f20\u8868leaf_alloc DROP TABLE IF EXISTS `leaf_alloc` ; CREATE TABLE `leaf_alloc` ( `biz_tag` varchar ( 128 ) NOT NULL DEFAULT '' COMMENT '\u4e1a\u52a1key' , `max_id` bigint ( 20 ) NOT NULL DEFAULT '1' COMMENT '\u5f53\u524d\u5df2\u7ecf\u5206\u914d\u4e86\u7684\u6700\u5927id' , `step` int ( 11 ) NOT NULL COMMENT '\u521d\u59cb\u6b65\u957f\uff0c\u4e5f\u662f\u52a8\u6001\u8c03\u6574\u7684\u6700\u5c0f\u6b65\u957f' , `description` varchar ( 256 ) DEFAULT NULL COMMENT '\u4e1a\u52a1key\u7684\u63cf\u8ff0' , `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u6570\u636e\u5e93\u7ef4\u62a4\u7684\u66f4\u65b0\u65f6\u95f4' , PRIMARY KEY ( `biz_tag` ) ) ENGINE = InnoDB ; \u7136\u540e\u5728\u9879\u76ee\u4e2d\u5f00\u542f\u53f7\u6bb5\u6a21\u5f0f\uff0c\u914d\u7f6e\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u4fe1\u606f\uff0c\u5e76\u5173\u95edsnowflake\u6a21\u5f0f leaf . name = com . sankuai . leaf . opensource . test leaf . segment . enable = true leaf . jdbc . url = jdbc : mysql :// localhost : 3306 / leaf_test ? useUnicode = true & characterEncoding = utf8 & characterSetResults = utf8 leaf . jdbc . username = root leaf . jdbc . password = root leaf . snowflake . enable = false #leaf.snowflake.zk.address= #leaf.snowflake.port= \u542f\u52a8leaf-server \u6a21\u5757\u7684 LeafServerApplication\u9879\u76ee\u5c31\u8dd1\u8d77\u6765\u4e86 \u53f7\u6bb5\u6a21\u5f0f\u83b7\u53d6\u5206\u5e03\u5f0f\u81ea\u589eID\u7684\u6d4b\u8bd5url \uff1ahttp\uff1a//localhost\uff1a8080/api/segment/get/leaf-segment-test \u76d1\u63a7\u53f7\u6bb5\u6a21\u5f0f\uff1a http://localhost:8080/cache snowflake\u6a21\u5f0f Leaf\u7684snowflake\u6a21\u5f0f\u4f9d\u8d56\u4e8eZooKeeper\uff0c\u4e0d\u540c\u4e8e\u539f\u59cbsnowflake\u7b97\u6cd5\u4e5f\u4e3b\u8981\u662f\u5728workId\u7684\u751f\u6210\u4e0a\uff0cLeaf\u4e2dworkId\u662f\u57fa\u4e8eZooKeeper\u7684\u987a\u5e8fId\u6765\u751f\u6210\u7684\uff0c\u6bcf\u4e2a\u5e94\u7528\u5728\u4f7f\u7528Leaf-snowflake\u65f6\uff0c\u542f\u52a8\u65f6\u90fd\u4f1a\u90fd\u5728Zookeeper\u4e2d\u751f\u6210\u4e00\u4e2a\u987a\u5e8fId\uff0c\u76f8\u5f53\u4e8e\u4e00\u53f0\u673a\u5668\u5bf9\u5e94\u4e00\u4e2a\u987a\u5e8f\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2aworkId\u3002 leaf.snowflake.enable=true leaf.snowflake.zk.address=127.0.0.1 leaf.snowflake.port=2181 snowflake\u6a21\u5f0f\u83b7\u53d6\u5206\u5e03\u5f0f\u81ea\u589eID\u7684\u6d4b\u8bd5url\uff1a http://localhost:8080/api/snowflake/get/test \u6ef4\u6ef4\uff08Tinyid\uff09 \u00b6 Tinyid\u7531\u6ef4\u6ef4\u5f00\u53d1\uff0cGithub\u5730\u5740\uff1a https://github.com/didi/tinyid \u3002 Tinyid\u662f\u57fa\u4e8e\u53f7\u6bb5\u6a21\u5f0f\u539f\u7406\u5b9e\u73b0\u7684\u4e0eLeaf\u5982\u51fa\u4e00\u8f99\uff0c\u6bcf\u4e2a\u670d\u52a1\u83b7\u53d6\u4e00\u4e2a\u53f7\u6bb5\uff081000,2000]\u3001\uff082000,3000]\u3001\uff083000,4000] Tinyid\u63d0\u4f9bhttp\u548ctinyid-client\u4e24\u79cd\u65b9\u5f0f\u63a5\u5165 Http\u65b9\u5f0f\u63a5\u5165 \uff081\uff09\u5bfc\u5165Tinyid\u6e90\u7801\uff1a git clone https://github.com/didi/tinyid.git \uff082\uff09\u521b\u5efa\u6570\u636e\u8868\uff1a CREATE TABLE `tiny_id_info` ( `id` bigint ( 20 ) unsigned NOT NULL AUTO_INCREMENT COMMENT '\u81ea\u589e\u4e3b\u952e' , `biz_type` varchar ( 63 ) NOT NULL DEFAULT '' COMMENT '\u4e1a\u52a1\u7c7b\u578b\uff0c\u552f\u4e00' , `begin_id` bigint ( 20 ) NOT NULL DEFAULT '0' COMMENT '\u5f00\u59cbid\uff0c\u4ec5\u8bb0\u5f55\u521d\u59cb\u503c\uff0c\u65e0\u5176\u4ed6\u542b\u4e49\u3002\u521d\u59cb\u5316\u65f6begin_id\u548cmax_id\u5e94\u76f8\u540c' , `max_id` bigint ( 20 ) NOT NULL DEFAULT '0' COMMENT '\u5f53\u524d\u6700\u5927id' , `step` int ( 11 ) DEFAULT '0' COMMENT '\u6b65\u957f' , `delta` int ( 11 ) NOT NULL DEFAULT '1' COMMENT '\u6bcf\u6b21id\u589e\u91cf' , `remainder` int ( 11 ) NOT NULL DEFAULT '0' COMMENT '\u4f59\u6570' , `create_time` timestamp NOT NULL DEFAULT '2010-01-01 00:00:00' COMMENT '\u521b\u5efa\u65f6\u95f4' , `update_time` timestamp NOT NULL DEFAULT '2010-01-01 00:00:00' COMMENT '\u66f4\u65b0\u65f6\u95f4' , `version` bigint ( 20 ) NOT NULL DEFAULT '0' COMMENT '\u7248\u672c\u53f7' , PRIMARY KEY ( `id` ), UNIQUE KEY `uniq_biz_type` ( `biz_type` ) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 COMMENT 'id\u4fe1\u606f\u8868' ; CREATE TABLE `tiny_id_token` ( `id` int ( 11 ) unsigned NOT NULL AUTO_INCREMENT COMMENT '\u81ea\u589eid' , `token` varchar ( 255 ) NOT NULL DEFAULT '' COMMENT 'token' , `biz_type` varchar ( 63 ) NOT NULL DEFAULT '' COMMENT '\u6b64token\u53ef\u8bbf\u95ee\u7684\u4e1a\u52a1\u7c7b\u578b\u6807\u8bc6' , `remark` varchar ( 255 ) NOT NULL DEFAULT '' COMMENT '\u5907\u6ce8' , `create_time` timestamp NOT NULL DEFAULT '2010-01-01 00:00:00' COMMENT '\u521b\u5efa\u65f6\u95f4' , `update_time` timestamp NOT NULL DEFAULT '2010-01-01 00:00:00' COMMENT '\u66f4\u65b0\u65f6\u95f4' , PRIMARY KEY ( `id` ) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 COMMENT 'token\u4fe1\u606f\u8868' ; INSERT INTO `tiny_id_info` ( `id` , `biz_type` , `begin_id` , `max_id` , `step` , `delta` , `remainder` , `create_time` , `update_time` , `version` ) VALUES ( 1 , 'test' , 1 , 1 , 100000 , 1 , 0 , '2018-07-21 23:52:58' , '2018-07-22 23:19:27' , 1 ); INSERT INTO `tiny_id_info` ( `id` , `biz_type` , `begin_id` , `max_id` , `step` , `delta` , `remainder` , `create_time` , `update_time` , `version` ) VALUES ( 2 , 'test_odd' , 1 , 1 , 100000 , 2 , 1 , '2018-07-21 23:52:58' , '2018-07-23 00:39:24' , 3 ); INSERT INTO `tiny_id_token` ( `id` , `token` , `biz_type` , `remark` , `create_time` , `update_time` ) VALUES ( 1 , '0f673adf80504e2eaa552f5d791b644c' , 'test' , '1' , '2017-12-14 16:36:46' , '2017-12-14 16:36:48' ); INSERT INTO `tiny_id_token` ( `id` , `token` , `biz_type` , `remark` , `create_time` , `update_time` ) VALUES ( 2 , '0f673adf80504e2eaa552f5d791b644c' , 'test_odd' , '1' , '2017-12-14 16:36:46' , '2017-12-14 16:36:48' ); \uff083\uff09\u914d\u7f6e\u6570\u636e\u5e93\uff1a datasource.tinyid.names=primary datasource.tinyid.primary.driver-class-name=com.mysql.jdbc.Driver datasource.tinyid.primary.url=jdbc:mysql://ip:port/databaseName?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8 datasource.tinyid.primary.username=root datasource.tinyid.primary.password=123456 \uff084\uff09\u542f\u52a8tinyid-server\u540e\u6d4b\u8bd5 \u83b7\u53d6\u5206\u5e03\u5f0f\u81ea\u589eID: http://localhost:9999/tinyid/id/nextIdSimple?bizType=test&token=0f673adf80504e2eaa552f5d791b644c' \u8fd4\u56de\u7ed3\u679c: 3 \u6279\u91cf\u83b7\u53d6\u5206\u5e03\u5f0f\u81ea\u589eID: http://localhost:9999/tinyid/id/nextIdSimple?bizType=test&token=0f673adf80504e2eaa552f5d791b644c&batchSize=10' \u8fd4\u56de\u7ed3\u679c: 4,5,6,7,8,9,10,11,12,13","title":"\u5206\u5e03\u5f0f ID \u7684 9 \u79cd\u751f\u6210\u65b9\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#id","text":"\u5728\u8bf4\u5206\u5e03\u5f0fID\u7684\u5177\u4f53\u5b9e\u73b0\u4e4b\u524d\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u7528\u5206\u5e03\u5f0fID\uff1f\u5206\u5e03\u5f0fID\u5e94\u8be5\u6ee1\u8db3\u54ea\u4e9b\u7279\u5f81\uff1f \u4ec0\u4e48\u662f\u5206\u5e03\u5f0fID\uff1f \u62ffMySQL\u6570\u636e\u5e93\u4e3e\u4e2a\u6817\u5b50\uff1a \u5728\u6211\u4eec\u4e1a\u52a1\u6570\u636e\u91cf\u4e0d\u5927\u7684\u65f6\u5019\uff0c\u5355\u5e93\u5355\u8868\u5b8c\u5168\u53ef\u4ee5\u652f\u6491\u73b0\u6709\u4e1a\u52a1\uff0c\u6570\u636e\u518d\u5927\u4e00\u70b9\u641e\u4e2aMySQL\u4e3b\u4ece\u540c\u6b65\u8bfb\u5199\u5206\u79bb\u4e5f\u80fd\u5bf9\u4ed8\u3002 \u4f46\u968f\u7740\u6570\u636e\u65e5\u6e10\u589e\u957f\uff0c\u4e3b\u4ece\u540c\u6b65\u4e5f\u625b\u4e0d\u4f4f\u4e86\uff0c\u5c31\u9700\u8981\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u5206\u5e93\u5206\u8868\uff0c\u4f46\u5206\u5e93\u5206\u8868\u540e\u9700\u8981\u6709\u4e00\u4e2a\u552f\u4e00ID\u6765\u6807\u8bc6\u4e00\u6761\u6570\u636e\uff0c\u6570\u636e\u5e93\u7684\u81ea\u589eID\u663e\u7136\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff1b\u7279\u522b\u4e00\u70b9\u7684\u5982\u8ba2\u5355\u3001\u4f18\u60e0\u5238\u4e5f\u90fd\u9700\u8981\u6709\u552f\u4e00ID\u505a\u6807\u8bc6\u3002\u6b64\u65f6\u4e00\u4e2a\u80fd\u591f\u751f\u6210\u5168\u5c40\u552f\u4e00ID\u7684\u7cfb\u7edf\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002\u90a3\u4e48\u8fd9\u4e2a\u5168\u5c40\u552f\u4e00ID\u5c31\u53eb\u5206\u5e03\u5f0fID\u3002 \u90a3\u4e48\u5206\u5e03\u5f0fID\u9700\u8981\u6ee1\u8db3\u90a3\u4e9b\u6761\u4ef6\uff1f \u5168\u5c40\u552f\u4e00\uff1a\u5fc5\u987b\u4fdd\u8bc1ID\u662f\u5168\u5c40\u6027\u552f\u4e00\u7684\uff0c\u57fa\u672c\u8981\u6c42 \u9ad8\u6027\u80fd\uff1a\u9ad8\u53ef\u7528\u4f4e\u5ef6\u65f6\uff0cID\u751f\u6210\u54cd\u5e94\u8981\u5757\uff0c\u5426\u5219\u53cd\u5012\u4f1a\u6210\u4e3a\u4e1a\u52a1\u74f6\u9888 \u9ad8\u53ef\u7528\uff1a100%\u7684\u53ef\u7528\u6027\u662f\u9a97\u4eba\u7684\uff0c\u4f46\u662f\u4e5f\u8981\u65e0\u9650\u63a5\u8fd1\u4e8e100%\u7684\u53ef\u7528\u6027 \u597d\u63a5\u5165\uff1a\u8981\u79c9\u7740\u62ff\u6765\u5373\u7528\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u5728\u7cfb\u7edf\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e0a\u8981\u5c3d\u53ef\u80fd\u7684\u7b80\u5355 \u8d8b\u52bf\u9012\u589e\uff1a\u6700\u597d\u8d8b\u52bf\u9012\u589e\uff0c\u8fd9\u4e2a\u8981\u6c42\u5c31\u5f97\u770b\u5177\u4f53\u4e1a\u52a1\u573a\u666f\u4e86\uff0c\u4e00\u822c\u4e0d\u4e25\u683c\u8981\u6c42","title":"\u4e3a\u4ec0\u4e48\u8981\u7528\u5206\u5e03\u5f0fID\uff1f"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#id_1","text":"\u4eca\u5929\u4e3b\u8981\u5206\u6790\u4e00\u4e0b\u4ee5\u4e0b9\u79cd\uff0c\u5206\u5e03\u5f0fID\u751f\u6210\u5668\u65b9\u5f0f\u4ee5\u53ca\u4f18\u7f3a\u70b9\uff1a UUID \u6570\u636e\u5e93\u81ea\u589eID \u6570\u636e\u5e93\u591a\u4e3b\u6a21\u5f0f \u53f7\u6bb5\u6a21\u5f0f Redis \u96ea\u82b1\u7b97\u6cd5\uff08SnowFlake\uff09 \u6ef4\u6ef4\u51fa\u54c1\uff08TinyID\uff09 \u767e\u5ea6 \uff08Uidgenerator\uff09 \u7f8e\u56e2\uff08Leaf\uff09 \u90a3\u4e48\u5b83\u4eec\u90fd\u662f\u5982\u4f55\u5b9e\u73b0\uff1f\u4ee5\u53ca\u5404\u81ea\u6709\u4ec0\u4e48\u4f18\u7f3a\u70b9\uff1f\u6211\u4eec\u5f80\u4e0b\u770b","title":"\u5206\u5e03\u5f0fID\u90fd\u6709\u54ea\u4e9b\u751f\u6210\u65b9\u5f0f\uff1f"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#uuid","text":"\u5728Java\u7684\u4e16\u754c\u91cc\uff0c\u60f3\u8981\u5f97\u5230\u4e00\u4e2a\u5177\u6709\u552f\u4e00\u6027\u7684ID\uff0c\u9996\u5148\u88ab\u60f3\u5230\u53ef\u80fd\u5c31\u662fUUID\uff0c\u6bd5\u7adf\u5b83\u6709\u7740\u5168\u7403\u552f\u4e00\u7684\u7279\u6027\u3002\u90a3\u4e48UUID\u53ef\u4ee5\u505a\u5206\u5e03\u5f0fID\u5417\uff1f\u7b54\u6848\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5e76\u4e0d\u63a8\u8350\uff01 public static void main ( String [] args ) { String uuid = UUID . randomUUID (). toString (). replaceAll ( \"-\" , \"\" ); System . out . println ( uuid ); } UUID \u7684\u751f\u6210\u7b80\u5355\u5230\u53ea\u6709\u4e00\u884c\u4ee3\u7801\uff0c\u8f93\u51fa\u7ed3\u679c c2b8c2b9e46c47e3b30dca3b0d447718 \uff0c\u4f46UUID\u5374\u5e76\u4e0d\u9002\u7528\u4e8e\u5b9e\u9645\u7684\u4e1a\u52a1\u9700\u6c42\u3002\u50cf\u7528\u4f5c\u8ba2\u5355\u53f7UUID\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u6ca1\u6709\u4e1d\u6beb\u7684\u610f\u4e49\uff0c\u770b\u4e0d\u51fa\u548c\u8ba2\u5355\u76f8\u5173\u7684\u6709\u7528\u4fe1\u606f\uff1b\u800c\u5bf9\u4e8e\u6570\u636e\u5e93\u6765\u8bf4\u7528\u4f5c\u4e1a\u52a1\u4e3b\u952eID\uff0c\u5b83\u4e0d\u4ec5\u662f\u592a\u957f\u8fd8\u662f\u5b57\u7b26\u4e32\uff0c\u5b58\u50a8\u6027\u80fd\u5dee\u67e5\u8be2\u4e5f\u5f88\u8017\u65f6\uff0c\u6240\u4ee5\u4e0d\u63a8\u8350\u7528\u4f5c\u5206\u5e03\u5f0fID\u3002 \u4f18\u70b9\uff1a\u751f\u6210\u8db3\u591f\u7b80\u5355\uff0c\u672c\u5730\u751f\u6210\u65e0\u7f51\u7edc\u6d88\u8017\uff0c\u5177\u6709\u552f\u4e00\u6027 \u7f3a\u70b9\uff1a - \u65e0\u5e8f\u7684\u5b57\u7b26\u4e32\uff0c\u4e0d\u5177\u5907\u8d8b\u52bf\u81ea\u589e\u7279\u6027 - \u6ca1\u6709\u5177\u4f53\u7684\u4e1a\u52a1\u542b\u4e49 - \u957f\u5ea6\u8fc7\u957f16 \u5b57\u8282128\u4f4d\uff0c36\u4f4d\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\uff0c\u5b58\u50a8\u4ee5\u53ca\u67e5\u8be2\u5bf9MySQL\u7684\u6027\u80fd\u6d88\u8017\u8f83\u5927\uff0cMySQL\u5b98\u65b9\u660e\u786e\u5efa\u8bae\u4e3b\u952e\u8981\u5c3d\u91cf\u8d8a\u77ed\u8d8a\u597d\uff0c\u4f5c\u4e3a\u6570\u636e\u5e93\u4e3b\u952e UUID \u7684\u65e0\u5e8f\u6027\u4f1a\u5bfc\u81f4\u6570\u636e\u4f4d\u7f6e\u9891\u7e41\u53d8\u52a8\uff0c\u4e25\u91cd\u5f71\u54cd\u6027\u80fd\u3002","title":"\u57fa\u4e8eUUID"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#id_2","text":"\u57fa\u4e8e\u6570\u636e\u5e93\u7684auto_increment\u81ea\u589eID\u5b8c\u5168\u53ef\u4ee5\u5145\u5f53\u5206\u5e03\u5f0fID\uff0c\u5177\u4f53\u5b9e\u73b0\uff1a\u9700\u8981\u4e00\u4e2a\u5355\u72ec\u7684MySQL\u5b9e\u4f8b\u7528\u6765\u751f\u6210ID\uff0c\u5efa\u8868\u7ed3\u6784\u5982\u4e0b\uff1a CREATE DATABASE `SEQ_ID` ; CREATE TABLE SEQID . SEQUENCE_ID ( id bigint ( 20 ) unsigned NOT NULL auto_increment , value char ( 10 ) NOT NULL default '' , PRIMARY KEY ( id ), ) ENGINE = MyISAM ; insert into SEQUENCE_ID ( value ) VALUES ( 'values' ); \u5f53\u6211\u4eec\u9700\u8981\u4e00\u4e2aID\u7684\u65f6\u5019\uff0c\u5411\u8868\u4e2d\u63d2\u5165\u4e00\u6761\u8bb0\u5f55\u8fd4\u56de\u4e3b\u952eID\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u6709\u4e00\u4e2a\u6bd4\u8f83\u81f4\u547d\u7684\u7f3a\u70b9\uff0c\u8bbf\u95ee\u91cf\u6fc0\u589e\u65f6MySQL\u672c\u8eab\u5c31\u662f\u7cfb\u7edf\u7684\u74f6\u9888\uff0c\u7528\u5b83\u6765\u5b9e\u73b0\u5206\u5e03\u5f0f\u670d\u52a1\u98ce\u9669\u6bd4\u8f83\u5927\uff0c\u4e0d\u63a8\u8350\uff01 \u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355\uff0cID\u5355\u8c03\u81ea\u589e\uff0c\u6570\u503c\u7c7b\u578b\u67e5\u8be2\u901f\u5ea6\u5feb \u7f3a\u70b9\uff1aDB\u5355\u70b9\u5b58\u5728\u5b95\u673a\u98ce\u9669\uff0c\u65e0\u6cd5\u625b\u4f4f\u9ad8\u5e76\u53d1\u573a\u666f","title":"\u57fa\u4e8e\u6570\u636e\u5e93\u81ea\u589eID"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#_1","text":"\u524d\u8fb9\u8bf4\u4e86\u5355\u70b9\u6570\u636e\u5e93\u65b9\u5f0f\u4e0d\u53ef\u53d6\uff0c\u90a3\u5bf9\u4e0a\u8fb9\u7684\u65b9\u5f0f\u505a\u4e00\u4e9b\u9ad8\u53ef\u7528\u4f18\u5316\uff0c\u6362\u6210\u4e3b\u4ece\u6a21\u5f0f\u96c6\u7fa4\u3002\u5bb3\u6015\u4e00\u4e2a\u4e3b\u8282\u70b9\u6302\u6389\u6ca1\u6cd5\u7528\uff0c\u90a3\u5c31\u505a\u53cc\u4e3b\u6a21\u5f0f\u96c6\u7fa4\uff0c\u4e5f\u5c31\u662f\u4e24\u4e2aMysql\u5b9e\u4f8b\u90fd\u80fd\u5355\u72ec\u7684\u751f\u4ea7\u81ea\u589eID\u3002 \u90a3\u8fd9\u6837\u8fd8\u4f1a\u6709\u4e2a\u95ee\u9898\uff0c\u4e24\u4e2aMySQL\u5b9e\u4f8b\u7684\u81ea\u589eID\u90fd\u4ece1\u5f00\u59cb\uff0c\u4f1a\u751f\u6210\u91cd\u590d\u7684ID\u600e\u4e48\u529e\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u8bbe\u7f6e\u8d77\u59cb\u503c\u548c\u81ea\u589e\u6b65\u957f MySQL_1 \u914d\u7f6e\uff1a set @@auto_increment_offset = 1; -- \u8d77\u59cb\u503c set @@auto_increment_increment = 2; -- \u6b65\u957f MySQL_2 \u914d\u7f6e\uff1a set @@auto_increment_offset = 2; -- \u8d77\u59cb\u503c set @@auto_increment_increment = 2; -- \u6b65\u957f \u8fd9\u6837\u4e24\u4e2aMySQL\u5b9e\u4f8b\u7684\u81ea\u589eID\u5206\u522b\u5c31\u662f\uff1a 1\u30013\u30015\u30017\u30019 2\u30014\u30016\u30018\u300110 \u90a3\u5982\u679c\u96c6\u7fa4\u540e\u7684\u6027\u80fd\u8fd8\u662f\u625b\u4e0d\u4f4f\u9ad8\u5e76\u53d1\u548b\u529e\uff1f\u5c31\u8981\u8fdb\u884cMySQL\u6269\u5bb9\u589e\u52a0\u8282\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u4e8b\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c\u6c34\u5e73\u6269\u5c55\u7684\u6570\u636e\u5e93\u96c6\u7fa4\uff0c\u6709\u5229\u4e8e\u89e3\u51b3\u6570\u636e\u5e93\u5355\u70b9\u538b\u529b\u7684\u95ee\u9898\uff0c\u540c\u65f6\u4e3a\u4e86ID\u751f\u6210\u7279\u6027\uff0c\u5c06\u81ea\u589e\u6b65\u957f\u6309\u7167\u673a\u5668\u6570\u91cf\u6765\u8bbe\u7f6e\u3002 \u589e\u52a0\u7b2c\u4e09\u53f0MySQL\u5b9e\u4f8b\u9700\u8981\u4eba\u5de5\u4fee\u6539\u4e00\u3001\u4e8c\u4e24\u53f0MySQL\u5b9e\u4f8b\u7684\u8d77\u59cb\u503c\u548c\u6b65\u957f\uff0c\u628a\u7b2c\u4e09\u53f0\u673a\u5668\u7684ID\u8d77\u59cb\u751f\u6210\u4f4d\u7f6e\u8bbe\u5b9a\u5728\u6bd4\u73b0\u6709\u6700\u5927\u81ea\u589eID\u7684\u4f4d\u7f6e\u8fdc\u4e00\u4e9b\uff0c\u4f46\u5fc5\u987b\u5728\u4e00\u3001\u4e8c\u4e24\u53f0MySQL\u5b9e\u4f8bID\u8fd8\u6ca1\u6709\u589e\u957f\u5230\u7b2c\u4e09\u53f0MySQL\u5b9e\u4f8b\u7684\u8d77\u59cbID\u503c\u7684\u65f6\u5019\uff0c\u5426\u5219\u81ea\u589eID\u5c31\u8981\u51fa\u73b0\u91cd\u590d\u4e86\uff0c\u5fc5\u8981\u65f6\u53ef\u80fd\u8fd8\u9700\u8981\u505c\u673a\u4fee\u6539\u3002 \u4f18\u70b9\uff1a\u89e3\u51b3DB\u5355\u70b9\u95ee\u9898 \u7f3a\u70b9\uff1a\u4e0d\u5229\u4e8e\u540e\u7eed\u6269\u5bb9\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u5355\u4e2a\u6570\u636e\u5e93\u81ea\u8eab\u538b\u529b\u8fd8\u662f\u5927\uff0c\u4f9d\u65e7\u65e0\u6cd5\u6ee1\u8db3\u9ad8\u5e76\u53d1\u573a\u666f\u3002","title":"\u57fa\u4e8e\u6570\u636e\u5e93\u96c6\u7fa4\u6a21\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#_2","text":"\u53f7\u6bb5\u6a21\u5f0f\u662f\u5f53\u4e0b\u5206\u5e03\u5f0fID\u751f\u6210\u5668\u7684\u4e3b\u6d41\u5b9e\u73b0\u65b9\u5f0f\u4e4b\u4e00\uff0c\u53f7\u6bb5\u6a21\u5f0f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4ece\u6570\u636e\u5e93\u6279\u91cf\u7684\u83b7\u53d6\u81ea\u589eID\uff0c\u6bcf\u6b21\u4ece\u6570\u636e\u5e93\u53d6\u51fa\u4e00\u4e2a\u53f7\u6bb5\u8303\u56f4\uff0c\u4f8b\u5982 (1,1000] \u4ee3\u88681000\u4e2aID\uff0c\u5177\u4f53\u7684\u4e1a\u52a1\u670d\u52a1\u5c06\u672c\u53f7\u6bb5\uff0c\u751f\u62101~1000\u7684\u81ea\u589eID\u5e76\u52a0\u8f7d\u5230\u5185\u5b58\u3002\u8868\u7ed3\u6784\u5982\u4e0b\uff1a CREATE TABLE id_generator ( id int ( 10 ) NOT NULL , max_id bigint ( 20 ) NOT NULL COMMENT '\u5f53\u524d\u6700\u5927id' , step int ( 20 ) NOT NULL COMMENT '\u53f7\u6bb5\u7684\u5e03\u957f' , biz_type int ( 20 ) NOT NULL COMMENT '\u4e1a\u52a1\u7c7b\u578b' , version int ( 20 ) NOT NULL COMMENT '\u7248\u672c\u53f7' , PRIMARY KEY ( `id` ) ) biz_type \uff1a\u4ee3\u8868\u4e0d\u540c\u4e1a\u52a1\u7c7b\u578b max_id \uff1a\u5f53\u524d\u6700\u5927\u7684\u53ef\u7528id step \uff1a\u4ee3\u8868\u53f7\u6bb5\u7684\u957f\u5ea6 version \uff1a\u662f\u4e00\u4e2a\u4e50\u89c2\u9501\uff0c\u6bcf\u6b21\u90fd\u66f4\u65b0version\uff0c\u4fdd\u8bc1\u5e76\u53d1\u65f6\u6570\u636e\u7684\u6b63\u786e\u6027 id biz_type max_id step version 1 101 1000 2000 0 \u7b49\u8fd9\u6279\u53f7\u6bb5ID\u7528\u5b8c\uff0c\u518d\u6b21\u5411\u6570\u636e\u5e93\u7533\u8bf7\u65b0\u53f7\u6bb5\uff0c\u5bf9max_id\u5b57\u6bb5\u505a\u4e00\u6b21update\u64cd\u4f5c\uff0cupdate max_id= max_id + step\uff0cupdate\u6210\u529f\u5219\u8bf4\u660e\u65b0\u53f7\u6bb5\u83b7\u53d6\u6210\u529f\uff0c\u65b0\u7684\u53f7\u6bb5\u8303\u56f4\u662f(max_id ,max_id +step]\u3002 update id_generator set max_id = #{max_id+step}, version = version + 1 where version = # {version} and biz_type = XXX \u7531\u4e8e\u591a\u4e1a\u52a1\u7aef\u53ef\u80fd\u540c\u65f6\u64cd\u4f5c\uff0c\u6240\u4ee5\u91c7\u7528\u7248\u672c\u53f7version\u4e50\u89c2\u9501\u65b9\u5f0f\u66f4\u65b0\uff0c\u8fd9\u79cd\u5206\u5e03\u5f0fID\u751f\u6210\u65b9\u5f0f\u4e0d\u5f3a\u4f9d\u8d56\u4e8e\u6570\u636e\u5e93\uff0c\u4e0d\u4f1a\u9891\u7e41\u7684\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u538b\u529b\u5c0f\u5f88\u591a\u3002","title":"\u57fa\u4e8e\u6570\u636e\u5e93\u7684\u53f7\u6bb5\u6a21\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#redis","text":"Redis\u4e5f\u540c\u6837\u53ef\u4ee5\u5b9e\u73b0\uff0c\u539f\u7406\u5c31\u662f\u5229\u7528redis\u7684 incr\u547d\u4ee4\u5b9e\u73b0ID\u7684\u539f\u5b50\u6027\u81ea\u589e\u3002 127.0.0.1 : 6379 > set seq_id 1 // \u521d\u59cb\u5316\u81ea\u589eID\u4e3a1 OK 127.0.0.1 : 6379 > incr seq_id // \u589e\u52a01\uff0c\u5e76\u8fd4\u56de\u9012\u589e\u540e\u7684\u6570\u503c ( integer ) 2 \u7528redis\u5b9e\u73b0\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u8981\u8003\u8651\u5230redis\u6301\u4e45\u5316\u7684\u95ee\u9898\u3002redis\u6709\u4e24\u79cd\u6301\u4e45\u5316\u65b9\u5f0fRDB\u548cAOF RDB\u4f1a\u5b9a\u65f6\u6253\u4e00\u4e2a\u5feb\u7167\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u5047\u5982\u8fde\u7eed\u81ea\u589e\u4f46redis\u6ca1\u53ca\u65f6\u6301\u4e45\u5316\uff0c\u800c\u8fd9\u4f1aRedis\u6302\u6389\u4e86\uff0c\u91cd\u542fRedis\u540e\u4f1a\u51fa\u73b0ID\u91cd\u590d\u7684\u60c5\u51b5\u3002 AOF\u4f1a\u5bf9\u6bcf\u6761\u5199\u547d\u4ee4\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u5373\u4f7fRedis\u6302\u6389\u4e86\u4e5f\u4e0d\u4f1a\u51fa\u73b0ID\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u4f46\u7531\u4e8eincr\u547d\u4ee4\u7684\u7279\u6b8a\u6027\uff0c\u4f1a\u5bfc\u81f4Redis\u91cd\u542f\u6062\u590d\u7684\u6570\u636e\u65f6\u95f4\u8fc7\u957f\u3002","title":"\u57fa\u4e8eRedis\u6a21\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#snowflake","text":"\u96ea\u82b1\u7b97\u6cd5\uff08Snowflake\uff09\u662ftwitter\u516c\u53f8\u5185\u90e8\u5206\u5e03\u5f0f\u9879\u76ee\u91c7\u7528\u7684ID\u751f\u6210\u7b97\u6cd5\uff0c\u5f00\u6e90\u540e\u5e7f\u53d7\u56fd\u5185\u5927\u5382\u7684\u597d\u8bc4\uff0c\u5728\u8be5\u7b97\u6cd5\u5f71\u54cd\u4e0b\u5404\u5927\u516c\u53f8\u76f8\u7ee7\u5f00\u53d1\u51fa\u5404\u5177\u7279\u8272\u7684\u5206\u5e03\u5f0f\u751f\u6210\u5668\u3002 Snowflake\u751f\u6210\u7684\u662fLong\u7c7b\u578b\u7684ID\uff0c\u4e00\u4e2aLong\u7c7b\u578b\u53608\u4e2a\u5b57\u8282\uff0c\u6bcf\u4e2a\u5b57\u8282\u53608\u6bd4\u7279\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2aLong\u7c7b\u578b\u536064\u4e2a\u6bd4\u7279\u3002 Snowflake ID\u7ec4\u6210\u7ed3\u6784\uff1a\u6b63\u6570\u4f4d\uff08\u53601\u6bd4\u7279\uff09+ \u65f6\u95f4\u6233\uff08\u536041\u6bd4\u7279\uff09+ \u673a\u5668ID\uff08\u53605\u6bd4\u7279\uff09+ \u6570\u636e\u4e2d\u5fc3\uff08\u53605\u6bd4\u7279\uff09+ \u81ea\u589e\u503c\uff08\u536012\u6bd4\u7279\uff09\uff0c\u603b\u517164\u6bd4\u7279\u7ec4\u6210\u7684\u4e00\u4e2aLong\u7c7b\u578b\u3002 \u7b2c\u4e00\u4e2abit\u4f4d\uff081bit\uff09\uff1aJava\u4e2dlong\u7684\u6700\u9ad8\u4f4d\u662f\u7b26\u53f7\u4f4d\u4ee3\u8868\u6b63\u8d1f\uff0c\u6b63\u6570\u662f0\uff0c\u8d1f\u6570\u662f1\uff0c\u4e00\u822c\u751f\u6210ID\u90fd\u4e3a\u6b63\u6570\uff0c\u6240\u4ee5\u9ed8\u8ba4\u4e3a0\u3002 \u65f6\u95f4\u6233\u90e8\u5206\uff0841bit\uff09\uff1a\u6beb\u79d2\u7ea7\u7684\u65f6\u95f4\uff0c\u4e0d\u5efa\u8bae\u5b58\u5f53\u524d\u65f6\u95f4\u6233\uff0c\u800c\u662f\u7528\uff08\u5f53\u524d\u65f6\u95f4\u6233 - \u56fa\u5b9a\u5f00\u59cb\u65f6\u95f4\u6233\uff09\u7684\u5dee\u503c\uff0c\u53ef\u4ee5\u4f7f\u4ea7\u751f\u7684ID\u4ece\u66f4\u5c0f\u7684\u503c\u5f00\u59cb\uff1b41\u4f4d\u7684\u65f6\u95f4\u6233\u53ef\u4ee5\u4f7f\u752869\u5e74\uff0c(1L << 41) / (1000L * 60 * 60 * 24 * 365) = 69\u5e74 \u5de5\u4f5c\u673a\u5668id\uff0810bit\uff09\uff1a\u4e5f\u88ab\u53eb\u505aworkId\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7075\u6d3b\u914d\u7f6e\uff0c\u673a\u623f\u6216\u8005\u673a\u5668\u53f7\u7ec4\u5408\u90fd\u53ef\u4ee5\u3002 \u5e8f\u5217\u53f7\u90e8\u5206\uff0812bit\uff09\uff0c\u81ea\u589e\u503c\u652f\u6301\u540c\u4e00\u6beb\u79d2\u5185\u540c\u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u751f\u62104096\u4e2aID \u6839\u636e\u8fd9\u4e2a\u7b97\u6cd5\u7684\u903b\u8f91\uff0c\u53ea\u9700\u8981\u5c06\u8fd9\u4e2a\u7b97\u6cd5\u7528Java\u8bed\u8a00\u5b9e\u73b0\u51fa\u6765\uff0c\u5c01\u88c5\u4e3a\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5\uff0c\u90a3\u4e48\u5404\u4e2a\u4e1a\u52a1\u5e94\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8be5\u5de5\u5177\u65b9\u6cd5\u6765\u83b7\u53d6\u5206\u5e03\u5f0fID\uff0c\u53ea\u9700\u4fdd\u8bc1\u6bcf\u4e2a\u4e1a\u52a1\u5e94\u7528\u6709\u81ea\u5df1\u7684\u5de5\u4f5c\u673a\u5668id\u5373\u53ef\uff0c\u800c\u4e0d\u9700\u8981\u5355\u72ec\u53bb\u642d\u5efa\u4e00\u4e2a\u83b7\u53d6\u5206\u5e03\u5f0fID\u7684\u5e94\u7528\u3002 Java\u7248\u672c\u7684Snowflake\u7b97\u6cd5\u5b9e\u73b0\uff1a /** * Twitter\u7684SnowFlake\u7b97\u6cd5,\u4f7f\u7528SnowFlake\u7b97\u6cd5\u751f\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u7136\u540e\u8f6c\u5316\u4e3a62\u8fdb\u5236\u53d8\u6210\u4e00\u4e2a\u77ed\u5730\u5740URL * * https://github.com/beyondfengyu/SnowFlake */ public class SnowFlakeShortUrl { /** * \u8d77\u59cb\u7684\u65f6\u95f4\u6233 */ private final static long START_TIMESTAMP = 1480166465631L ; /** * \u6bcf\u4e00\u90e8\u5206\u5360\u7528\u7684\u4f4d\u6570 */ private final static long SEQUENCE_BIT = 12 ; //\u5e8f\u5217\u53f7\u5360\u7528\u7684\u4f4d\u6570 private final static long MACHINE_BIT = 5 ; //\u673a\u5668\u6807\u8bc6\u5360\u7528\u7684\u4f4d\u6570 private final static long DATA_CENTER_BIT = 5 ; //\u6570\u636e\u4e2d\u5fc3\u5360\u7528\u7684\u4f4d\u6570 /** * \u6bcf\u4e00\u90e8\u5206\u7684\u6700\u5927\u503c */ private final static long MAX_SEQUENCE = - 1L ^ ( - 1L << SEQUENCE_BIT ); private final static long MAX_MACHINE_NUM = - 1L ^ ( - 1L << MACHINE_BIT ); private final static long MAX_DATA_CENTER_NUM = - 1L ^ ( - 1L << DATA_CENTER_BIT ); /** * \u6bcf\u4e00\u90e8\u5206\u5411\u5de6\u7684\u4f4d\u79fb */ private final static long MACHINE_LEFT = SEQUENCE_BIT ; private final static long DATA_CENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT ; private final static long TIMESTAMP_LEFT = DATA_CENTER_LEFT + DATA_CENTER_BIT ; private long dataCenterId ; //\u6570\u636e\u4e2d\u5fc3 private long machineId ; //\u673a\u5668\u6807\u8bc6 private long sequence = 0 L ; //\u5e8f\u5217\u53f7 private long lastTimeStamp = - 1L ; //\u4e0a\u4e00\u6b21\u65f6\u95f4\u6233 private long getNextMill () { long mill = getNewTimeStamp (); while ( mill <= lastTimeStamp ) { mill = getNewTimeStamp (); } return mill ; } private long getNewTimeStamp () { return System . currentTimeMillis (); } /** * \u6839\u636e\u6307\u5b9a\u7684\u6570\u636e\u4e2d\u5fc3ID\u548c\u673a\u5668\u6807\u5fd7ID\u751f\u6210\u6307\u5b9a\u7684\u5e8f\u5217\u53f7 * * @param dataCenterId \u6570\u636e\u4e2d\u5fc3ID * @param machineId \u673a\u5668\u6807\u5fd7ID */ public SnowFlakeShortUrl ( long dataCenterId , long machineId ) { if ( dataCenterId > MAX_DATA_CENTER_NUM || dataCenterId < 0 ) { throw new IllegalArgumentException ( \"DtaCenterId can't be greater than MAX_DATA_CENTER_NUM or less than 0\uff01\" ); } if ( machineId > MAX_MACHINE_NUM || machineId < 0 ) { throw new IllegalArgumentException ( \"MachineId can't be greater than MAX_MACHINE_NUM or less than 0\uff01\" ); } this . dataCenterId = dataCenterId ; this . machineId = machineId ; } /** * \u4ea7\u751f\u4e0b\u4e00\u4e2aID * * @return */ public synchronized long nextId () { long currTimeStamp = getNewTimeStamp (); if ( currTimeStamp < lastTimeStamp ) { throw new RuntimeException ( \"Clock moved backwards. Refusing to generate id\" ); } if ( currTimeStamp == lastTimeStamp ) { //\u76f8\u540c\u6beb\u79d2\u5185\uff0c\u5e8f\u5217\u53f7\u81ea\u589e sequence = ( sequence + 1 ) & MAX_SEQUENCE ; //\u540c\u4e00\u6beb\u79d2\u7684\u5e8f\u5217\u6570\u5df2\u7ecf\u8fbe\u5230\u6700\u5927 if ( sequence == 0 L ) { currTimeStamp = getNextMill (); } } else { //\u4e0d\u540c\u6beb\u79d2\u5185\uff0c\u5e8f\u5217\u53f7\u7f6e\u4e3a0 sequence = 0 L ; } lastTimeStamp = currTimeStamp ; return ( currTimeStamp - START_TIMESTAMP ) << TIMESTAMP_LEFT //\u65f6\u95f4\u6233\u90e8\u5206 | dataCenterId << DATA_CENTER_LEFT //\u6570\u636e\u4e2d\u5fc3\u90e8\u5206 | machineId << MACHINE_LEFT //\u673a\u5668\u6807\u8bc6\u90e8\u5206 | sequence ; //\u5e8f\u5217\u53f7\u90e8\u5206 } public static void main ( String [] args ) { SnowFlakeShortUrl snowFlake = new SnowFlakeShortUrl ( 2 , 3 ); for ( int i = 0 ; i < ( 1 << 4 ); i ++ ) { //10\u8fdb\u5236 System . out . println ( snowFlake . nextId ()); } } }","title":"\u57fa\u4e8e\u96ea\u82b1\u7b97\u6cd5\uff08Snowflake\uff09\u6a21\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#uid-generator","text":"uid-generator\u662f\u7531\u767e\u5ea6\u6280\u672f\u90e8\u5f00\u53d1\uff0c\u9879\u76eeGitHub\u5730\u5740 https://github.com/baidu/uid-generator uid-generator\u662f\u57fa\u4e8eSnowflake\u7b97\u6cd5\u5b9e\u73b0\u7684\uff0c\u4e0e\u539f\u59cb\u7684snowflake\u7b97\u6cd5\u4e0d\u540c\u5728\u4e8e\uff0cuid-generator\u652f\u6301\u81ea\u5b9a\u4e49\u65f6\u95f4\u6233\u3001\u5de5\u4f5c\u673a\u5668ID\u548c \u5e8f\u5217\u53f7 \u7b49\u5404\u90e8\u5206\u7684\u4f4d\u6570\uff0c\u800c\u4e14uid-generator\u4e2d\u91c7\u7528\u7528\u6237\u81ea\u5b9a\u4e49workId\u7684\u751f\u6210\u7b56\u7565\u3002 uid-generator\u9700\u8981\u4e0e\u6570\u636e\u5e93\u914d\u5408\u4f7f\u7528\uff0c\u9700\u8981\u65b0\u589e\u4e00\u4e2aWORKER_NODE\u8868\u3002\u5f53\u5e94\u7528\u542f\u52a8\u65f6\u4f1a\u5411\u6570\u636e\u5e93\u8868\u4e2d\u53bb\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u63d2\u5165\u6210\u529f\u540e\u8fd4\u56de\u7684\u81ea\u589eID\u5c31\u662f\u8be5\u673a\u5668\u7684workId\u6570\u636e\u7531host\uff0cport\u7ec4\u6210\u3002 \u5bf9\u4e8euid-generator ID\u7ec4\u6210\u7ed3\u6784\uff1a workId\uff0c\u5360\u7528\u4e8622\u4e2abit\u4f4d\uff0c\u65f6\u95f4\u5360\u7528\u4e8628\u4e2abit\u4f4d\uff0c\u5e8f\u5217\u5316\u5360\u7528\u4e8613\u4e2abit\u4f4d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u548c\u539f\u59cb\u7684snowflake\u4e0d\u592a\u4e00\u6837\uff0c\u65f6\u95f4\u7684\u5355\u4f4d\u662f\u79d2\uff0c\u800c\u4e0d\u662f\u6beb\u79d2\uff0cworkId\u4e5f\u4e0d\u4e00\u6837\uff0c\u800c\u4e14\u540c\u4e00\u5e94\u7528\u6bcf\u6b21\u91cd\u542f\u5c31\u4f1a\u6d88\u8d39\u4e00\u4e2aworkId\u3002 \u53c2\u8003\u6587\u732e https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md","title":"\u767e\u5ea6\uff08uid-generator\uff09"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#leaf","text":"Leaf\u7531\u7f8e\u56e2\u5f00\u53d1\uff0cgithub\u5730\u5740\uff1a https://github.com/Meituan-Dianping/Leaf Leaf\u540c\u65f6\u652f\u6301\u53f7\u6bb5\u6a21\u5f0f\u548csnowflake\u7b97\u6cd5\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5207\u6362\u4f7f\u7528\u3002 \u53f7\u6bb5\u6a21\u5f0f \u5148\u5bfc\u5165\u6e90\u7801 https://github.com/Meituan-Dianping/Leaf \uff0c\u5728\u5efa\u4e00\u5f20\u8868leaf_alloc DROP TABLE IF EXISTS `leaf_alloc` ; CREATE TABLE `leaf_alloc` ( `biz_tag` varchar ( 128 ) NOT NULL DEFAULT '' COMMENT '\u4e1a\u52a1key' , `max_id` bigint ( 20 ) NOT NULL DEFAULT '1' COMMENT '\u5f53\u524d\u5df2\u7ecf\u5206\u914d\u4e86\u7684\u6700\u5927id' , `step` int ( 11 ) NOT NULL COMMENT '\u521d\u59cb\u6b65\u957f\uff0c\u4e5f\u662f\u52a8\u6001\u8c03\u6574\u7684\u6700\u5c0f\u6b65\u957f' , `description` varchar ( 256 ) DEFAULT NULL COMMENT '\u4e1a\u52a1key\u7684\u63cf\u8ff0' , `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '\u6570\u636e\u5e93\u7ef4\u62a4\u7684\u66f4\u65b0\u65f6\u95f4' , PRIMARY KEY ( `biz_tag` ) ) ENGINE = InnoDB ; \u7136\u540e\u5728\u9879\u76ee\u4e2d\u5f00\u542f\u53f7\u6bb5\u6a21\u5f0f\uff0c\u914d\u7f6e\u5bf9\u5e94\u7684\u6570\u636e\u5e93\u4fe1\u606f\uff0c\u5e76\u5173\u95edsnowflake\u6a21\u5f0f leaf . name = com . sankuai . leaf . opensource . test leaf . segment . enable = true leaf . jdbc . url = jdbc : mysql :// localhost : 3306 / leaf_test ? useUnicode = true & characterEncoding = utf8 & characterSetResults = utf8 leaf . jdbc . username = root leaf . jdbc . password = root leaf . snowflake . enable = false #leaf.snowflake.zk.address= #leaf.snowflake.port= \u542f\u52a8leaf-server \u6a21\u5757\u7684 LeafServerApplication\u9879\u76ee\u5c31\u8dd1\u8d77\u6765\u4e86 \u53f7\u6bb5\u6a21\u5f0f\u83b7\u53d6\u5206\u5e03\u5f0f\u81ea\u589eID\u7684\u6d4b\u8bd5url \uff1ahttp\uff1a//localhost\uff1a8080/api/segment/get/leaf-segment-test \u76d1\u63a7\u53f7\u6bb5\u6a21\u5f0f\uff1a http://localhost:8080/cache snowflake\u6a21\u5f0f Leaf\u7684snowflake\u6a21\u5f0f\u4f9d\u8d56\u4e8eZooKeeper\uff0c\u4e0d\u540c\u4e8e\u539f\u59cbsnowflake\u7b97\u6cd5\u4e5f\u4e3b\u8981\u662f\u5728workId\u7684\u751f\u6210\u4e0a\uff0cLeaf\u4e2dworkId\u662f\u57fa\u4e8eZooKeeper\u7684\u987a\u5e8fId\u6765\u751f\u6210\u7684\uff0c\u6bcf\u4e2a\u5e94\u7528\u5728\u4f7f\u7528Leaf-snowflake\u65f6\uff0c\u542f\u52a8\u65f6\u90fd\u4f1a\u90fd\u5728Zookeeper\u4e2d\u751f\u6210\u4e00\u4e2a\u987a\u5e8fId\uff0c\u76f8\u5f53\u4e8e\u4e00\u53f0\u673a\u5668\u5bf9\u5e94\u4e00\u4e2a\u987a\u5e8f\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2aworkId\u3002 leaf.snowflake.enable=true leaf.snowflake.zk.address=127.0.0.1 leaf.snowflake.port=2181 snowflake\u6a21\u5f0f\u83b7\u53d6\u5206\u5e03\u5f0f\u81ea\u589eID\u7684\u6d4b\u8bd5url\uff1a http://localhost:8080/api/snowflake/get/test","title":"\u7f8e\u56e2\uff08Leaf\uff09"},{"location":"%E5%85%B6%E4%BB%96/%E5%88%86%E5%B8%83%E5%BC%8F%20ID%20%E7%9A%84%209%20%E7%A7%8D%E7%94%9F%E6%88%90%E6%96%B9%E5%BC%8F/#tinyid","text":"Tinyid\u7531\u6ef4\u6ef4\u5f00\u53d1\uff0cGithub\u5730\u5740\uff1a https://github.com/didi/tinyid \u3002 Tinyid\u662f\u57fa\u4e8e\u53f7\u6bb5\u6a21\u5f0f\u539f\u7406\u5b9e\u73b0\u7684\u4e0eLeaf\u5982\u51fa\u4e00\u8f99\uff0c\u6bcf\u4e2a\u670d\u52a1\u83b7\u53d6\u4e00\u4e2a\u53f7\u6bb5\uff081000,2000]\u3001\uff082000,3000]\u3001\uff083000,4000] Tinyid\u63d0\u4f9bhttp\u548ctinyid-client\u4e24\u79cd\u65b9\u5f0f\u63a5\u5165 Http\u65b9\u5f0f\u63a5\u5165 \uff081\uff09\u5bfc\u5165Tinyid\u6e90\u7801\uff1a git clone https://github.com/didi/tinyid.git \uff082\uff09\u521b\u5efa\u6570\u636e\u8868\uff1a CREATE TABLE `tiny_id_info` ( `id` bigint ( 20 ) unsigned NOT NULL AUTO_INCREMENT COMMENT '\u81ea\u589e\u4e3b\u952e' , `biz_type` varchar ( 63 ) NOT NULL DEFAULT '' COMMENT '\u4e1a\u52a1\u7c7b\u578b\uff0c\u552f\u4e00' , `begin_id` bigint ( 20 ) NOT NULL DEFAULT '0' COMMENT '\u5f00\u59cbid\uff0c\u4ec5\u8bb0\u5f55\u521d\u59cb\u503c\uff0c\u65e0\u5176\u4ed6\u542b\u4e49\u3002\u521d\u59cb\u5316\u65f6begin_id\u548cmax_id\u5e94\u76f8\u540c' , `max_id` bigint ( 20 ) NOT NULL DEFAULT '0' COMMENT '\u5f53\u524d\u6700\u5927id' , `step` int ( 11 ) DEFAULT '0' COMMENT '\u6b65\u957f' , `delta` int ( 11 ) NOT NULL DEFAULT '1' COMMENT '\u6bcf\u6b21id\u589e\u91cf' , `remainder` int ( 11 ) NOT NULL DEFAULT '0' COMMENT '\u4f59\u6570' , `create_time` timestamp NOT NULL DEFAULT '2010-01-01 00:00:00' COMMENT '\u521b\u5efa\u65f6\u95f4' , `update_time` timestamp NOT NULL DEFAULT '2010-01-01 00:00:00' COMMENT '\u66f4\u65b0\u65f6\u95f4' , `version` bigint ( 20 ) NOT NULL DEFAULT '0' COMMENT '\u7248\u672c\u53f7' , PRIMARY KEY ( `id` ), UNIQUE KEY `uniq_biz_type` ( `biz_type` ) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 COMMENT 'id\u4fe1\u606f\u8868' ; CREATE TABLE `tiny_id_token` ( `id` int ( 11 ) unsigned NOT NULL AUTO_INCREMENT COMMENT '\u81ea\u589eid' , `token` varchar ( 255 ) NOT NULL DEFAULT '' COMMENT 'token' , `biz_type` varchar ( 63 ) NOT NULL DEFAULT '' COMMENT '\u6b64token\u53ef\u8bbf\u95ee\u7684\u4e1a\u52a1\u7c7b\u578b\u6807\u8bc6' , `remark` varchar ( 255 ) NOT NULL DEFAULT '' COMMENT '\u5907\u6ce8' , `create_time` timestamp NOT NULL DEFAULT '2010-01-01 00:00:00' COMMENT '\u521b\u5efa\u65f6\u95f4' , `update_time` timestamp NOT NULL DEFAULT '2010-01-01 00:00:00' COMMENT '\u66f4\u65b0\u65f6\u95f4' , PRIMARY KEY ( `id` ) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 COMMENT 'token\u4fe1\u606f\u8868' ; INSERT INTO `tiny_id_info` ( `id` , `biz_type` , `begin_id` , `max_id` , `step` , `delta` , `remainder` , `create_time` , `update_time` , `version` ) VALUES ( 1 , 'test' , 1 , 1 , 100000 , 1 , 0 , '2018-07-21 23:52:58' , '2018-07-22 23:19:27' , 1 ); INSERT INTO `tiny_id_info` ( `id` , `biz_type` , `begin_id` , `max_id` , `step` , `delta` , `remainder` , `create_time` , `update_time` , `version` ) VALUES ( 2 , 'test_odd' , 1 , 1 , 100000 , 2 , 1 , '2018-07-21 23:52:58' , '2018-07-23 00:39:24' , 3 ); INSERT INTO `tiny_id_token` ( `id` , `token` , `biz_type` , `remark` , `create_time` , `update_time` ) VALUES ( 1 , '0f673adf80504e2eaa552f5d791b644c' , 'test' , '1' , '2017-12-14 16:36:46' , '2017-12-14 16:36:48' ); INSERT INTO `tiny_id_token` ( `id` , `token` , `biz_type` , `remark` , `create_time` , `update_time` ) VALUES ( 2 , '0f673adf80504e2eaa552f5d791b644c' , 'test_odd' , '1' , '2017-12-14 16:36:46' , '2017-12-14 16:36:48' ); \uff083\uff09\u914d\u7f6e\u6570\u636e\u5e93\uff1a datasource.tinyid.names=primary datasource.tinyid.primary.driver-class-name=com.mysql.jdbc.Driver datasource.tinyid.primary.url=jdbc:mysql://ip:port/databaseName?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8 datasource.tinyid.primary.username=root datasource.tinyid.primary.password=123456 \uff084\uff09\u542f\u52a8tinyid-server\u540e\u6d4b\u8bd5 \u83b7\u53d6\u5206\u5e03\u5f0f\u81ea\u589eID: http://localhost:9999/tinyid/id/nextIdSimple?bizType=test&token=0f673adf80504e2eaa552f5d791b644c' \u8fd4\u56de\u7ed3\u679c: 3 \u6279\u91cf\u83b7\u53d6\u5206\u5e03\u5f0f\u81ea\u589eID: http://localhost:9999/tinyid/id/nextIdSimple?bizType=test&token=0f673adf80504e2eaa552f5d791b644c&batchSize=10' \u8fd4\u56de\u7ed3\u679c: 4,5,6,7,8,9,10,11,12,13","title":"\u6ef4\u6ef4\uff08Tinyid\uff09"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/","text":"\u672c\u7bc7\u6587\u7ae0\u8bb2\u89e3\u4e86\u8ba1\u7b97\u673a\u7684\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801. \u5e76\u4e14\u8fdb\u884c\u4e86\u6df1\u5165\u63a2\u6c42\u4e86\u4e3a\u4f55\u8981\u4f7f\u7528\u53cd\u7801\u548c\u8865\u7801, \u4ee5\u53ca\u66f4\u8fdb\u4e00\u6b65\u7684\u8bba\u8bc1\u4e86\u4e3a\u4f55\u53ef\u4ee5\u7528\u53cd\u7801, \u8865\u7801\u7684\u52a0\u6cd5\u8ba1\u7b97\u539f\u7801\u7684\u51cf\u6cd5. \u8bba\u8bc1\u90e8\u5206\u5982\u6709\u4e0d\u5bf9\u7684\u5730\u65b9\u8bf7\u5404\u4f4d\u725b\u4eba\u5e2e\u5fd9\u6307\u6b63! \u5e0c\u671b\u672c\u6587\u5bf9\u5927\u5bb6\u5b66\u4e60\u8ba1\u7b97\u673a\u57fa\u7840\u6709\u6240\u5e2e\u52a9! \u673a\u5668\u6570\u548c\u771f\u503c \u00b6 \u5728\u5b66\u4e60\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u4e4b\u524d, \u9700\u8981\u5148\u4e86\u89e3\u673a\u5668\u6570\u548c\u771f\u503c\u7684\u6982\u5ff5. 1\u3001\u673a\u5668\u6570 \u4e00\u4e2a\u6570\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f, \u53eb\u505a\u8fd9\u4e2a\u6570\u7684\u673a\u5668\u6570\u3002\u673a\u5668\u6570\u662f\u5e26\u7b26\u53f7\u7684\uff0c\u5728\u8ba1\u7b97\u673a\u7528\u4e00\u4e2a\u6570\u7684\u6700\u9ad8\u4f4d\u5b58\u653e\u7b26\u53f7, \u6b63\u6570\u4e3a0, \u8d1f\u6570\u4e3a1. \u6bd4\u5982\uff0c\u5341\u8fdb\u5236\u4e2d\u7684\u6570 +3 \uff0c\u8ba1\u7b97\u673a\u5b57\u957f\u4e3a8\u4f4d\uff0c\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5c31\u662f00000011\u3002\u5982\u679c\u662f -3 \uff0c\u5c31\u662f 10000011 \u3002 \u90a3\u4e48\uff0c\u8fd9\u91cc\u7684 00000011 \u548c 10000011 \u5c31\u662f\u673a\u5668\u6570\u3002 2\u3001\u771f\u503c \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d\uff0c\u6240\u4ee5\u673a\u5668\u6570\u7684\u5f62\u5f0f\u503c\u5c31\u4e0d\u7b49\u4e8e\u771f\u6b63\u7684\u6570\u503c\u3002\u4f8b\u5982\u4e0a\u9762\u7684\u6709\u7b26\u53f7\u6570 10000011\uff0c\u5176\u6700\u9ad8\u4f4d1\u4ee3\u8868\u8d1f\uff0c\u5176\u771f\u6b63\u6570\u503c\u662f -3 \u800c\u4e0d\u662f\u5f62\u5f0f\u503c131\uff0810000011\u8f6c\u6362\u6210\u5341\u8fdb\u5236\u7b49\u4e8e131\uff09\u3002\u6240\u4ee5\uff0c\u4e3a\u533a\u522b\u8d77\u89c1\uff0c\u5c06\u5e26\u7b26\u53f7\u4f4d\u7684\u673a\u5668\u6570\u5bf9\u5e94\u7684\u771f\u6b63\u6570\u503c\u79f0\u4e3a\u673a\u5668\u6570\u7684\u771f\u503c\u3002 \u4f8b\uff1a0000 0001\u7684\u771f\u503c = +000 0001 = +1\uff0c1000 0001\u7684\u771f\u503c = \u2013000 0001 = \u20131 \u539f\u7801, \u53cd\u7801, \u8865\u7801\u7684\u57fa\u7840\u6982\u5ff5\u548c\u8ba1\u7b97\u65b9\u6cd5 \u00b6 \u5728\u63a2\u6c42\u4e3a\u4f55\u673a\u5668\u8981\u4f7f\u7528\u8865\u7801\u4e4b\u524d, \u8ba9\u6211\u4eec\u5148\u4e86\u89e3\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u7684\u6982\u5ff5.\u5bf9\u4e8e\u4e00\u4e2a\u6570, \u8ba1\u7b97\u673a\u8981\u4f7f\u7528\u4e00\u5b9a\u7684\u7f16\u7801\u65b9\u5f0f\u8fdb\u884c\u5b58\u50a8. \u539f\u7801, \u53cd\u7801, \u8865\u7801\u662f\u673a\u5668\u5b58\u50a8\u4e00\u4e2a\u5177\u4f53\u6570\u5b57\u7684\u7f16\u7801\u65b9\u5f0f. \u539f\u7801 \u00b6 \u539f\u7801\u5c31\u662f\u7b26\u53f7\u4f4d\u52a0\u4e0a\u771f\u503c\u7684\u7edd\u5bf9\u503c, \u5373\u7528\u7b2c\u4e00\u4f4d\u8868\u793a\u7b26\u53f7, \u5176\u4f59\u4f4d\u8868\u793a\u503c. \u6bd4\u5982\u5982\u679c\u662f8\u4f4d\u4e8c\u8fdb\u5236: [+1]\u539f = 0000 0001 [-1]\u539f = 1000 0001 \u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d. \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d, \u6240\u4ee58\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u53d6\u503c\u8303\u56f4\u5c31\u662f: [1111 1111 , 0111 1111] \u5373 [-127 , 127] \u539f\u7801\u662f\u4eba\u8111\u6700\u5bb9\u6613\u7406\u89e3\u548c\u8ba1\u7b97\u7684\u8868\u793a\u65b9\u5f0f. \u53cd\u7801 \u00b6 \u53cd\u7801\u7684\u8868\u793a\u65b9\u6cd5\u662f: \u6b63\u6570\u7684\u53cd\u7801\u662f\u5176\u672c\u8eab \u8d1f\u6570\u7684\u53cd\u7801\u662f\u5728\u5176\u539f\u7801\u7684\u57fa\u7840\u4e0a, \u7b26\u53f7\u4f4d\u4e0d\u53d8\uff0c\u5176\u4f59\u5404\u4e2a\u4f4d\u53d6\u53cd. [+1] = [00000001]\u539f = [00000001]\u53cd [-1] = [10000001]\u539f = [11111110]\u53cd \u53ef\u89c1\u5982\u679c\u4e00\u4e2a\u53cd\u7801\u8868\u793a\u7684\u662f\u8d1f\u6570, \u4eba\u8111\u65e0\u6cd5\u76f4\u89c2\u7684\u770b\u51fa\u6765\u5b83\u7684\u6570\u503c. \u901a\u5e38\u8981\u5c06\u5176\u8f6c\u6362\u6210\u539f\u7801\u518d\u8ba1\u7b97. \u8865\u7801 \u8865\u7801\u7684\u8868\u793a\u65b9\u6cd5\u662f: \u6b63\u6570\u7684\u8865\u7801\u5c31\u662f\u5176\u672c\u8eab \u8d1f\u6570\u7684\u8865\u7801\u662f\u5728\u5176\u539f\u7801\u7684\u57fa\u7840\u4e0a, \u7b26\u53f7\u4f4d\u4e0d\u53d8, \u5176\u4f59\u5404\u4f4d\u53d6\u53cd, \u6700\u540e+1. (\u5373\u5728\u53cd\u7801\u7684\u57fa\u7840\u4e0a+1) [+1] = [00000001]\u539f = [00000001]\u53cd = [00000001]\u8865 [-1] = [10000001]\u539f = [11111110]\u53cd = [11111111]\u8865 \u5bf9\u4e8e\u8d1f\u6570, \u8865\u7801\u8868\u793a\u65b9\u5f0f\u4e5f\u662f\u4eba\u8111\u65e0\u6cd5\u76f4\u89c2\u770b\u51fa\u5176\u6570\u503c\u7684. \u901a\u5e38\u4e5f\u9700\u8981\u8f6c\u6362\u6210\u539f\u7801\u5728\u8ba1\u7b97\u5176\u6570\u503c. \u4e3a\u4f55\u8981\u4f7f\u7528\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801 \u00b6 \u5728\u5f00\u59cb\u6df1\u5165\u5b66\u4e60\u524d, \u6211\u7684\u5b66\u4e60\u5efa\u8bae\u662f\u5148\"\u6b7b\u8bb0\u786c\u80cc\"\u4e0a\u9762\u7684\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u7684\u8868\u793a\u65b9\u5f0f\u4ee5\u53ca\u8ba1\u7b97\u65b9\u6cd5. \u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u8ba1\u7b97\u673a\u53ef\u4ee5\u6709\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u8868\u793a\u4e00\u4e2a\u6570. \u5bf9\u4e8e\u6b63\u6570\u56e0\u4e3a\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u7684\u7ed3\u679c\u90fd\u76f8\u540c: [+1] = [00000001]\u539f = [00000001]\u53cd = [00000001]\u8865 \u6240\u4ee5\u4e0d\u9700\u8981\u8fc7\u591a\u89e3\u91ca. \u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570: [-1] = [10000001]\u539f = [11111110]\u53cd = [11111111]\u8865 \u53ef\u89c1\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u662f\u5b8c\u5168\u4e0d\u540c\u7684. \u65e2\u7136\u539f\u7801\u624d\u662f\u88ab\u4eba\u8111\u76f4\u63a5\u8bc6\u522b\u5e76\u7528\u4e8e\u8ba1\u7b97\u8868\u793a\u65b9\u5f0f, \u4e3a\u4f55\u8fd8\u4f1a\u6709\u53cd\u7801\u548c\u8865\u7801\u5462? \u9996\u5148, \u56e0\u4e3a\u4eba\u8111\u53ef\u4ee5\u77e5\u9053\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d, \u5728\u8ba1\u7b97\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u6839\u636e\u7b26\u53f7\u4f4d, \u9009\u62e9\u5bf9\u771f\u503c\u533a\u57df\u7684\u52a0\u51cf. (\u771f\u503c\u7684\u6982\u5ff5\u5728\u672c\u6587\u6700\u5f00\u5934). \u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a, \u52a0\u51cf\u4e58\u6570\u5df2\u7ecf\u662f\u6700\u57fa\u7840\u7684\u8fd0\u7b97, \u8981\u8bbe\u8ba1\u7684\u5c3d\u91cf\u7b80\u5355. \u8ba1\u7b97\u673a\u8fa8\u522b\"\u7b26\u53f7\u4f4d\"\u663e\u7136\u4f1a\u8ba9\u8ba1\u7b97\u673a\u7684\u57fa\u7840\u7535\u8def\u8bbe\u8ba1\u53d8\u5f97\u5341\u5206\u590d\u6742! \u4e8e\u662f\u4eba\u4eec\u60f3\u51fa\u4e86\u5c06\u7b26\u53f7\u4f4d\u4e5f\u53c2\u4e0e\u8fd0\u7b97\u7684\u65b9\u6cd5. \u6211\u4eec\u77e5\u9053, \u6839\u636e\u8fd0\u7b97\u6cd5\u5219\u51cf\u53bb\u4e00\u4e2a\u6b63\u6570\u7b49\u4e8e\u52a0\u4e0a\u4e00\u4e2a\u8d1f\u6570, \u5373: 1-1 = 1 + (-1) = 0 , \u6240\u4ee5\u673a\u5668\u53ef\u4ee5\u53ea\u6709\u52a0\u6cd5\u800c\u6ca1\u6709\u51cf\u6cd5, \u8fd9\u6837\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u8bbe\u8ba1\u5c31\u66f4\u7b80\u5355\u4e86. \u4e8e\u662f\u4eba\u4eec\u5f00\u59cb\u63a2\u7d22 \u5c06\u7b26\u53f7\u4f4d\u53c2\u4e0e\u8fd0\u7b97, \u5e76\u4e14\u53ea\u4fdd\u7559\u52a0\u6cd5\u7684\u65b9\u6cd5. \u9996\u5148\u6765\u770b\u539f\u7801: \u8ba1\u7b97\u5341\u8fdb\u5236\u7684\u8868\u8fbe\u5f0f: 1-1=0 1 - 1 = 1 + (-1) = [00000001]\u539f + [10000001]\u539f = [10000010]\u539f = -2 \u5982\u679c\u7528\u539f\u7801\u8868\u793a, \u8ba9\u7b26\u53f7\u4f4d\u4e5f\u53c2\u4e0e\u8ba1\u7b97, \u663e\u7136\u5bf9\u4e8e\u51cf\u6cd5\u6765\u8bf4, \u7ed3\u679c\u662f\u4e0d\u6b63\u786e\u7684.\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4f55\u8ba1\u7b97\u673a\u5185\u90e8\u4e0d\u4f7f\u7528\u539f\u7801\u8868\u793a\u4e00\u4e2a\u6570. \u4e3a\u4e86\u89e3\u51b3\u539f\u7801\u505a\u51cf\u6cd5\u7684\u95ee\u9898, \u51fa\u73b0\u4e86\u53cd\u7801: \u8ba1\u7b97\u5341\u8fdb\u5236\u7684\u8868\u8fbe\u5f0f: 1-1=0 1 - 1 = 1 + (-1) = [0000 0001]\u539f + [1000 0001]\u539f= [0000 0001]\u53cd + [1111 1110]\u53cd = [1111 1111]\u53cd = [1000 0000]\u539f = -0 \u53d1\u73b0\u7528\u53cd\u7801\u8ba1\u7b97\u51cf\u6cd5, \u7ed3\u679c\u7684\u771f\u503c\u90e8\u5206\u662f\u6b63\u786e\u7684. \u800c\u552f\u4e00\u7684\u95ee\u9898\u5176\u5b9e\u5c31\u51fa\u73b0\u5728\"0\"\u8fd9\u4e2a\u7279\u6b8a\u7684\u6570\u503c\u4e0a. \u867d\u7136\u4eba\u4eec\u7406\u89e3\u4e0a+0\u548c-0\u662f\u4e00\u6837\u7684, \u4f46\u662f0\u5e26\u7b26\u53f7\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684. \u800c\u4e14\u4f1a\u6709[0000 0000]\u539f\u548c[1000 0000]\u539f\u4e24\u4e2a\u7f16\u7801\u8868\u793a0. \u4e8e\u662f\u8865\u7801\u7684\u51fa\u73b0, \u89e3\u51b3\u4e860\u7684\u7b26\u53f7\u4ee5\u53ca\u4e24\u4e2a\u7f16\u7801\u7684\u95ee\u9898: 1-1 = 1 + (-1) = [0000 0001]\u539f + [1000 0001]\u539f = [0000 0001]\u8865 + [1111 1111]\u8865 = [0000 0000]\u8865=[0000 0000]\u539f \u8fd9\u68370\u7528[0000 0000]\u8868\u793a, \u800c\u4ee5\u524d\u51fa\u73b0\u95ee\u9898\u7684-0\u5219\u4e0d\u5b58\u5728\u4e86.\u800c\u4e14\u53ef\u4ee5\u7528[1000 0000]\u8868\u793a-128: (-1) + (-127) = [1000 0001]\u539f + [1111 1111]\u539f = [1111 1111]\u8865 + [1000 0001]\u8865 = [1000 0000]\u8865 -1-127\u7684\u7ed3\u679c\u5e94\u8be5\u662f-128, \u5728\u7528\u8865\u7801\u8fd0\u7b97\u7684\u7ed3\u679c\u4e2d, [1000 0000]\u8865 \u5c31\u662f-128. \u4f46\u662f\u6ce8\u610f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u4ee5\u524d\u7684-0\u7684\u8865\u7801\u6765\u8868\u793a-128, \u6240\u4ee5-128\u5e76\u6ca1\u6709\u539f\u7801\u548c\u53cd\u7801\u8868\u793a.(\u5bf9-128\u7684\u8865\u7801\u8868\u793a[1000 0000]\u8865\u7b97\u51fa\u6765\u7684\u539f\u7801\u662f[0000 0000]\u539f, \u8fd9\u662f\u4e0d\u6b63\u786e\u7684) \u4f7f\u7528\u8865\u7801, \u4e0d\u4ec5\u4ec5\u4fee\u590d\u4e860\u7684\u7b26\u53f7\u4ee5\u53ca\u5b58\u5728\u4e24\u4e2a\u7f16\u7801\u7684\u95ee\u9898, \u800c\u4e14\u8fd8\u80fd\u591f\u591a\u8868\u793a\u4e00\u4e2a\u6700\u4f4e\u6570. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e488\u4f4d\u4e8c\u8fdb\u5236, \u4f7f\u7528\u539f\u7801\u6216\u53cd\u7801\u8868\u793a\u7684\u8303\u56f4\u4e3a[-127, +127], \u800c\u4f7f\u7528\u8865\u7801\u8868\u793a\u7684\u8303\u56f4\u4e3a[-128, 127]. \u56e0\u4e3a\u673a\u5668\u4f7f\u7528\u8865\u7801, \u6240\u4ee5\u5bf9\u4e8e\u7f16\u7a0b\u4e2d\u5e38\u7528\u5230\u768432\u4f4dint\u7c7b\u578b, \u53ef\u4ee5\u8868\u793a\u8303\u56f4\u662f: [-231, 231-1] \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u8868\u793a\u7684\u662f\u7b26\u53f7\u4f4d.\u800c\u4f7f\u7528\u8865\u7801\u8868\u793a\u65f6\u53c8\u53ef\u4ee5\u591a\u4fdd\u5b58\u4e00\u4e2a\u6700\u5c0f\u503c. \u539f\u7801, \u53cd\u7801, \u8865\u7801 \u518d\u6df1\u5165 \u00b6 \u8ba1\u7b97\u673a\u5de7\u5999\u5730\u628a\u7b26\u53f7\u4f4d\u53c2\u4e0e\u8fd0\u7b97, \u5e76\u4e14\u5c06\u51cf\u6cd5\u53d8\u6210\u4e86\u52a0\u6cd5, \u80cc\u540e\u8574\u542b\u4e86\u600e\u6837\u7684\u6570\u5b66\u539f\u7406\u5462? \u5c06\u949f\u8868\u60f3\u8c61\u6210\u662f\u4e00\u4e2a1\u4f4d\u768412\u8fdb\u5236\u6570. \u5982\u679c\u5f53\u524d\u65f6\u95f4\u662f6\u70b9, \u6211\u5e0c\u671b\u5c06\u65f6\u95f4\u8bbe\u7f6e\u62104\u70b9, \u9700\u8981\u600e\u4e48\u505a\u5462?\u6211\u4eec\u53ef\u4ee5: 1. \u5f80\u56de\u62e82\u4e2a\u5c0f\u65f6: 6 - 2 = 4 2. \u5f80\u524d\u62e810\u4e2a\u5c0f\u65f6: (6 + 10) mod 12 = 4 3. \u5f80\u524d\u62e810+12=22\u4e2a\u5c0f\u65f6: (6+22) mod 12 =4 2,3\u65b9\u6cd5\u4e2d\u7684mod\u662f\u6307\u53d6\u6a21\u64cd\u4f5c, 16 mod 12 =4 \u5373\u752816\u9664\u4ee512\u540e\u7684\u4f59\u6570\u662f4. \u6240\u4ee5\u949f\u8868\u5f80\u56de\u62e8(\u51cf\u6cd5)\u7684\u7ed3\u679c\u53ef\u4ee5\u7528\u5f80\u524d\u62e8(\u52a0\u6cd5)\u66ff\u4ee3! \u73b0\u5728\u7684\u7126\u70b9\u5c31\u843d\u5728\u4e86\u5982\u4f55\u7528\u4e00\u4e2a\u6b63\u6570, \u6765\u66ff\u4ee3\u4e00\u4e2a\u8d1f\u6570. \u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u80fd\u611f\u89c9\u51fa\u6765\u4e00\u4e9b\u7aef\u502a, \u53d1\u73b0\u4e00\u4e9b\u89c4\u5f8b. \u4f46\u662f\u6570\u5b66\u662f\u4e25\u8c28\u7684. \u4e0d\u80fd\u9760\u611f\u89c9. \u9996\u5148\u4ecb\u7ecd\u4e00\u4e2a\u6570\u5b66\u4e2d\u76f8\u5173\u7684\u6982\u5ff5: \u540c\u4f59 \u540c\u4f59\u7684\u6982\u5ff5 \u00b6 \u4e24\u4e2a\u6574\u6570a\uff0cb\uff0c\u82e5\u5b83\u4eec\u9664\u4ee5\u6574\u6570m\u6240\u5f97\u7684\u4f59\u6570\u76f8\u7b49\uff0c\u5219\u79f0a\uff0cb\u5bf9\u4e8e\u6a21m\u540c\u4f59 \u8bb0\u4f5c a \u2261 b (mod m) \u8bfb\u4f5c a \u4e0e b \u5173\u4e8e\u6a21 m \u540c\u4f59\u3002 \u4e3e\u4f8b\u8bf4\u660e: 4 mod 12 = 4 16 mod 12 = 4 28 mod 12 = 4 \u6240\u4ee54, 16, 28\u5173\u4e8e\u6a21 12 \u540c\u4f59. \u8d1f\u6570\u53d6\u6a21 \u00b6 \u6b63\u6570\u8fdb\u884cmod\u8fd0\u7b97\u662f\u5f88\u7b80\u5355\u7684. \u4f46\u662f\u8d1f\u6570\u5462? \u4e0b\u9762\u662f\u5173\u4e8emod\u8fd0\u7b97\u7684\u6570\u5b66\u5b9a\u4e49: \u4e0a\u9762\u662f\u622a\u56fe, \"\u53d6\u4e0b\u754c\"\u7b26\u53f7\u627e\u4e0d\u5230\u5982\u4f55\u8f93\u5165(word\u4e2d\u7c98\u8d34\u8fc7\u6765\u540e\u4e71\u7801). \u4e0b\u9762\u662f\u4f7f\u7528\"L\"\u548c\"J\"\u66ff\u6362\u4e0a\u56fe\u7684\"\u53d6\u4e0b\u754c\"\u7b26\u53f7: x mod y = x - y L x / y J \u4e0a\u9762\u516c\u5f0f\u7684\u610f\u601d\u662f: x mod y\u7b49\u4e8e x \u51cf\u53bb y \u4e58\u4e0a x\u4e0ey\u7684\u5546\u7684\u4e0b\u754c. \u4ee5 -3 mod 2 \u4e3e\u4f8b: -3 mod 2 = -3 - 2xL -3/2 J = -3 - 2xL-1.5J = -3 - 2x(-2) = -3 + 4 = 1 \u6240\u4ee5: (-2) mod 12 = 12-2=10 (-4) mod 12 = 12-4 = 8 (-5) mod 12 = 12 - 5 = 7 \u8bc1\u660e\u8fc7\u7a0b \u00b6 \u518d\u56de\u5230\u65f6\u949f\u7684\u95ee\u9898\u4e0a: \u56de\u62e82\u5c0f\u65f6 = \u524d\u62e810\u5c0f\u65f6 \u56de\u62e84\u5c0f\u65f6 = \u524d\u62e88\u5c0f\u65f6 \u56de\u62e85\u5c0f\u65f6= \u524d\u62e87\u5c0f\u65f6 \u6ce8\u610f, \u8fd9\u91cc\u53d1\u73b0\u7684\u89c4\u5f8b! \u7ed3\u5408\u4e0a\u9762\u5b66\u5230\u7684\u540c\u4f59\u7684\u6982\u5ff5.\u5b9e\u9645\u4e0a: (-2) mod 12 = 10 10 mod 12 = 10 -2\u4e0e10\u662f\u540c\u4f59\u7684. (-4) mod 12 = 8 8 mod 12 = 8 -4\u4e0e8\u662f\u540c\u4f59\u7684. \u8ddd\u79bb\u6210\u529f\u8d8a\u6765\u8d8a\u8fd1\u4e86. \u8981\u5b9e\u73b0\u7528\u6b63\u6570\u66ff\u4ee3\u8d1f\u6570, \u53ea\u9700\u8981\u8fd0\u7528\u540c\u4f59\u6570\u7684\u4e24\u4e2a\u5b9a\u7406: \u53cd\u8eab\u6027: a \u2261 a (mod m) \u8fd9\u4e2a\u5b9a\u7406\u662f\u5f88\u663e\u800c\u6613\u89c1\u7684. \u7ebf\u6027\u8fd0\u7b97\u5b9a\u7406: \u5982\u679ca \u2261 b (mod m)\uff0cc \u2261 d (mod m) \u90a3\u4e48: (1)a \u00b1 c \u2261 b \u00b1 d (mod m) (2)a * c \u2261 b * d (mod m) \u5982\u679c\u60f3\u770b\u8fd9\u4e2a\u5b9a\u7406\u7684\u8bc1\u660e, \u8bf7\u770b: http://baike.baidu.com/view/79282.htm \u6240\u4ee5: 7 \u2261 7 (mod 12) (-2) \u2261 10 (mod 12) 7 -2 \u2261 7 + 10 (mod 12) \u73b0\u5728\u6211\u4eec\u4e3a\u4e00\u4e2a\u8d1f\u6570, \u627e\u5230\u4e86\u5b83\u7684\u6b63\u6570\u540c\u4f59\u6570. \u4f46\u662f\u5e76\u4e0d\u662f7-2 = 7+10, \u800c\u662f 7 -2 \u2261 7 + 10 (mod 12) , \u5373\u8ba1\u7b97\u7ed3\u679c\u7684\u4f59\u6570\u76f8\u7b49. \u63a5\u4e0b\u6765\u56de\u5230\u4e8c\u8fdb\u5236\u7684\u95ee\u9898\u4e0a, \u770b\u4e00\u4e0b: 2-1=1\u7684\u95ee\u9898. 2-1=2+(-1) = [0000 0010]\u539f + [1000 0001]\u539f= [0000 0010]\u53cd + [1111 1110]\u53cd \u5148\u5230\u8fd9\u4e00\u6b65, -1\u7684\u53cd\u7801\u8868\u793a\u662f1111 1110. \u5982\u679c\u8fd9\u91cc\u5c06[1111 1110]\u8ba4\u4e3a\u662f\u539f\u7801, \u5219[1111 1110]\u539f = -126, \u8fd9\u91cc\u5c06\u7b26\u53f7\u4f4d\u9664\u53bb, \u5373\u8ba4\u4e3a\u662f126. \u53d1\u73b0\u6709\u5982\u4e0b\u89c4\u5f8b: (-1) mod 127 = 126 126 mod 127 = 126 \u5373: (-1) \u2261 126 (mod 127) 2-1 \u2261 2+126 (mod 127) 2-1 \u4e0e 2+126\u7684\u4f59\u6570\u7ed3\u679c\u662f\u76f8\u540c\u7684! \u800c\u8fd9\u4e2a\u4f59\u6570, \u6b63\u5f0f\u6211\u4eec\u7684\u671f\u671b\u7684\u8ba1\u7b97\u7ed3\u679c: 2-1=1 \u6240\u4ee5\u8bf4\u4e00\u4e2a\u6570\u7684\u53cd\u7801, \u5b9e\u9645\u4e0a\u662f\u8fd9\u4e2a\u6570\u5bf9\u4e8e\u4e00\u4e2a\u819c\u7684\u540c\u4f59\u6570. \u800c\u8fd9\u4e2a\u819c\u5e76\u4e0d\u662f\u6211\u4eec\u7684\u4e8c\u8fdb\u5236, \u800c\u662f\u6240\u80fd\u8868\u793a\u7684\u6700\u5927\u503c! \u8fd9\u5c31\u548c\u949f\u8868\u4e00\u6837, \u8f6c\u4e86\u4e00\u5708\u540e\u603b\u80fd\u627e\u5230\u5728\u53ef\u8868\u793a\u8303\u56f4\u5185\u7684\u4e00\u4e2a\u6b63\u786e\u7684\u6570\u503c! \u800c2+126\u5f88\u663e\u7136\u76f8\u5f53\u4e8e\u949f\u8868\u8f6c\u8fc7\u4e86\u4e00\u8f6e, \u800c\u56e0\u4e3a\u7b26\u53f7\u4f4d\u662f\u53c2\u4e0e\u8ba1\u7b97\u7684, \u6b63\u597d\u548c\u6ea2\u51fa\u7684\u6700\u9ad8\u4f4d\u5f62\u6210\u6b63\u786e\u7684\u8fd0\u7b97\u7ed3\u679c. \u65e2\u7136\u53cd\u7801\u53ef\u4ee5\u5c06\u51cf\u6cd5\u53d8\u6210\u52a0\u6cd5, \u90a3\u4e48\u73b0\u5728\u8ba1\u7b97\u673a\u4f7f\u7528\u7684\u8865\u7801\u5462? \u4e3a\u4ec0\u4e48\u5728\u53cd\u7801\u7684\u57fa\u7840\u4e0a\u52a01, \u8fd8\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c? 2-1=2+(-1) = [0000 0010]\u539f + [1000 0001]\u539f = [0000 0010]\u8865 + [1111 1111]\u8865 \u5982\u679c\u628a[1111 1111]\u5f53\u6210\u539f\u7801, \u53bb\u9664\u7b26\u53f7\u4f4d, \u5219: [0111 1111]\u539f = 127 \u5176\u5b9e, \u5728\u53cd\u7801\u7684\u57fa\u7840\u4e0a+1, \u53ea\u662f\u76f8\u5f53\u4e8e\u589e\u52a0\u4e86\u819c\u7684\u503c: (-1) mod 128 = 127 127 mod 128 = 127 2-1 \u2261 2+127 (mod 128) \u6b64\u65f6, \u8868\u76d8\u76f8\u5f53\u4e8e\u6bcf128\u4e2a\u523b\u5ea6\u8f6c\u4e00\u8f6e. \u6240\u4ee5\u7528\u8865\u7801\u8868\u793a\u7684\u8fd0\u7b97\u7ed3\u679c\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u5e94\u8be5\u662f[-128, 128]. \u4f46\u662f\u7531\u4e8e0\u7684\u7279\u6b8a\u60c5\u51b5, \u6ca1\u6709\u529e\u6cd5\u8868\u793a128, \u6240\u4ee5\u8865\u7801\u7684\u53d6\u503c\u8303\u56f4\u662f[-128, 127] \u8f6c\u8f7d\u81ea: https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html","title":"\u539f\u7801, \u53cd\u7801, \u8865\u7801 \u8be6\u89e3"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_1","text":"\u5728\u5b66\u4e60\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u4e4b\u524d, \u9700\u8981\u5148\u4e86\u89e3\u673a\u5668\u6570\u548c\u771f\u503c\u7684\u6982\u5ff5. 1\u3001\u673a\u5668\u6570 \u4e00\u4e2a\u6570\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f, \u53eb\u505a\u8fd9\u4e2a\u6570\u7684\u673a\u5668\u6570\u3002\u673a\u5668\u6570\u662f\u5e26\u7b26\u53f7\u7684\uff0c\u5728\u8ba1\u7b97\u673a\u7528\u4e00\u4e2a\u6570\u7684\u6700\u9ad8\u4f4d\u5b58\u653e\u7b26\u53f7, \u6b63\u6570\u4e3a0, \u8d1f\u6570\u4e3a1. \u6bd4\u5982\uff0c\u5341\u8fdb\u5236\u4e2d\u7684\u6570 +3 \uff0c\u8ba1\u7b97\u673a\u5b57\u957f\u4e3a8\u4f4d\uff0c\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5c31\u662f00000011\u3002\u5982\u679c\u662f -3 \uff0c\u5c31\u662f 10000011 \u3002 \u90a3\u4e48\uff0c\u8fd9\u91cc\u7684 00000011 \u548c 10000011 \u5c31\u662f\u673a\u5668\u6570\u3002 2\u3001\u771f\u503c \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d\uff0c\u6240\u4ee5\u673a\u5668\u6570\u7684\u5f62\u5f0f\u503c\u5c31\u4e0d\u7b49\u4e8e\u771f\u6b63\u7684\u6570\u503c\u3002\u4f8b\u5982\u4e0a\u9762\u7684\u6709\u7b26\u53f7\u6570 10000011\uff0c\u5176\u6700\u9ad8\u4f4d1\u4ee3\u8868\u8d1f\uff0c\u5176\u771f\u6b63\u6570\u503c\u662f -3 \u800c\u4e0d\u662f\u5f62\u5f0f\u503c131\uff0810000011\u8f6c\u6362\u6210\u5341\u8fdb\u5236\u7b49\u4e8e131\uff09\u3002\u6240\u4ee5\uff0c\u4e3a\u533a\u522b\u8d77\u89c1\uff0c\u5c06\u5e26\u7b26\u53f7\u4f4d\u7684\u673a\u5668\u6570\u5bf9\u5e94\u7684\u771f\u6b63\u6570\u503c\u79f0\u4e3a\u673a\u5668\u6570\u7684\u771f\u503c\u3002 \u4f8b\uff1a0000 0001\u7684\u771f\u503c = +000 0001 = +1\uff0c1000 0001\u7684\u771f\u503c = \u2013000 0001 = \u20131","title":"\u673a\u5668\u6570\u548c\u771f\u503c"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_2","text":"\u5728\u63a2\u6c42\u4e3a\u4f55\u673a\u5668\u8981\u4f7f\u7528\u8865\u7801\u4e4b\u524d, \u8ba9\u6211\u4eec\u5148\u4e86\u89e3\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u7684\u6982\u5ff5.\u5bf9\u4e8e\u4e00\u4e2a\u6570, \u8ba1\u7b97\u673a\u8981\u4f7f\u7528\u4e00\u5b9a\u7684\u7f16\u7801\u65b9\u5f0f\u8fdb\u884c\u5b58\u50a8. \u539f\u7801, \u53cd\u7801, \u8865\u7801\u662f\u673a\u5668\u5b58\u50a8\u4e00\u4e2a\u5177\u4f53\u6570\u5b57\u7684\u7f16\u7801\u65b9\u5f0f.","title":"\u539f\u7801, \u53cd\u7801, \u8865\u7801\u7684\u57fa\u7840\u6982\u5ff5\u548c\u8ba1\u7b97\u65b9\u6cd5"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_3","text":"\u539f\u7801\u5c31\u662f\u7b26\u53f7\u4f4d\u52a0\u4e0a\u771f\u503c\u7684\u7edd\u5bf9\u503c, \u5373\u7528\u7b2c\u4e00\u4f4d\u8868\u793a\u7b26\u53f7, \u5176\u4f59\u4f4d\u8868\u793a\u503c. \u6bd4\u5982\u5982\u679c\u662f8\u4f4d\u4e8c\u8fdb\u5236: [+1]\u539f = 0000 0001 [-1]\u539f = 1000 0001 \u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d. \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d, \u6240\u4ee58\u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u53d6\u503c\u8303\u56f4\u5c31\u662f: [1111 1111 , 0111 1111] \u5373 [-127 , 127] \u539f\u7801\u662f\u4eba\u8111\u6700\u5bb9\u6613\u7406\u89e3\u548c\u8ba1\u7b97\u7684\u8868\u793a\u65b9\u5f0f.","title":"\u539f\u7801"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_4","text":"\u53cd\u7801\u7684\u8868\u793a\u65b9\u6cd5\u662f: \u6b63\u6570\u7684\u53cd\u7801\u662f\u5176\u672c\u8eab \u8d1f\u6570\u7684\u53cd\u7801\u662f\u5728\u5176\u539f\u7801\u7684\u57fa\u7840\u4e0a, \u7b26\u53f7\u4f4d\u4e0d\u53d8\uff0c\u5176\u4f59\u5404\u4e2a\u4f4d\u53d6\u53cd. [+1] = [00000001]\u539f = [00000001]\u53cd [-1] = [10000001]\u539f = [11111110]\u53cd \u53ef\u89c1\u5982\u679c\u4e00\u4e2a\u53cd\u7801\u8868\u793a\u7684\u662f\u8d1f\u6570, \u4eba\u8111\u65e0\u6cd5\u76f4\u89c2\u7684\u770b\u51fa\u6765\u5b83\u7684\u6570\u503c. \u901a\u5e38\u8981\u5c06\u5176\u8f6c\u6362\u6210\u539f\u7801\u518d\u8ba1\u7b97. \u8865\u7801 \u8865\u7801\u7684\u8868\u793a\u65b9\u6cd5\u662f: \u6b63\u6570\u7684\u8865\u7801\u5c31\u662f\u5176\u672c\u8eab \u8d1f\u6570\u7684\u8865\u7801\u662f\u5728\u5176\u539f\u7801\u7684\u57fa\u7840\u4e0a, \u7b26\u53f7\u4f4d\u4e0d\u53d8, \u5176\u4f59\u5404\u4f4d\u53d6\u53cd, \u6700\u540e+1. (\u5373\u5728\u53cd\u7801\u7684\u57fa\u7840\u4e0a+1) [+1] = [00000001]\u539f = [00000001]\u53cd = [00000001]\u8865 [-1] = [10000001]\u539f = [11111110]\u53cd = [11111111]\u8865 \u5bf9\u4e8e\u8d1f\u6570, \u8865\u7801\u8868\u793a\u65b9\u5f0f\u4e5f\u662f\u4eba\u8111\u65e0\u6cd5\u76f4\u89c2\u770b\u51fa\u5176\u6570\u503c\u7684. \u901a\u5e38\u4e5f\u9700\u8981\u8f6c\u6362\u6210\u539f\u7801\u5728\u8ba1\u7b97\u5176\u6570\u503c.","title":"\u53cd\u7801"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_5","text":"\u5728\u5f00\u59cb\u6df1\u5165\u5b66\u4e60\u524d, \u6211\u7684\u5b66\u4e60\u5efa\u8bae\u662f\u5148\"\u6b7b\u8bb0\u786c\u80cc\"\u4e0a\u9762\u7684\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u7684\u8868\u793a\u65b9\u5f0f\u4ee5\u53ca\u8ba1\u7b97\u65b9\u6cd5. \u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u8ba1\u7b97\u673a\u53ef\u4ee5\u6709\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u8868\u793a\u4e00\u4e2a\u6570. \u5bf9\u4e8e\u6b63\u6570\u56e0\u4e3a\u4e09\u79cd\u7f16\u7801\u65b9\u5f0f\u7684\u7ed3\u679c\u90fd\u76f8\u540c: [+1] = [00000001]\u539f = [00000001]\u53cd = [00000001]\u8865 \u6240\u4ee5\u4e0d\u9700\u8981\u8fc7\u591a\u89e3\u91ca. \u4f46\u662f\u5bf9\u4e8e\u8d1f\u6570: [-1] = [10000001]\u539f = [11111110]\u53cd = [11111111]\u8865 \u53ef\u89c1\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801\u662f\u5b8c\u5168\u4e0d\u540c\u7684. \u65e2\u7136\u539f\u7801\u624d\u662f\u88ab\u4eba\u8111\u76f4\u63a5\u8bc6\u522b\u5e76\u7528\u4e8e\u8ba1\u7b97\u8868\u793a\u65b9\u5f0f, \u4e3a\u4f55\u8fd8\u4f1a\u6709\u53cd\u7801\u548c\u8865\u7801\u5462? \u9996\u5148, \u56e0\u4e3a\u4eba\u8111\u53ef\u4ee5\u77e5\u9053\u7b2c\u4e00\u4f4d\u662f\u7b26\u53f7\u4f4d, \u5728\u8ba1\u7b97\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u6839\u636e\u7b26\u53f7\u4f4d, \u9009\u62e9\u5bf9\u771f\u503c\u533a\u57df\u7684\u52a0\u51cf. (\u771f\u503c\u7684\u6982\u5ff5\u5728\u672c\u6587\u6700\u5f00\u5934). \u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a, \u52a0\u51cf\u4e58\u6570\u5df2\u7ecf\u662f\u6700\u57fa\u7840\u7684\u8fd0\u7b97, \u8981\u8bbe\u8ba1\u7684\u5c3d\u91cf\u7b80\u5355. \u8ba1\u7b97\u673a\u8fa8\u522b\"\u7b26\u53f7\u4f4d\"\u663e\u7136\u4f1a\u8ba9\u8ba1\u7b97\u673a\u7684\u57fa\u7840\u7535\u8def\u8bbe\u8ba1\u53d8\u5f97\u5341\u5206\u590d\u6742! \u4e8e\u662f\u4eba\u4eec\u60f3\u51fa\u4e86\u5c06\u7b26\u53f7\u4f4d\u4e5f\u53c2\u4e0e\u8fd0\u7b97\u7684\u65b9\u6cd5. \u6211\u4eec\u77e5\u9053, \u6839\u636e\u8fd0\u7b97\u6cd5\u5219\u51cf\u53bb\u4e00\u4e2a\u6b63\u6570\u7b49\u4e8e\u52a0\u4e0a\u4e00\u4e2a\u8d1f\u6570, \u5373: 1-1 = 1 + (-1) = 0 , \u6240\u4ee5\u673a\u5668\u53ef\u4ee5\u53ea\u6709\u52a0\u6cd5\u800c\u6ca1\u6709\u51cf\u6cd5, \u8fd9\u6837\u8ba1\u7b97\u673a\u8fd0\u7b97\u7684\u8bbe\u8ba1\u5c31\u66f4\u7b80\u5355\u4e86. \u4e8e\u662f\u4eba\u4eec\u5f00\u59cb\u63a2\u7d22 \u5c06\u7b26\u53f7\u4f4d\u53c2\u4e0e\u8fd0\u7b97, \u5e76\u4e14\u53ea\u4fdd\u7559\u52a0\u6cd5\u7684\u65b9\u6cd5. \u9996\u5148\u6765\u770b\u539f\u7801: \u8ba1\u7b97\u5341\u8fdb\u5236\u7684\u8868\u8fbe\u5f0f: 1-1=0 1 - 1 = 1 + (-1) = [00000001]\u539f + [10000001]\u539f = [10000010]\u539f = -2 \u5982\u679c\u7528\u539f\u7801\u8868\u793a, \u8ba9\u7b26\u53f7\u4f4d\u4e5f\u53c2\u4e0e\u8ba1\u7b97, \u663e\u7136\u5bf9\u4e8e\u51cf\u6cd5\u6765\u8bf4, \u7ed3\u679c\u662f\u4e0d\u6b63\u786e\u7684.\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4f55\u8ba1\u7b97\u673a\u5185\u90e8\u4e0d\u4f7f\u7528\u539f\u7801\u8868\u793a\u4e00\u4e2a\u6570. \u4e3a\u4e86\u89e3\u51b3\u539f\u7801\u505a\u51cf\u6cd5\u7684\u95ee\u9898, \u51fa\u73b0\u4e86\u53cd\u7801: \u8ba1\u7b97\u5341\u8fdb\u5236\u7684\u8868\u8fbe\u5f0f: 1-1=0 1 - 1 = 1 + (-1) = [0000 0001]\u539f + [1000 0001]\u539f= [0000 0001]\u53cd + [1111 1110]\u53cd = [1111 1111]\u53cd = [1000 0000]\u539f = -0 \u53d1\u73b0\u7528\u53cd\u7801\u8ba1\u7b97\u51cf\u6cd5, \u7ed3\u679c\u7684\u771f\u503c\u90e8\u5206\u662f\u6b63\u786e\u7684. \u800c\u552f\u4e00\u7684\u95ee\u9898\u5176\u5b9e\u5c31\u51fa\u73b0\u5728\"0\"\u8fd9\u4e2a\u7279\u6b8a\u7684\u6570\u503c\u4e0a. \u867d\u7136\u4eba\u4eec\u7406\u89e3\u4e0a+0\u548c-0\u662f\u4e00\u6837\u7684, \u4f46\u662f0\u5e26\u7b26\u53f7\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684. \u800c\u4e14\u4f1a\u6709[0000 0000]\u539f\u548c[1000 0000]\u539f\u4e24\u4e2a\u7f16\u7801\u8868\u793a0. \u4e8e\u662f\u8865\u7801\u7684\u51fa\u73b0, \u89e3\u51b3\u4e860\u7684\u7b26\u53f7\u4ee5\u53ca\u4e24\u4e2a\u7f16\u7801\u7684\u95ee\u9898: 1-1 = 1 + (-1) = [0000 0001]\u539f + [1000 0001]\u539f = [0000 0001]\u8865 + [1111 1111]\u8865 = [0000 0000]\u8865=[0000 0000]\u539f \u8fd9\u68370\u7528[0000 0000]\u8868\u793a, \u800c\u4ee5\u524d\u51fa\u73b0\u95ee\u9898\u7684-0\u5219\u4e0d\u5b58\u5728\u4e86.\u800c\u4e14\u53ef\u4ee5\u7528[1000 0000]\u8868\u793a-128: (-1) + (-127) = [1000 0001]\u539f + [1111 1111]\u539f = [1111 1111]\u8865 + [1000 0001]\u8865 = [1000 0000]\u8865 -1-127\u7684\u7ed3\u679c\u5e94\u8be5\u662f-128, \u5728\u7528\u8865\u7801\u8fd0\u7b97\u7684\u7ed3\u679c\u4e2d, [1000 0000]\u8865 \u5c31\u662f-128. \u4f46\u662f\u6ce8\u610f\u56e0\u4e3a\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u4ee5\u524d\u7684-0\u7684\u8865\u7801\u6765\u8868\u793a-128, \u6240\u4ee5-128\u5e76\u6ca1\u6709\u539f\u7801\u548c\u53cd\u7801\u8868\u793a.(\u5bf9-128\u7684\u8865\u7801\u8868\u793a[1000 0000]\u8865\u7b97\u51fa\u6765\u7684\u539f\u7801\u662f[0000 0000]\u539f, \u8fd9\u662f\u4e0d\u6b63\u786e\u7684) \u4f7f\u7528\u8865\u7801, \u4e0d\u4ec5\u4ec5\u4fee\u590d\u4e860\u7684\u7b26\u53f7\u4ee5\u53ca\u5b58\u5728\u4e24\u4e2a\u7f16\u7801\u7684\u95ee\u9898, \u800c\u4e14\u8fd8\u80fd\u591f\u591a\u8868\u793a\u4e00\u4e2a\u6700\u4f4e\u6570. \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e488\u4f4d\u4e8c\u8fdb\u5236, \u4f7f\u7528\u539f\u7801\u6216\u53cd\u7801\u8868\u793a\u7684\u8303\u56f4\u4e3a[-127, +127], \u800c\u4f7f\u7528\u8865\u7801\u8868\u793a\u7684\u8303\u56f4\u4e3a[-128, 127]. \u56e0\u4e3a\u673a\u5668\u4f7f\u7528\u8865\u7801, \u6240\u4ee5\u5bf9\u4e8e\u7f16\u7a0b\u4e2d\u5e38\u7528\u5230\u768432\u4f4dint\u7c7b\u578b, \u53ef\u4ee5\u8868\u793a\u8303\u56f4\u662f: [-231, 231-1] \u56e0\u4e3a\u7b2c\u4e00\u4f4d\u8868\u793a\u7684\u662f\u7b26\u53f7\u4f4d.\u800c\u4f7f\u7528\u8865\u7801\u8868\u793a\u65f6\u53c8\u53ef\u4ee5\u591a\u4fdd\u5b58\u4e00\u4e2a\u6700\u5c0f\u503c.","title":"\u4e3a\u4f55\u8981\u4f7f\u7528\u539f\u7801, \u53cd\u7801\u548c\u8865\u7801"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_6","text":"\u8ba1\u7b97\u673a\u5de7\u5999\u5730\u628a\u7b26\u53f7\u4f4d\u53c2\u4e0e\u8fd0\u7b97, \u5e76\u4e14\u5c06\u51cf\u6cd5\u53d8\u6210\u4e86\u52a0\u6cd5, \u80cc\u540e\u8574\u542b\u4e86\u600e\u6837\u7684\u6570\u5b66\u539f\u7406\u5462? \u5c06\u949f\u8868\u60f3\u8c61\u6210\u662f\u4e00\u4e2a1\u4f4d\u768412\u8fdb\u5236\u6570. \u5982\u679c\u5f53\u524d\u65f6\u95f4\u662f6\u70b9, \u6211\u5e0c\u671b\u5c06\u65f6\u95f4\u8bbe\u7f6e\u62104\u70b9, \u9700\u8981\u600e\u4e48\u505a\u5462?\u6211\u4eec\u53ef\u4ee5: 1. \u5f80\u56de\u62e82\u4e2a\u5c0f\u65f6: 6 - 2 = 4 2. \u5f80\u524d\u62e810\u4e2a\u5c0f\u65f6: (6 + 10) mod 12 = 4 3. \u5f80\u524d\u62e810+12=22\u4e2a\u5c0f\u65f6: (6+22) mod 12 =4 2,3\u65b9\u6cd5\u4e2d\u7684mod\u662f\u6307\u53d6\u6a21\u64cd\u4f5c, 16 mod 12 =4 \u5373\u752816\u9664\u4ee512\u540e\u7684\u4f59\u6570\u662f4. \u6240\u4ee5\u949f\u8868\u5f80\u56de\u62e8(\u51cf\u6cd5)\u7684\u7ed3\u679c\u53ef\u4ee5\u7528\u5f80\u524d\u62e8(\u52a0\u6cd5)\u66ff\u4ee3! \u73b0\u5728\u7684\u7126\u70b9\u5c31\u843d\u5728\u4e86\u5982\u4f55\u7528\u4e00\u4e2a\u6b63\u6570, \u6765\u66ff\u4ee3\u4e00\u4e2a\u8d1f\u6570. \u4e0a\u9762\u7684\u4f8b\u5b50\u6211\u4eec\u80fd\u611f\u89c9\u51fa\u6765\u4e00\u4e9b\u7aef\u502a, \u53d1\u73b0\u4e00\u4e9b\u89c4\u5f8b. \u4f46\u662f\u6570\u5b66\u662f\u4e25\u8c28\u7684. \u4e0d\u80fd\u9760\u611f\u89c9. \u9996\u5148\u4ecb\u7ecd\u4e00\u4e2a\u6570\u5b66\u4e2d\u76f8\u5173\u7684\u6982\u5ff5: \u540c\u4f59","title":"\u539f\u7801, \u53cd\u7801, \u8865\u7801 \u518d\u6df1\u5165"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_7","text":"\u4e24\u4e2a\u6574\u6570a\uff0cb\uff0c\u82e5\u5b83\u4eec\u9664\u4ee5\u6574\u6570m\u6240\u5f97\u7684\u4f59\u6570\u76f8\u7b49\uff0c\u5219\u79f0a\uff0cb\u5bf9\u4e8e\u6a21m\u540c\u4f59 \u8bb0\u4f5c a \u2261 b (mod m) \u8bfb\u4f5c a \u4e0e b \u5173\u4e8e\u6a21 m \u540c\u4f59\u3002 \u4e3e\u4f8b\u8bf4\u660e: 4 mod 12 = 4 16 mod 12 = 4 28 mod 12 = 4 \u6240\u4ee54, 16, 28\u5173\u4e8e\u6a21 12 \u540c\u4f59.","title":"\u540c\u4f59\u7684\u6982\u5ff5"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_8","text":"\u6b63\u6570\u8fdb\u884cmod\u8fd0\u7b97\u662f\u5f88\u7b80\u5355\u7684. \u4f46\u662f\u8d1f\u6570\u5462? \u4e0b\u9762\u662f\u5173\u4e8emod\u8fd0\u7b97\u7684\u6570\u5b66\u5b9a\u4e49: \u4e0a\u9762\u662f\u622a\u56fe, \"\u53d6\u4e0b\u754c\"\u7b26\u53f7\u627e\u4e0d\u5230\u5982\u4f55\u8f93\u5165(word\u4e2d\u7c98\u8d34\u8fc7\u6765\u540e\u4e71\u7801). \u4e0b\u9762\u662f\u4f7f\u7528\"L\"\u548c\"J\"\u66ff\u6362\u4e0a\u56fe\u7684\"\u53d6\u4e0b\u754c\"\u7b26\u53f7: x mod y = x - y L x / y J \u4e0a\u9762\u516c\u5f0f\u7684\u610f\u601d\u662f: x mod y\u7b49\u4e8e x \u51cf\u53bb y \u4e58\u4e0a x\u4e0ey\u7684\u5546\u7684\u4e0b\u754c. \u4ee5 -3 mod 2 \u4e3e\u4f8b: -3 mod 2 = -3 - 2xL -3/2 J = -3 - 2xL-1.5J = -3 - 2x(-2) = -3 + 4 = 1 \u6240\u4ee5: (-2) mod 12 = 12-2=10 (-4) mod 12 = 12-4 = 8 (-5) mod 12 = 12 - 5 = 7","title":"\u8d1f\u6570\u53d6\u6a21"},{"location":"%E5%85%B6%E4%BB%96/%E5%8E%9F%E7%A0%81%2C%20%E5%8F%8D%E7%A0%81%2C%20%E8%A1%A5%E7%A0%81%20%E8%AF%A6%E8%A7%A3/#_9","text":"\u518d\u56de\u5230\u65f6\u949f\u7684\u95ee\u9898\u4e0a: \u56de\u62e82\u5c0f\u65f6 = \u524d\u62e810\u5c0f\u65f6 \u56de\u62e84\u5c0f\u65f6 = \u524d\u62e88\u5c0f\u65f6 \u56de\u62e85\u5c0f\u65f6= \u524d\u62e87\u5c0f\u65f6 \u6ce8\u610f, \u8fd9\u91cc\u53d1\u73b0\u7684\u89c4\u5f8b! \u7ed3\u5408\u4e0a\u9762\u5b66\u5230\u7684\u540c\u4f59\u7684\u6982\u5ff5.\u5b9e\u9645\u4e0a: (-2) mod 12 = 10 10 mod 12 = 10 -2\u4e0e10\u662f\u540c\u4f59\u7684. (-4) mod 12 = 8 8 mod 12 = 8 -4\u4e0e8\u662f\u540c\u4f59\u7684. \u8ddd\u79bb\u6210\u529f\u8d8a\u6765\u8d8a\u8fd1\u4e86. \u8981\u5b9e\u73b0\u7528\u6b63\u6570\u66ff\u4ee3\u8d1f\u6570, \u53ea\u9700\u8981\u8fd0\u7528\u540c\u4f59\u6570\u7684\u4e24\u4e2a\u5b9a\u7406: \u53cd\u8eab\u6027: a \u2261 a (mod m) \u8fd9\u4e2a\u5b9a\u7406\u662f\u5f88\u663e\u800c\u6613\u89c1\u7684. \u7ebf\u6027\u8fd0\u7b97\u5b9a\u7406: \u5982\u679ca \u2261 b (mod m)\uff0cc \u2261 d (mod m) \u90a3\u4e48: (1)a \u00b1 c \u2261 b \u00b1 d (mod m) (2)a * c \u2261 b * d (mod m) \u5982\u679c\u60f3\u770b\u8fd9\u4e2a\u5b9a\u7406\u7684\u8bc1\u660e, \u8bf7\u770b: http://baike.baidu.com/view/79282.htm \u6240\u4ee5: 7 \u2261 7 (mod 12) (-2) \u2261 10 (mod 12) 7 -2 \u2261 7 + 10 (mod 12) \u73b0\u5728\u6211\u4eec\u4e3a\u4e00\u4e2a\u8d1f\u6570, \u627e\u5230\u4e86\u5b83\u7684\u6b63\u6570\u540c\u4f59\u6570. \u4f46\u662f\u5e76\u4e0d\u662f7-2 = 7+10, \u800c\u662f 7 -2 \u2261 7 + 10 (mod 12) , \u5373\u8ba1\u7b97\u7ed3\u679c\u7684\u4f59\u6570\u76f8\u7b49. \u63a5\u4e0b\u6765\u56de\u5230\u4e8c\u8fdb\u5236\u7684\u95ee\u9898\u4e0a, \u770b\u4e00\u4e0b: 2-1=1\u7684\u95ee\u9898. 2-1=2+(-1) = [0000 0010]\u539f + [1000 0001]\u539f= [0000 0010]\u53cd + [1111 1110]\u53cd \u5148\u5230\u8fd9\u4e00\u6b65, -1\u7684\u53cd\u7801\u8868\u793a\u662f1111 1110. \u5982\u679c\u8fd9\u91cc\u5c06[1111 1110]\u8ba4\u4e3a\u662f\u539f\u7801, \u5219[1111 1110]\u539f = -126, \u8fd9\u91cc\u5c06\u7b26\u53f7\u4f4d\u9664\u53bb, \u5373\u8ba4\u4e3a\u662f126. \u53d1\u73b0\u6709\u5982\u4e0b\u89c4\u5f8b: (-1) mod 127 = 126 126 mod 127 = 126 \u5373: (-1) \u2261 126 (mod 127) 2-1 \u2261 2+126 (mod 127) 2-1 \u4e0e 2+126\u7684\u4f59\u6570\u7ed3\u679c\u662f\u76f8\u540c\u7684! \u800c\u8fd9\u4e2a\u4f59\u6570, \u6b63\u5f0f\u6211\u4eec\u7684\u671f\u671b\u7684\u8ba1\u7b97\u7ed3\u679c: 2-1=1 \u6240\u4ee5\u8bf4\u4e00\u4e2a\u6570\u7684\u53cd\u7801, \u5b9e\u9645\u4e0a\u662f\u8fd9\u4e2a\u6570\u5bf9\u4e8e\u4e00\u4e2a\u819c\u7684\u540c\u4f59\u6570. \u800c\u8fd9\u4e2a\u819c\u5e76\u4e0d\u662f\u6211\u4eec\u7684\u4e8c\u8fdb\u5236, \u800c\u662f\u6240\u80fd\u8868\u793a\u7684\u6700\u5927\u503c! \u8fd9\u5c31\u548c\u949f\u8868\u4e00\u6837, \u8f6c\u4e86\u4e00\u5708\u540e\u603b\u80fd\u627e\u5230\u5728\u53ef\u8868\u793a\u8303\u56f4\u5185\u7684\u4e00\u4e2a\u6b63\u786e\u7684\u6570\u503c! \u800c2+126\u5f88\u663e\u7136\u76f8\u5f53\u4e8e\u949f\u8868\u8f6c\u8fc7\u4e86\u4e00\u8f6e, \u800c\u56e0\u4e3a\u7b26\u53f7\u4f4d\u662f\u53c2\u4e0e\u8ba1\u7b97\u7684, \u6b63\u597d\u548c\u6ea2\u51fa\u7684\u6700\u9ad8\u4f4d\u5f62\u6210\u6b63\u786e\u7684\u8fd0\u7b97\u7ed3\u679c. \u65e2\u7136\u53cd\u7801\u53ef\u4ee5\u5c06\u51cf\u6cd5\u53d8\u6210\u52a0\u6cd5, \u90a3\u4e48\u73b0\u5728\u8ba1\u7b97\u673a\u4f7f\u7528\u7684\u8865\u7801\u5462? \u4e3a\u4ec0\u4e48\u5728\u53cd\u7801\u7684\u57fa\u7840\u4e0a\u52a01, \u8fd8\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c? 2-1=2+(-1) = [0000 0010]\u539f + [1000 0001]\u539f = [0000 0010]\u8865 + [1111 1111]\u8865 \u5982\u679c\u628a[1111 1111]\u5f53\u6210\u539f\u7801, \u53bb\u9664\u7b26\u53f7\u4f4d, \u5219: [0111 1111]\u539f = 127 \u5176\u5b9e, \u5728\u53cd\u7801\u7684\u57fa\u7840\u4e0a+1, \u53ea\u662f\u76f8\u5f53\u4e8e\u589e\u52a0\u4e86\u819c\u7684\u503c: (-1) mod 128 = 127 127 mod 128 = 127 2-1 \u2261 2+127 (mod 128) \u6b64\u65f6, \u8868\u76d8\u76f8\u5f53\u4e8e\u6bcf128\u4e2a\u523b\u5ea6\u8f6c\u4e00\u8f6e. \u6240\u4ee5\u7528\u8865\u7801\u8868\u793a\u7684\u8fd0\u7b97\u7ed3\u679c\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u5e94\u8be5\u662f[-128, 128]. \u4f46\u662f\u7531\u4e8e0\u7684\u7279\u6b8a\u60c5\u51b5, \u6ca1\u6709\u529e\u6cd5\u8868\u793a128, \u6240\u4ee5\u8865\u7801\u7684\u53d6\u503c\u8303\u56f4\u662f[-128, 127] \u8f6c\u8f7d\u81ea: https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html","title":"\u8bc1\u660e\u8fc7\u7a0b"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/","text":"\u4e0b\u8f7dpptpd \u00b6 sudo apt-get install pptpd \u8bbe\u7f6epptpd\u670d\u52a1\u5668\u672c\u5730ip\u4e0e\u62e8\u53f7\u8fdb\u5165\u7684\u7528\u6237\u7684IP\u5730\u5740\u8303\u56f4 \u00b6 \u4f7f\u7528pptpd\u5efa\u7acb\u7684vpn\u4f1a\u5728\u672c\u5730\u5efa\u7acb\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u6709\u4e00\u4e2a\u672c\u5730\u7684\u670d\u52a1\u5668ip\uff0c\u53e6\u5916\u5c31\u662f\u62e8\u53f7\u8fdb\u5165\u8fd9\u4e2a\u670d\u52a1\u5668\u7684\u90fd\u4f1a\u88ab\u5b89\u6392\u4e00\u4e2a\u7528\u6237ip\uff0c\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6epptp\u670d\u52a1\u5668\u7684\u672c\u5730ip\uff0c\u4ee5\u53ca\u62e8\u53f7\u8fdb\u5165\u8fd9\u4e2a\u670d\u52a1\u5668\u7684\u7528\u6237ip\u5730\u5740\u7684\u8303\u56f4\u3002 \u7f16\u8f91pptpd.conf\u6587\u4ef6\uff1a sudo vi /etc/pptpd.conf \u6dfb\u52a0\u5982\u4e0b\u884c\uff08\u7528\u6587\u4ef6\u4e2d\u9ed8\u8ba4\u7684\u5c31\u884c\u4e86\uff09\uff1a localip 192.168.0.1 remoteip 192.168.0.234-238,192.168.0.245 \u4fee\u6539pptp\u7684dns\u914d\u7f6e\uff08\u53ef\u9009\uff09 \u00b6 \u4fee\u6539\uff1a /etc/ppp/pptpd-options \u589e\u52a0ms-dns \u7684\u503c\u4e3a192.168.1.1\uff0c\u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\uff0c\u4e0d\u914d\u7f6e\u4e5f\u53ef\u4ee5 \u914d\u7f6e\u7528\u6237\u4fe1\u606f \u00b6 \u4fee\u6539\uff1a /etc/ppp/chap-secrets \u8fd9\u91cc\u662f\u5bf9\u62e8\u53f7\u7684\u7528\u6237\u4fe1\u606f\u8fdb\u884c\u914d\u7f6e\uff0c\u6dfb\u52a0\u5982\u4e0b\uff1a # client server secret IP addresses yiouejv pptpd 123456 * \u8fd9\u91cc\u6309\u7167\uff1a \u7528\u6237\u540d\uff08tab\uff09 \u4e3b\u673a\u540d\uff08tab\uff09 \u5bc6\u7801\uff08tab\uff09 \u5206\u914d\u5230\u7684ip\u5730\u5740 \u8fd9\u6837\u7684\u683c\u5f0f\u6765\u586b\u5199\uff0c\u5176\u4e2d\u7684\u4e3b\u673a\u540d\u53ef\u4ee5\u7528\u201c \u201d\u4ee3\u66ff\uff0c\u4e5f\u53ef\u4ee5\u968f\u4fbf\u586b\u4e00\u4e2a\uff1b\u5982\u679c\u4e0d\u5f3a\u5236\u6307\u5b9a\u7ed9\u62e8\u53f7\u7528\u6237\u5206\u914d\u5230\u54ea\u4e00\u4e2aip\u5730\u5740\uff0c\u53ef\u4ee5\u5c06\u6700\u540e\u4e00\u9879\u4e5f\u6539\u4e3a\u201c \u201d\u3002 \u91cd\u542fpptpds \u00b6 sudo /etc/init.d/pptpd restart \u4fee\u6539/etc/sysctl.conf \u00b6 \u4fee\u6539sysctl.conf\u6587\u4ef6\uff1a sudo vi /etc/sysctl.conf \u53bb\u6389 \u201cnet.ipv4.ip_forward=1\u201d \u524d\u7684\u6ce8\u91ca\u53f7\uff0c\u4fee\u6539\u5b8c\u4e4b\u540e\u4f7f\u7528\u547d\u4ee4\uff1a sudo sysctl -p \u6765\u4f7f\u914d\u7f6e\u751f\u6548\u3002 \u8f6c\u53d1\u89c4\u5219\u547d\u4ee4 \u00b6 iptables -t nat -A POSTROUTING -s 192.168.2.0/16 -o eth0 -j MASQUERADE //\u662fifconfig\u5f97\u5230\u7684IP iptables-save > /etc/iptables.pptp \u91cd\u542fpptpd \u00b6 sudo /etc/init.d/pptpd restart","title":"\u600e\u4e48\u642d\u5efa\u4e00\u4e2aVPN"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/#pptpd","text":"sudo apt-get install pptpd","title":"\u4e0b\u8f7dpptpd"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/#pptpdipip","text":"\u4f7f\u7528pptpd\u5efa\u7acb\u7684vpn\u4f1a\u5728\u672c\u5730\u5efa\u7acb\u4e00\u4e2a\u670d\u52a1\u5668\uff0c\u6709\u4e00\u4e2a\u672c\u5730\u7684\u670d\u52a1\u5668ip\uff0c\u53e6\u5916\u5c31\u662f\u62e8\u53f7\u8fdb\u5165\u8fd9\u4e2a\u670d\u52a1\u5668\u7684\u90fd\u4f1a\u88ab\u5b89\u6392\u4e00\u4e2a\u7528\u6237ip\uff0c\u8fd9\u91cc\u9700\u8981\u8bbe\u7f6epptp\u670d\u52a1\u5668\u7684\u672c\u5730ip\uff0c\u4ee5\u53ca\u62e8\u53f7\u8fdb\u5165\u8fd9\u4e2a\u670d\u52a1\u5668\u7684\u7528\u6237ip\u5730\u5740\u7684\u8303\u56f4\u3002 \u7f16\u8f91pptpd.conf\u6587\u4ef6\uff1a sudo vi /etc/pptpd.conf \u6dfb\u52a0\u5982\u4e0b\u884c\uff08\u7528\u6587\u4ef6\u4e2d\u9ed8\u8ba4\u7684\u5c31\u884c\u4e86\uff09\uff1a localip 192.168.0.1 remoteip 192.168.0.234-238,192.168.0.245","title":"\u8bbe\u7f6epptpd\u670d\u52a1\u5668\u672c\u5730ip\u4e0e\u62e8\u53f7\u8fdb\u5165\u7684\u7528\u6237\u7684IP\u5730\u5740\u8303\u56f4"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/#pptpdns","text":"\u4fee\u6539\uff1a /etc/ppp/pptpd-options \u589e\u52a0ms-dns \u7684\u503c\u4e3a192.168.1.1\uff0c\u8fd9\u4e00\u6b65\u662f\u53ef\u9009\u7684\uff0c\u4e0d\u914d\u7f6e\u4e5f\u53ef\u4ee5","title":"\u4fee\u6539pptp\u7684dns\u914d\u7f6e\uff08\u53ef\u9009\uff09"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/#_1","text":"\u4fee\u6539\uff1a /etc/ppp/chap-secrets \u8fd9\u91cc\u662f\u5bf9\u62e8\u53f7\u7684\u7528\u6237\u4fe1\u606f\u8fdb\u884c\u914d\u7f6e\uff0c\u6dfb\u52a0\u5982\u4e0b\uff1a # client server secret IP addresses yiouejv pptpd 123456 * \u8fd9\u91cc\u6309\u7167\uff1a \u7528\u6237\u540d\uff08tab\uff09 \u4e3b\u673a\u540d\uff08tab\uff09 \u5bc6\u7801\uff08tab\uff09 \u5206\u914d\u5230\u7684ip\u5730\u5740 \u8fd9\u6837\u7684\u683c\u5f0f\u6765\u586b\u5199\uff0c\u5176\u4e2d\u7684\u4e3b\u673a\u540d\u53ef\u4ee5\u7528\u201c \u201d\u4ee3\u66ff\uff0c\u4e5f\u53ef\u4ee5\u968f\u4fbf\u586b\u4e00\u4e2a\uff1b\u5982\u679c\u4e0d\u5f3a\u5236\u6307\u5b9a\u7ed9\u62e8\u53f7\u7528\u6237\u5206\u914d\u5230\u54ea\u4e00\u4e2aip\u5730\u5740\uff0c\u53ef\u4ee5\u5c06\u6700\u540e\u4e00\u9879\u4e5f\u6539\u4e3a\u201c \u201d\u3002","title":"\u914d\u7f6e\u7528\u6237\u4fe1\u606f"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/#pptpds","text":"sudo /etc/init.d/pptpd restart","title":"\u91cd\u542fpptpds"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/#etcsysctlconf","text":"\u4fee\u6539sysctl.conf\u6587\u4ef6\uff1a sudo vi /etc/sysctl.conf \u53bb\u6389 \u201cnet.ipv4.ip_forward=1\u201d \u524d\u7684\u6ce8\u91ca\u53f7\uff0c\u4fee\u6539\u5b8c\u4e4b\u540e\u4f7f\u7528\u547d\u4ee4\uff1a sudo sysctl -p \u6765\u4f7f\u914d\u7f6e\u751f\u6548\u3002","title":"\u4fee\u6539/etc/sysctl.conf"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/#_2","text":"iptables -t nat -A POSTROUTING -s 192.168.2.0/16 -o eth0 -j MASQUERADE //\u662fifconfig\u5f97\u5230\u7684IP iptables-save > /etc/iptables.pptp","title":"\u8f6c\u53d1\u89c4\u5219\u547d\u4ee4"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAVPN/#pptpd_1","text":"sudo /etc/init.d/pptpd restart","title":"\u91cd\u542fpptpd"},{"location":"%E5%85%B6%E4%BB%96/%E6%80%8E%E4%B9%88%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAsamba%E6%9C%8D%E5%8A%A1/","text":"\u4ee5\u524d\u6211\u4eec\u5728 Windows \u4e0a\u5171\u4eab\u6587\u4ef6\u7684\u8bdd\uff0c\u53ea\u9700\u53f3\u51fb\u8981\u5171\u4eab\u7684\u6587\u4ef6\u5939\u7136\u540e\u9009\u62e9\u5171\u4eab\u76f8\u5173\u7684\u9009\u9879\u8bbe\u7f6e\u5373\u53ef\u3002\u7136\u800c\u5982\u4f55\u5b9e\u73b0 Windows \u548c linux \u7684\u6587\u4ef6\u5171\u4eab\u5462\uff1f\u8fd9\u5c31\u6d89\u53ca\u5230\u4e86samba\u670d\u52a1\u4e86\uff0c\u8fd9\u4e2a\u8f6f\u4ef6\u914d\u7f6e\u8d77\u6765\u4e5f\u4e0d\u96be\uff0c\u4f7f\u7528\u4e5f\u975e\u5e38\u7b80\u5355\u3002 samba\u914d\u7f6e\u6587\u4ef6smb.conf \u4e00\u822c\u4f60\u88c5\u7cfb\u7edf\u7684\u65f6\u5019\u4f1a\u9ed8\u8ba4\u5b89\u88c5samba\uff0c\u5982\u679c\u6ca1\u6709\u5b89\u88c5\uff0c\u53ea\u9700\u8981\u8fd0\u884c\u8fd9\u4e2a\u547d\u4ee4\u5b89\u88c5(CentOS)\uff1a \u201cyum install -y samba samba-client\u201d Samba\u7684\u914d\u7f6e\u6587\u4ef6\u4e3a/etc/samba/smb.conf\uff0c\u901a\u8fc7\u4fee\u6539\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u6765\u5b8c\u6210\u6211\u4eec\u7684\u5404\u79cd\u9700\u6c42\u3002\u6253\u5f00\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u5185\u5bb9\u90fd\u7528\u201d#\u201d\u6216\u8005\u201d;\u201d\u6ce8\u89c6\u6389\u4e86\u3002\u5148\u770b\u4e00\u4e0b\u672a\u88ab\u6ce8\u91ca\u6389\u7684\u90e8\u5206\uff1a [global] workgroup = MYGROUP server string = Samba Server Version %v security = user passdb backend = tdbsam load printers = yes cups options = raw [homes] comment = Home Directories browseable = no writable = yes [printers] comment = All Printers path = /var/spool/samba browseable = no guest ok = no writable = no printable = yes \u4e3b\u8981\u6709\u4ee5\u4e0a\u4e09\u4e2a\u90e8\u5206\uff1a[global], [homes], [printers]\u3002 [global] \u5b9a\u4e49\u5168\u5c40\u7684\u914d\u7f6e\uff0c\u201dworkgroup\u201d\u7528\u6765\u5b9a\u4e49\u5de5\u4f5c\u7ec4\uff0c\u76f8\u4fe1\u5982\u679c\u4f60\u5b89\u88c5\u8fc7windows\u7684\u7cfb\u7edf\uff0c\u4f60\u4f1a\u5bf9\u8fd9\u4e2aworkgroup\u4e0d\u964c\u751f\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u6211\u4eec\u628a\u8fd9\u91cc\u7684\u201dMYGROUP\u201d\u6539\u6210\u201dWORKGROUP\u201d\uff08windows\u9ed8\u8ba4\u7684\u5de5\u4f5c\u7ec4\u540d\u5b57\uff09\u3002 security = user #\u8fd9\u91cc\u6307\u5b9asamba\u7684\u5b89\u5168\u7b49\u7ea7\u3002\u5173\u4e8e\u5b89\u5168\u7b49\u7ea7\u6709\u56db\u79cd\uff1a share\uff1a\u7528\u6237\u4e0d\u9700\u8981\u8d26\u6237\u53ca\u5bc6\u7801\u5373\u53ef\u767b\u5f55samba\u670d\u52a1\u5668 user\uff1a\u7531\u63d0\u4f9b\u670d\u52a1\u7684samba\u670d\u52a1\u5668\u8d1f\u8d23\u68c0\u67e5\u8d26\u6237\u53ca\u5bc6\u7801\uff08\u9ed8\u8ba4\uff09 server\uff1a\u68c0\u67e5\u8d26\u6237\u53ca\u5bc6\u7801\u7684\u5de5\u4f5c\u7531\u53e6\u4e00\u53f0windows\u6216samba\u670d\u52a1\u5668\u8d1f\u8d23 domain\uff1a\u6307\u5b9awindows\u57df\u63a7\u5236\u670d\u52a1\u5668\u6765\u9a8c\u8bc1\u7528\u6237\u7684\u8d26\u6237\u53ca\u5bc6\u7801\u3002 passdb backend = tdbsam # passdb backend \uff08\u7528\u6237\u540e\u53f0\uff09\uff0csamba\u6709\u4e09\u79cd\u7528\u6237\u540e\u53f0\uff1asmbpasswd, tdbsam\u548cldapsam\u3002 smbpasswd\uff1a\u8be5\u65b9\u5f0f\u662f\u4f7f\u7528smb\u5de5\u5177smbpasswd\u7ed9\u7cfb\u7edf\u7528\u6237\uff08\u771f\u5b9e\u7528\u6237\u6216\u8005\u865a\u62df\u7528\u6237\uff09\u8bbe\u7f6e\u4e00\u4e2aSamba \u5bc6\u7801\uff0c\u5ba2\u6237\u7aef\u5c31\u7528\u6b64\u5bc6\u7801\u8bbf\u95eeSamba\u8d44\u6e90\u3002smbpasswd\u5728/etc/samba\u4e2d\uff0c\u6709\u65f6\u9700\u8981\u624b\u5de5\u521b\u5efa\u8be5\u6587\u4ef6\u3002 tdbsam\uff1a\u4f7f\u7528\u6570\u636e\u5e93\u6587\u4ef6\u521b\u5efa\u7528\u6237\u6570\u636e\u5e93\u3002\u6570\u636e\u5e93\u6587\u4ef6\u53ebpassdb.tdb\uff0c\u5728/etc/samba\u4e2d\u3002passdb.tdb\u7528\u6237\u6570\u636e\u5e93\u53ef\u4f7f\u7528smbpasswd \u2013a\u521b\u5efaSamba\u7528\u6237\uff0c\u8981\u521b\u5efa\u7684Samba\u7528\u6237\u5fc5\u987b\u5148\u662f\u7cfb\u7edf\u7528\u6237\u3002\u4e5f\u53ef\u4f7f\u7528pdbedit\u521b\u5efaSamba\u8d26\u6237\u3002 pdbedit\u53c2\u6570\u5f88\u591a\uff0c\u5217\u51fa\u51e0\u4e2a\u4e3b\u8981\u7684\uff1a pdbedit \u2013a username\uff1a\u65b0\u5efaSamba\u8d26\u6237\u3002 pdbedit \u2013x username\uff1a\u5220\u9664Samba\u8d26\u6237\u3002 pdbedit \u2013L\uff1a\u5217\u51faSamba\u7528\u6237\u5217\u8868\uff0c\u8bfb\u53d6passdb.tdb\u6570\u636e\u5e93\u6587\u4ef6\u3002 pdbedit \u2013Lv\uff1a\u5217\u51faSamba\u7528\u6237\u5217\u8868\u8be6\u7ec6\u4fe1\u606f\u3002 pdbedit \u2013c \u201c[D]\u201d \u2013u username\uff1a\u6682\u505c\u8be5Samba\u7528\u6237\u8d26\u53f7\u3002 -pdbedit \u2013c \u201c[]\u201d \u2013u username\uff1a\u6062\u590d\u8be5Samba\u7528\u6237\u8d26\u53f7\u3002 ldapsam\uff1a\u57fa\u4e8eLDAP\u8d26\u6237\u7ba1\u7406\u65b9\u5f0f\u9a8c\u8bc1\u7528\u6237\u3002\u9996\u5148\u8981\u5efa\u7acbLDAP\u670d\u52a1\uff0c\u8bbe\u7f6e\u201cpassdb backend = ldapsam:ldap://LDAP Server\u201d load printers \u548c cups options \u4e24\u4e2a\u53c2\u6570\u7528\u6765\u8bbe\u7f6e\u6253\u5370\u673a\u76f8\u5173\u3002 \u9664\u4e86\u8fd9\u4e9b\u53c2\u6570\u5916\uff0c\u8fd8\u6709\u51e0\u4e2a\u53c2\u6570\u9700\u8981\u4f60\u4e86\u89e3\uff1a netbios name = MYSERVER # \u8bbe\u7f6e\u51fa\u73b0\u5728\u201c\u7f51\u4e0a\u90bb\u5c45\u201d\u4e2d\u7684\u4e3b\u673a\u540d hosts allow = 127. 192.168.12. 192.168.13. # \u7528\u6765\u8bbe\u7f6e\u5141\u8bb8\u7684\u4e3b\u673a\uff0c\u5982\u679c\u5728\u524d\u9762\u52a0\u201d;\u201d\u5219\u8868\u793a\u5141\u8bb8\u6240\u6709\u4e3b\u673a log file = /var/log/samba/%m.log #\u5b9a\u4e49samba\u7684\u65e5\u5fd7\uff0c\u8fd9\u91cc\u7684%m\u662f\u4e0a\u9762\u7684netbios name max log size = 50 # \u6307\u5b9a\u65e5\u5fd7\u7684\u6700\u5927\u5bb9\u91cf\uff0c\u5355\u4f4d\u662fK [homes] \u8be5\u90e8\u5206\u5185\u5bb9\u5171\u4eab\u7528\u6237\u81ea\u5df1\u7684\u5bb6\u76ee\u5f55\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u767b\u5f55\u5230samba\u670d\u52a1\u5668\u4e0a\u65f6\u5b9e\u9645\u4e0a\u662f\u8fdb\u5165\u5230\u4e86\u8be5\u7528\u6237\u7684\u5bb6\u76ee\u5f55\uff0c\u7528\u6237\u767b\u9646\u540e\uff0c\u5171\u4eab\u540d\u4e0d\u662fhomes\u800c\u662f\u7528\u6237\u81ea\u5df1\u7684\u6807\u8bc6\u7b26\uff0c\u5bf9\u4e8e\u5355\u7eaf\u7684\u6587\u4ef6\u5171\u4eab\u7684\u73af\u5883\u6765\u8bf4\uff0c\u8fd9\u90e8\u5206\u53ef\u4ee5\u6ce8\u89c6\u6389\u3002 [printers] \u8be5\u90e8\u5206\u5185\u5bb9\u8bbe\u7f6e\u6253\u5370\u673a\u5171\u4eab\u3002 samba\u5b9e\u8df5 \u6ce8\u610f\uff1a\u5728\u8bd5\u9a8c\u4e4b\u524d\uff0c\u8bf7\u5148\u68c0\u6d4bselinux\u662f\u5426\u5173\u95ed\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u8bd5\u9a8c\u4e0d\u6210\u529f\u3002 \u5171\u4eab\u4e00\u4e2a\u76ee\u5f55\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u5373\u4e0d\u7528\u8f93\u5165\u5bc6\u7801\u5373\u53ef\u8bbf\u95ee\uff0c\u8981\u6c42\u53ea\u8bfb\u3002 \u6253\u5f00samba\u7684\u914d\u7f6e\u6587\u4ef6/etc/samba/smb.conf [global]\u90e8\u5206 \u628a\u201dMY GROUP\u201d\u6539\u6210\u201dWORKGROUP\u201d \u628a\u201d security = user\u201d \u4fee\u6539\u4e3a \u201csecurity = share\u201d \u7136\u540e\u5728\u6587\u4ef6\u7684\u6700\u672b\u5c3e\u5904\u52a0\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a [share] comment = share all path = /tmp/samba browseable = yes public = yes writable = no mkdir /tmp/samba chmod 777 /tmp/samba \u542f\u52a8samba\u670d\u52a1 /etc/init.d/smb start \u6d4b\u8bd5\uff1a \u9996\u5148\u6d4b\u8bd5\u4f60\u914d\u7f6e\u7684smb.conf\u662f\u5426\u6b63\u786e\uff0c\u7528\u4e0b\u9762\u7684\u547d\u4ee4 testparm \u5982\u679c\u6ca1\u6709\u9519\u8bef\uff0c\u5219\u5728\u4f60\u7684windows\u673a\u5668\u4e0a\u7684\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 file://IP/share \u770b\u662f\u5426\u80fd\u8bbf\u95ee \u5171\u4eab\u4e00\u4e2a\u76ee\u5f55\uff0c\u4f7f\u7528\u7528\u6237\u540d\u548c\u5bc6\u7801\u767b\u5f55\u540e\u624d\u53ef\u4ee5\u8bbf\u95ee\uff0c\u8981\u6c42\u53ef\u4ee5\u8bfb\u5199 \u6253\u5f00samba\u7684\u914d\u7f6e\u6587\u4ef6/etc/samba/smb.conf [global] \u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff1a [global] workgroup = WORKGROUP server string = Samba Server Version %v security = user passdb backend = tdbsam load printers = yes cups options = raw \u7136\u540e\u52a0\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a [myshare] comment = share for users path = /samba browseable = yes writable = yes public = no \u4fdd\u5b58\u914d\u7f6e\u6587\u4ef6\uff0c\u521b\u5efa\u76ee\u5f55\uff1a mkdir /samba chmod 777 /samba \u7136\u540e\u6dfb\u52a0\u7528\u6237\u3002\u56e0\u4e3a\u5728[globa]\u4e2d\u201d passdb backend = tdbsam\u201d\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u201d pdbedit\u201d \u6765\u589e\u52a0\u7528\u6237\uff0c\u6ce8\u610f\u6dfb\u52a0\u7684\u7528\u6237\u5fc5\u987b\u5728\u7cfb\u7edf\u4e2d\u5b58\u5728\u3002 useradd user1 user2 pdbedit -a user1 # \u6dfb\u52a0user1\u8d26\u53f7\uff0c\u5e76\u5b9a\u4e49\u5176\u5bc6\u7801 pdbedit -a user2 pdbedit -L # \u5217\u51fa\u6240\u6709\u7684\u8d26\u53f7","title":"\u600e\u4e48\u642d\u5efa\u4e00\u4e2asamba\u670d\u52a1"},{"location":"%E5%88%B7%E7%AC%94%E8%AF%95%E9%A2%98/%E5%88%B7%E7%AC%94%E8%AF%95%E9%A2%98/","text":"1. \u6709B+Tree/Hash_Map/STL Map\u4e09\u79cd\u6570\u636e\u7ed3\u6784\u3002\u5bf9\u4e8e\u5185\u5b58\u4e2d\u6570\u636e\uff0c\u67e5\u627e\u6027\u80fd\u8f83\u597d\u7684\u6570\u636e\u7ed3\u6784\u662f\uff08\uff09\uff0c\u5bf9\u4e8e\u78c1\u76d8\u4e2d\u6570\u636e\uff0c\u67e5\u627e\u6027\u80fd\u8f83\u597d\u7684\u6570\u636e\u7ed3\u6784\u662f\uff08\uff09\u3002 Hash\u64cd\u4f5c\u80fd\u6839\u636e\u6563\u5217\u503c\u76f4\u63a5\u5b9a\u4f4d\u6570\u636e\u7684\u5b58\u50a8\u5730\u5740\uff0c\u8bbe\u8ba1\u826f\u597d\u7684hash\u8868\u80fd\u5728\u5e38\u6570\u7ea7\u65f6\u95f4\u4e0b\u627e\u5230\u9700\u8981\u7684\u6570\u636e\uff0c\u4f46\u662f\u66f4\u9002\u5408\u4e8e\u5185\u5b58\u4e2d\u7684\u67e5\u627e\u3002 B+\u6811\u662f\u4e00\u79cd\u662f\u4e00\u79cd\u6811\u72b6\u7684\u6570\u636e\u7ed3\u6784\uff0c\u9002\u5408\u505a\u7d22\u5f15\uff0c\u5bf9\u78c1\u76d8\u6570\u636e\u6765\u8bf4\uff0c\u7d22\u5f15\u67e5\u627e\u662f\u6bd4\u8f83\u9ad8\u6548\u7684 STL_Map\u7684\u5185\u90e8\u5b9e\u73b0\u662f\u4e00\u9897\u7ea2\u9ed1\u6811\uff0c\u4f46\u662f\u53ea\u662f\u4e00\u9897\u5728\u5185\u5b58\u4e2d\u5efa\u7acb\u4e8c\u53c9\u6811\u6811\uff0c\u4e0d\u80fd\u7528\u4e8e\u78c1\u76d8\u64cd\u4f5c\uff0c\u800c\u5176\u5185\u5b58\u67e5\u627e\u6027\u80fd\u4e5f\u6bd4\u4e0d\u4e0aHash\u67e5\u627e\u3002 \u56e0\u6b64\u5bf9\u4e8e\u5185\u5b58\u4e2d\u6570\u636e\uff0c\u67e5\u627e\u6027\u80fd\u8f83\u597d\u7684\u6570\u636e\u7ed3\u6784\u662fHash_Map\uff0c\u5bf9\u4e8e\u78c1\u76d8\u4e2d\u6570\u636e\uff0c\u67e5\u627e\u6027\u80fd\u8f83\u597d\u7684\u6570\u636e\u7ed3\u6784\u662fB+Tree\u3002 2. tcp\u4e09\u6b21\u63e1\u624b\u521b\u5efa\u8fde\u63a5\uff0c\u53cc\u65b9\u4ea4\u4e92\u7684\u62a5\u6587\u4e2dSYN\u548cACK\u7684\u5e8f\u5217\u662f\u4ec0\u4e48\u6837\u7684() \u5728TCP/IP\u534f\u8bae\u4e2d\uff0cTCP\u534f\u8bae\u63d0\u4f9b\u53ef\u9760\u7684\u8fde\u63a5\u670d\u52a1\uff0c\u91c7\u7528\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u4e00\u4e2a\u8fde\u63a5\u3002 \u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u5efa\u7acb\u8fde\u63a5\u65f6\uff0c\u5ba2\u6237\u7aef\u53d1\u9001syn\u5305(syn=j)\u5230\u670d\u52a1\u5668\uff0c\u5e76\u8fdb\u5165SYN_SEND\u72b6\u6001\uff0c\u7b49\u5f85\u670d\u52a1\u5668\u786e\u8ba4\uff1b \u7b2c\u4e8c\u6b21\u63e1\u624b\uff1a\u670d\u52a1\u5668\u6536\u5230syn\u5305\uff0c\u5fc5\u987b\u786e\u8ba4\u5ba2\u6237\u7684SYN\uff08ack=j+1\uff09\uff0c\u540c\u65f6\u81ea\u5df1\u4e5f\u53d1\u9001\u4e00\u4e2aSYN\u5305\uff08syn=k\uff09\uff0c\u5373SYN+ACK\u5305\uff0c\u6b64\u65f6\u670d\u52a1\u5668\u8fdb\u5165SYN_RECV\u72b6\u6001\uff1b \u7b2c\u4e09\u6b21\u63e1\u624b\uff1a\u5ba2\u6237\u7aef\u6536\u5230\u670d\u52a1\u5668\u7684SYN\uff0bACK\u5305\uff0c\u5411\u670d\u52a1\u5668\u53d1\u9001\u786e\u8ba4\u5305ACK(ack=k+1)\uff0c\u6b64\u5305\u53d1\u9001\u5b8c\u6bd5\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u8fdb\u5165ESTABLISHED\u72b6\u6001\uff0c\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u3002 \u5b8c\u6210\u4e09\u6b21\u63e1\u624b\uff0c\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u5f00\u59cb\u4f20\u9001\u6570\u636e\u3002 3. ISO\u7f51\u7edc\u4e03\u5c42\u6a21\u578b \u7269\u7406\u5c42\uff1a\u901a\u8fc7\u5a92\u4ecb\u4f20\u8f93\u6bd4\u7279,\u786e\u5b9a\u673a\u68b0\u53ca\u7535\u6c14\u89c4\u8303\uff08\u6bd4\u7279Bit\uff09 \u6570\u636e\u94fe\u8def\u5c42\uff1a\u5c06\u6bd4\u7279\u7ec4\u88c5\u6210\u5e27\u548c\u70b9\u5230\u70b9\u7684\u4f20\u9012\uff08\u5e27Frame\uff09 \u7f51\u7edc\u5c42\uff1a\u8d1f\u8d23\u6570\u636e\u5305\u4ece\u6e90\u5230\u5bbf\u7684\u4f20\u9012\u548c\u7f51\u9645\u4e92\u8fde\uff08\u5305PackeT\uff09 \u4f20\u8f93\u5c42\uff1a\u63d0\u4f9b\u7aef\u5230\u7aef\u7684\u53ef\u9760\u62a5\u6587\u4f20\u9012\u548c\u9519\u8bef\u6062\u590d\uff08\u6bb5Segment\uff09 \u4f1a\u8bdd\u5c42\uff1a\u5efa\u7acb\u3001\u7ba1\u7406\u548c\u7ec8\u6b62\u4f1a\u8bdd\uff08\u4f1a\u8bdd\u534f\u8bae\u6570\u636e\u5355\u5143SPDU\uff09 \u8868\u793a\u5c42\uff1a\u5bf9\u6570\u636e\u8fdb\u884c\u7ffb\u8bd1\u3001\u52a0\u5bc6\u548c\u538b\u7f29\uff08\u8868\u793a\u534f\u8bae\u6570\u636e\u5355\u5143PPDU\uff09 \u5e94\u7528\u5c42\uff1a\u5141\u8bb8\u8bbf\u95eeOSI\u73af\u5883\u7684\u624b\u6bb5\uff08\u5e94\u7528\u534f\u8bae\u6570\u636e\u5355\u5143APDU\uff09 4. a, b \u662f\u591a\u5c11\uff1f char *p1;int64 *p2; p1=(char *)0x800000; p2=(int64 *)0x800000; char *a=p1+2 int64_t *b=p2+2 \u90a3\u4e48a=1,b=2 \u6307\u9488\u91cc\u9762\u5b58\u7684\u662f\u5730\u5740\uff0c\u6240\u4ee5\u6307\u9488\u7684\u52a0\u51cf\u4e5f\u662f\u4e3a\u4e86\u6c42\u5f97\u53d8\u5316\u540e\u7684\u5730\u5740\uff0c\u5373\u5047\u8bbe\u6307\u9488\u7684\u7c7b\u578b\u662fT,\u90a3\u4e48\u65b0\u7684\u5730\u5740\u5e94\u8be5\u5c31\u662f\u539f\u5730\u5740+sizeof(T)\u4e2a\u5b57\u8282\u540e\u5f97\u5230\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u52a0\u7684\u5b9e\u8d28\u8fd8\u662f\u76f8\u5e94\u7684\u5b57\u8282\u6570\uff0c\u800c\u8fd9\u4e2a\u5b57\u8282\u6570\u662f\u591a\u5c11\u5f97\u770b\u6307\u9488\u7684\u7c7b\u578b\uff0c\u672c\u9898\u4e2d\u7b2c\u4e00\u4e2a\u662fchar\u7c7b\u578b\uff0c\u90a3\u4e48\u52a02\u5c31\u662f\u4fe9\u4e2a\u5b57\u8282\uff0c\u7b2c\u4e8c\u4e2a\u662f64\u4f4d\u7684int,\u90a3\u4e48\u76f8\u5e94\u7684\u6307\u9488\u7c7b\u578b\u5c31\u662f8\u5b57\u8282,\u56e0\u4e3a\u6307\u9488\u5c31\u662f\u4e3a\u4e86\u5bfb\u5730\u5740\u7684\uff0c\u4e0ecpu\u7684\u4f4d\u6570\u6709\u5173\uff0c\u4e00\u4e2a\u5b57\u82828\u4f4d\uff0c\u56e0\u6b64\u5b83\u52a02\u5c31\u662f\u52a02*sizeof(int64)\uff0c\u8f6c16\u8fdb\u5236\u4e3a0x1 5. \u5df2\u77e5\u6709\u4e00\u4e2a\u5173\u952e\u5b57\u5e8f\u5217\uff1a\uff0819\uff0c14,23,1,68,20,84,27,55,11,10,79\uff09\u6563\u5217\u5b58\u50a8\u5728\u4e00\u4e2a\u54c8\u5e0c\u8868\u4e2d\uff0c\u82e5\u6563\u5217\u51fd\u6570\u4e3aH\uff08key\uff09=key%7\uff0c\u5e76\u91c7\u7528\u94fe\u5730\u5740\u6cd5\u6765\u89e3\u51b3\u51b2\u7a81\uff0c\u5219\u5728\u7b49\u6982\u7387\u60c5\u51b5\u4e0b\u67e5\u627e\u6210\u529f\u7684\u5e73\u5747\u67e5\u627e\u957f\u5ea6\u4e3a\uff08\uff09\u3002 6. \u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\uff0c\u6240\u6709\u7684\u8ba1\u7b97\u673a\u90fd\u8fde\u63a5\u5230\u4e00\u4e2a\u4e2d\u5fc3\u8282\u70b9\u4e0a\uff0c\u4e00\u4e2a\u7f51\u7edc\u7ed3\u70b9\u9700\u8981\u4f20\u8f93\u6570\u636e\uff0c\u9996\u5148\u4f20\u8f93\u5230\u4e2d\u5fc3\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u7531\u4e2d\u5fc3\u8282\u70b9\u8f6c\u53d1\u5230\u76ee\u7684\u8282\u70b9 \uff0c\u8fd9\u79cd\u8fde\u63a5\u7ed3\u6784\u88ab\u79f0\u4e3a\uff08\uff09 \u603b\u7ebf\u7ed3\u6784\u662f\u6307\u6240\u6709\u8ba1\u7b97\u673a\u901a\u8fc7\u4e00\u8ddf\u603b\u7ebf\u901a\u4fe1 \u73af\u5f62\u7ed3\u6784\u76f8\u5f53\u4e8e\u591a\u53f0\u8ba1\u7b97\u673a\u7684\u7f51\u7ebf\u624b\u62c9\u624b\u56f4\u6210\u4e00\u4e2a\u5708\u7684\u8fde\u63a5\u6a21\u578b \u661f\u578b\u7ed3\u6784\u662f\u6709\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u5411\u5916\u8f90\u5c04\u51fa\u591a\u6761\u94fe\u8def\uff0c \u7b26\u5408\u9898\u76ee\u63cf\u8ff0\u7684\u60c5\u51b5 \u7f51\u72b6\u7ed3\u6784\u4e5f\u5c31\u662f\u8ba1\u7b97\u673a\u4e4b\u95f4\u4ea4\u4e92\u8fde\u63a5\uff0c\u4efb\u610f\u4e24\u53f0\u8ba1\u7b97\u673a\u4e4b\u95f4\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u76f8\u8fde 7. ARP \u534f\u8bae ARP\u534f\u8bae\u548cRARP\u534f\u8bae\u662f\u4f5c\u7528\u4e8e\u6570\u636e\u94fe\u8def\u5c42\u7684\uff0cARP\u534f\u8bae\u7684\u4f5c\u7528\u662f\u5c06IP\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\uff0c\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u5c06ARP\u8bf7\u6c42\u62a5\u6587\u5e7f\u64ad\u5230\u6240\u5728\u7f51\u7edc\u4e0a\u7684\u6240\u6709\u4e3b\u673a\uff0c\u62a5\u6587\u4e2d\u542b\u6709\u76ee\u7684\u4e3b\u673a\u7684IP\u5730\u5740\uff0c\u53ea\u6709\u76ee\u6807\u4e3b\u673a\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2aARP\u5e94\u7b54\u62a5\u6587\uff0c\u62a5\u6587\u4e2d\u542b\u6709\u8be5\u4e3b\u673a\u7684\u7269\u7406\u5730\u5740\u3002 ARP\u534f\u8bae\u5de5\u4f5c\u5728\u6570\u636e\u94fe\u8def\u5c42\uff0c\u4f46\u662f\u5c5e\u4e8e\u7f51\u7edc\u5c42\u3002 8. \u8fd0\u884c\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f1a\u51fa\u73b0\u7684\u60c5\u51b5\u662f:() void GetMemory ( char * p ) { p = ( char * ) malloc ( 100 ); } void Test ( void ) { char * str = NULL ; GetMemory ( str ); strcpy ( str , \"hello world\" ); printf ( str ); } GetMemory(char *p);\u8fd9\u91cc*p\u662f\u5f62\u53c2, \u662f\u5c40\u90e8\u53d8\u91cf\u4e0d\u80fd\u5c06malloc\u7533\u8bf7\u7684\u5730\u5740\u6307\u9488\u8fd4\u56de\uff0c\u9020\u6210\u5185\u5b58\u6cc4\u9732\u66f4\u4e25\u91cd\u7684\u662f\u6267\u884cGetMemory(str); \u540estr\u4f9d\u7136\u4e3aNULL\u6267\u884cstrcpy(str, 'hello world'); \u5c31\u4f1a\u51fa\u9519 9. \u5728 32 \u4f4d\u7cfb\u7edf\u4e2d\uff1a char arr [] = { 4 , 3 , 9 , 9 , 2 , 0 , 1 , 5 }; char * str = arr ; sizeof ( arr ) = 1 ; sizeof ( str ) = 2 ; strlen ( str ) = 3 ; sizeof(arr)\u6c42\u51fa\u4e86\u4e3aarr\u7684\u957f\u5ea6\u4e58\u4ee5arr\u7c7b\u578b\u6240\u5360\u7684\u5b57\u8282\u6570\uff0c\u8fd9\u91ccarr\u662fchar\u578b\u7684\uff0c\u6bcf\u4e2a\u6570\u636e\u5360\u4e00\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5sizeof(arr)\u5f97\u52308 sizeof(str)\u8fd9\u91ccstr\u662f\u5b57\u7b26\u6307\u9488\uff0c32\u4e3a\u7cfb\u7edf\u4e2d\u6307\u9488\u53604\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u4e3a4 strlen(str)\u6c42\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u8fd9\u91cc\u7684\u5b57\u7b26\u4e32\u7531\u5b57\u7b26\u6570\u7ec4\u5f97\u5230\uff0c\u5b57\u7b26\u6570\u7ec4\u4e2d\u8d4b\u503c\u7684\u662f\u5b57\u7b26\u7684ASCII\u503c, \u5176\u4e2dASCII\u503c\u4e3a0\u7684\u4ee3\u8868\u5b57\u7b26\u4e2d\u7684\u2018\\0\u2019\u4e5f\u5c31\u662f\u5b57\u7b26\u4e32\u7ed3\u675f\u7684\u6807\u5fd7\uff0c\u6240\u4ee5\u5f97\u5230\u7684\u957f\u5ea6\u4e3a5 10. \u6709\u8fd9\u6837\u4e00\u4e2a\u7c7b\uff1a class Eye { public : void Look ( void ); }; \u73b0\u5728\u5e0c\u671b\u5b9a\u4e49\u4e00\u4e2aHead\u7c7b\uff0c\u4e5f\u60f3\u5b9e\u73b0Look\u7684\u529f\u80fd\uff0c\u5e94\u8be5\u4f7f\u7528\uff08\uff09\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4ee3\u7801\u91cd\u7528\u3002 Answer \u7ec4\u5408\u662f\u5728\u65b0\u7c7b\u4e2d\u4ee5\u539f\u6709\u7c7b\u7684\u5bf9\u8c61\u4f5c\u4e3a\u6570\u636e\u6210\u5458\uff0c\u7ee7\u627f\u662f\u5728\u4e0d\u6539\u53d8\u73b0\u6709\u7684\u7c7b\u7684\u57fa\u7840\u4e0a\uff0c\u91c7\u7528\u73b0\u6709\u7c7b\u7684\u5f62\u5f0f\u5e76\u5728\u5176\u4e2d\u6dfb\u52a0\u65b0\u4ee3\u7801\uff0c\u7ec4\u5408\u4e00\u822c\u7528\u4e8e\u5728\u65b0\u7c7b\u4e2d\u4f7f\u7528\u73b0\u6709\u7c7b\u7684\u529f\u80fd\u800c\u4e0d\u662f\u4ed6\u7684\u63a5\u53e3\u7684\u60c5\u51b5\uff0c\u5c31\u662f\u65b0\u7c7b\u7528\u6237\u770b\u5230\u7684\u53ea\u662f\u4e3a\u65b0\u7c7b\u6240\u5b9a\u4e49\u7684\u63a5\u53e3\u3002\u800c\u7ee7\u627f\u5219\u662f\u7528\u4e8e\u5728\u65b0\u7c7b\u9700\u8981\u5411\u57fa\u7c7b\u8f6c\u5316\u7684\u60c5\u51b5\uff08\u591a\u6001\uff09\uff0c\u8fd9\u4e5f\u662f\u7ec4\u5408\u548c\u7ee7\u627f\u4f7f\u7528\u7684\u6700\u6e05\u6670\u7684\u5224\u65ad\u65b9\u6cd5\u3002 \u7ed3\u5408\u672c\u9898\u5206\u6790\uff0c\u6211\u4eec\u53ea\u9700\u8ba9\u773c\u775b\u4f5c\u4e3a\u5934\u7684\u4e00\u4e2a\u6210\u5458\u5373\u53ef\uff0c\u800c\u8ba9\u5934\u53bb\u7ee7\u627f\u773c\u775b\u7684\u7279\u6027\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002","title":"\u5237\u7b14\u8bd5\u98981"},{"location":"%E5%88%B7%E7%AC%94%E8%AF%95%E9%A2%98/%E5%88%B7%E7%AC%94%E8%AF%95%E9%A2%982/","text":"1. 7*7 \u7684\u65b9\u683c\uff0c\u4ece\u5de6\u4e0b\u89d2\u8d70\u5230\u53f3\u4e0a\u89d2\uff0c\u6700\u77ed\u8def\u5f84\u524d\u63d0\u4e0b\u4e00\u5171\u6709 1 \u79cd\u4e0d\u540c\u8def\u5f84\u3002 \u65e2\u7136\u662f\u8ddf\u6700\u77ed\u8def\u5f84\u76f8\u5173\uff0c\u90a3\u80af\u5b9a\u5e94\u8be5\u53ea\u80fd\u5411\u4e0a\u6216\u8005\u5411\u53f3\u79fb\u52a8\u3002\u5426\u5219\u4efb\u4f55\u5411\u5de6\u6216\u8005\u5411\u4e0b\u7684\u79fb\u52a8\u90fd\u4f1a\u9020\u6210\u8def\u5f84\u4e0d\u662f\u6700\u77ed\u3002 \u90a3\u4e48\u6b64\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u4f1a\u67097\u6b21\u5411\u4e0a\u4ee5\u53ca7\u6b21\u5411\u53f3\u7684\u79fb\u52a8\u3002\u4ece\u5341\u56db\u6b65\u4e2d\uff0c\u9009\u62e97\u6b65\u4e3a\u5411\u4e0a\u79fb\u52a8\uff0c\u90a3\u5269\u4e0b\u76847\u6b65\u5fc5\u7136\u662f\u5411\u53f3\u79fb\u52a8\u4e86\u3002\u6240\u4ee5\u4e0d\u540c\u8def\u5f84\u6570\u4e3aC\uff0814,7\uff09\u3002 3432 \u79cd 2. \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u91cc\u9762\u76f4\u63a5\u4f7f\u7528memset(this,0,sizeof(*this));\u8bed\u53e5\u6765\u521d\u59cb\u5316\u6574\u4e2a\u7c7b\uff0c\u95ee \uff081\uff09 \u8fd9\u79cd\u5199\u6cd5\uff0c\u4f1a\u6709\u54ea\u4e9b\u5f0a\u7aef\uff1f \uff082\uff09 \u5177\u5907\u4f55\u79cd\u7279\u6027\u7684\u7c7b\u53ef\u4ee5\u91c7\u7528\u8fd9\u79cd\u5199\u6cd5\uff1f (1)\u5f53\u6709\u865a\u51fd\u6570\u7684\u65f6\u5019\uff0c \u865a\u51fd\u6570\u8868\u6307\u9488\u4f1a\u88ab\u7f6e\u6210\u7a7a (2)\u6ca1\u6709\u865a\u51fd\u6570\u7684\u7c7b\uff0c\u53ef\u4ee5\u8fd9\u4e9b\u5199\u3002","title":"\u5237\u7b14\u8bd5\u98982"},{"location":"%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/input_checked_%E5%85%A8%E9%80%89/","text":"<!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title ></ title > </ head > < body > < div > < input type = \"checkbox\" class = \"check-all\" /> \u5168\u9009 < br /> < input type = \"checkbox\" class = \"check-one\" /> < input type = \"checkbox\" class = \"check-one\" /> < input type = \"checkbox\" class = \"check-one\" /> < input type = \"checkbox\" class = \"check-one\" /> < input type = \"checkbox\" class = \"check-one\" /> < input type = \"checkbox\" class = \"check-one\" />< br /> < input type = \"checkbox\" class = \"check-all\" /> \u5168\u9009 < br />< br />< br />< br /> </ div > < script type = \"text/javascript\" src = 'http://libs.baidu.com/jquery/2.0.0/jquery.js' ></ script > < script > $ ( function (){ //check-all $ ( \".check-all\" ). click ( function (){ if ( $ ( this ). prop ( \"checked\" )){ $ ( \".check-one,.check-all\" ). prop ( \"checked\" , true ); } else { $ ( \".check-one,.check-all\" ). prop ( \"checked\" , false ); } }) //check-one $ ( \".check-one\" ). click ( function (){ var flag = 1 ; //\u9ed8\u8ba4\u5168\u9009\u72b6\u6001 $ ( \".check-one\" ). each ( function (){ if ( ! $ ( this ). prop ( \"checked\" )){ flag = 0 ; } }) if ( flag ){ $ ( \".check-all\" ). prop ( \"checked\" , true ); } else { $ ( \".check-all\" ). prop ( \"checked\" , false ); } }) }) </ script > </ body > </ html >","title":"input checked \u5168\u9009"},{"location":"%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E4%BD%BF%E7%94%A8scrollreveal%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/","text":"\u56fe\u7247\u61d2\u52a0\u8f7d \u00b6 <!DOCTYPE html> < html > < head > < script src = \"https://unpkg.com/scrollreveal@4\" ></ script > </ head > < body > < div class = \"headline\" > Widget, Inc. </ div > < script > ScrollReveal (). reveal ( '.headline' ); </ script > </ body > </ html > <\u5728\u7ebf\u6f14\u793a\uff1a https://jsbin.com/jufohaxonu/edit?html,output > \u7528\u4e00\u4e0b\u4f60\u5c31\u61c2\u4e86\uff01","title":"\u5b9e\u73b0\u56fe\u7247\u61d2\u52a0\u8f7d"},{"location":"%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E4%BD%BF%E7%94%A8scrollreveal%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/#_1","text":"<!DOCTYPE html> < html > < head > < script src = \"https://unpkg.com/scrollreveal@4\" ></ script > </ head > < body > < div class = \"headline\" > Widget, Inc. </ div > < script > ScrollReveal (). reveal ( '.headline' ); </ script > </ body > </ html > <\u5728\u7ebf\u6f14\u793a\uff1a https://jsbin.com/jufohaxonu/edit?html,output > \u7528\u4e00\u4e0b\u4f60\u5c31\u61c2\u4e86\uff01","title":"\u56fe\u7247\u61d2\u52a0\u8f7d"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/","text":"\u4e66\u5199, \u5e03\u5c40, \u547d\u540d \u00b6 \u4ee3\u7801\u5b8c\u6574\u6027 \u00b6 \u9762\u8bd5\u989816: \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u00b6 Question \u5b9e\u73b0\u51fd\u6570double power(double base, int expoent), \u6c42base\u7684exponent\u6b21\u65b9, \u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570, \u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898 Answer \u53c2\u8003\u4ee3\u7801: \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u9762\u8bd5\u989817: \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u00b6 Question Answer \u53c2\u8003\u4ee3\u7801: \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u53ef\u4ee5\u4f18\u5316 \u9762\u8bd5\u989818: \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 \u00b6 Question Answer struct Node { int value ; Node * next ; }; void DeleteNode ( Node ** pHead , Node * pToBeDelete ) { if ( pHead == nullptr || * pHead == nullptr || pToBeDelete == nullptr ) return ; Node * head = * pHead ; // \u53ea\u6709\u4e00\u4e2a\u8282\u70b9 if ( head -> next == nullptr ) { delete pToBeDelete ; * pHead = nullptr ; } // \u6709\u591a\u4e2a\u8282\u70b9 else { // \u5220\u9664\u5c3e\u8282\u70b9 if ( pToBeDelete -> next == nullptr ) { delete pToBeDelete ; head -> next = nullptr ; } // \u5220\u9664\u5934\u8282\u70b9 else if ( pToBeDelete == head ) { * pHead = head -> next ; delete head ; } else { Node * p = pToBeDelete -> next ; pToBeDelete -> value = pToBeDelete -> next -> value ; pToBeDelete -> next = pToBeDelete -> next -> next ; delete p ; } } } \u53c2\u8003\u4ee3\u7801: \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 \u9898\u76ee\u4e8c\uff1a \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u8282\u70b9 \u00b6 Question Answer struct Node { int value ; Node * next = nullptr ; }; void deleteDuplication ( Node ** pHead ) { if ( pHead == nullptr || * pHead == nullptr ) return ; Node * head = * pHead ; // \u53ea\u6709\u4e00\u4e2a\u8282\u70b9 if ( head -> next == nullptr ) return ; // \u4e24\u4e2a\u8282\u70b9 Node * preNode = head ; Node * curNode = head -> next ; if ( curNode -> next == nullptr ) { if ( curNode -> value == preNode -> value ) { head -> next = nullptr ; delete curNode ; return ; } } // \u591a\u4e2a\u8282\u70b9 while ( curNode -> next != nullptr ) { if ( preNode -> value == curNode -> value ) { Node * waitDelete = curNode -> next ; curNode -> value = curNode -> next -> value ; curNode -> next = curNode -> next -> next ; delete waitDelete ; } else { preNode = preNode -> next ; curNode = preNode -> next ; } } if ( preNode -> value == curNode -> value ) { preNode -> next = nullptr ; delete curNode ; } } \u53c2\u8003\u4ee3\u7801\uff1a \u5220\u9664\u6709\u5e8f\u94fe\u8868\u91cc\u91cd\u590d\u7684\u8282\u70b9 \u9762\u8bd5\u989819: \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u00b6 \u9762\u8bd5\u989820: \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 \u00b6 \u9762\u8bd5\u989821: \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 \u00b6 \u4ee3\u7801\u7684\u9c81\u68d2\u6027 \u00b6 \u9762\u8bd5\u989822: \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u00b6 struct Node { int value ; Node * next = nullptr ; }; Node * tailKNode ( Node ** pHead , int k ) { if ( pHead == nullptr || * pHead == nullptr || k <= 0 ) return nullptr ; Node * head = * pHead ; Node * preNode = head ; Node * kNode = preNode ; for ( int i = 0 ; i < k - 1 ; ++ i ) { kNode = kNode -> next ; if ( kNode == nullptr ) return nullptr ; } while ( kNode -> next != nullptr ) { preNode = preNode -> next ; kNode = kNode -> next ; } return preNode ; } \u53c2\u8003\u4ee3\u7801\uff1a \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u9762\u8bd5\u989823: \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9 \u00b6 struct Node { int value ; Node * next = nullptr ; }; Node * linkListCircleStartNode ( Node ** pHead ) { if ( pHead == nullptr || * pHead == nullptr ) return nullptr ; Node * head = * pHead ; if ( head -> next == nullptr || head -> next -> next == nullptr ) return nullptr ; // \u5224\u65ad\u662f\u5426\u5b58\u5728\u73af Node * p1 = head -> next ; Node * p2 = head -> next -> next ; while ( p1 != nullptr && p2 != nullptr && p1 != p2 ) { p1 = p1 -> next ; p2 = p2 -> next -> next ; } if ( p1 == nullptr ) // \u4e0d\u5b58\u5728\u73af return nullptr ; // \u5224\u65ad\u73af\u7684\u957f\u5ea6 int circleLength = 1 ; p1 = p1 -> next ; while ( p1 != p2 ) { p1 = p1 -> next ; circleLength ++ ; } // \u518d\u5229\u7528\u4e24\u4e2a\u6307\u9488\u627e\u5230\u73af\u7684\u5165\u53e3 Node * pBefore = head ; Node * pAfter = head ; for ( int i = 0 ; i < circleLength ; ++ i ) pAfter = pAfter -> next ; while ( pBefore != pAfter ) { pBefore = pBefore -> next ; pAfter = pAfter -> next ; } return pBefore ; } \u5b8c\u6574\u4ee3\u7801\uff1a \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9 \u9762\u8bd5\u989824: \u53cd\u8f6c\u94fe\u8868 \u00b6 struct Node { int value ; Node * next = nullptr ; }; Node * LinkListReversed ( Node ** pHead ) { if ( pHead == nullptr || * pHead == nullptr ) return nullptr ; Node * head = * pHead ; // \u53ea\u6709\u4e00\u4e2a\u5934\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de if ( head -> next == nullptr ) return head ; Node * preNode = head ; Node * curNode = head -> next ; Node * tempNode = curNode -> next ; // \u53ea\u6709\u4e24\u4e2a\u8282\u70b9 if ( curNode -> next == nullptr ) { curNode -> next = head ; head -> next = nullptr ; return curNode ; } while ( curNode != nullptr ) { curNode -> next = preNode ; if ( preNode == head ) preNode -> next = nullptr ; preNode = curNode ; curNode = tempNode ; if ( curNode == nullptr ) return preNode ; tempNode = curNode -> next ; } return nullptr ; } \u5b8c\u6574\u4ee3\u7801\uff1a \u53cd\u8f6c\u94fe\u8868 \u9762\u8bd5\u989825: \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868 \u00b6 struct Node { int value ; Node * next = nullptr ; }; Node * mergeSortedLinkList ( Node ** pHead1 , Node ** pHead2 ) { if ( pHead1 == nullptr && pHead2 == nullptr ) return nullptr ; if ( * pHead1 == nullptr ) return * pHead2 ; if ( * pHead2 == nullptr ) return * pHead1 ; Node * head1 = * pHead1 ; Node * head2 = * pHead2 ; Node * resultHead = nullptr ; Node * resultCurNode = nullptr ; while ( head1 != nullptr && head2 != nullptr ) { Node * node = new Node ; if ( head1 -> value < head2 -> value ) { node -> value = head1 -> value ; head1 = head1 -> next ; } else { node -> value = head2 -> value ; head2 = head2 -> next ; } if ( resultHead == nullptr ) { resultHead = node ; resultCurNode = node ; } else { resultCurNode -> next = node ; resultCurNode = node ; } } while ( head1 != nullptr ) { Node * node = new Node ; node -> value = head1 -> value ; resultCurNode -> next = node ; resultCurNode = node ; head1 = head1 -> next ; } while ( head2 != nullptr ) { Node * node = new Node ; node -> value = head2 -> value ; resultCurNode -> next = node ; resultCurNode = node ; head2 = head1 -> next ; } return resultHead ; } \u53c2\u8003\u4ee3\u7801: \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868 \u9762\u8bd5\u989826: \u6811\u7684\u5b50\u7ed3\u6784 \u00b6 struct Node { double value ; Node * left = nullptr ; Node * right = nullptr ; }; bool equal ( double num1 , double num2 ) bool hasSubTree ( Node * pRoot1 , Node * pRoot2 ) { bool result = false ; if ( pRoot1 != nullptr && pRoot2 != nullptr ) { if ( equal ( pRoot1 -> value , pRoot2 -> value )) result = doesTree1HaveTree2 ( pRoot1 , pRoot2 ) if ( ! result ) result = hasSubTree ( pRoot1 -> left , pRoot2 ); if ( ! result ) result = hasSubTree ( pRoot1 -> right , pRoot2 ); } return result ; } bool doesTree1HaveTree2 ( Node * pNode1 , Node * pNode2 ) { if ( pNode2 == nullptr ) return true ; if ( pNode1 == nullptr ) return false ; if ( ! equal ( pNode1 -> value , pNode2 -> value )) return false return doesTree1HaveTree2 ( pNode1 -> left , pRoot2 -> left ) && doesTree1HaveTree2 ( pNode1 -> right , pRoot2 -> right ) } bool equal ( double num1 , double num2 ) { if ( num1 - num2 > -0.000001 && num1 - num2 < 0.000001 ) return true ; return false ; } \u53c2\u8003\u4ee3\u7801: \u6811\u7684\u5b50\u7ed3\u6784","title":"5. \u4e66\u5199\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#_1","text":"","title":"\u4e66\u5199, \u5e03\u5c40, \u547d\u540d"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#_2","text":"","title":"\u4ee3\u7801\u5b8c\u6574\u6027"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#16","text":"Question \u5b9e\u73b0\u51fd\u6570double power(double base, int expoent), \u6c42base\u7684exponent\u6b21\u65b9, \u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570, \u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898 Answer \u53c2\u8003\u4ee3\u7801: \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9","title":"\u9762\u8bd5\u989816: \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#17-1n","text":"Question Answer \u53c2\u8003\u4ee3\u7801: \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u53ef\u4ee5\u4f18\u5316","title":"\u9762\u8bd5\u989817: \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#18","text":"Question Answer struct Node { int value ; Node * next ; }; void DeleteNode ( Node ** pHead , Node * pToBeDelete ) { if ( pHead == nullptr || * pHead == nullptr || pToBeDelete == nullptr ) return ; Node * head = * pHead ; // \u53ea\u6709\u4e00\u4e2a\u8282\u70b9 if ( head -> next == nullptr ) { delete pToBeDelete ; * pHead = nullptr ; } // \u6709\u591a\u4e2a\u8282\u70b9 else { // \u5220\u9664\u5c3e\u8282\u70b9 if ( pToBeDelete -> next == nullptr ) { delete pToBeDelete ; head -> next = nullptr ; } // \u5220\u9664\u5934\u8282\u70b9 else if ( pToBeDelete == head ) { * pHead = head -> next ; delete head ; } else { Node * p = pToBeDelete -> next ; pToBeDelete -> value = pToBeDelete -> next -> value ; pToBeDelete -> next = pToBeDelete -> next -> next ; delete p ; } } } \u53c2\u8003\u4ee3\u7801: \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9","title":"\u9762\u8bd5\u989818: \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#_3","text":"Question Answer struct Node { int value ; Node * next = nullptr ; }; void deleteDuplication ( Node ** pHead ) { if ( pHead == nullptr || * pHead == nullptr ) return ; Node * head = * pHead ; // \u53ea\u6709\u4e00\u4e2a\u8282\u70b9 if ( head -> next == nullptr ) return ; // \u4e24\u4e2a\u8282\u70b9 Node * preNode = head ; Node * curNode = head -> next ; if ( curNode -> next == nullptr ) { if ( curNode -> value == preNode -> value ) { head -> next = nullptr ; delete curNode ; return ; } } // \u591a\u4e2a\u8282\u70b9 while ( curNode -> next != nullptr ) { if ( preNode -> value == curNode -> value ) { Node * waitDelete = curNode -> next ; curNode -> value = curNode -> next -> value ; curNode -> next = curNode -> next -> next ; delete waitDelete ; } else { preNode = preNode -> next ; curNode = preNode -> next ; } } if ( preNode -> value == curNode -> value ) { preNode -> next = nullptr ; delete curNode ; } } \u53c2\u8003\u4ee3\u7801\uff1a \u5220\u9664\u6709\u5e8f\u94fe\u8868\u91cc\u91cd\u590d\u7684\u8282\u70b9","title":"\u9898\u76ee\u4e8c\uff1a \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u8282\u70b9"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#19","text":"","title":"\u9762\u8bd5\u989819: \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#20","text":"","title":"\u9762\u8bd5\u989820: \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#21","text":"","title":"\u9762\u8bd5\u989821: \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#_4","text":"","title":"\u4ee3\u7801\u7684\u9c81\u68d2\u6027"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#22-k","text":"struct Node { int value ; Node * next = nullptr ; }; Node * tailKNode ( Node ** pHead , int k ) { if ( pHead == nullptr || * pHead == nullptr || k <= 0 ) return nullptr ; Node * head = * pHead ; Node * preNode = head ; Node * kNode = preNode ; for ( int i = 0 ; i < k - 1 ; ++ i ) { kNode = kNode -> next ; if ( kNode == nullptr ) return nullptr ; } while ( kNode -> next != nullptr ) { preNode = preNode -> next ; kNode = kNode -> next ; } return preNode ; } \u53c2\u8003\u4ee3\u7801\uff1a \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9","title":"\u9762\u8bd5\u989822: \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#23","text":"struct Node { int value ; Node * next = nullptr ; }; Node * linkListCircleStartNode ( Node ** pHead ) { if ( pHead == nullptr || * pHead == nullptr ) return nullptr ; Node * head = * pHead ; if ( head -> next == nullptr || head -> next -> next == nullptr ) return nullptr ; // \u5224\u65ad\u662f\u5426\u5b58\u5728\u73af Node * p1 = head -> next ; Node * p2 = head -> next -> next ; while ( p1 != nullptr && p2 != nullptr && p1 != p2 ) { p1 = p1 -> next ; p2 = p2 -> next -> next ; } if ( p1 == nullptr ) // \u4e0d\u5b58\u5728\u73af return nullptr ; // \u5224\u65ad\u73af\u7684\u957f\u5ea6 int circleLength = 1 ; p1 = p1 -> next ; while ( p1 != p2 ) { p1 = p1 -> next ; circleLength ++ ; } // \u518d\u5229\u7528\u4e24\u4e2a\u6307\u9488\u627e\u5230\u73af\u7684\u5165\u53e3 Node * pBefore = head ; Node * pAfter = head ; for ( int i = 0 ; i < circleLength ; ++ i ) pAfter = pAfter -> next ; while ( pBefore != pAfter ) { pBefore = pBefore -> next ; pAfter = pAfter -> next ; } return pBefore ; } \u5b8c\u6574\u4ee3\u7801\uff1a \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9","title":"\u9762\u8bd5\u989823: \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#24","text":"struct Node { int value ; Node * next = nullptr ; }; Node * LinkListReversed ( Node ** pHead ) { if ( pHead == nullptr || * pHead == nullptr ) return nullptr ; Node * head = * pHead ; // \u53ea\u6709\u4e00\u4e2a\u5934\u8282\u70b9\uff0c\u76f4\u63a5\u8fd4\u56de if ( head -> next == nullptr ) return head ; Node * preNode = head ; Node * curNode = head -> next ; Node * tempNode = curNode -> next ; // \u53ea\u6709\u4e24\u4e2a\u8282\u70b9 if ( curNode -> next == nullptr ) { curNode -> next = head ; head -> next = nullptr ; return curNode ; } while ( curNode != nullptr ) { curNode -> next = preNode ; if ( preNode == head ) preNode -> next = nullptr ; preNode = curNode ; curNode = tempNode ; if ( curNode == nullptr ) return preNode ; tempNode = curNode -> next ; } return nullptr ; } \u5b8c\u6574\u4ee3\u7801\uff1a \u53cd\u8f6c\u94fe\u8868","title":"\u9762\u8bd5\u989824: \u53cd\u8f6c\u94fe\u8868"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#25","text":"struct Node { int value ; Node * next = nullptr ; }; Node * mergeSortedLinkList ( Node ** pHead1 , Node ** pHead2 ) { if ( pHead1 == nullptr && pHead2 == nullptr ) return nullptr ; if ( * pHead1 == nullptr ) return * pHead2 ; if ( * pHead2 == nullptr ) return * pHead1 ; Node * head1 = * pHead1 ; Node * head2 = * pHead2 ; Node * resultHead = nullptr ; Node * resultCurNode = nullptr ; while ( head1 != nullptr && head2 != nullptr ) { Node * node = new Node ; if ( head1 -> value < head2 -> value ) { node -> value = head1 -> value ; head1 = head1 -> next ; } else { node -> value = head2 -> value ; head2 = head2 -> next ; } if ( resultHead == nullptr ) { resultHead = node ; resultCurNode = node ; } else { resultCurNode -> next = node ; resultCurNode = node ; } } while ( head1 != nullptr ) { Node * node = new Node ; node -> value = head1 -> value ; resultCurNode -> next = node ; resultCurNode = node ; head1 = head1 -> next ; } while ( head2 != nullptr ) { Node * node = new Node ; node -> value = head2 -> value ; resultCurNode -> next = node ; resultCurNode = node ; head2 = head1 -> next ; } return resultHead ; } \u53c2\u8003\u4ee3\u7801: \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868","title":"\u9762\u8bd5\u989825: \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868"},{"location":"%E5%89%91%E6%8C%87offer/%E4%B9%A6%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81/#26","text":"struct Node { double value ; Node * left = nullptr ; Node * right = nullptr ; }; bool equal ( double num1 , double num2 ) bool hasSubTree ( Node * pRoot1 , Node * pRoot2 ) { bool result = false ; if ( pRoot1 != nullptr && pRoot2 != nullptr ) { if ( equal ( pRoot1 -> value , pRoot2 -> value )) result = doesTree1HaveTree2 ( pRoot1 , pRoot2 ) if ( ! result ) result = hasSubTree ( pRoot1 -> left , pRoot2 ); if ( ! result ) result = hasSubTree ( pRoot1 -> right , pRoot2 ); } return result ; } bool doesTree1HaveTree2 ( Node * pNode1 , Node * pNode2 ) { if ( pNode2 == nullptr ) return true ; if ( pNode1 == nullptr ) return false ; if ( ! equal ( pNode1 -> value , pNode2 -> value )) return false return doesTree1HaveTree2 ( pNode1 -> left , pRoot2 -> left ) && doesTree1HaveTree2 ( pNode1 -> right , pRoot2 -> right ) } bool equal ( double num1 , double num2 ) { if ( num1 - num2 > -0.000001 && num1 - num2 < 0.000001 ) return true ; return false ; } \u53c2\u8003\u4ee3\u7801: \u6811\u7684\u5b50\u7ed3\u6784","title":"\u9762\u8bd5\u989826: \u6811\u7684\u5b50\u7ed3\u6784"},{"location":"%E5%89%91%E6%8C%87offer/%E4%BD%8D%E8%BF%90%E7%AE%97/","text":"\u4f4d\u8fd0\u7b97\u662f\u628a\u6570\u5b57\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u4e4b\u540e, \u5bf9\u6bcf\u4e00\u4f4d\u4e0a0\u6216\u80051\u7684\u8fd0\u7b97; \u4e8c\u8fdb\u5236\u53ca\u5176\u4f4d\u8fd0\u7b97\u662f\u73b0\u4ee3\u8ba1\u7b97\u673a\u5b66\u79d1\u7684\u57fa\u77f3, \u5f88\u591a\u5e95\u5c42\u7684\u6280\u672f\u90fd\u79bb\u4e0d\u5f00\u4f4d\u8fd0\u7b97, \u56e0\u6b64\u4e0e\u4f4d\u8fd0\u7b97\u76f8\u5173\u7684\u9898\u76ee\u4e5f\u7ecf\u5e38\u51fa\u73b0\u5728\u9762\u8bd5\u4e2d \u7406\u89e3\u4f4d\u8fd0\u7b97\u7684\u7b2c\u4e00\u6b65\u662f\u7406\u89e3\u4e8c\u8fdb\u5236; \u4e8c\u8fdb\u5236\u662f\u6307\u6570\u5b57\u7684\u6bcf\u4e00\u4f4d\u90fd\u662f0\u62161, \u6bd4\u5982\u5341\u8fdb\u5236\u76842\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5c31\u662f10, \u800c\u5341\u8fdb\u5236\u768410\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u8f6c\u6362\u662f1010 \u9664\u4e86\u4e8c\u8fdb\u5236, \u6211\u4eec\u8fd8\u53ef\u4ee5\u628a\u6570\u5b57\u8868\u793a\u6210\u5176\u4ed6\u8fdb\u5236, \u6bd4\u5982\u8868\u793a\u65f6\u95f4\u5206\u79d2\u7684\u516d\u5341\u8fdb\u5236\u7b49, \u9488\u5bf9\u4e0d\u592a\u719f\u6089\u7684\u8fdb\u5236, \u5df2\u7ecf\u51fa\u73b0\u4e86\u4e0d\u5c11\u5f88\u6709\u610f\u601d\u7684\u9762\u8bd5\u9898 Question \u5728\u5fae\u8f6f\u7684excel\u4ea7\u54c1\u79cd, \u7528A\u8868\u793a\u7b2c1\u5217, B \u8868\u793a\u7b2c\u4e8c\u5217, ... , Z\u8868\u793a\u7b2c26\u5217, AA\u8868\u793a27\u5217, AB\u8868\u793a28\u5217, ... \u4ee5\u6b64\u7c7b\u63a8, \u8bf7\u5199\u4e00\u4e2a\u51fd\u6570, \u8f93\u5165\u7528\u5b57\u6bcd\u8868\u793a\u7684\u5e8f\u5217\u7f16\u7801, \u8f93\u51fa\u5b83\u662f\u7b2c\u51e0\u5217 Tip \u8fd9\u662f\u4e00\u9053\u5f88\u65b0\u9896\u7684\u5173\u4e8e\u8fdb\u5236\u7684\u9898\u76ee, \u5176\u672c\u8d28\u662f\u628a\u5341\u8fdb\u5236\u6570\u5b57\u7528A~Z \u8868\u793a\u6210\u4e8c\u5341\u516d\u8fdb\u5236, \u5982\u679c\u60f3\u5230\u8fd9\u4e00\u70b9, \u8fd9\u9053\u9898\u5c31\u4e0d\u96be\u4e86 Answer \u53c2\u8003\u4ee3\u7801: excel \u7f16\u53f7\u7b2c\u51e0\u5217 \u5176\u5b9e\u638c\u63e1\u4e8c\u8fdb\u5236\u7684\u4f4d\u8fd0\u7b97\u5e76\u4e0d\u662f\u5f88\u96be\u638c\u63e1, \u56e0\u4e3a\u4f4d\u8fd0\u7b97\u603b\u5171\u53ea\u67095\u79cd\u8fd0\u7b97: \u4e0e, \u6216, \u5f02\u6216, \u5de6\u79fb, \u53f3\u79fb; \u9762\u8bd5\u989815: \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u00b6 Question \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570, \u8f93\u5165\u4e00\u4e2a\u6574\u6570, \u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570, \u4f8b\u5982, \u628a9\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u662f1001, \u67092\u4f4d\u662f1, \u56e0\u6b64, \u5982\u679c\u8f93\u51659, \u5219\u8be5\u51fd\u6570\u8f93\u51652; Answer \u53c2\u8003\u4ee3\u7801: \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u4f4d\u8fd0\u7b97: http://yiouejv.com/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/","title":"4.5 \u4f4d\u8fd0\u7b97"},{"location":"%E5%89%91%E6%8C%87offer/%E4%BD%8D%E8%BF%90%E7%AE%97/#15-1","text":"Question \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570, \u8f93\u5165\u4e00\u4e2a\u6574\u6570, \u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570, \u4f8b\u5982, \u628a9\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u662f1001, \u67092\u4f4d\u662f1, \u56e0\u6b64, \u5982\u679c\u8f93\u51659, \u5219\u8be5\u51fd\u6570\u8f93\u51652; Answer \u53c2\u8003\u4ee3\u7801: \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u4f4d\u8fd0\u7b97: http://yiouejv.com/%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/","title":"\u9762\u8bd5\u989815: \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"%E5%89%91%E6%8C%87offer/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/","text":"\u52a8\u6001\u89c4\u5212\u73b0\u5728\u662f\u7f16\u7a0b\u9762\u8bd5\u4e2d\u7684\u70ed\u95e8\u8bdd\u9898\u3002 \u5982\u679c\u9762\u8bd5\u9898\u662f\u6c42\u4e00\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff08\u901a\u5e38\u662f\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c\uff09\uff0c\u800c\u4e14\u8be5\u95ee\u9898\u80fd\u591f\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5b50\u95ee\u9898\uff0c\u5e76\u4e14\u5b50\u95ee\u9898\u4e4b\u95f4\u8fd8\u6709\u91cd\u53e0\u7684\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u5728\u5e94\u7528\u52a8\u6001\u89c4\u5212\u4e4b\u524d\u8981\u5206\u6790\u80fd\u5426\u628a\u5927\u95ee\u9898\u5206\u89e3\u6210\u5c0f\u95ee\u9898\uff0c\u5206\u89e3\u540e\u7684\u6bcf\u4e2a\u5c0f\u95ee\u9898\u4e5f\u5b58\u5728\u6700\u4f18\u89e3\uff0c\u5982\u679c\u628a\u5c0f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7ec4\u5408\u8d77\u6765\u80fd\u591f\u5f97\u5230\u6574\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u52a8\u6001\u89c4\u5212\u76844\u4e2a\u7279\u70b9 \u00b6 \u4f8b\u5982\u5728\u9762\u8bd5\u989814\u4e2d\uff0c\u6211\u4eec\u5982\u4f55\u628a\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\uff0c\u4f7f\u5f97\u5f97\u5230\u5404\u6bb5\u957f\u5ea6\u7684\u4e58\u79ef\u6700\u5927\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u76ee\u6807\u662f\u6c42\u526a\u51fa\u7684\u5404\u6bb5\u7ef3\u5b50\u957f\u5ea6\u7684\u4e58\u79ef\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u662f \u6c42\u4e00\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3 \uff0c\u8fd9\u662f\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u95ee\u9898\u7684\u7b2c\u4e00\u4e2a\u7279\u70b9\u3002 \u6211\u4eec\u628a\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u5f97\u5230\u7684\u4e58\u79ef\u6700\u5927\u503c\u5b9a\u4e49\u4e3a\u51fd\u6570f(n); \u5047\u8bbe\u6211\u4eec\u628a\u7b2c\u4e00\u5200\u526a\u5728\u957f\u5ea6\u4e3ai (0 < i < n) \u7684\u4f4d\u7f6e\uff0c\u4e8e\u662f\u628a\u7ef3\u5b50\u526a\u6210\u4e86\u957f\u5ea6\u5206\u522b\u4e3a i \u548c n - i \u7684\u4e24\u6bb5\u3002 \u6211\u4eec\u8981\u60f3\u5f97\u5230\u6574\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3 f(n), \u90a3\u4e48\u8981\u540c\u6837\u7528\u6700\u4f18\u89e3\u7684\u65b9\u6cd5\u628a\u957f\u5ea6\u4e3ai\u548cn-i \u7684\u4e24\u6bb5\u5206\u6210\u526a\u6210\u82e5\u5e72\u6bb5\uff0c\u4f7f\u5f97\u5b83\u4eec\u5404\u81ea\u526a\u51fa\u7684\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u4e58\u79ef\u6700\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4 \u6574\u4f53\u95ee\u9898\u7684\u6700\u4f18\u89e3\u662f\u4f9d\u8d56\u5404\u4e2a\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3 \uff0c\u8fd9\u662f\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u7684\u95ee\u9898\u7684\u7b2c\u4e8c\u4e2a\u7279\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u5927\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5c0f\u95ee\u9898\uff0c\u8fd9\u4e9b\u5c0f\u95ee\u9898\u4e4b\u95f4\u8fd8\u6709\u76f8\u4e92\u91cd\u53e0\u7684\u66f4\u5c0f\u5b50\u95ee\u9898\u3002 \u7531\u4e8e\u5b50\u95ee\u9898\u5728\u5206\u89e3\u5927\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\u91cd\u590d\u51fa\u73b0\uff0c\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4ece\u4e0b\u5f80\u4e0a\u7684\u987a\u5e8f\u5148\u8ba1\u7b97\u5c0f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u5e76\u5b58\u50a8\u4e0b\u6765\uff0c\u518d\u4ee5\u6b64\u4e3a\u57fa\u7840\u6c42\u53d6\u5927\u95ee\u9898\u7684\u6700\u4f18\u89e3, \u4ece\u4e0b\u5f80\u4e0a\u6c42\u89e3\u95ee\u9898 , \u8fd9\u662f\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u95ee\u9898\u7684\u7b2c\u56db\u4e2a\u7279\u70b9. \u8d2a\u5a6a\u7b97\u6cd5 \u00b6 \u5f53\u6211\u4eec\u5e94\u7528\u8d2a\u5a6a\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019, \u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u505a\u51fa\u4e00\u4e2a\u8d2a\u5a6a\u7684\u9009\u62e9, \u57fa\u4e8e\u8fd9\u4e2a\u9009\u62e9, \u6211\u4eec\u786e\u5b9a\u80fd\u591f\u5f97\u5230\u6700\u4f18\u89e3. \u9762\u8bd5\u989814: \u526a\u7ef3\u5b50 \u00b6 Question \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3an \u7684\u7ef3\u5b50, \u8bf7\u628a\u7ef3\u5b50\u526a\u6210m \u6bb5(m, n, \u90fd\u662f\u6574\u6570, n > 1, m > 1), \u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3ak[0], k[1], ... k[m], \u8bf7\u95eek[0]*k[1]*...*k[m]\u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11? \u4f8b\u5982, \u5f53\u7ef3\u5b50\u957f\u5ea6\u4e3a8\u65f6, \u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a2, 3, 3\u7684\u4e09\u6bb5, \u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u4e3a18. Tip \u89e3\u6cd51: \u52a8\u6001\u89c4\u5212 \u9996\u5148\u5b9a\u4e49\u51fd\u6570f(n)\u4e3a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c, \u5728\u526a\u7b2c\u4e00\u5200\u7684\u65f6\u5019, \u6211\u4eec\u6709n - 1 \u79cd\u9009\u62e9, \u4e5f\u5c31\u662f\u526a\u51fa\u6765\u7684\u7b2c\u4e00\u6bb5\u7ef3\u5b50\u7684\u53ef\u80fd\u957f\u5ea6\u5206\u522b\u4e3a, 1, 2, ... n - 1, \u56e0\u6b64 f(n) = max(f(i) * f(n - i)) \u5176\u4e2d 0 < i < n. \u8fd9\u662f\u4e00\u4e2a\u4ece\u4e0a\u81f3\u4e0b\u7684\u9012\u5f52\u516c\u5f0f, \u7531\u4e8e\u9012\u5f52\u4f1a\u6709\u5f88\u591a\u91cd\u590d\u7684\u5b50\u95ee\u9898, \u4ece\u800c\u6709\u5927\u91cf\u4e0d\u5fc5\u8981\u7684\u91cd\u590d\u8ba1\u7b97, \u4e00\u4e2a\u66f4\u597d\u7684\u529e\u6cd5\u5c31\u662f\u6309\u7167\u4ece\u4e0b\u800c\u4e0a\u7684\u987a\u5e8f\u8ba1\u7b97, \u4e5f\u5c31\u662f\u6211\u4eec\u5148\u5f97\u5230f(2), f(3), \u518d\u5f97\u5230f(4), f(5), \u76f4\u5230\u5f97\u5230f(n); \u5f53\u7ef3\u5b50\u957f\u5ea6\u4e3a2\u65f6, \u53ea\u53ef\u80fd\u526a\u6210\u957f\u5ea6\u90fd\u4e3a1\u7684\u4e24\u6bb5, \u56e0\u6b64f(2) \u7b49\u4e8e1, \u5f53\u7ef3\u5b50\u957f\u5ea6\u4e3a3\u65f6, \u53ef\u80fd\u628a\u7ef3\u5b50\u526a\u6210\u957f\u5ea6\u4e3a1,2\u7684\u4e24\u6bb5\u6216\u8005\u957f\u5ea6\u90fd\u4e3a1\u7684\u4e09\u6bb5, \u7531\u4e8e1*2 > 1*1*1, \u56e0\u6b64f(3) = 2 Answer \u89e3\u6cd51: int getCutLineMultiMax ( int length ) { if ( length < 2 ) return 0 ; if ( length == 2 ) return 1 ; if ( length == 3 ) return 2 ; int * products = new int [ length + 1 ]; memset ( products , 0 , ( length + 1 ) * sizeof ( 4 )); products [ 0 ] = 0 ; products [ 1 ] = 1 ; products [ 2 ] = 2 ; products [ 3 ] = 3 ; for ( int i = 4 ; i <= length ; i ++ ) { for ( int j = 1 ; j <= i / 2 ; j ++ ) { int product = products [ j ] * products [ i - j ]; if ( product > products [ i ]) { products [ i ] = product ; } } } int res = products [ length ]; delete [] products ; return res ; } \u5b8c\u6574\u4ee3\u7801: \u526a\u7ef3\u5b50","title":"4.4 \u52a8\u6001\u89c4\u5212\u4e0e\u8d2a\u5a6a\u7b97\u6cd5"},{"location":"%E5%89%91%E6%8C%87offer/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/#4","text":"\u4f8b\u5982\u5728\u9762\u8bd5\u989814\u4e2d\uff0c\u6211\u4eec\u5982\u4f55\u628a\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\uff0c\u4f7f\u5f97\u5f97\u5230\u5404\u6bb5\u957f\u5ea6\u7684\u4e58\u79ef\u6700\u5927\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u76ee\u6807\u662f\u6c42\u526a\u51fa\u7684\u5404\u6bb5\u7ef3\u5b50\u957f\u5ea6\u7684\u4e58\u79ef\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u662f \u6c42\u4e00\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3 \uff0c\u8fd9\u662f\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u95ee\u9898\u7684\u7b2c\u4e00\u4e2a\u7279\u70b9\u3002 \u6211\u4eec\u628a\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u5f97\u5230\u7684\u4e58\u79ef\u6700\u5927\u503c\u5b9a\u4e49\u4e3a\u51fd\u6570f(n); \u5047\u8bbe\u6211\u4eec\u628a\u7b2c\u4e00\u5200\u526a\u5728\u957f\u5ea6\u4e3ai (0 < i < n) \u7684\u4f4d\u7f6e\uff0c\u4e8e\u662f\u628a\u7ef3\u5b50\u526a\u6210\u4e86\u957f\u5ea6\u5206\u522b\u4e3a i \u548c n - i \u7684\u4e24\u6bb5\u3002 \u6211\u4eec\u8981\u60f3\u5f97\u5230\u6574\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3 f(n), \u90a3\u4e48\u8981\u540c\u6837\u7528\u6700\u4f18\u89e3\u7684\u65b9\u6cd5\u628a\u957f\u5ea6\u4e3ai\u548cn-i \u7684\u4e24\u6bb5\u5206\u6210\u526a\u6210\u82e5\u5e72\u6bb5\uff0c\u4f7f\u5f97\u5b83\u4eec\u5404\u81ea\u526a\u51fa\u7684\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u4e58\u79ef\u6700\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4 \u6574\u4f53\u95ee\u9898\u7684\u6700\u4f18\u89e3\u662f\u4f9d\u8d56\u5404\u4e2a\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3 \uff0c\u8fd9\u662f\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u7684\u95ee\u9898\u7684\u7b2c\u4e8c\u4e2a\u7279\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u5927\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u5c0f\u95ee\u9898\uff0c\u8fd9\u4e9b\u5c0f\u95ee\u9898\u4e4b\u95f4\u8fd8\u6709\u76f8\u4e92\u91cd\u53e0\u7684\u66f4\u5c0f\u5b50\u95ee\u9898\u3002 \u7531\u4e8e\u5b50\u95ee\u9898\u5728\u5206\u89e3\u5927\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\u91cd\u590d\u51fa\u73b0\uff0c\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4ece\u4e0b\u5f80\u4e0a\u7684\u987a\u5e8f\u5148\u8ba1\u7b97\u5c0f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u5e76\u5b58\u50a8\u4e0b\u6765\uff0c\u518d\u4ee5\u6b64\u4e3a\u57fa\u7840\u6c42\u53d6\u5927\u95ee\u9898\u7684\u6700\u4f18\u89e3, \u4ece\u4e0b\u5f80\u4e0a\u6c42\u89e3\u95ee\u9898 , \u8fd9\u662f\u53ef\u4ee5\u5e94\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u95ee\u9898\u7684\u7b2c\u56db\u4e2a\u7279\u70b9.","title":"\u52a8\u6001\u89c4\u5212\u76844\u4e2a\u7279\u70b9"},{"location":"%E5%89%91%E6%8C%87offer/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/#_1","text":"\u5f53\u6211\u4eec\u5e94\u7528\u8d2a\u5a6a\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019, \u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u505a\u51fa\u4e00\u4e2a\u8d2a\u5a6a\u7684\u9009\u62e9, \u57fa\u4e8e\u8fd9\u4e2a\u9009\u62e9, \u6211\u4eec\u786e\u5b9a\u80fd\u591f\u5f97\u5230\u6700\u4f18\u89e3.","title":"\u8d2a\u5a6a\u7b97\u6cd5"},{"location":"%E5%89%91%E6%8C%87offer/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95/#14","text":"Question \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3an \u7684\u7ef3\u5b50, \u8bf7\u628a\u7ef3\u5b50\u526a\u6210m \u6bb5(m, n, \u90fd\u662f\u6574\u6570, n > 1, m > 1), \u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3ak[0], k[1], ... k[m], \u8bf7\u95eek[0]*k[1]*...*k[m]\u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11? \u4f8b\u5982, \u5f53\u7ef3\u5b50\u957f\u5ea6\u4e3a8\u65f6, \u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a2, 3, 3\u7684\u4e09\u6bb5, \u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u4e3a18. Tip \u89e3\u6cd51: \u52a8\u6001\u89c4\u5212 \u9996\u5148\u5b9a\u4e49\u51fd\u6570f(n)\u4e3a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c, \u5728\u526a\u7b2c\u4e00\u5200\u7684\u65f6\u5019, \u6211\u4eec\u6709n - 1 \u79cd\u9009\u62e9, \u4e5f\u5c31\u662f\u526a\u51fa\u6765\u7684\u7b2c\u4e00\u6bb5\u7ef3\u5b50\u7684\u53ef\u80fd\u957f\u5ea6\u5206\u522b\u4e3a, 1, 2, ... n - 1, \u56e0\u6b64 f(n) = max(f(i) * f(n - i)) \u5176\u4e2d 0 < i < n. \u8fd9\u662f\u4e00\u4e2a\u4ece\u4e0a\u81f3\u4e0b\u7684\u9012\u5f52\u516c\u5f0f, \u7531\u4e8e\u9012\u5f52\u4f1a\u6709\u5f88\u591a\u91cd\u590d\u7684\u5b50\u95ee\u9898, \u4ece\u800c\u6709\u5927\u91cf\u4e0d\u5fc5\u8981\u7684\u91cd\u590d\u8ba1\u7b97, \u4e00\u4e2a\u66f4\u597d\u7684\u529e\u6cd5\u5c31\u662f\u6309\u7167\u4ece\u4e0b\u800c\u4e0a\u7684\u987a\u5e8f\u8ba1\u7b97, \u4e5f\u5c31\u662f\u6211\u4eec\u5148\u5f97\u5230f(2), f(3), \u518d\u5f97\u5230f(4), f(5), \u76f4\u5230\u5f97\u5230f(n); \u5f53\u7ef3\u5b50\u957f\u5ea6\u4e3a2\u65f6, \u53ea\u53ef\u80fd\u526a\u6210\u957f\u5ea6\u90fd\u4e3a1\u7684\u4e24\u6bb5, \u56e0\u6b64f(2) \u7b49\u4e8e1, \u5f53\u7ef3\u5b50\u957f\u5ea6\u4e3a3\u65f6, \u53ef\u80fd\u628a\u7ef3\u5b50\u526a\u6210\u957f\u5ea6\u4e3a1,2\u7684\u4e24\u6bb5\u6216\u8005\u957f\u5ea6\u90fd\u4e3a1\u7684\u4e09\u6bb5, \u7531\u4e8e1*2 > 1*1*1, \u56e0\u6b64f(3) = 2 Answer \u89e3\u6cd51: int getCutLineMultiMax ( int length ) { if ( length < 2 ) return 0 ; if ( length == 2 ) return 1 ; if ( length == 3 ) return 2 ; int * products = new int [ length + 1 ]; memset ( products , 0 , ( length + 1 ) * sizeof ( 4 )); products [ 0 ] = 0 ; products [ 1 ] = 1 ; products [ 2 ] = 2 ; products [ 3 ] = 3 ; for ( int i = 4 ; i <= length ; i ++ ) { for ( int j = 1 ; j <= i / 2 ; j ++ ) { int product = products [ j ] * products [ i - j ]; if ( product > products [ i ]) { products [ i ] = product ; } } } int res = products [ length ]; delete [] products ; return res ; } \u5b8c\u6574\u4ee3\u7801: \u526a\u7ef3\u5b50","title":"\u9762\u8bd5\u989814: \u526a\u7ef3\u5b50"},{"location":"%E5%89%91%E6%8C%87offer/%E5%9B%9E%E6%BA%AF%E6%B3%95/","text":"\u56de\u6eaf\u6cd5\u53ef\u4ee5\u770b\u4f5c\u662f\u66b4\u529b\u6cd5\u7684\u5347\u7ea7\u7248\uff0c\u5b83\u4ece\u89e3\u51b3\u95ee\u9898\u6bcf\u4e00\u6b65\u7684\u6240\u6709\u53ef\u80fd\u9009\u9879\u91cc\u7cfb\u7edf\u5730\u9009\u62e9\u51fa\u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56de\u6eaf\u6cd5\u975e\u5e38\u9002\u5408\u7531\u591a\u4e2a\u6b65\u9aa4\u7ec4\u6210\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u6709\u591a\u4e2a\u9009\u9879\u3002 \u5f53\u6211\u4eec\u5728\u67d0\u4e00\u6b65\u9009\u62e9\u4e86\u5176\u4e2d\u4e00\u4e2a\u9009\u9879\u65f6\uff0c\u5c31\u8fdb\u5165\u4e0b\u4e00\u6b65\uff0c\u7136\u540e\u53c8\u9762\u4e34\u65b0\u7684\u9009\u9879\uff0c\u6211\u4eec\u5c31\u8fd9\u91cd\u590d\u9009\u62e9\uff0c\u76f4\u5230\u6700\u7ec8\u7684\u72b6\u6001\u3002 \u7528\u56de\u6eaf\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u6240\u6709\u9009\u9879\u53ef\u4ee5\u5f62\u8c61\u5730\u7528\u6811\u72b6\u7ed3\u6784\u8868\u793a\u3002 \u5728\u67d0\u4e00\u6b65\u6709n\u4e2a\u53ef\u80fd\u7684\u9009\u9879\uff0c\u90a3\u4e48\u8be5\u6b65\u9aa4\u53ef\u4ee5\u770b\u6210\u662f\u6811\u72b6\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u6bcf\u4e2a\u9009\u9879\u770b\u6210\u6811\u4e2d\u8282\u70b9\u8fde\u63a5\u7ebf\uff0c\u7ecf\u8fc7\u8fd9\u4e9b\u8fde\u63a5\u7ebf\u5230\u8fbe\u8be5\u8282\u70b9\u7684n\u4e2a\u5b50\u8282\u70b9\u3002 \u6811\u7684\u53f6\u8282\u70b9\u5bf9\u5e94\u7740\u6700\u7ec8\u72b6\u6001\uff0c\u5982\u679c\u5728\u53f6\u8282\u70b9\u7684\u72b6\u6001\u6ee1\u8db3\u9898\u76ee\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u90a3\u4e48\u6211\u4eec\u627e\u5230\u4e86\u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u5728\u53f6\u8282\u70b9\u7684\u72b6\u6001\u4e0d\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\uff0c\u90a3\u4e48\u53ea\u597d\u56de\u6eaf\u5230\u5b83\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u518d\u5c1d\u8bd5\u5176\u4ed6\u7684\u9009\u9879\uff0c\u5982\u679c\u4e0a\u4e00\u4e2a\u8282\u70b9\u6240\u6709\u53ef\u80fd\u7684\u9009\u9879\u90fd\u5df2\u7ecf\u8bd5\u8fc7\uff0c\u5e76\u4e14\u4e0d\u80fd\u5230\u8fbe\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u7ec8\u7ed3\u72b6\u6001\uff0c\u5219\u518d\u6b21\u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u6240\u6709\u8282\u70b9\u7684\u6240\u6709\u9009\u9879\u90fd\u5df2\u7ecf\u5c1d\u8bd5\u8fc7\u4ecd\u7136\u4e0d\u80fd\u5230\u8fbe\u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u7ec8\u7ed3\u72b6\u6001\uff0c\u5219\u8be5\u95ee\u9898\u65e0\u89e3\u3002 \u4ee5\u9762\u8bd5\u989812\u4e3a\u4f8b\uff0c\u5206\u6790\u7528\u56de\u6eaf\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b \u9762\u8bd5\u989812: \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u00b6 Question \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u7684\u4efb\u610f\u4e00\u683c\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u79fb\u52a8\u4e00\u683c\uff0c \u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u7684\u67d0\u4e00\u683c\uff0c\u90a3\u4e48\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002 \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684 3x4 \u7684\u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32 \"bfce\" \u7684\u8def\u5f84\uff0c\u4f46\u77e9\u9635\u4e2d\u4e0d\u5305\u542b \"abfb\" \u7684\u8def\u5f84\uff0c \u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26b\u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 Tip \u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u56de\u6eaf\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u5178\u578b\u9898\uff0c\u9996\u5148\uff0c\u5728\u77e9\u9635\u4e2d\u4efb\u9009\u4e00\u4e2a\u683c\u5b50\u4f5c\u4e3a\u8def\u5f84\u7684\u8d77\u70b9\uff0c\u5047\u8bbe\u77e9\u9635\u4e2d\u67d0\u4e2a\u683c\u5b50\u7684\u5b57\u7b26\u4e3ach\uff0c\u5e76\u4e14\u8fd9\u4e2a\u683c\u5b50\u5c06\u5bf9\u5e94\u4e8e\u8def\u5f84\u4e0a\u7684\u7b2ci\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u8def\u5f84\u4e0a\u7684\u7b2ci\u4e2a\u5b57\u7b26\u4e0d\u662fch\uff0c\u90a3\u4e48\u8fd9\u4e2a\u683c\u5b50\u4e0d\u53ef\u80fd\u5904\u5728\u8def\u5f84\u4e0a\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u3002 \u5982\u679c\u8def\u5f84\u4e0a\u7684\u7b2ci\u4e2a\u5b57\u7b26\u6b63\u597d\u662fch\uff0c\u90a3\u4e48\u5230\u76f8\u90bb\u7684\u683c\u5b50\u5bfb\u627e\u8def\u5f84\u4e0a\u7684\u7b2c i+1 \u4e2a\u5b57\u7b26\u3002 \u9664\u77e9\u9635\u8fb9\u754c\u4e0a\u7684\u683c\u5b50\u4e4b\u5916\uff0c\u5176\u4ed6\u683c\u5b50\u90fd\u67094\u4e2a\u76f8\u90bb\u7684\u683c\u5b50\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u8def\u5f84\u4e0a\u7684\u6240\u6709\u5b57\u7b26\u90fd\u5728\u77e9\u9635\u4e2d\u627e\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u3002 \u7531\u4e8e\u56de\u6eaf\u6cd5\u7684\u9012\u5f52\u7279\u6027\uff0c\u8def\u5f84\u53ef\u4ee5\u88ab\u770b\u6210\u4e00\u4e2a\u6808\uff0c\u5f53\u5728\u77e9\u9635\u4e2d\u5b9a\u4f4d\u4e86\u8def\u5f84\u4e2d\u7684\u524dn\u4e2a\u5b57\u7b26\u4e4b\u540e\uff0c\u518d\u4e0e\u7b2cn\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u683c\u5b50\u7684\u5468\u56f4\u90fd\u6ca1\u6709\u627e\u5230\u7b2cn+1\u4e2a\u5b57\u7b26\uff0c\u8fd9\u65f6\u5019\u53ea\u597d\u5728\u8def\u5f84\u4e0a\u56de\u5230\u7b2c n-1 \u4e2a\u5b57\u7b26\uff0c\u91cd\u65b0\u5b9a\u4f4d\u7b2c n \u4e2a\u5b57\u7b26\u3002 \u7531\u4e8e\u8def\u5f84\u4e0d\u80fd\u91cd\u590d\u8fdb\u5165\u77e9\u9635\u7684\u683c\u5b50\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5b9a\u4e49\u548c\u5b57\u7b26\u77e9\u9635\u5927\u5c0f\u4e00\u6837\u7684\u5e03\u5c14\u503c\u77e9\u9635\uff0c\u7528\u6765\u6807\u8bc6\u8def\u5f84\u662f\u5426\u5df2\u7ecf\u8fdb\u5165\u4e86\u8fd9\u4e2a\u683c\u5b50\u3002 Answer \u5b8c\u6574\u7684\u4ee3\u7801\uff1a \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u6d4b\u8bd5\u7528\u4f8b \u529f\u80fd\u6d4b\u8bd5\uff0c\u5728\u591a\u884c\u591a\u5217\u7684\u77e9\u9635\u4e2d\u8f93\u5165\u5b58\u5728\u6216\u4e0d\u5b58\u7684\u8def\u5f84 \u8fb9\u754c\u503c\u6d4b\u8bd5\uff0c\u77e9\u9635\u4e2d\u53ea\u6709\u4e00\u884c\u4e00\u5217\uff0c \u77e9\u9635\u4e2d\u6240\u6709\u5b57\u6bcd\u90fd\u76f8\u540c \u7279\u6b8a\u8f93\u5165\uff0c\u8f93\u5165\u7a7a\u6307\u9488 \u672c\u9898\u8003\u70b9 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u56de\u6eaf\u6cd5\u7684\u7406\u89e3\uff0c\u901a\u5e38\u5728\u4e8c\u7ef4\u77e9\u9635\u4e0a\u627e\u8def\u5f84\u8fd9\u7c7b\u95ee\u9898\u90fd\u53ef\u4ee5\u5e94\u7528\u56de\u6eaf\u6cd5\u89e3\u51b3 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6570\u7ec4\u7684\u7f16\u7a0b\u80fd\u529b\uff0c\u6211\u4eec\u4e00\u822c\u90fd\u628a\u77e9\u9635\u770b\u6210\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u53ea\u6709\u5bf9\u6570\u7ec4\u7684\u7279\u6027\u5145\u5206\u4e86\u89e3\uff0c\u624d\u6709\u53ef\u80fd\u5feb\u901f\uff0c\u6b63\u786e\u7684\u5b9e\u73b0\u56de\u6eaf\u6cd5\u7684\u4ee3\u7801 \u9762\u8bd5\u989813: \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 \u00b6 Question \u5730\u4e0a\u6709\u4e00\u4e2a m \u884c n \u5217\u7684\u65b9\u683c\u3002 \u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807(0, 0) \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u5b83\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u79fb\u52a8\u4e00\u683c\uff0c\u4f46\u4e0d\u80fd\u8fdb\u5165\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50; \u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c(35, 37)\uff0c\u56e0\u4e3a3+5+3+7=18, \u4f46\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c(35, 38), \u56e0\u4e3a3+5+3+8=19\uff0c\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u591a\u5c11\u4e2a\u683c\u5b50\uff1f Tip \u548c\u524d\u9762\u7684\u9898\u76ee\u7c7b\u4f3c\uff0c\u8fd9\u4e2a\u65b9\u683c\u53ef\u4ee5\u770b\u6210\u4e00\u4e2am*n\u7684\u77e9\u9635\uff0c\u540c\u6837\uff0c\u5728\u8fd9\u4e2a\u77e9\u9635\u4e2d\uff0c\u9664\u8fb9\u754c\u4e0a\u7684\u683c\u5b50\u4e4b\u5916\uff0c\u5176\u4ed6\u683c\u5b50\u90fd\u67094\u4e2a\u76f8\u90bb\u7684\u683c\u5b50\u3002 \u673a\u5668\u4eba\u4ece\u5750\u6807\u5f00\u59cb\u79fb\u52a8\uff0c\u5f53\u5b83\u51c6\u5907\u8fdb\u5165\u5750\u6807(i, j)\u7684\u683c\u5b50\u65f6\uff0c\u901a\u8fc7\u68c0\u67e5\u5750\u6807\u7684\u6570\u4f4d\u548c\u6765\u5224\u65ad\u673a\u5668\u4eba\u662f\u5426\u80fd\u591f\u8fdb\u5165\u3002 \u5982\u679c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u5750\u6807(i, j) \u7684\u683c\u5b50\uff0c\u5219\u518d\u7ee7\u7eed\u5224\u65ad\u5b83\u5468\u56f4\u7684\u56db\u4e2a\u683c\u5b50\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u4ee3\u7801\u6765\u56de\u6eaf\u3002 Answer bool pointLessK ( int r , int c , int k ) { if ( r < 0 || c < 0 ) return false ; if ( k < 0 ) return true ; while ( r > 0 ) { k -= ( r % 10 ); r /= 10 ; } if ( k < 0 ) return false ; while ( c > 0 ) { k -= ( c % 10 ); c /= 10 ; } if ( k < 0 ) return false ; return true ; } int RobotActionRangeCore ( const int k , int * matrix , const int row , const int col , int r , int c , int * visited ) { int count = 0 ; if ( r >= 0 && r < row && c >= 0 && c < col && visited [ r * col + c ] == 0 && pointLessK ( r , c , k ) ) { count ++ ; visited [ r * col + c ] = 1 ; // \u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u80fd\u8d70\u5230\u5219\u4e00\u76f4\u9012\u5f52 count = count + RobotActionRangeCore ( k , matrix , row , col , r -1 , c , visited ) + RobotActionRangeCore ( k , matrix , row , col , r , c + 1 , visited ) + RobotActionRangeCore ( k , matrix , row , col , r + 1 , c , visited ) + RobotActionRangeCore ( k , matrix , row , col , r , c -1 , visited ); } return count ; } int getRobotActionRange ( int k , int * matrix , int row , int col ) { if ( matrix == nullptr || row < 1 || col < 1 ) throw exception ( \"InValid Params\" ); int * visited = new int [ row * col ]; memset ( visited , 0 , row * col * sizeof ( int )); int count = RobotActionRangeCore ( k , matrix , row , col , 0 , 0 , visited ); delete [] visited ; return count ; } \u5b8c\u6574\u4ee3\u7801\uff1a \u673a\u5668\u4eba\u79fb\u52a8\u8303\u56f4 \u6d4b\u8bd5\u7528\u4f8b \u529f\u80fd\u6d4b\u8bd5\uff0c\u591a\u884c\u591a\u5217\uff0ck\u4f4d\u6b63\u6570 \u8fb9\u754c\u503c\u6d4b\u8bd5\uff0c\u53ea\u6709\u4e00\u884c\uff0c\u6216\u53ea\u6709\u4e00\u5217\uff0ck \u7b49\u4e8e0 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff0ck\u4e3a\u8d1f\u6570 \u672c\u9898\u8003\u70b9 \u5bf9\u56de\u6eaf\u6cd5\u7684\u7406\u89e3\uff0c\u901a\u5e38\u7269\u4f53\u6216\u8005\u4eba\u5728\u4e8c\u7ef4\u65b9\u683c\u8fd0\u52a8\u8fd9\u7c7b\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u56de\u6eaf\u6cd5\u89e3\u51b3 \u6570\u7ec4\u7f16\u7a0b\u80fd\u529b\u7684\u8003\u67e5","title":"4.3 \u56de\u6eaf\u6cd5"},{"location":"%E5%89%91%E6%8C%87offer/%E5%9B%9E%E6%BA%AF%E6%B3%95/#12","text":"Question \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002 \u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u7684\u4efb\u610f\u4e00\u683c\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u79fb\u52a8\u4e00\u683c\uff0c \u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u7684\u67d0\u4e00\u683c\uff0c\u90a3\u4e48\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002 \u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684 3x4 \u7684\u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32 \"bfce\" \u7684\u8def\u5f84\uff0c\u4f46\u77e9\u9635\u4e2d\u4e0d\u5305\u542b \"abfb\" \u7684\u8def\u5f84\uff0c \u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26b\u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 Tip \u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u56de\u6eaf\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u5178\u578b\u9898\uff0c\u9996\u5148\uff0c\u5728\u77e9\u9635\u4e2d\u4efb\u9009\u4e00\u4e2a\u683c\u5b50\u4f5c\u4e3a\u8def\u5f84\u7684\u8d77\u70b9\uff0c\u5047\u8bbe\u77e9\u9635\u4e2d\u67d0\u4e2a\u683c\u5b50\u7684\u5b57\u7b26\u4e3ach\uff0c\u5e76\u4e14\u8fd9\u4e2a\u683c\u5b50\u5c06\u5bf9\u5e94\u4e8e\u8def\u5f84\u4e0a\u7684\u7b2ci\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u8def\u5f84\u4e0a\u7684\u7b2ci\u4e2a\u5b57\u7b26\u4e0d\u662fch\uff0c\u90a3\u4e48\u8fd9\u4e2a\u683c\u5b50\u4e0d\u53ef\u80fd\u5904\u5728\u8def\u5f84\u4e0a\u7684\u7b2ci\u4e2a\u4f4d\u7f6e\u3002 \u5982\u679c\u8def\u5f84\u4e0a\u7684\u7b2ci\u4e2a\u5b57\u7b26\u6b63\u597d\u662fch\uff0c\u90a3\u4e48\u5230\u76f8\u90bb\u7684\u683c\u5b50\u5bfb\u627e\u8def\u5f84\u4e0a\u7684\u7b2c i+1 \u4e2a\u5b57\u7b26\u3002 \u9664\u77e9\u9635\u8fb9\u754c\u4e0a\u7684\u683c\u5b50\u4e4b\u5916\uff0c\u5176\u4ed6\u683c\u5b50\u90fd\u67094\u4e2a\u76f8\u90bb\u7684\u683c\u5b50\uff0c\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u8def\u5f84\u4e0a\u7684\u6240\u6709\u5b57\u7b26\u90fd\u5728\u77e9\u9635\u4e2d\u627e\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u3002 \u7531\u4e8e\u56de\u6eaf\u6cd5\u7684\u9012\u5f52\u7279\u6027\uff0c\u8def\u5f84\u53ef\u4ee5\u88ab\u770b\u6210\u4e00\u4e2a\u6808\uff0c\u5f53\u5728\u77e9\u9635\u4e2d\u5b9a\u4f4d\u4e86\u8def\u5f84\u4e2d\u7684\u524dn\u4e2a\u5b57\u7b26\u4e4b\u540e\uff0c\u518d\u4e0e\u7b2cn\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u683c\u5b50\u7684\u5468\u56f4\u90fd\u6ca1\u6709\u627e\u5230\u7b2cn+1\u4e2a\u5b57\u7b26\uff0c\u8fd9\u65f6\u5019\u53ea\u597d\u5728\u8def\u5f84\u4e0a\u56de\u5230\u7b2c n-1 \u4e2a\u5b57\u7b26\uff0c\u91cd\u65b0\u5b9a\u4f4d\u7b2c n \u4e2a\u5b57\u7b26\u3002 \u7531\u4e8e\u8def\u5f84\u4e0d\u80fd\u91cd\u590d\u8fdb\u5165\u77e9\u9635\u7684\u683c\u5b50\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5b9a\u4e49\u548c\u5b57\u7b26\u77e9\u9635\u5927\u5c0f\u4e00\u6837\u7684\u5e03\u5c14\u503c\u77e9\u9635\uff0c\u7528\u6765\u6807\u8bc6\u8def\u5f84\u662f\u5426\u5df2\u7ecf\u8fdb\u5165\u4e86\u8fd9\u4e2a\u683c\u5b50\u3002 Answer \u5b8c\u6574\u7684\u4ee3\u7801\uff1a \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u6d4b\u8bd5\u7528\u4f8b \u529f\u80fd\u6d4b\u8bd5\uff0c\u5728\u591a\u884c\u591a\u5217\u7684\u77e9\u9635\u4e2d\u8f93\u5165\u5b58\u5728\u6216\u4e0d\u5b58\u7684\u8def\u5f84 \u8fb9\u754c\u503c\u6d4b\u8bd5\uff0c\u77e9\u9635\u4e2d\u53ea\u6709\u4e00\u884c\u4e00\u5217\uff0c \u77e9\u9635\u4e2d\u6240\u6709\u5b57\u6bcd\u90fd\u76f8\u540c \u7279\u6b8a\u8f93\u5165\uff0c\u8f93\u5165\u7a7a\u6307\u9488 \u672c\u9898\u8003\u70b9 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u56de\u6eaf\u6cd5\u7684\u7406\u89e3\uff0c\u901a\u5e38\u5728\u4e8c\u7ef4\u77e9\u9635\u4e0a\u627e\u8def\u5f84\u8fd9\u7c7b\u95ee\u9898\u90fd\u53ef\u4ee5\u5e94\u7528\u56de\u6eaf\u6cd5\u89e3\u51b3 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6570\u7ec4\u7684\u7f16\u7a0b\u80fd\u529b\uff0c\u6211\u4eec\u4e00\u822c\u90fd\u628a\u77e9\u9635\u770b\u6210\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u53ea\u6709\u5bf9\u6570\u7ec4\u7684\u7279\u6027\u5145\u5206\u4e86\u89e3\uff0c\u624d\u6709\u53ef\u80fd\u5feb\u901f\uff0c\u6b63\u786e\u7684\u5b9e\u73b0\u56de\u6eaf\u6cd5\u7684\u4ee3\u7801","title":"\u9762\u8bd5\u989812: \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"%E5%89%91%E6%8C%87offer/%E5%9B%9E%E6%BA%AF%E6%B3%95/#13","text":"Question \u5730\u4e0a\u6709\u4e00\u4e2a m \u884c n \u5217\u7684\u65b9\u683c\u3002 \u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807(0, 0) \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u5b83\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u79fb\u52a8\u4e00\u683c\uff0c\u4f46\u4e0d\u80fd\u8fdb\u5165\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50; \u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c(35, 37)\uff0c\u56e0\u4e3a3+5+3+7=18, \u4f46\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c(35, 38), \u56e0\u4e3a3+5+3+8=19\uff0c\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u591a\u5c11\u4e2a\u683c\u5b50\uff1f Tip \u548c\u524d\u9762\u7684\u9898\u76ee\u7c7b\u4f3c\uff0c\u8fd9\u4e2a\u65b9\u683c\u53ef\u4ee5\u770b\u6210\u4e00\u4e2am*n\u7684\u77e9\u9635\uff0c\u540c\u6837\uff0c\u5728\u8fd9\u4e2a\u77e9\u9635\u4e2d\uff0c\u9664\u8fb9\u754c\u4e0a\u7684\u683c\u5b50\u4e4b\u5916\uff0c\u5176\u4ed6\u683c\u5b50\u90fd\u67094\u4e2a\u76f8\u90bb\u7684\u683c\u5b50\u3002 \u673a\u5668\u4eba\u4ece\u5750\u6807\u5f00\u59cb\u79fb\u52a8\uff0c\u5f53\u5b83\u51c6\u5907\u8fdb\u5165\u5750\u6807(i, j)\u7684\u683c\u5b50\u65f6\uff0c\u901a\u8fc7\u68c0\u67e5\u5750\u6807\u7684\u6570\u4f4d\u548c\u6765\u5224\u65ad\u673a\u5668\u4eba\u662f\u5426\u80fd\u591f\u8fdb\u5165\u3002 \u5982\u679c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u5750\u6807(i, j) \u7684\u683c\u5b50\uff0c\u5219\u518d\u7ee7\u7eed\u5224\u65ad\u5b83\u5468\u56f4\u7684\u56db\u4e2a\u683c\u5b50\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5982\u4e0b\u7684\u4ee3\u7801\u6765\u56de\u6eaf\u3002 Answer bool pointLessK ( int r , int c , int k ) { if ( r < 0 || c < 0 ) return false ; if ( k < 0 ) return true ; while ( r > 0 ) { k -= ( r % 10 ); r /= 10 ; } if ( k < 0 ) return false ; while ( c > 0 ) { k -= ( c % 10 ); c /= 10 ; } if ( k < 0 ) return false ; return true ; } int RobotActionRangeCore ( const int k , int * matrix , const int row , const int col , int r , int c , int * visited ) { int count = 0 ; if ( r >= 0 && r < row && c >= 0 && c < col && visited [ r * col + c ] == 0 && pointLessK ( r , c , k ) ) { count ++ ; visited [ r * col + c ] = 1 ; // \u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u80fd\u8d70\u5230\u5219\u4e00\u76f4\u9012\u5f52 count = count + RobotActionRangeCore ( k , matrix , row , col , r -1 , c , visited ) + RobotActionRangeCore ( k , matrix , row , col , r , c + 1 , visited ) + RobotActionRangeCore ( k , matrix , row , col , r + 1 , c , visited ) + RobotActionRangeCore ( k , matrix , row , col , r , c -1 , visited ); } return count ; } int getRobotActionRange ( int k , int * matrix , int row , int col ) { if ( matrix == nullptr || row < 1 || col < 1 ) throw exception ( \"InValid Params\" ); int * visited = new int [ row * col ]; memset ( visited , 0 , row * col * sizeof ( int )); int count = RobotActionRangeCore ( k , matrix , row , col , 0 , 0 , visited ); delete [] visited ; return count ; } \u5b8c\u6574\u4ee3\u7801\uff1a \u673a\u5668\u4eba\u79fb\u52a8\u8303\u56f4 \u6d4b\u8bd5\u7528\u4f8b \u529f\u80fd\u6d4b\u8bd5\uff0c\u591a\u884c\u591a\u5217\uff0ck\u4f4d\u6b63\u6570 \u8fb9\u754c\u503c\u6d4b\u8bd5\uff0c\u53ea\u6709\u4e00\u884c\uff0c\u6216\u53ea\u6709\u4e00\u5217\uff0ck \u7b49\u4e8e0 \u7279\u6b8a\u8f93\u5165\u6d4b\u8bd5\uff0ck\u4e3a\u8d1f\u6570 \u672c\u9898\u8003\u70b9 \u5bf9\u56de\u6eaf\u6cd5\u7684\u7406\u89e3\uff0c\u901a\u5e38\u7269\u4f53\u6216\u8005\u4eba\u5728\u4e8c\u7ef4\u65b9\u683c\u8fd0\u52a8\u8fd9\u7c7b\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u56de\u6eaf\u6cd5\u89e3\u51b3 \u6570\u7ec4\u7f16\u7a0b\u80fd\u529b\u7684\u8003\u67e5","title":"\u9762\u8bd5\u989813: \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"%E5%89%91%E6%8C%87offer/%E5%AD%97%E7%AC%A6%E4%B8%B2/","text":"\u5b57\u7b26\u4e32\u662f\u5426\u82e5\u5e72\u5b57\u7b26\u7ec4\u6210\u7684\u5e8f\u5217\u3002 \u7531\u4e8e\u5b57\u7b26\u4e32\u5728\u7f16\u7a0b\u65f6\u4f7f\u7528\u7684\u9891\u7387\u975e\u5e38\u9ad8,\u4e3a\u4e86\u4f18\u5316,\u5f88\u591a\u8bed\u8a00\u90fd\u5bf9\u5b57\u7b26\u4e32\u505a\u4e86\u7279\u6b8a\u7684\u89c4\u5b9a. C/C++\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u4ee5\u5b57\u7b26 '\\0' \u4f5c\u4e3a\u7ed3\u5c3e,\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5f88\u65b9\u4fbf\u5730\u627e\u5230\u5b57\u7b26\u4e32\u6700\u540e\u5c3e\u90e8. \u4f46\u7531\u4e8e\u8fd9\u4e2a\u7279\u70b9, \u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u90fd\u6709\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u7b26\u5f00\u9500,\u7a0d\u4e0d\u7559\u795e\u5c31\u4f1a\u9020\u6210\u5b57\u7b26\u4e32\u7684\u8d8a\u754c. char str [ 10 ]; strcpy ( str , \"0123456789\" ); \u6211\u4eec\u5148\u58f0\u660e\u4e00\u4e2a\u957f\u5ea6\u4e3a10\u7684\u5b57\u7b26\u6570\u7ec4,\u7136\u540e\u628a\u5b57\u7b26\u4e32\"0123456789\"\u590d\u5236\u5230\u6570\u7ec4\u4e2d. \"0123456789\"\u770b\u8d77\u6765\u53ea\u670910\u4e2a\u5b57\u7b26, \u4f46\u5b9e\u9645\u4e0a\u5b83\u7684\u672b\u5c3e\u8fd8\u6709\u4e00\u4e2a'\\0'\u5b57\u7b26,\u56e0\u6b64\u5b83\u7684\u5b9e\u9645\u957f\u5ea6\u4e3a11\u5b57\u8282. \u8981\u6b63\u786e\u7684\u590d\u5236\u8be5\u5b57\u7b26\u4e32,\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u957f\u5ea6\u4e3a11\u5b57\u8282\u7684\u6570\u7ec4. \u4e3a\u4e86\u8282\u7701\u5185\u5b58, C/C++\u628a\u5e38\u91cf\u5b57\u7b26\u4e32\u653e\u5230\u5355\u72ec\u7684\u4e00\u4e2a\u5185\u5b58\u533a\u57df.\u5f53\u51e0\u4e2a\u6307\u9488\u8d4b\u503c\u7ed9\u76f8\u540c\u7684\u5e38\u91cf\u5b57\u7b26\u4e32\u65f6,\u4ed6\u4eec\u5b9e\u9645\u4e0a\u4f1a\u6307\u5411\u76f8\u540c\u7684\u5185\u5b58\u5730\u5740. \u4f46\u7528\u5e38\u91cf\u5185\u5b58\u521d\u59cb\u5316\u6570\u7ec4,\u60c5\u51b5\u5374\u6709\u6240\u4e0d\u540c,\u4e0b\u9762\u901a\u8fc7\u4e00\u4e2a\u9762\u8bd5\u9898\u6765\u5b66\u4e60\u8fd9\u4e00\u77e5\u8bc6\u70b9. \u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801, \u5f97\u5230\u7684\u7ed3\u679c\u662f\u4ec0\u4e48? #include <iostream> using namespace std ; int main ( int argv , const char * argc ) { char str1 [] = \"hello world\" ; char str2 [] = \"hello world\" ; const char * str3 = \"hello world\" ; const char * str4 = \"hello world\" ; if ( str1 == str2 ) cout << \"str1 and str2 are same\" << endl ; else cout << \"str1 and str2 are not same\" << endl ; if ( str3 == str4 ) cout << \"str3 and str4 are same\" << endl ; else cout << \"str3 and str4 are not same\" << endl ; return 0 ; } str1 \u548c str2 \u662f\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4,\u6211\u4eec\u4f1a\u4e3a\u4ed6\u4eec\u5206\u914d\u4e24\u4e2a\u957f\u5ea6\u4e3a12\u5b57\u8282\u7684\u7a7a\u95f4, \u5e76\u628a\"hello world\"\u7684\u5185\u5bb9\u5206\u522b\u8d4b\u503c\u5230\u6570\u7ec4\u4e2d\u53bb. \u8fd9\u662f\u4e24\u4e2a\u521d\u59cb\u5730\u5740\u4e0d\u540c\u7684\u6570\u7ec4, \u56e0\u6b64str1 \u548c str2\u7684\u503c\u4e5f\u4e0d\u76f8\u540c. str3 \u548c str4 \u662f\u4e24\u4e2a\u6307\u9488,\u6211\u4eec\u65e0\u987b\u4e3a\u4ed6\u4eec\u5206\u914d\u5185\u5b58\u4ee5\u5b58\u50a8\u5b57\u7b26\u4e32\u7684\u5185\u5bb9,\u800c\u53ea\u9700\u8981\u628a\u4ed6\u4eec\u6307\u5411\"hello world\"\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u4e86,\u7531\u4e8e\"hello world\"\u662f\u5e38\u91cf\u5b57\u7b26\u4e32,\u4ed6\u5728\u5185\u5b58\u4e2d\u53ea\u6709\u4e00\u4e2a\u62f7\u8d1d,\u56e0\u6b64str3 \u548c str4 \u6307\u5411\u540c\u4e00\u4e2a\u5730\u5740. \u9762\u8bd5\u98985: \u66ff\u6362\u7a7a\u683c \u00b6 Question \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570, \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\". \u4f8b\u5982, \u8f93\u5165\"We are happy.\", \u5219\u8f93\u51fa\"We%20are%20happy.\" Tip \u5728\u7f51\u7edc\u7f16\u7a0b\u4e2d,\u5982\u679curl\u53c2\u6570\u542b\u6709\u7279\u6b8a\u5b57\u7b26,\u5982\u7a7a\u683c,\"#\"\u7b49, \u5219\u53ef\u80fd\u5bfc\u81f4\u670d\u52a1\u5668\u7aef\u65e0\u6cd5\u83b7\u53d6\u6b63\u786e\u7684\u53c2\u6570,\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u7279\u6b8a\u5b57\u7b26\u8f6c\u6362\u6210\u670d\u52a1\u5668\u53ef\u4ee5\u8bc6\u522b\u7684\u5b57\u7b26.\u8f6c\u6362\u7684\u89c4\u5219\u662f\u5728'%'\u7684\u540e\u9762\u8ddf\u4e0aASCII\u7801\u7684\u4e24\u4f4d\u5341\u516d\u8fdb\u5236\u8868\u793a. \u6bd4\u5982\u7a7a\u683c\u7684ASCII\u7801\u662f32, \u5373\u5341\u516d\u8fdb\u5236\u76840x20, \u56e0\u6b64\u7a7a\u683c\u88ab\u66ff\u6362\u6210%20, \u518d\u6bd4\u5982'#'\u7684ASCII\u7801\u4e3a35,\u5373\u8868\u793a\u4e3a0x23, \u4ed6\u5728url\u4e2d\u88ab\u66ff\u6362\u4e3a%23. \u770b\u5230\u8fd9\u4e2a\u9898\u76ee, \u6211\u4eec\u9996\u5148\u5e94\u8be5\u60f3\u5230\u7684\u662f\u539f\u6765\u4e00\u4e2a\u7a7a\u683c\u5b57\u7b26, \u66ff\u6362\u4e4b\u540e\u53d8\u6210'%', '2'\u548c'0' \u8fd93\u4e2a\u5b57\u7b26,\u56e0\u6b64\u5b57\u7b26\u4e32\u4f1a\u53d8\u957f, \u5982\u679c\u662f\u5728\u539f\u6765\u7684\u5b57\u7b26\u4e32\u4e0a\u8fdb\u884c\u66ff\u6362, \u5c31\u6709\u53ef\u80fd\u8986\u76d6\u4fee\u6539\u518d\u8be5\u5b57\u7b26\u4e32\u540e\u9762\u7684\u5185\u5b58. \u5982\u679c\u662f\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u5e76\u5728\u65b0\u7684\u5b57\u7b26\u4e32\u4e0a\u8fdb\u884c\u66ff\u6362,\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5206\u914d\u8db3\u591f\u591a\u7684\u5185\u5b58. \u7531\u4e8e\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848,\u6211\u4eec\u5e94\u8be5\u5411\u9762\u8bd5\u5b98\u95ee\u6e05\u695a,\u8ba9\u4ed6\u660e\u786e\u544a\u8bc9\u6211\u4eec\u4ed6\u7684\u9700\u6c42,\u5047\u8bbe\u9762\u8bd5\u5b98\u8ba9\u6211\u4eec\u5728\u539f\u6765\u7684\u5b57\u7b26\u4e32\u957f\u8fdb\u884c\u66ff\u6362,\u5e76\u4e14\u4fdd\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u540e\u9762\u6709\u8db3\u591f\u591a\u7684\u7a7a\u4f59\u5185\u5b58. \u89e3\u6cd5\u4e00: \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2), \u4e0d\u8db3\u4ee5\u62ff\u5230offer \u904d\u5386\u539f\u5b57\u7b26\u6570\u7ec4, \u9047\u5230\u7a7a\u683c, \u5728\u628a\u7a7a\u683c\u6240\u5728\u4f4d\u7f6e\u540e\u9762\u7684\u5143\u7d20\u5f80\u540e\u79fb\u4e24\u4e2a\u4f4d\u7f6e\u3002 \u9700\u8981\u4fdd\u8bc1\u6570\u7ec4\u8db3\u591f\u957f\u3002\u4f60\u4f1a\u53d1\u73b0\u7a7a\u683c\u540e\u9762\u7684\u5b57\u7b26\u53ef\u80fd\u5b58\u5728\u88ab\u79fb\u52a8\u591a\u6b21\u7684\u53ef\u80fd\u3002 \u89e3\u6cd5\u4e8c\u5bf9\u8fd9\u4e2a\u95ee\u9898\u5c31\u884c\u4e86\u4f18\u5316\u3002 \u89e3\u6cd5\u4e8c: \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u641e\u5b9aoffer\u5c31\u9760\u4ed6\u4e86 \u5148\u904d\u5386\u4e00\u6b21\u5b57\u7b26\u4e32\uff0c\u7edf\u8ba1\u7a7a\u683c\u7684\u4e2a\u6570\uff0c\u5e76\u53ef\u4ee5\u7531\u6b64\u8ba1\u7b97\u51fa\u66ff\u6362\u4e4b\u540e\u5b57\u7b26\u4e32\u7684\u603b\u957f\u5ea6\uff0c\u6211\u4eec\u4ece\u5b57\u7b26\u4e32\u7684\u540e\u9762\u5f00\u59cb\u590d\u5236\u548c\u66ff\u6362\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u540e\u9762\u7684\u5b57\u7b26\u53ef\u80fd\u79fb\u52a8\u591a\u6b21\u7684\u60c5\u51b5\u3002 Answer \u89e3\u6cd5\u4e00\uff1a string_blank_replace1.cpp \u89e3\u6cd5\u4e8c\uff1a string_blank_replace2.cpp \u672c\u9898\u8003\u70b9\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5b57\u7b26\u4e32\u7684\u7f16\u7a0b\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u65f6\u95f4\u6548\u7387\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5185\u5b58\u8986\u76d6\u662f\u5426\u6709\u9ad8\u5ea6\u7684\u8b66\u60d5\u3002 \u5728\u5206\u6790\u5f97\u77e5\u5b57\u7b26\u4e32\u4f1a\u53d8\u957f\u4e4b\u540e\uff0c\u6211\u4eec\u80fd\u591f\u610f\u8bc6\u5230\u6f5c\u5728\u95ee\u9898\uff0c\u5e76\u4e3b\u52a8\u548c\u9762\u8bd5\u5b98\u6c9f\u901a\u4ee5\u5bfb\u627e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u5728\u4ece\u524d\u5230\u540e\u66ff\u6362\u7684\u601d\u8def\u548c\u9762\u8bd5\u5b98\u5426\u5b9a\u4e4b\u540e\uff0c\u6211\u4eec\u80fd\u8fc5\u901f\u60f3\u5230\u4ece\u540e\u5230\u524d\u66ff\u6362\u7684\u65b9\u6cd5\u3002 \u8fd9\u662f\u89e3\u51b3\u6b64\u9898\u7684\u5173\u952e\u3002 \u76f8\u5173\u9898\u76ee\uff1a \u6709\u4e24\u4e2a\u6392\u5e8f\u7684\u6570\u7ec4A1\u548cA2\uff0c\u5185\u5b58\u5728A1\u7684\u672b\u5c3e\u6709\u8db3\u591f\u7684\u7a7a\u4f59\u7a7a\u95f4\u5bb9\u7eb3A2. \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628aA2\u4e2d\u7684\u6240\u6709\u6570\u5b57\u63d2\u5165\u5230A1\u4e2d\uff0c\u5e76\u4e14\u6240\u6709\u7684\u6570\u5b57\u7684\u6392\u5e8f\u7684\u3002 mergeSortedArray.cpp \u4e3e\u4e00\u53cd\u4e09\uff1a \u5728\u5408\u5e76\u4e24\u4e2a\u6570\u7ec4(\u5305\u62ec\u5b57\u7b26\u4e32)\u65f6\uff0c\u5982\u679c\u4ece\u524d\u5f80\u540e\u590d\u5236\u6bcf\u4e2a\u6570\u5b57\uff08\u6216\u5b57\u7b26\uff09\u5219\u9700\u8981\u79fb\u52a8\u6570\u5b57\uff08\u6216\u5b57\u7b26\u591a\u6b21\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ece\u540e\u5f80\u524d\u590d\u5236\uff0c\u8fd9\u6837\u5c31\u80fd\u51cf\u5c11\u79fb\u52a8\u7684\u6b21\u6570\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387\u3002","title":"3.2 \u5b57\u7b26\u4e32"},{"location":"%E5%89%91%E6%8C%87offer/%E5%AD%97%E7%AC%A6%E4%B8%B2/#5","text":"Question \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570, \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\". \u4f8b\u5982, \u8f93\u5165\"We are happy.\", \u5219\u8f93\u51fa\"We%20are%20happy.\" Tip \u5728\u7f51\u7edc\u7f16\u7a0b\u4e2d,\u5982\u679curl\u53c2\u6570\u542b\u6709\u7279\u6b8a\u5b57\u7b26,\u5982\u7a7a\u683c,\"#\"\u7b49, \u5219\u53ef\u80fd\u5bfc\u81f4\u670d\u52a1\u5668\u7aef\u65e0\u6cd5\u83b7\u53d6\u6b63\u786e\u7684\u53c2\u6570,\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u7279\u6b8a\u5b57\u7b26\u8f6c\u6362\u6210\u670d\u52a1\u5668\u53ef\u4ee5\u8bc6\u522b\u7684\u5b57\u7b26.\u8f6c\u6362\u7684\u89c4\u5219\u662f\u5728'%'\u7684\u540e\u9762\u8ddf\u4e0aASCII\u7801\u7684\u4e24\u4f4d\u5341\u516d\u8fdb\u5236\u8868\u793a. \u6bd4\u5982\u7a7a\u683c\u7684ASCII\u7801\u662f32, \u5373\u5341\u516d\u8fdb\u5236\u76840x20, \u56e0\u6b64\u7a7a\u683c\u88ab\u66ff\u6362\u6210%20, \u518d\u6bd4\u5982'#'\u7684ASCII\u7801\u4e3a35,\u5373\u8868\u793a\u4e3a0x23, \u4ed6\u5728url\u4e2d\u88ab\u66ff\u6362\u4e3a%23. \u770b\u5230\u8fd9\u4e2a\u9898\u76ee, \u6211\u4eec\u9996\u5148\u5e94\u8be5\u60f3\u5230\u7684\u662f\u539f\u6765\u4e00\u4e2a\u7a7a\u683c\u5b57\u7b26, \u66ff\u6362\u4e4b\u540e\u53d8\u6210'%', '2'\u548c'0' \u8fd93\u4e2a\u5b57\u7b26,\u56e0\u6b64\u5b57\u7b26\u4e32\u4f1a\u53d8\u957f, \u5982\u679c\u662f\u5728\u539f\u6765\u7684\u5b57\u7b26\u4e32\u4e0a\u8fdb\u884c\u66ff\u6362, \u5c31\u6709\u53ef\u80fd\u8986\u76d6\u4fee\u6539\u518d\u8be5\u5b57\u7b26\u4e32\u540e\u9762\u7684\u5185\u5b58. \u5982\u679c\u662f\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u5e76\u5728\u65b0\u7684\u5b57\u7b26\u4e32\u4e0a\u8fdb\u884c\u66ff\u6362,\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5206\u914d\u8db3\u591f\u591a\u7684\u5185\u5b58. \u7531\u4e8e\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848,\u6211\u4eec\u5e94\u8be5\u5411\u9762\u8bd5\u5b98\u95ee\u6e05\u695a,\u8ba9\u4ed6\u660e\u786e\u544a\u8bc9\u6211\u4eec\u4ed6\u7684\u9700\u6c42,\u5047\u8bbe\u9762\u8bd5\u5b98\u8ba9\u6211\u4eec\u5728\u539f\u6765\u7684\u5b57\u7b26\u4e32\u957f\u8fdb\u884c\u66ff\u6362,\u5e76\u4e14\u4fdd\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u540e\u9762\u6709\u8db3\u591f\u591a\u7684\u7a7a\u4f59\u5185\u5b58. \u89e3\u6cd5\u4e00: \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2), \u4e0d\u8db3\u4ee5\u62ff\u5230offer \u904d\u5386\u539f\u5b57\u7b26\u6570\u7ec4, \u9047\u5230\u7a7a\u683c, \u5728\u628a\u7a7a\u683c\u6240\u5728\u4f4d\u7f6e\u540e\u9762\u7684\u5143\u7d20\u5f80\u540e\u79fb\u4e24\u4e2a\u4f4d\u7f6e\u3002 \u9700\u8981\u4fdd\u8bc1\u6570\u7ec4\u8db3\u591f\u957f\u3002\u4f60\u4f1a\u53d1\u73b0\u7a7a\u683c\u540e\u9762\u7684\u5b57\u7b26\u53ef\u80fd\u5b58\u5728\u88ab\u79fb\u52a8\u591a\u6b21\u7684\u53ef\u80fd\u3002 \u89e3\u6cd5\u4e8c\u5bf9\u8fd9\u4e2a\u95ee\u9898\u5c31\u884c\u4e86\u4f18\u5316\u3002 \u89e3\u6cd5\u4e8c: \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u641e\u5b9aoffer\u5c31\u9760\u4ed6\u4e86 \u5148\u904d\u5386\u4e00\u6b21\u5b57\u7b26\u4e32\uff0c\u7edf\u8ba1\u7a7a\u683c\u7684\u4e2a\u6570\uff0c\u5e76\u53ef\u4ee5\u7531\u6b64\u8ba1\u7b97\u51fa\u66ff\u6362\u4e4b\u540e\u5b57\u7b26\u4e32\u7684\u603b\u957f\u5ea6\uff0c\u6211\u4eec\u4ece\u5b57\u7b26\u4e32\u7684\u540e\u9762\u5f00\u59cb\u590d\u5236\u548c\u66ff\u6362\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u540e\u9762\u7684\u5b57\u7b26\u53ef\u80fd\u79fb\u52a8\u591a\u6b21\u7684\u60c5\u51b5\u3002 Answer \u89e3\u6cd5\u4e00\uff1a string_blank_replace1.cpp \u89e3\u6cd5\u4e8c\uff1a string_blank_replace2.cpp \u672c\u9898\u8003\u70b9\uff1a \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5b57\u7b26\u4e32\u7684\u7f16\u7a0b\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u65f6\u95f4\u6548\u7387\u7684\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5185\u5b58\u8986\u76d6\u662f\u5426\u6709\u9ad8\u5ea6\u7684\u8b66\u60d5\u3002 \u5728\u5206\u6790\u5f97\u77e5\u5b57\u7b26\u4e32\u4f1a\u53d8\u957f\u4e4b\u540e\uff0c\u6211\u4eec\u80fd\u591f\u610f\u8bc6\u5230\u6f5c\u5728\u95ee\u9898\uff0c\u5e76\u4e3b\u52a8\u548c\u9762\u8bd5\u5b98\u6c9f\u901a\u4ee5\u5bfb\u627e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u601d\u7ef4\u80fd\u529b\u3002 \u5728\u4ece\u524d\u5230\u540e\u66ff\u6362\u7684\u601d\u8def\u548c\u9762\u8bd5\u5b98\u5426\u5b9a\u4e4b\u540e\uff0c\u6211\u4eec\u80fd\u8fc5\u901f\u60f3\u5230\u4ece\u540e\u5230\u524d\u66ff\u6362\u7684\u65b9\u6cd5\u3002 \u8fd9\u662f\u89e3\u51b3\u6b64\u9898\u7684\u5173\u952e\u3002 \u76f8\u5173\u9898\u76ee\uff1a \u6709\u4e24\u4e2a\u6392\u5e8f\u7684\u6570\u7ec4A1\u548cA2\uff0c\u5185\u5b58\u5728A1\u7684\u672b\u5c3e\u6709\u8db3\u591f\u7684\u7a7a\u4f59\u7a7a\u95f4\u5bb9\u7eb3A2. \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628aA2\u4e2d\u7684\u6240\u6709\u6570\u5b57\u63d2\u5165\u5230A1\u4e2d\uff0c\u5e76\u4e14\u6240\u6709\u7684\u6570\u5b57\u7684\u6392\u5e8f\u7684\u3002 mergeSortedArray.cpp \u4e3e\u4e00\u53cd\u4e09\uff1a \u5728\u5408\u5e76\u4e24\u4e2a\u6570\u7ec4(\u5305\u62ec\u5b57\u7b26\u4e32)\u65f6\uff0c\u5982\u679c\u4ece\u524d\u5f80\u540e\u590d\u5236\u6bcf\u4e2a\u6570\u5b57\uff08\u6216\u5b57\u7b26\uff09\u5219\u9700\u8981\u79fb\u52a8\u6570\u5b57\uff08\u6216\u5b57\u7b26\u591a\u6b21\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ece\u540e\u5f80\u524d\u590d\u5236\uff0c\u8fd9\u6837\u5c31\u80fd\u51cf\u5c11\u79fb\u52a8\u7684\u6b21\u6570\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387\u3002","title":"\u9762\u8bd5\u98985: \u66ff\u6362\u7a7a\u683c"},{"location":"%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84/","text":"\u6570\u7ec4\u53ef\u4ee5\u8bf4\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5360\u636e\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u5e76\u6309\u7167\u987a\u5e8f\u5b58\u50a8\u6570\u636e\u3002 \u521b\u5efa\u6570\u7ec4\u65f6\uff0c\u9700\u8981\u5148\u6307\u5b9a\u6570\u7ec4\u5bb9\u5668\u7684\u5927\u5c0f\uff0c\u7136\u540e\u6839\u636e\u5927\u5c0f\u5206\u914d\u5185\u5b58\u3002 \u7531\u4e8e\u6570\u7ec4\u7684\u5185\u5b58\u662f\u8fde\u7eed\u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u6839\u636e\u4e0b\u6807\u5728O(1)\u65f6\u95f4\u8bfb\u5199\u4efb\u4f55\u5143\u7d20\uff0c\u56e0\u6b64\u5b83\u7684\u65f6\u95f4\u6548\u7387\u5f88\u9ad8\u3002 \u6839\u636e\u6570\u7ec4\u65f6\u95f4\u6548\u7387\u9ad8\u7684\u4f18\u70b9, \u5b9e\u73b0\u7b80\u5355\u7684\u54c8\u5e0c\u8868 \uff0c\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u7b80\u5355\u7684\u54c8\u5e0c\u8868\uff0c\u628a\u6570\u7ec4\u7684\u4e0b\u6807\u8bbe\u4e3a\u54c8\u5e0c\u8868\u7684\u952e\uff0c\u6570\u7ec4\u5143\u7d20\u4e3a\u54c8\u5e0c\u8868\u7684\u503c\uff0c \u6709\u4e86\u8fd9\u6837\u7684\u54c8\u5e0c\u8868\uff0c\u6211\u4eec\u53ef\u4ee5\u5728O(1)\u65f6\u95f4\u5185\u67e5\u627e\u3002 \u4e3a\u4e86\u89e3\u51b3\u6570\u7ec4\u7a7a\u95f4\u6548\u7387\u4e0d\u9ad8\u7684\u95ee\u9898 \uff0c\u4eba\u4eec\u53c8\u8bbe\u8ba1\u5b9e\u73b0\u4e86\u591a\u79cd\u52a8\u6001\u6570\u7ec4\uff0c\u6bd4\u5982c++\u4e2d\u7684STL\u4e2d\u7684vector\uff0c\u4e3a\u4e86\u907f\u514d\u6d6a\u8d39\uff0c\u5148\u4e3a\u6570\u7ec4\u5f00\u8f9f\u8f83\u5c0f\u7684\u7a7a\u95f4\uff0c\u7136\u540e\u5f80\u6570\u7ec4\u4e2d\u6dfb\u52a0\u6570\u7ec4\u3002 \u5f53\u6570\u7ec4\u7684\u6570\u636e\u8d85\u8fc7\u6570\u7ec4\u5bb9\u91cf\u65f6\uff0c\u6211\u4eec\u518d\u91cd\u65b0\u5206\u914d\u4e00\u5757\u66f4\u5927\u7684\u7a7a\u95f4(c++ \u4e2dvector \u4e3a\u4e4b\u524d\u7684\u4e24\u500d\uff0cpython list\u4e5f\u4e3a\u4e4b\u524d\u7684\u4e24\u500d)\uff0c\u628a\u4e4b\u524d\u7684\u6570\u636e\u590d\u5236\u5230\u65b0\u6570\u7ec4\u4e2d\uff0c\u518d\u628a\u4e4b\u524d\u7684\u5185\u5b58\u91ca\u653e\u3002 \u8fd9\u5bf9\u65f6\u95f4\u6027\u80fd\u6709\u8d1f\u9762\u5f71\u54cd\uff0c\u56e0\u6b64\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u65f6\u8981\u5c3d\u91cf\u51cf\u5c11\u6539\u53d8\u6570\u7ec4\u5bb9\u91cf\u5927\u5c0f\u7684\u6b21\u6570\u3002 \u5173\u952e\u70b91 \u00b6 \u5728c/c++\u4e2d\uff0c\u6570\u7ec4\u548c\u6307\u9488\u662f\u65e2\u76f8\u5173\u53c8\u6709\u533a\u522b\u7684\u6982\u5ff5\uff0c\u5f53\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u5176\u6570\u7ec4\u7684\u540d\u5b57\u4e5f\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u8be5\u6307\u9488\u6307\u5411\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6307\u9488\u6765\u8bbf\u95ee\u6570\u7ec4\u3002 c/c++\u6ca1\u6709\u8bb0\u5f55\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u5728\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u65f6\uff0c\u7a0b\u5e8f\u5458\u8981\u786e\u4fdd\u6ca1\u6709\u8d85\u51fa\u6570\u7ec4\u7684\u8fb9\u754c\u3002 \u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\uff0c\u8bf7\u95ee\u8f93\u51fa\u4ec0\u4e48\uff1f #include <iostream> using namespace std ; int GetSize ( int data []) { return sizeof ( data ); } int main ( int argc , const char * argv []) { int data1 [] = { 1 , 2 , 3 , 4 , 5 }; int size1 = sizeof ( data1 ); int * data2 = data1 ; int size2 = sizeof ( data2 ); int size3 = GetSize ( data1 ); cout << size1 << endl << size2 << endl << size3 << endl ; return 0 ; } \u7b54\u6848\u662f\uff1a 20\uff0c 8\uff0c 8\uff0cdata\u662f\u4e00\u4e2a\u6570\u7ec4\uff0csizeof(data)\u6c42\u7684\u662f\u6570\u7ec4\u7684\u5927\u5c0f\uff0c5\u4e2a\u6574\u6570\uff0c\u6bcf\u4e2a\u6574\u6570\u53604\u4e2a\u5b57\u8282\uff0c\u56e0\u6b64\u536020\u4e2a\u5b57\u8282\u3002 data2\u662f\u6307\u9488\uff0c\u6307\u9488\u572832\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u53604\u4f4d\uff0c64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u53608\u4f4d\u3002\u5728c/c++\u4e2d\uff0c\u5f53\u6570\u7ec4\u5f53\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u65f6\uff0c\u6570\u7ec4\u5c31\u81ea\u52a8\u9000\u5316\u4e3a\u540c\u7c7b\u578b\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u51fd\u6570GetSize\u7684\u53c2\u6570data\u88ab\u58f0\u660e\u4e3a\u6570\u7ec4\uff0c\u4f46\u4ed6\u4f1a\u9000\u5316\u4e3a\u6307\u9488\u3002 \u9762\u8bd5\u98983: \u00b6 \u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u00b6 Question \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280~n-1\u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3},\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u91cd\u590d\u7684\u6570\u5b572\u6216\u80053\u3002 Tip \u89e3\u6cd5\u4e00: \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u529e\u6cd5\u662f\u5148\u628a\u8f93\u5165\u7684\u6570\u7ec4\u6392\u5e8f\u3002\u4ece\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u53ea\u9700\u8981\u626b\u63cf\u6392\u5e8f\u7684\u6570\u7ec4\u5c31\u53ef\u4ee5\u4e86\u3002\u6392\u5e8f\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u9700\u8981O(nlgn)\u7684\u65f6\u95f4\u3002 \u89e3\u6cd5\u4e8c: \u8fd8\u53ef\u4ee5\u5229\u7528\u54c8\u5e0c\u8868\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ece\u5934\u5230\u5c3e\u6309\u987a\u5e8f\u626b\u63cf\u6570\u7ec4\u7684\u6bcf\u4e2a\u6570\u5b57\uff0c\u6bcf\u626b\u63cf\u5230\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u90fd\u53ef\u4ee5\u7528O(1)\u7684\u65f6\u95f4\u6765\u5224\u65ad\u54c8\u5e0c\u8868\u91cc\u662f\u5426\u5df2\u7ecf\u5305\u542b\u4e86\u8be5\u6570\u5b57\uff0c\u5982\u679c\u54c8\u5e0c\u8868\u91cc\u8fd8\u6ca1\u6709\u8fd9\u4e2a\u6570\u5b57\uff0c\u5c31\u628a\u5b83\u52a0\u5165\u5230\u54c8\u5e0c\u8868\u3002\u5982\u679c\u54c8\u5e0c\u8868\u91cc\u5df2\u7ecf\u5b58\u5728\u8fd9\u4e2a\u6570\u5b57\uff0c\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u5b83\u63d0\u9ad8\u65f6\u95f4\u6548\u7387\u662f\u4ee5\u4e00\u4e2a\u5927\u5c0f\u4e3aO(n)\u7684\u54c8\u5e0c\u8868\u4e3a\u4ee3\u4ef7\u7684\u3002 \u89e3\u6cd5\u4e09: \u6211\u4eec\u6ce8\u610f\u5230\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u57280~n-1\u7684\u8303\u56f4\u5185\u3002\u5982\u679c\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\u6570\u7ec4i\u5c06\u51fa\u73b0\u5728\u4e0b\u6807\u4e3ai\u7684\u4f4d\u7f6e\u3002\u7531\u4e8e\u6570\u7ec4\u4e2d\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u6709\u4e9b\u4f4d\u7f6e\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u6570\u5b57\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u91cd\u6392\u6570\u7ec4\uff0c\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u7ec4\uff0c\u5f53\u626b\u63cf\u5230\u4e0b\u6807i\u65f6\uff0c\u5224\u65ad\u6570\u7ec4\u4e0b\u6807i\u7684\u5143\u7d20\u662f\u5426\u548ci\u76f8\u540c\uff08arr[i] == i\uff09\uff0c\u4e0d\u76f8\u540c\uff0c\u5219\u628a\u5b83\u548c\u7b2carr[i]\u4e2a\u6570\u8fdb\u884c\u4ea4\u6362\uff08swap(arr[i], arr[arr[i]])\uff09\uff0c\u76f4\u5230arr[i]\u548ci\u540c\u7b49\uff0c\u628aarr[i]\u653e\u56de\u5c5e\u4e8e\u4ed6\u7684\u4f4d\u7f6e\u3002\u91cd\u590d\u4e0a\u8ff0\u7684\u64cd\u4f5c\u3002 \u76f4\u5230\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 arr [] = { 2 , 3 , 1 , 0 , 2 , 5 , 3 } i = 0 ; arr [ i ] != i ; swap ( arr [ i ], arr [ arr [ i ]]); // {1, 3, 2, 0, 2, 5, 3} arr [ i ] != i ; swap ( arr [ i ], arr [ arr [ i ]]); // {3, 1, 2, 0, 2, 5, 3} arr [ i ] != i ; swap ( arr [ i ], arr [ arr [ i ]]); // {0, 1, 2, 3, 2, 5, 3} i = 1 ; arr [ i ] == i ; i = 2 ; arr [ i ] == i ; i = 3 ; arr [ i ] == i ; i = 4 ; arr [ i ] != i ; arr [ arr [ i ]] = arr [ i ]; return arr [ i ]; Answer c++: array_repeat.cpp python: array_repeat.py \u672c\u9898\u8003\u70b9\uff1a \u8001\u67e5\u5e94\u8058\u8005\u5bf9\u4e00\u7ef4\u6570\u7ec4\u7684\u7406\u89e3\u53ca\u7f16\u7a0b\u80fd\u529b\u3002\u4e00\u7ef4\u6570\u7ec4\u5728\u5185\u5b58\u79cd\u5360\u636e\u8fde\u7eed\u7684\u7a7a\u95f4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0b\u6807\u5b9a\u4f4d\u5bf9\u5e94\u7684\u5143\u7d20\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002\u5f53\u5e94\u8058\u8005\u53d1\u73b0\u95ee\u9898\u6bd4\u8f83\u590d\u6742\u65f6\u3002 \u80fd\u4e0d\u80fd\u901a\u8fc7\u5177\u4f53\u7684\u4f8b\u5b50\u627e\u51fa\u5176\u4e2d\u7684\u89c4\u5f8b\uff0c\u662f\u80fd\u5426\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002 \u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57 \u00b6 Question \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an+1\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57281~n\u7684\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u6570\u7ec4\u79cd\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002 \u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u8f93\u5165\u7684\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a8\u7684\u6570\u7ec4{2, 3, 5, 4, 3, 2, 6, 7}, \u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u91cd\u590d\u7684\u6570\u5b572\u6216\u80053\u3002 Tip \u89e3\u6cd5\u4e00: \u770b\u8d77\u6765\u548c\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u4fee\u6539\u8f93\u5165\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2an+1\u7684\u6570\u7ec4\u4e3a\u54c8\u5e0c\u8868\u6765\u8f85\u52a9\uff0c\u5219\u9700\u8981O(n)\u7684\u7a7a\u95f4\uff0cO(n)\u7684\u65f6\u95f4\u3002 \u89e3\u6cd5\u4e8c: \u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5O(1)\u7684\u7a7a\u95f4\uff0c\u6211\u4eec\u628a\u4ece1-n\u662f\u6570\u5b57\u4ece\u4e2d\u95f4\u7684\u6570\u5b57m\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u524d\u4e00\u534a\u4e3a1 m\uff0c\u540e\u4e00\u534a\u4e3am+1 n\uff0c\u5982\u679c1~m\u7684\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7m\uff0c\u90a3\u4e48\u8fd9\u4e00\u534a\u80af\u5b9a\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5426\u5219\u53e6\u4e00\u534a\u80af\u5b9a\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u628a\u91cd\u590d\u7684\u533a\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u548c\u4e8c\u5206\u6cd5\u5f88\u50cf\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u6b65\u7edf\u8ba1\u533a\u95f4\u91cc\u7684\u6570\u5b57\u3002 \u6bcf\u6b21\u7edf\u8ba1\u8303\u56f4\u5185\u7684\u6570\u5b57O(n)\uff0c\u4e8c\u5206\u67e5\u627eO(lgn)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlgn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u8fd9\u662f\u5229\u7528\u65f6\u95f4\u6362\u7a7a\u95f4\u7684\u7b97\u6cd5\u3002 int nums [] = { 2 , 3 , 5 , 4 , 3 , 2 , 6 , 7 }; // length = 8; //mid=(1+8)/2, 1~4 \u51fa\u73b0\u4e865\u6b21\uff0c5-7 \u51fa\u73b0\u4e863\u6b21\uff0c\u91cd\u590d\u6570\u5b57\u57281~4\u5185 //mid=(1+4)/2, 1~2 \u51fa\u73b0\u4e862\u6b21\uff0c3-4 \u51fa\u73b0\u4e863\u6b21\uff0c\u91cd\u590d\u6570\u5b57\u57283~4\u5185 //mid=(3+4)/2, 3 \u51fa\u73b0\u4e862\u6b21\uff0c4 \u51fa\u73b0\u4e861\u6b21\uff0c\u91cd\u590d\u6570\u5b57\u4e3a3 \u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u8fd9\u79cd\u7b97\u6cd5\u5e76\u4e0d\u80fd\u627e\u51fa\u6240\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u4e0a\u4f8b\uff0c\u6211\u4eec\u53ea\u627e\u51fa\u4e863\uff0c\u5176\u5b9e2\u4e5f\u662f\u91cd\u590d\u7684\uff0c\u6240\u4ee5\u5982\u679c\u9762\u8bd5\u5b98\u8981\u6c42\u7684\u529f\u80fd\u4e0d\u540c\u6216\u662f\u6027\u80fd\u8981\u6c42\u4e0d\u540c\uff0c\u6211\u4eec\u9009\u62e9\u7684\u7b97\u6cd5\u4e5f\u4e0d\u76f8\u540c\uff0c\u8fd9\u5c31\u9700\u8981\u548c\u9762\u8bd5\u5b98\u6c9f\u901a\u3002 Answer c++: array_repeat2.cpp python: array_repeat2.py \u672c\u9898\u8003\u67e5\uff1a \u8003\u67e5\u4e00\u7ef4\u6570\u7ec4\u7684\u7406\u89e3\u548c\u7f16\u7a0b\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u5206\u6cd5\u7684\u7406\u89e3\uff0c\u5e76\u80fd\u5feb\u901f\u3001\u6b63\u786e\u5730\u5b9e\u73b0\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u6c9f\u901a\u80fd\u529b\uff0c\u5e94\u8058\u8005\u53ea\u6709\u5177\u5907\u826f\u597d\u7684\u6c9f\u901a\u80fd\u529b\uff0c\u624d\u80fd\u5145\u5206\u4e86\u89e3\u9762\u8bd5\u5b98\u7684\u9700\u6c42\uff0c\u4ece\u800c\u9488\u5bf9\u6027\u5730\u9009\u62e9\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u3002 \u9762\u8bd5\u98984: \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u00b6 Question \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 Tip \u89e3\u6cd5\u4e00: \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u76ee\u6807\u5143\u7d20\u662f\u5426\u5728\u4e8c\u7ef4\u6570\u7ec4\u5185\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(m*n) , \u7a7a\u95f4\u590d\u6742\u5ea6O(1); \u89e3\u6cd5\u4e8c: \u627e\u5230\u76ee\u6807\u5143\u7d20\u6240\u5728\u7684\u5217\uff0c\u904d\u5386\u76ee\u6807\u5217\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(m+n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1); \u89e3\u6cd5\u4e09: \u4ece\u6700\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u9996\u5148\uff0c\u6211\u4eec\u9009\u53d6\u6570\u7ec4\u53f3\u4e0a\u89d2\u76849\uff0c\u7531\u4e8e9>7, \u5e76\u4e149\u8fd8\u662f\u7b2c4\u5217\u7684\u6700\u5c0f\u7684\u6570\uff0c\u56e0\u6b647\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728\u6570\u5b579\u6240\u5728\u5217\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u8fd9\u4e00\u5217\u4ece\u9700\u8981\u8003\u8651\u7684\u533a\u57df\u8e22\u51fa\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5982\u4e0b\u5982\u6240\u793a\u3002 Answer c++: find_number_in_2D_array.cpp python: find_number_in_2D_array.py","title":"3.1 \u6570\u7ec4"},{"location":"%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84/#1","text":"\u5728c/c++\u4e2d\uff0c\u6570\u7ec4\u548c\u6307\u9488\u662f\u65e2\u76f8\u5173\u53c8\u6709\u533a\u522b\u7684\u6982\u5ff5\uff0c\u5f53\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u5176\u6570\u7ec4\u7684\u540d\u5b57\u4e5f\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u8be5\u6307\u9488\u6307\u5411\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6307\u9488\u6765\u8bbf\u95ee\u6570\u7ec4\u3002 c/c++\u6ca1\u6709\u8bb0\u5f55\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u6b64\u5728\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u65f6\uff0c\u7a0b\u5e8f\u5458\u8981\u786e\u4fdd\u6ca1\u6709\u8d85\u51fa\u6570\u7ec4\u7684\u8fb9\u754c\u3002 \u8fd0\u884c\u4e0b\u9762\u4ee3\u7801\uff0c\u8bf7\u95ee\u8f93\u51fa\u4ec0\u4e48\uff1f #include <iostream> using namespace std ; int GetSize ( int data []) { return sizeof ( data ); } int main ( int argc , const char * argv []) { int data1 [] = { 1 , 2 , 3 , 4 , 5 }; int size1 = sizeof ( data1 ); int * data2 = data1 ; int size2 = sizeof ( data2 ); int size3 = GetSize ( data1 ); cout << size1 << endl << size2 << endl << size3 << endl ; return 0 ; } \u7b54\u6848\u662f\uff1a 20\uff0c 8\uff0c 8\uff0cdata\u662f\u4e00\u4e2a\u6570\u7ec4\uff0csizeof(data)\u6c42\u7684\u662f\u6570\u7ec4\u7684\u5927\u5c0f\uff0c5\u4e2a\u6574\u6570\uff0c\u6bcf\u4e2a\u6574\u6570\u53604\u4e2a\u5b57\u8282\uff0c\u56e0\u6b64\u536020\u4e2a\u5b57\u8282\u3002 data2\u662f\u6307\u9488\uff0c\u6307\u9488\u572832\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u53604\u4f4d\uff0c64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u53608\u4f4d\u3002\u5728c/c++\u4e2d\uff0c\u5f53\u6570\u7ec4\u5f53\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u65f6\uff0c\u6570\u7ec4\u5c31\u81ea\u52a8\u9000\u5316\u4e3a\u540c\u7c7b\u578b\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u51fd\u6570GetSize\u7684\u53c2\u6570data\u88ab\u58f0\u660e\u4e3a\u6570\u7ec4\uff0c\u4f46\u4ed6\u4f1a\u9000\u5316\u4e3a\u6307\u9488\u3002","title":"\u5173\u952e\u70b91"},{"location":"%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84/#3","text":"","title":"\u9762\u8bd5\u98983:"},{"location":"%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84/#_1","text":"Question \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280~n-1\u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4{2,3,1,0,2,5,3},\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u91cd\u590d\u7684\u6570\u5b572\u6216\u80053\u3002 Tip \u89e3\u6cd5\u4e00: \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u529e\u6cd5\u662f\u5148\u628a\u8f93\u5165\u7684\u6570\u7ec4\u6392\u5e8f\u3002\u4ece\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u53ea\u9700\u8981\u626b\u63cf\u6392\u5e8f\u7684\u6570\u7ec4\u5c31\u53ef\u4ee5\u4e86\u3002\u6392\u5e8f\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u9700\u8981O(nlgn)\u7684\u65f6\u95f4\u3002 \u89e3\u6cd5\u4e8c: \u8fd8\u53ef\u4ee5\u5229\u7528\u54c8\u5e0c\u8868\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ece\u5934\u5230\u5c3e\u6309\u987a\u5e8f\u626b\u63cf\u6570\u7ec4\u7684\u6bcf\u4e2a\u6570\u5b57\uff0c\u6bcf\u626b\u63cf\u5230\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u90fd\u53ef\u4ee5\u7528O(1)\u7684\u65f6\u95f4\u6765\u5224\u65ad\u54c8\u5e0c\u8868\u91cc\u662f\u5426\u5df2\u7ecf\u5305\u542b\u4e86\u8be5\u6570\u5b57\uff0c\u5982\u679c\u54c8\u5e0c\u8868\u91cc\u8fd8\u6ca1\u6709\u8fd9\u4e2a\u6570\u5b57\uff0c\u5c31\u628a\u5b83\u52a0\u5165\u5230\u54c8\u5e0c\u8868\u3002\u5982\u679c\u54c8\u5e0c\u8868\u91cc\u5df2\u7ecf\u5b58\u5728\u8fd9\u4e2a\u6570\u5b57\uff0c\u5c31\u627e\u5230\u4e86\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u4f46\u5b83\u63d0\u9ad8\u65f6\u95f4\u6548\u7387\u662f\u4ee5\u4e00\u4e2a\u5927\u5c0f\u4e3aO(n)\u7684\u54c8\u5e0c\u8868\u4e3a\u4ee3\u4ef7\u7684\u3002 \u89e3\u6cd5\u4e09: \u6211\u4eec\u6ce8\u610f\u5230\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u57280~n-1\u7684\u8303\u56f4\u5185\u3002\u5982\u679c\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\u6570\u7ec4i\u5c06\u51fa\u73b0\u5728\u4e0b\u6807\u4e3ai\u7684\u4f4d\u7f6e\u3002\u7531\u4e8e\u6570\u7ec4\u4e2d\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u6709\u4e9b\u4f4d\u7f6e\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u6570\u5b57\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u91cd\u6392\u6570\u7ec4\uff0c\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u7ec4\uff0c\u5f53\u626b\u63cf\u5230\u4e0b\u6807i\u65f6\uff0c\u5224\u65ad\u6570\u7ec4\u4e0b\u6807i\u7684\u5143\u7d20\u662f\u5426\u548ci\u76f8\u540c\uff08arr[i] == i\uff09\uff0c\u4e0d\u76f8\u540c\uff0c\u5219\u628a\u5b83\u548c\u7b2carr[i]\u4e2a\u6570\u8fdb\u884c\u4ea4\u6362\uff08swap(arr[i], arr[arr[i]])\uff09\uff0c\u76f4\u5230arr[i]\u548ci\u540c\u7b49\uff0c\u628aarr[i]\u653e\u56de\u5c5e\u4e8e\u4ed6\u7684\u4f4d\u7f6e\u3002\u91cd\u590d\u4e0a\u8ff0\u7684\u64cd\u4f5c\u3002 \u76f4\u5230\u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 arr [] = { 2 , 3 , 1 , 0 , 2 , 5 , 3 } i = 0 ; arr [ i ] != i ; swap ( arr [ i ], arr [ arr [ i ]]); // {1, 3, 2, 0, 2, 5, 3} arr [ i ] != i ; swap ( arr [ i ], arr [ arr [ i ]]); // {3, 1, 2, 0, 2, 5, 3} arr [ i ] != i ; swap ( arr [ i ], arr [ arr [ i ]]); // {0, 1, 2, 3, 2, 5, 3} i = 1 ; arr [ i ] == i ; i = 2 ; arr [ i ] == i ; i = 3 ; arr [ i ] == i ; i = 4 ; arr [ i ] != i ; arr [ arr [ i ]] = arr [ i ]; return arr [ i ]; Answer c++: array_repeat.cpp python: array_repeat.py \u672c\u9898\u8003\u70b9\uff1a \u8001\u67e5\u5e94\u8058\u8005\u5bf9\u4e00\u7ef4\u6570\u7ec4\u7684\u7406\u89e3\u53ca\u7f16\u7a0b\u80fd\u529b\u3002\u4e00\u7ef4\u6570\u7ec4\u5728\u5185\u5b58\u79cd\u5360\u636e\u8fde\u7eed\u7684\u7a7a\u95f4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0b\u6807\u5b9a\u4f4d\u5bf9\u5e94\u7684\u5143\u7d20\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u95ee\u9898\u7684\u80fd\u529b\u3002\u5f53\u5e94\u8058\u8005\u53d1\u73b0\u95ee\u9898\u6bd4\u8f83\u590d\u6742\u65f6\u3002 \u80fd\u4e0d\u80fd\u901a\u8fc7\u5177\u4f53\u7684\u4f8b\u5b50\u627e\u51fa\u5176\u4e2d\u7684\u89c4\u5f8b\uff0c\u662f\u80fd\u5426\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\u3002","title":"\u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84/#_2","text":"Question \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3an+1\u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57281~n\u7684\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u6570\u7ec4\u79cd\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\u3002 \u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u8f93\u5165\u7684\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a8\u7684\u6570\u7ec4{2, 3, 5, 4, 3, 2, 6, 7}, \u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u91cd\u590d\u7684\u6570\u5b572\u6216\u80053\u3002 Tip \u89e3\u6cd5\u4e00: \u770b\u8d77\u6765\u548c\u4e0a\u4e00\u9898\u7c7b\u4f3c\uff0c\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u4fee\u6539\u8f93\u5165\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2an+1\u7684\u6570\u7ec4\u4e3a\u54c8\u5e0c\u8868\u6765\u8f85\u52a9\uff0c\u5219\u9700\u8981O(n)\u7684\u7a7a\u95f4\uff0cO(n)\u7684\u65f6\u95f4\u3002 \u89e3\u6cd5\u4e8c: \u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5O(1)\u7684\u7a7a\u95f4\uff0c\u6211\u4eec\u628a\u4ece1-n\u662f\u6570\u5b57\u4ece\u4e2d\u95f4\u7684\u6570\u5b57m\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u524d\u4e00\u534a\u4e3a1 m\uff0c\u540e\u4e00\u534a\u4e3am+1 n\uff0c\u5982\u679c1~m\u7684\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7m\uff0c\u90a3\u4e48\u8fd9\u4e00\u534a\u80af\u5b9a\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u5426\u5219\u53e6\u4e00\u534a\u80af\u5b9a\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u628a\u91cd\u590d\u7684\u533a\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u548c\u4e8c\u5206\u6cd5\u5f88\u50cf\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u6b65\u7edf\u8ba1\u533a\u95f4\u91cc\u7684\u6570\u5b57\u3002 \u6bcf\u6b21\u7edf\u8ba1\u8303\u56f4\u5185\u7684\u6570\u5b57O(n)\uff0c\u4e8c\u5206\u67e5\u627eO(lgn)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlgn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u8fd9\u662f\u5229\u7528\u65f6\u95f4\u6362\u7a7a\u95f4\u7684\u7b97\u6cd5\u3002 int nums [] = { 2 , 3 , 5 , 4 , 3 , 2 , 6 , 7 }; // length = 8; //mid=(1+8)/2, 1~4 \u51fa\u73b0\u4e865\u6b21\uff0c5-7 \u51fa\u73b0\u4e863\u6b21\uff0c\u91cd\u590d\u6570\u5b57\u57281~4\u5185 //mid=(1+4)/2, 1~2 \u51fa\u73b0\u4e862\u6b21\uff0c3-4 \u51fa\u73b0\u4e863\u6b21\uff0c\u91cd\u590d\u6570\u5b57\u57283~4\u5185 //mid=(3+4)/2, 3 \u51fa\u73b0\u4e862\u6b21\uff0c4 \u51fa\u73b0\u4e861\u6b21\uff0c\u91cd\u590d\u6570\u5b57\u4e3a3 \u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u8fd9\u79cd\u7b97\u6cd5\u5e76\u4e0d\u80fd\u627e\u51fa\u6240\u6709\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u4e0a\u4f8b\uff0c\u6211\u4eec\u53ea\u627e\u51fa\u4e863\uff0c\u5176\u5b9e2\u4e5f\u662f\u91cd\u590d\u7684\uff0c\u6240\u4ee5\u5982\u679c\u9762\u8bd5\u5b98\u8981\u6c42\u7684\u529f\u80fd\u4e0d\u540c\u6216\u662f\u6027\u80fd\u8981\u6c42\u4e0d\u540c\uff0c\u6211\u4eec\u9009\u62e9\u7684\u7b97\u6cd5\u4e5f\u4e0d\u76f8\u540c\uff0c\u8fd9\u5c31\u9700\u8981\u548c\u9762\u8bd5\u5b98\u6c9f\u901a\u3002 Answer c++: array_repeat2.cpp python: array_repeat2.py \u672c\u9898\u8003\u67e5\uff1a \u8003\u67e5\u4e00\u7ef4\u6570\u7ec4\u7684\u7406\u89e3\u548c\u7f16\u7a0b\u80fd\u529b\u3002 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u5206\u6cd5\u7684\u7406\u89e3\uff0c\u5e76\u80fd\u5feb\u901f\u3001\u6b63\u786e\u5730\u5b9e\u73b0\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u3002 \u8003\u67e5\u5e94\u8058\u8005\u7684\u6c9f\u901a\u80fd\u529b\uff0c\u5e94\u8058\u8005\u53ea\u6709\u5177\u5907\u826f\u597d\u7684\u6c9f\u901a\u80fd\u529b\uff0c\u624d\u80fd\u5145\u5206\u4e86\u89e3\u9762\u8bd5\u5b98\u7684\u9700\u6c42\uff0c\u4ece\u800c\u9488\u5bf9\u6027\u5730\u9009\u62e9\u7b97\u6cd5\u89e3\u51b3\u95ee\u9898\u3002","title":"\u4e0d\u4fee\u6539\u6570\u7ec4\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57"},{"location":"%E5%89%91%E6%8C%87offer/%E6%95%B0%E7%BB%84/#4","text":"Question \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 Tip \u89e3\u6cd5\u4e00: \u904d\u5386\u6570\u7ec4\uff0c\u5224\u65ad\u76ee\u6807\u5143\u7d20\u662f\u5426\u5728\u4e8c\u7ef4\u6570\u7ec4\u5185\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(m*n) , \u7a7a\u95f4\u590d\u6742\u5ea6O(1); \u89e3\u6cd5\u4e8c: \u627e\u5230\u76ee\u6807\u5143\u7d20\u6240\u5728\u7684\u5217\uff0c\u904d\u5386\u76ee\u6807\u5217\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(m+n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1); \u89e3\u6cd5\u4e09: \u4ece\u6700\u53f3\u4e0a\u89d2\u5f00\u59cb\u627e\uff0c\u9996\u5148\uff0c\u6211\u4eec\u9009\u53d6\u6570\u7ec4\u53f3\u4e0a\u89d2\u76849\uff0c\u7531\u4e8e9>7, \u5e76\u4e149\u8fd8\u662f\u7b2c4\u5217\u7684\u6700\u5c0f\u7684\u6570\uff0c\u56e0\u6b647\u4e0d\u53ef\u80fd\u51fa\u73b0\u5728\u6570\u5b579\u6240\u5728\u5217\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u8fd9\u4e00\u5217\u4ece\u9700\u8981\u8003\u8651\u7684\u533a\u57df\u8e22\u51fa\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5982\u4e0b\u5982\u6240\u793a\u3002 Answer c++: find_number_in_2D_array.cpp python: find_number_in_2D_array.py","title":"\u9762\u8bd5\u98984: \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"%E5%89%91%E6%8C%87offer/%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F/","text":"\u67e5\u627e\u548c\u6392\u5e8f\u90fd\u662f\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\u7ecf\u5e38\u7528\u5230\u7684\u7b97\u6cd5\u3002 \u67e5\u627e\u76f8\u5bf9\u7b80\u5355, **\u67e5\u627e**\u5305\u62ec \u987a\u5e8f\u67e5\u627e\uff0c\u4e8c\u5206\u67e5\u627e\uff0c\u54c8\u5e0c\u8868\u67e5\u627e\uff0c\u4e8c\u53c9\u6811\u67e5\u627e \u5728\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u4e0d\u7ba1\u662f\u7528\u5faa\u73af\u8fd8\u662f\u9012\u5f52\uff0c\u9762\u8bd5\u5b98\u90fd\u671f\u5f85\u5e94\u8058\u8005\u80fd\u591f\u4fe1\u624b\u634f\u6765\u5199\u51fa\u5b8c\u6574\u7684\u4e8c\u5206\u67e5\u627e\u4ee3\u7801, \u5426\u5219\u6765\u9762\u8bd5\u7684\u5174\u8da3\u90fd\u6ca1\u6709 \u54c8\u5e0c\u8868\u548c\u4e8c\u53c9\u6392\u5e8f\u6811\u67e5\u627e\u7684\u91cd\u70b9\u5728\u4e8e\u8003\u67e5\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u800c\u4e0d\u662f\u7b97\u6cd5 \u54c8\u5e0c\u8868\u6700\u6ce8\u610f\u7684\u4f18\u70b9\u662f\u6211\u4eec\u80fd\u5728O(1)\u7684\u65f6\u95f4\u5185\u67e5\u627e\u67d0\u4e00\u5143\u7d20, \u662f\u6548\u7387\u6700\u9ad8\u7684\u67e5\u627e\u65b9\u5f0f, \u4f46\u7f3a\u70b9\u662f\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u6765\u5b9e\u73b0\u54c8\u5e0c\u8868. \u4e0e\u4e8c\u53c9\u6392\u5e8f\u6811\u67e5\u627e\u7b97\u6cd5\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u662f\u4e8c\u53c9\u641c\u7d22\u6811(\u9762\u8bd5\u989833, 36) \u6392\u5e8f\u76f8\u5bf9\u590d\u6742 \u9762\u8bd5\u5b98\u7ecf\u5e38\u4f1a\u8981\u6c42\u5e94\u8058\u8005\u6bd4\u8f83\u63d2\u5165\u6392\u5e8f, \u5192\u6ce1\u6392\u5e8f, \u5f52\u5e76\u6392\u5e8f, \u5feb\u901f\u6392\u5e8f\u7b49\u4e0d\u540c\u7b97\u6cd5\u7684\u4f18\u52a3. \u5f3a\u70c8\u5efa\u8bae\u5e94\u8058\u8005\u5728\u51c6\u5907\u9762\u8bd5\u7684\u65f6\u5019, \u4e00\u5b9a\u8981\u5bf9\u5404\u79cd\u6392\u5e8f\u7b97\u6cd5\u7684\u7279\u70b9\u70c2\u719f\u4e8e\u80f8, \u80fd\u591f\u4ece\u989d\u5916\u7a7a\u95f4\u6d88\u8017, \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6700\u5dee\u65f6\u95f4\u590d\u6742\u5ea6\u7b49\u65b9\u9762\u53bb\u6bd4\u8f83\u4ed6\u4eec\u7684\u4f18\u7f3a\u70b9 \u5f88\u591a\u516c\u53f8\u7684\u9762\u8bd5\u5b98\u559c\u6b22\u5728\u9762\u8bd5\u73af\u8282\u8981\u6c42\u5e94\u8058\u8005\u5199\u51fa\u5feb\u901f\u6392\u5e8f\u7684\u4ee3\u7801, \u5e94\u8058\u8005\u4e0d\u59a8\u81ea\u5df1\u5199\u4e00\u4e2a\u5feb\u901f\u6392\u5e8f\u7684\u51fd\u6570\u5e76\u6d4b\u8bd5. \u5feb\u901f\u6392\u5e8f \u00b6 \u5feb\u901f\u6392\u5e8f\u7684\u601d\u60f3: \u9009\u53d6\u4e00\u4e2a\u4e3b\u5143, \u904d\u5386\u6570\u7ec4, \u5c06\u5927\u4e8e\u4e3b\u5143\u7684\u6570\u653e\u5728\u4e3b\u5143\u7684\u53f3\u8fb9, \u5c06\u5c0f\u4e8e\u4e3b\u5143\u7684\u6570\u653e\u5728\u4e3b\u5143\u7684\u5de6\u8fb9, \u518d\u9012\u5f52\u5bf9\u4e24\u904d\u7684\u5206\u533a\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c. void Swap ( int & a , int & b ) { int t = a ; a = b ; b = t ; } int Partion ( int * arr , const int begin , const int end ); void QuickSort ( int * arr , const int begin , const int end ) { if ( begin < end ) { int pivot_index = Partion ( arr , begin , end ); QuickSort ( arr , begin , pivot_index ); QuickSort ( arr , pivot_index + 1 , end ); } } int Partion ( int * arr , const int begin , const int end ) { int pivot_index = begin ; int pivot = arr [ pivot_index ]; int left = begin + 1 ; int right = end - 1 ; while ( true ) { while ( left <= right && arr [ left ] <= pivot ) left ++ ; while ( left <= right && arr [ right ] > pivot ) right -- ; if ( left > right ) break ; else Swap ( arr [ left ], arr [ right ]); } Swap ( arr [ pivot_index ], arr [ right ]); return right ; } \u4e0d\u540c\u7684\u6392\u5e8f\u7b97\u6cd5\u9002\u7528\u7684\u573a\u5408\u4e5f\u4e0d\u5c3d\u76f8\u540c, \u5feb\u901f\u6392\u5e8f\u867d\u7136\u603b\u4f53\u7684\u5e73\u5747\u6548\u7387\u6700\u597d, \u4f46\u4e5f\u4e0d\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u6700\u4f18\u7684\u7b97\u6cd5, \u6bd4\u5982\u6570\u7ec4\u672c\u8eab\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86, \u800c\u6bcf\u4e00\u8f6e\u6392\u5e8f\u7684\u65f6\u5019\u90fd\u4ee5\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4f5c\u4e3a\u6807\u51c6, \u6b64\u65f6\u5feb\u901f\u6392\u5e8f\u7684\u6548\u7387\u53ea\u6709O(n^2). \u56e0\u6b64, \u5728\u8fd9\u79cd\u573a\u5408\u5feb\u901f\u6392\u5e8f\u5c31\u4e0d\u662f\u6700\u4f18\u7684\u7b97\u6cd5, \u5728\u9762\u8bd5\u7684\u65f6\u5019, \u5982\u679c\u9762\u8bd5\u5b98\u8981\u6c42\u5b9e\u73b0\u4e00\u4e2a\u6392\u5e8f\u7b97\u6cd5, \u90a3\u4e48\u5e94\u8058\u8005\u4e00\u5b9a\u8981\u95ee\u6e05\u695a\u8fd9\u4e2a\u6392\u5e8f\u7684\u5e94\u7528\u73af\u5883\u662f\u4ec0\u4e48, \u6709\u54ea\u4e9b\u7ea6\u675f\u6761\u4ef6, \u5728\u5f97\u5230\u8db3\u591f\u591a\u7684\u4fe1\u606f\u4e4b\u540e\u518d\u9009\u62e9\u6700\u5408\u9002\u7684\u7b97\u6cd5. \u9762\u8bd5\u989811: \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 \u00b6 Question \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e, \u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c; \u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c, \u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20; \u4f8b\u5982, \u6570\u7ec4{3, 4, 5, 1, 2} \u4e3a {1, 2, 3, 4, 5} \u7684\u4e00\u4e2a\u65cb\u8f6c, \u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1 \u4f20\u9001\u95e8\uff0cleetcode \u5b98\u65b9\u89c6\u9891\u9898\u89e3\uff0c\u5f88\u8be6\u7ec6: https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s/ \u53c2\u8003\u4ee3\u7801\uff1a FindRotatedArrayMin","title":"4.2 \u67e5\u627e\u548c\u6392\u5e8f"},{"location":"%E5%89%91%E6%8C%87offer/%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F/#_1","text":"\u5feb\u901f\u6392\u5e8f\u7684\u601d\u60f3: \u9009\u53d6\u4e00\u4e2a\u4e3b\u5143, \u904d\u5386\u6570\u7ec4, \u5c06\u5927\u4e8e\u4e3b\u5143\u7684\u6570\u653e\u5728\u4e3b\u5143\u7684\u53f3\u8fb9, \u5c06\u5c0f\u4e8e\u4e3b\u5143\u7684\u6570\u653e\u5728\u4e3b\u5143\u7684\u5de6\u8fb9, \u518d\u9012\u5f52\u5bf9\u4e24\u904d\u7684\u5206\u533a\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c. void Swap ( int & a , int & b ) { int t = a ; a = b ; b = t ; } int Partion ( int * arr , const int begin , const int end ); void QuickSort ( int * arr , const int begin , const int end ) { if ( begin < end ) { int pivot_index = Partion ( arr , begin , end ); QuickSort ( arr , begin , pivot_index ); QuickSort ( arr , pivot_index + 1 , end ); } } int Partion ( int * arr , const int begin , const int end ) { int pivot_index = begin ; int pivot = arr [ pivot_index ]; int left = begin + 1 ; int right = end - 1 ; while ( true ) { while ( left <= right && arr [ left ] <= pivot ) left ++ ; while ( left <= right && arr [ right ] > pivot ) right -- ; if ( left > right ) break ; else Swap ( arr [ left ], arr [ right ]); } Swap ( arr [ pivot_index ], arr [ right ]); return right ; } \u4e0d\u540c\u7684\u6392\u5e8f\u7b97\u6cd5\u9002\u7528\u7684\u573a\u5408\u4e5f\u4e0d\u5c3d\u76f8\u540c, \u5feb\u901f\u6392\u5e8f\u867d\u7136\u603b\u4f53\u7684\u5e73\u5747\u6548\u7387\u6700\u597d, \u4f46\u4e5f\u4e0d\u662f\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u6700\u4f18\u7684\u7b97\u6cd5, \u6bd4\u5982\u6570\u7ec4\u672c\u8eab\u5df2\u7ecf\u6392\u597d\u5e8f\u4e86, \u800c\u6bcf\u4e00\u8f6e\u6392\u5e8f\u7684\u65f6\u5019\u90fd\u4ee5\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4f5c\u4e3a\u6807\u51c6, \u6b64\u65f6\u5feb\u901f\u6392\u5e8f\u7684\u6548\u7387\u53ea\u6709O(n^2). \u56e0\u6b64, \u5728\u8fd9\u79cd\u573a\u5408\u5feb\u901f\u6392\u5e8f\u5c31\u4e0d\u662f\u6700\u4f18\u7684\u7b97\u6cd5, \u5728\u9762\u8bd5\u7684\u65f6\u5019, \u5982\u679c\u9762\u8bd5\u5b98\u8981\u6c42\u5b9e\u73b0\u4e00\u4e2a\u6392\u5e8f\u7b97\u6cd5, \u90a3\u4e48\u5e94\u8058\u8005\u4e00\u5b9a\u8981\u95ee\u6e05\u695a\u8fd9\u4e2a\u6392\u5e8f\u7684\u5e94\u7528\u73af\u5883\u662f\u4ec0\u4e48, \u6709\u54ea\u4e9b\u7ea6\u675f\u6761\u4ef6, \u5728\u5f97\u5230\u8db3\u591f\u591a\u7684\u4fe1\u606f\u4e4b\u540e\u518d\u9009\u62e9\u6700\u5408\u9002\u7684\u7b97\u6cd5.","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"%E5%89%91%E6%8C%87offer/%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F/#11","text":"Question \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e, \u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c; \u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c, \u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20; \u4f8b\u5982, \u6570\u7ec4{3, 4, 5, 1, 2} \u4e3a {1, 2, 3, 4, 5} \u7684\u4e00\u4e2a\u65cb\u8f6c, \u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1 \u4f20\u9001\u95e8\uff0cleetcode \u5b98\u65b9\u89c6\u9891\u9898\u89e3\uff0c\u5f88\u8be6\u7ec6: https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s/ \u53c2\u8003\u4ee3\u7801\uff1a FindRotatedArrayMin","title":"\u9762\u8bd5\u989811: \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"%E5%89%91%E6%8C%87offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/","text":"\u6808 \u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\u6570\u636e\u7ed3\u6784, \u5b83\u5728\u8ba1\u7b97\u673a\u9886\u57df\u88ab\u5e7f\u6cdb\u5e94\u7528 \u6bd4\u5982\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u7ed9\u6bcf\u4e2a\u7ebf\u7a0b\u521b\u5efa\u4e00\u4e2a\u6808\u6765\u5b58\u50a8\u51fd\u6570\u8c03\u7528\u65f6\u5404\u4e2a\u51fd\u6570\u7684\u53c2\u6570, \u8fd4\u56de\u5730\u5740\u53ca\u4e34\u65f6\u53d8\u91cf\u7b49 \u6808\u7684\u7279\u70b9\u662f\u540e\u8fdb\u5148\u51fa, \u6700\u540e\u88ab\u538b\u5165(push)\u6808\u7684\u5143\u7d20\u4f1a\u7b2c\u4e00\u4e2a\u88ab\u5f39\u51fa(pop), \u9762\u8bd5\u989831, \u6808\u7684\u538b\u5165, \u5f39\u51fa\u5e8f\u5217 \u901a\u5e38\u6808\u662f\u4e00\u4e2a\u4e0d\u8003\u8651\u6392\u5e8f\u7684\u6570\u636e\u7ed3\u6784, \u6211\u4eec\u9700\u8981O(n)\u65f6\u95f4\u624d\u80fd\u627e\u5230\u6700\u5927\u6700\u5c0f\u7684\u5143\u7d20. \u5982\u679c\u60f3\u8981\u5728O(1) \u65f6\u95f4\u5185\u5f97\u5230\u6808\u7684\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c, \u5219\u9700\u8981\u5bf9\u6808\u505a\u7279\u6b8a\u7684\u8bbe\u8ba1, \u9762\u8bd5\u989830, \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u961f\u5217 \u662f\u53e6\u5916\u4e00\u79cd\u5f88\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784, \u548c\u6808\u4e0d\u540c\u7684\u662f, \u961f\u5217\u7684\u7279\u70b9\u662f\u5148\u8fdb\u5148\u51fa, \u5373\u7b2c\u4e00\u4e2a\u8fdb\u5165\u961f\u5217\u7684\u5143\u7d20\u5c06\u4f1a\u7b2c\u4e00\u4e2a\u51fa\u6765. \u9762\u8bd5\u989832 \u6808\u548c\u961f\u5217\u867d\u7136\u662f\u7279\u70b9\u9488\u950b\u76f8\u5bf9\u7684\u6570\u636e\u7ed3\u6784, \u4f46\u6709\u610f\u601d\u7684\u662f\u5b83\u4eec\u5374\u76f8\u4e92\u8054\u7cfb. \u9762\u8bd5\u98989: \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u00b6 Question \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217, \u961f\u5217\u7684\u58f0\u660e\u5982\u4e0b, \u8bf7\u5b9e\u73b0\u5b83\u7684\u4e24\u4e2a\u51fd\u6570 appendTail \u548c deleteHead, \u5206\u522b\u5b8c\u6210\u5728\u961f\u5217\u5c3e\u90e8\u63d2\u5165\u8282\u70b9\u548c\u5728\u961f\u5217\u5934\u90e8\u5220\u9664\u8282\u70b9\u7684\u529f\u80fd. template < typename T > class CQueue { public : CQueue (); ~ CQueue (); void appendTail (); T deleteHead (); private : stack < T > stack1 ; stack < T > stack2 ; } Tip Answer template < typename T > void Queue < T >:: appendTail ( const T & val ) { stack1 . push ( val ); } template < typename T > T Queue < T >:: deleteHead () { if ( stack2 . size () <= 0 ) { if ( stack1 . size () <= 0 ) throw exception ( \"Queue is empty\" ); while ( stack1 . size () > 0 ) { T top = stack1 . top (); stack2 . push ( top ); stack1 . pop (); } } T top = stack2 . top (); stack2 . pop (); return top ; } void assert ( bool b ) { static int count = 0 ; if ( b ) cout << \"assert passed \" << ++ count << endl ; else throw exception ( \"assert failed\" ); } \u5b8c\u6574\u4ee3\u7801: stackBuildQueue \u672c\u9898\u8003\u70b9: \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6808\u548c\u961f\u5217\u7684\u7406\u89e3 \u8003\u67e5\u5e94\u8058\u8005\u5199\u4e0e\u6a21\u677f\u76f8\u5173\u4ee3\u7801\u7684\u80fd\u529b \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u4ee3\u7801\u7684\u80fd\u529b, \u672c\u9898\u89e3\u6cd5\u7684\u4ee3\u7801\u867d\u7136\u53ea\u6709\u4e8c\u5341\u51e0\u884c,\u4f46\u5f62\u6210\u6b63\u786e\u7684\u601d\u8def\u5374\u4e0d\u5bb9\u6613. \u5e94\u8058\u8005\u80fd\u5426\u901a\u8fc7\u5177\u4f53\u7684\u4f8b\u5b50\u5206\u6790\u95ee\u9898, \u901a\u8fc7\u753b\u56fe\u7684\u624b\u6bb5\u628a\u62bd\u8c61\u7684\u95ee\u9898\u5f62\u8c61\u5316. \u4ece\u800c\u89e3\u51b3\u8fd9\u4e2a\u76f8\u5bf9\u590d\u6742\u7684\u95ee\u9898, \u662f\u80fd\u5426\u987a\u5229\u901a\u8fc7\u9762\u8bd5\u7684\u5173\u952e. \u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u4e00\u4e2a\u6808 \u00b6 Question \u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u4e00\u4e2a\u6808 Tip Answer \u5b8c\u6574\u4ee3\u7801: QueueBuildStack","title":"3.5 \u6808\u548c\u961f\u5217"},{"location":"%E5%89%91%E6%8C%87offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#9","text":"Question \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217, \u961f\u5217\u7684\u58f0\u660e\u5982\u4e0b, \u8bf7\u5b9e\u73b0\u5b83\u7684\u4e24\u4e2a\u51fd\u6570 appendTail \u548c deleteHead, \u5206\u522b\u5b8c\u6210\u5728\u961f\u5217\u5c3e\u90e8\u63d2\u5165\u8282\u70b9\u548c\u5728\u961f\u5217\u5934\u90e8\u5220\u9664\u8282\u70b9\u7684\u529f\u80fd. template < typename T > class CQueue { public : CQueue (); ~ CQueue (); void appendTail (); T deleteHead (); private : stack < T > stack1 ; stack < T > stack2 ; } Tip Answer template < typename T > void Queue < T >:: appendTail ( const T & val ) { stack1 . push ( val ); } template < typename T > T Queue < T >:: deleteHead () { if ( stack2 . size () <= 0 ) { if ( stack1 . size () <= 0 ) throw exception ( \"Queue is empty\" ); while ( stack1 . size () > 0 ) { T top = stack1 . top (); stack2 . push ( top ); stack1 . pop (); } } T top = stack2 . top (); stack2 . pop (); return top ; } void assert ( bool b ) { static int count = 0 ; if ( b ) cout << \"assert passed \" << ++ count << endl ; else throw exception ( \"assert failed\" ); } \u5b8c\u6574\u4ee3\u7801: stackBuildQueue \u672c\u9898\u8003\u70b9: \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u6808\u548c\u961f\u5217\u7684\u7406\u89e3 \u8003\u67e5\u5e94\u8058\u8005\u5199\u4e0e\u6a21\u677f\u76f8\u5173\u4ee3\u7801\u7684\u80fd\u529b \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u4ee3\u7801\u7684\u80fd\u529b, \u672c\u9898\u89e3\u6cd5\u7684\u4ee3\u7801\u867d\u7136\u53ea\u6709\u4e8c\u5341\u51e0\u884c,\u4f46\u5f62\u6210\u6b63\u786e\u7684\u601d\u8def\u5374\u4e0d\u5bb9\u6613. \u5e94\u8058\u8005\u80fd\u5426\u901a\u8fc7\u5177\u4f53\u7684\u4f8b\u5b50\u5206\u6790\u95ee\u9898, \u901a\u8fc7\u753b\u56fe\u7684\u624b\u6bb5\u628a\u62bd\u8c61\u7684\u95ee\u9898\u5f62\u8c61\u5316. \u4ece\u800c\u89e3\u51b3\u8fd9\u4e2a\u76f8\u5bf9\u590d\u6742\u7684\u95ee\u9898, \u662f\u80fd\u5426\u987a\u5229\u901a\u8fc7\u9762\u8bd5\u7684\u5173\u952e.","title":"\u9762\u8bd5\u98989: \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"%E5%89%91%E6%8C%87offer/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/#_1","text":"Question \u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u4e00\u4e2a\u6808 Tip Answer \u5b8c\u6574\u4ee3\u7801: QueueBuildStack","title":"\u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u4e00\u4e2a\u6808"},{"location":"%E5%89%91%E6%8C%87offer/%E6%A0%91/","text":"\u6811\u662f\u4e00\u79cd\u5728\u5b9e\u9645\u7f16\u7a0b\u4e2d\u7ecf\u5e38\u9047\u5230\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5b83\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff1a \u9664\u6839\u8282\u70b9\u4e4b\u540e\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9 \u9664\u53f6\u5b50\u8282\u70b9\u4e4b\u540e\u6240\u6709\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u8282\u70b9\uff0c\u53f6\u8282\u70b9\u6ca1\u6709\u5b50\u8282\u70b9 \u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u7528\u6307\u9488\u94fe\u63a5 \u7531\u4e8e\u6811\u64cd\u4f5c\u4f1a\u6d89\u53ca\u5927\u91cf\u7684\u6307\u9488\uff0c\u56e0\u6b64\u4e0e\u6811\u6709\u5173\u7684\u9762\u8bd5\u9898\u90fd\u4e0d\u592a\u5bb9\u6613\u3002 \u9762\u8bd5\u7684\u65f6\u5019\u63d0\u5230\u7684\u6811\uff0c\u5927\u90e8\u5206\u662f\u4e8c\u53c9\u6811\u3002\u6240\u8c13\u4e8c\u53c9\u6811\u662f\u6811\u7684\u4e00\u79cd\u7279\u6b8a\u7ed3\u6784\uff0c\u5728\u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002 \u4e8c\u53c9\u6811\u4e2d\u6700\u91cd\u8981\u7684\u64cd\u4f5c\u83ab\u8fc7\u4e8e\u904d\u5386\uff0c\u5373\u6309\u7167\u67d0\u4e00\u987a\u5e8f\u8bbf\u95ee\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u3002 \u901a\u5e38\u6811\u6709\u5982\u4e0b\u51e0\u79cd\u904d\u5386\u65b9\u5f0f\u3002 \u524d\u5e8f\u904d\u5386, \u5148\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u5de6\u5b50\u8282\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u8282\u70b9 \u4e2d\u5e8f\u904d\u5386\uff0c\u5148\u8bbf\u95ee\u5de6\u5b50\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u53f3\u5b50\u8282\u70b9 \u540e\u5e8f\u904d\u5386\uff0c\u5148\u8bbf\u95ee\u5de6\u5b50\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u53f3\u5b50\u8282\u70b9\uff0c\u6700\u540e\u8bbf\u95ee\u6839\u8282\u70b9 \u8fd93\u4e2d\u904d\u5386\u90fd\u6709\u9012\u5f52\u548c\u5faa\u73af\u4e24\u79cd\u4e0d\u540c\u7684\u5b9e\u73b0\u65b9\u6cd5\u3002 \u6bcf\u79cd\u904d\u5386\u7684\u9012\u5f52\u5b9e\u73b0\u90fd\u6bd4\u5faa\u73af\u5b9e\u73b0\u7b80\u6d01\u5f88\u591a\u3002 \u5f88\u591a\u9762\u8bd5\u5b98\u559c\u6b22\u76f4\u63a5\u6216\u7b80\u4ecb\u8003\u67e5\u904d\u5386\uff08\u9762\u8bd5\u989826\uff0c34\uff0c 55\uff0c7\uff0c33\uff09 \u56e0\u6b64\u5e94\u8058\u8005\u5e94\u8be5\u5bf9\u8fd93\u4e2d\u904d\u5386\u76846\u79cd\u5b9e\u73b0\u65b9\u5f0f\u90fd\u4e86\u5982\u6307\u638c \u5e7f\u5ea6\u4f18\u5148\u904d\u5386 \u5148\u8bbf\u95ee\u6811\u7684\u7b2c\u4e00\u5c42\u8282\u70b9\uff0c\u518d\u8bbf\u95ee\u6811\u7684\u7b2c\u4e8c\u5c42\u8282\u70b9\uff0c\u4e00\u76f4\u8bbf\u95ee\u5230\u6700\u4e0b\u9762\u4e00\u5c42\u8282\u70b9\u3002 \u5728\u540c\u4e00\u5c42\u8282\u70b9\u4e2d\uff0c\u4ee5\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u4f9d\u6b21\u8bbf\u95ee\u3002 \u4e8c\u53c9\u6811 \u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5de6\u5b50\u8282\u70b9\u603b\u662f\u5c0f\u4e8e\u6216\u7b49\u4e8e\u6839\u8282\u70b9\uff0c\u800c\u53f3\u5b50\u8282\u70b9\u603b\u662f\u5927\u4e8e\u6216\u7b49\u4e8e\u6839\u8282\u70b9\u3002\uff08\u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868\uff0c\u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148\uff09 \u5806 \u6700\u5927\u5806\uff0c\u6839\u8282\u70b9\u7684\u503c\u6700\u5927 \u6700\u5c0f\u5806\uff0c\u6839\u8282\u70b9\u7684\u503c\u6700\u5c0f \u5feb\u901f\u627e\u5230\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c\u95ee\u9898\u90fd\u53ef\u4ee5\u540c\u5806\u6765\u89e3\u51b3 - \u7ea2\u9ed1\u6811\uff0c\u628a\u6811\u4e2d\u7684\u8282\u70b9\u5b9a\u4e49\u4e3a\u7ea2\u9ed1\u4e24\u79cd\u989c\u8272\uff0c\u5e76\u901a\u8fc7\u89c4\u5219\u786e\u4fdd\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7\u6700\u77ed\u8def\u5f84\u7684\u4e24\u500d\u3002\uff08\u6700\u5c0f\u7684k\u4e2a\u6570\uff09 \u5728c++\u7684STL\u4e2d\uff0cset, multiset, map, multimap\u7b49\u6570\u636e\u7ed3\u6784\u90fd\u662f\u57fa\u4e8e\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684\u3002 \u9762\u8bd5\u98987: \u91cd\u5efa\u4e8c\u53c9\u6811 \u00b6 Question \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u4e8c\u53c9\u6811\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1, 2, 4, 7, 3, 5, 6, 8}, \u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4, 7, 2, 1, 5, 3, 8, 6}, \u5219\u91cd\u5efa\u5982\u4e0b\u56fe\u6240\u793a\u7684\u4e8c\u53c9\u6811\u5e76\u8f93\u51fa\u5b83\u7684\u5934\u8282\u70b9\u3002 Tip \u5728\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u603b\u662f\u6811\u7684\u6839\u8282\u70b9\u7684\u503c\u3002 \u4f46\u5728\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u6839\u8282\u70b9\u7684\u503c\u5728\u5e8f\u5217\u7684\u4e2d\u95f4\uff0c\u5de6\u5b50\u6811\u7684\u8282\u70b9\u4f4d\u4e8e\u6839\u8282\u70b9\u503c\u7684\u5de6\u8fb9\uff0c\u800c\u53f3\u5b50\u6811\u7684\u503c\u4f4d\u4e8e\u6839\u8282\u70b9\u503c\u7684\u53f3\u8fb9\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u626b\u63cf\u4e2d\u5e8f\u5e8f\u5217\uff0c\u624d\u80fd\u627e\u5230\u6839\u8282\u70b9\u7684\u503c\u3002 \u5982\u56fe\u6240\u793a\uff0c\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u6570\u5b571\u5c31\u662f\u6839\u8282\u70b9\u7684\u503c\u3002\u626b\u63cf\u4e2d\u5e8f\u904d\u5386\uff0c\u5c31\u80fd\u786e\u5b9a\u6839\u8282\u70b9\u503c\u7684\u4f4d\u7f6e\uff0c\u6839\u636e\u4e2d\u5e8f\u904d\u5386\u7684\u7279\u70b9\uff0c\u5728\u6839\u8282\u70b9\u7684\u503c1\u524d\u9762\u76843\u4e2a\u6570\u5b57\u90fd\u662f\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u4f4d\u4e8e1\u540e\u9762\u7684\u6570\u5b57\u90fd\u662f\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c \u7531\u4e8e\u5728\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u67093\u4e2a\u6570\u5b57\u662f\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u56e0\u6b64\u5de6\u5b50\u6811\u5171\u67093\u4e2a\u5de6\u5b50\u8282\u70b9\uff0c\u540c\u6837\uff0c\u5728\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u6839\u8282\u70b9\u540e\u9762\u76843\u4e2a\u6570\u5b57\u5c31\u662f\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u518d\u540e\u9762\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5728\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u4e24\u4e2a\u5e8f\u5217\u4e2d\u5206\u522b\u627e\u5230\u4e86\u5de6\u53f3\u5b50\u6570\u5bf9\u5e94\u7684\u5b50\u5e8f\u5217\u3002 \u65e2\u7136\u6211\u4eec\u5206\u522b\u627e\u5230\u4e86\u5de6\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5206\u522b\u6784\u5efa\u5de6\u53f3\u5b50\u6811\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u63a5\u4e0b\u6765\u7684\u4e8b\u53ef\u4ee5\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u53bb\u5b9e\u73b0. Answer struct Node { int value ; Node * leftTree ; Node * rightTree ; }; Node * BuildCore ( int * startPre , int * endPre , int * startIn , int * endIn ) { // \u524d\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u503c\u62ff\u5230\u6839\u8282\u70b9\u7684\u503c Node * root = new Node (); root -> value = * startPre ; if ( startPre == endPre ) { if ( startIn == endIn && * startPre == * startIn ) return root ; throw std :: exception ( \"Invalid Input\" ); } // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u627e\u5230\u6839\u8282\u70b9\u7684\u503c int * rootValueIn = startIn ; while ( rootValueIn <= endIn && * rootValueIn != * startPre ) ++ rootValueIn ; if ( * rootValueIn != * startPre ) throw std :: exception ( \"Invalid Input\" ); int startInLength = rootValueIn - startIn ; if ( startInLength > 0 ) { root -> leftTree = BuildCore ( startPre + 1 , startPre + startInLength , startIn , rootValueIn - 1 ); } if ( endIn - rootValueIn > 0 ) { root -> rightTree = BuildCore ( startPre + startInLength + 1 , endPre , rootValueIn + 1 , endIn ); } return root ; } Node * BuildTree ( int * pre , int * in , int length ) { if ( pre == nullptr || in == nullptr || length <= 0 ) return nullptr ; return BuildCore ( pre , pre + length - 1 , in , in + length - 1 ); } \u5b8c\u6574\u4ee3\u7801: BuildTree.cpp \u5728\u51fd\u6570BuildCore \u4e2d,\u6211\u4eec\u5148\u6839\u636e\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u521b\u5efa\u6839\u8282\u70b9, \u63a5\u4e0b\u6765\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e,\u8fd9\u6837\u5c31\u80fd\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u8282\u70b9\u7684\u6570\u91cf. \u5728\u524d\u5e8f\u904d\u5386\u4e2d\u548c\u4e2d\u5e8f\u904d\u5386\u4e2d\u5212\u5206\u4e86\u5de6\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c\u4e4b\u540e,\u6211\u4eec\u5c31\u53ef\u4ee5\u9012\u5f52\u7684\u8c03\u7528\u51fd\u6570BuildCore \u53bb\u5206\u522b\u6784\u5efa\u5de6\u53f3\u5b50\u6811. \u6d4b\u8bd5\u7528\u4f8b \u666e\u901a\u4e8c\u53c9\u6811(\u5b8c\u5168\u4e8c\u53c9\u6811, \u4e0d\u5b8c\u5168\u4e8c\u53c9\u6811) \u7279\u6b8a\u4e8c\u53c9\u6811(\u6240\u6709\u8282\u70b9\u90fd\u6ca1\u6709\u53f3\u5b50\u8282\u70b9\u7684\u4e8c\u53c9\u6811, \u6240\u6709\u8282\u70b9\u90fd\u6ca1\u6709\u5de6\u5b50\u8282\u70b9\u7684\u4e8c\u53c9\u6811, \u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811) \u9762\u8bd5\u98988: \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \u00b6 Question \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9, \u5982\u4f55\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9? \u6811\u4e2d\u7684\u8282\u70b9\u9664\u4e86\u6709\u4e24\u4e2a\u5206\u522b\u6307\u5411\u5de6\u53f3\u5b57\u8282\u70b9\u7684\u6307\u9488, \u8fd8\u8981\u4e00\u4e2a\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488. Tip \u7531\u4e2d\u5e8f\u904d\u5386\u53ef\u77e5, \u5982\u679c\u8282\u70b9\u5b58\u5728\u53f3\u5b50\u6811, \u5219\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u53f3\u5b50\u6811\u7684\u6700\u5de6\u5b50\u8282\u70b9, \u5982\u679c\u4e0d\u5b58\u5728\u53f3\u5b50\u6811, \u5219\u4e00\u76f4\u5f80\u4e0a\u627e, \u5982\u679c\u8282\u70b9p\u4e3a\u7236\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9, \u5219\u4e0b\u4e00\u8282\u70b9\u4e3ap\u7684\u7236\u8282\u70b9 Answer Node * InOrderNodeNextValue ( Node * pNode ) { if ( pNode == nullptr ) return nullptr ; Node * p = nullptr ; // \u5982\u679c\u8be5\u8282\u70b9\u5b58\u5728\u53f3\u5b50\u6811\uff0c\u5219\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u53f3\u5b50\u6811\u7684\u6700\u5de6\u5b50\u8282\u70b9 if ( pNode -> rightTree != nullptr ) { p = pNode -> rightTree ; while ( p -> leftTree != nullptr ) p = p -> leftTree ; return p ; } // \u5982\u679c\u8be5\u8282\u70b9\u4e0d\u5b58\u5728\u53f3\u5b50\u6811\uff0c\u5219\u4e00\u76f4\u5f80\u4e0a\u627e, \u5982\u679c\u8282\u70b9\u662f\u5b83\u7236\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9, \u90a3\u4e48\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u5b83\u7684\u7236\u8282\u70b9 else { p = pNode ; while ( p -> parentNode != nullptr && p -> parentNode -> leftTree != p ) p = p -> parentNode ; return p -> parentNode ; } return nullptr ; } \u5b8c\u6574\u4ee3\u7801: InOrderNodeNext \u672c\u9898\u8003\u70b9: \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\u7684\u7406\u89e3\u7a0b\u5ea6. \u53ea\u6709\u5bf9\u4e8c\u53c9\u6811\u7684\u904d\u5386\u7b97\u6cd5\u6709\u6df1\u523b\u7684\u7406\u89e3. \u624d\u80fd\u51c6\u786e\u627e\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9. \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b, \u5e94\u8058\u8005\u53ea\u6709\u753b\u51fa\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u56fe, \u901a\u8fc7\u5177\u4f53\u7684\u4f8b\u5b50\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u89c4\u5f8b, \u624d\u53ef\u80fd\u8bbe\u8ba1\u51fa\u53ef\u884c\u7684\u7b97\u6cd5.","title":"3.4 \u6811"},{"location":"%E5%89%91%E6%8C%87offer/%E6%A0%91/#7","text":"Question \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u4e8c\u53c9\u6811\u3002 \u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1, 2, 4, 7, 3, 5, 6, 8}, \u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4, 7, 2, 1, 5, 3, 8, 6}, \u5219\u91cd\u5efa\u5982\u4e0b\u56fe\u6240\u793a\u7684\u4e8c\u53c9\u6811\u5e76\u8f93\u51fa\u5b83\u7684\u5934\u8282\u70b9\u3002 Tip \u5728\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u603b\u662f\u6811\u7684\u6839\u8282\u70b9\u7684\u503c\u3002 \u4f46\u5728\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u6839\u8282\u70b9\u7684\u503c\u5728\u5e8f\u5217\u7684\u4e2d\u95f4\uff0c\u5de6\u5b50\u6811\u7684\u8282\u70b9\u4f4d\u4e8e\u6839\u8282\u70b9\u503c\u7684\u5de6\u8fb9\uff0c\u800c\u53f3\u5b50\u6811\u7684\u503c\u4f4d\u4e8e\u6839\u8282\u70b9\u503c\u7684\u53f3\u8fb9\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u626b\u63cf\u4e2d\u5e8f\u5e8f\u5217\uff0c\u624d\u80fd\u627e\u5230\u6839\u8282\u70b9\u7684\u503c\u3002 \u5982\u56fe\u6240\u793a\uff0c\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u6570\u5b571\u5c31\u662f\u6839\u8282\u70b9\u7684\u503c\u3002\u626b\u63cf\u4e2d\u5e8f\u904d\u5386\uff0c\u5c31\u80fd\u786e\u5b9a\u6839\u8282\u70b9\u503c\u7684\u4f4d\u7f6e\uff0c\u6839\u636e\u4e2d\u5e8f\u904d\u5386\u7684\u7279\u70b9\uff0c\u5728\u6839\u8282\u70b9\u7684\u503c1\u524d\u9762\u76843\u4e2a\u6570\u5b57\u90fd\u662f\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u4f4d\u4e8e1\u540e\u9762\u7684\u6570\u5b57\u90fd\u662f\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c \u7531\u4e8e\u5728\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u67093\u4e2a\u6570\u5b57\u662f\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u56e0\u6b64\u5de6\u5b50\u6811\u5171\u67093\u4e2a\u5de6\u5b50\u8282\u70b9\uff0c\u540c\u6837\uff0c\u5728\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\uff0c\u6839\u8282\u70b9\u540e\u9762\u76843\u4e2a\u6570\u5b57\u5c31\u662f\u5de6\u5b50\u6811\u8282\u70b9\u7684\u503c\uff0c\u518d\u540e\u9762\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5728\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u4e24\u4e2a\u5e8f\u5217\u4e2d\u5206\u522b\u627e\u5230\u4e86\u5de6\u53f3\u5b50\u6570\u5bf9\u5e94\u7684\u5b50\u5e8f\u5217\u3002 \u65e2\u7136\u6211\u4eec\u5206\u522b\u627e\u5230\u4e86\u5de6\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u6cd5\u5206\u522b\u6784\u5efa\u5de6\u53f3\u5b50\u6811\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u63a5\u4e0b\u6765\u7684\u4e8b\u53ef\u4ee5\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u53bb\u5b9e\u73b0. Answer struct Node { int value ; Node * leftTree ; Node * rightTree ; }; Node * BuildCore ( int * startPre , int * endPre , int * startIn , int * endIn ) { // \u524d\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u503c\u62ff\u5230\u6839\u8282\u70b9\u7684\u503c Node * root = new Node (); root -> value = * startPre ; if ( startPre == endPre ) { if ( startIn == endIn && * startPre == * startIn ) return root ; throw std :: exception ( \"Invalid Input\" ); } // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u627e\u5230\u6839\u8282\u70b9\u7684\u503c int * rootValueIn = startIn ; while ( rootValueIn <= endIn && * rootValueIn != * startPre ) ++ rootValueIn ; if ( * rootValueIn != * startPre ) throw std :: exception ( \"Invalid Input\" ); int startInLength = rootValueIn - startIn ; if ( startInLength > 0 ) { root -> leftTree = BuildCore ( startPre + 1 , startPre + startInLength , startIn , rootValueIn - 1 ); } if ( endIn - rootValueIn > 0 ) { root -> rightTree = BuildCore ( startPre + startInLength + 1 , endPre , rootValueIn + 1 , endIn ); } return root ; } Node * BuildTree ( int * pre , int * in , int length ) { if ( pre == nullptr || in == nullptr || length <= 0 ) return nullptr ; return BuildCore ( pre , pre + length - 1 , in , in + length - 1 ); } \u5b8c\u6574\u4ee3\u7801: BuildTree.cpp \u5728\u51fd\u6570BuildCore \u4e2d,\u6211\u4eec\u5148\u6839\u636e\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u521b\u5efa\u6839\u8282\u70b9, \u63a5\u4e0b\u6765\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9\u7684\u4f4d\u7f6e,\u8fd9\u6837\u5c31\u80fd\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u8282\u70b9\u7684\u6570\u91cf. \u5728\u524d\u5e8f\u904d\u5386\u4e2d\u548c\u4e2d\u5e8f\u904d\u5386\u4e2d\u5212\u5206\u4e86\u5de6\u53f3\u5b50\u6811\u8282\u70b9\u7684\u503c\u4e4b\u540e,\u6211\u4eec\u5c31\u53ef\u4ee5\u9012\u5f52\u7684\u8c03\u7528\u51fd\u6570BuildCore \u53bb\u5206\u522b\u6784\u5efa\u5de6\u53f3\u5b50\u6811. \u6d4b\u8bd5\u7528\u4f8b \u666e\u901a\u4e8c\u53c9\u6811(\u5b8c\u5168\u4e8c\u53c9\u6811, \u4e0d\u5b8c\u5168\u4e8c\u53c9\u6811) \u7279\u6b8a\u4e8c\u53c9\u6811(\u6240\u6709\u8282\u70b9\u90fd\u6ca1\u6709\u53f3\u5b50\u8282\u70b9\u7684\u4e8c\u53c9\u6811, \u6240\u6709\u8282\u70b9\u90fd\u6ca1\u6709\u5de6\u5b50\u8282\u70b9\u7684\u4e8c\u53c9\u6811, \u53ea\u6709\u4e00\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811)","title":"\u9762\u8bd5\u98987: \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"%E5%89%91%E6%8C%87offer/%E6%A0%91/#8","text":"Question \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u548c\u5176\u4e2d\u4e00\u4e2a\u8282\u70b9, \u5982\u4f55\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9? \u6811\u4e2d\u7684\u8282\u70b9\u9664\u4e86\u6709\u4e24\u4e2a\u5206\u522b\u6307\u5411\u5de6\u53f3\u5b57\u8282\u70b9\u7684\u6307\u9488, \u8fd8\u8981\u4e00\u4e2a\u6307\u5411\u7236\u8282\u70b9\u7684\u6307\u9488. Tip \u7531\u4e2d\u5e8f\u904d\u5386\u53ef\u77e5, \u5982\u679c\u8282\u70b9\u5b58\u5728\u53f3\u5b50\u6811, \u5219\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u53f3\u5b50\u6811\u7684\u6700\u5de6\u5b50\u8282\u70b9, \u5982\u679c\u4e0d\u5b58\u5728\u53f3\u5b50\u6811, \u5219\u4e00\u76f4\u5f80\u4e0a\u627e, \u5982\u679c\u8282\u70b9p\u4e3a\u7236\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9, \u5219\u4e0b\u4e00\u8282\u70b9\u4e3ap\u7684\u7236\u8282\u70b9 Answer Node * InOrderNodeNextValue ( Node * pNode ) { if ( pNode == nullptr ) return nullptr ; Node * p = nullptr ; // \u5982\u679c\u8be5\u8282\u70b9\u5b58\u5728\u53f3\u5b50\u6811\uff0c\u5219\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u53f3\u5b50\u6811\u7684\u6700\u5de6\u5b50\u8282\u70b9 if ( pNode -> rightTree != nullptr ) { p = pNode -> rightTree ; while ( p -> leftTree != nullptr ) p = p -> leftTree ; return p ; } // \u5982\u679c\u8be5\u8282\u70b9\u4e0d\u5b58\u5728\u53f3\u5b50\u6811\uff0c\u5219\u4e00\u76f4\u5f80\u4e0a\u627e, \u5982\u679c\u8282\u70b9\u662f\u5b83\u7236\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9, \u90a3\u4e48\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u5b83\u7684\u7236\u8282\u70b9 else { p = pNode ; while ( p -> parentNode != nullptr && p -> parentNode -> leftTree != p ) p = p -> parentNode ; return p -> parentNode ; } return nullptr ; } \u5b8c\u6574\u4ee3\u7801: InOrderNodeNext \u672c\u9898\u8003\u70b9: \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\u7684\u7406\u89e3\u7a0b\u5ea6. \u53ea\u6709\u5bf9\u4e8c\u53c9\u6811\u7684\u904d\u5386\u7b97\u6cd5\u6709\u6df1\u523b\u7684\u7406\u89e3. \u624d\u80fd\u51c6\u786e\u627e\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9. \u8003\u67e5\u5e94\u8058\u8005\u5206\u6790\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b, \u5e94\u8058\u8005\u53ea\u6709\u753b\u51fa\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\u56fe, \u901a\u8fc7\u5177\u4f53\u7684\u4f8b\u5b50\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u89c4\u5f8b, \u624d\u53ef\u80fd\u8bbe\u8ba1\u51fa\u53ef\u884c\u7684\u7b97\u6cd5.","title":"\u9762\u8bd5\u98988: \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9"},{"location":"%E5%89%91%E6%8C%87offer/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/","text":"\u7a0b\u5e8f\u5458\u5199\u4ee3\u7801\u603b\u662f\u57fa\u4e8e\u67d0\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u56e0\u6b64\u6280\u672f\u9762\u8bd5\u7684\u65f6\u5019\u90fd\u4f1a\u76f4\u63a5\u6216\u95f4\u63a5\u6d89\u53ca\u81f3\u5c11\u67d0\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u3002 \u5728\u9762\u8bd5\u8fc7\u7a0b\u603b\uff0c\u9762\u8bd5\u5b98\u8981\u4e48\u76f4\u63a5\u95ee\u8bed\u8a00\u7684\u8bed\u6cd5\uff0c\u8981\u4e48\u8ba9\u5e94\u8058\u8005\u7528\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u5199\u4ee3\u7801\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff0c\u901a\u8fc7\u5199\u51fa\u7684\u4ee3\u7801\u6765\u5224\u65ad\u5e94\u8058\u8005\u5bf9\u4ed6\u4f7f\u7528\u8bed\u8a00\u7684\u638c\u63e1\u6210\u7a0b\u5ea6\u3002 \u5c0f\u54e5\u4ece\u4e8b\u6e38\u620f\u5f00\u53d1\u7684\uff0c\u5e73\u5e38\u7528\u7684\u8bed\u8a00\u662flua\uff0c\u7528\u7684\u4eba\u5c11\uff0c\u4e4b\u524d\u7528python\u7684\uff0c\u4ee5\u540e\u6253\u7b97\u6df1\u8015\u670d\u52a1\u7aef\u9886\u57df\uff0c\u6240\u6709\u5b66\u4e86c++, \u4ee5\u540e\u5199\u4ee3\u7801\u90fd\u5c06\u57fa\u4e8epython\u548cc++\u53bb\u5b9e\u73b0\u3002 \u901a\u5e38\u8bed\u8a00\u7684\u9762\u8bd5\u67093\u79cd\u9898\u578b \u9762\u8bd5\u5b98\u76f4\u63a5\u8be2\u95ee\u5e94\u8058\u8005\u5bf9c++\u6982\u5ff5\u7684\u7406\u89e3\u3002 \u9762\u8bd5\u5b98\u62ff\u51fa\u4e8b\u5148\u51c6\u5907\u7684\u4ee3\u7801\uff0c\u8ba9\u5e94\u8058\u8005\u5206\u6790\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u3002 \u8981\u6c42\u5e94\u8058\u8005\u5199\u4ee3\u7801\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\u6216\u8005\u5b9e\u73b0\u7c7b\u578b\u4e2d\u7684\u6210\u5458\u51fd\u6570\u3002 \u9762\u8bd5\u9898 \u00b6 \u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570 \u00b6 Question \u5982\u4e0b\u4e3a\u7c7b\u578bCMyString\u7684\u58f0\u660e\uff0c\u8bf7\u4e3a\u8be5\u7c7b\u578b\u6dfb\u52a0\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570 class CMyString { public : CMyString ( char * pData = NULL ); CMyString ( const CMyString & str ); ~ CMyString ( void ); private : char * m_pData ; }; Tip \u5f53\u9762\u8bd5\u5b98\u8981\u6c42\u5e94\u8058\u8005\u5b9a\u4e49\u4e00\u4e2a\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570\u65f6\uff0c\u4ed6\u4f1a\u5728\u68c0\u67e5\u5e94\u8058\u8005\u5199\u51fa\u7684\u4ee3\u7801\u65f6\u5173\u6ce8\u51e0\u70b9\u3002 \u662f\u5426\u628a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u58f0\u660e\u4e3a\u8be5\u7c7b\u578b\u7684\u5f15\u7528\uff0c\u5e76\u5728\u51fd\u6570\u7ed3\u675f\u524d\u8fd4\u56de\u5b9e\u4f8b\u81ea\u8eab\u7684\u5f15\u7528( *this )\u3002 \u53ea\u6709\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u624d\u53ef\u4ee5\u5141\u8bb8\u8fde\u7eed\u8d4b\u503c\u3002 \u5426\u5219\uff0c\u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662fvoid\uff0c\u5219\u5e94\u7528\u8be5\u8d4b\u503c\u8fd0\u7b97\u7b26\u5c06\u4e0d\u80fd\u8fdb\u884c\u8fde\u7eed\u8d4b\u503c\u3002\u5047\u8bbe\u67093\u4e2aCMyString\u7684\u5bf9\u8c61\uff1a str1, str2, str3, \u5728\u7a0b\u5e8f\u4e2d\u8bed\u53e5str1=str2=str3\u5c06\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002 \u662f\u5426\u628a\u4f20\u5165\u7684\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a\u5e38\u91cf\u5f15\u7528\u3002\u5982\u679c\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u662f\u5f15\u7528\u800c\u662f\u5b9e\u4f8b\uff0c\u90a3\u4e48\u4ece\u5f62\u53c2\u5230\u5b9e\u53c2\u4f1a\u8c03\u7528\u4e00\u6b21\u590d\u5236\u6784\u9020\u51fd\u6570\u3002\u628a\u53c2\u6570\u58f0\u660e\u4e3a\u5f15\u7528\u53ef\u4ee5\u907f\u514d\u8fd9\u6837\u7684\u65e0\u8c13\u6d88\u8017\uff0c\u80fd\u63d0\u9ad8\u4ee3\u7801\u6548\u7387\u3002\u540c\u65f6\uff0c\u6211\u4eec\u5728\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570\u5185\u4e0d\u4f1a\u6539\u53d8\u4f20\u5165\u7684\u5b9e\u4f8b\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u5e94\u8be5\u4e3a\u4f20\u5165\u7684\u5f15\u7528\u53c2\u6570\u52a0\u4e0aconst\u53c2\u6570\u3002 \u662f\u5426\u91ca\u653e\u5b9e\u4f8b\u81ea\u8eab\u5df2\u6709\u7684\u5185\u5b58\u3002\u5982\u679c\u6211\u4eec\u5fd8\u8bb0\u5728\u5206\u914d\u65b0\u5185\u5b58\u4e4b\u524d\u91ca\u653e\u81ea\u8eab\u5df2\u6709\u7684\u7a7a\u95f4\uff0c\u5219\u7a0b\u5e8f\u5c06\u51fa\u73b0\u5185\u5b58\u6cc4\u9732\u3002 \u5224\u65ad\u4f20\u5165\u7684\u53c2\u6570\u548c\u5f53\u524d\u7684\u5b9e\u4f8b( *this )\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u5982\u679c\u662f\u540c\u4e00\u4e2a\uff0c\u5219\u4e0d\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\u5982\u679c\u4e8b\u5148\u4e0d\u5224\u65ad\u5c31\u8fdb\u884c\u8d4b\u503c\uff0c\u90a3\u4e48\u5728\u91ca\u653e\u5b9e\u4f8b\u81ea\u8eab\u5185\u5b58\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u95ee\u9898\uff1a\u5f53 *this \u548c\u4f20\u5165\u7684\u53c2\u6570\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u4e00\u65e6\u91ca\u653e\u4e86\u81ea\u8eab\u7684\u5185\u5b58\uff0c\u4f20\u5165\u7684\u53c2\u6570\u7684\u5185\u5b58\u4e5f\u540c\u65f6\u88ab\u91ca\u653e\u4e86\uff0c\u56e0\u6b64\u518d\u4e5f\u627e\u4e0d\u5230\u9700\u8981\u8d4b\u503c\u7684\u5185\u5bb9\u4e86\u3002 Answer \u5f53\u6211\u4eec\u5b8c\u6574\u5730\u8003\u8651\u4e86\u4e0a\u8ff04\u4e2a\u65b9\u9762\u4e4b\u540e\uff0c\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\u3002 \u63a5\u53d7\u9762\u8bd5\u7684\u5e94\u5c4a\u6bd5\u4e1a\u751f\u6216\u521d\u7ea7c++\u7a0b\u5e8f\u5458\uff0c\u5219\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u8ba9\u4ed6\u901a\u8fc7\u9762\u8bd5\u3002 CMyString & CMyString :: operator = ( const CMyString & str ) { if ( this != & str ) { delete [] this -> m_pData ; this -> m_pData = nullptr ; int length = strlen ( str . m_pData ); this -> m_pData = new char [ length + 1 ]; memcpy ( this -> m_pData , str . m_pData , length + 1 ); } return * this ; } \u5982\u679c\u9762\u8bd5\u7684\u662fc++\u9ad8\u7ea7\u7a0b\u5e8f\u5458\uff0c\u5219\u9762\u8bd5\u5b98\u4f1a\u63d0\u51fa\u66f4\u9ad8\u7684\u8981\u6c42\u3002 \u5728\u4e0a\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5728\u5206\u914d\u5185\u5b58\u4e4b\u524d\u5148\u7528delet\u91ca\u653e\u4e86\u5b9e\u4f8bm_pData\u7684\u5185\u5b58\uff0c\u5982\u679c\u6b64\u65f6\u5185\u5b58\u4e0d\u8db3\u5bfc\u81f4new char\u629b\u51fa\u5f02\u5e38\uff0c\u5219m_pData\u5c06\u662f\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u8fd9\u6837\u975e\u5e38\u5bb9\u6613\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u5728\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570\u5185\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0cCMyString\u7684\u5b9e\u4f8b\u4e0d\u518d\u4fdd\u6301\u6709\u6548\u72b6\u6001\uff0c\u8fdd\u80cc\u4e86\u5f02\u5e38\u5b89\u5168\u6027\u539f\u5219\u3002 \u4e0b\u9762\u7684\u601d\u8def\u662f\u5148\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u5c06this\u548c\u4e34\u65f6\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362\uff0c\u4e34\u65f6\u5bf9\u8c61\u79bb\u5f00 } \u5c06\u81ea\u52a8\u91ca\u653e\uff0c\u4e5f\u5c31\u662f\u91ca\u653e\u4e86this\u4e4b\u524d\u7684\u7a7a\u95f4\u3002 CMyString & CMyString :: operator = ( const CMyString & str ) { if ( this != & str ) { CMyString strTemp ( str ); char * temp = strTemp . m_pData ; strTemp . m_pData = this -> m_pData ; this -> m_pData = temp ; } return * this ; } \u5728\u65b0\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5728\u6784\u9020\u51fd\u6570\u5185\u7528new\u5206\u914d\u5185\u5b58\u3002 \u5982\u679c\u7531\u4e8e\u5185\u5b58\u4e0d\u8db3\u629b\u51fa\u8bf8\u5982 bad_alloc \u7b49\u5f02\u5e38\uff0c\u4f46\u6211\u4eec\u8fd8\u6ca1\u6709\u4fee\u6539\u539f\u6765\u5b9e\u4f8b\u7684\u72b6\u6001\uff0c\u56e0\u6b64\u5b9e\u4f8b\u7684\u72b6\u6001\u8fd8\u662f\u6709\u6548\u7684\uff0c\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u5f02\u5e38\u5b89\u5168\u6027\u3002 \u5982\u679c\u5e94\u8058\u8005\u5728\u9762\u8bd5\u7684\u65f6\u5019\u80fd\u8003\u8651\u5230\u8fd9\u4e2a\u5c42\u9762\uff0c\u9762\u8bd5\u5b98\u5c31\u4f1a\u89c9\u5f97\u4ed6\u4f1a\u4ee3\u7801\u7684\u5f02\u5e38\u5b89\u5168\u6027\u6709\u5f88\u6df1\u7684\u7406\u89e3\uff0c\u90a3\u4e48\u4ed6\u81ea\u7136\u5c31\u80fd\u901a\u8fc7\u9762\u8bd5\u4e86\u3002 \u6e90\u4ee3\u7801\uff1a CMyString.cpp \u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f \u00b6 Question \u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u6211\u4eec\u53ea\u80fd\u751f\u6210\u8be5\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 Tip \u7531\u4e8e\u8981\u6c42\u53ea\u80fd\u751f\u6210\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u628a\u6784\u9020\u51fd\u6570\u8bbe\u4e3a\u79c1\u6709\uff0c\u4ee5\u7981\u6b62\u5176\u4ed6\u4eba\u521b\u5efa\u5b9e\u4f8b\u3002 Answer \u4e0d\u597d\u7684\u89e3\u6cd5\u4e00\uff1a\u53ea\u9002\u7528\u4e8e\u5355\u7ebf\u7a0b\u73af\u5883 #include <iostream> using namespace std ; class Singleton { private : static Singleton * instance ; Singleton () { } ~ Singleton () { } public : static Singleton * get () { if ( instance == NULL ) { instance = new Singleton (); } return instance ; } }; Singleton * Singleton :: instance = NULL ; int main ( int argc , const char * argv []) { Singleton * s1 = Singleton :: get (); Singleton * s2 = Singleton :: get (); cout << s1 << endl << s2 << endl ; return 0 ; }","title":"2. \u7f16\u7a0b\u8bed\u8a00\uff08\u672a\u5b8c\uff0c\u5b66cpp\u591a\u7ebf\u7a0b\uff09"},{"location":"%E5%89%91%E6%8C%87offer/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/#_1","text":"","title":"\u9762\u8bd5\u9898"},{"location":"%E5%89%91%E6%8C%87offer/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/#_2","text":"Question \u5982\u4e0b\u4e3a\u7c7b\u578bCMyString\u7684\u58f0\u660e\uff0c\u8bf7\u4e3a\u8be5\u7c7b\u578b\u6dfb\u52a0\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570 class CMyString { public : CMyString ( char * pData = NULL ); CMyString ( const CMyString & str ); ~ CMyString ( void ); private : char * m_pData ; }; Tip \u5f53\u9762\u8bd5\u5b98\u8981\u6c42\u5e94\u8058\u8005\u5b9a\u4e49\u4e00\u4e2a\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570\u65f6\uff0c\u4ed6\u4f1a\u5728\u68c0\u67e5\u5e94\u8058\u8005\u5199\u51fa\u7684\u4ee3\u7801\u65f6\u5173\u6ce8\u51e0\u70b9\u3002 \u662f\u5426\u628a\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u58f0\u660e\u4e3a\u8be5\u7c7b\u578b\u7684\u5f15\u7528\uff0c\u5e76\u5728\u51fd\u6570\u7ed3\u675f\u524d\u8fd4\u56de\u5b9e\u4f8b\u81ea\u8eab\u7684\u5f15\u7528( *this )\u3002 \u53ea\u6709\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u624d\u53ef\u4ee5\u5141\u8bb8\u8fde\u7eed\u8d4b\u503c\u3002 \u5426\u5219\uff0c\u5982\u679c\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662fvoid\uff0c\u5219\u5e94\u7528\u8be5\u8d4b\u503c\u8fd0\u7b97\u7b26\u5c06\u4e0d\u80fd\u8fdb\u884c\u8fde\u7eed\u8d4b\u503c\u3002\u5047\u8bbe\u67093\u4e2aCMyString\u7684\u5bf9\u8c61\uff1a str1, str2, str3, \u5728\u7a0b\u5e8f\u4e2d\u8bed\u53e5str1=str2=str3\u5c06\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\u3002 \u662f\u5426\u628a\u4f20\u5165\u7684\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a\u5e38\u91cf\u5f15\u7528\u3002\u5982\u679c\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u662f\u5f15\u7528\u800c\u662f\u5b9e\u4f8b\uff0c\u90a3\u4e48\u4ece\u5f62\u53c2\u5230\u5b9e\u53c2\u4f1a\u8c03\u7528\u4e00\u6b21\u590d\u5236\u6784\u9020\u51fd\u6570\u3002\u628a\u53c2\u6570\u58f0\u660e\u4e3a\u5f15\u7528\u53ef\u4ee5\u907f\u514d\u8fd9\u6837\u7684\u65e0\u8c13\u6d88\u8017\uff0c\u80fd\u63d0\u9ad8\u4ee3\u7801\u6548\u7387\u3002\u540c\u65f6\uff0c\u6211\u4eec\u5728\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570\u5185\u4e0d\u4f1a\u6539\u53d8\u4f20\u5165\u7684\u5b9e\u4f8b\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u5e94\u8be5\u4e3a\u4f20\u5165\u7684\u5f15\u7528\u53c2\u6570\u52a0\u4e0aconst\u53c2\u6570\u3002 \u662f\u5426\u91ca\u653e\u5b9e\u4f8b\u81ea\u8eab\u5df2\u6709\u7684\u5185\u5b58\u3002\u5982\u679c\u6211\u4eec\u5fd8\u8bb0\u5728\u5206\u914d\u65b0\u5185\u5b58\u4e4b\u524d\u91ca\u653e\u81ea\u8eab\u5df2\u6709\u7684\u7a7a\u95f4\uff0c\u5219\u7a0b\u5e8f\u5c06\u51fa\u73b0\u5185\u5b58\u6cc4\u9732\u3002 \u5224\u65ad\u4f20\u5165\u7684\u53c2\u6570\u548c\u5f53\u524d\u7684\u5b9e\u4f8b( *this )\u662f\u4e0d\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u5982\u679c\u662f\u540c\u4e00\u4e2a\uff0c\u5219\u4e0d\u8fdb\u884c\u8d4b\u503c\u64cd\u4f5c\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\u5982\u679c\u4e8b\u5148\u4e0d\u5224\u65ad\u5c31\u8fdb\u884c\u8d4b\u503c\uff0c\u90a3\u4e48\u5728\u91ca\u653e\u5b9e\u4f8b\u81ea\u8eab\u5185\u5b58\u7684\u65f6\u5019\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u95ee\u9898\uff1a\u5f53 *this \u548c\u4f20\u5165\u7684\u53c2\u6570\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\u65f6\uff0c\u4e00\u65e6\u91ca\u653e\u4e86\u81ea\u8eab\u7684\u5185\u5b58\uff0c\u4f20\u5165\u7684\u53c2\u6570\u7684\u5185\u5b58\u4e5f\u540c\u65f6\u88ab\u91ca\u653e\u4e86\uff0c\u56e0\u6b64\u518d\u4e5f\u627e\u4e0d\u5230\u9700\u8981\u8d4b\u503c\u7684\u5185\u5bb9\u4e86\u3002 Answer \u5f53\u6211\u4eec\u5b8c\u6574\u5730\u8003\u8651\u4e86\u4e0a\u8ff04\u4e2a\u65b9\u9762\u4e4b\u540e\uff0c\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\u3002 \u63a5\u53d7\u9762\u8bd5\u7684\u5e94\u5c4a\u6bd5\u4e1a\u751f\u6216\u521d\u7ea7c++\u7a0b\u5e8f\u5458\uff0c\u5219\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u8ba9\u4ed6\u901a\u8fc7\u9762\u8bd5\u3002 CMyString & CMyString :: operator = ( const CMyString & str ) { if ( this != & str ) { delete [] this -> m_pData ; this -> m_pData = nullptr ; int length = strlen ( str . m_pData ); this -> m_pData = new char [ length + 1 ]; memcpy ( this -> m_pData , str . m_pData , length + 1 ); } return * this ; } \u5982\u679c\u9762\u8bd5\u7684\u662fc++\u9ad8\u7ea7\u7a0b\u5e8f\u5458\uff0c\u5219\u9762\u8bd5\u5b98\u4f1a\u63d0\u51fa\u66f4\u9ad8\u7684\u8981\u6c42\u3002 \u5728\u4e0a\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5728\u5206\u914d\u5185\u5b58\u4e4b\u524d\u5148\u7528delet\u91ca\u653e\u4e86\u5b9e\u4f8bm_pData\u7684\u5185\u5b58\uff0c\u5982\u679c\u6b64\u65f6\u5185\u5b58\u4e0d\u8db3\u5bfc\u81f4new char\u629b\u51fa\u5f02\u5e38\uff0c\u5219m_pData\u5c06\u662f\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u8fd9\u6837\u975e\u5e38\u5bb9\u6613\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u5728\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570\u5185\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\uff0cCMyString\u7684\u5b9e\u4f8b\u4e0d\u518d\u4fdd\u6301\u6709\u6548\u72b6\u6001\uff0c\u8fdd\u80cc\u4e86\u5f02\u5e38\u5b89\u5168\u6027\u539f\u5219\u3002 \u4e0b\u9762\u7684\u601d\u8def\u662f\u5148\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u5c06this\u548c\u4e34\u65f6\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362\uff0c\u4e34\u65f6\u5bf9\u8c61\u79bb\u5f00 } \u5c06\u81ea\u52a8\u91ca\u653e\uff0c\u4e5f\u5c31\u662f\u91ca\u653e\u4e86this\u4e4b\u524d\u7684\u7a7a\u95f4\u3002 CMyString & CMyString :: operator = ( const CMyString & str ) { if ( this != & str ) { CMyString strTemp ( str ); char * temp = strTemp . m_pData ; strTemp . m_pData = this -> m_pData ; this -> m_pData = temp ; } return * this ; } \u5728\u65b0\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5728\u6784\u9020\u51fd\u6570\u5185\u7528new\u5206\u914d\u5185\u5b58\u3002 \u5982\u679c\u7531\u4e8e\u5185\u5b58\u4e0d\u8db3\u629b\u51fa\u8bf8\u5982 bad_alloc \u7b49\u5f02\u5e38\uff0c\u4f46\u6211\u4eec\u8fd8\u6ca1\u6709\u4fee\u6539\u539f\u6765\u5b9e\u4f8b\u7684\u72b6\u6001\uff0c\u56e0\u6b64\u5b9e\u4f8b\u7684\u72b6\u6001\u8fd8\u662f\u6709\u6548\u7684\uff0c\u4e5f\u5c31\u4fdd\u8bc1\u4e86\u5f02\u5e38\u5b89\u5168\u6027\u3002 \u5982\u679c\u5e94\u8058\u8005\u5728\u9762\u8bd5\u7684\u65f6\u5019\u80fd\u8003\u8651\u5230\u8fd9\u4e2a\u5c42\u9762\uff0c\u9762\u8bd5\u5b98\u5c31\u4f1a\u89c9\u5f97\u4ed6\u4f1a\u4ee3\u7801\u7684\u5f02\u5e38\u5b89\u5168\u6027\u6709\u5f88\u6df1\u7684\u7406\u89e3\uff0c\u90a3\u4e48\u4ed6\u81ea\u7136\u5c31\u80fd\u901a\u8fc7\u9762\u8bd5\u4e86\u3002 \u6e90\u4ee3\u7801\uff1a CMyString.cpp","title":"\u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570"},{"location":"%E5%89%91%E6%8C%87offer/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/#_3","text":"Question \u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u6211\u4eec\u53ea\u80fd\u751f\u6210\u8be5\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 Tip \u7531\u4e8e\u8981\u6c42\u53ea\u80fd\u751f\u6210\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u56e0\u6b64\u6211\u4eec\u5fc5\u987b\u628a\u6784\u9020\u51fd\u6570\u8bbe\u4e3a\u79c1\u6709\uff0c\u4ee5\u7981\u6b62\u5176\u4ed6\u4eba\u521b\u5efa\u5b9e\u4f8b\u3002 Answer \u4e0d\u597d\u7684\u89e3\u6cd5\u4e00\uff1a\u53ea\u9002\u7528\u4e8e\u5355\u7ebf\u7a0b\u73af\u5883 #include <iostream> using namespace std ; class Singleton { private : static Singleton * instance ; Singleton () { } ~ Singleton () { } public : static Singleton * get () { if ( instance == NULL ) { instance = new Singleton (); } return instance ; } }; Singleton * Singleton :: instance = NULL ; int main ( int argc , const char * argv []) { Singleton * s1 = Singleton :: get (); Singleton * s2 = Singleton :: get (); cout << s1 << endl << s2 << endl ; return 0 ; }","title":"\u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/","text":"\u9762\u8bd5\u989827: \u4e8c\u53c9\u6811\u7684\u955c\u50cf \u00b6 struct Node { int value ; Node * left = nullptr ; Node * right = nullptr ; }; void exchangeChild ( Node * pNode ); void treeMirror ( Node * pRoot ) { if ( pRoot == nullptr ) return ; exchangeChild ( pRoot ); } void exchangeChild ( Node * pNode ) { if ( pNode == nullptr ) return ; Node * left = pNode -> left ; Node * right = pNode -> right ; pNode -> left = right ; pNode -> right = left ; exchangeChild ( pNode -> left ); exchangeChild ( pNode -> right ); } \u5b8c\u6574\u4ee3\u7801\uff1a \u6811\u7684\u955c\u50cf \u9762\u8bd5\u989828: \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u00b6 bool isSymmetric ( Node * pRoot1 , Node * pRoot2 ) bool isSymmetric ( Node * pRoot ) { return isSymmetric ( pRoot -> pLeft , pRoot -> pRight ); } bool isSymmetric ( Node * pRoot1 , Node * pRoot2 ) { if ( pRoot1 == nullptr || pRoot2 == nullptr ) return false ; if ( pRoot1 -> value != pRoot2 -> value ) return false ; if ( pRoot1 == nullptr && pRoot2 == nullptr ) return true ; return isSymmetric ( pRoot1 -> pLeft , pRoot2 -> pRight ) && isSymmetric ( pRoot1 -> pRight , pRoot2 -> pLeft ); } \u5b8c\u6574\u4ee3\u7801\uff1a \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u9762\u8bd5\u989829: \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 \u00b6 \u9762\u8bd5\u989830: \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u00b6 \u9762\u8bd5\u989831: \u6808\u7684\u538b\u5165\uff0c\u5f39\u51fa\u5e8f\u5217 \u00b6 bool isPopOrder ( vector < int >& pushVector , vector < int >& popVector ) { if ( pushVector . size () <= 0 || popVector . size () <= 0 ) return false ; stack < int > stackTemp ; unsigned int pushVectorIndex = 0 ; unsigned int popVectorIndex = 0 ; stackTemp . push ( pushVector [ pushVectorIndex ++ ]); while ( popVectorIndex < popVector . size ()) { while ( stackTemp . top () != popVector [ popVectorIndex ]) { if ( pushVectorIndex >= pushVector . size ()) break ; stackTemp . push ( pushVector [ pushVectorIndex ++ ]); } if ( stackTemp . top () != popVector [ popVectorIndex ]) break ; stackTemp . pop (); popVectorIndex ++ ; } if ( stackTemp . empty ()) return true ; return false ; } \u5b8c\u6574\u4ee3\u7801\uff1a \u6808\u7684\u538b\u5165\uff0c\u5f39\u51fa\u5e8f\u5217 \u9762\u8bd5\u989832: \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u00b6 struct Node { int value ; Node * pLeft = nullptr ; Node * pRight = nullptr ; }; vector < int > printBTreeOfLayer ( Node * pRoot ) { vector < int > vectorResult ; if ( pRoot == nullptr ) return vectorResult ; queue < Node *> queueNodes ; queueNodes . push ( pRoot ); vectorResult . push_back ( pRoot -> value ); Node * node = nullptr ; while ( queueNodes . size () > 0 ) { node = queueNodes . front (); queueNodes . pop (); if ( node -> pLeft != nullptr ) { queueNodes . push ( node -> pLeft ); vectorResult . push_back ( node -> pLeft -> value ); } if ( node -> pRight != nullptr ) { queueNodes . push ( node -> pRight ); vectorResult . push_back ( node -> pRight -> value ); } } return vectorResult ; } \u53c2\u8003\u4ee3\u7801: \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u9762\u8bd5\u989833: \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u00b6 bool isSequenceOfBST ( int sequence [], int length ) { if ( sequence == nullptr || length <= 0 ) return false ; int root = sequence [ length - 1 ]; int i = 0 ; for (; i < length - 1 ; ++ i ) { if ( sequence [ i ] > root ) break ; } int j = i + 1 ; for (; j < length - 1 ; ++ j ) { if ( sequence [ j ] < root ) return false ; } bool left = true ; if ( i > 0 ) return isSequenceOfBST ( sequence , i ); bool right = true ; if ( i < length - 1 ) return isSequenceOfBST ( sequence + i , length - i - 1 ); return left && right ; } \u9762\u8bd5\u989834: \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u00b6 struct Node { int value ; Node * pLeft = nullptr ; Node * pRight = nullptr ; }; void findPath ( Node * pNode , int expectSum , vector < int > vectorPath , int curSum ); void findPath ( Node * pRoot , int expectSum ) { if ( pRoot == nullptr ) return ; vector < int > vectorPath ; int curSum = 0 ; findPath ( pRoot , expectSum , vectorPath , curSum ); } void findPath ( Node * pNode , int expectSum , vector < int > vectorPath , int curSum ) { if ( pNode == nullptr ) return ; vectorPath . push_back ( pNode -> value ); curSum += pNode -> value ; // \u5982\u679c\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u7684\u548c\u7b49\u4e8e expectSum // \u5219\u6253\u5370\u51fa\u8def\u5f84 bool isLeaf = pNode -> pLeft == nullptr && pNode -> pRight == nullptr ; if ( curSum == expectSum && isLeaf ) { vector < int >:: iterator iter = vectorPath . begin (); for (; iter != vectorPath . end (); iter ++ ) { cout << * iter << ' ' ; } cout << endl ; } // \u7ee7\u7eed\u67e5\u627e\u5de6\u53f3\u5b50\u8282\u70b9 findPath ( pNode -> pLeft , expectSum , vectorPath , curSum ); findPath ( pNode -> pRight , expectSum , vectorPath , curSum ); // \u5728\u8fd4\u56de\u7236\u8282\u70b9\u4e4b\u524d\uff0c\u5728\u8def\u5f84\u4e0a\u5220\u9664\u5f53\u524d\u8282\u70b9 vectorPath . pop_back (); } \u9762\u8bd5\u989835: \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u00b6 \u53c2\u8003\u4ee3\u7801: \u590d\u6742\u94fe\u8868\u7684\u590d\u5236","title":"6. \u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#27","text":"struct Node { int value ; Node * left = nullptr ; Node * right = nullptr ; }; void exchangeChild ( Node * pNode ); void treeMirror ( Node * pRoot ) { if ( pRoot == nullptr ) return ; exchangeChild ( pRoot ); } void exchangeChild ( Node * pNode ) { if ( pNode == nullptr ) return ; Node * left = pNode -> left ; Node * right = pNode -> right ; pNode -> left = right ; pNode -> right = left ; exchangeChild ( pNode -> left ); exchangeChild ( pNode -> right ); } \u5b8c\u6574\u4ee3\u7801\uff1a \u6811\u7684\u955c\u50cf","title":"\u9762\u8bd5\u989827: \u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#28","text":"bool isSymmetric ( Node * pRoot1 , Node * pRoot2 ) bool isSymmetric ( Node * pRoot ) { return isSymmetric ( pRoot -> pLeft , pRoot -> pRight ); } bool isSymmetric ( Node * pRoot1 , Node * pRoot2 ) { if ( pRoot1 == nullptr || pRoot2 == nullptr ) return false ; if ( pRoot1 -> value != pRoot2 -> value ) return false ; if ( pRoot1 == nullptr && pRoot2 == nullptr ) return true ; return isSymmetric ( pRoot1 -> pLeft , pRoot2 -> pRight ) && isSymmetric ( pRoot1 -> pRight , pRoot2 -> pLeft ); } \u5b8c\u6574\u4ee3\u7801\uff1a \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811","title":"\u9762\u8bd5\u989828: \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#29","text":"","title":"\u9762\u8bd5\u989829: \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#30-min","text":"","title":"\u9762\u8bd5\u989830: \u5305\u542bmin\u51fd\u6570\u7684\u6808"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#31","text":"bool isPopOrder ( vector < int >& pushVector , vector < int >& popVector ) { if ( pushVector . size () <= 0 || popVector . size () <= 0 ) return false ; stack < int > stackTemp ; unsigned int pushVectorIndex = 0 ; unsigned int popVectorIndex = 0 ; stackTemp . push ( pushVector [ pushVectorIndex ++ ]); while ( popVectorIndex < popVector . size ()) { while ( stackTemp . top () != popVector [ popVectorIndex ]) { if ( pushVectorIndex >= pushVector . size ()) break ; stackTemp . push ( pushVector [ pushVectorIndex ++ ]); } if ( stackTemp . top () != popVector [ popVectorIndex ]) break ; stackTemp . pop (); popVectorIndex ++ ; } if ( stackTemp . empty ()) return true ; return false ; } \u5b8c\u6574\u4ee3\u7801\uff1a \u6808\u7684\u538b\u5165\uff0c\u5f39\u51fa\u5e8f\u5217","title":"\u9762\u8bd5\u989831: \u6808\u7684\u538b\u5165\uff0c\u5f39\u51fa\u5e8f\u5217"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#32","text":"struct Node { int value ; Node * pLeft = nullptr ; Node * pRight = nullptr ; }; vector < int > printBTreeOfLayer ( Node * pRoot ) { vector < int > vectorResult ; if ( pRoot == nullptr ) return vectorResult ; queue < Node *> queueNodes ; queueNodes . push ( pRoot ); vectorResult . push_back ( pRoot -> value ); Node * node = nullptr ; while ( queueNodes . size () > 0 ) { node = queueNodes . front (); queueNodes . pop (); if ( node -> pLeft != nullptr ) { queueNodes . push ( node -> pLeft ); vectorResult . push_back ( node -> pLeft -> value ); } if ( node -> pRight != nullptr ) { queueNodes . push ( node -> pRight ); vectorResult . push_back ( node -> pRight -> value ); } } return vectorResult ; } \u53c2\u8003\u4ee3\u7801: \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811","title":"\u9762\u8bd5\u989832: \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#33","text":"bool isSequenceOfBST ( int sequence [], int length ) { if ( sequence == nullptr || length <= 0 ) return false ; int root = sequence [ length - 1 ]; int i = 0 ; for (; i < length - 1 ; ++ i ) { if ( sequence [ i ] > root ) break ; } int j = i + 1 ; for (; j < length - 1 ; ++ j ) { if ( sequence [ j ] < root ) return false ; } bool left = true ; if ( i > 0 ) return isSequenceOfBST ( sequence , i ); bool right = true ; if ( i < length - 1 ) return isSequenceOfBST ( sequence + i , length - i - 1 ); return left && right ; }","title":"\u9762\u8bd5\u989833: \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#34","text":"struct Node { int value ; Node * pLeft = nullptr ; Node * pRight = nullptr ; }; void findPath ( Node * pNode , int expectSum , vector < int > vectorPath , int curSum ); void findPath ( Node * pRoot , int expectSum ) { if ( pRoot == nullptr ) return ; vector < int > vectorPath ; int curSum = 0 ; findPath ( pRoot , expectSum , vectorPath , curSum ); } void findPath ( Node * pNode , int expectSum , vector < int > vectorPath , int curSum ) { if ( pNode == nullptr ) return ; vectorPath . push_back ( pNode -> value ); curSum += pNode -> value ; // \u5982\u679c\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u7684\u548c\u7b49\u4e8e expectSum // \u5219\u6253\u5370\u51fa\u8def\u5f84 bool isLeaf = pNode -> pLeft == nullptr && pNode -> pRight == nullptr ; if ( curSum == expectSum && isLeaf ) { vector < int >:: iterator iter = vectorPath . begin (); for (; iter != vectorPath . end (); iter ++ ) { cout << * iter << ' ' ; } cout << endl ; } // \u7ee7\u7eed\u67e5\u627e\u5de6\u53f3\u5b50\u8282\u70b9 findPath ( pNode -> pLeft , expectSum , vectorPath , curSum ); findPath ( pNode -> pRight , expectSum , vectorPath , curSum ); // \u5728\u8fd4\u56de\u7236\u8282\u70b9\u4e4b\u524d\uff0c\u5728\u8def\u5f84\u4e0a\u5220\u9664\u5f53\u524d\u8282\u70b9 vectorPath . pop_back (); }","title":"\u9762\u8bd5\u989834: \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"%E5%89%91%E6%8C%87offer/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF/#35","text":"\u53c2\u8003\u4ee3\u7801: \u590d\u6742\u94fe\u8868\u7684\u590d\u5236","title":"\u9762\u8bd5\u989835: \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"%E5%89%91%E6%8C%87offer/%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF/","text":"\u548c\u6570\u636e\u7ed3\u6784\u4e00\u6837, \u8003\u67e5\u7b97\u6cd5\u7684\u9762\u8bd5\u9898\u4e5f\u5907\u53d7\u9762\u8bd5\u5b98\u7684\u9752\u7750. \u6709\u5f88\u591a\u7b97\u6cd5\u90fd\u53ef\u4ee5\u7528\u9012\u5f52\u548c\u5faa\u73af\u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0. \u901a\u5e38\u9012\u5f52\u5b9e\u73b0\u7684\u4ee3\u7801\u6bd4\u8f83\u7b80\u6d01, \u4f46\u6027\u80fd\u5374\u4e0d\u5982\u57fa\u4e8e\u5faa\u73af\u7684\u5b9e\u73b0\u65b9\u6cd5, \u5728\u9762\u8bd5\u7684\u65f6\u5019, \u53ef\u4ee5\u6839\u636e\u9898\u76ee\u7684\u7279\u70b9, \u751a\u81f3\u53ef\u4ee5\u548c\u9762\u8bd5\u5b98\u8ba8\u8bba\u9009\u62e9\u5408\u9002\u7684\u65b9\u6cd5\u7f16\u7a0b. \u901a\u5e38\u6392\u5e8f\u548c\u67e5\u627e\u662f\u9762\u8bd5\u65f6\u8003\u67e5\u7b97\u6cd5\u7684\u91cd\u70b9. \u5728\u51c6\u5907\u9762\u8bd5\u7684\u65f6\u5019, \u6211\u4eec\u5e94\u8be5\u638c\u63e1\u4e8c\u5206\u67e5\u627e, \u5f52\u5e76\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f, \u505a\u5230\u80fd\u968f\u65f6\u6b63\u786e, \u5b8c\u6574\u7684\u5199\u51fa\u4ee3\u7801. \u5982\u679c\u5728\u9762\u8bd5\u9898\u8981\u6c42\u5199\u51fa\u4e8c\u7ef4\u6570\u7ec4(\u53ef\u80fd\u5177\u4f53\u8868\u73b0\u4e3a\u8ff7\u5bab\u6216\u8005\u68cb\u76d8\u7b49) \u4e0a\u641c\u7d22\u8def\u5f84, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7528\u56de\u6eaf\u6cd5. \u901a\u5e38\u56de\u6eaf\u6cd5\u5f88\u9002\u5408\u7528\u9012\u5f52\u7684\u4ee3\u7801\u5b9e\u73b0. \u53ea\u6709\u5f53\u9762\u8bd5\u5b98\u9650\u5b9a\u4e0d\u53ef\u4ee5\u7528\u9012\u5f52\u5b9e\u73b0\u7684\u65f6\u5019, \u6211\u4eec\u5728\u8003\u8651\u7528\u6808\u6765\u6a21\u62df\u9012\u5f52\u7684\u8fc7\u7a0b. \u5982\u679c\u9762\u8bd5\u9898\u662f\u6c42\u67d0\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3, \u5e76\u4e14\u8be5\u95ee\u9898\u53ef\u4ee5\u5206\u4e3a\u591a\u4e2a\u5b50\u95ee\u9898, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7528\u52a8\u6001\u89c4\u5212. \u5728\u7528\u81ea\u4e0a\u800c\u4e0b\u7684\u9012\u5f52\u601d\u8def\u53bb\u5206\u6790\u52a8\u6001\u89c4\u5212\u95ee\u9898\u7684\u65f6\u5019, \u6211\u4eec\u4f1a\u53d1\u73b0\u5b50\u95ee\u9898\u4e4b\u95f4\u5b58\u5728\u91cd\u53e0\u7684\u66f4\u5c0f\u5b50\u95ee\u9898, \u4e3a\u4e86\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u91cd\u590d\u8ba1\u7b97, \u6211\u4eec\u7528\u81ea\u4e0b\u800c\u4e0a\u7684\u5faa\u73af\u4ee3\u7801\u6765\u5b9e\u73b0, \u4e5f\u5c31\u662f\u628a\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u7b97\u51fa\u6765\u5e76\u7528\u6570\u7ec4\u4fdd\u5b58\u4e0b\u6765, \u63a5\u4e0b\u6765\u57fa\u4e8e\u95ee\u9898\u7684\u89e3\u8ba1\u7b97\u5927\u95ee\u9898\u7684\u89e3 \u5982\u679c\u6211\u4eec\u544a\u8bc9\u9762\u8bd5\u5b98\u52a8\u6001\u89c4\u5212\u7684\u601d\u8def\u4e4b\u540e, \u9762\u8bd5\u5b98\u8fd8\u5728\u63d0\u9192\u8bf4\u5728\u5206\u89e3\u5b50\u95ee\u9898\u7684\u65f6\u5019\u662f\u4e0d\u662f\u5b58\u5728\u67d0\u4e2a\u7279\u6b8a\u7684\u9009\u62e9,\u5982\u679c\u91c7\u7528\u8fd9\u4e2a\u7279\u6b8a\u7684\u9009\u62e9\u5c06\u4e00\u5b9a\u80fd\u5f97\u5230\u6700\u4f18\u89e3, \u90a3\u4e48, \u901a\u5e38\u9762\u8bd5\u5b98\u8fd9\u6837\u7684\u63d0\u793a\u610f\u5473\u7740\u8be5\u95ee\u9898\u53ef\u80fd\u9002\u7528\u4e8e\u8d2a\u5a6a\u7b97\u6cd5, \u5f53\u7136\u9762\u8bd5\u5b98\u4e5f\u4f1a\u8981\u6c42\u5e94\u8058\u8005\u8bc1\u660e\u8d2a\u5a6a\u7b97\u6cd5\u9009\u62e9\u7684\u786e\u6700\u7ec8\u80fd\u591f\u5f97\u5230\u6700\u4f18\u89e3 \u4f4d\u8fd0\u7b97\u53ef\u4ee5\u770b\u6210\u4e00\u7c7b\u7279\u6b8a\u7684\u7b97\u6cd5, \u5b83\u662f\u628a\u6570\u5b57\u8868\u793a\u6210\u4e8c\u8fdb\u5236\u4e4b\u540e\u5bf90 \u548c 1\u7684\u64cd\u4f5c. \u7531\u4e8e\u4f4d\u8fd0\u7b97\u7684\u5bf9\u8c61\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57, \u6240\u4ee5\u4e0d\u662f\u5f88\u76f4\u89c2, \u4f46\u638c\u63e1\u5b83\u4e5f\u4e0d\u96be, \u56e0\u4e3a\u603b\u5171\u53ea\u6709 \u4e0e, \u6216, \u5f02\u6216, \u5de6\u79fb, \u53f3\u79fb5\u4e2d\u4f4d\u8fd0\u7b97. \u9012\u5f52\u548c\u5faa\u73af \u00b6 \u5982\u679c\u6211\u4eec\u9700\u8981\u91cd\u590d\u591a\u6b21\u8ba1\u7b97\u76f8\u540c\u95ee\u9898\u65f6, \u53ef\u4ee5\u9009\u62e9\u9012\u5f52\u6216\u5faa\u73af, \u9762\u8bd5\u65f6, \u5982\u679c\u9762\u8bd5\u5b98\u6ca1\u6709\u7279\u522b\u8981\u6c42, \u5c3d\u91cf\u591a\u91c7\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u5b9e\u73b0 \u9012\u5f52\u7684\u7f3a\u70b9: \u9012\u5f52\u867d\u7136\u6709\u7b80\u6d01\u7684\u4f18\u70b9, \u4f46\u7531\u4e8e\u9012\u5f52\u8c03\u7528\u51fd\u6570\u81ea\u8eab, \u800c\u51fd\u6570\u8c03\u7528\u662f\u6709\u65f6\u95f4\u548c\u7a7a\u95f4\u6d88\u8017\u7684, \u6bcf\u4e00\u6b21\u51fd\u6570\u8c03\u7528, \u90fd\u9700\u8981\u5728\u5185\u5b58\u6808\u4e2d\u4fdd\u5b58\u5206\u914d\u7a7a\u95f4\u4ee5\u4fdd\u5b58\u53c2\u6570, \u8fd4\u56de\u5730\u5740\u548c\u4e34\u65f6\u53d8\u91cf, \u800c\u4e14\u5f80\u6808\u91cc\u538b\u5165\u8f93\u5165\u548c\u5f39\u51fa\u6570\u636e\u90fd\u9700\u8981\u65f6\u95f4. \u9012\u5f52\u6709\u53ef\u80fd\u5f88\u591a\u8ba1\u7b97\u662f\u91cd\u590d\u7684, \u4ece\u800c\u5bf9\u6027\u80fd\u5e26\u6765\u5f88\u5927\u7684\u8d1f\u9762\u5f71\u54cd, \u9012\u5f52\u7684\u672c\u8d28\u662f\u628a\u4e00\u4e2a\u95ee\u9898\u5206\u89e3\u6210\u4e24\u4e2a\u6216\u591a\u4e2a\u5c0f\u95ee\u9898, \u5982\u679c\u591a\u4e2a\u5c0f\u95ee\u9898\u5b58\u5728\u76f8\u4f1a\u91cd\u53e0\u7684\u90e8\u5206, \u5c31\u5b58\u5728\u91cd\u590d\u8ba1\u7b97. (\u9762\u8bd5\u989810, 60) \u53ef\u80fd\u5f15\u8d77\u8c03\u7528\u6808\u6ea2\u51fa\u95ee\u9898. \u9762\u8bd5\u989810: \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u00b6 Question \u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879, \u5199\u4e00\u4e2a\u51fd\u6570, \u8f93\u5165n, \u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879, \u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b Tip \u65b9\u6cd51: \u65f6\u95f4\u590d\u6742\u5ea6O(2^n) \u9012\u5f52\uff0c\u5f88\u591aC\u8bed\u8a00\u6559\u79d1\u4e66\u5728\u8bb2\u8ff0\u9012\u5f52\u51fd\u6570\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u7528\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u56e0\u6b64\u5f88\u591a\u5e94\u8058\u8005\u5bf9\u9012\u5f52\u89e3\u6cd5\u90fd\u5f88\u719f\u6089\uff0c\u5f88\u5feb\u5199\u4e0b\u4e86\u4ee3\u7801\uff1a long Fibo1 ( unsigned int n ) { if ( n <= 1 ) return n ; return Fibo1 ( n - 1 ) + Fibo1 ( n - 2 ); } \u9762\u8bd5\u5b98\u4f1a\u63d0\u793a\u6211\u4eec\u4e0a\u8ff0\u9012\u5f52\u7684\u89e3\u6cd5\u6709\u5f88\u4e25\u91cd\u7684\u6548\u7387\u95ee\u9898\u5e76\u8981\u6c42\u6211\u4eec\u5206\u6790\u539f\u56e0\u3002 \u6211\u4eec\u4ee5\u6c42\u89e3f(10)\u4e3a\u4f8b\uff0c\u8981\u6c42\u5f97f(10), \u8981\u5148\u6c42\u5f97f(9)\u548cf(8)... \u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5f62\u7ed3\u6784\u6765\u8868\u793a\u8fd9\u79cd\u4f9d\u8d56\u5173\u7cfb \u65b9\u6cd52: \u65f6\u95f4\u590d\u6742\u4e3aO(n) \u6211\u4eec\u4e0d\u80fd\u53d1\u73b0\uff0c\u8fd9\u68f5\u6811\u79cd\u6709\u5f88\u591a\u8282\u70b9\u662f\u91cd\u590d\u7684\uff0c\u800c\u4e14\u91cd\u590d\u7684\u8282\u70b9\u6570\u4f1a\u968f\u7740n\u7684\u589e\u5927\u800c\u6025\u5267\u589e\u52a0\uff0c\u8fd9\u610f\u5473\u7740\u8ba1\u7b97\u91cf\u4f1a\u968f\u7740n\u7684\u589e\u5927\u800c\u6025\u5267\u589e\u5927\u3002 \u5176\u5b9e\u6539\u8fdb\u7684\u65b9\u6cd5\u5e76\u4e0d\u590d\u6742\uff0c\u4e0a\u8ff0\u9012\u5f52\u4ee3\u7801\u4e4b\u6240\u4ee5\u6162\uff0c\u662f\u56e0\u4e3a\u91cd\u590d\u8ba1\u7b97\u592a\u591a\uff0c\u6211\u4eec\u53ea\u8981\u60f3\u529e\u6cd5\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u5c31\u884c\u4e86\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u628a\u5df2\u7ecf\u5f97\u5230\u7684\u6570\u5217\u4e2d\u95f4\u9879\u4fdd\u5b58\u8d77\u6765\uff0c\u5728\u4e0b\u6b21\u9700\u8981\u8ba1\u7b97\u7684\u65f6\u5019\u5148\u67e5\u627e\u4e00\u4e0b\uff0c\u5982\u679c\u524d\u9762\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86\u5c31\u4e0d\u7528\u518d\u91cd\u590d\u8ba1\u7b97\u4e86\u3002 \u66f4\u7b80\u5355\u7684\u529e\u6cd5\u662f\u91cd\u4e0b\u5f80\u4e0a\u8ba1\u7b97\uff0c\u9996\u5148\u6839\u636ef(0)\u548cf(1)\u8ba1\u7b97\u9664f(2)\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u65f6\u95f4\u590d\u6742\u4e3aO(n) long Fibo2 ( unsigned int n ) { if ( n <= 1 ) return n ; int FiboOne = 0 ; int FiboTwo = 1 ; int FiboN = 0 ; for ( size_t i = 2 ; i <= n ; i ++ ) { FiboN = FiboOne + FiboTwo ; FiboOne = FiboTwo ; FiboTwo = FiboN ; } return FiboN ; } Answer \u5b8c\u6574\u4ee3\u7801: Fibo \u6d4b\u8bd5\u7528\u4f8b \u529f\u80fd\u6d4b\u8bd5\uff0c\u8f93\u5165 3, 5, 10\u7b49 \u8fb9\u754c\u503c\u6d4b\u8bd5 \u8f93\u5165 0, 1, 2\u7b49 \u6027\u80fd\u6d4b\u8bd5 \u8f93\u5165\u8f83\u5927\u7684\u6570 40, 50, 100\u7b49 \u672c\u9898\u8003\u70b9 \u9012\u5f52\uff0c\u5faa\u73af\u7684\u7406\u89e3\u53ca\u7f16\u7801\u80fd\u529b \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684\u80fd\u529b \u6570\u5b66\u5efa\u6a21\u7684\u80fd\u529b","title":"4.1 \u9012\u5f52\u548c\u5faa\u73af"},{"location":"%E5%89%91%E6%8C%87offer/%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF/#_1","text":"\u5982\u679c\u6211\u4eec\u9700\u8981\u91cd\u590d\u591a\u6b21\u8ba1\u7b97\u76f8\u540c\u95ee\u9898\u65f6, \u53ef\u4ee5\u9009\u62e9\u9012\u5f52\u6216\u5faa\u73af, \u9762\u8bd5\u65f6, \u5982\u679c\u9762\u8bd5\u5b98\u6ca1\u6709\u7279\u522b\u8981\u6c42, \u5c3d\u91cf\u591a\u91c7\u7528\u9012\u5f52\u7684\u65b9\u6cd5\u5b9e\u73b0 \u9012\u5f52\u7684\u7f3a\u70b9: \u9012\u5f52\u867d\u7136\u6709\u7b80\u6d01\u7684\u4f18\u70b9, \u4f46\u7531\u4e8e\u9012\u5f52\u8c03\u7528\u51fd\u6570\u81ea\u8eab, \u800c\u51fd\u6570\u8c03\u7528\u662f\u6709\u65f6\u95f4\u548c\u7a7a\u95f4\u6d88\u8017\u7684, \u6bcf\u4e00\u6b21\u51fd\u6570\u8c03\u7528, \u90fd\u9700\u8981\u5728\u5185\u5b58\u6808\u4e2d\u4fdd\u5b58\u5206\u914d\u7a7a\u95f4\u4ee5\u4fdd\u5b58\u53c2\u6570, \u8fd4\u56de\u5730\u5740\u548c\u4e34\u65f6\u53d8\u91cf, \u800c\u4e14\u5f80\u6808\u91cc\u538b\u5165\u8f93\u5165\u548c\u5f39\u51fa\u6570\u636e\u90fd\u9700\u8981\u65f6\u95f4. \u9012\u5f52\u6709\u53ef\u80fd\u5f88\u591a\u8ba1\u7b97\u662f\u91cd\u590d\u7684, \u4ece\u800c\u5bf9\u6027\u80fd\u5e26\u6765\u5f88\u5927\u7684\u8d1f\u9762\u5f71\u54cd, \u9012\u5f52\u7684\u672c\u8d28\u662f\u628a\u4e00\u4e2a\u95ee\u9898\u5206\u89e3\u6210\u4e24\u4e2a\u6216\u591a\u4e2a\u5c0f\u95ee\u9898, \u5982\u679c\u591a\u4e2a\u5c0f\u95ee\u9898\u5b58\u5728\u76f8\u4f1a\u91cd\u53e0\u7684\u90e8\u5206, \u5c31\u5b58\u5728\u91cd\u590d\u8ba1\u7b97. (\u9762\u8bd5\u989810, 60) \u53ef\u80fd\u5f15\u8d77\u8c03\u7528\u6808\u6ea2\u51fa\u95ee\u9898.","title":"\u9012\u5f52\u548c\u5faa\u73af"},{"location":"%E5%89%91%E6%8C%87offer/%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF/#10","text":"Question \u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879, \u5199\u4e00\u4e2a\u51fd\u6570, \u8f93\u5165n, \u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879, \u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b Tip \u65b9\u6cd51: \u65f6\u95f4\u590d\u6742\u5ea6O(2^n) \u9012\u5f52\uff0c\u5f88\u591aC\u8bed\u8a00\u6559\u79d1\u4e66\u5728\u8bb2\u8ff0\u9012\u5f52\u51fd\u6570\u7684\u65f6\u5019\uff0c\u90fd\u4f1a\u7528\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u56e0\u6b64\u5f88\u591a\u5e94\u8058\u8005\u5bf9\u9012\u5f52\u89e3\u6cd5\u90fd\u5f88\u719f\u6089\uff0c\u5f88\u5feb\u5199\u4e0b\u4e86\u4ee3\u7801\uff1a long Fibo1 ( unsigned int n ) { if ( n <= 1 ) return n ; return Fibo1 ( n - 1 ) + Fibo1 ( n - 2 ); } \u9762\u8bd5\u5b98\u4f1a\u63d0\u793a\u6211\u4eec\u4e0a\u8ff0\u9012\u5f52\u7684\u89e3\u6cd5\u6709\u5f88\u4e25\u91cd\u7684\u6548\u7387\u95ee\u9898\u5e76\u8981\u6c42\u6211\u4eec\u5206\u6790\u539f\u56e0\u3002 \u6211\u4eec\u4ee5\u6c42\u89e3f(10)\u4e3a\u4f8b\uff0c\u8981\u6c42\u5f97f(10), \u8981\u5148\u6c42\u5f97f(9)\u548cf(8)... \u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5f62\u7ed3\u6784\u6765\u8868\u793a\u8fd9\u79cd\u4f9d\u8d56\u5173\u7cfb \u65b9\u6cd52: \u65f6\u95f4\u590d\u6742\u4e3aO(n) \u6211\u4eec\u4e0d\u80fd\u53d1\u73b0\uff0c\u8fd9\u68f5\u6811\u79cd\u6709\u5f88\u591a\u8282\u70b9\u662f\u91cd\u590d\u7684\uff0c\u800c\u4e14\u91cd\u590d\u7684\u8282\u70b9\u6570\u4f1a\u968f\u7740n\u7684\u589e\u5927\u800c\u6025\u5267\u589e\u52a0\uff0c\u8fd9\u610f\u5473\u7740\u8ba1\u7b97\u91cf\u4f1a\u968f\u7740n\u7684\u589e\u5927\u800c\u6025\u5267\u589e\u5927\u3002 \u5176\u5b9e\u6539\u8fdb\u7684\u65b9\u6cd5\u5e76\u4e0d\u590d\u6742\uff0c\u4e0a\u8ff0\u9012\u5f52\u4ee3\u7801\u4e4b\u6240\u4ee5\u6162\uff0c\u662f\u56e0\u4e3a\u91cd\u590d\u8ba1\u7b97\u592a\u591a\uff0c\u6211\u4eec\u53ea\u8981\u60f3\u529e\u6cd5\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u5c31\u884c\u4e86\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u628a\u5df2\u7ecf\u5f97\u5230\u7684\u6570\u5217\u4e2d\u95f4\u9879\u4fdd\u5b58\u8d77\u6765\uff0c\u5728\u4e0b\u6b21\u9700\u8981\u8ba1\u7b97\u7684\u65f6\u5019\u5148\u67e5\u627e\u4e00\u4e0b\uff0c\u5982\u679c\u524d\u9762\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e86\u5c31\u4e0d\u7528\u518d\u91cd\u590d\u8ba1\u7b97\u4e86\u3002 \u66f4\u7b80\u5355\u7684\u529e\u6cd5\u662f\u91cd\u4e0b\u5f80\u4e0a\u8ba1\u7b97\uff0c\u9996\u5148\u6839\u636ef(0)\u548cf(1)\u8ba1\u7b97\u9664f(2)\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u65f6\u95f4\u590d\u6742\u4e3aO(n) long Fibo2 ( unsigned int n ) { if ( n <= 1 ) return n ; int FiboOne = 0 ; int FiboTwo = 1 ; int FiboN = 0 ; for ( size_t i = 2 ; i <= n ; i ++ ) { FiboN = FiboOne + FiboTwo ; FiboOne = FiboTwo ; FiboTwo = FiboN ; } return FiboN ; } Answer \u5b8c\u6574\u4ee3\u7801: Fibo \u6d4b\u8bd5\u7528\u4f8b \u529f\u80fd\u6d4b\u8bd5\uff0c\u8f93\u5165 3, 5, 10\u7b49 \u8fb9\u754c\u503c\u6d4b\u8bd5 \u8f93\u5165 0, 1, 2\u7b49 \u6027\u80fd\u6d4b\u8bd5 \u8f93\u5165\u8f83\u5927\u7684\u6570 40, 50, 100\u7b49 \u672c\u9898\u8003\u70b9 \u9012\u5f52\uff0c\u5faa\u73af\u7684\u7406\u89e3\u53ca\u7f16\u7801\u80fd\u529b \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684\u80fd\u529b \u6570\u5b66\u5efa\u6a21\u7684\u80fd\u529b","title":"\u9762\u8bd5\u989810: \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/","text":"\u94fe\u8868\u5e94\u8be5\u662f\u9762\u8bd5\u65f6\u88ab\u63d0\u53ca\u6700\u9891\u7e41\u7684\u6570\u636e\u7ed3\u6784\u3002 \u94fe\u8868\u7684\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u5b83\u7531\u6307\u9488\u628a\u82e5\u5e72\u4e2a\u8282\u70b9\u8fde\u63a5\u6210\u94fe\u72b6\u7ed3\u6784\u3002 \u94fe\u8868\u7684\u521b\u5efa\uff0c\u63d2\u5165\u8282\u70b9\uff0c\u5220\u9664\u8282\u70b9\u7b49\u64cd\u4f5c\u90fd\u53ea\u9700\u898120\u884c\u5de6\u53f3\u7684\u4ee3\u7801\u5c31\u80fd\u5b9e\u73b0\uff0c\u5176\u4ee3\u7801\u91cf\u6bd4\u8f83\u9002\u5408\u9762\u8bd5\u3002 \u800c\u50cf\u54c8\u5e0c\u8868\uff0c\u6709\u5411\u56fe\u7b49\u590d\u6742\u6570\u636e\u7ed3\u6784\uff0c\u5b9e\u73b0\u5b83\u4eec\u7684\u4e00\u4e2a\u64cd\u4f5c\u9700\u8981\u7684\u4ee3\u7801\u91cf\u90fd\u6bd4\u8f83\u5927\uff0c\u5f88\u96be\u5728\u51e0\u5341\u5206\u949f\u7684\u9762\u8bd5\u4e2d\u5b8c\u6210\u3002 \u53e6\u5916\uff0c\u7531\u4e8e\u94fe\u8868\u662f\u4e00\u79cd\u52a8\u6001\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u9700\u8981\u5bf9\u6307\u9488\u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64\u5e94\u8058\u8005\u9700\u8981\u5f88\u597d\u7684\u7f16\u7a0b\u529f\u5e95\u624d\u80fd\u5199\u51fa\u5b8c\u6574\u7684\u64cd\u4f5c\u94fe\u8868\u7684\u4ee3\u7801\u3002 \u800c\u4e14\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u5f88\u7075\u6d3b\uff0c\u9762\u8bd5\u5b98\u53ef\u4ee5\u7528\u94fe\u8868\u6765\u8bbe\u8ba1\u5177\u6709\u6311\u6218\u6027\u7684\u9762\u8bd5\u9898\u3002 \u57fa\u4e8e\u4e0a\u8ff0\u51e0\u4e2a\u539f\u56e0\uff0c\u5f88\u591a\u9762\u8bd5\u5b98\u90fd\u7279\u522b\u9752\u7750\u4e0e\u94fe\u8868\u76f8\u5173\u7684\u9898\u76ee\u3002 \u6211\u4eec\u8bf4\u94fe\u8868\u662f\u4e00\u79cd\u52a8\u6001\u6570\u636e\u7ed3\u6784\uff0c\u662f\u56e0\u4e3a\u5728\u521b\u5efa\u94fe\u8868\u65f6\uff0c\u65e0\u987b\u77e5\u9053\u94fe\u8868\u957f\u5ea6\uff0c\u5f53\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e3a\u65b0\u8282\u70b9\u5206\u914d\u5185\u5b58\uff0c\u7136\u540e\u8c03\u6574\u6307\u9488\u6307\u5411\u6765\u786e\u4fdd\u65b0\u8282\u70b9\u88ab\u94fe\u63a5\u5230\u94fe\u8868\u5f53\u4e2d\u3002 \u5185\u5b58\u5206\u914d\u4e0d\u662f\u5728\u521b\u5efa\u94fe\u8868\u65f6\u4e00\u6b21\u6027\u5b8c\u6210\u7684\uff0c\u800c\u662f\u6bcf\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\u5206\u914d\u4e00\u6b21\u5185\u5b58\u3002 \u7531\u4e8e\u6ca1\u6709\u95f2\u7f6e\u7684\u5185\u5b58\uff0c\u94fe\u8868\u7684\u7a7a\u95f4\u6548\u7387\u6bd4\u6570\u7ec4\u9ad8\u3002 \u5982\u679c\u5355\u5411\u94fe\u8868\u7684\u8282\u70b9\u5b9a\u4e49\u5982\u4e0b\uff1a struct Node { int value ; Node * next ; }; \u90a3\u4e48\u5f80\u8be5\u94fe\u8868\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\u7684c++\u4ee3\u7801\u5982\u4e0b\uff1a void AddToTail ( Node ** pHead , int value ) { Node * node = new Node (); node -> value = value ; node -> next = nullptr ; // \u5982\u679chead\u4e3anullptr, \u5219\u8ffd\u52a0\u7684\u5143\u7d20\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20 if ( * pHead == nullptr ) { * pHead = node ; } else { Node * cur = * pHead ; while ( cur -> next != nullptr ) cur = cur -> next ; cur -> next = node ; } } \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u8981\u7279\u522b\u6ce8\u610f\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570pHead\u662f\u4e00\u4e2a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\u3002\u5f53\u6211\u4eec\u5f80\u4e00\u4e2a\u7a7a\u94fe\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u65f6\uff0c\u65b0\u63d2\u5165\u7684\u8282\u70b9\u5c31\u662f\u94fe\u8868\u7684\u5934\u6307\u9488\u3002 \u7531\u4e8e\u6b64\u65f6\u4f1a\u6539\u52a8\u5934\u6307\u9488\uff0c\u56e0\u6b64\u5fc5\u987b\u628apHead\u53c2\u6570\u8bbe\u4e3a\u6307\u5411\u6307\u9488\u7684\u6307\u9488\uff0c\u5426\u5219\u51fa\u4e86\u8fd9\u4e2a\u51fd\u6570pHead\u4ecd\u7136\u662f\u4e00\u4e2a\u7a7a\u6307\u9488\u3002 \u7531\u4e8e\u94fe\u8868\u4e2d\u7684\u5185\u5b58\u4e0d\u662f\u4e00\u6b21\u6027\u5206\u914d\u7684\uff0c\u56e0\u800c\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u94fe\u8868\u7684\u5185\u5b58\u548c\u6570\u7ec4\u4e00\u6837\u662f\u8fde\u7eed\u7684\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u60f3\u5728\u94fe\u8868\u4e2d\u627e\u5230\u5b83\u7684\u7b2ci\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u6cbf\u7740\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u904d\u5386\u94fe\u8868\uff0c\u5b83\u7684\u65f6\u95f4\u6548\u7387\u4e3aO(n)\u3002 \u4e0b\u9762\u662f\u5728\u94fe\u8868\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u542b\u6709\u67d0\u503c\u7684\u8282\u70b9\u5e76\u5220\u9664\u8be5\u8282\u70b9\u7684\u4ee3\u7801\u3002 void RemoveNode ( Node ** pHead , int value ) { // \u7a7a\u94fe\u8868 if ( pHead == nullptr || * pHead == nullptr ) return ; Node * pre = * pHead ; if ( pre -> value == value ) { if ( pre -> next != nullptr ) * pHead = pre -> next ; else * pHead = nullptr ; return ; } if ( pre -> next == nullptr ) return ; Node * cur = pre -> next ; while ( cur != nullptr ) { if ( cur -> value == value ) { pre -> next = cur -> next ; return ; } else { pre = pre -> next ; cur = pre -> next ; } } } \u5b8c\u6574\u7684\u53c2\u8003\u4ee3\u7801: LinkList.cpp \u9664\u4e86\u7b80\u5355\u7684\u5355\u5411\u94fe\u8868\u7ecf\u5e38\u88ab\u8bbe\u8ba1\u4e3a\u9762\u8bd5\u9898(\u8be6\u89c1\u9762\u8bd5\u98986\uff0c\u9762\u8bd5\u989818\uff0c \u9762\u8bd5\u989822\uff0c\u9762\u8bd5\u989824\uff0c\u9762\u8bd5\u989825\uff0c\u9762\u8bd5\u989852\u7b49)\uff0c \u94fe\u8868\u7684\u5176\u4ed6\u5f62\u5f0f\u4e5f\u5907\u53d7\u9762\u8bd5\u5b98\u7684\u9752\u7750\u3002 \u628a\u94fe\u8868\u7684\u672b\u5c3e\u8282\u70b9\u7684\u6307\u9488\u6307\u5411\u5934\u8282\u70b9\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u73af\u5f62\u94fe\u8868\uff08\u8be6\u89c1\u9762\u8bd5\u989862\uff09 \u94fe\u8868\u4e2d\u7684\u8282\u70b9\u4e2d\u9664\u4e86\u6709\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u8fd8\u6709\u6307\u5411\u524d\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u3002 \u8fd9\u5c31\u662f\u53cc\u5411\u94fe\u8868\uff08\u8be6\u89c1\u9762\u8bd5\u989836\uff09 \u94fe\u8868\u4e2d\u7684\u8282\u70b9\u4e2d\u9664\u4e86\u6709\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u8fd8\u6709\u6307\u5411\u4efb\u610f\u8282\u70b9\u7684\u6307\u9488\uff0c\u8fd9\u5c31\u662f\u590d\u6742\u94fe\u8868\u3002\uff08\u8be6\u89c1\u9762\u8bd5\u989835\uff09 \u9762\u8bd5\u98986: \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u00b6 Question \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u6253\u5370\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u94fe\u8868\u8282\u70b9\u5b9a\u4e49\u5982\u4e0b\u3002 struct Node { int value ; Node * next ; }; \u770b\u5230\u8fd9\u9053\u9898\u540e\uff0c\u5f88\u591a\u4eba\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u5c06\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u4e8e\u662f\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u628a\u94fe\u8868\u4e2d\u7684\u94fe\u63a5\u8282\u70b9\u53cd\u8f6c\u8fc7\u6765\uff0c\u6539\u53d8\u94fe\u8868\u7684\u65b9\u5411\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u4e86\u3002 \u4f46\u662f\u8be5\u65b9\u6cd5\u4f1a\u6539\u53d8\u539f\u94fe\u8868\u7684\u7ed3\u6784\u3002 \u662f\u5426\u5141\u8bb8\u5728\u6253\u5370\u94fe\u8868\u7684\u65f6\u5019\u4fee\u6539\u94fe\u8868\u7684\u7ed3\u6784\uff1f \u8fd9\u53d6\u51b3\u4e8e\u9762\u8bd5\u5b98\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u5728\u9762\u8bd5\u7684\u65f6\u5019\u6211\u4eec\u8981\u8be2\u95ee\u6e05\u695a\u9762\u8bd5\u5b98\u7684\u8981\u6c42\u3002 Tip \u5728\u9762\u8bd5\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u6253\u7b97\u4fee\u6539\u8f93\u5165\u7684\u6570\u636e\uff0c\u5219\u6700\u597d\u5148\u95ee\u9762\u8bd5\u5b98\u662f\u4e0d\u662f\u5141\u8bb8\u4fee\u6539\u3002 \u901a\u5e38\u6253\u5370\u662f\u4e00\u4e2a\u53ea\u8bfb\u64cd\u4f5c\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u6253\u5370\u65f6\u4fee\u6539\u5185\u5bb9\u3002\u5047\u8bbe\u9762\u8bd5\u5b98\u4e5f\u8981\u6c42\u4e0d\u80fd\u6539\u53d8\u94fe\u8868\u7684\u7ed3\u6784\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u5230\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u80af\u5b9a\u8981\u904d\u5386\u94fe\u8868\u3002 \u904d\u5386\u7684\u987a\u5e8f\u662f\u4ece\u5934\u5230\u5c3e\uff0c\u53ef\u8f93\u51fa\u7684\u987a\u5e8f\u786e\u662f\u4ece\u5c3e\u5230\u5934\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u904d\u5386\u7684\u8282\u70b9\u6700\u540e\u4e00\u4e2a\u8f93\u51fa\uff0c\u800c\u6700\u540e\u4e00\u4e2a\u9762\u8bd5\u7684\u8282\u70b9\u8981\u7b2c\u4e00\u4e2a\u8f93\u51fa\u3002\u8fd9\u5c31\u662f\u5178\u578b\u7684\u201d\u5148\u8fdb\u540e\u51fa\u201c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6808\u5b9e\u73b0\u8fd9\u79cd\u5faa\u5e8f\u3002\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u628a\u8be5\u8282\u70b9\u653e\u5230\u6808\u4e2d\u3002\u5f53\u904d\u5386\u5b8c\u6574\u4e2a\u94fe\u8868\u540e\uff0c\u518d\u4ece\u6808\u9876\u5f00\u59cb\u9010\u4e2a\u8f93\u51fa\u8282\u70b9\u7684\u503c\u3002 Answer \u6808\u5b9e\u73b0 void PrintLinkReversed ( Node * Head ) { stack < Node *> nodes ; Node * cur = Head ; while ( cur != nullptr ) { nodes . push ( cur ); cur = cur -> next ; } while ( ! nodes . empty ()) { cur = nodes . top (); cout << cur -> value << ' ' ; nodes . pop (); } cout << endl ; } \u9012\u5f52\u5b9e\u73b0 void PrintLinkReversed ( Node * Head ) { if ( Head == nullptr ) return ; else { PrintLinkReversed ( Head -> next ); if ( Head != nullptr ) cout << Head -> value << ' ' ; } } \u4e0a\u9762\u7684\u57fa\u4e8e\u9012\u5f52\u7684\u4ee3\u7801\u770b\u8d77\u6765\u7b80\u6d01\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53\u94fe\u8868\u975e\u5e38\u957f\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5bfc\u81f4\u51fd\u6570\u8c03\u7528\u7684\u5c42\u7ea7\u5f88\u6df1\uff0c\u4ece\u800c\u6709\u53ef\u80fd\u5bfc\u81f4\u51fd\u6570\u8c03\u7528\u6808\u6ea2\u51fa\u3002 PrintListReversed1.cpp PrintListReversed2.cpp \u672c\u9898\u8003\u70b9 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5355\u5411\u94fe\u8868\u7684\u7406\u89e3\u548c\u7f16\u7a0b\u80fd\u529b \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5faa\u73af\uff0c\u9012\u5f52\u548c\u68083\u4e2a\u76f8\u4e92\u5173\u8054\u7684\u6982\u5ff5\u7684\u7406\u89e3","title":"3.3 \u94fe\u8868"},{"location":"%E5%89%91%E6%8C%87offer/%E9%93%BE%E8%A1%A8/#6","text":"Question \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u6253\u5370\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u94fe\u8868\u8282\u70b9\u5b9a\u4e49\u5982\u4e0b\u3002 struct Node { int value ; Node * next ; }; \u770b\u5230\u8fd9\u9053\u9898\u540e\uff0c\u5f88\u591a\u4eba\u7684\u7b2c\u4e00\u53cd\u5e94\u662f\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u5c06\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u4e8e\u662f\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u628a\u94fe\u8868\u4e2d\u7684\u94fe\u63a5\u8282\u70b9\u53cd\u8f6c\u8fc7\u6765\uff0c\u6539\u53d8\u94fe\u8868\u7684\u65b9\u5411\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u4e86\u3002 \u4f46\u662f\u8be5\u65b9\u6cd5\u4f1a\u6539\u53d8\u539f\u94fe\u8868\u7684\u7ed3\u6784\u3002 \u662f\u5426\u5141\u8bb8\u5728\u6253\u5370\u94fe\u8868\u7684\u65f6\u5019\u4fee\u6539\u94fe\u8868\u7684\u7ed3\u6784\uff1f \u8fd9\u53d6\u51b3\u4e8e\u9762\u8bd5\u5b98\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u5728\u9762\u8bd5\u7684\u65f6\u5019\u6211\u4eec\u8981\u8be2\u95ee\u6e05\u695a\u9762\u8bd5\u5b98\u7684\u8981\u6c42\u3002 Tip \u5728\u9762\u8bd5\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u6253\u7b97\u4fee\u6539\u8f93\u5165\u7684\u6570\u636e\uff0c\u5219\u6700\u597d\u5148\u95ee\u9762\u8bd5\u5b98\u662f\u4e0d\u662f\u5141\u8bb8\u4fee\u6539\u3002 \u901a\u5e38\u6253\u5370\u662f\u4e00\u4e2a\u53ea\u8bfb\u64cd\u4f5c\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u6253\u5370\u65f6\u4fee\u6539\u5185\u5bb9\u3002\u5047\u8bbe\u9762\u8bd5\u5b98\u4e5f\u8981\u6c42\u4e0d\u80fd\u6539\u53d8\u94fe\u8868\u7684\u7ed3\u6784\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u5230\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u80af\u5b9a\u8981\u904d\u5386\u94fe\u8868\u3002 \u904d\u5386\u7684\u987a\u5e8f\u662f\u4ece\u5934\u5230\u5c3e\uff0c\u53ef\u8f93\u51fa\u7684\u987a\u5e8f\u786e\u662f\u4ece\u5c3e\u5230\u5934\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u904d\u5386\u7684\u8282\u70b9\u6700\u540e\u4e00\u4e2a\u8f93\u51fa\uff0c\u800c\u6700\u540e\u4e00\u4e2a\u9762\u8bd5\u7684\u8282\u70b9\u8981\u7b2c\u4e00\u4e2a\u8f93\u51fa\u3002\u8fd9\u5c31\u662f\u5178\u578b\u7684\u201d\u5148\u8fdb\u540e\u51fa\u201c\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6808\u5b9e\u73b0\u8fd9\u79cd\u5faa\u5e8f\u3002\u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u628a\u8be5\u8282\u70b9\u653e\u5230\u6808\u4e2d\u3002\u5f53\u904d\u5386\u5b8c\u6574\u4e2a\u94fe\u8868\u540e\uff0c\u518d\u4ece\u6808\u9876\u5f00\u59cb\u9010\u4e2a\u8f93\u51fa\u8282\u70b9\u7684\u503c\u3002 Answer \u6808\u5b9e\u73b0 void PrintLinkReversed ( Node * Head ) { stack < Node *> nodes ; Node * cur = Head ; while ( cur != nullptr ) { nodes . push ( cur ); cur = cur -> next ; } while ( ! nodes . empty ()) { cur = nodes . top (); cout << cur -> value << ' ' ; nodes . pop (); } cout << endl ; } \u9012\u5f52\u5b9e\u73b0 void PrintLinkReversed ( Node * Head ) { if ( Head == nullptr ) return ; else { PrintLinkReversed ( Head -> next ); if ( Head != nullptr ) cout << Head -> value << ' ' ; } } \u4e0a\u9762\u7684\u57fa\u4e8e\u9012\u5f52\u7684\u4ee3\u7801\u770b\u8d77\u6765\u7b80\u6d01\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53\u94fe\u8868\u975e\u5e38\u957f\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5bfc\u81f4\u51fd\u6570\u8c03\u7528\u7684\u5c42\u7ea7\u5f88\u6df1\uff0c\u4ece\u800c\u6709\u53ef\u80fd\u5bfc\u81f4\u51fd\u6570\u8c03\u7528\u6808\u6ea2\u51fa\u3002 PrintListReversed1.cpp PrintListReversed2.cpp \u672c\u9898\u8003\u70b9 \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5355\u5411\u94fe\u8868\u7684\u7406\u89e3\u548c\u7f16\u7a0b\u80fd\u529b \u8003\u67e5\u5e94\u8058\u8005\u5bf9\u5faa\u73af\uff0c\u9012\u5f52\u548c\u68083\u4e2a\u76f8\u4e92\u5173\u8054\u7684\u6982\u5ff5\u7684\u7406\u89e3","title":"\u9762\u8bd5\u98986: \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/","text":"\u7535\u8bdd\u9762\u8bd5 \u00b6 \u9762\u8bd5\u5b98\u6253\u7535\u8bdd\u7684\u5f62\u5f0f\u8003\u67e5\u5e94\u8058\u8005\uff0c\u4f1a\u63d0\u524d\u7ea6\u597d\u65f6\u95f4 \u6709\u4e9b\u9762\u8bd5\u5b98\u559c\u6b22\u641e\u7a81\u7136\u88ad\u51fb\uff0c\u5efa\u8bae\u5e94\u8058\u8005\u5728\u6295\u51fa\u7b80\u5386\u4e4b\u540e\u7684\u4e00\u4e24\u4e2a\u661f\u671f\u4e4b\u5185\uff0c\u4fdd\u8bc1\u624b\u673a\u7535\u6c60\u80fd\u81f3\u5c11\u8fde\u7eed\u901a\u8bdd\u4e00\u5c0f\u65f6\u3002\u5e94\u8058\u8005\u4e0d\u8981\u957f\u65f6\u95f4\u5f85\u5728\u5f88\u5608\u6742\u7684\u73af\u5883\u4e0b\u3002 \u7535\u8bdd\u9762\u8bd5\u53ea\u80fd\u4f9d\u9760\u58f0\u97f3\uff0c\u63cf\u8ff0\u590d\u6742\u7b97\u6cd5\u7684\u65f6\u5019\u5c3d\u53ef\u80fd\u5f62\u8c61\u628a\u7ec6\u8282\u8bf4\u6e05\u695a\u3002 \u4f8b\u5982\uff0c\u73b0\u573a\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u7528\u7b14\u5728\u767d\u7eb8\u4e0a\u753b\u51fa\u6765\uff0c\u7535\u8bdd\u9762\u8bd5\u5219\u9700\u8981\u628a\u4e8c\u53c9\u6811\u4e2d\u6709\u54ea\u4e9b\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u8282\u70b9\u662f\u4ec0\u4e48\uff0c\u53f3\u8282\u70b9\u662f\u4ec0\u4e48\u90fd\u8bf4\u5f97\u5f88\u6e05\u695a\u3002 \u5171\u4eab\u684c\u9762\u9762\u8bd5 \u00b6 \u5e94\u8058\u8005\u628a\u81ea\u5df1\u7684\u684c\u9762\u8fdc\u7a0b\u5206\u4eab\u7ed9\u9762\u8bd5\u5b98\uff0c\u9762\u8bd5\u5b98\u53ef\u4ee5\u89c2\u770b\u5e94\u8058\u8005\u7f16\u7a0b\u548c\u8c03\u8bd5\u7684\u8fc7\u7a0b\u3002 \u9762\u8bd5\u5b98\u5173\u5fc3\u5e94\u8058\u8005\u7684\u7f16\u7a0b\u4e60\u60ef\u53ca\u8c03\u8bd5\u80fd\u529b\u3002 \u901a\u5e38\u9762\u8bd5\u5b98\u4f1a\u8ba4\u53ef\u4ee5\u4e0b\u51e0\u4e2a\u70b9\uff1a \u601d\u8003\u6e05\u695a\u518d\u5f00\u59cb\u7f16\u7801 \u826f\u597d\u7684\u4ee3\u7801\u547d\u540d\u548c\u7f29\u8fdb\u5bf9\u9f50\u4e60\u60ef \u80fd\u591f\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5 \u73b0\u573a\u9762\u8bd5 \u00b6 \u524d\u5f80\u516c\u53f8\u53c2\u52a0\u9762\u8bd5\u4e4b\u524d \u89c4\u5212\u597d\u8def\u7ebf\u5e76\u4f30\u7b97\u51fa\u884c\u65f6\u95f4 \uff0c\u9884\u7559\u534a\u5c0f\u65f6\u7f13\u51b2\u65f6\u95f4\u5e94\u5bf9\u5835\u8f66\u7b49\u610f\u5916\u60c5\u51b5 \u6ce8\u610f\u9762\u8bd5\u9080\u8bf7\u51fd\u91cc\u7684\u9762\u8bd5\u6d41\u7a0b \u3002 \u5982\u679c\u9762\u8bd5\u6709\u597d\u51e0\u8f6e\uff0c\u65f6\u95f4\u5f88\u957f\uff0c\u9762\u8bd5\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u89c9\u5f97\u75b2\u52b3\uff0c\u601d\u7ef4\u8fdf\u949d\uff0c\u53ef\u4ee5\u5e26\u4e9b\u63d0\u795e\u996e\u6599\u3002 \u51c6\u5907\u51e0\u4e2a\u95ee\u9898 \uff0c\u6bcf\u8f6e\u9762\u8bd5\u7684\u6700\u540e\uff0c\u9762\u8bd5\u5b98\u90fd\u4f1a\u8ba9\u5e94\u8058\u8005\u63d0\u95ee\u3002 \u51c6\u5907\u597d\u5f97\u4f53\u7684\u8863\u670d \u9762\u8bd5\u76843\u4e2a\u73af\u8282 \u00b6 \u884c\u4e3a\u9762\u8bd5\uff1a \u9762\u8bd5\u5b98\u53c2\u7167\u7b80\u5386\u4e86\u89e3\u5e94\u8058\u8005\u8fc7\u5f80\u7ecf\u9a8c\u3002 \u6280\u672f\u9762\u8bd5\uff1a\u8981\u6c42\u5e94\u8058\u8005\u73b0\u573a\u5199\u4ee3\u7801\u3002 \u5e94\u8058\u8005\u63d0\u95ee\u3002 \u884c\u4e3a\u9762\u8bd5 \u00b6 \u9762\u8bd5\u5b98\u4f1a\u6ce8\u610f\u5e94\u8058\u8005\u7684\u6027\u683c\u7279\u70b9\uff0c\u6df1\u5165\u4e86\u89e3\u7b80\u5386\u4e2d\u4e3e\u4f8b\u7684\u9879\u76ee\u7ecf\u5386\u3002 \u4e0d\u5c11\u9762\u8bd5\u5b98\u4f1a\u8ba9\u5e94\u8058\u8005\u505a\u4e00\u4e2a\u7b80\u77ed\u7684\u81ea\u6211\u4ecb\u7ecd\uff0c\u7531\u4e8e\u9762\u8bd5\u5b98\u624b\u62ff\u7b80\u5386\uff0c\u56e0\u6b64\u81ea\u6211\u4ecb\u7ecd\u4e0d\u7528\u82b1\u5f88\u591a\u65f6\u95f4\u3002 \u752830\u79d2\u52301\u5206\u949f\u7684\u65f6\u95f4\u4ecb\u7ecd\u81ea\u5df1\u7684\u4e3b\u8981\u5b66\u4e60\uff0c\u5de5\u4f5c\u7ecf\u5386\u5373\u53ef\u3002 \u5982\u679c\u9762\u8bd5\u5b98\u5bf9\u4f60\u7684\u7ecf\u5386\u6216\u9879\u76ee\u611f\u5174\u8da3\uff0c\u90a3\u4e48\u4ed6\u4f1a\u6709\u9488\u5bf9\u6027\u5730\u63d0\u95ee\u3002 \u5e94\u8058\u8005\u7684\u9879\u76ee\u7ecf\u9a8c \u00b6 \u5efa\u8bae\u6839\u636eSTAR\u6cd5\u5219\u63cf\u8ff0\u81ea\u5df1\u7684\u9879\u76ee\u7ecf\u5386\u3002 Situation \u7b80\u77ed\u7684\u9879\u76ee\u80cc\u666f\uff1a\u9879\u76ee\u89c4\u6a21\uff0c\u5f00\u53d1\u7684\u8f6f\u4ef6\u529f\u80fd\uff0c\u76ee\u6807\u7528\u6237\u7b49\u3002 Task \u81ea\u5df1\u5b8c\u6210\u7684\u4efb\u52a1\uff1a\u8fd9\u4e2a\u8981\u5199\u8be6\u7ec6\uff0c\u8981\u8ba9\u9762\u8bd5\u5b98\u5bf9\u81ea\u5df1\u7684\u5de5\u4f5c\u4e00\u76ee\u4e86\u7136\uff0c\u7528\u8bcd\u4e0a\u6ce8\u610f\u533a\u5206\u201c\u53c2\u4e0e\u201d \u548c \u201c\u8d1f\u8d23\u201d\u3002 \u201c\u8d1f\u8d23\u201d\u4e86\u67d0\u4e2a\u9879\u76ee\uff0c\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u95ee\u9879\u76ee\u7684\u603b\u4f53\u8bbe\u8ba1\uff0c\u6838\u5fc3\u7b97\u6cd5\uff0c\u56e2\u961f\u5408\u4f5c\u7b49\u95ee\u9898\uff0c\u53ea\u662f\u201c\u53c2\u4e0e\u201d\u5f88\u96be\u56de\u7b54\u3002 Action \u4e3a\u5b8c\u6210\u4efb\u52a1\u81ea\u5df1\u505a\u4e86\u54ea\u4e9b\u5de5\u4f5c\uff0c\u600e\u4e48\u505a\u7684\u3002 \u8fd9\u91cc\u53ef\u4ee5\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u505a\u7cfb\u7edf\u8bbe\u8ba1\u7684\uff0c\u53ef\u4ee5\u4ecb\u7ecd\u7cfb\u7edf\u67b6\u6784\u7684\u7279\u70b9 \u505a\u8f6f\u4ef6\u5f00\u53d1\u7684\uff0c\u53ef\u4ee5\u5199\u57fa\u4e8e\u4ec0\u4e48\u5de5\u5177\u5728\u54ea\u4e2a\u5e73\u53f0\u4e0b\u5e94\u7528\u4e86\u54ea\u4e9b\u6280\u672f \u505a\u8f6f\u4ef6\u6d4b\u8bd5\u7684\uff0c\u53ef\u4ee5\u5199\u662f\u624b\u5de5\u6d4b\u8bd5\u8fd8\u662f\u81ea\u52a8\u5316\u6d4b\u8bd5\u7b49 Result \u81ea\u5df1\u7684\u8d21\u732e\uff1a\u8fd9\u65b9\u9762\u7684\u4fe1\u606f\u53ef\u4ee5\u5199\u7684\u5177\u4f53\u4e9b\uff0c\u6700\u597d\u80fd\u7528\u6570\u5b57\u52a0\u4ee5\u8bf4\u660e\u3002 \u53c2\u4e0e\u529f\u80fd\u5f00\u53d1\uff0c\u5219\u53ef\u4ee5\u8bf4\u6309\u65f6\u5b8c\u6210\u4e86\u591a\u5c11\u529f\u80fd\u3002 \u505a\u4f18\u5316\uff0c\u5219\u53ef\u4ee5\u8bf4\u6027\u80fd\u63d0\u9ad8\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11 \u5982\u679c\u662f\u7ef4\u62a4\uff0c\u5219\u53ef\u4ee5\u8bf4\u4fee\u6539\u4e86\u591a\u5c11\u4e2abug \u4e3e\u4f8b\uff1a winforms\u662f\u5fae\u8f6f.NET \u4e2d\u7684\u4e00\u4e2a\u6210\u719f\u7684UI\u5e73\u53f0\uff08Situation\uff09\u3002 \u672c\u4eba\u7684\u5de5\u4f5c\u662f\u6dfb\u52a0\u5c11\u91cf\u65b0\u529f\u80fd\u4e4b\u5916\u53ea\u8981\u8d1f\u8d23\u7ef4\u62a4\u5df2\u6709\u7684\u529f\u80fd\uff08Task\uff09\u3002\u65b0\u7684\u529f\u80fd\u4e3b\u8981\u662f\u8ba9winforms\u7684\u63a7\u4ef6\u98ce\u683c\u548cVista\u3001windows 7 \u7684\u98ce\u683c\u4fdd\u6301\u4e00\u81f4\u3002 \u5728\u7ef4\u62a4\u65b9\u9762\uff0c\u5bf9\u4e8e\u8f83\u96be\u7684\u95ee\u9898\uff0c\u6211\u7528winDbg \u7b49\u5de5\u5177\u8fdb\u884c\u8c03\u8bd5\uff08Action\uff09\u3002 \u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u4e2d\uff0c\u6211\u5171\u4fee\u6539\u4e86\u8d85\u8fc7200\u4e2abug\uff08Result\uff09\u3002 \u5982\u679c\u5728\u5e94\u8058\u8005\u7684\u7b80\u5386\u4e2d\u4e0a\u8ff04\u7c7b\u4fe1\u606f\u4e0d\u591f\u6e05\u6670\uff0c\u5219\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u8ffd\u95ee\u76f8\u5173\u95ee\u9898\u3002 \u4f60\u5728\u8be5\u9879\u76ee\u4e2d\u78b0\u5230\u7684\u6700\u5927\u95ee\u9898\u662f\u4ec0\u4e48\uff0c\u4f60\u662f\u600e\u4e48\u89e3\u51b3\u7684\u3002 \u4ece\u8fd9\u4e2a\u9879\u76ee\u4e2d\u4f60\u5b66\u5230\u4e86\u4ec0\u4e48\u3002 \u4ec0\u4e48\u65f6\u5019\u4f1a\u548c\u5176\u4ed6\u56e2\u961f\u6210\u5458\uff0c\u6709\u4ec0\u4e48\u6837\u7684\u51b2\u7a81\uff0c\u4f60\u4eec\u662f\u600e\u4e48\u89e3\u51b3\u7684\uff1f \u5e94\u8058\u8005\u5728\u51c6\u5907\u7b80\u5386\u7684\u65f6\u5019\uff0c\u9488\u5bf9\u6bcf\u4e00\u4e2a\u9879\u76ee\u7ecf\u5386\u90fd\u5e94\u63d0\u524d\u505a\u597d\u76f8\u5e94\u7684\u51c6\u5907\uff0c\u53ea\u6709\u51c6\u5907\u5145\u5206\uff0c\u5e94\u8058\u8005\u5728\u884c\u4e3a\u9762\u8bd5\u73af\u8282\u624d\u53ef\u4ee5\u8868\u73b0\u7684\u6e38\u5203\u6709\u4f59\u3002 Tip \u5728\u4ecb\u7ecd\u9879\u76ee\u7ecf\u9a8c(\u5305\u62ec\u5728\u7b80\u5386\u4e0a\u4ecb\u7ecd\u548c\u9762\u8bd5\u65f6\u7684\u53e3\u5934\u4ecb\u7ecd)\u65f6\uff0c\u5e94\u8058\u8005\u4e0d\u5fc5\u8be6\u8ff0\u9879\u76ee\u7684\u80cc\u666f\uff0c\u800c\u8981\u7a81\u51fa\u4ecb\u7ecd\u81ea\u5df1\u5b8c\u6210\u7684\u5de5\u4f5c\u4ee5\u53ca\u53d6\u5f97\u7684\u6210\u7ee9\u3002 \u5e94\u8058\u8005\u638c\u63e1\u7684\u6280\u80fd \u00b6 \u63cf\u8ff0\u6280\u80fd\u7684\u638c\u63e1\u7a0b\u5ea6\u65f6\u8981\u6ce8\u610f\u201c\u4e86\u89e3\u201d\uff0c\u201c\u719f\u6089\u201d\uff0c\u201c\u7cbe\u901a\u201d \u7684\u533a\u522b\u3002 \u4e86\u89e3\uff1a\u67d0\u9879\u6280\u672f\u53ea\u662f\u4e0a\u8fc7\u8bfe\u6216\u8005\u770b\u8fc7\u4e66\uff0c\u4f46\u6ca1\u6709\u505a\u8fc7\u5b9e\u9645\u7684\u9879\u76ee\u3002 \u901a\u5e38\u4e0d\u5efa\u8bae\u5728\u7b80\u5386\u5145\u5217\u51fa\u53ea\u662f\u80a4\u6d45\u7684\u4e86\u89e3\u4e00\u70b9\u7684\u6280\u80fd\uff0c\u9664\u975e\u8fd9\u9879\u6280\u672f\u5e94\u8058\u7684\u804c\u4f4d\u7684\u786e\u9700\u8981\u3002 \u719f\u6089\uff1a\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u4f7f\u7528\u67d0\u9879\u6280\u80fd\u5df2\u7ecf\u6709\u8f83\u957f\u65f6\u95f4\uff0c\u901a\u8fc7\u67e5\u9605\u76f8\u5173\u7684\u6587\u6863\u53ef\u4ee5\u72ec\u7acb\u89e3\u51b3\u5927\u90e8\u5206\u95ee\u9898\u3002 \u7cbe\u901a\uff1a\u5bf9\u67d0\u9879\u6280\u80fd\u4f7f\u7528\u5f97\u5fc3\u5e94\u624b\uff0c\u5728\u9879\u76ee\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6709\u540c\u4e8b\u8bf7\u6559\uff0c\u6211\u4eec\u6709\u4fe1\u5fc3\u6709\u80fd\u529b\u89e3\u51b3\u3002 \u56de\u7b54\u201c\u4e3a\u4ec0\u4e48\u8df3\u69fd\u201d \u00b6 \u9762\u8bd5\u5b98\u901a\u8fc7\u8fd9\u4e2a\u95ee\u9898\u6765\u4e86\u89e3\u5e94\u8058\u8005\u7684\u6027\u683c\uff0c\u5e94\u8058\u8005\u53ef\u4ee5\u5927\u80c6\u6839\u636e\u771f\u5b9e\u60f3\u6cd5\u56de\u7b54\uff0c\u4f46\u4e5f\u4e0d\u8981\u60f3\u4ec0\u4e48\u8bf4\u4ec0\u4e48\uff0c\u907f\u514d\u7559\u4e0b\u574f\u5370\u8c61\u3002 \u56de\u7b54\u7684\u65f6\u5019\u4e0d\u8981\u62b1\u6028\uff0c\u4e0d\u8981\u6d41\u9732\u8d1f\u9762\u60c5\u7eea\u3002 \u5c3d\u91cf\u907f\u514d\u4ee5\u4e0b\u539f\u56e0\uff1a \u8001\u677f\u592a\u82db\u523b\u3002 \u540c\u4e8b\u592a\u96be\u76f8\u5904\u3002 \u52a0\u73ed\u592a\u9891\u7e41\u3002 \u5de5\u8d44\u592a\u4f4e\u3002 \u6211\u53ea\u7ba1\u5e72\u6d3b\uff0c\u5de5\u8d44\u516c\u53f8\u770b\u7740\u7ed9\uff0c\u76f8\u4fe1\u516c\u53f8\u4e0d\u4f1a\u4e8f\u5f85\u52e4\u594b\u7684\u5458\u5de5\u3002 \u73b0\u5728\u7684\u5de5\u4f5c\u505a\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5df2\u7ecf\u6ca1\u6709\u592a\u591a\u7684\u6fc0\u60c5\u4e86\uff0c\u56e0\u6b64\u5e0c\u671b\u627e\u4e00\u4efd\u66f4\u6709\u6311\u6218\u7684\u5de5\u4f5c\u3002 \u5177\u4f53\u8bba\u8bc1\u538c\u5026\u7684\u539f\u56e0\uff0c\u4ee5\u53ca\u9762\u8bd5\u7684\u804c\u4f4d\u4e3a\u4ec0\u4e48\u6709\u5174\u8da3\u3002 \u793a\u4f8b\uff1a \u6280\u672f\u9762\u8bd5 \u00b6 \u5e94\u8058\u8005\u9700\u8981\u5177\u5907\u7684\u7d20\u8d28 \u5bf9\u7f16\u7a0b\u8bed\u8a00\u3001 \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7b49\u57fa\u7840\u77e5\u8bc6\u6709\u5168\u9762\u7684\u4e86\u89e3\u3002 \u9762\u8bd5\u9047\u5230\u7b80\u5355\u7684\u95ee\u9898\uff0c\u5219\u4e00\u5b9a\u8981\u6ce8\u610f\u7ec6\u8282\uff0c\u5199\u51fa\u5b8c\u6574\u3001\u9c81\u68d2\u7684\u4ee3\u7801\u3002 \u9047\u5230\u590d\u6742\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u753b\u56fe\uff0c\u4e3e\u4f8b\u5b50\u5206\u6790\u548c\u5206\u89e3\u590d\u6742\u95ee\u9898\u7b49\u65b9\u6cd5\u7406\u6e05\u601d\u8def\u518d\u7f16\u7a0b\u3002 \u4f18\u5316\u65f6\u95f4\u6548\u7387\u548c\u7a7a\u95f4\u6548\u7387\uff0c\u6700\u6c42\u627e\u5230\u6700\u4f18\u7684\u89e3\u6cd5\u3002 \u4e3b\u52a8\u63d0\u95ee\uff0c\u5f04\u6e05\u695a\u9898\u76ee\u8981\u6c42\uff0c\u8868\u73b0\u81ea\u5df1\u7684\u6c9f\u901a\u80fd\u529b\u3002 \u5f53\u9762\u8bd5\u5b98\u524d\u540e\u95ee\u7684\u4e24\u4e2a\u95ee\u9898\u6709\u76f8\u5173\u6027\u7684\u65f6\u5019\uff0c\u5c3d\u91cf\u628a\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\u8fc1\u79fb\u5230\u540e\u9762\u7684\u95ee\u9898\u4e2d\u53bb\uff0c\u5c55\u793a\u81ea\u5df1\u826f\u597d\u7684\u5b66\u4e60\u80fd\u529b\u3002 \u624e\u5b9e\u7684\u57fa\u7840\u77e5\u8bc6 \u00b6 \u901a\u5e38\u57fa\u672c\u529f\u518d\u7f16\u7a0b\u9762\u8bd5\u73af\u8282\u4f53\u73b0\u5728\uff1a\u7f16\u7a0b\u8bed\u8a00\u3001 \u6570\u636e\u7ed3\u6784\u3001 \u7b97\u6cd5 \u81f3\u5c11\u638c\u63e1\u4e00\u4e24\u95e8\u7f16\u7a0b\u8bed\u8a00 \u6570\u636e\u7ed3\u6784\u662f\u91cd\u70b9\uff0c\u5e94\u8058\u8005\u9700\u8981\u719f\u7ec3\u638c\u63e1\u94fe\u8868\uff0c\u6811\uff0c\u6808\uff0c\u961f\u5217\uff0c\u54c8\u5e0c\u8868\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u64cd\u4f5c\u3002 \u94fe\u8868\uff0c\u4e8c\u53c9\u6811\u95ee\u5f97\u6bd4\u8f83\u591a\u3002 \u94fe\u8868\uff0c\u63d2\u5165\u5220\u9664 \u4e8c\u53c9\u6811\u5404\u79cd\u904d\u5386\u65b9\u6cd5\u548c\u9012\u5f52\u5199\u6cd5\u3002 \u67e5\u627e\u3001\u6392\u5e8f\u7b97\u6cd5 \u91cd\u70b9\u638c\u63e1\u4e8c\u5206\u67e5\u627e\uff0c\u5f52\u5e76\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f \u5c11\u6570\u7b97\u6cd5\u5f88\u91cd\u89c6\u7684\u516c\u53f8\u8fd8\u4f1a\u8981\u6c42\u719f\u7ec3\u638c\u63e1\u52a8\u6001\u89c4\u5212\uff0c\u8d2a\u5a6a\u7b97\u6cd5\u3002 \u9ad8\u8d28\u91cf\u7684\u4ee3\u7801 \u00b6 \u9762\u8bd5\u5b98\u4f1a\u683c\u5916\u5173\u6ce8\u8fb9\u754c\u6761\u4ef6\uff0c\u7279\u6b8a\u8f93\u5165\u7b49\uff0c\u770b\u4f3c\u7ec6\u679d\u672b\u8282\uff0c\u4f46\u5b9e\u5219\u81f3\u5173\u91cd\u8981\u3002 \u9762\u8bd5\u7684\u65f6\u5019\u89c9\u5f97\u9898\u76ee\u5f88\u7b80\u5355\uff0c\u611f\u89c9\u81ea\u5df1\u90fd\u505a\u51fa\u6765\u4e86\uff0c\u53ef\u6700\u540e\u4e3a\u4ec0\u4e48\u88ab\u62d2\u4e86\u5462\uff1f \u6280\u80fd\u9762\u8bd5\u7684\u9762\u8bd5\u5b98\u4e00\u822c\u90fd\u662f\u7a0b\u5e8f\u5458\uff0c\u7a0b\u5e8f\u5458\u901a\u5e38\u6ca1\u6709\u90a3\u4e48\u591a\u60f3\u6cd5\uff0c\u4ed6\u4eec\u53ea\u8ba4\u4e00\u4e2a\u7406\uff0c\u9898\u76ee\u505a\u5bf9\uff0c\u505a\u5b8c\u6574\u4e86\uff0c\u5c31\u8ba9\u4f60\u901a\u8fc7\uff0c\u5426\u5219\u5931\u8d25\u3002 \u5982\u679c\u9047\u5230\u7b80\u5355\u9898\u76ee\u88ab\u62d2\u7684\u60c5\u51b5\uff0c\u5219\u5e94\u8be5\u8ba4\u771f\u53cd\u601d\u5728\u601d\u8def\u6216\u4ee3\u7801\u4e2d\u5b58\u5728\u54ea\u4e9b\u6f0f\u6d1e\u3002 Tip \u9762\u8bd5\u5b98\u9664\u4e86\u5e0c\u671b\u5e94\u8058\u8005\u7684\u4ee3\u7801\u80fd\u591f\u5b8c\u6210\u57fa\u672c\u7684\u529f\u80fd\uff0c\u8fd8\u4f1a\u5173\u6ce8\u5e94\u8058\u8005\u662f\u5426\u8003\u8651\u4e86\u8fb9\u754c\u6761\u4ef6\uff0c\u7279\u6b8a\u8f93\u5165(\u7a7a\u6307\u9488\uff0c\u7a7a\u5b57\u7b26\u4e32\u7b49)\uff0c\u4ee5\u53ca\u9519\u8bef\u5904\u7406\u3002 \u6e05\u6670\u7684\u601d\u8def \u00b6 \u5bf9\u4e8e\u590d\u6742\u7684\u95ee\u9898\uff0c\u9762\u8bd5\u5b98\u4e0d\u671f\u5f85\u5e94\u8058\u8005\u80fd\u5728\u9762\u8bd5\u4e0d\u5230\u4e00\u5c0f\u65f6\u7684\u65f6\u95f4\u91cc\u7ed9\u51fa\u5b8c\u6574\u7b54\u6848\uff0c\u4ed6\u66f4\u770b\u91cd\u7684\u8fd8\u662f\u5e94\u8058\u8005\u662f\u5426\u6709\u6e05\u6670\u7684\u601d\u8def\u3002 \u9762\u8bd5\u5b98\u4e0d\u559c\u6b22\u5e94\u8058\u8005\u5728\u6ca1\u6709\u5f62\u6210\u6e05\u6670\u601d\u8def\u4e4b\u524d\u5c31\u8349\u7387\u7684\u5f00\u59cb\u5199\u4ee3\u7801\uff0c\u8fd9\u6837\u5199\u51fa\u6765\u7684\u4ee3\u7801\u5bb9\u6613\u903b\u8f91\u6df7\u4e71\uff0c\u9519\u8bef\u767e\u51fa\u3002 \u5e94\u8058\u8005\u53ef\u4ee5\u7528\u5982\u4e0b\u51e0\u4e2a\u65b9\u6cd5\u5e2e\u7ec4\u81ea\u5df1\u5f62\u6210\u6e05\u6670\u7684\u601d\u8def: \u4e3e\u4f8b\u5b50\u5e2e\u52a9\u81ea\u5df1\u7406\u89e3\u95ee\u9898\u3002 \u7528\u56fe\u5f62\u8868\u793a\u62bd\u8c61\u7684\u6570\u636e\u7ed3\u6784\u3002 \u50cf\u5206\u6790\u4e0e\u94fe\u8868\uff0c\u4e8c\u53c9\u6811\u76f8\u5173\u7684\u9898\u76ee\u3002 \u628a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u7b80\u5355\u7684\u5b50\u95ee\u9898\u3002 \u5982\u9012\u5f52\uff0c\u5206\u6cbb\u6cd5\uff0c\u52a8\u6001\u89c4\u5212\u3002 \u4f18\u5316\u6548\u7387\u7684\u80fd\u529b \u00b6 \u4f18\u79c0\u7684\u7a0b\u5e8f\u5458\u5bf9\u65f6\u95f4\u548c\u5185\u5b58\u7684\u6d88\u8017\u9531\u94e2\u5fc5\u8f83\uff0c\u4ed6\u4eec\u5f88\u6709\u6fc0\u60c5\u7684\u4e0d\u65ad\u4f18\u5316\u81ea\u5df1\u7684\u4ee3\u7801\u3002 \u8981\u4f18\u5316\u4ee3\u7801\u6548\u7387\uff0c\u8981\u719f\u77e5\u5404\u79cd\u6570\u636e\u7ed3\u6784\u7684\u4f18\u7f3a\u70b9\uff0c\u5e76\u80fd\u9009\u62e9\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u89e3\u51b3\u95ee\u9898\u3002 \u719f\u7ec3\u7684\u638c\u63e1\u5e38\u7528\u7684\u7b97\u6cd5\u3002\u9762\u8bd5\u4e2d\u6700\u5e38\u7528\u7684\u7b97\u6cd5\u662f\u67e5\u627e\u548c\u6392\u5e8f\u3002 \u4f18\u79c0\u7684\u7efc\u5408\u80fd\u529b \u00b6 \u5e94\u8058\u8005\u9664\u4e86\u5c55\u793a\u81ea\u5df1\u7684\u7f16\u7a0b\u80fd\u529b\u548c\u6280\u672f\u529f\u5e95\uff0c\u8fd8\u9700\u8981\u5c55\u793a\u81ea\u5df1\u7684\u8f6f\u6280\u80fd\u3002 \u6c9f\u901a\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u4f1a\u89c2\u5bdf\u5e94\u8058\u8005\u5728\u4ecb\u7ecd\u9879\u76ee\u7ecf\u9a8c\u6216\u8005\u7b97\u6cd5\u601d\u8def\u65f6\u662f\u5426\u89c2\u70b9\u660e\u786e\u3001\u903b\u8f91\u6e05\u6670\u3002 \u56e2\u961f\u5408\u4f5c\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u4f1a\u4ece\u5e94\u8058\u8005\u8bf4\u8bdd\u7684\u795e\u6001\u548c\u8bed\u6c14\u6765\u5224\u65ad\u3002 \u5b66\u4e60\u80fd\u529b\u3002 \u8be2\u95ee\u5e94\u8058\u8005\u6700\u8fd1\u770b\u4ec0\u4e48\u4e66\uff0c\u5b66\u5230\u4e86\u54ea\u4e9b\u65b0\u6280\u672f\u3002 \u9762\u8bd5\u5b98\u95ee\u8fd9\u4e2a\u4e86\u89e3\u5e94\u8058\u8005\u7684\u5b66\u4e60\u613f\u671b\u548c\u5b66\u4e60\u80fd\u529b \u9762\u8bd5\u5b98\u629b\u51fa\u4e00\u4e2a\u65b0\u6982\u5ff5\uff0c\u63a5\u4e0b\u6765\u4ed6\u4f1a\u89c2\u5bdf\u5e94\u8058\u8005\u80fd\u4e0d\u80fd\u5728\u8f83\u77ed\u65f6\u95f4\u5185\u7406\u89e3\u8fd9\u4e2a\u65b0\u6982\u5ff5\u5e76\u89e3\u51b3\u76f8\u5173\u95ee\u9898\u3002 \u77e5\u8bc6\u8fc1\u79fb\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u7ecf\u5e38\u4f1a\u5148\u95ee\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u518d\u95ee\u4e00\u4e2a\u5f88\u590d\u6742\u4f46\u548c\u524d\u9762\u7684\u7b80\u5355\u95ee\u9898\u76f8\u5173\u7684\u95ee\u9898\u3002 \u8fd9\u65f6\u5019\u9762\u8bd5\u5b98\u671f\u5f85\u5e94\u8058\u8005\u80fd\u591f\u4ece\u7b80\u5355\u95ee\u9898\u4e2d\u5f97\u5230\u542f\u793a\uff0c\u4ece\u800c\u627e\u5230\u89e3\u51b3\u590d\u6742\u95ee\u9898\u7684\u7a8d\u95e8\u3002 \u6bd4\u5982\u9762\u8bd5\u5b98\u5148\u8981\u6c42\u5199\u4e00\u4e2a\u6c42\u6590\u6ce2\u90a3\u5951\u989d\u6570\u5217\u7684\u51fd\u6570\uff0c\u518d\u95ee\u4e00\u4e2a\u9752\u86d9\u8df3\u53f0\u9636\u7684\u95ee\u9898\u3002 \u62bd\u8c61\u5efa\u6a21\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u4ece\u65e5\u5e38\u751f\u6d3b\u4e2d\u63d0\u70bc\u95ee\u9898\uff0c\u8003\u5bdf\u5e94\u8058\u8005\u80fd\u4e0d\u80fd\u628a\u95ee\u9898\u62bd\u8c61\u51fa\u6765\u7528\u5408\u7406\u7684\u6570\u636e\u7ed3\u6784\u8868\u793a\uff0c\u5e76\u627e\u5230\u89c4\u5f8b\u89e3\u51b3\u95ee\u9898\u3002 \u53d1\u6563\u601d\u7ef4\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u9650\u5236\u4e0d\u5f97\u4f7f\u7528\u5e38\u89c4\u65b9\u6cd5\uff0c\u8981\u6c42\u5e94\u8058\u8005\u5177\u5907\u521b\u65b0\u7cbe\u795e\uff0c\u6253\u5f00\u601d\u8def\u591a\u89d2\u5ea6\u5206\u6790\u89e3\u51b3\u95ee\u9898\u3002 \u5e94\u8058\u8005\u63d0\u95ee\u73af\u8282 \u00b6 \u5728\u7ed3\u675f\u9762\u8bd55~10\u5206\u949f\uff0c\u9762\u8bd5\u5b98\u4f1a\u7ed9\u5e94\u8058\u8005\u673a\u4f1a\u95ee\u51e0\u4e2a\u95ee\u9898\uff0c\u5e94\u8058\u8005\u7684\u95ee\u9898\u8d28\u91cf\u5bf9\u9762\u8bd5\u7ed3\u679c\u4e5f\u6709\u4e00\u5b9a\u7684\u5f71\u54cd\u3002 \u5efa\u8bae\u5728\u9762\u8bd5\u4e4b\u524d\u505a\u529f\u80fd\uff0c\u4e3a\u6bcf\u4e00\u8f6e\u9762\u8bd5\u51c6\u59072~3\u4e2a\u95ee\u9898\u3002 \u9762\u8bd5\u5b98\u8ba9\u5e94\u8058\u8005\u63d0\u95ee\uff0c\u4e3b\u8981\u662f\u60f3\u4e86\u89e3\u5e94\u8058\u8005\u5173\u5fc3\u7684\u95ee\u9898\u6709\u54ea\u4e9b\uff0c\u56e0\u6b64\u5e94\u8058\u8005\u81f3\u5c11\u8981\u95ee\u4e00\u4e24\u4e2a\u95ee\u9898\uff0c\u5426\u5219\u9762\u8bd5\u5b98\u89c9\u5f97\u4f60\u5bf9\u6211\u4eec\u516c\u53f8\uff0c\u804c\u4f4d\u7b49\u90fd\u4e0d\u611f\u5174\u8da3\u3002 \u63d0\u95ee\u8981\u70b9\uff1a \u4e0d\u8981\u95ee\u548c\u81ea\u5df1\u804c\u4f4d\u6ca1\u6709\u5173\u7cfb\u7684\u95ee\u9898\u3002 \u4e0d\u8981\u95ee\u85aa\u6c34\u3002 \u6280\u672f\u9762\u4e0d\u662f\u8c08\u85aa\u6c34\u7684\u65f6\u5019\uff0c\u8981\u8c08\u5de5\u8d44\u7b49\u5230\u901a\u8fc7\u9762\u8bd5\u4e4b\u540e\u548cHR\u8c08\u3002 \u4e0d\u8981\u7acb\u5373\u6253\u542c\u9762\u8bd5\u7ed3\u679c\u3002 \u63a8\u8350\u95ee\u4e0e\u804c\u4f4d\u76f8\u5173\u6216\u9879\u76ee\u76f8\u5173\u7684\u95ee\u9898\uff0c\u5982\u679c\u63d0\u95ee\u5230\u4f4d\uff0c\u9762\u8bd5\u5b98\u4f1a\u89c9\u5f97\u4f60\u5bf9\u804c\u4f4d\u5f88\u6709\u5174\u8da3\u3002 \u5bf9\u5e94\u8058\u7684\u804c\u4f4d\u6216\u9879\u76ee\u80cc\u666f\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002 \u5bf9\u516c\u53f8\u7684\u6210\u7acb\u65f6\u95f4\uff0c\u4e3b\u8981\u4e1a\u52a1\uff0c\u804c\u4f4d\u8981\u6c42\u7b49\u90fd\u4e86\u7136\u4e8e\u80f8 \u9762\u8bd5\u8fc7\u7a0b\u7559\u610f\u9762\u8bd5\u5b98\u8bf4\u8fc7\u7684\u8bdd\uff0c\u6709\u4e0d\u5c11\u9762\u8bd5\u5b98\u4f1a\u5728\u9762\u8bd5\u4e4b\u524d\u4ecb\u7ecd\u9879\u76ee\uff0c\u5305\u542b\u5176\u4ed6\u6e20\u9053\u65e0\u6cd5\u5f97\u5230\u7684\u4fe1\u606f\uff0c\u5982\u9879\u76ee\u8fdb\u5c55\u7b49\u3002","title":"1. \u9762\u8bd5\u6d41\u7a0b"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_1","text":"\u9762\u8bd5\u5b98\u6253\u7535\u8bdd\u7684\u5f62\u5f0f\u8003\u67e5\u5e94\u8058\u8005\uff0c\u4f1a\u63d0\u524d\u7ea6\u597d\u65f6\u95f4 \u6709\u4e9b\u9762\u8bd5\u5b98\u559c\u6b22\u641e\u7a81\u7136\u88ad\u51fb\uff0c\u5efa\u8bae\u5e94\u8058\u8005\u5728\u6295\u51fa\u7b80\u5386\u4e4b\u540e\u7684\u4e00\u4e24\u4e2a\u661f\u671f\u4e4b\u5185\uff0c\u4fdd\u8bc1\u624b\u673a\u7535\u6c60\u80fd\u81f3\u5c11\u8fde\u7eed\u901a\u8bdd\u4e00\u5c0f\u65f6\u3002\u5e94\u8058\u8005\u4e0d\u8981\u957f\u65f6\u95f4\u5f85\u5728\u5f88\u5608\u6742\u7684\u73af\u5883\u4e0b\u3002 \u7535\u8bdd\u9762\u8bd5\u53ea\u80fd\u4f9d\u9760\u58f0\u97f3\uff0c\u63cf\u8ff0\u590d\u6742\u7b97\u6cd5\u7684\u65f6\u5019\u5c3d\u53ef\u80fd\u5f62\u8c61\u628a\u7ec6\u8282\u8bf4\u6e05\u695a\u3002 \u4f8b\u5982\uff0c\u73b0\u573a\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u5982\u679c\u8981\u63cf\u8ff0\u4e8c\u53c9\u6811\u7684\u7ed3\u6784\uff0c\u53ef\u4ee5\u7528\u7b14\u5728\u767d\u7eb8\u4e0a\u753b\u51fa\u6765\uff0c\u7535\u8bdd\u9762\u8bd5\u5219\u9700\u8981\u628a\u4e8c\u53c9\u6811\u4e2d\u6709\u54ea\u4e9b\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u8282\u70b9\u662f\u4ec0\u4e48\uff0c\u53f3\u8282\u70b9\u662f\u4ec0\u4e48\u90fd\u8bf4\u5f97\u5f88\u6e05\u695a\u3002","title":"\u7535\u8bdd\u9762\u8bd5"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_2","text":"\u5e94\u8058\u8005\u628a\u81ea\u5df1\u7684\u684c\u9762\u8fdc\u7a0b\u5206\u4eab\u7ed9\u9762\u8bd5\u5b98\uff0c\u9762\u8bd5\u5b98\u53ef\u4ee5\u89c2\u770b\u5e94\u8058\u8005\u7f16\u7a0b\u548c\u8c03\u8bd5\u7684\u8fc7\u7a0b\u3002 \u9762\u8bd5\u5b98\u5173\u5fc3\u5e94\u8058\u8005\u7684\u7f16\u7a0b\u4e60\u60ef\u53ca\u8c03\u8bd5\u80fd\u529b\u3002 \u901a\u5e38\u9762\u8bd5\u5b98\u4f1a\u8ba4\u53ef\u4ee5\u4e0b\u51e0\u4e2a\u70b9\uff1a \u601d\u8003\u6e05\u695a\u518d\u5f00\u59cb\u7f16\u7801 \u826f\u597d\u7684\u4ee3\u7801\u547d\u540d\u548c\u7f29\u8fdb\u5bf9\u9f50\u4e60\u60ef \u80fd\u591f\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5","title":"\u5171\u4eab\u684c\u9762\u9762\u8bd5"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_3","text":"\u524d\u5f80\u516c\u53f8\u53c2\u52a0\u9762\u8bd5\u4e4b\u524d \u89c4\u5212\u597d\u8def\u7ebf\u5e76\u4f30\u7b97\u51fa\u884c\u65f6\u95f4 \uff0c\u9884\u7559\u534a\u5c0f\u65f6\u7f13\u51b2\u65f6\u95f4\u5e94\u5bf9\u5835\u8f66\u7b49\u610f\u5916\u60c5\u51b5 \u6ce8\u610f\u9762\u8bd5\u9080\u8bf7\u51fd\u91cc\u7684\u9762\u8bd5\u6d41\u7a0b \u3002 \u5982\u679c\u9762\u8bd5\u6709\u597d\u51e0\u8f6e\uff0c\u65f6\u95f4\u5f88\u957f\uff0c\u9762\u8bd5\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u89c9\u5f97\u75b2\u52b3\uff0c\u601d\u7ef4\u8fdf\u949d\uff0c\u53ef\u4ee5\u5e26\u4e9b\u63d0\u795e\u996e\u6599\u3002 \u51c6\u5907\u51e0\u4e2a\u95ee\u9898 \uff0c\u6bcf\u8f6e\u9762\u8bd5\u7684\u6700\u540e\uff0c\u9762\u8bd5\u5b98\u90fd\u4f1a\u8ba9\u5e94\u8058\u8005\u63d0\u95ee\u3002 \u51c6\u5907\u597d\u5f97\u4f53\u7684\u8863\u670d","title":"\u73b0\u573a\u9762\u8bd5"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#3","text":"\u884c\u4e3a\u9762\u8bd5\uff1a \u9762\u8bd5\u5b98\u53c2\u7167\u7b80\u5386\u4e86\u89e3\u5e94\u8058\u8005\u8fc7\u5f80\u7ecf\u9a8c\u3002 \u6280\u672f\u9762\u8bd5\uff1a\u8981\u6c42\u5e94\u8058\u8005\u73b0\u573a\u5199\u4ee3\u7801\u3002 \u5e94\u8058\u8005\u63d0\u95ee\u3002","title":"\u9762\u8bd5\u76843\u4e2a\u73af\u8282"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_4","text":"\u9762\u8bd5\u5b98\u4f1a\u6ce8\u610f\u5e94\u8058\u8005\u7684\u6027\u683c\u7279\u70b9\uff0c\u6df1\u5165\u4e86\u89e3\u7b80\u5386\u4e2d\u4e3e\u4f8b\u7684\u9879\u76ee\u7ecf\u5386\u3002 \u4e0d\u5c11\u9762\u8bd5\u5b98\u4f1a\u8ba9\u5e94\u8058\u8005\u505a\u4e00\u4e2a\u7b80\u77ed\u7684\u81ea\u6211\u4ecb\u7ecd\uff0c\u7531\u4e8e\u9762\u8bd5\u5b98\u624b\u62ff\u7b80\u5386\uff0c\u56e0\u6b64\u81ea\u6211\u4ecb\u7ecd\u4e0d\u7528\u82b1\u5f88\u591a\u65f6\u95f4\u3002 \u752830\u79d2\u52301\u5206\u949f\u7684\u65f6\u95f4\u4ecb\u7ecd\u81ea\u5df1\u7684\u4e3b\u8981\u5b66\u4e60\uff0c\u5de5\u4f5c\u7ecf\u5386\u5373\u53ef\u3002 \u5982\u679c\u9762\u8bd5\u5b98\u5bf9\u4f60\u7684\u7ecf\u5386\u6216\u9879\u76ee\u611f\u5174\u8da3\uff0c\u90a3\u4e48\u4ed6\u4f1a\u6709\u9488\u5bf9\u6027\u5730\u63d0\u95ee\u3002","title":"\u884c\u4e3a\u9762\u8bd5"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_5","text":"\u5efa\u8bae\u6839\u636eSTAR\u6cd5\u5219\u63cf\u8ff0\u81ea\u5df1\u7684\u9879\u76ee\u7ecf\u5386\u3002 Situation \u7b80\u77ed\u7684\u9879\u76ee\u80cc\u666f\uff1a\u9879\u76ee\u89c4\u6a21\uff0c\u5f00\u53d1\u7684\u8f6f\u4ef6\u529f\u80fd\uff0c\u76ee\u6807\u7528\u6237\u7b49\u3002 Task \u81ea\u5df1\u5b8c\u6210\u7684\u4efb\u52a1\uff1a\u8fd9\u4e2a\u8981\u5199\u8be6\u7ec6\uff0c\u8981\u8ba9\u9762\u8bd5\u5b98\u5bf9\u81ea\u5df1\u7684\u5de5\u4f5c\u4e00\u76ee\u4e86\u7136\uff0c\u7528\u8bcd\u4e0a\u6ce8\u610f\u533a\u5206\u201c\u53c2\u4e0e\u201d \u548c \u201c\u8d1f\u8d23\u201d\u3002 \u201c\u8d1f\u8d23\u201d\u4e86\u67d0\u4e2a\u9879\u76ee\uff0c\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u95ee\u9879\u76ee\u7684\u603b\u4f53\u8bbe\u8ba1\uff0c\u6838\u5fc3\u7b97\u6cd5\uff0c\u56e2\u961f\u5408\u4f5c\u7b49\u95ee\u9898\uff0c\u53ea\u662f\u201c\u53c2\u4e0e\u201d\u5f88\u96be\u56de\u7b54\u3002 Action \u4e3a\u5b8c\u6210\u4efb\u52a1\u81ea\u5df1\u505a\u4e86\u54ea\u4e9b\u5de5\u4f5c\uff0c\u600e\u4e48\u505a\u7684\u3002 \u8fd9\u91cc\u53ef\u4ee5\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u505a\u7cfb\u7edf\u8bbe\u8ba1\u7684\uff0c\u53ef\u4ee5\u4ecb\u7ecd\u7cfb\u7edf\u67b6\u6784\u7684\u7279\u70b9 \u505a\u8f6f\u4ef6\u5f00\u53d1\u7684\uff0c\u53ef\u4ee5\u5199\u57fa\u4e8e\u4ec0\u4e48\u5de5\u5177\u5728\u54ea\u4e2a\u5e73\u53f0\u4e0b\u5e94\u7528\u4e86\u54ea\u4e9b\u6280\u672f \u505a\u8f6f\u4ef6\u6d4b\u8bd5\u7684\uff0c\u53ef\u4ee5\u5199\u662f\u624b\u5de5\u6d4b\u8bd5\u8fd8\u662f\u81ea\u52a8\u5316\u6d4b\u8bd5\u7b49 Result \u81ea\u5df1\u7684\u8d21\u732e\uff1a\u8fd9\u65b9\u9762\u7684\u4fe1\u606f\u53ef\u4ee5\u5199\u7684\u5177\u4f53\u4e9b\uff0c\u6700\u597d\u80fd\u7528\u6570\u5b57\u52a0\u4ee5\u8bf4\u660e\u3002 \u53c2\u4e0e\u529f\u80fd\u5f00\u53d1\uff0c\u5219\u53ef\u4ee5\u8bf4\u6309\u65f6\u5b8c\u6210\u4e86\u591a\u5c11\u529f\u80fd\u3002 \u505a\u4f18\u5316\uff0c\u5219\u53ef\u4ee5\u8bf4\u6027\u80fd\u63d0\u9ad8\u7684\u767e\u5206\u6bd4\u662f\u591a\u5c11 \u5982\u679c\u662f\u7ef4\u62a4\uff0c\u5219\u53ef\u4ee5\u8bf4\u4fee\u6539\u4e86\u591a\u5c11\u4e2abug \u4e3e\u4f8b\uff1a winforms\u662f\u5fae\u8f6f.NET \u4e2d\u7684\u4e00\u4e2a\u6210\u719f\u7684UI\u5e73\u53f0\uff08Situation\uff09\u3002 \u672c\u4eba\u7684\u5de5\u4f5c\u662f\u6dfb\u52a0\u5c11\u91cf\u65b0\u529f\u80fd\u4e4b\u5916\u53ea\u8981\u8d1f\u8d23\u7ef4\u62a4\u5df2\u6709\u7684\u529f\u80fd\uff08Task\uff09\u3002\u65b0\u7684\u529f\u80fd\u4e3b\u8981\u662f\u8ba9winforms\u7684\u63a7\u4ef6\u98ce\u683c\u548cVista\u3001windows 7 \u7684\u98ce\u683c\u4fdd\u6301\u4e00\u81f4\u3002 \u5728\u7ef4\u62a4\u65b9\u9762\uff0c\u5bf9\u4e8e\u8f83\u96be\u7684\u95ee\u9898\uff0c\u6211\u7528winDbg \u7b49\u5de5\u5177\u8fdb\u884c\u8c03\u8bd5\uff08Action\uff09\u3002 \u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u4e2d\uff0c\u6211\u5171\u4fee\u6539\u4e86\u8d85\u8fc7200\u4e2abug\uff08Result\uff09\u3002 \u5982\u679c\u5728\u5e94\u8058\u8005\u7684\u7b80\u5386\u4e2d\u4e0a\u8ff04\u7c7b\u4fe1\u606f\u4e0d\u591f\u6e05\u6670\uff0c\u5219\u9762\u8bd5\u5b98\u53ef\u80fd\u4f1a\u8ffd\u95ee\u76f8\u5173\u95ee\u9898\u3002 \u4f60\u5728\u8be5\u9879\u76ee\u4e2d\u78b0\u5230\u7684\u6700\u5927\u95ee\u9898\u662f\u4ec0\u4e48\uff0c\u4f60\u662f\u600e\u4e48\u89e3\u51b3\u7684\u3002 \u4ece\u8fd9\u4e2a\u9879\u76ee\u4e2d\u4f60\u5b66\u5230\u4e86\u4ec0\u4e48\u3002 \u4ec0\u4e48\u65f6\u5019\u4f1a\u548c\u5176\u4ed6\u56e2\u961f\u6210\u5458\uff0c\u6709\u4ec0\u4e48\u6837\u7684\u51b2\u7a81\uff0c\u4f60\u4eec\u662f\u600e\u4e48\u89e3\u51b3\u7684\uff1f \u5e94\u8058\u8005\u5728\u51c6\u5907\u7b80\u5386\u7684\u65f6\u5019\uff0c\u9488\u5bf9\u6bcf\u4e00\u4e2a\u9879\u76ee\u7ecf\u5386\u90fd\u5e94\u63d0\u524d\u505a\u597d\u76f8\u5e94\u7684\u51c6\u5907\uff0c\u53ea\u6709\u51c6\u5907\u5145\u5206\uff0c\u5e94\u8058\u8005\u5728\u884c\u4e3a\u9762\u8bd5\u73af\u8282\u624d\u53ef\u4ee5\u8868\u73b0\u7684\u6e38\u5203\u6709\u4f59\u3002 Tip \u5728\u4ecb\u7ecd\u9879\u76ee\u7ecf\u9a8c(\u5305\u62ec\u5728\u7b80\u5386\u4e0a\u4ecb\u7ecd\u548c\u9762\u8bd5\u65f6\u7684\u53e3\u5934\u4ecb\u7ecd)\u65f6\uff0c\u5e94\u8058\u8005\u4e0d\u5fc5\u8be6\u8ff0\u9879\u76ee\u7684\u80cc\u666f\uff0c\u800c\u8981\u7a81\u51fa\u4ecb\u7ecd\u81ea\u5df1\u5b8c\u6210\u7684\u5de5\u4f5c\u4ee5\u53ca\u53d6\u5f97\u7684\u6210\u7ee9\u3002","title":"\u5e94\u8058\u8005\u7684\u9879\u76ee\u7ecf\u9a8c"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_6","text":"\u63cf\u8ff0\u6280\u80fd\u7684\u638c\u63e1\u7a0b\u5ea6\u65f6\u8981\u6ce8\u610f\u201c\u4e86\u89e3\u201d\uff0c\u201c\u719f\u6089\u201d\uff0c\u201c\u7cbe\u901a\u201d \u7684\u533a\u522b\u3002 \u4e86\u89e3\uff1a\u67d0\u9879\u6280\u672f\u53ea\u662f\u4e0a\u8fc7\u8bfe\u6216\u8005\u770b\u8fc7\u4e66\uff0c\u4f46\u6ca1\u6709\u505a\u8fc7\u5b9e\u9645\u7684\u9879\u76ee\u3002 \u901a\u5e38\u4e0d\u5efa\u8bae\u5728\u7b80\u5386\u5145\u5217\u51fa\u53ea\u662f\u80a4\u6d45\u7684\u4e86\u89e3\u4e00\u70b9\u7684\u6280\u80fd\uff0c\u9664\u975e\u8fd9\u9879\u6280\u672f\u5e94\u8058\u7684\u804c\u4f4d\u7684\u786e\u9700\u8981\u3002 \u719f\u6089\uff1a\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u4f7f\u7528\u67d0\u9879\u6280\u80fd\u5df2\u7ecf\u6709\u8f83\u957f\u65f6\u95f4\uff0c\u901a\u8fc7\u67e5\u9605\u76f8\u5173\u7684\u6587\u6863\u53ef\u4ee5\u72ec\u7acb\u89e3\u51b3\u5927\u90e8\u5206\u95ee\u9898\u3002 \u7cbe\u901a\uff1a\u5bf9\u67d0\u9879\u6280\u80fd\u4f7f\u7528\u5f97\u5fc3\u5e94\u624b\uff0c\u5728\u9879\u76ee\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6709\u540c\u4e8b\u8bf7\u6559\uff0c\u6211\u4eec\u6709\u4fe1\u5fc3\u6709\u80fd\u529b\u89e3\u51b3\u3002","title":"\u5e94\u8058\u8005\u638c\u63e1\u7684\u6280\u80fd"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_7","text":"\u9762\u8bd5\u5b98\u901a\u8fc7\u8fd9\u4e2a\u95ee\u9898\u6765\u4e86\u89e3\u5e94\u8058\u8005\u7684\u6027\u683c\uff0c\u5e94\u8058\u8005\u53ef\u4ee5\u5927\u80c6\u6839\u636e\u771f\u5b9e\u60f3\u6cd5\u56de\u7b54\uff0c\u4f46\u4e5f\u4e0d\u8981\u60f3\u4ec0\u4e48\u8bf4\u4ec0\u4e48\uff0c\u907f\u514d\u7559\u4e0b\u574f\u5370\u8c61\u3002 \u56de\u7b54\u7684\u65f6\u5019\u4e0d\u8981\u62b1\u6028\uff0c\u4e0d\u8981\u6d41\u9732\u8d1f\u9762\u60c5\u7eea\u3002 \u5c3d\u91cf\u907f\u514d\u4ee5\u4e0b\u539f\u56e0\uff1a \u8001\u677f\u592a\u82db\u523b\u3002 \u540c\u4e8b\u592a\u96be\u76f8\u5904\u3002 \u52a0\u73ed\u592a\u9891\u7e41\u3002 \u5de5\u8d44\u592a\u4f4e\u3002 \u6211\u53ea\u7ba1\u5e72\u6d3b\uff0c\u5de5\u8d44\u516c\u53f8\u770b\u7740\u7ed9\uff0c\u76f8\u4fe1\u516c\u53f8\u4e0d\u4f1a\u4e8f\u5f85\u52e4\u594b\u7684\u5458\u5de5\u3002 \u73b0\u5728\u7684\u5de5\u4f5c\u505a\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5df2\u7ecf\u6ca1\u6709\u592a\u591a\u7684\u6fc0\u60c5\u4e86\uff0c\u56e0\u6b64\u5e0c\u671b\u627e\u4e00\u4efd\u66f4\u6709\u6311\u6218\u7684\u5de5\u4f5c\u3002 \u5177\u4f53\u8bba\u8bc1\u538c\u5026\u7684\u539f\u56e0\uff0c\u4ee5\u53ca\u9762\u8bd5\u7684\u804c\u4f4d\u4e3a\u4ec0\u4e48\u6709\u5174\u8da3\u3002 \u793a\u4f8b\uff1a","title":"\u56de\u7b54\u201c\u4e3a\u4ec0\u4e48\u8df3\u69fd\u201d"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_8","text":"\u5e94\u8058\u8005\u9700\u8981\u5177\u5907\u7684\u7d20\u8d28 \u5bf9\u7f16\u7a0b\u8bed\u8a00\u3001 \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7b49\u57fa\u7840\u77e5\u8bc6\u6709\u5168\u9762\u7684\u4e86\u89e3\u3002 \u9762\u8bd5\u9047\u5230\u7b80\u5355\u7684\u95ee\u9898\uff0c\u5219\u4e00\u5b9a\u8981\u6ce8\u610f\u7ec6\u8282\uff0c\u5199\u51fa\u5b8c\u6574\u3001\u9c81\u68d2\u7684\u4ee3\u7801\u3002 \u9047\u5230\u590d\u6742\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u753b\u56fe\uff0c\u4e3e\u4f8b\u5b50\u5206\u6790\u548c\u5206\u89e3\u590d\u6742\u95ee\u9898\u7b49\u65b9\u6cd5\u7406\u6e05\u601d\u8def\u518d\u7f16\u7a0b\u3002 \u4f18\u5316\u65f6\u95f4\u6548\u7387\u548c\u7a7a\u95f4\u6548\u7387\uff0c\u6700\u6c42\u627e\u5230\u6700\u4f18\u7684\u89e3\u6cd5\u3002 \u4e3b\u52a8\u63d0\u95ee\uff0c\u5f04\u6e05\u695a\u9898\u76ee\u8981\u6c42\uff0c\u8868\u73b0\u81ea\u5df1\u7684\u6c9f\u901a\u80fd\u529b\u3002 \u5f53\u9762\u8bd5\u5b98\u524d\u540e\u95ee\u7684\u4e24\u4e2a\u95ee\u9898\u6709\u76f8\u5173\u6027\u7684\u65f6\u5019\uff0c\u5c3d\u91cf\u628a\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\u8fc1\u79fb\u5230\u540e\u9762\u7684\u95ee\u9898\u4e2d\u53bb\uff0c\u5c55\u793a\u81ea\u5df1\u826f\u597d\u7684\u5b66\u4e60\u80fd\u529b\u3002","title":"\u6280\u672f\u9762\u8bd5"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_9","text":"\u901a\u5e38\u57fa\u672c\u529f\u518d\u7f16\u7a0b\u9762\u8bd5\u73af\u8282\u4f53\u73b0\u5728\uff1a\u7f16\u7a0b\u8bed\u8a00\u3001 \u6570\u636e\u7ed3\u6784\u3001 \u7b97\u6cd5 \u81f3\u5c11\u638c\u63e1\u4e00\u4e24\u95e8\u7f16\u7a0b\u8bed\u8a00 \u6570\u636e\u7ed3\u6784\u662f\u91cd\u70b9\uff0c\u5e94\u8058\u8005\u9700\u8981\u719f\u7ec3\u638c\u63e1\u94fe\u8868\uff0c\u6811\uff0c\u6808\uff0c\u961f\u5217\uff0c\u54c8\u5e0c\u8868\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u64cd\u4f5c\u3002 \u94fe\u8868\uff0c\u4e8c\u53c9\u6811\u95ee\u5f97\u6bd4\u8f83\u591a\u3002 \u94fe\u8868\uff0c\u63d2\u5165\u5220\u9664 \u4e8c\u53c9\u6811\u5404\u79cd\u904d\u5386\u65b9\u6cd5\u548c\u9012\u5f52\u5199\u6cd5\u3002 \u67e5\u627e\u3001\u6392\u5e8f\u7b97\u6cd5 \u91cd\u70b9\u638c\u63e1\u4e8c\u5206\u67e5\u627e\uff0c\u5f52\u5e76\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f \u5c11\u6570\u7b97\u6cd5\u5f88\u91cd\u89c6\u7684\u516c\u53f8\u8fd8\u4f1a\u8981\u6c42\u719f\u7ec3\u638c\u63e1\u52a8\u6001\u89c4\u5212\uff0c\u8d2a\u5a6a\u7b97\u6cd5\u3002","title":"\u624e\u5b9e\u7684\u57fa\u7840\u77e5\u8bc6"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_10","text":"\u9762\u8bd5\u5b98\u4f1a\u683c\u5916\u5173\u6ce8\u8fb9\u754c\u6761\u4ef6\uff0c\u7279\u6b8a\u8f93\u5165\u7b49\uff0c\u770b\u4f3c\u7ec6\u679d\u672b\u8282\uff0c\u4f46\u5b9e\u5219\u81f3\u5173\u91cd\u8981\u3002 \u9762\u8bd5\u7684\u65f6\u5019\u89c9\u5f97\u9898\u76ee\u5f88\u7b80\u5355\uff0c\u611f\u89c9\u81ea\u5df1\u90fd\u505a\u51fa\u6765\u4e86\uff0c\u53ef\u6700\u540e\u4e3a\u4ec0\u4e48\u88ab\u62d2\u4e86\u5462\uff1f \u6280\u80fd\u9762\u8bd5\u7684\u9762\u8bd5\u5b98\u4e00\u822c\u90fd\u662f\u7a0b\u5e8f\u5458\uff0c\u7a0b\u5e8f\u5458\u901a\u5e38\u6ca1\u6709\u90a3\u4e48\u591a\u60f3\u6cd5\uff0c\u4ed6\u4eec\u53ea\u8ba4\u4e00\u4e2a\u7406\uff0c\u9898\u76ee\u505a\u5bf9\uff0c\u505a\u5b8c\u6574\u4e86\uff0c\u5c31\u8ba9\u4f60\u901a\u8fc7\uff0c\u5426\u5219\u5931\u8d25\u3002 \u5982\u679c\u9047\u5230\u7b80\u5355\u9898\u76ee\u88ab\u62d2\u7684\u60c5\u51b5\uff0c\u5219\u5e94\u8be5\u8ba4\u771f\u53cd\u601d\u5728\u601d\u8def\u6216\u4ee3\u7801\u4e2d\u5b58\u5728\u54ea\u4e9b\u6f0f\u6d1e\u3002 Tip \u9762\u8bd5\u5b98\u9664\u4e86\u5e0c\u671b\u5e94\u8058\u8005\u7684\u4ee3\u7801\u80fd\u591f\u5b8c\u6210\u57fa\u672c\u7684\u529f\u80fd\uff0c\u8fd8\u4f1a\u5173\u6ce8\u5e94\u8058\u8005\u662f\u5426\u8003\u8651\u4e86\u8fb9\u754c\u6761\u4ef6\uff0c\u7279\u6b8a\u8f93\u5165(\u7a7a\u6307\u9488\uff0c\u7a7a\u5b57\u7b26\u4e32\u7b49)\uff0c\u4ee5\u53ca\u9519\u8bef\u5904\u7406\u3002","title":"\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_11","text":"\u5bf9\u4e8e\u590d\u6742\u7684\u95ee\u9898\uff0c\u9762\u8bd5\u5b98\u4e0d\u671f\u5f85\u5e94\u8058\u8005\u80fd\u5728\u9762\u8bd5\u4e0d\u5230\u4e00\u5c0f\u65f6\u7684\u65f6\u95f4\u91cc\u7ed9\u51fa\u5b8c\u6574\u7b54\u6848\uff0c\u4ed6\u66f4\u770b\u91cd\u7684\u8fd8\u662f\u5e94\u8058\u8005\u662f\u5426\u6709\u6e05\u6670\u7684\u601d\u8def\u3002 \u9762\u8bd5\u5b98\u4e0d\u559c\u6b22\u5e94\u8058\u8005\u5728\u6ca1\u6709\u5f62\u6210\u6e05\u6670\u601d\u8def\u4e4b\u524d\u5c31\u8349\u7387\u7684\u5f00\u59cb\u5199\u4ee3\u7801\uff0c\u8fd9\u6837\u5199\u51fa\u6765\u7684\u4ee3\u7801\u5bb9\u6613\u903b\u8f91\u6df7\u4e71\uff0c\u9519\u8bef\u767e\u51fa\u3002 \u5e94\u8058\u8005\u53ef\u4ee5\u7528\u5982\u4e0b\u51e0\u4e2a\u65b9\u6cd5\u5e2e\u7ec4\u81ea\u5df1\u5f62\u6210\u6e05\u6670\u7684\u601d\u8def: \u4e3e\u4f8b\u5b50\u5e2e\u52a9\u81ea\u5df1\u7406\u89e3\u95ee\u9898\u3002 \u7528\u56fe\u5f62\u8868\u793a\u62bd\u8c61\u7684\u6570\u636e\u7ed3\u6784\u3002 \u50cf\u5206\u6790\u4e0e\u94fe\u8868\uff0c\u4e8c\u53c9\u6811\u76f8\u5173\u7684\u9898\u76ee\u3002 \u628a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u82e5\u5e72\u7b80\u5355\u7684\u5b50\u95ee\u9898\u3002 \u5982\u9012\u5f52\uff0c\u5206\u6cbb\u6cd5\uff0c\u52a8\u6001\u89c4\u5212\u3002","title":"\u6e05\u6670\u7684\u601d\u8def"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_12","text":"\u4f18\u79c0\u7684\u7a0b\u5e8f\u5458\u5bf9\u65f6\u95f4\u548c\u5185\u5b58\u7684\u6d88\u8017\u9531\u94e2\u5fc5\u8f83\uff0c\u4ed6\u4eec\u5f88\u6709\u6fc0\u60c5\u7684\u4e0d\u65ad\u4f18\u5316\u81ea\u5df1\u7684\u4ee3\u7801\u3002 \u8981\u4f18\u5316\u4ee3\u7801\u6548\u7387\uff0c\u8981\u719f\u77e5\u5404\u79cd\u6570\u636e\u7ed3\u6784\u7684\u4f18\u7f3a\u70b9\uff0c\u5e76\u80fd\u9009\u62e9\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784\u89e3\u51b3\u95ee\u9898\u3002 \u719f\u7ec3\u7684\u638c\u63e1\u5e38\u7528\u7684\u7b97\u6cd5\u3002\u9762\u8bd5\u4e2d\u6700\u5e38\u7528\u7684\u7b97\u6cd5\u662f\u67e5\u627e\u548c\u6392\u5e8f\u3002","title":"\u4f18\u5316\u6548\u7387\u7684\u80fd\u529b"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_13","text":"\u5e94\u8058\u8005\u9664\u4e86\u5c55\u793a\u81ea\u5df1\u7684\u7f16\u7a0b\u80fd\u529b\u548c\u6280\u672f\u529f\u5e95\uff0c\u8fd8\u9700\u8981\u5c55\u793a\u81ea\u5df1\u7684\u8f6f\u6280\u80fd\u3002 \u6c9f\u901a\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u4f1a\u89c2\u5bdf\u5e94\u8058\u8005\u5728\u4ecb\u7ecd\u9879\u76ee\u7ecf\u9a8c\u6216\u8005\u7b97\u6cd5\u601d\u8def\u65f6\u662f\u5426\u89c2\u70b9\u660e\u786e\u3001\u903b\u8f91\u6e05\u6670\u3002 \u56e2\u961f\u5408\u4f5c\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u4f1a\u4ece\u5e94\u8058\u8005\u8bf4\u8bdd\u7684\u795e\u6001\u548c\u8bed\u6c14\u6765\u5224\u65ad\u3002 \u5b66\u4e60\u80fd\u529b\u3002 \u8be2\u95ee\u5e94\u8058\u8005\u6700\u8fd1\u770b\u4ec0\u4e48\u4e66\uff0c\u5b66\u5230\u4e86\u54ea\u4e9b\u65b0\u6280\u672f\u3002 \u9762\u8bd5\u5b98\u95ee\u8fd9\u4e2a\u4e86\u89e3\u5e94\u8058\u8005\u7684\u5b66\u4e60\u613f\u671b\u548c\u5b66\u4e60\u80fd\u529b \u9762\u8bd5\u5b98\u629b\u51fa\u4e00\u4e2a\u65b0\u6982\u5ff5\uff0c\u63a5\u4e0b\u6765\u4ed6\u4f1a\u89c2\u5bdf\u5e94\u8058\u8005\u80fd\u4e0d\u80fd\u5728\u8f83\u77ed\u65f6\u95f4\u5185\u7406\u89e3\u8fd9\u4e2a\u65b0\u6982\u5ff5\u5e76\u89e3\u51b3\u76f8\u5173\u95ee\u9898\u3002 \u77e5\u8bc6\u8fc1\u79fb\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u7ecf\u5e38\u4f1a\u5148\u95ee\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\uff0c\u518d\u95ee\u4e00\u4e2a\u5f88\u590d\u6742\u4f46\u548c\u524d\u9762\u7684\u7b80\u5355\u95ee\u9898\u76f8\u5173\u7684\u95ee\u9898\u3002 \u8fd9\u65f6\u5019\u9762\u8bd5\u5b98\u671f\u5f85\u5e94\u8058\u8005\u80fd\u591f\u4ece\u7b80\u5355\u95ee\u9898\u4e2d\u5f97\u5230\u542f\u793a\uff0c\u4ece\u800c\u627e\u5230\u89e3\u51b3\u590d\u6742\u95ee\u9898\u7684\u7a8d\u95e8\u3002 \u6bd4\u5982\u9762\u8bd5\u5b98\u5148\u8981\u6c42\u5199\u4e00\u4e2a\u6c42\u6590\u6ce2\u90a3\u5951\u989d\u6570\u5217\u7684\u51fd\u6570\uff0c\u518d\u95ee\u4e00\u4e2a\u9752\u86d9\u8df3\u53f0\u9636\u7684\u95ee\u9898\u3002 \u62bd\u8c61\u5efa\u6a21\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u4ece\u65e5\u5e38\u751f\u6d3b\u4e2d\u63d0\u70bc\u95ee\u9898\uff0c\u8003\u5bdf\u5e94\u8058\u8005\u80fd\u4e0d\u80fd\u628a\u95ee\u9898\u62bd\u8c61\u51fa\u6765\u7528\u5408\u7406\u7684\u6570\u636e\u7ed3\u6784\u8868\u793a\uff0c\u5e76\u627e\u5230\u89c4\u5f8b\u89e3\u51b3\u95ee\u9898\u3002 \u53d1\u6563\u601d\u7ef4\u80fd\u529b\u3002 \u9762\u8bd5\u5b98\u9650\u5236\u4e0d\u5f97\u4f7f\u7528\u5e38\u89c4\u65b9\u6cd5\uff0c\u8981\u6c42\u5e94\u8058\u8005\u5177\u5907\u521b\u65b0\u7cbe\u795e\uff0c\u6253\u5f00\u601d\u8def\u591a\u89d2\u5ea6\u5206\u6790\u89e3\u51b3\u95ee\u9898\u3002","title":"\u4f18\u79c0\u7684\u7efc\u5408\u80fd\u529b"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B/#_14","text":"\u5728\u7ed3\u675f\u9762\u8bd55~10\u5206\u949f\uff0c\u9762\u8bd5\u5b98\u4f1a\u7ed9\u5e94\u8058\u8005\u673a\u4f1a\u95ee\u51e0\u4e2a\u95ee\u9898\uff0c\u5e94\u8058\u8005\u7684\u95ee\u9898\u8d28\u91cf\u5bf9\u9762\u8bd5\u7ed3\u679c\u4e5f\u6709\u4e00\u5b9a\u7684\u5f71\u54cd\u3002 \u5efa\u8bae\u5728\u9762\u8bd5\u4e4b\u524d\u505a\u529f\u80fd\uff0c\u4e3a\u6bcf\u4e00\u8f6e\u9762\u8bd5\u51c6\u59072~3\u4e2a\u95ee\u9898\u3002 \u9762\u8bd5\u5b98\u8ba9\u5e94\u8058\u8005\u63d0\u95ee\uff0c\u4e3b\u8981\u662f\u60f3\u4e86\u89e3\u5e94\u8058\u8005\u5173\u5fc3\u7684\u95ee\u9898\u6709\u54ea\u4e9b\uff0c\u56e0\u6b64\u5e94\u8058\u8005\u81f3\u5c11\u8981\u95ee\u4e00\u4e24\u4e2a\u95ee\u9898\uff0c\u5426\u5219\u9762\u8bd5\u5b98\u89c9\u5f97\u4f60\u5bf9\u6211\u4eec\u516c\u53f8\uff0c\u804c\u4f4d\u7b49\u90fd\u4e0d\u611f\u5174\u8da3\u3002 \u63d0\u95ee\u8981\u70b9\uff1a \u4e0d\u8981\u95ee\u548c\u81ea\u5df1\u804c\u4f4d\u6ca1\u6709\u5173\u7cfb\u7684\u95ee\u9898\u3002 \u4e0d\u8981\u95ee\u85aa\u6c34\u3002 \u6280\u672f\u9762\u4e0d\u662f\u8c08\u85aa\u6c34\u7684\u65f6\u5019\uff0c\u8981\u8c08\u5de5\u8d44\u7b49\u5230\u901a\u8fc7\u9762\u8bd5\u4e4b\u540e\u548cHR\u8c08\u3002 \u4e0d\u8981\u7acb\u5373\u6253\u542c\u9762\u8bd5\u7ed3\u679c\u3002 \u63a8\u8350\u95ee\u4e0e\u804c\u4f4d\u76f8\u5173\u6216\u9879\u76ee\u76f8\u5173\u7684\u95ee\u9898\uff0c\u5982\u679c\u63d0\u95ee\u5230\u4f4d\uff0c\u9762\u8bd5\u5b98\u4f1a\u89c9\u5f97\u4f60\u5bf9\u804c\u4f4d\u5f88\u6709\u5174\u8da3\u3002 \u5bf9\u5e94\u8058\u7684\u804c\u4f4d\u6216\u9879\u76ee\u80cc\u666f\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002 \u5bf9\u516c\u53f8\u7684\u6210\u7acb\u65f6\u95f4\uff0c\u4e3b\u8981\u4e1a\u52a1\uff0c\u804c\u4f4d\u8981\u6c42\u7b49\u90fd\u4e86\u7136\u4e8e\u80f8 \u9762\u8bd5\u8fc7\u7a0b\u7559\u610f\u9762\u8bd5\u5b98\u8bf4\u8fc7\u7684\u8bdd\uff0c\u6709\u4e0d\u5c11\u9762\u8bd5\u5b98\u4f1a\u5728\u9762\u8bd5\u4e4b\u524d\u4ecb\u7ecd\u9879\u76ee\uff0c\u5305\u542b\u5176\u4ed6\u6e20\u9053\u65e0\u6cd5\u5f97\u5230\u7684\u4fe1\u606f\uff0c\u5982\u9879\u76ee\u8fdb\u5c55\u7b49\u3002","title":"\u5e94\u8058\u8005\u63d0\u95ee\u73af\u8282"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/","text":"\u9762\u8bd5\u98981\uff1a \u8d4b\u503c\u8fd0\u7b97\u7b26\u51fd\u6570 \u9762\u8bd5\u98982\uff1a \u5b9e\u73b0\u5355\u4f8b\u6a21\u5f0f \u5b57\u7b26\u4e32 \u00b6 \u9762\u8bd5\u989816: \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 \u4f4d\u8fd0\u7b97 \u00b6 \u9762\u8bd5\u989815: \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 excel \u7f16\u53f7\u7b2c\u51e0\u5217: excel \u7f16\u53f7\u7b2c\u51e0\u5217 \u6570\u7ec4 \u00b6 \u9762\u8bd5\u98983\uff1a \u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u9762\u8bd5\u98984\uff1a \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u9762\u8bd5\u98985: \u66ff\u6362\u7a7a\u683c\uff0c\u89e3\u6cd5\u4e00 \u9762\u8bd5\u98985: \u66ff\u6362\u7a7a\u683c\uff0c\u89e3\u6cd5\u4e8c \u9762\u8bd5\u989817: \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u9762\u8bd5\u989811: \u65cb\u8f6c\u6570\u7ec4\u91cc\u627e\u6700\u5c0f\u503c \u9762\u8bd5\u989812: \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u9762\u8bd5\u989813: \u673a\u5668\u4eba\u79fb\u52a8\u8303\u56f4 \u94fe\u8868 \u00b6 \u9762\u8bd5\u98986: \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u9762\u8bd5\u989818: \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 \u9762\u8bd5\u989818_02: \u5220\u9664\u6709\u5e8f\u94fe\u8868\u91cc\u91cd\u590d\u7684\u8282\u70b9 \u9762\u8bd5\u989822: \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u9762\u8bd5\u989823: \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9 \u9762\u8bd5\u989824: \u53cd\u8f6c\u94fe\u8868 \u9762\u8bd5\u989825: \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868 \u9762\u8bd5\u989835: \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 \u6808\u548c\u961f\u5217 \u00b6 \u9762\u8bd5\u98989: \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u76f8\u5173\u9898\u76ee \u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u6808 \u9762\u8bd5\u989830: \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u9762\u8bd5\u989831: \u6808\u7684\u538b\u5165\uff0c\u5f39\u51fa\u5e8f\u5217 \u6811 \u00b6 \u9762\u8bd5\u98987: \u91cd\u5efa\u4e8c\u53c9\u6811 \u9762\u8bd5\u98988: \u4e2d\u5e8f\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \u9762\u8bd5\u989826: \u6811\u7684\u5b50\u7ed3\u6784 \u9762\u8bd5\u989827: \u6811\u7684\u955c\u50cf \u9762\u8bd5\u989828: \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u6811\u7684\u524d\u5e8f\u904d\u5386 \u9762\u8bd5\u989832: \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u9762\u8bd5\u989833: \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u9762\u8bd5\u989834: \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 \u56fe \u00b6 \u9012\u5f52 \u00b6 \u9762\u8bd5\u989810: \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u52a8\u6001\u89c4\u5212 \u00b6 \u9762\u8bd5\u989814: \u526a\u7ef3\u5b50","title":"0. \u9762\u8bd5\u9898"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_1","text":"\u9762\u8bd5\u989816: \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9","title":"\u5b57\u7b26\u4e32"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_2","text":"\u9762\u8bd5\u989815: \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 excel \u7f16\u53f7\u7b2c\u51e0\u5217: excel \u7f16\u53f7\u7b2c\u51e0\u5217","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_3","text":"\u9762\u8bd5\u98983\uff1a \u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 \u9762\u8bd5\u98984\uff1a \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e \u9762\u8bd5\u98985: \u66ff\u6362\u7a7a\u683c\uff0c\u89e3\u6cd5\u4e00 \u9762\u8bd5\u98985: \u66ff\u6362\u7a7a\u683c\uff0c\u89e3\u6cd5\u4e8c \u9762\u8bd5\u989817: \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 \u9762\u8bd5\u989811: \u65cb\u8f6c\u6570\u7ec4\u91cc\u627e\u6700\u5c0f\u503c \u9762\u8bd5\u989812: \u77e9\u9635\u4e2d\u7684\u8def\u5f84 \u9762\u8bd5\u989813: \u673a\u5668\u4eba\u79fb\u52a8\u8303\u56f4","title":"\u6570\u7ec4"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_4","text":"\u9762\u8bd5\u98986: \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 \u9762\u8bd5\u989818: \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 \u9762\u8bd5\u989818_02: \u5220\u9664\u6709\u5e8f\u94fe\u8868\u91cc\u91cd\u590d\u7684\u8282\u70b9 \u9762\u8bd5\u989822: \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9 \u9762\u8bd5\u989823: \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9 \u9762\u8bd5\u989824: \u53cd\u8f6c\u94fe\u8868 \u9762\u8bd5\u989825: \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868 \u9762\u8bd5\u989835: \u590d\u6742\u94fe\u8868\u7684\u590d\u5236","title":"\u94fe\u8868"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_5","text":"\u9762\u8bd5\u98989: \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 \u76f8\u5173\u9898\u76ee \u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u6808 \u9762\u8bd5\u989830: \u5305\u542bmin\u51fd\u6570\u7684\u6808 \u9762\u8bd5\u989831: \u6808\u7684\u538b\u5165\uff0c\u5f39\u51fa\u5e8f\u5217","title":"\u6808\u548c\u961f\u5217"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_6","text":"\u9762\u8bd5\u98987: \u91cd\u5efa\u4e8c\u53c9\u6811 \u9762\u8bd5\u98988: \u4e2d\u5e8f\u904d\u5386\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 \u9762\u8bd5\u989826: \u6811\u7684\u5b50\u7ed3\u6784 \u9762\u8bd5\u989827: \u6811\u7684\u955c\u50cf \u9762\u8bd5\u989828: \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 \u6811\u7684\u524d\u5e8f\u904d\u5386 \u9762\u8bd5\u989832: \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u9762\u8bd5\u989833: \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 \u9762\u8bd5\u989834: \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84","title":"\u6811"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_7","text":"","title":"\u56fe"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_8","text":"\u9762\u8bd5\u989810: \u6590\u6ce2\u90a3\u5951\u6570\u5217","title":"\u9012\u5f52"},{"location":"%E5%89%91%E6%8C%87offer/%E9%9D%A2%E8%AF%95%E9%A2%98/#_9","text":"\u9762\u8bd5\u989814: \u526a\u7ef3\u5b50","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/python%E6%93%8D%E4%BD%9Cmongodb/","text":"pymongo \u5b89\u88c5sudo pip3 install pymongo \u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u521b\u5efamongodb\u7684\u6570\u636e\u5e93\u94fe\u63a5\u5bf9\u8c61 conn = pymongo . MongoClient ( 'localhost' , 27017 ) \u751f\u6210\u6570\u636e\u5e93\u5bf9\u8c61( setitem , getitem ) db = conn . stu # \u6216 db = conn [ 'stu' ] \u751f\u6210\u96c6\u5408\u5bf9\u8c61 myset = db . collection # \u6216 myset = db [ 'collection' ] \u8fdb\u884c\u96c6\u5408\u64cd\u4f5c\uff08\u589e\u5220\u6539\u67e5\u7d22\u5f15\u805a\u5408\uff09 \u5173\u95ed\u6570\u636e\u5e93\u94fe\u63a5 conn.close \u63d2\u5165\u64cd\u4f5c \u00b6 insert () insert_one () insert_many () # id\u76f8\u540c\u5219\u4fee\u6539\uff0c\u4e0d\u540c\u5219\u63d2\u5165 save () \u67e5\u627e\u64cd\u4f5c \u00b6 find() \u529f\u80fd \u67e5\u627e\u6570\u636e\u5e93\u5185\u5bb9 \u53c2\u6570 \u540cmongo shell find() \u8fd4\u56de\u503c \u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u6e38\u6807\u5bf9\u8c61 find_one() \u529f\u80fd \u67e5\u8be2\u7b2c\u4e00\u6761\u7b26\u5408\u6761\u4ef6\u7684\u6570\u636e \u53c2\u6570 \u540cfind() \u8fd4\u56de\u503c \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178 *\u5728pymongo \u4e2d\u6240\u6709\u64cd\u4f5c\u7b26\u7684\u7528\u6cd5\u540cmongo shell\u76f8\u540c\uff0c\u53ea\u662f \u64cd\u4f5c\u65f6\u52a0\u5f15\u53f7\uff0c\u4ee5\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\u5199\u5165python\u4ee3\u7801 \u793a\u4f8b cursor = myset.find({'age':{'$gt':18}},{'_id':0}) cursor \u5bf9\u8c61\u7684\u5c5e\u6027 next() limit() myset.skip(1).limit(3): skip() count() sort() pymongo myset.sort([('age',1), ('name',-1)]): mongo shell sort({'age'\uff1a1, 'name':-1}) myset.find({'$or':[{'age':{'$lt':19}}, {'sex':'\u5973'}]},{}) \u4f7f\u7528for\u6216\u8005\u662fnext\u4f7f\u6e38\u6807\u4f4d\u7f6e\u4e0d\u518d\u6307\u5411\u5f00\u5934\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u8c03\u7528limit, skip, sort\u5c31\u4f1a\u62a5\u9519 \u4fee\u6539\u64cd\u4f5c update(query, update, upsert=false, multi=false) \u793a\u4f8b mongo_update \u5220\u9664\u64cd\u4f5c remove(qusery, multi=True) multi \u9ed8\u8ba4\u662fTrue\u8868\u793a\u5220\u9664\u6240\u6709query\u8fc7\u6ee4\u6587\u6863 \u8bbe\u7f6eFalse\u8868\u793a\u53ea\u5220\u9664\u7b2c\u4e00\u4e2a \uff0a(python\u4e2d)True == true(mongo shell) \uff0a(python\u4e2d)False == false(mongo shell) \uff0a(python\u4e2d)None == null(mongo shell) \u7d22\u5f15\u64cd\u4f5c ensure_index() list_indexes() drop_index() drop_indexes() \u805a\u5408\u64cd\u4f5c aggregate() \u53c2\u6570 \u548cmongo shell\u4e00\u6837 \u8fd4\u56de \u8fd4\u56de\u548cfind()\u51fd\u6570\u76f8\u540c\u7684\u6e38\u6807\u5bf9\u8c61 \u7ec3\u4e60 grade \u6570\u636e\u5e93\uff0c\u3000class\u96c6\u5408 1. \u4e3a\u6240\u6709\u4eba\u6dfb\u52a0\u5206\u6570\u57df {'chinese': 88, 'math': 77, 'english': 78} 2. \u6309\u7167\u6027\u522b\u5206\u7ec4\u7edf\u8ba1\u6bcf\u7ec4\u4eba\u6570 3. \u7edf\u8ba1\u6bcf\u540d\u7537\u751f\u7684\u8bed\u6587\u6210\u7ee9 4. \u5c06\u5973\u751f\u6309\u7167\u82f1\u8bed\u6210\u7ee9\u964d\u5e8f\u6392\u5217 # \u6587\u4ef6\u64cd\u4f5c pymongo \u5b9e\u73b0gridfs\u5b58\u50a8 import gridfs GridFS() \u529f\u80fd \u751f\u6210grid\u6570\u636e\u5e93\u5bf9\u8c61 import bson bson.binary.Binary() \u529f\u80fd \u5c06bytes\u683c\u5f0f\u5b50\u4e32\u8f6c\u6362\u4e3amongodb\u7684\u4e8c\u8fdb\u5236\u5b58\u50a8\u683c\u5f0f","title":"7. python\u64cd\u4f5cmongodb"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/python%E6%93%8D%E4%BD%9Cmongodb/#_1","text":"\u521b\u5efamongodb\u7684\u6570\u636e\u5e93\u94fe\u63a5\u5bf9\u8c61 conn = pymongo . MongoClient ( 'localhost' , 27017 ) \u751f\u6210\u6570\u636e\u5e93\u5bf9\u8c61( setitem , getitem ) db = conn . stu # \u6216 db = conn [ 'stu' ] \u751f\u6210\u96c6\u5408\u5bf9\u8c61 myset = db . collection # \u6216 myset = db [ 'collection' ] \u8fdb\u884c\u96c6\u5408\u64cd\u4f5c\uff08\u589e\u5220\u6539\u67e5\u7d22\u5f15\u805a\u5408\uff09 \u5173\u95ed\u6570\u636e\u5e93\u94fe\u63a5 conn.close","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/python%E6%93%8D%E4%BD%9Cmongodb/#_2","text":"insert () insert_one () insert_many () # id\u76f8\u540c\u5219\u4fee\u6539\uff0c\u4e0d\u540c\u5219\u63d2\u5165 save ()","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/python%E6%93%8D%E4%BD%9Cmongodb/#_3","text":"find() \u529f\u80fd \u67e5\u627e\u6570\u636e\u5e93\u5185\u5bb9 \u53c2\u6570 \u540cmongo shell find() \u8fd4\u56de\u503c \u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u6e38\u6807\u5bf9\u8c61 find_one() \u529f\u80fd \u67e5\u8be2\u7b2c\u4e00\u6761\u7b26\u5408\u6761\u4ef6\u7684\u6570\u636e \u53c2\u6570 \u540cfind() \u8fd4\u56de\u503c \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178 *\u5728pymongo \u4e2d\u6240\u6709\u64cd\u4f5c\u7b26\u7684\u7528\u6cd5\u540cmongo shell\u76f8\u540c\uff0c\u53ea\u662f \u64cd\u4f5c\u65f6\u52a0\u5f15\u53f7\uff0c\u4ee5\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\u5199\u5165python\u4ee3\u7801 \u793a\u4f8b cursor = myset.find({'age':{'$gt':18}},{'_id':0}) cursor \u5bf9\u8c61\u7684\u5c5e\u6027 next() limit() myset.skip(1).limit(3): skip() count() sort() pymongo myset.sort([('age',1), ('name',-1)]): mongo shell sort({'age'\uff1a1, 'name':-1}) myset.find({'$or':[{'age':{'$lt':19}}, {'sex':'\u5973'}]},{}) \u4f7f\u7528for\u6216\u8005\u662fnext\u4f7f\u6e38\u6807\u4f4d\u7f6e\u4e0d\u518d\u6307\u5411\u5f00\u5934\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u8c03\u7528limit, skip, sort\u5c31\u4f1a\u62a5\u9519 \u4fee\u6539\u64cd\u4f5c update(query, update, upsert=false, multi=false) \u793a\u4f8b mongo_update \u5220\u9664\u64cd\u4f5c remove(qusery, multi=True) multi \u9ed8\u8ba4\u662fTrue\u8868\u793a\u5220\u9664\u6240\u6709query\u8fc7\u6ee4\u6587\u6863 \u8bbe\u7f6eFalse\u8868\u793a\u53ea\u5220\u9664\u7b2c\u4e00\u4e2a \uff0a(python\u4e2d)True == true(mongo shell) \uff0a(python\u4e2d)False == false(mongo shell) \uff0a(python\u4e2d)None == null(mongo shell) \u7d22\u5f15\u64cd\u4f5c ensure_index() list_indexes() drop_index() drop_indexes() \u805a\u5408\u64cd\u4f5c aggregate() \u53c2\u6570 \u548cmongo shell\u4e00\u6837 \u8fd4\u56de \u8fd4\u56de\u548cfind()\u51fd\u6570\u76f8\u540c\u7684\u6e38\u6807\u5bf9\u8c61 \u7ec3\u4e60 grade \u6570\u636e\u5e93\uff0c\u3000class\u96c6\u5408 1. \u4e3a\u6240\u6709\u4eba\u6dfb\u52a0\u5206\u6570\u57df {'chinese': 88, 'math': 77, 'english': 78} 2. \u6309\u7167\u6027\u522b\u5206\u7ec4\u7edf\u8ba1\u6bcf\u7ec4\u4eba\u6570 3. \u7edf\u8ba1\u6bcf\u540d\u7537\u751f\u7684\u8bed\u6587\u6210\u7ee9 4. \u5c06\u5973\u751f\u6309\u7167\u82f1\u8bed\u6210\u7ee9\u964d\u5e8f\u6392\u5217 # \u6587\u4ef6\u64cd\u4f5c pymongo \u5b9e\u73b0gridfs\u5b58\u50a8 import gridfs GridFS() \u529f\u80fd \u751f\u6210grid\u6570\u636e\u5e93\u5bf9\u8c61 import bson bson.binary.Binary() \u529f\u80fd \u5c06bytes\u683c\u5f0f\u5b50\u4e32\u8f6c\u6362\u4e3amongodb\u7684\u4e8c\u8fdb\u5236\u5b58\u50a8\u683c\u5f0f","title":"\u67e5\u627e\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/","text":"\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u548c\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u533a\u522b \u00b6 \u4e0d\u662f\u4ee5\u5173\u7cfb\u6a21\u578b\u6784\u5efa\u7684\uff0c\u7ed3\u6784\u6bd4\u8f83\u81ea\u7531 Nosql\u4e0d\u4fdd\u969c\u6570\u636e\u7684\u4e00\u81f4\u6027 Nosql\u5f25\u8865\u4e86\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4e00\u4e9b\u4e0d\u8db3\uff0c\u6bd4\u5982\u9ad8\u5e76\u53d1\uff0c\u6d77\u91cf\u6570\u636e\u8bfb\u53d6 Nosql\u8bfb\u5199\u80fd\u529b\u5f3a Nosql\u6280\u672f\u8fd8\u5728\u4e0d\u65ad\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u529f\u80fd\u6ca1\u6709\u5173\u7cfb\u578b\u6570\u636e\u5e93\u6210\u719f\u5f3a\u5927 \u67e5\u627e\u64cd\u4f5c \u00b6 mysql \u00b6 select \u5b57\u6bb5\u540d\u3000from \u8868\u540d\u3000where \u6761\u4ef6 mongodb \u00b6 find() \u00b6 db.collection.find(query, field) \u529f\u80fd: \u67e5\u627e\u6587\u6863 \u53c2\u6570 query \u67e5\u627e\u6761\u4ef6\uff0c\u76f8\u5f53\u4e0ewhere\u5b50\u53e5 \u4ee5\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u4f20\u9012\u53c2\u6570\uff0c\u5982\u679c\u662f\u7a7a{}\u8868\u793a\u67e5\u627e\u5185\u5bb9 field \u67e5\u627e\u7684\u57df \u4ee5\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u4f20\u9012\u53c2\u6570\uff0c\u7ed9\u51fa\u8981\u67e5\u627e\uff08\u4e0d\u67e5\u627e\u7684\u57df\uff09\uff0c\u4ee5\u57df\u540d\u4e3a\u952e\uff0c\u4ee50\uff0c1\u4e3a\u503c\u8868\u793a\u4e0d\u67e5\u627e\uff0c\u67e5\u627e \u8fd4\u56de\u503c: \u67e5\u627e\u5230\u7684\u6240\u6709\u7684\u6587\u6863 \u5982\u679c\u67d0\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u57df\u8bbe\u7f6e\u4e3a0\u8868\u793a\u8fd9\u4e9b\u57df\u4e0d\u67e5\u627e\uff0c\u5176\u4ed6\u57df\u5747\u67e5\u627e \u5982\u679c\u67d0\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u57df\u8bbe\u7f6e\u4e3a1\u8868\u793a\u8fd9\u4e9b\u57df\u67e5\u627e\uff0c\u5176\u4ed6\u57df\u5747\u4e0d\u67e5\u627e\uff0c id\u9664\u975e\u8bbe\u7f6e\u4e3a0\uff0c\u5219\u5426\u5747\u4f1a\u67e5\u627e \u9664_id\u57df\u5176\u4ed6\u57df\u4e0d\u80fd\u6709\u7684\u8bbe\u7f6e\u4e3a1\u6709\u7684\u8bbe\u7f6e\u4e3a0 \u793a\u4f8b \u67e5\u627e\u7ed3\u679c\u53ea\u6709name\u57df db.class0.find({'sex': '\u7537'}, {_id:0, name:1}) \u67e5\u627e\u6240\u6709\u5185\u5bb9 db.collection.find()\u3000\u3000\uff0d\uff0d\uff0d\uff0d\uff1e\u3000select * from table \u901a\u8fc7find\u67e5\u627e\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e8f\u5217\u53f7\u83b7\u53d6\u5177\u4f53\u67d0\u4e00\u9879 \u83b7\u53d6\u67e5\u627e\u7ed3\u679c\u4e2d\u7684\u7b2c\u4e8c\u9879 db.class.find({},{_id:0, hobby:0})[1] findOne() \u00b6 findOne(query, field) \u529f\u80fd: \u67e5\u627e\u7b2c\u4e00\u6761\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863 \u53c2\u6570: \u540cfind \u8fd4\u56de\u503c: \u8fd4\u56de\u67e5\u627e\u5230\u7684\u6587\u6863 \u793a\u4f8b db.class0.findOne({sex: '\u7537'}, {'name': 1, _id:0, age:1}) query\u66f4\u591a\u7684\u7b5b\u9009\u7528\u6cd5 \u00b6 \u64cd\u4f5c\u7b26 \u4f7f\u7528$\u6ce8\u660e\u7684\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u8868\u8fbe\u4e00\u5b9a\u7684\u542b\u4e49\uff0c\u6bd4\u5982'$lt'\u8868\u793a\u5c0f\u4e8e \u6bd4\u8f83\u64cd\u4f5c\u7b26\u4f7f\u7528 $eq \u7b49\u4e8e == \u793a\u4f8b\uff1adb.class0.find({age:{$eq:19}}) $ne \u4e0d\u7b49\u4e8e\u3000!= \u793a\u4f8b\uff1adb.class0.find({age:{$ne:18}},{_id:0}) $lt \u5c0f\u4e8e\u3000\u3000< \u793a\u4f8b\uff1adb.class0.find({age:{$lt:19}}) $lte \u5c0f\u4e8e\u7b49\u4e8e <= \u793a\u4f8b\uff1adb.class0.find({age:{$lte:18}},{_id:0}) $gt\u3000\u5927\u4e8e > \u793a\u4f8b\uff1adb.class0.find({age:{$gt:17}}, {_id:0}) $gte \u5927\u4e8e\u7b49\u4e8e >= \u793a\u4f8b: db.class0.find({age:{$gte:17}}, {_id:0}) $in \u5305\u542b \u793a\u4f8b\uff1adb.class0.find({age:{$in:[17,18,19]}}, {_id:0}) $nin \u4e0d\u5305\u542b \u793a\u4f8b\uff1a db.class0.find({age:{$nin:[17,18]}}, {_id:0}) \u7efc\u5408\u4f7f\u7528 \u5e74\u9f84\u5927\u4e8e16\uff0c\u5c0f\u4e8e19\u7684\u4fe1\u606f db.class0.find({age:{$gt:16, $lt:19}}, {_id:0}) \uff0a\u3000\u5728mongodb\u4e2d\u5b57\u7b26\u4e32\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f \uff0a\u3000\u5728mongodb\u4e2d\u6240\u6709\u7684{} []\u3000\u90fd\u53ef\u4ee5\u5199\u591a\u4e2a\u6761\u4ef6\uff0c\u4f46\u6839\u636e\u53c2\u6570\u7684\u4e0d\u540c\u8868\u8fbe\u7684\u610f\u601d\u4e0d\u4e00\u6837 \uff0a\u3000\u4f7f\u7528ne\u67e5\u627e\u4e5f\u4f1a\u627e\u5230\u8be5\u57df\u4e0d\u5b58\u5728\u7684\u6587\u6863 \u903b\u8f91\u64cd\u4f5c\u7b26 $and 1. \u5728query\u4e2d\u5982\u679c\u5199\u591a\u4e2a\u6761\u4ef6\u9ed8\u8ba4\u5373\u4e3aand\u5173\u7cfb 2.\u3000\u903b\u8f91\u4e0e $and db.class0.find({$and:[{age:{$gt:14}}, {sex:'\u7537'}]}) $or 1. \u5e74\u9f84\u5c0f\u4e8e16\u3000\u6216\u3000\u5e74\u9f84\u5927\u4e8e18 db.class0.find({$or:[{age:{$lt:16}}, {age:{$gt:18}}]}) $not db.class0.find({sex:{$not:{$eq:'m'}}}) db.class0.find({age:{$not:{$gt:14}}}, {_id:0}) $nor \u65e2\u4e0d\u662f\u4e5f\u4e0d\u662f \u65e2\u4e0d\u662f18\u5c81\uff0c\u4e5f\u4e0d\u662f\u7537\u7684 \u3000 db.class0.find({$nor:[{age:18}, {sex:'\u7537'}]}) \u903b\u8f91\u6761\u4ef6\u6df7\u5408 \u5e74\u9f84\u5927\u4e8e17\u5c81\u5e76\u4e14\u4e3a\u7537\u6027\u6216\u8005\u59d3\u540d\u53ebAbby db.class0.find({$or:[{age:{$gt:17}, sex:'\u7537'}, {name: 'Abby'}]}) \u5e74\u9f84\u4e0d\u5927\u4e8e18\u3000\u6216\u8005\u4e3a\u5973\u6027\uff0c\u5e76\u4e14\u540d\u5b57\u53ebLucy db.class0.find({$or:[{age:{$lte:18}}, {sex:'\u5973'}]}, {_id:0}) db.class0.find({$or:[{age:{$lte:18}}, {sex:'\u5973'}], name:\"Lucy\"}, {_id:0}) db.class0.find({$and:[{$or:[{age:{$lte:18}}, {sex:'\u5973'}]}, {name:\"Lucy\"}]}, {_id:0}) Array \u00b6 [1, 2, 3, 4, 5] * \u6570\u7ec4\u662f\u6709\u5e8f\u662f\u6570\u636e\u96c6\u5408 * mongo\u4e2d\u6570\u7ec4\u4e5f\u53ef\u4ee5\u6709\u591a\u79cd\u6570\u636e\u5143\u7d20\u6df7\u5408 \u67e5\u627e\u6570\u7ec4\u4e2d\u5305\u542b\u67d0\u4e00\u6761\u4ef6\u7684\u5143\u7d20 db.class1.find({socre:{$lt:60}}, {_id:0}) $all \u67e5\u627e\u6570\u7ec4\u4e2d\u540c\u65f6\u5305\u542b\u591a\u9879\u7684\u6587\u6863 db.class1.find([score:{$all:[49,67]}]) $size \u901a\u8fc7\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\u67e5\u627e db.ccc.find({score:{$size:2}}, {_id:0}) $slice \u663e\u793a\u6570\u7ec4\u4e2d\u6307\u5b9a\u9879 \u663e\u793a\u4e24\u9879 db.ccc.find({},{_id:0, score:{$slice:2}}) \u663e\u793a\u8df3\u8fc7\u7b2c\u4e00\u4e2a\u663e\u793a\u540e\u9762\u4e24\u4e2a db.ccc.find({},{_id:0, score:{$slice:[1,2]}}) $exists \u67e5\u627e\u67d0\u4e2a\u57df\u662f\u5426\u5b58\u5728\u7b5b\u9009 db.ccc.find({sex:{$exists:false}},{_id:0}) $mod \u4f59\u6570\u67e5\u627e { field: { $mod: [ divisor, remainder ] } } \u627e\u51fa\u5e74\u9f84\u4e3a\u5355\u6570\u7684\u6587\u6863 db.ccc.find({age:{$mod:[2,1]}}, {_id:0}) $type \u627e\u51fa\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u7684\u6587\u6863 \u627e\u51faname\u57df\u503c\u7c7b\u578b\u4e3a2\u7684\u6587\u6863 db.ccc.find({name:{$type:2}},{_id:0}) \u67e5\u627e\u7ed3\u679c\u7684\u64cd\u4f5c\u51fd\u6570 \u00b6 db.collection.distinct(field) \u529f\u80fd \u67e5\u770b\u67d0\u4e2a\u57df\u7684\u503c\u8303\u56f4 \u793a\u4f8b db.ccc.distinct('name') pretty() \u529f\u80fd \u683c\u5f0f\u5316\u663e\u793a\u67e5\u8be2\u7ed3\u679c \u793a\u4f8b db.ccc.find().pretty() limit(n) \u529f\u80fd \u663e\u793a\u524dn\u6761\u7ed3\u679c \u793a\u4f8b db.ccc.find().limit(2) skip(n) \u529f\u80fd \u8df3\u8fc7\u524dn\u6761\u663e\u793a\uff0c\u663e\u793a\u540e\u9762\u7684\u67e5\u8be2\u7ed3\u679c \u793a\u4f8b db.ccc.find({},{_id:0}).skip(2) count() \u529f\u80fd\uff1a \u7edf\u8ba1\u67e5\u8be2\u7ed3\u679c\u6570\u91cf \u7edf\u8ba1\u6027\u522b\u4e3aw\u7684\u6587\u6863\u4e2a\u6570 db.ccc.find({sex:'w'}, {_id:0}).count() sort({field:1/-1}) \u529f\u80fd \u5bf9\u67e5\u627e\u7ed3\u679c\u6392\u5e8f \u53c2\u6570 \u4ee5\u952e\u503c\u5bf9\u8868\u793a\u6309\u7167\u54ea\u4e2afield\u6392\u5e8f 1 \u8868\u793a\u5347\u5e8f -1 \u8868\u793a\u964d\u5e8f \u793a\u4f8b \u6309\u7167\u5e74\u9f84\u5347\u5e8f\u6392\u5e8f db.ccc.find({},{_id:0}).sort({age:1}) \u590d\u5408\u6392\u5e8f # \u6309\u7167\u5e74\u9f84\u5347\u5e8f\u6392\u5e8f\uff0c\u5e74\u9f84\u76f8\u540c\u65f6\u6309\u7167\u5206\u6570\u5347\u5e8f\u6392\u5e8f db.ccc.find({},{_id:0}).sort({age:1, score: 1}) \u7ec3\u4e60 \u521b\u5efa\u6570\u636e\u540d\u79f0 grade \u521b\u5efa\u96c6\u5408\u3000class \u96c6\u5408\u4e2d\u63d2\u5165\u82e5\u5e72\u6587\u6863\uff0c\u6587\u6863\u683c\u5f0f {name:'zhangsan', age:10, sex:'m', hobby:['a', 'b']} \u5e74\u9f84\u8303\u56f4: 6-15 \u7231\u597d\u9009\u62e9: draw sing dance basketball football pingpong computer \u6bcf\u4e2a\u540c\u5b66\u9009\u62e92-5\u9879 \u67e5\u627e\u7ec3\u4e60 \u67e5\u770b\u73ed\u7ea7\u6240\u6709\u5b66\u751f\u4fe1\u606f db.class.find() \u67e5\u770b\u73ed\u7ea7\u4e2d\u5e74\u9f84\u4e3a8\u5c81\u7684\u5b66\u751f\u4fe1\u606f db.class.find({age:8}, {_id:0}) \u67e5\u770b\u73ed\u7ea7\u4e2d\u5e74\u9f84\u5927\u4e8e10\u5c81\u7684\u5b66\u751f\u4fe1\u606f db.class.find({age:{$gt:10}}, {_id:0}) \u67e5\u770b\u73ed\u7ea7\u4e2d\u5e74\u9f84\u57288-11\u5c81\u4e4b\u95f4\u7684\u5b66\u751f\u4fe1\u606f db.class.find({$and:[{age:{$gte:8}}, {age:{$lte:11}}]},{_id:0, hobby:0}) \u67e5\u770b\u73ed\u7ea7\u4e2d\u5e74\u9f84\u4e3a10\u5c81\u4e14\u4e3a\u7537\u6027\u7684\u5b66\u751f\u4fe1\u606f db.class.find({$and:[{age:10}, {sex:'m'}]},{_id:0,hobby:0}) \u67e5\u770b\u73ed\u7ea7\u4e2d\u5c0f\u4e8e7\u5c81\u6216\u8005\u5927\u4e8e14\u5c81\u7684\u5b66\u751f\u4fe1\u606f db.class.find({$or:[{age:{$lt:7}}, {age:{$gt:14}}]}, {_id:0, hobby:0}) \u67e5\u770b\u73ed\u7ea7\u5e74\u9f84\u4e3a8\u5c81\u6216\u800511\u5c81\u7684\u5b66\u751f\u4fe1\u606f db.class.find({$or:[{age:8}, {age:11}]},{_id:0, hobby:0}) \u627e\u5230\u67092\u9879\u5174\u8da3\u7231\u597d\u7684\u5b66\u751f db.class.find({hobby:{$size:2}},{_id:0}) \u627e\u5230\u5174\u8da3\u4e2d\u6709draw\u7684\u5b66\u751f db.class.find({hobby:'draw'},{_id:0}) \u627e\u5230\u5373\u559c\u6b22\u753b\u753b\u53c8\u559c\u6b22\u8df3\u821e\u7684\u5b66\u751f db.class.find({hobby:'dance', hobby:'draw'},{_id:0}) \u7edf\u8ba1\u5174\u8da3\u6709\uff14\u9879\u7684\u5b66\u751f\u4eba\u6570 db.class.find({hobby:{$size:4}},{_id:0}).count() \u627e\u51fa\u672c\u73ed\u5e74\u9f84\u7b2c\u4e8c\u5927\u7684\u5b66\u751f db.class.find({},{_id:0}).sort({age:-1}).skip(1).limit(1) \u67e5\u770b\u672c\u73ed\u5b66\u751f\u5174\u8da3\u7231\u597d\u6db5\u76d6\u54ea\u4e9b\u65b9\u9762 db.class.distinct('hobby') \u627e\u5230\u5e74\u9f84\u6700\u5927\u7684\u4e09\u4e2a\u5b66\u751f db.class.find({},{_id:0}).sort({age:-1}).limit(3) \u5220\u9664\u6240\u6709\u5e74\u9f84\u5927\u4e8e16\u6216\u8005\u5c0f\u4e8e7\u5c81\u7684\u5b66\u751f\u9664\u975e\u4ed6\u7684\u7231\u597d\u6709\u4e09\u9879\u4ee5\u4e0a db.class.find({$and:[{$or:[{age:{$gt:16}}, {age:{$lt:7}}]}, {hobby:{$size:2}}]}, {_id:0}) \u7b54\u6848 \u521b\u5efa\u6570\u636e\u5e93 use grade \u63d2\u5165 db.class.insert([ {name:'zhangsan', age:10, sex:'m', hobby:['draw', 'sing', 'dance']}, {name:'lisi', age:5, sex:'m', hobby:['draw', 'sing', 'dance', 'computer']}, {name:'wangwu', age:15, sex:'m', hobby:['pingpong', 'computer']}, {name:'\u963f\u5b9d', age:8, sex:'m', hobby:['pingpong', 'computer']}, {name:'\u963f\u84c9', age:14, sex:'w', hobby:['pingpong', 'computer', 'basketball']}, {name:'\u963f\u5586', age:10, sex:'m', hobby:['dance', 'computer', 'basketball', 'football']}, {name:'\u767e\u5408', age:18, sex:'w', hobby:['dance', 'computer', 'basketball', 'football']}, ]) \u5220\u9664\u6587\u6863 \u00b6 mysql \u00b6 delete from \u8868\u540d where \u6761\u4ef6 ; \u5220\u9664\u5b57\u6bb5 alter table \u8868\u540d drop \u5b57\u6bb5\u540d ; mongodb \u00b6 db.collection.remove(query, justOne) \u529f\u80fd \u5220\u9664\u6587\u6863 \u53c2\u6570 query \u7528\u6cd5\u540c\u67e5\u627e justOne \u5e03\u5c14\u503c \u9ed8\u8ba4\u4e3afalse\u8868\u793a\u5220\u9664\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863\uff0c\u8bbe\u7f6e\u4e3atrue\u5219\u8868\u793a\u53ea\u5220\u9664\u4e00\u6761\u6587\u6863 \u793a\u4f8b \u5220\u9664\u6240\u6709\u4e0d\u5b58\u5728sex\u57df\u7684\u6587\u6863 db.ccc.remove({sex:{$exists: false}}) \u5220\u9664\u4e00\u6761name\u4e3a'\u963f\u5b9d'\u7684\u6587\u6863 db.ccc.remove({name:{$eq:'\u963f\u5b9d'}}, true) \u5220\u9664ccc\u96c6\u5408\u4e2d\u6240\u6709\u6587\u6863 db.ccc.remove({}) \u4fee\u6539\u6587\u6863 \u00b6 mysql \u00b6 update table \u8868\u540d\u3000set \u5b57\u6bb5\uff1d\u503c where .. mongodb \u00b6 db.collection.update(query, update, upsert, multi) update(query, update, upsert, multi) \u529f\u80fd \u4fee\u6539\u6587\u6863 \u53c2\u6570 query \u7b5b\u9009\u6761\u4ef6\u3000\u7528\u6cd5\u540cfind update \u3000\u8981\u4fee\u6539\u6210\u4ec0\u4e48\u5185\u5bb9\uff0c\u901a\u5e38\u914d\u5408\u4fee\u6539\u64cd\u4f5c\u7b26()\u4f7f\u7528 $set \u4fee\u6539\u5668 upsert \u5982\u679c\u662fbool\u503c\uff0c\u9ed8\u8ba4\u662ffalse\uff0c\u5982\u679cquery\u6ca1\u6709\u7b5b\u9009\u5230\u6587\u6863\u5219\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c \u5982\u679c\u8bbe\u7f6e\u4e3atrue,\u3000\u5219\u5982\u679cquery\u6ca1\u6709\u7b5b\u9009\u5230\u6587\u6863\u5219\u6839\u636equery\u548cupdate \u5185\u5bb9\u63d2\u5165\u65b0\u7684\u6587\u6863 multi \u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3afalse,\u3000\u8868\u793a\u6709\u591a\u6761\u7b26\u5408\u6761\u4ef6\u6587\u6863\uff0c\u5219\u4fee\u6539\u7b2c\u4e00\u6761 \u5982\u679c\u8bbe\u7f6e\u4e3atrue,\u3000\u8868\u793a\u5219\u4fee\u6539\u6240\u6709\u7b26\u5408\u6761\u4ef6\u6587\u6863 \u793a\u4f8b \u5c06'\u963f\u84c9'\u7684sex\u6539\u6210'\u5973' db.class.update({name:'\u963f\u84c9'}, {$set:{sex:'\u5973'}}) \u6ca1\u6709\u5c0f\u9648\u5219\u63d2\u5165\u4e00\u6761\u6587\u6863 db.class.update({name:'\u5c0f\u9648'}, {$set:{sex:'\u7537'}}, true) \u5c06\uff3b\u6240\u6709\uff3d\u5973\u6027\u7684\u5e74\u9f84\u6539\u4e3a18 db.class.update({sex:'\u5973'}, {$set:{age:18}}, true, true) \u4fee\u6539\u64cd\u4f5c\u7b26(\u4fee\u6539\u5668) \u00b6 $set \u4fee\u6539\u4e00\u4e2a\u57df\u7684\u503c \u5f53\u6587\u6863\u4e2d\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u589e\u52a0\u4e00\u4e2a\u57df $unset \u5220\u9664\u4e00\u4e2a\u57df $rename \u5c06\u6027\u522b\u6539\u6210gender db.class.update({},{$rename:{sex:'gender'}},false,true) $setOnInsert \u5982\u679c\u4f7f\u7528update\u63d2\u5165\u4e86\u6587\u6863\uff0c\u5219\u5c06\u4fee\u6539\u5668\u5185\u5bb9\u4f5c\u4e3a\u63d2\u5165\u6587\u6863\u7684\u4e00\u90e8\u5206 db.class.update({name:'Jame'}, {$set:{age:18}, $setOnInsert:{gender:'\u7537'}}, true) $inc \u52a0\u6cd5\u4fee\u6539\u5668 \u5c06\u6240\u6709\u5e74\u9f84\u5c0f\u4e8e17\u7684\u4eba\u7684\u5e74\u9f84\u52a01 db.class.update({age:{$lt:17}},{$inc:{age:1}}, false, true) $mul \u4e58\u6cd5\u4fee\u6539\u5668 \u5c06\u6240\u6709\u5e74\u9f84\u4e58\u4ee5\u4e24\u500d db.class.update({},{$mul:{age:2}},false,true) $min \u5982\u679c\u7b5b\u9009\u6587\u6863\u7684\u6307\u5b9a\u57df\u503c\u5c0f\u4e8emin\u503c\u5219\u4e0d\u4fee\u6539\uff0c\u5927\u4e8emin\u503c\u5219\u4fee\u6539\u4e3amin\u503c \u6240\u6709\u4eba\u7684\u5982\u679c\u5e74\u9f84\u5927\u4e8e10\u5219\u4fee\u6539\u4e3a10 db.class.update({},{$min:{age:10}}, false,true) $max \u5982\u679c\u7b5b\u9009\u6587\u6863\u7684\u6307\u5b9a\u57df\u503c\u5927\u4e8emax\u503c\u5219\u4e0d\u4fee\u6539\uff0c\u5c0f\u4e8emax\u503c\u5219\u4fee\u6539\u4e3amax\u503c \u6240\u6709\u4eba\u7684\u5982\u679c\u5e74\u9f84\u5c0f\u4e8e15\u5219\u4fee\u6539\u4e3a15 db.class.update({},{$max:{age:15}}, false,true) \u6570\u7ec4\u4fee\u6539\u5668 $push \u5411\u6570\u7ec4\u4e2d\u6dfb\u52a0\u4e00\u9879 db.class1.update({name:'\u5c0f\u7ea2'},{$push:{score:100}}) $pushAll \u5411\u6570\u7ec4\u4e2d\u6dfb\u52a0\u591a\u9879 db.class1.update({name:'\u5c0f\u4e54'},{$pushAll:{score:[100,99]}}) $pull \u4ece\u6570\u7ec4\u4e2d\u5220\u9664\u4e00\u9879 db.class1.update({name:'\u5c0f\u7ea2'},{$pull:{score:100}}) $pullAll \u5411\u6570\u7ec4\u4e2d\u5220\u9664\u591a\u9879 db.class1.update({name:'\u5c0f\u4e54'},{$pullAll:{score:[100,99]}}) $each \u5bf9\u591a\u4e2a\u503c\u9010\u4e2a\u8fdb\u884c\u64cd\u4f5c \u5206\u522b\u63d2\u516599\uff0c10 db.class1.update({name:'\u5c0f\u4e54'},{$push:{socre:{$each:[99, 10]}}}) $position \u6307\u5b9a\u63d2\u5165\u4f4d\u7f6e db.class1.update({name:'\u5c0f\u660e'},{$push:{score:{$each:[67], $position:1}}}) $sort \u6570\u7ec4\u6392\u5e8f \u5c06\u542b\u6709score\u7684\u6587\u6863score\u6570\u7ec4\u6392\u5e8f db.class1.update({},{$push:{score:{$each:[],$sort:1}}}, false, true) $pop \u5f39\u51fa\u4e00\u9879 1\u8868\u793a\u5f39\u51fa\u6700\u540e\u4e00\u9879\uff0c-1\u8868\u793a\u5f39\u51fa\u7b2c\u4e00\u9879 \u5f39\u51fa\u5c0f\u4e54\u7684\u6700\u540e\u4e00\u9879 db.class1.update({name:'\u5c0f\u4e54'},{$pop:{score:1}}) $addToSet \u5411\u6570\u7ec4\u4e2d\u6dfb\u52a0\u4e00\u9879\uff0c\u4f46\u662f\u4e0d\u80fd\u6dfb\u52a0\u91cd\u590d\u7684\u5185\u5bb9 \u7ed9\u5c0f\u521a\u6dfb\u52a0\u4e00\u9879,\u5982\u679c\u6570\u7ec4\u4e2d\u670988\u5219\u4e0d\u6dfb\u52a0 db.class1.update({name:'\u5c0f\u521a'}, {$addToSet:{score:88}}) \u00b7\u00b7\u00b7 \u7ec3\u4e60 1. \u5c06\u5c0f\u7ea2\u5e74\u9f84\u6539\u4e3a12\u5c81,\u5174\u8da3\u7231\u597d\u53d8\u4e3a\u8df3\u821e\u753b\u753b db.exe.update({'name': '\u5c0f\u7ea2'}, {$set:{'hobby': ['\u8df3\u821e', '\u753b\u753b']}}) 2. \u8ffd\u52a0\u5c0f\u660e\u7231\u597d\u5531\u6b4c db.exe.update({'name':'\u5c0f\u660e'},{$push:{'hobby':'\u5531\u6b4c'}}) 3. \u8ffd\u52a0\u5c0f\u738b\u5174\u8da3\u7231\u597d\u5439\u725b,\u6253\u7bee\u7403 db.exe.update({'name':'\u5c0f\u738b'}, {$pushAll:{'hobby':['\u5439\u725b', '\u6253\u7bee\u7403']}}) 4. \u5c0f\u674e\u5174\u8da3\u591a\u4e86\u8dd1\u6b65\u548c\u5531\u6b4c,\u4f46\u662f\u8981\u786e\u4fdd\u548c\u4ee5\u524d\u4e0d\u91cd\u590d #db.exe.update({'name':'\u5c0f\u674e'}, {$addToSet:{$each:['\u5531\u6b4c', '\u8df3\u821e']}}) 5. \u5c06\u73ed\u7ea7\u6240\u6709\u7537\u540c\u5b66\u5e74\u9f84\u52a01 db.exe.update({sex:'\u7537'}, {$inc:{age:1}}, false, true) 6. \u5220\u9664\u5c0f\u660e\u7684sex\u5c5e\u6027 db.exe.update({'name':'\u5c0f\u660e'},{$unset:{sex:''}}) 7. \u4fee\u6539\u5c0f\u5218\u7684\u5e74\u9f84\u4e3a15, \u5982\u679c\u4e0d\u5b58\u5728\u8be5\u540c\u5b66\u5219\u6dfb\u52a0,\u540c\u65f6\u5957\u6dfb\u52a0\u5174\u8da3\u7231\u597d\u548c\u6027\u522b\u7537 db.exe.update({'name':'\u5c0f\u5218'},{$set:{age:15},$setOnInsert:{sex:'\u7537', hobby:['\u8df3\u821e']}}) 8. \u5220\u9664\u5c0f\u674e\u5174\u8da3\u4e2d\u7684\u7b2c\u4e00\u9879 db.exe.update({'name':'\u5c0f\u674e'}, {$unset: {'hobby.0':''}}) 9. \u5220\u9664\u5c0f\u7ea2\u7231\u597d\u4e2d\u753b\u753b\u548c\u8df3\u821e db.exe.update({'name':'\u5c0f\u7ea2'}, {$pullAll: {hobby:['\u753b\u753b','\u8df3\u821e']}}) db.exe.insert([ {'name': '\u5c0f\u7ea2', 'age': 18, 'sex': '\u5973', 'hobby': ['\u8df3\u821e']}, {'name': '\u5c0f\u660e', 'age': 17, 'sex': '\u7537', 'hobby': []}, {'name': '\u5c0f\u738b', 'age': 19, 'sex': '\u7537', 'hobby': []}, {'name': '\u5c0f\u674e', 'age': 18, 'sex': '\u7537', 'hobby': ['\u5531\u6b4c']}, {'name': '\u5c0f\u5218', 'age': 16, 'sex': '\u7537', 'hobby': ['\u5531\u6b4c']} ])","title":"4. shell\u6587\u6863"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#_1","text":"\u4e0d\u662f\u4ee5\u5173\u7cfb\u6a21\u578b\u6784\u5efa\u7684\uff0c\u7ed3\u6784\u6bd4\u8f83\u81ea\u7531 Nosql\u4e0d\u4fdd\u969c\u6570\u636e\u7684\u4e00\u81f4\u6027 Nosql\u5f25\u8865\u4e86\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4e00\u4e9b\u4e0d\u8db3\uff0c\u6bd4\u5982\u9ad8\u5e76\u53d1\uff0c\u6d77\u91cf\u6570\u636e\u8bfb\u53d6 Nosql\u8bfb\u5199\u80fd\u529b\u5f3a Nosql\u6280\u672f\u8fd8\u5728\u4e0d\u65ad\u7684\u5feb\u901f\u53d1\u5c55\uff0c\u529f\u80fd\u6ca1\u6709\u5173\u7cfb\u578b\u6570\u636e\u5e93\u6210\u719f\u5f3a\u5927","title":"\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u548c\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u533a\u522b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#_2","text":"","title":"\u67e5\u627e\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#mysql","text":"select \u5b57\u6bb5\u540d\u3000from \u8868\u540d\u3000where \u6761\u4ef6","title":"mysql"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#mongodb","text":"","title":"mongodb"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#find","text":"db.collection.find(query, field) \u529f\u80fd: \u67e5\u627e\u6587\u6863 \u53c2\u6570 query \u67e5\u627e\u6761\u4ef6\uff0c\u76f8\u5f53\u4e0ewhere\u5b50\u53e5 \u4ee5\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u4f20\u9012\u53c2\u6570\uff0c\u5982\u679c\u662f\u7a7a{}\u8868\u793a\u67e5\u627e\u5185\u5bb9 field \u67e5\u627e\u7684\u57df \u4ee5\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u4f20\u9012\u53c2\u6570\uff0c\u7ed9\u51fa\u8981\u67e5\u627e\uff08\u4e0d\u67e5\u627e\u7684\u57df\uff09\uff0c\u4ee5\u57df\u540d\u4e3a\u952e\uff0c\u4ee50\uff0c1\u4e3a\u503c\u8868\u793a\u4e0d\u67e5\u627e\uff0c\u67e5\u627e \u8fd4\u56de\u503c: \u67e5\u627e\u5230\u7684\u6240\u6709\u7684\u6587\u6863 \u5982\u679c\u67d0\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u57df\u8bbe\u7f6e\u4e3a0\u8868\u793a\u8fd9\u4e9b\u57df\u4e0d\u67e5\u627e\uff0c\u5176\u4ed6\u57df\u5747\u67e5\u627e \u5982\u679c\u67d0\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u57df\u8bbe\u7f6e\u4e3a1\u8868\u793a\u8fd9\u4e9b\u57df\u67e5\u627e\uff0c\u5176\u4ed6\u57df\u5747\u4e0d\u67e5\u627e\uff0c id\u9664\u975e\u8bbe\u7f6e\u4e3a0\uff0c\u5219\u5426\u5747\u4f1a\u67e5\u627e \u9664_id\u57df\u5176\u4ed6\u57df\u4e0d\u80fd\u6709\u7684\u8bbe\u7f6e\u4e3a1\u6709\u7684\u8bbe\u7f6e\u4e3a0 \u793a\u4f8b \u67e5\u627e\u7ed3\u679c\u53ea\u6709name\u57df db.class0.find({'sex': '\u7537'}, {_id:0, name:1}) \u67e5\u627e\u6240\u6709\u5185\u5bb9 db.collection.find()\u3000\u3000\uff0d\uff0d\uff0d\uff0d\uff1e\u3000select * from table \u901a\u8fc7find\u67e5\u627e\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e8f\u5217\u53f7\u83b7\u53d6\u5177\u4f53\u67d0\u4e00\u9879 \u83b7\u53d6\u67e5\u627e\u7ed3\u679c\u4e2d\u7684\u7b2c\u4e8c\u9879 db.class.find({},{_id:0, hobby:0})[1]","title":"find()"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#findone","text":"findOne(query, field) \u529f\u80fd: \u67e5\u627e\u7b2c\u4e00\u6761\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863 \u53c2\u6570: \u540cfind \u8fd4\u56de\u503c: \u8fd4\u56de\u67e5\u627e\u5230\u7684\u6587\u6863 \u793a\u4f8b db.class0.findOne({sex: '\u7537'}, {'name': 1, _id:0, age:1})","title":"findOne()"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#query","text":"\u64cd\u4f5c\u7b26 \u4f7f\u7528$\u6ce8\u660e\u7684\u7279\u6b8a\u5b57\u7b26\u4e32\uff0c\u8868\u8fbe\u4e00\u5b9a\u7684\u542b\u4e49\uff0c\u6bd4\u5982'$lt'\u8868\u793a\u5c0f\u4e8e \u6bd4\u8f83\u64cd\u4f5c\u7b26\u4f7f\u7528 $eq \u7b49\u4e8e == \u793a\u4f8b\uff1adb.class0.find({age:{$eq:19}}) $ne \u4e0d\u7b49\u4e8e\u3000!= \u793a\u4f8b\uff1adb.class0.find({age:{$ne:18}},{_id:0}) $lt \u5c0f\u4e8e\u3000\u3000< \u793a\u4f8b\uff1adb.class0.find({age:{$lt:19}}) $lte \u5c0f\u4e8e\u7b49\u4e8e <= \u793a\u4f8b\uff1adb.class0.find({age:{$lte:18}},{_id:0}) $gt\u3000\u5927\u4e8e > \u793a\u4f8b\uff1adb.class0.find({age:{$gt:17}}, {_id:0}) $gte \u5927\u4e8e\u7b49\u4e8e >= \u793a\u4f8b: db.class0.find({age:{$gte:17}}, {_id:0}) $in \u5305\u542b \u793a\u4f8b\uff1adb.class0.find({age:{$in:[17,18,19]}}, {_id:0}) $nin \u4e0d\u5305\u542b \u793a\u4f8b\uff1a db.class0.find({age:{$nin:[17,18]}}, {_id:0}) \u7efc\u5408\u4f7f\u7528 \u5e74\u9f84\u5927\u4e8e16\uff0c\u5c0f\u4e8e19\u7684\u4fe1\u606f db.class0.find({age:{$gt:16, $lt:19}}, {_id:0}) \uff0a\u3000\u5728mongodb\u4e2d\u5b57\u7b26\u4e32\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f \uff0a\u3000\u5728mongodb\u4e2d\u6240\u6709\u7684{} []\u3000\u90fd\u53ef\u4ee5\u5199\u591a\u4e2a\u6761\u4ef6\uff0c\u4f46\u6839\u636e\u53c2\u6570\u7684\u4e0d\u540c\u8868\u8fbe\u7684\u610f\u601d\u4e0d\u4e00\u6837 \uff0a\u3000\u4f7f\u7528ne\u67e5\u627e\u4e5f\u4f1a\u627e\u5230\u8be5\u57df\u4e0d\u5b58\u5728\u7684\u6587\u6863 \u903b\u8f91\u64cd\u4f5c\u7b26 $and 1. \u5728query\u4e2d\u5982\u679c\u5199\u591a\u4e2a\u6761\u4ef6\u9ed8\u8ba4\u5373\u4e3aand\u5173\u7cfb 2.\u3000\u903b\u8f91\u4e0e $and db.class0.find({$and:[{age:{$gt:14}}, {sex:'\u7537'}]}) $or 1. \u5e74\u9f84\u5c0f\u4e8e16\u3000\u6216\u3000\u5e74\u9f84\u5927\u4e8e18 db.class0.find({$or:[{age:{$lt:16}}, {age:{$gt:18}}]}) $not db.class0.find({sex:{$not:{$eq:'m'}}}) db.class0.find({age:{$not:{$gt:14}}}, {_id:0}) $nor \u65e2\u4e0d\u662f\u4e5f\u4e0d\u662f \u65e2\u4e0d\u662f18\u5c81\uff0c\u4e5f\u4e0d\u662f\u7537\u7684 \u3000 db.class0.find({$nor:[{age:18}, {sex:'\u7537'}]}) \u903b\u8f91\u6761\u4ef6\u6df7\u5408 \u5e74\u9f84\u5927\u4e8e17\u5c81\u5e76\u4e14\u4e3a\u7537\u6027\u6216\u8005\u59d3\u540d\u53ebAbby db.class0.find({$or:[{age:{$gt:17}, sex:'\u7537'}, {name: 'Abby'}]}) \u5e74\u9f84\u4e0d\u5927\u4e8e18\u3000\u6216\u8005\u4e3a\u5973\u6027\uff0c\u5e76\u4e14\u540d\u5b57\u53ebLucy db.class0.find({$or:[{age:{$lte:18}}, {sex:'\u5973'}]}, {_id:0}) db.class0.find({$or:[{age:{$lte:18}}, {sex:'\u5973'}], name:\"Lucy\"}, {_id:0}) db.class0.find({$and:[{$or:[{age:{$lte:18}}, {sex:'\u5973'}]}, {name:\"Lucy\"}]}, {_id:0})","title":"query\u66f4\u591a\u7684\u7b5b\u9009\u7528\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#array","text":"[1, 2, 3, 4, 5] * \u6570\u7ec4\u662f\u6709\u5e8f\u662f\u6570\u636e\u96c6\u5408 * mongo\u4e2d\u6570\u7ec4\u4e5f\u53ef\u4ee5\u6709\u591a\u79cd\u6570\u636e\u5143\u7d20\u6df7\u5408 \u67e5\u627e\u6570\u7ec4\u4e2d\u5305\u542b\u67d0\u4e00\u6761\u4ef6\u7684\u5143\u7d20 db.class1.find({socre:{$lt:60}}, {_id:0}) $all \u67e5\u627e\u6570\u7ec4\u4e2d\u540c\u65f6\u5305\u542b\u591a\u9879\u7684\u6587\u6863 db.class1.find([score:{$all:[49,67]}]) $size \u901a\u8fc7\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\u67e5\u627e db.ccc.find({score:{$size:2}}, {_id:0}) $slice \u663e\u793a\u6570\u7ec4\u4e2d\u6307\u5b9a\u9879 \u663e\u793a\u4e24\u9879 db.ccc.find({},{_id:0, score:{$slice:2}}) \u663e\u793a\u8df3\u8fc7\u7b2c\u4e00\u4e2a\u663e\u793a\u540e\u9762\u4e24\u4e2a db.ccc.find({},{_id:0, score:{$slice:[1,2]}}) $exists \u67e5\u627e\u67d0\u4e2a\u57df\u662f\u5426\u5b58\u5728\u7b5b\u9009 db.ccc.find({sex:{$exists:false}},{_id:0}) $mod \u4f59\u6570\u67e5\u627e { field: { $mod: [ divisor, remainder ] } } \u627e\u51fa\u5e74\u9f84\u4e3a\u5355\u6570\u7684\u6587\u6863 db.ccc.find({age:{$mod:[2,1]}}, {_id:0}) $type \u627e\u51fa\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u7684\u6587\u6863 \u627e\u51faname\u57df\u503c\u7c7b\u578b\u4e3a2\u7684\u6587\u6863 db.ccc.find({name:{$type:2}},{_id:0})","title":"Array"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#_3","text":"db.collection.distinct(field) \u529f\u80fd \u67e5\u770b\u67d0\u4e2a\u57df\u7684\u503c\u8303\u56f4 \u793a\u4f8b db.ccc.distinct('name') pretty() \u529f\u80fd \u683c\u5f0f\u5316\u663e\u793a\u67e5\u8be2\u7ed3\u679c \u793a\u4f8b db.ccc.find().pretty() limit(n) \u529f\u80fd \u663e\u793a\u524dn\u6761\u7ed3\u679c \u793a\u4f8b db.ccc.find().limit(2) skip(n) \u529f\u80fd \u8df3\u8fc7\u524dn\u6761\u663e\u793a\uff0c\u663e\u793a\u540e\u9762\u7684\u67e5\u8be2\u7ed3\u679c \u793a\u4f8b db.ccc.find({},{_id:0}).skip(2) count() \u529f\u80fd\uff1a \u7edf\u8ba1\u67e5\u8be2\u7ed3\u679c\u6570\u91cf \u7edf\u8ba1\u6027\u522b\u4e3aw\u7684\u6587\u6863\u4e2a\u6570 db.ccc.find({sex:'w'}, {_id:0}).count() sort({field:1/-1}) \u529f\u80fd \u5bf9\u67e5\u627e\u7ed3\u679c\u6392\u5e8f \u53c2\u6570 \u4ee5\u952e\u503c\u5bf9\u8868\u793a\u6309\u7167\u54ea\u4e2afield\u6392\u5e8f 1 \u8868\u793a\u5347\u5e8f -1 \u8868\u793a\u964d\u5e8f \u793a\u4f8b \u6309\u7167\u5e74\u9f84\u5347\u5e8f\u6392\u5e8f db.ccc.find({},{_id:0}).sort({age:1}) \u590d\u5408\u6392\u5e8f # \u6309\u7167\u5e74\u9f84\u5347\u5e8f\u6392\u5e8f\uff0c\u5e74\u9f84\u76f8\u540c\u65f6\u6309\u7167\u5206\u6570\u5347\u5e8f\u6392\u5e8f db.ccc.find({},{_id:0}).sort({age:1, score: 1}) \u7ec3\u4e60 \u521b\u5efa\u6570\u636e\u540d\u79f0 grade \u521b\u5efa\u96c6\u5408\u3000class \u96c6\u5408\u4e2d\u63d2\u5165\u82e5\u5e72\u6587\u6863\uff0c\u6587\u6863\u683c\u5f0f {name:'zhangsan', age:10, sex:'m', hobby:['a', 'b']} \u5e74\u9f84\u8303\u56f4: 6-15 \u7231\u597d\u9009\u62e9: draw sing dance basketball football pingpong computer \u6bcf\u4e2a\u540c\u5b66\u9009\u62e92-5\u9879 \u67e5\u627e\u7ec3\u4e60 \u67e5\u770b\u73ed\u7ea7\u6240\u6709\u5b66\u751f\u4fe1\u606f db.class.find() \u67e5\u770b\u73ed\u7ea7\u4e2d\u5e74\u9f84\u4e3a8\u5c81\u7684\u5b66\u751f\u4fe1\u606f db.class.find({age:8}, {_id:0}) \u67e5\u770b\u73ed\u7ea7\u4e2d\u5e74\u9f84\u5927\u4e8e10\u5c81\u7684\u5b66\u751f\u4fe1\u606f db.class.find({age:{$gt:10}}, {_id:0}) \u67e5\u770b\u73ed\u7ea7\u4e2d\u5e74\u9f84\u57288-11\u5c81\u4e4b\u95f4\u7684\u5b66\u751f\u4fe1\u606f db.class.find({$and:[{age:{$gte:8}}, {age:{$lte:11}}]},{_id:0, hobby:0}) \u67e5\u770b\u73ed\u7ea7\u4e2d\u5e74\u9f84\u4e3a10\u5c81\u4e14\u4e3a\u7537\u6027\u7684\u5b66\u751f\u4fe1\u606f db.class.find({$and:[{age:10}, {sex:'m'}]},{_id:0,hobby:0}) \u67e5\u770b\u73ed\u7ea7\u4e2d\u5c0f\u4e8e7\u5c81\u6216\u8005\u5927\u4e8e14\u5c81\u7684\u5b66\u751f\u4fe1\u606f db.class.find({$or:[{age:{$lt:7}}, {age:{$gt:14}}]}, {_id:0, hobby:0}) \u67e5\u770b\u73ed\u7ea7\u5e74\u9f84\u4e3a8\u5c81\u6216\u800511\u5c81\u7684\u5b66\u751f\u4fe1\u606f db.class.find({$or:[{age:8}, {age:11}]},{_id:0, hobby:0}) \u627e\u5230\u67092\u9879\u5174\u8da3\u7231\u597d\u7684\u5b66\u751f db.class.find({hobby:{$size:2}},{_id:0}) \u627e\u5230\u5174\u8da3\u4e2d\u6709draw\u7684\u5b66\u751f db.class.find({hobby:'draw'},{_id:0}) \u627e\u5230\u5373\u559c\u6b22\u753b\u753b\u53c8\u559c\u6b22\u8df3\u821e\u7684\u5b66\u751f db.class.find({hobby:'dance', hobby:'draw'},{_id:0}) \u7edf\u8ba1\u5174\u8da3\u6709\uff14\u9879\u7684\u5b66\u751f\u4eba\u6570 db.class.find({hobby:{$size:4}},{_id:0}).count() \u627e\u51fa\u672c\u73ed\u5e74\u9f84\u7b2c\u4e8c\u5927\u7684\u5b66\u751f db.class.find({},{_id:0}).sort({age:-1}).skip(1).limit(1) \u67e5\u770b\u672c\u73ed\u5b66\u751f\u5174\u8da3\u7231\u597d\u6db5\u76d6\u54ea\u4e9b\u65b9\u9762 db.class.distinct('hobby') \u627e\u5230\u5e74\u9f84\u6700\u5927\u7684\u4e09\u4e2a\u5b66\u751f db.class.find({},{_id:0}).sort({age:-1}).limit(3) \u5220\u9664\u6240\u6709\u5e74\u9f84\u5927\u4e8e16\u6216\u8005\u5c0f\u4e8e7\u5c81\u7684\u5b66\u751f\u9664\u975e\u4ed6\u7684\u7231\u597d\u6709\u4e09\u9879\u4ee5\u4e0a db.class.find({$and:[{$or:[{age:{$gt:16}}, {age:{$lt:7}}]}, {hobby:{$size:2}}]}, {_id:0}) \u7b54\u6848 \u521b\u5efa\u6570\u636e\u5e93 use grade \u63d2\u5165 db.class.insert([ {name:'zhangsan', age:10, sex:'m', hobby:['draw', 'sing', 'dance']}, {name:'lisi', age:5, sex:'m', hobby:['draw', 'sing', 'dance', 'computer']}, {name:'wangwu', age:15, sex:'m', hobby:['pingpong', 'computer']}, {name:'\u963f\u5b9d', age:8, sex:'m', hobby:['pingpong', 'computer']}, {name:'\u963f\u84c9', age:14, sex:'w', hobby:['pingpong', 'computer', 'basketball']}, {name:'\u963f\u5586', age:10, sex:'m', hobby:['dance', 'computer', 'basketball', 'football']}, {name:'\u767e\u5408', age:18, sex:'w', hobby:['dance', 'computer', 'basketball', 'football']}, ])","title":"\u67e5\u627e\u7ed3\u679c\u7684\u64cd\u4f5c\u51fd\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#_4","text":"","title":"\u5220\u9664\u6587\u6863"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#mysql_1","text":"delete from \u8868\u540d where \u6761\u4ef6 ; \u5220\u9664\u5b57\u6bb5 alter table \u8868\u540d drop \u5b57\u6bb5\u540d ;","title":"mysql"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#mongodb_1","text":"db.collection.remove(query, justOne) \u529f\u80fd \u5220\u9664\u6587\u6863 \u53c2\u6570 query \u7528\u6cd5\u540c\u67e5\u627e justOne \u5e03\u5c14\u503c \u9ed8\u8ba4\u4e3afalse\u8868\u793a\u5220\u9664\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863\uff0c\u8bbe\u7f6e\u4e3atrue\u5219\u8868\u793a\u53ea\u5220\u9664\u4e00\u6761\u6587\u6863 \u793a\u4f8b \u5220\u9664\u6240\u6709\u4e0d\u5b58\u5728sex\u57df\u7684\u6587\u6863 db.ccc.remove({sex:{$exists: false}}) \u5220\u9664\u4e00\u6761name\u4e3a'\u963f\u5b9d'\u7684\u6587\u6863 db.ccc.remove({name:{$eq:'\u963f\u5b9d'}}, true) \u5220\u9664ccc\u96c6\u5408\u4e2d\u6240\u6709\u6587\u6863 db.ccc.remove({})","title":"mongodb"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#_5","text":"","title":"\u4fee\u6539\u6587\u6863"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#mysql_2","text":"update table \u8868\u540d\u3000set \u5b57\u6bb5\uff1d\u503c where ..","title":"mysql"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#mongodb_2","text":"db.collection.update(query, update, upsert, multi) update(query, update, upsert, multi) \u529f\u80fd \u4fee\u6539\u6587\u6863 \u53c2\u6570 query \u7b5b\u9009\u6761\u4ef6\u3000\u7528\u6cd5\u540cfind update \u3000\u8981\u4fee\u6539\u6210\u4ec0\u4e48\u5185\u5bb9\uff0c\u901a\u5e38\u914d\u5408\u4fee\u6539\u64cd\u4f5c\u7b26()\u4f7f\u7528 $set \u4fee\u6539\u5668 upsert \u5982\u679c\u662fbool\u503c\uff0c\u9ed8\u8ba4\u662ffalse\uff0c\u5982\u679cquery\u6ca1\u6709\u7b5b\u9009\u5230\u6587\u6863\u5219\u4e0d\u505a\u4efb\u4f55\u64cd\u4f5c \u5982\u679c\u8bbe\u7f6e\u4e3atrue,\u3000\u5219\u5982\u679cquery\u6ca1\u6709\u7b5b\u9009\u5230\u6587\u6863\u5219\u6839\u636equery\u548cupdate \u5185\u5bb9\u63d2\u5165\u65b0\u7684\u6587\u6863 multi \u5e03\u5c14\u503c\uff0c\u9ed8\u8ba4\u4e3afalse,\u3000\u8868\u793a\u6709\u591a\u6761\u7b26\u5408\u6761\u4ef6\u6587\u6863\uff0c\u5219\u4fee\u6539\u7b2c\u4e00\u6761 \u5982\u679c\u8bbe\u7f6e\u4e3atrue,\u3000\u8868\u793a\u5219\u4fee\u6539\u6240\u6709\u7b26\u5408\u6761\u4ef6\u6587\u6863 \u793a\u4f8b \u5c06'\u963f\u84c9'\u7684sex\u6539\u6210'\u5973' db.class.update({name:'\u963f\u84c9'}, {$set:{sex:'\u5973'}}) \u6ca1\u6709\u5c0f\u9648\u5219\u63d2\u5165\u4e00\u6761\u6587\u6863 db.class.update({name:'\u5c0f\u9648'}, {$set:{sex:'\u7537'}}, true) \u5c06\uff3b\u6240\u6709\uff3d\u5973\u6027\u7684\u5e74\u9f84\u6539\u4e3a18 db.class.update({sex:'\u5973'}, {$set:{age:18}}, true, true)","title":"mongodb"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/shell%E6%96%87%E6%A1%A3/#_6","text":"$set \u4fee\u6539\u4e00\u4e2a\u57df\u7684\u503c \u5f53\u6587\u6863\u4e2d\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u589e\u52a0\u4e00\u4e2a\u57df $unset \u5220\u9664\u4e00\u4e2a\u57df $rename \u5c06\u6027\u522b\u6539\u6210gender db.class.update({},{$rename:{sex:'gender'}},false,true) $setOnInsert \u5982\u679c\u4f7f\u7528update\u63d2\u5165\u4e86\u6587\u6863\uff0c\u5219\u5c06\u4fee\u6539\u5668\u5185\u5bb9\u4f5c\u4e3a\u63d2\u5165\u6587\u6863\u7684\u4e00\u90e8\u5206 db.class.update({name:'Jame'}, {$set:{age:18}, $setOnInsert:{gender:'\u7537'}}, true) $inc \u52a0\u6cd5\u4fee\u6539\u5668 \u5c06\u6240\u6709\u5e74\u9f84\u5c0f\u4e8e17\u7684\u4eba\u7684\u5e74\u9f84\u52a01 db.class.update({age:{$lt:17}},{$inc:{age:1}}, false, true) $mul \u4e58\u6cd5\u4fee\u6539\u5668 \u5c06\u6240\u6709\u5e74\u9f84\u4e58\u4ee5\u4e24\u500d db.class.update({},{$mul:{age:2}},false,true) $min \u5982\u679c\u7b5b\u9009\u6587\u6863\u7684\u6307\u5b9a\u57df\u503c\u5c0f\u4e8emin\u503c\u5219\u4e0d\u4fee\u6539\uff0c\u5927\u4e8emin\u503c\u5219\u4fee\u6539\u4e3amin\u503c \u6240\u6709\u4eba\u7684\u5982\u679c\u5e74\u9f84\u5927\u4e8e10\u5219\u4fee\u6539\u4e3a10 db.class.update({},{$min:{age:10}}, false,true) $max \u5982\u679c\u7b5b\u9009\u6587\u6863\u7684\u6307\u5b9a\u57df\u503c\u5927\u4e8emax\u503c\u5219\u4e0d\u4fee\u6539\uff0c\u5c0f\u4e8emax\u503c\u5219\u4fee\u6539\u4e3amax\u503c \u6240\u6709\u4eba\u7684\u5982\u679c\u5e74\u9f84\u5c0f\u4e8e15\u5219\u4fee\u6539\u4e3a15 db.class.update({},{$max:{age:15}}, false,true) \u6570\u7ec4\u4fee\u6539\u5668 $push \u5411\u6570\u7ec4\u4e2d\u6dfb\u52a0\u4e00\u9879 db.class1.update({name:'\u5c0f\u7ea2'},{$push:{score:100}}) $pushAll \u5411\u6570\u7ec4\u4e2d\u6dfb\u52a0\u591a\u9879 db.class1.update({name:'\u5c0f\u4e54'},{$pushAll:{score:[100,99]}}) $pull \u4ece\u6570\u7ec4\u4e2d\u5220\u9664\u4e00\u9879 db.class1.update({name:'\u5c0f\u7ea2'},{$pull:{score:100}}) $pullAll \u5411\u6570\u7ec4\u4e2d\u5220\u9664\u591a\u9879 db.class1.update({name:'\u5c0f\u4e54'},{$pullAll:{score:[100,99]}}) $each \u5bf9\u591a\u4e2a\u503c\u9010\u4e2a\u8fdb\u884c\u64cd\u4f5c \u5206\u522b\u63d2\u516599\uff0c10 db.class1.update({name:'\u5c0f\u4e54'},{$push:{socre:{$each:[99, 10]}}}) $position \u6307\u5b9a\u63d2\u5165\u4f4d\u7f6e db.class1.update({name:'\u5c0f\u660e'},{$push:{score:{$each:[67], $position:1}}}) $sort \u6570\u7ec4\u6392\u5e8f \u5c06\u542b\u6709score\u7684\u6587\u6863score\u6570\u7ec4\u6392\u5e8f db.class1.update({},{$push:{score:{$each:[],$sort:1}}}, false, true) $pop \u5f39\u51fa\u4e00\u9879 1\u8868\u793a\u5f39\u51fa\u6700\u540e\u4e00\u9879\uff0c-1\u8868\u793a\u5f39\u51fa\u7b2c\u4e00\u9879 \u5f39\u51fa\u5c0f\u4e54\u7684\u6700\u540e\u4e00\u9879 db.class1.update({name:'\u5c0f\u4e54'},{$pop:{score:1}}) $addToSet \u5411\u6570\u7ec4\u4e2d\u6dfb\u52a0\u4e00\u9879\uff0c\u4f46\u662f\u4e0d\u80fd\u6dfb\u52a0\u91cd\u590d\u7684\u5185\u5bb9 \u7ed9\u5c0f\u521a\u6dfb\u52a0\u4e00\u9879,\u5982\u679c\u6570\u7ec4\u4e2d\u670988\u5219\u4e0d\u6dfb\u52a0 db.class1.update({name:'\u5c0f\u521a'}, {$addToSet:{score:88}}) \u00b7\u00b7\u00b7 \u7ec3\u4e60 1. \u5c06\u5c0f\u7ea2\u5e74\u9f84\u6539\u4e3a12\u5c81,\u5174\u8da3\u7231\u597d\u53d8\u4e3a\u8df3\u821e\u753b\u753b db.exe.update({'name': '\u5c0f\u7ea2'}, {$set:{'hobby': ['\u8df3\u821e', '\u753b\u753b']}}) 2. \u8ffd\u52a0\u5c0f\u660e\u7231\u597d\u5531\u6b4c db.exe.update({'name':'\u5c0f\u660e'},{$push:{'hobby':'\u5531\u6b4c'}}) 3. \u8ffd\u52a0\u5c0f\u738b\u5174\u8da3\u7231\u597d\u5439\u725b,\u6253\u7bee\u7403 db.exe.update({'name':'\u5c0f\u738b'}, {$pushAll:{'hobby':['\u5439\u725b', '\u6253\u7bee\u7403']}}) 4. \u5c0f\u674e\u5174\u8da3\u591a\u4e86\u8dd1\u6b65\u548c\u5531\u6b4c,\u4f46\u662f\u8981\u786e\u4fdd\u548c\u4ee5\u524d\u4e0d\u91cd\u590d #db.exe.update({'name':'\u5c0f\u674e'}, {$addToSet:{$each:['\u5531\u6b4c', '\u8df3\u821e']}}) 5. \u5c06\u73ed\u7ea7\u6240\u6709\u7537\u540c\u5b66\u5e74\u9f84\u52a01 db.exe.update({sex:'\u7537'}, {$inc:{age:1}}, false, true) 6. \u5220\u9664\u5c0f\u660e\u7684sex\u5c5e\u6027 db.exe.update({'name':'\u5c0f\u660e'},{$unset:{sex:''}}) 7. \u4fee\u6539\u5c0f\u5218\u7684\u5e74\u9f84\u4e3a15, \u5982\u679c\u4e0d\u5b58\u5728\u8be5\u540c\u5b66\u5219\u6dfb\u52a0,\u540c\u65f6\u5957\u6dfb\u52a0\u5174\u8da3\u7231\u597d\u548c\u6027\u522b\u7537 db.exe.update({'name':'\u5c0f\u5218'},{$set:{age:15},$setOnInsert:{sex:'\u7537', hobby:['\u8df3\u821e']}}) 8. \u5220\u9664\u5c0f\u674e\u5174\u8da3\u4e2d\u7684\u7b2c\u4e00\u9879 db.exe.update({'name':'\u5c0f\u674e'}, {$unset: {'hobby.0':''}}) 9. \u5220\u9664\u5c0f\u7ea2\u7231\u597d\u4e2d\u753b\u753b\u548c\u8df3\u821e db.exe.update({'name':'\u5c0f\u7ea2'}, {$pullAll: {hobby:['\u753b\u753b','\u8df3\u821e']}}) db.exe.insert([ {'name': '\u5c0f\u7ea2', 'age': 18, 'sex': '\u5973', 'hobby': ['\u8df3\u821e']}, {'name': '\u5c0f\u660e', 'age': 17, 'sex': '\u7537', 'hobby': []}, {'name': '\u5c0f\u738b', 'age': 19, 'sex': '\u7537', 'hobby': []}, {'name': '\u5c0f\u674e', 'age': 18, 'sex': '\u7537', 'hobby': ['\u5531\u6b4c']}, {'name': '\u5c0f\u5218', 'age': 16, 'sex': '\u7537', 'hobby': ['\u5531\u6b4c']} ])","title":"\u4fee\u6539\u64cd\u4f5c\u7b26(\u4fee\u6539\u5668)"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","text":"MongoDB\u7684\u5b89\u88c5 \u00b6 \u81ea\u52a8\u5b89\u88c5 sudo apt-get intsall mongodb \u9ed8\u8ba4\u5b89\u88c5\u4f4d\u7f6e /var/lib/mongodb \u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e /etc/mongodb.conf \u547d\u4ee4\u96c6 /usr/bin /usr/local/bin \u624b\u52a8\u5b89\u88c5 \u4e0b\u8f7d\u5b89\u88c5\u5305 https://www.mongodb.com/ \u89e3\u538b\u5b89\u88c5\u5305 /usr/local \u6216 /opt \u5c06\u89e3\u538b\u540e\u7684mongodb\u6587\u4ef6\u5939\u4e2d\u7684bin\u76ee\u5f55\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\u4e2d PATH=$PATH:/opt/mong.../bin export PATH \u5c06\u4ee5\u4e0a\u4e24\u4e2a\u5199\u5165\u542f\u52a8\u811a\u672c\u3000/etc/rc.local \u91cd\u542f MongoDB\u547d\u4ee4 \u00b6 \u8bbe\u7f6e\u6570\u636e\u5e93\u5b58\u50a8\u4f4d\u7f6e mongod --dbpath \u76ee\u5f55 \u793a\u4f8b \u5c06\u8def\u5f84\u8bbe\u7f6e\u4e3adbs mongo --dbpath dbs \u8bbe\u7f6e\u6570\u636e\u5e93\u76d1\u542c\u7aef\u53e3 mongod --port 8080 \uff0a\u3000\u9ed8\u8ba4\u76d1\u542c\u7aef\u53e327017 \u8fdb\u5165\u6570\u636e\u5e93\u4ea4\u4e92\u64cd\u4f5c\u754c\u9762 mongo\u3000shell \u7528\u6765\u64cd\u4f5cmongodb\u6570\u636e\u5e93\u7684\u754c\u9762\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528mongo\u8bed\u53e5\u64cd\u4f5c\u6570\u636e\u5e93\u5185\u5bb9 MongoDB\u4e2d\u7684\u7ec4\u7ec7\u7ed3\u6784 \u00b6 \u952e\u503c\u5bf9\u3000---> \u6587\u6863 ---> \u96c6\u5408 ---> \u6570\u636e\u5e93 MySql \u548c MongoDB \u6982\u5ff5\u5bf9\u6bd4 \u00b6 MySql MongoDB \u542b\u4e49 database database \u6570\u636e\u5e93 table collection \u8868/\u96c6\u5408 column field \u5b57\u6bb5/\u57df row document \u8bb0\u5f55/\u6587\u6863 index index \u7d22\u5f15 \u6570\u636e\u5e93\u7684\u5907\u4efd\u548c\u6062\u590d \u00b6 \u5907\u4efd mongodump -h host -d dbname -o bak \u4f8b\u5982 mongodump -h 127.0.0.1 -d test -o bak \u6062\u590d mongorestore -h dbhost:port -d dbname path \u4f8b\u5982 \u5c06test\u6570\u636e\u5e93\u6062\u590d\u5230\u672c\u673a\u7684res\u6570\u636e\u5e93\u4e2d\uff08\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa\uff09 mongorestore -h 127.0.0.1:27017 -d res bak/test \u6570\u636e\u5e93\u7684\u76d1\u6d4b \u00b6 \u547d\u4ee4: mongostat \u53c2\u6570\u8bf4\u660e insert query update delete\u3000 # \u6bcf\u79d2\u589e\u5220\u6539\u67e5\u7684\u6b21\u6570 flushes # \u6bcf\u79d2\u548c\u78c1\u76d8\u4ea4\u4e92\u6b21\u6570 vsize # \u865a\u62df\u5185\u5b58 res # \u7269\u7406\u5185\u5b58 time # \u65f6\u95f4 \u547d\u4ee4: mongotop \u4f5c\u7528: \u7528\u6765\u76d1\u6d4b\u6570\u636e\u5e93\u8bfb\u5199\u65f6\u957f \u53c2\u6570\u8bf4\u660e ns \u6570\u636e\u8868 total \u603b\u65f6\u95f4 read \u8bfb\u65f6\u95f4 write \u5199\u65f6\u95f4 \u521b\u5efa\u6570\u636e\u5e93 \u00b6 use databaseName \u4f8b\u5982\uff1a\u521b\u5efa\u4e00\u4e2a\u540d\u5b57\u4e3astu\u7684\u6570\u636e\u5e93 use stu use\u3000\u5b9e\u9645\u4e3a\u9009\u62e9\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u5e93\uff0c\u5f53\u6570\u636e\u5e93\u4e0d\u5b58\u5728\u65f6\u5219\u4f1a\u81ea\u52a8\u521b\u5efa use \u540e\u5e76\u4e0d\u4f1a\u7acb\u5373\u521b\u5efa\u51fa\u6570\u636e\u5e93\uff0c\u800c\u662f\u9700\u8981\u7b49\u5230\u63d2\u5165\u6570\u636e\u65f6\u6570\u636e\u5e93\u624d\u4f1a\u521b\u5efa show dbs \u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u5e93 \u7cfb\u7edf\u6570\u636e\u5e93\u8bf4\u660e admin: \u5b58\u50a8\u7528\u6237\u7cfb\u7edf local: \u5b58\u50a8\u672c\u5730\u6570\u636e config: \u5b58\u50a8\u5206\u7247\u4fe1\u606f \u6570\u636e\u5e93\u7684\u547d\u540d\u89c4\u5219 \u4f7f\u7528utf-8\u5b57\u7b26(mongo\u9ed8\u8ba4\u652f\u6301utf-8) \u4e0d\u80fd\u542b\u6709\u7a7a\u683c\u3000. / '\\0' \u5b57\u7b26 \u957f\u5ea6\u4e0d\u8d85\u8fc764\u5b57\u8282 \u4e0d\u80fd\u548c\u7cfb\u7edf\u6570\u636e\u5e93\u91cd\u540d db \u00b6 mongodb\u7684\u5168\u5c40\u91cf, \u4ee3\u8868\u5f53\u524d\u6b63\u5728\u4f7f\u7528\u7684\u6570\u636e\u5e93 \u5982\u679c\u4e0d\u9009\u62e9\u4f7f\u7528\u4efb\u4f55\u6570\u636e\u5e93db\u4ee3\u8868test\uff0c\u76f4\u63a5\u63d2\u5165\u6570\u636e\u5c31\u4f1a\u5efa\u7acbtest\u6570\u636e\u5e93 \u5220\u9664\u6570\u636e\u5e93 \u00b6 db.dropDatabase() \u5220\u9664db\u6240\u4ee3\u8868\u7684\u6570\u636e\u5e93 \u96c6\u5408 \u00b6 \u521b\u5efa\u96c6\u5408 \u00b6 \u65b9\u6cd5\uff11 \u3000db.createCollection(collection_name) \u4f8b\u5982 \u521b\u5efaclass1\u96c6\u5408 db.createCollection(class1) \u65b9\u6cd52 \u5f53\u5411\u4e00\u4e2a\u96c6\u5408\u4e2d\u63d2\u5165\u6570\u636e\u7684\u65f6\u5019\uff0c\u5982\u679c\u96c6\u5408\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa db.collection_name.insert(...) \u96c6\u5408\u547d\u540d\u89c4\u5219 \u5408\u6cd5\u7684utf-8\u5b57\u7b26 \u4e0d\u80fd\u6709\\0 \u4e0d\u80fd\u4ee5system.\u5f00\u5934\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7cfb\u7edf\u4fdd\u7559\u96c6\u5408\u524d\u7f00 \u4e0d\u80fd\u548c\u5173\u952e\u5b57\u91cd\u540d \u96c6\u5408\u521b\u5efa\u539f\u5219 \u00b6 \u96c6\u5408\u4e2d\u7684\u6587\u6863\u8981\u63cf\u8ff0\u540c\u4e00\u7c7b\u4e8b\u7269 \u6570\u636e\u5e93\u4e2d\u7edf\u4e00\u7c7b\u6570\u636e\u5c3d\u91cf\u96c6\u4e2d\u5b58\u653e\u5728\u76f8\u540c\u7684\u96c6\u5408 \u96c6\u5408\u4e2d\u6587\u6863\u5d4c\u5957\u5c42\u6570\u4e0d\u8981\u592a\u591a \u67e5\u770b\u6570\u636e\u5e93\u4e2d\u96c6\u5408 \u00b6 show collections \u5220\u9664\u96c6\u5408 \u00b6 db.collection_name.drop() \u96c6\u5408\u7684\u91cd\u547d\u540d \u00b6 db.collection_name.renameCollection('new_name') \u6587\u6863 \u00b6 mongodb\u4e2d\u6570\u636e\u7684\u7ec4\u7ec7\u5f62\u5f0f ---> \u6587\u6863 mongodb\u6587\u6863\uff1a \u662f\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u7ec4\u6210\u7684\u4e00\u7ec4\u6570\u636e\uff0c\u7c7b\u4f3cpython\u4e2d\u5b57\u5178\u63cf\u8ff0\u6570\u636e\u7684\u65b9\u5f0f \u952e: \u5373\u8868\u793a\u6587\u6863\u7684\u57df\uff0c\u8868\u8fbe\u4e86\u4e00\u4e2a\u952e\u503c\u5bf9\u7684\u542b\u4e49 \u547d\u540d\u89c4\u5219 utf-8\u683c\u5f0f\u5b57\u7b26\u4e32 \u4e0d\u80fd\u4f7f\u7528\\0 \u4e00\u4e2a\u6587\u6863\u4e2d\u952e\u4e0d\u80fd\u91cd\u590d \u503c: \u5373\u6570\u636e\u5e93\u6587\u6863\u5b58\u50a8\u7684\u6570\u636e\uff0e \u6587\u6863\u4e2d\u952e\u503c\u5bf9\u662f\u6709\u5e8f\u7684\uff0c\u6587\u6863\u4e2d\u952e\u503c\u5bf9\u4e25\u683c\u533a\u5206\u5927\u5c0f\u5199 bson ---> json\u3000---> Javascript \u96c6\u5408\u4e2d\u7684\u6587\u6863 \u00b6 \u96c6\u5408\u4e2d\u7684\u6587\u6863\u4e0d\u4e00\u5b9a\u6709\u76f8\u540c\u7684\u57df \u4e2a\u6570\u4e0d\u540c \u57df\u4e0d\u76f8\u540c \u6570\u636e\u7c7b\u578b\u4e0d\u540c \u96c6\u5408\u4e2d\u7684\u6587\u6863\u5404\u81ea\u6bd4\u8f83\u72ec\u7acb\uff0c\u76f8\u4e92\u5e76\u4e0d\u5f71\u54cd \u63d2\u5165\u6587\u6863 \u00b6 db.collection_name.insert() \u529f\u80fd: \u63d2\u5165\u4e00\u4e2a\u6587\u6863 \u53c2\u6570: \u8981\u63d2\u5165\u7684\u6587\u6863 \u4f8b\u5982: \u63d2\u5165\u5355\u4e2a\u6587\u6863 db.collection_name.insert({'name': 'Lucy', 'age':18, 'sex': 'w'}) \u63d2\u5165\u64cd\u4f5c\u4e2d\u952e\u53ef\u4ee5\u4e0d\u52a0\u5f15\u53f7 \u67e5\u770b\u63d2\u5165\u7ed3\u679cdb.collection_name.find() _id\u503c\u53ef\u4ee5\u81ea\u5df1\u63d2\u5165\uff0c\u4f46\u662f\u4e0d\u80fd\u91cd\u590d \u63d2\u5165\u591a\u6761\u6587\u6863 db.collection_name.insert([{}, {}, {}]) 2. \u5176\u4ed6\u63d2\u5165\u65b9\u6cd5 db.collection_name.insertOne({}) \u63d2\u5165\u4e00\u6761\u8bb0\u5f55 db.collection_name.insertMany([{}, {}]) # \u63d2\u5165\u591a\u6761\u8bb0\u5f55 save\u63d2\u5165\u6587\u6863 db.collection_name.save() \u5982\u679c\u6b63\u5e38\u63d2\u5165\u548cinsert \u7528\u6cd5\u76f8\u540c \u5982\u679c\u63d2\u5165\u6570\u636e\u65f6\u662f\u7531_id\u57df\uff0c\u4e14_id\u57df\u5b58\u5728\u65f6\u5219\u4f1a\u4fee\u6539\u539f\u6709\u6587\u6863\uff0c\u5982\u679c\u8be5\u503c\u4e0d\u5b58\u5728\u5219\u6b63\u5e38\u63d2\u5165 \u652f\u6301\u7684\u7c7b\u578b \u00b6 \u7c7b\u578b \u503c \u6574\u578b \u6574\u6570\u3000\uff11\u3000\uff12\u3000\uff13 \u5e03\u5c14\u7c7b\u578b true false \u6d6e\u70b9\u578b \u5c0f\u6570 Array \u6570\u7ec4 Date \u65f6\u95f4\u65e5\u671f Timestamp \u65f6\u95f4\u6233 String \u5b57\u7b26\u4e32 Symbol \u7279\u6b8a\u5b57\u7b26\u4e32 Binary data \u4e8c\u8fdb\u5236\u5b57\u4e32 Null null\u7a7a\u503c Object \u5185\u90e8\u6587\u6863\uff08\u5bf9\u8c61\uff09 ObjectId \u81ea\u52a8\u751f\u6210ID\u6807\u8bb0 regex \u6b63\u5219\u5b57\u4e32 code js\u4ee3\u7801 \"_id\" : ObjectId(\"5ba076bfcb98b3cae2e289db\") _id: \u5f53mongodb\u63d2\u5165\u6587\u6863\u65f6\u5982\u679c\u4e0d\u6307\u5b9a_id\u57df\u5219\u81ea\u52a8\u751f\u6210_id\u57df\uff0e\u503c\u5982\u679c\u4e0d\u81ea\u5df1 \u6307\u5b9a\u5373\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2aObjectId\u503c 5ba076bfcb98b3cae2e289db 24\u4f4d\uff0c\u4f7f\u7528ObjectId\u7ecf\u8fc7\u7b97\u6cd5\u5904\u7406\u4fdd\u8bc1\u5176\u552f\u4e00\u6027 8\u4f4d\u3000\u3000\u6587\u6863\u521b\u5efa\u65f6\u95f4 6\u4f4d \u673a\u5668ID 4\u4f4d\u3000\u3000\u8fdb\u7a0bid 6\u4f4d\u3000\u3000\u8ba1\u6570\u5668 \u83b7\u53d6\u96c6\u5408\u5bf9\u8c61\u65b9\u6cd5 \u00b6 db.collection_name ---> db.getCollection('collection_name')","title":"2. \u57fa\u672c\u6982\u5ff5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#mongodb","text":"\u81ea\u52a8\u5b89\u88c5 sudo apt-get intsall mongodb \u9ed8\u8ba4\u5b89\u88c5\u4f4d\u7f6e /var/lib/mongodb \u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e /etc/mongodb.conf \u547d\u4ee4\u96c6 /usr/bin /usr/local/bin \u624b\u52a8\u5b89\u88c5 \u4e0b\u8f7d\u5b89\u88c5\u5305 https://www.mongodb.com/ \u89e3\u538b\u5b89\u88c5\u5305 /usr/local \u6216 /opt \u5c06\u89e3\u538b\u540e\u7684mongodb\u6587\u4ef6\u5939\u4e2d\u7684bin\u76ee\u5f55\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\u4e2d PATH=$PATH:/opt/mong.../bin export PATH \u5c06\u4ee5\u4e0a\u4e24\u4e2a\u5199\u5165\u542f\u52a8\u811a\u672c\u3000/etc/rc.local \u91cd\u542f","title":"MongoDB\u7684\u5b89\u88c5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#mongodb_1","text":"\u8bbe\u7f6e\u6570\u636e\u5e93\u5b58\u50a8\u4f4d\u7f6e mongod --dbpath \u76ee\u5f55 \u793a\u4f8b \u5c06\u8def\u5f84\u8bbe\u7f6e\u4e3adbs mongo --dbpath dbs \u8bbe\u7f6e\u6570\u636e\u5e93\u76d1\u542c\u7aef\u53e3 mongod --port 8080 \uff0a\u3000\u9ed8\u8ba4\u76d1\u542c\u7aef\u53e327017 \u8fdb\u5165\u6570\u636e\u5e93\u4ea4\u4e92\u64cd\u4f5c\u754c\u9762 mongo\u3000shell \u7528\u6765\u64cd\u4f5cmongodb\u6570\u636e\u5e93\u7684\u754c\u9762\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528mongo\u8bed\u53e5\u64cd\u4f5c\u6570\u636e\u5e93\u5185\u5bb9","title":"MongoDB\u547d\u4ee4"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#mongodb_2","text":"\u952e\u503c\u5bf9\u3000---> \u6587\u6863 ---> \u96c6\u5408 ---> \u6570\u636e\u5e93","title":"MongoDB\u4e2d\u7684\u7ec4\u7ec7\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#mysql-mongodb","text":"MySql MongoDB \u542b\u4e49 database database \u6570\u636e\u5e93 table collection \u8868/\u96c6\u5408 column field \u5b57\u6bb5/\u57df row document \u8bb0\u5f55/\u6587\u6863 index index \u7d22\u5f15","title":"MySql \u548c MongoDB \u6982\u5ff5\u5bf9\u6bd4"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_1","text":"\u5907\u4efd mongodump -h host -d dbname -o bak \u4f8b\u5982 mongodump -h 127.0.0.1 -d test -o bak \u6062\u590d mongorestore -h dbhost:port -d dbname path \u4f8b\u5982 \u5c06test\u6570\u636e\u5e93\u6062\u590d\u5230\u672c\u673a\u7684res\u6570\u636e\u5e93\u4e2d\uff08\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa\uff09 mongorestore -h 127.0.0.1:27017 -d res bak/test","title":"\u6570\u636e\u5e93\u7684\u5907\u4efd\u548c\u6062\u590d"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_2","text":"\u547d\u4ee4: mongostat \u53c2\u6570\u8bf4\u660e insert query update delete\u3000 # \u6bcf\u79d2\u589e\u5220\u6539\u67e5\u7684\u6b21\u6570 flushes # \u6bcf\u79d2\u548c\u78c1\u76d8\u4ea4\u4e92\u6b21\u6570 vsize # \u865a\u62df\u5185\u5b58 res # \u7269\u7406\u5185\u5b58 time # \u65f6\u95f4 \u547d\u4ee4: mongotop \u4f5c\u7528: \u7528\u6765\u76d1\u6d4b\u6570\u636e\u5e93\u8bfb\u5199\u65f6\u957f \u53c2\u6570\u8bf4\u660e ns \u6570\u636e\u8868 total \u603b\u65f6\u95f4 read \u8bfb\u65f6\u95f4 write \u5199\u65f6\u95f4","title":"\u6570\u636e\u5e93\u7684\u76d1\u6d4b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_3","text":"use databaseName \u4f8b\u5982\uff1a\u521b\u5efa\u4e00\u4e2a\u540d\u5b57\u4e3astu\u7684\u6570\u636e\u5e93 use stu use\u3000\u5b9e\u9645\u4e3a\u9009\u62e9\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u5e93\uff0c\u5f53\u6570\u636e\u5e93\u4e0d\u5b58\u5728\u65f6\u5219\u4f1a\u81ea\u52a8\u521b\u5efa use \u540e\u5e76\u4e0d\u4f1a\u7acb\u5373\u521b\u5efa\u51fa\u6570\u636e\u5e93\uff0c\u800c\u662f\u9700\u8981\u7b49\u5230\u63d2\u5165\u6570\u636e\u65f6\u6570\u636e\u5e93\u624d\u4f1a\u521b\u5efa show dbs \u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\u5e93 \u7cfb\u7edf\u6570\u636e\u5e93\u8bf4\u660e admin: \u5b58\u50a8\u7528\u6237\u7cfb\u7edf local: \u5b58\u50a8\u672c\u5730\u6570\u636e config: \u5b58\u50a8\u5206\u7247\u4fe1\u606f \u6570\u636e\u5e93\u7684\u547d\u540d\u89c4\u5219 \u4f7f\u7528utf-8\u5b57\u7b26(mongo\u9ed8\u8ba4\u652f\u6301utf-8) \u4e0d\u80fd\u542b\u6709\u7a7a\u683c\u3000. / '\\0' \u5b57\u7b26 \u957f\u5ea6\u4e0d\u8d85\u8fc764\u5b57\u8282 \u4e0d\u80fd\u548c\u7cfb\u7edf\u6570\u636e\u5e93\u91cd\u540d","title":"\u521b\u5efa\u6570\u636e\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#db","text":"mongodb\u7684\u5168\u5c40\u91cf, \u4ee3\u8868\u5f53\u524d\u6b63\u5728\u4f7f\u7528\u7684\u6570\u636e\u5e93 \u5982\u679c\u4e0d\u9009\u62e9\u4f7f\u7528\u4efb\u4f55\u6570\u636e\u5e93db\u4ee3\u8868test\uff0c\u76f4\u63a5\u63d2\u5165\u6570\u636e\u5c31\u4f1a\u5efa\u7acbtest\u6570\u636e\u5e93","title":"db"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_4","text":"db.dropDatabase() \u5220\u9664db\u6240\u4ee3\u8868\u7684\u6570\u636e\u5e93","title":"\u5220\u9664\u6570\u636e\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_5","text":"","title":"\u96c6\u5408"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_6","text":"\u65b9\u6cd5\uff11 \u3000db.createCollection(collection_name) \u4f8b\u5982 \u521b\u5efaclass1\u96c6\u5408 db.createCollection(class1) \u65b9\u6cd52 \u5f53\u5411\u4e00\u4e2a\u96c6\u5408\u4e2d\u63d2\u5165\u6570\u636e\u7684\u65f6\u5019\uff0c\u5982\u679c\u96c6\u5408\u4e0d\u5b58\u5728\u5219\u81ea\u52a8\u521b\u5efa db.collection_name.insert(...) \u96c6\u5408\u547d\u540d\u89c4\u5219 \u5408\u6cd5\u7684utf-8\u5b57\u7b26 \u4e0d\u80fd\u6709\\0 \u4e0d\u80fd\u4ee5system.\u5f00\u5934\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7cfb\u7edf\u4fdd\u7559\u96c6\u5408\u524d\u7f00 \u4e0d\u80fd\u548c\u5173\u952e\u5b57\u91cd\u540d","title":"\u521b\u5efa\u96c6\u5408"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_7","text":"\u96c6\u5408\u4e2d\u7684\u6587\u6863\u8981\u63cf\u8ff0\u540c\u4e00\u7c7b\u4e8b\u7269 \u6570\u636e\u5e93\u4e2d\u7edf\u4e00\u7c7b\u6570\u636e\u5c3d\u91cf\u96c6\u4e2d\u5b58\u653e\u5728\u76f8\u540c\u7684\u96c6\u5408 \u96c6\u5408\u4e2d\u6587\u6863\u5d4c\u5957\u5c42\u6570\u4e0d\u8981\u592a\u591a","title":"\u96c6\u5408\u521b\u5efa\u539f\u5219"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_8","text":"show collections","title":"\u67e5\u770b\u6570\u636e\u5e93\u4e2d\u96c6\u5408"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_9","text":"db.collection_name.drop()","title":"\u5220\u9664\u96c6\u5408"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_10","text":"db.collection_name.renameCollection('new_name')","title":"\u96c6\u5408\u7684\u91cd\u547d\u540d"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_11","text":"mongodb\u4e2d\u6570\u636e\u7684\u7ec4\u7ec7\u5f62\u5f0f ---> \u6587\u6863 mongodb\u6587\u6863\uff1a \u662f\u4ee5\u952e\u503c\u5bf9\u7684\u5f62\u5f0f\u7ec4\u6210\u7684\u4e00\u7ec4\u6570\u636e\uff0c\u7c7b\u4f3cpython\u4e2d\u5b57\u5178\u63cf\u8ff0\u6570\u636e\u7684\u65b9\u5f0f \u952e: \u5373\u8868\u793a\u6587\u6863\u7684\u57df\uff0c\u8868\u8fbe\u4e86\u4e00\u4e2a\u952e\u503c\u5bf9\u7684\u542b\u4e49 \u547d\u540d\u89c4\u5219 utf-8\u683c\u5f0f\u5b57\u7b26\u4e32 \u4e0d\u80fd\u4f7f\u7528\\0 \u4e00\u4e2a\u6587\u6863\u4e2d\u952e\u4e0d\u80fd\u91cd\u590d \u503c: \u5373\u6570\u636e\u5e93\u6587\u6863\u5b58\u50a8\u7684\u6570\u636e\uff0e \u6587\u6863\u4e2d\u952e\u503c\u5bf9\u662f\u6709\u5e8f\u7684\uff0c\u6587\u6863\u4e2d\u952e\u503c\u5bf9\u4e25\u683c\u533a\u5206\u5927\u5c0f\u5199 bson ---> json\u3000---> Javascript","title":"\u6587\u6863"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_12","text":"\u96c6\u5408\u4e2d\u7684\u6587\u6863\u4e0d\u4e00\u5b9a\u6709\u76f8\u540c\u7684\u57df \u4e2a\u6570\u4e0d\u540c \u57df\u4e0d\u76f8\u540c \u6570\u636e\u7c7b\u578b\u4e0d\u540c \u96c6\u5408\u4e2d\u7684\u6587\u6863\u5404\u81ea\u6bd4\u8f83\u72ec\u7acb\uff0c\u76f8\u4e92\u5e76\u4e0d\u5f71\u54cd","title":"\u96c6\u5408\u4e2d\u7684\u6587\u6863"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_13","text":"db.collection_name.insert() \u529f\u80fd: \u63d2\u5165\u4e00\u4e2a\u6587\u6863 \u53c2\u6570: \u8981\u63d2\u5165\u7684\u6587\u6863 \u4f8b\u5982: \u63d2\u5165\u5355\u4e2a\u6587\u6863 db.collection_name.insert({'name': 'Lucy', 'age':18, 'sex': 'w'}) \u63d2\u5165\u64cd\u4f5c\u4e2d\u952e\u53ef\u4ee5\u4e0d\u52a0\u5f15\u53f7 \u67e5\u770b\u63d2\u5165\u7ed3\u679cdb.collection_name.find() _id\u503c\u53ef\u4ee5\u81ea\u5df1\u63d2\u5165\uff0c\u4f46\u662f\u4e0d\u80fd\u91cd\u590d \u63d2\u5165\u591a\u6761\u6587\u6863 db.collection_name.insert([{}, {}, {}]) 2. \u5176\u4ed6\u63d2\u5165\u65b9\u6cd5 db.collection_name.insertOne({}) \u63d2\u5165\u4e00\u6761\u8bb0\u5f55 db.collection_name.insertMany([{}, {}]) # \u63d2\u5165\u591a\u6761\u8bb0\u5f55 save\u63d2\u5165\u6587\u6863 db.collection_name.save() \u5982\u679c\u6b63\u5e38\u63d2\u5165\u548cinsert \u7528\u6cd5\u76f8\u540c \u5982\u679c\u63d2\u5165\u6570\u636e\u65f6\u662f\u7531_id\u57df\uff0c\u4e14_id\u57df\u5b58\u5728\u65f6\u5219\u4f1a\u4fee\u6539\u539f\u6709\u6587\u6863\uff0c\u5982\u679c\u8be5\u503c\u4e0d\u5b58\u5728\u5219\u6b63\u5e38\u63d2\u5165","title":"\u63d2\u5165\u6587\u6863"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_14","text":"\u7c7b\u578b \u503c \u6574\u578b \u6574\u6570\u3000\uff11\u3000\uff12\u3000\uff13 \u5e03\u5c14\u7c7b\u578b true false \u6d6e\u70b9\u578b \u5c0f\u6570 Array \u6570\u7ec4 Date \u65f6\u95f4\u65e5\u671f Timestamp \u65f6\u95f4\u6233 String \u5b57\u7b26\u4e32 Symbol \u7279\u6b8a\u5b57\u7b26\u4e32 Binary data \u4e8c\u8fdb\u5236\u5b57\u4e32 Null null\u7a7a\u503c Object \u5185\u90e8\u6587\u6863\uff08\u5bf9\u8c61\uff09 ObjectId \u81ea\u52a8\u751f\u6210ID\u6807\u8bb0 regex \u6b63\u5219\u5b57\u4e32 code js\u4ee3\u7801 \"_id\" : ObjectId(\"5ba076bfcb98b3cae2e289db\") _id: \u5f53mongodb\u63d2\u5165\u6587\u6863\u65f6\u5982\u679c\u4e0d\u6307\u5b9a_id\u57df\u5219\u81ea\u52a8\u751f\u6210_id\u57df\uff0e\u503c\u5982\u679c\u4e0d\u81ea\u5df1 \u6307\u5b9a\u5373\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2aObjectId\u503c 5ba076bfcb98b3cae2e289db 24\u4f4d\uff0c\u4f7f\u7528ObjectId\u7ecf\u8fc7\u7b97\u6cd5\u5904\u7406\u4fdd\u8bc1\u5176\u552f\u4e00\u6027 8\u4f4d\u3000\u3000\u6587\u6863\u521b\u5efa\u65f6\u95f4 6\u4f4d \u673a\u5668ID 4\u4f4d\u3000\u3000\u8fdb\u7a0bid 6\u4f4d\u3000\u3000\u8ba1\u6570\u5668","title":"\u652f\u6301\u7684\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_15","text":"db.collection_name ---> db.getCollection('collection_name')","title":"\u83b7\u53d6\u96c6\u5408\u5bf9\u8c61\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%BC%80%E5%90%AF%E4%B9%8B%E5%89%8D/","text":"\u51e0\u4e2a\u6982\u5ff5 \u00b6 \u6570\u636e\uff1a \u80fd\u591f\u8f93\u5165\u5230\u8ba1\u7b97\u673a\u4e2d\u5e76\u88ab\u8bc6\u522b\u5904\u7406\u7684\u4fe1\u606f\u7684\u96c6\u5408 \u6570\u636e\u7ed3\u6784: \u7ec4\u6210\u4e00\u4e2a\u6570\u636e\u96c6\u5408\u7684\u6570\u636e\u4e4b\u95f4\u7684\u5173\u7cfb \u6570\u636e\u5e93 \u6309\u7167\u4e00\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u6570\u636e\u7684\u4ed3\u5e93 \u6570\u636e\u5e93\u662f\u5728\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u7ba1\u7406\u548c\u63a7\u5236\u4e0b\uff0c\u5728\u4e00\u5b9a\u4ecb\u8d28\u4e0a\u7684\u6570\u636e\u96c6\u5408 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf: \u6570\u636e\u5e93\u7ba1\u7406\u8f6f\u4ef6\uff0c\u7528\u4e8e\u5efa\u7acb\u7ef4\u62a4\u64cd\u4f5c\u6570\u636e\u5e93 \u6570\u636e\u5e93\u7cfb\u7edf: \u7531\u6570\u636e\u5e93\u548c\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u7b49\u5f00\u53d1\u5de5\u5177\u7ec4\u6210\u7684\u96c6\u5408 \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u00b6 \u91c7\u7528\u5173\u7cfb\u6a21\u578b(\u4e8c\u7ef4\u8868)\u6765\u7ec4\u7ec7\u6570\u636e\u7ed3\u6784\u7684\u6570\u636e\u5e93 \u4f18\u70b9 \u5bb9\u6613\u7406\u89e3\uff0c\u903b\u8f91\u7c7b\u4f3c\u5e38\u89c1\u7684\u8868\u683c \u4f7f\u7528\u65b9\u4fbf\uff0c\u90fd\u4f7f\u7528sql\u8bed\u53e5\uff0csql\u8bed\u53e5\u975e\u5e38\u6210\u719f \u6570\u636e\u4e00\u81f4\u6027\u9ad8\uff0c\u5197\u4f59\u4f4e\uff0c\u6570\u636e\u5b8c\u6574\u6027\u597d\uff0c\u4fbf\u4e8e\u64cd\u4f5c \u666e\u904d\u6280\u672f\u6210\u719f\uff0c\u529f\u80fd\u5f3a\u5927\uff0c\u652f\u6301\u5f88\u591a\u590d\u6742\u64cd\u4f5c \u7f3a\u70b9 \u6bcf\u6b21\u64cd\u4f5c\u90fd\u8981\u8fdb\u884csql\u8bed\u53e5\u7684\u89e3\u6790\uff0c\u6d88\u8017\u8f83\u5927 \u4e0d\u80fd\u5f88\u597d\u7684\u6ee1\u8db3\u5e76\u53d1\u9700\u6c42\uff0c\u7279\u522b\u662f\u6d77\u91cf\u6570\u636e\u7206\u53d1\uff0c\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u8bfb\u5199\u80fd\u529b\u4f1a\u663e\u7684\u4e0d\u8db3 \u5173\u7cfb\u578b\u6570\u636e\u5e93\u5f80\u5f80\u6bcf\u4e00\u6b65\u90fd\u8981\u8fdb\u884c\u52a0\u9501\u7684\u64cd\u4f5c\uff0c\u4e5f\u9020\u6210\u4e86\u6570\u636e\u5e93\u7684\u8d1f\u62c5 \u6570\u636e\u4e00\u81f4\u6027\u9ad8\uff0c\u6709\u65f6\u4e5f\u4f1a\u4f7f\u6570\u636e\u7684\u5b58\u50a8\u4e0d\u7075\u6d3b \u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93 \u00b6 \uff08NoSql <---> not only sql\uff09 \u4f18\u70b9\uff1a 1. \u9ad8\u5e76\u53d1\uff0c\u8bfb\u5199\u80fd\u529b\u5f3a 2. \u5f31\u5316\u6570\u636e\u7ed3\u6784\u4e00\u81f4\u6027\uff0c\u4f7f\u7528\u66f4\u52a0\u7075\u6d3b\uff0c\u6709\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027 \u7f3a\u70b9: 1. \u901a\u7528\u6027\u5dee\uff0c\u6ca1\u6709sql\u8bed\u53e5\u90a3\u6837\u901a\u7528\u7684\u8bed\u53e5 2. \u64cd\u4f5c\u7075\u6d3b\u5bfc\u81f4\u5bb9\u6613\u51fa\u9519\u548c\u6df7\u4e71 3. \u6ca1\u6709\u5916\u952e\u5173\u8054\u7b49\u590d\u6742\u7684\u64cd\u4f5c 4. \u7248\u672c\u66f4\u65b0\u7279\u522b\u5feb NoSql\u7684\u4f7f\u7528\u60c5\u51b5 \u00b6 \u5bf9\u6570\u636e\u5b58\u50a8\u7075\u6d3b\u6027\u9ad8\uff0c\u4e00\u81f4\u6027\u8981\u6c42\u4f4e \u6570\u636e\u5904\u7406\u6d77\u91cf\u5e76\u53d1\uff0c\u8981\u6c42\u77ac\u95f4\u6548\u7387\u901f\u5ea6\u6bd4\u8f83\u9ad8 \u6570\u636e\u6bd4\u8f83\u5bb9\u6613\u5efa\u7acbNoSql\u6a21\u578b \u7f51\u7ad9\u4e34\u65f6\u7f13\u51b2\u5b58\u50a8\uff0c\u722c\u866b\u5e94\u7528 NoSql\u7684\u5206\u7c7b \u00b6 \u952e\u503c\u578b\u6570\u636e\u5e93 Redis \u6587\u6863\u578b\u6570\u636e\u5e93 MongoDB \u5217\u5b58\u50a8\u6570\u636e\u5e93 HBase \u56fe\u5f62\u6570\u636e\u5e93 MongoDB\u6570\u636e\u5e93 \u00b6 \u6807\u7b7e\uff1a\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3000\u3000\u6587\u6863\u578b\u6570\u636e\u5e93\u3000 \u6700\u50cf\u5173\u7cfb\u578b\u7684\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93 \u7279\u70b9 \u662f\u7531C++\u7f16\u5199\u7684\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf \u652f\u6301\u4e30\u5bcc\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u589e\u5220\u6539\u67e5\u7d22\u5f15\u805a\u5408 \u652f\u6301\u4e30\u5bcc\u7684\u6570\u636e\u7c7b\u578b \u4f7f\u7528\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5f88\u597d\u7684\u6269\u5c55\uff0e\u76f8\u5bf9\u6bd4\u8f83\u6210\u719f \u652f\u6301\u66f4\u591a\u7684\u7f16\u7a0b\u8bed\u8a00\u63a5\u53e3(python php c++ c#) \uff0a\u8981\u6c42 \u5173\u7cfb\u578b\u6570\u636e\u5e93\u548c\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5404\u81ea\u6709\u4ec0\u4e48\u7279\u70b9 MongoDB\u662f\u4e00\u4e2a\u4ec0\u4e48\u6837\u7684\u6570\u636e\u5e93","title":"1. \u5f00\u542f\u4e4b\u524d"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%BC%80%E5%90%AF%E4%B9%8B%E5%89%8D/#_1","text":"\u6570\u636e\uff1a \u80fd\u591f\u8f93\u5165\u5230\u8ba1\u7b97\u673a\u4e2d\u5e76\u88ab\u8bc6\u522b\u5904\u7406\u7684\u4fe1\u606f\u7684\u96c6\u5408 \u6570\u636e\u7ed3\u6784: \u7ec4\u6210\u4e00\u4e2a\u6570\u636e\u96c6\u5408\u7684\u6570\u636e\u4e4b\u95f4\u7684\u5173\u7cfb \u6570\u636e\u5e93 \u6309\u7167\u4e00\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u6570\u636e\u7684\u4ed3\u5e93 \u6570\u636e\u5e93\u662f\u5728\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u7ba1\u7406\u548c\u63a7\u5236\u4e0b\uff0c\u5728\u4e00\u5b9a\u4ecb\u8d28\u4e0a\u7684\u6570\u636e\u96c6\u5408 \u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf: \u6570\u636e\u5e93\u7ba1\u7406\u8f6f\u4ef6\uff0c\u7528\u4e8e\u5efa\u7acb\u7ef4\u62a4\u64cd\u4f5c\u6570\u636e\u5e93 \u6570\u636e\u5e93\u7cfb\u7edf: \u7531\u6570\u636e\u5e93\u548c\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u7b49\u5f00\u53d1\u5de5\u5177\u7ec4\u6210\u7684\u96c6\u5408","title":"\u51e0\u4e2a\u6982\u5ff5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%BC%80%E5%90%AF%E4%B9%8B%E5%89%8D/#_2","text":"\u91c7\u7528\u5173\u7cfb\u6a21\u578b(\u4e8c\u7ef4\u8868)\u6765\u7ec4\u7ec7\u6570\u636e\u7ed3\u6784\u7684\u6570\u636e\u5e93 \u4f18\u70b9 \u5bb9\u6613\u7406\u89e3\uff0c\u903b\u8f91\u7c7b\u4f3c\u5e38\u89c1\u7684\u8868\u683c \u4f7f\u7528\u65b9\u4fbf\uff0c\u90fd\u4f7f\u7528sql\u8bed\u53e5\uff0csql\u8bed\u53e5\u975e\u5e38\u6210\u719f \u6570\u636e\u4e00\u81f4\u6027\u9ad8\uff0c\u5197\u4f59\u4f4e\uff0c\u6570\u636e\u5b8c\u6574\u6027\u597d\uff0c\u4fbf\u4e8e\u64cd\u4f5c \u666e\u904d\u6280\u672f\u6210\u719f\uff0c\u529f\u80fd\u5f3a\u5927\uff0c\u652f\u6301\u5f88\u591a\u590d\u6742\u64cd\u4f5c \u7f3a\u70b9 \u6bcf\u6b21\u64cd\u4f5c\u90fd\u8981\u8fdb\u884csql\u8bed\u53e5\u7684\u89e3\u6790\uff0c\u6d88\u8017\u8f83\u5927 \u4e0d\u80fd\u5f88\u597d\u7684\u6ee1\u8db3\u5e76\u53d1\u9700\u6c42\uff0c\u7279\u522b\u662f\u6d77\u91cf\u6570\u636e\u7206\u53d1\uff0c\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u8bfb\u5199\u80fd\u529b\u4f1a\u663e\u7684\u4e0d\u8db3 \u5173\u7cfb\u578b\u6570\u636e\u5e93\u5f80\u5f80\u6bcf\u4e00\u6b65\u90fd\u8981\u8fdb\u884c\u52a0\u9501\u7684\u64cd\u4f5c\uff0c\u4e5f\u9020\u6210\u4e86\u6570\u636e\u5e93\u7684\u8d1f\u62c5 \u6570\u636e\u4e00\u81f4\u6027\u9ad8\uff0c\u6709\u65f6\u4e5f\u4f1a\u4f7f\u6570\u636e\u7684\u5b58\u50a8\u4e0d\u7075\u6d3b","title":"\u5173\u7cfb\u578b\u6570\u636e\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%BC%80%E5%90%AF%E4%B9%8B%E5%89%8D/#_3","text":"\uff08NoSql <---> not only sql\uff09 \u4f18\u70b9\uff1a 1. \u9ad8\u5e76\u53d1\uff0c\u8bfb\u5199\u80fd\u529b\u5f3a 2. \u5f31\u5316\u6570\u636e\u7ed3\u6784\u4e00\u81f4\u6027\uff0c\u4f7f\u7528\u66f4\u52a0\u7075\u6d3b\uff0c\u6709\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027 \u7f3a\u70b9: 1. \u901a\u7528\u6027\u5dee\uff0c\u6ca1\u6709sql\u8bed\u53e5\u90a3\u6837\u901a\u7528\u7684\u8bed\u53e5 2. \u64cd\u4f5c\u7075\u6d3b\u5bfc\u81f4\u5bb9\u6613\u51fa\u9519\u548c\u6df7\u4e71 3. \u6ca1\u6709\u5916\u952e\u5173\u8054\u7b49\u590d\u6742\u7684\u64cd\u4f5c 4. \u7248\u672c\u66f4\u65b0\u7279\u522b\u5feb","title":"\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%BC%80%E5%90%AF%E4%B9%8B%E5%89%8D/#nosql","text":"\u5bf9\u6570\u636e\u5b58\u50a8\u7075\u6d3b\u6027\u9ad8\uff0c\u4e00\u81f4\u6027\u8981\u6c42\u4f4e \u6570\u636e\u5904\u7406\u6d77\u91cf\u5e76\u53d1\uff0c\u8981\u6c42\u77ac\u95f4\u6548\u7387\u901f\u5ea6\u6bd4\u8f83\u9ad8 \u6570\u636e\u6bd4\u8f83\u5bb9\u6613\u5efa\u7acbNoSql\u6a21\u578b \u7f51\u7ad9\u4e34\u65f6\u7f13\u51b2\u5b58\u50a8\uff0c\u722c\u866b\u5e94\u7528","title":"NoSql\u7684\u4f7f\u7528\u60c5\u51b5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%BC%80%E5%90%AF%E4%B9%8B%E5%89%8D/#nosql_1","text":"\u952e\u503c\u578b\u6570\u636e\u5e93 Redis \u6587\u6863\u578b\u6570\u636e\u5e93 MongoDB \u5217\u5b58\u50a8\u6570\u636e\u5e93 HBase \u56fe\u5f62\u6570\u636e\u5e93","title":"NoSql\u7684\u5206\u7c7b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E5%BC%80%E5%90%AF%E4%B9%8B%E5%89%8D/#mongodb","text":"\u6807\u7b7e\uff1a\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3000\u3000\u6587\u6863\u578b\u6570\u636e\u5e93\u3000 \u6700\u50cf\u5173\u7cfb\u578b\u7684\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93 \u7279\u70b9 \u662f\u7531C++\u7f16\u5199\u7684\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf \u652f\u6301\u4e30\u5bcc\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u589e\u5220\u6539\u67e5\u7d22\u5f15\u805a\u5408 \u652f\u6301\u4e30\u5bcc\u7684\u6570\u636e\u7c7b\u578b \u4f7f\u7528\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5f88\u597d\u7684\u6269\u5c55\uff0e\u76f8\u5bf9\u6bd4\u8f83\u6210\u719f \u652f\u6301\u66f4\u591a\u7684\u7f16\u7a0b\u8bed\u8a00\u63a5\u53e3(python php c++ c#) \uff0a\u8981\u6c42 \u5173\u7cfb\u578b\u6570\u636e\u5e93\u548c\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5404\u81ea\u6709\u4ec0\u4e48\u7279\u70b9 MongoDB\u662f\u4e00\u4e2a\u4ec0\u4e48\u6837\u7684\u6570\u636e\u5e93","title":"MongoDB\u6570\u636e\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","text":"\u652f\u6301\u7684\u7c7b\u578b \u00b6 \u7c7b\u578b \u503c \u6574\u578b \u6574\u6570\u3000\uff11\u3000\uff12\u3000\uff13 \u5e03\u5c14\u7c7b\u578b true false \u6d6e\u70b9\u578b \u5c0f\u6570 Array \u6570\u7ec4 Date \u65f6\u95f4\u65e5\u671f Timestamp \u65f6\u95f4\u6233 String \u5b57\u7b26\u4e32 Symbol \u7279\u6b8a\u5b57\u7b26\u4e32 Binary data \u4e8c\u8fdb\u5236\u5b57\u4e32 Null null\u7a7a\u503c Object \u5185\u90e8\u6587\u6863\uff08\u5bf9\u8c61\uff09 ObjectId \u81ea\u52a8\u751f\u6210ID\u6807\u8bb0 regex \u6b63\u5219\u5b57\u4e32 code js\u4ee3\u7801 \"_id\" : ObjectId(\"5ba076bfcb98b3cae2e289db\") _id: \u5f53mongodb\u63d2\u5165\u6587\u6863\u65f6\u5982\u679c\u4e0d\u6307\u5b9a_id\u57df\u5219\u81ea\u52a8\u751f\u6210_id\u57df\uff0e\u503c\u5982\u679c\u4e0d\u81ea\u5df1 \u6307\u5b9a\u5373\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2aObjectId\u503c 5ba076bfcb98b3cae2e289db 24\u4f4d\uff0c\u4f7f\u7528ObjectId\u7ecf\u8fc7\u7b97\u6cd5\u5904\u7406\u4fdd\u8bc1\u5176\u552f\u4e00\u6027 8\u4f4d\u3000\u3000\u6587\u6863\u521b\u5efa\u65f6\u95f4 6\u4f4d \u673a\u5668ID 4\u4f4d\u3000\u3000\u8fdb\u7a0bid 6\u4f4d\u3000\u3000\u8ba1\u6570\u5668 \u65f6\u95f4\u6570\u636e\u7c7b\u578b \u00b6 mongo\u4e2d\u5b58\u50a8\u65f6\u95f4\u5927\u591a\u4e3aISODate \u5b58\u50a8\u5f53\u524d\u65f6\u95f4\u65b9\u6cd5 \u00b6 new Date() \u81ea\u52a8\u751f\u6210\u5f53\u524d\u65f6\u95f4 db.class2.insert({book:'Python\u5165\u95e8', date:new Date()}) ISODate() \u81ea\u52a8\u751f\u6210\u5f53\u524d\u65f6\u95f4 db.class2.insert({book:'Python\u7cbe\u901a', date: ISODate()}) Date() \u751f\u6210\u5f53\u524d\u65f6\u95f4\uff0c\u5c06\u7cfb\u7edf\u65f6\u95f4\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32 db.class2.insert({book:'Python\u75af\u72c2', date: Date()}) \u6307\u5b9a\u65f6\u95f4\u5b58\u50a8 \u00b6 ISODate() \u529f\u80fd\uff1a\u751f\u6210mongo\u6807\u51c6\u65f6\u95f4\u7c7b\u578b \u53c2\u6570\uff1a\u4e0d\u4f20\u53c2\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4 \u4f20\u53c2\u8868\u793a\u6307\u5b9a\u65f6\u95f4 '2018-01-01 12:12:12' '20180101 12:12:12' '20180101' db.class2.insert({book:'Python\u5d29\u6e83', date: ISODate('2018-01-01 12:12:12')}) \u65f6\u95f4\u6233 \u00b6 valueOf() \u83b7\u53d6\u67d0\u4e2a\u65f6\u95f4\u7684\u65f6\u95f4\u6233 db.class2.insert({book:'Python\u6d85\u78d0', date: ISODate().valueOf()}) Null\u7c7b\u578b \u00b6 \u503cnull \u5982\u679c\u67d0\u4e2a\u57df\u5b58\u5728\u5374\u6ca1\u6709\u503c\u53ef\u4ee5\u8d4b\u503c\u4e3anull db.class2.insert({book:'Python\u6b7b\u53bb\u6d3b\u6765', price:null}) \u53ef\u4ee5\u67e5\u627e\u67d0\u4e2a\u57df\u4e0d\u5b58\u5728\u7684\u60c5\u51b5 db.class2.find({date:null}) Object \u00b6 \u5185\u90e8\u6587\u6863,\u6587\u6863\u5bf9\u8c61\u7c7b\u578b \u6587\u6863\u5185\u90e8\u67d0\u4e2a\u57df\u7684\u503c\u8fd8\u662f\u4e00\u4e2a\u6587\u6863\u6570\u636e, \u5219\u8fd9\u4e2a\u6587\u6863\u5185\u90e8\u5c31\u662f\u6587\u6863\u7c7b\u578b\u6570\u636e db.class3.insert({_id:1, name:'\u9c81\u8fc5', sex:'\u7537', book:{title:'\u72c2\u4eba\u65e5\u8bb0', price:46.8}}) db.class3.insert({_id:2, name:'\u94b1\u949f\u4e66', sex:'\u7537', book:{title:'\u56f4\u57ce', price:46.8}}) db.class3.insert({_id:3, name:'\u8001\u820d', sex:'\u7537', book:{title:'\u9a86\u9a7c\u7965\u5b50', price:46.8}}) \u901a\u5e38\u4f7f\u7528 \u5916\u90e8\u6587\u6863\u57df\u540d.\u5f15\u7528\u5185\u90e8\u6587\u6863\u57df\u540d db.class3.find({'book.title':'\u72c2\u4eba\u65e5\u8bb0'}) db.class3.update({'book.title':'\u56f4\u57ce'}, {$set:{\"book.price\":48.8}}) \u901a\u8fc7\u6570\u7ec4\u4e0b\u6807\u76f4\u63a5\u64cd\u4f5c\u67d0\u4e00\u9879 db.class3.find({\"array.0\":{$gt: 60}})","title":"3. \u6570\u636e\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_1","text":"\u7c7b\u578b \u503c \u6574\u578b \u6574\u6570\u3000\uff11\u3000\uff12\u3000\uff13 \u5e03\u5c14\u7c7b\u578b true false \u6d6e\u70b9\u578b \u5c0f\u6570 Array \u6570\u7ec4 Date \u65f6\u95f4\u65e5\u671f Timestamp \u65f6\u95f4\u6233 String \u5b57\u7b26\u4e32 Symbol \u7279\u6b8a\u5b57\u7b26\u4e32 Binary data \u4e8c\u8fdb\u5236\u5b57\u4e32 Null null\u7a7a\u503c Object \u5185\u90e8\u6587\u6863\uff08\u5bf9\u8c61\uff09 ObjectId \u81ea\u52a8\u751f\u6210ID\u6807\u8bb0 regex \u6b63\u5219\u5b57\u4e32 code js\u4ee3\u7801 \"_id\" : ObjectId(\"5ba076bfcb98b3cae2e289db\") _id: \u5f53mongodb\u63d2\u5165\u6587\u6863\u65f6\u5982\u679c\u4e0d\u6307\u5b9a_id\u57df\u5219\u81ea\u52a8\u751f\u6210_id\u57df\uff0e\u503c\u5982\u679c\u4e0d\u81ea\u5df1 \u6307\u5b9a\u5373\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2aObjectId\u503c 5ba076bfcb98b3cae2e289db 24\u4f4d\uff0c\u4f7f\u7528ObjectId\u7ecf\u8fc7\u7b97\u6cd5\u5904\u7406\u4fdd\u8bc1\u5176\u552f\u4e00\u6027 8\u4f4d\u3000\u3000\u6587\u6863\u521b\u5efa\u65f6\u95f4 6\u4f4d \u673a\u5668ID 4\u4f4d\u3000\u3000\u8fdb\u7a0bid 6\u4f4d\u3000\u3000\u8ba1\u6570\u5668","title":"\u652f\u6301\u7684\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_2","text":"mongo\u4e2d\u5b58\u50a8\u65f6\u95f4\u5927\u591a\u4e3aISODate","title":"\u65f6\u95f4\u6570\u636e\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_3","text":"new Date() \u81ea\u52a8\u751f\u6210\u5f53\u524d\u65f6\u95f4 db.class2.insert({book:'Python\u5165\u95e8', date:new Date()}) ISODate() \u81ea\u52a8\u751f\u6210\u5f53\u524d\u65f6\u95f4 db.class2.insert({book:'Python\u7cbe\u901a', date: ISODate()}) Date() \u751f\u6210\u5f53\u524d\u65f6\u95f4\uff0c\u5c06\u7cfb\u7edf\u65f6\u95f4\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32 db.class2.insert({book:'Python\u75af\u72c2', date: Date()})","title":"\u5b58\u50a8\u5f53\u524d\u65f6\u95f4\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_4","text":"ISODate() \u529f\u80fd\uff1a\u751f\u6210mongo\u6807\u51c6\u65f6\u95f4\u7c7b\u578b \u53c2\u6570\uff1a\u4e0d\u4f20\u53c2\u9ed8\u8ba4\u4e3a\u5f53\u524d\u65f6\u95f4 \u4f20\u53c2\u8868\u793a\u6307\u5b9a\u65f6\u95f4 '2018-01-01 12:12:12' '20180101 12:12:12' '20180101' db.class2.insert({book:'Python\u5d29\u6e83', date: ISODate('2018-01-01 12:12:12')})","title":"\u6307\u5b9a\u65f6\u95f4\u5b58\u50a8"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_5","text":"valueOf() \u83b7\u53d6\u67d0\u4e2a\u65f6\u95f4\u7684\u65f6\u95f4\u6233 db.class2.insert({book:'Python\u6d85\u78d0', date: ISODate().valueOf()})","title":"\u65f6\u95f4\u6233"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#null","text":"\u503cnull \u5982\u679c\u67d0\u4e2a\u57df\u5b58\u5728\u5374\u6ca1\u6709\u503c\u53ef\u4ee5\u8d4b\u503c\u4e3anull db.class2.insert({book:'Python\u6b7b\u53bb\u6d3b\u6765', price:null}) \u53ef\u4ee5\u67e5\u627e\u67d0\u4e2a\u57df\u4e0d\u5b58\u5728\u7684\u60c5\u51b5 db.class2.find({date:null})","title":"Null\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#object","text":"\u5185\u90e8\u6587\u6863,\u6587\u6863\u5bf9\u8c61\u7c7b\u578b \u6587\u6863\u5185\u90e8\u67d0\u4e2a\u57df\u7684\u503c\u8fd8\u662f\u4e00\u4e2a\u6587\u6863\u6570\u636e, \u5219\u8fd9\u4e2a\u6587\u6863\u5185\u90e8\u5c31\u662f\u6587\u6863\u7c7b\u578b\u6570\u636e db.class3.insert({_id:1, name:'\u9c81\u8fc5', sex:'\u7537', book:{title:'\u72c2\u4eba\u65e5\u8bb0', price:46.8}}) db.class3.insert({_id:2, name:'\u94b1\u949f\u4e66', sex:'\u7537', book:{title:'\u56f4\u57ce', price:46.8}}) db.class3.insert({_id:3, name:'\u8001\u820d', sex:'\u7537', book:{title:'\u9a86\u9a7c\u7965\u5b50', price:46.8}}) \u901a\u5e38\u4f7f\u7528 \u5916\u90e8\u6587\u6863\u57df\u540d.\u5f15\u7528\u5185\u90e8\u6587\u6863\u57df\u540d db.class3.find({'book.title':'\u72c2\u4eba\u65e5\u8bb0'}) db.class3.update({'book.title':'\u56f4\u57ce'}, {$set:{\"book.price\":48.8}}) \u901a\u8fc7\u6570\u7ec4\u4e0b\u6807\u76f4\u63a5\u64cd\u4f5c\u67d0\u4e00\u9879 db.class3.find({\"array.0\":{$gt: 60}})","title":"Object"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/","text":"\u7d22\u5f15 \u00b6 \u6307\u5efa\u7acb\u6307\u5b9a\u952e\u503c\u53ca\u6240\u5728\u6587\u6863\u5b58\u50a8\u4f4d\u7f6e\u7684\u5bf9\u7167\u6e05\u5355,\u4f7f\u7528\u7d22\u5f15\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u8fdb\u884c\u5feb\u901f\u67e5\u627e,\u51cf\u5c11\u904d\u5386\u6b21\u6570\u63d0\u9ad8\u67e5\u627e\u6548\u7387 ensureIndex() \u529f\u80fd \u521b\u5efa\u7d22\u5f15 \u53c2\u6570 \u7d22\u5f15\u57df\u548c\u7d22\u5f15\u9009\u9879 1 \u8868\u793a\u6b63\u5e8f\u7d22\u5f15 -1 \u8868\u793a\u9006\u5e8f\u7d22\u5f15 \u6839\u636ename\u57df\u521b\u5efa\u7d22\u5f15 db.exe.ensureIndex({name:1}) \u67e5\u770b\u96c6\u5408\u4e2d\u7d22\u5f15 db.collection.getIndexes() \u81ea\u5b9a\u4e49\u7d22\u5f15\u540d\u79f0 db.collection.ensureIndex({}, {name:'MyIndex'}) \u5bf9age\u57df\u521b\u5efa\u7d22\u5f15\u547d\u540dageIndex db.exe.ensureIndex({age:1},{name:'ageIndex'}) \u5220\u9664\u7d22\u5f15 db.collection.dropIndex('index') \u529f\u80fd \u5220\u9664\u7d22\u5f15 \u53c2\u6570 \u8981\u5220\u9664\u7684\u7d22\u5f15\u540d\u6216\u952e\u503c\u5bf9 \u793a\u4f8b \u5220\u9664age\u7d22\u5f15 db.exe.dropIndex({age:1}) db.exe.dropIndex('name_1') \u5220\u9664\u6240\u6709\u7d22\u5f15 db.collecction.dropIndexes() \u529f\u80fd \u5220\u9664\u6240\u6709\u7d22\u5f15 _id\u662f\u7cfb\u7edf\u81ea\u52a8\u521b\u5efa\u7684\u4e3b\u952e\u7d22\u5f15, \u4e0d\u80fd\u5220\u9664 \u590d\u5408\u7d22\u5f15 \u00b6 \u6839\u636e\u591a\u4e2a\u57df\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15,\u6bd4\u5355\u72ec\u521b\u5efa\u7d22\u5f15\u8868\u66f4\u7701\u7a7a\u95f4 db.exe.ensureIndex({name:1, age:-1}, {name:'name_age'}) \u6570\u7ec4\u7d22\u5f15,\u5b50\u6587\u6863\u7d22\u5f15 \u00b6 \u5982\u679c\u5bf9\u67d0\u4e2a\u57df\u7684\u503c\u4e3a\u6570\u7ec4\u6216\u8005\u4e3a\u5b50\u6587\u6863\u7684\u57df\u521b\u5efa\u7d22\u5f15,\u90a3\u4e48\u901a\u8fc7\u6570\u7ec4\u6216\u8005\u5b50\u6587\u6863\u4e2d\u67d0\u4e00\u9879\u8fdb\u884c\u67e5\u627e\u4e5f\u662f\u7d22\u5f15\u67e5\u627e \u4f8b\u5982: \u5982\u679c\u591ascore\u521b\u5efa\u4e86\u7d22\u5f15,\u90a3\u4e48\u8be5\u67e5\u627e\u5c31\u662f\u7d22\u5f15\u67e5\u627e db.exe.find({'score.1':88}) \u552f\u4e00\u7d22\u5f15 \u00b6 \u521b\u5efa\u7d22\u5f15\u7684\u57df\u8981\u6c42\u503c\u4e0d\u80fd\u91cd\u590d db.exe.ensureIndex({age:1},{unique:true}) \u7a00\u758f\u7d22\u5f15(\u95f4\u9699\u7d22\u5f15) \u00b6 \u53ea\u9488\u5bf9\u6709\u6307\u5b9a\u7d22\u5f15\u57df\u7684\u6587\u6863\u521b\u5efa\u7d22\u5f15,\u6ca1\u6709\u8be5\u57df\u7684\u6587\u6863\u4e0d\u4f1a\u63d2\u5165\u5230\u7d22\u5f15\u8868 \u4f8b\u5982 \u53ea\u5bf9\u6709age\u57df\u7684\u6587\u6863\u521b\u5efa\u7d22\u5f15 db.exe.ensureIndex({age:1},{sparse:true}) \u7d22\u5f15\u7ea6\u675f \u00b6 \u7d22\u5f15\u8868\u9700\u8981\u5360\u7528\u4e00\u5b9a\u7684\u6570\u636e\u5e93\u7269\u7406\u78c1\u76d8\u7a7a\u95f4 \u5f53\u5bf9\u6570\u636e\u8fdb\u884c\u589e\u5220\u6539\u7b49\u5199\u5165\u64cd\u4f5c\u65f6\u7d22\u5f15\u4e5f\u9700\u8981\u66f4\u65b0,\u964d\u4f4e\u4e86\u6570\u636e\u4fee\u6539\u7684\u6548\u7387 \u7efc\u4e0a: 1. \u6570\u636e\u91cf\u8f83\u5c0f\u65f6\u4e0d\u9002\u5408\u521b\u5efa\u7d22\u5f15, \u5f53\u6570\u636e\u5e93\u8fdb\u884c\u9891\u7e41\u7684\u4fee\u6539\u64cd\u4f5c\u800c\u4e0d\u662f\u67e5\u627e\u64cd\u4f5c\u65f6\u4e5f\u4e0d\u9002\u5408\u521b\u5efa\u7d22\u5f15. 2. \u9488\u5bf9\u4e00\u4e2a\u96c6\u5408\u5e76\u4e0d\u662f\u521b\u5efa\u7d22\u5f15\u8d8a\u591a\u8d8a\u597d \u805a\u5408\u64cd\u4f5c \u00b6 \u5bf9\u6587\u6863\u7684\u7b5b\u9009\u7ed3\u679c\u8fdb\u884c\u6574\u7406\u7edf\u8ba1 db.collection.aggregate() \u529f\u80fd \u5b8c\u6210\u96c6\u5408\u64cd\u4f5c \u53c2\u6570 \u805a\u5408\u6761\u4ef6 ---> \u805a\u5408\u64cd\u4f5c\u7b26 \u805a\u5408\u64cd\u4f5c\u7b26 \u00b6 $group \u5206\u7ec4\u805a\u5408 \u9700\u8981\u914d\u5408\u5177\u4f53\u7684\u5206\u7ec4\u7edf\u8ba1\u9009\u9879 $sum \u6c42\u548c \u4f8b\u5982 db.exe.aggregate({$group:{_id:'$sex',num:{$sum:1}}}) db.exe.aggregate({$group:{_id:'$sex',num:{$sum:'$age'}}}) $avg \u6c42\u5e73\u5747\u6570 \u4f8b\u5982 \u6309\u6027\u522b\u5206\u7ec4,\u7edf\u8ba1\u5e73\u5747\u5e74\u9f84 db.exe.aggregate({$group:{_id:'$sex',avg:{$avg:'$age'}}}) $max \u6c42\u6700\u5927\u503c \u4f8b\u5982 \u6309\u6027\u522b\u5206\u7ec4\u6c42\u5e74\u9f84\u7684\u6700\u5927\u503c db.exe.aggregate({$group:{_id:'$sex', max:{$max:'$age'}}}) $min \u6c42\u6700\u5c0f\u503c \u4f8b\u5982 \u6309\u6027\u522b\u5206\u7ec4\u6c42\u5e74\u9f84\u7684\u6700\u5c0f\u503c db.exe.aggregate({$group:{_id:'$sex', min:{$min:'$age'}}}) $project \u4fee\u6539\u6587\u6863\u7684\u663e\u793a\u6548\u679c $project \u503c\u5f97\u7528\u6cd5\u548cfind\u51fd\u6570field\u683c\u5f0f\u4e00\u81f4 db.exe.aggregate({$project:{_id:0,name:1, age:1}}) db.exe.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}}) $match \u6570\u636e\u7b5b\u9009 \u7528\u6cd5\u548cquery\u7684\u7528\u6cd5\u4e00\u81f4 \u7b5b\u9009\u5927\u4e8e18\u5c81\u7684\u6587\u6863 db.exe.aggregate({$match:{age:{$gt:18}}}) $limit \u7b5b\u9009\u524d\u51e0\u6761\u6587\u6863 \u7b5b\u9009\u5230\u524d\u4e09\u6761\u6570\u636e db.exe.aggregate({$limit:3}) $skip \u8df3\u8fc7\u51e0\u6761\u6587\u6863\u663e\u793a db.exe.aggregate({$skip:3}) $sort \u5c06\u6570\u636e\u6392\u5e8f db.exe.aggregate({$sort:{age:1}}) \u805a\u5408\u7ba1\u9053 \u5c06\u4e0a\u4e00\u4e2a\u805a\u5408\u7684\u64cd\u4f5c\u7ed3\u679c\u7ed9\u4e0b\u4e00\u4e2a\u805a\u5408\u7ee7\u7eed\u64cd\u4f5c db.collection.aggregate([{\u805a\u5408},{},{},{}])","title":"5. \u7d22\u5f15\u805a\u5408"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/#_1","text":"\u6307\u5efa\u7acb\u6307\u5b9a\u952e\u503c\u53ca\u6240\u5728\u6587\u6863\u5b58\u50a8\u4f4d\u7f6e\u7684\u5bf9\u7167\u6e05\u5355,\u4f7f\u7528\u7d22\u5f15\u53ef\u4ee5\u65b9\u4fbf\u6211\u4eec\u8fdb\u884c\u5feb\u901f\u67e5\u627e,\u51cf\u5c11\u904d\u5386\u6b21\u6570\u63d0\u9ad8\u67e5\u627e\u6548\u7387 ensureIndex() \u529f\u80fd \u521b\u5efa\u7d22\u5f15 \u53c2\u6570 \u7d22\u5f15\u57df\u548c\u7d22\u5f15\u9009\u9879 1 \u8868\u793a\u6b63\u5e8f\u7d22\u5f15 -1 \u8868\u793a\u9006\u5e8f\u7d22\u5f15 \u6839\u636ename\u57df\u521b\u5efa\u7d22\u5f15 db.exe.ensureIndex({name:1}) \u67e5\u770b\u96c6\u5408\u4e2d\u7d22\u5f15 db.collection.getIndexes() \u81ea\u5b9a\u4e49\u7d22\u5f15\u540d\u79f0 db.collection.ensureIndex({}, {name:'MyIndex'}) \u5bf9age\u57df\u521b\u5efa\u7d22\u5f15\u547d\u540dageIndex db.exe.ensureIndex({age:1},{name:'ageIndex'}) \u5220\u9664\u7d22\u5f15 db.collection.dropIndex('index') \u529f\u80fd \u5220\u9664\u7d22\u5f15 \u53c2\u6570 \u8981\u5220\u9664\u7684\u7d22\u5f15\u540d\u6216\u952e\u503c\u5bf9 \u793a\u4f8b \u5220\u9664age\u7d22\u5f15 db.exe.dropIndex({age:1}) db.exe.dropIndex('name_1') \u5220\u9664\u6240\u6709\u7d22\u5f15 db.collecction.dropIndexes() \u529f\u80fd \u5220\u9664\u6240\u6709\u7d22\u5f15 _id\u662f\u7cfb\u7edf\u81ea\u52a8\u521b\u5efa\u7684\u4e3b\u952e\u7d22\u5f15, \u4e0d\u80fd\u5220\u9664","title":"\u7d22\u5f15"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/#_2","text":"\u6839\u636e\u591a\u4e2a\u57df\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15,\u6bd4\u5355\u72ec\u521b\u5efa\u7d22\u5f15\u8868\u66f4\u7701\u7a7a\u95f4 db.exe.ensureIndex({name:1, age:-1}, {name:'name_age'})","title":"\u590d\u5408\u7d22\u5f15"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/#_3","text":"\u5982\u679c\u5bf9\u67d0\u4e2a\u57df\u7684\u503c\u4e3a\u6570\u7ec4\u6216\u8005\u4e3a\u5b50\u6587\u6863\u7684\u57df\u521b\u5efa\u7d22\u5f15,\u90a3\u4e48\u901a\u8fc7\u6570\u7ec4\u6216\u8005\u5b50\u6587\u6863\u4e2d\u67d0\u4e00\u9879\u8fdb\u884c\u67e5\u627e\u4e5f\u662f\u7d22\u5f15\u67e5\u627e \u4f8b\u5982: \u5982\u679c\u591ascore\u521b\u5efa\u4e86\u7d22\u5f15,\u90a3\u4e48\u8be5\u67e5\u627e\u5c31\u662f\u7d22\u5f15\u67e5\u627e db.exe.find({'score.1':88})","title":"\u6570\u7ec4\u7d22\u5f15,\u5b50\u6587\u6863\u7d22\u5f15"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/#_4","text":"\u521b\u5efa\u7d22\u5f15\u7684\u57df\u8981\u6c42\u503c\u4e0d\u80fd\u91cd\u590d db.exe.ensureIndex({age:1},{unique:true})","title":"\u552f\u4e00\u7d22\u5f15"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/#_5","text":"\u53ea\u9488\u5bf9\u6709\u6307\u5b9a\u7d22\u5f15\u57df\u7684\u6587\u6863\u521b\u5efa\u7d22\u5f15,\u6ca1\u6709\u8be5\u57df\u7684\u6587\u6863\u4e0d\u4f1a\u63d2\u5165\u5230\u7d22\u5f15\u8868 \u4f8b\u5982 \u53ea\u5bf9\u6709age\u57df\u7684\u6587\u6863\u521b\u5efa\u7d22\u5f15 db.exe.ensureIndex({age:1},{sparse:true})","title":"\u7a00\u758f\u7d22\u5f15(\u95f4\u9699\u7d22\u5f15)"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/#_6","text":"\u7d22\u5f15\u8868\u9700\u8981\u5360\u7528\u4e00\u5b9a\u7684\u6570\u636e\u5e93\u7269\u7406\u78c1\u76d8\u7a7a\u95f4 \u5f53\u5bf9\u6570\u636e\u8fdb\u884c\u589e\u5220\u6539\u7b49\u5199\u5165\u64cd\u4f5c\u65f6\u7d22\u5f15\u4e5f\u9700\u8981\u66f4\u65b0,\u964d\u4f4e\u4e86\u6570\u636e\u4fee\u6539\u7684\u6548\u7387 \u7efc\u4e0a: 1. \u6570\u636e\u91cf\u8f83\u5c0f\u65f6\u4e0d\u9002\u5408\u521b\u5efa\u7d22\u5f15, \u5f53\u6570\u636e\u5e93\u8fdb\u884c\u9891\u7e41\u7684\u4fee\u6539\u64cd\u4f5c\u800c\u4e0d\u662f\u67e5\u627e\u64cd\u4f5c\u65f6\u4e5f\u4e0d\u9002\u5408\u521b\u5efa\u7d22\u5f15. 2. \u9488\u5bf9\u4e00\u4e2a\u96c6\u5408\u5e76\u4e0d\u662f\u521b\u5efa\u7d22\u5f15\u8d8a\u591a\u8d8a\u597d","title":"\u7d22\u5f15\u7ea6\u675f"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/#_7","text":"\u5bf9\u6587\u6863\u7684\u7b5b\u9009\u7ed3\u679c\u8fdb\u884c\u6574\u7406\u7edf\u8ba1 db.collection.aggregate() \u529f\u80fd \u5b8c\u6210\u96c6\u5408\u64cd\u4f5c \u53c2\u6570 \u805a\u5408\u6761\u4ef6 ---> \u805a\u5408\u64cd\u4f5c\u7b26","title":"\u805a\u5408\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E7%B4%A2%E5%BC%95%E8%81%9A%E5%90%88/#_8","text":"$group \u5206\u7ec4\u805a\u5408 \u9700\u8981\u914d\u5408\u5177\u4f53\u7684\u5206\u7ec4\u7edf\u8ba1\u9009\u9879 $sum \u6c42\u548c \u4f8b\u5982 db.exe.aggregate({$group:{_id:'$sex',num:{$sum:1}}}) db.exe.aggregate({$group:{_id:'$sex',num:{$sum:'$age'}}}) $avg \u6c42\u5e73\u5747\u6570 \u4f8b\u5982 \u6309\u6027\u522b\u5206\u7ec4,\u7edf\u8ba1\u5e73\u5747\u5e74\u9f84 db.exe.aggregate({$group:{_id:'$sex',avg:{$avg:'$age'}}}) $max \u6c42\u6700\u5927\u503c \u4f8b\u5982 \u6309\u6027\u522b\u5206\u7ec4\u6c42\u5e74\u9f84\u7684\u6700\u5927\u503c db.exe.aggregate({$group:{_id:'$sex', max:{$max:'$age'}}}) $min \u6c42\u6700\u5c0f\u503c \u4f8b\u5982 \u6309\u6027\u522b\u5206\u7ec4\u6c42\u5e74\u9f84\u7684\u6700\u5c0f\u503c db.exe.aggregate({$group:{_id:'$sex', min:{$min:'$age'}}}) $project \u4fee\u6539\u6587\u6863\u7684\u663e\u793a\u6548\u679c $project \u503c\u5f97\u7528\u6cd5\u548cfind\u51fd\u6570field\u683c\u5f0f\u4e00\u81f4 db.exe.aggregate({$project:{_id:0,name:1, age:1}}) db.exe.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}}) $match \u6570\u636e\u7b5b\u9009 \u7528\u6cd5\u548cquery\u7684\u7528\u6cd5\u4e00\u81f4 \u7b5b\u9009\u5927\u4e8e18\u5c81\u7684\u6587\u6863 db.exe.aggregate({$match:{age:{$gt:18}}}) $limit \u7b5b\u9009\u524d\u51e0\u6761\u6587\u6863 \u7b5b\u9009\u5230\u524d\u4e09\u6761\u6570\u636e db.exe.aggregate({$limit:3}) $skip \u8df3\u8fc7\u51e0\u6761\u6587\u6863\u663e\u793a db.exe.aggregate({$skip:3}) $sort \u5c06\u6570\u636e\u6392\u5e8f db.exe.aggregate({$sort:{age:1}}) \u805a\u5408\u7ba1\u9053 \u5c06\u4e0a\u4e00\u4e2a\u805a\u5408\u7684\u64cd\u4f5c\u7ed3\u679c\u7ed9\u4e0b\u4e00\u4e2a\u805a\u5408\u7ee7\u7eed\u64cd\u4f5c db.collection.aggregate([{\u805a\u5408},{},{},{}])","title":"\u805a\u5408\u64cd\u4f5c\u7b26"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/","text":"\u56fa\u5b9a\u96c6\u5408 \u00b6 mongodb\u4e2d\u53ef\u4ee5\u521b\u5efa\u5927\u5c0f\u56fa\u5b9a\u7684\u96c6\u5408 \u7279\u70b9 \u80fd\u591f\u6dd8\u6c70\u65e9\u671f\u6570\u636e \u63d2\u5165\u548c\u987a\u5e8f\u67e5\u627e\u7684\u901f\u5ea6\u66f4\u5feb \u53ef\u4ee5\u63a7\u5236\u96c6\u5408\u7684\u7a7a\u95f4\u5927\u5c0f \u4f7f\u7528 \u4e34\u65f6\u7f13\u51b2 \u65e5\u5fd7\u5904\u7406 \u521b\u5efa\u56fa\u5b9a\u96c6\u5408 db.createCollection(collection, {capped:true,size:10000,max:1000}) \u53c2\u6570 capped: \u8868\u793a\u521b\u5efa\u56fa\u5b9a\u96c6\u5408 size: \u8868\u793a\u6307\u5b9a\u96c6\u5408\u7684\u5927\u5c0f, \u5b57\u8282 max\uff1a \u6307\u5b9a\u96c6\u5408\u5b58\u653e\u6587\u6863\u4e0a\u9650 \u793a\u4f8b \u521b\u5efa\u56fa\u5b9a\u96c6\u5408\uff0csize\u4e3a1000,\u6700\u591a\u5b583\u6761\u6587\u6863 db.createCollection('log', {capped:true,size:1000,max:3}) \u6587\u4ef6\u5b58\u50a8 \u00b6 \u5b58\u50a8\u6587\u4ef6\u8def\u5f84 db.log.insert(filename:'test.mp4', size:247.8, path:'/home/tarena/mongo/text.mp4') \u4f18\u70b9: \u8282\u7701\u6570\u636e\u5e93\u7a7a\u95f4\uff0c\u64cd\u4f5c\u7b80\u5355\u5feb\u6377 \u7f3a\u70b9: \u5f53\u6570\u636e\u5e93\u6216\u8005\u6587\u4ef6\u6216\u8005\u53d1\u751f\u53d8\u5316\u65f6\u9700\u8981\u4fee\u6539\u6570\u636e\u5e93\u5185\u5bb9 \u5b58\u50a8\u6587\u4ef6\u672c\u8eab \u5c06\u6587\u4ef6\u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u5b58\u50a8\u5230\u6570\u636e\u5e93\u4e2d \u4f18\u70b9: \u6570\u636e\u5e93\u5728\u6587\u4ef6\u5c31\u5728\uff0c\u4e0d\u4f1a\u53d7\u5230\u8fc1\u79fb\u7b49\u5f71\u54cd \u7f3a\u70b9: \u5360\u7528\u6570\u636e\u5e93\u7a7a\u95f4\u5927\uff0c\u5b58\u53d6\u6548\u7387\u4f4e \u5b58\u50a8\u5927\u6587\u4ef6 \u00b6 GridFS \u5b58\u50a8\u5927\u6587\u4ef6 \u5927\u6587\u4ef6\uff1a \u5728mongodb\u4e2d\u8ba4\u4e3a\u5927\u4e8e16\u5146\u7684\u6587\u4ef6\u4e3a\u5927\u6587\u4ef6 GridFS \u65b9\u6cd5 Grid \u7f51\u683c \u5728mongodb\u4e2d\u4ee5\u4e24\u4e2a\u96c6\u5408\u914d\u5408\u7684\u65b9\u6cd5\u5b58\u50a8\u6587\u4ef6 fs.files \u5b58\u50a8\u6587\u4ef6\u76f8\u5173\u4fe1\u606f\uff08\u6587\u4ef6\u540d\uff0c\u6587\u4ef6\u7c7b\u578b\uff09 fs.chunks \u5206\u5757\u5b58\u50a8\u6587\u4ef6\u5b9e\u9645\u5185\u5bb9 \u5b58\u50a8\u6587\u4ef6 mongofiles -d dbname put file dbname: \u8981\u5c06\u6587\u4ef6\u5b58\u5165\u7684\u6570\u636e\u5e93\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u81ea\u52a8\u521b\u5efa file: \u8981\u4fdd\u5b58\u7684\u6587\u4ef6 \u4f8b\u5982 \u5c06test.mp4\u5b58\u5165grids\u6570\u636e\u5e93 mongofiles -d grid put test.mp4 \u63d0\u53d6\u6587\u4ef6 mongodb -d dbname get file \u4f8b\u5982 mongofile -d grid get test.mp4 \u4f18\u70b9 \u64cd\u4f5c\u65b9\u4fbf\uff0c\u63d0\u4f9b\u8f83\u597d\u7684\u5b58\u50a8\u547d\u4ee4\uff0c\u4f7f\u7528\u6570\u636e\u5e93\u5b58\u50a8\u6587\u4ef6\u65b9\u4fbf\u79fb\u690d \u7f3a\u70b9 \u8bfb\u5199\u6548\u7387\u4f4e \u6e38\u6807cursor \u00b6 \u901a\u8fc7\u83b7\u53d6\u64cd\u4f5c\u6570\u636e\u5e93\u8fd4\u56de\u7ed3\u679c\uff0c\u5f97\u5230\u8fd4\u56de\u7ed3\u679c\u5bf9\u8c61 \u901a\u8fc7\u6e38\u6807\u53ef\u4ee5\u8fdb\u4e00\u6b65\u83b7\u53d6\u64cd\u4f5c\u7ed3\u679c\u6570\u636e \u5c06\u8fd4\u56de\u7ed3\u679c\u8d4b\u7ed9\u4e00\u4e2ajs\u53d8\u91cf\uff0c\u4f5c\u4e3a\u67e5\u627e\u7ed3\u679c\u6e38\u6807 var cursor = db.connection.find() \u67e5\u770b\u662f\u5426\u6709\u4e0b\u4e00\u4e2a\u7ed3\u679c cursor.hasNext() \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7ed3\u679c cursor.next()","title":"6. \u8865\u5145\u77e5\u8bc6"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_1","text":"mongodb\u4e2d\u53ef\u4ee5\u521b\u5efa\u5927\u5c0f\u56fa\u5b9a\u7684\u96c6\u5408 \u7279\u70b9 \u80fd\u591f\u6dd8\u6c70\u65e9\u671f\u6570\u636e \u63d2\u5165\u548c\u987a\u5e8f\u67e5\u627e\u7684\u901f\u5ea6\u66f4\u5feb \u53ef\u4ee5\u63a7\u5236\u96c6\u5408\u7684\u7a7a\u95f4\u5927\u5c0f \u4f7f\u7528 \u4e34\u65f6\u7f13\u51b2 \u65e5\u5fd7\u5904\u7406 \u521b\u5efa\u56fa\u5b9a\u96c6\u5408 db.createCollection(collection, {capped:true,size:10000,max:1000}) \u53c2\u6570 capped: \u8868\u793a\u521b\u5efa\u56fa\u5b9a\u96c6\u5408 size: \u8868\u793a\u6307\u5b9a\u96c6\u5408\u7684\u5927\u5c0f, \u5b57\u8282 max\uff1a \u6307\u5b9a\u96c6\u5408\u5b58\u653e\u6587\u6863\u4e0a\u9650 \u793a\u4f8b \u521b\u5efa\u56fa\u5b9a\u96c6\u5408\uff0csize\u4e3a1000,\u6700\u591a\u5b583\u6761\u6587\u6863 db.createCollection('log', {capped:true,size:1000,max:3})","title":"\u56fa\u5b9a\u96c6\u5408"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_2","text":"\u5b58\u50a8\u6587\u4ef6\u8def\u5f84 db.log.insert(filename:'test.mp4', size:247.8, path:'/home/tarena/mongo/text.mp4') \u4f18\u70b9: \u8282\u7701\u6570\u636e\u5e93\u7a7a\u95f4\uff0c\u64cd\u4f5c\u7b80\u5355\u5feb\u6377 \u7f3a\u70b9: \u5f53\u6570\u636e\u5e93\u6216\u8005\u6587\u4ef6\u6216\u8005\u53d1\u751f\u53d8\u5316\u65f6\u9700\u8981\u4fee\u6539\u6570\u636e\u5e93\u5185\u5bb9 \u5b58\u50a8\u6587\u4ef6\u672c\u8eab \u5c06\u6587\u4ef6\u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u5b58\u50a8\u5230\u6570\u636e\u5e93\u4e2d \u4f18\u70b9: \u6570\u636e\u5e93\u5728\u6587\u4ef6\u5c31\u5728\uff0c\u4e0d\u4f1a\u53d7\u5230\u8fc1\u79fb\u7b49\u5f71\u54cd \u7f3a\u70b9: \u5360\u7528\u6570\u636e\u5e93\u7a7a\u95f4\u5927\uff0c\u5b58\u53d6\u6548\u7387\u4f4e","title":"\u6587\u4ef6\u5b58\u50a8"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_3","text":"GridFS \u5b58\u50a8\u5927\u6587\u4ef6 \u5927\u6587\u4ef6\uff1a \u5728mongodb\u4e2d\u8ba4\u4e3a\u5927\u4e8e16\u5146\u7684\u6587\u4ef6\u4e3a\u5927\u6587\u4ef6 GridFS \u65b9\u6cd5 Grid \u7f51\u683c \u5728mongodb\u4e2d\u4ee5\u4e24\u4e2a\u96c6\u5408\u914d\u5408\u7684\u65b9\u6cd5\u5b58\u50a8\u6587\u4ef6 fs.files \u5b58\u50a8\u6587\u4ef6\u76f8\u5173\u4fe1\u606f\uff08\u6587\u4ef6\u540d\uff0c\u6587\u4ef6\u7c7b\u578b\uff09 fs.chunks \u5206\u5757\u5b58\u50a8\u6587\u4ef6\u5b9e\u9645\u5185\u5bb9 \u5b58\u50a8\u6587\u4ef6 mongofiles -d dbname put file dbname: \u8981\u5c06\u6587\u4ef6\u5b58\u5165\u7684\u6570\u636e\u5e93\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u81ea\u52a8\u521b\u5efa file: \u8981\u4fdd\u5b58\u7684\u6587\u4ef6 \u4f8b\u5982 \u5c06test.mp4\u5b58\u5165grids\u6570\u636e\u5e93 mongofiles -d grid put test.mp4 \u63d0\u53d6\u6587\u4ef6 mongodb -d dbname get file \u4f8b\u5982 mongofile -d grid get test.mp4 \u4f18\u70b9 \u64cd\u4f5c\u65b9\u4fbf\uff0c\u63d0\u4f9b\u8f83\u597d\u7684\u5b58\u50a8\u547d\u4ee4\uff0c\u4f7f\u7528\u6570\u636e\u5e93\u5b58\u50a8\u6587\u4ef6\u65b9\u4fbf\u79fb\u690d \u7f3a\u70b9 \u8bfb\u5199\u6548\u7387\u4f4e","title":"\u5b58\u50a8\u5927\u6587\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mongodb/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#cursor","text":"\u901a\u8fc7\u83b7\u53d6\u64cd\u4f5c\u6570\u636e\u5e93\u8fd4\u56de\u7ed3\u679c\uff0c\u5f97\u5230\u8fd4\u56de\u7ed3\u679c\u5bf9\u8c61 \u901a\u8fc7\u6e38\u6807\u53ef\u4ee5\u8fdb\u4e00\u6b65\u83b7\u53d6\u64cd\u4f5c\u7ed3\u679c\u6570\u636e \u5c06\u8fd4\u56de\u7ed3\u679c\u8d4b\u7ed9\u4e00\u4e2ajs\u53d8\u91cf\uff0c\u4f5c\u4e3a\u67e5\u627e\u7ed3\u679c\u6e38\u6807 var cursor = db.connection.find() \u67e5\u770b\u662f\u5426\u6709\u4e0b\u4e00\u4e2a\u7ed3\u679c cursor.hasNext() \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7ed3\u679c cursor.next()","title":"\u6e38\u6807cursor"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/python3%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/","text":"\u4e0epython\u4ea4\u4e92 \u00b6 \u6a21\u5757\u540d\uff1apymysql \u5b89\u88c5: 1. \u5728\u7ebf\uff1a sudo pip3 insatll pymysql 2. \u79bb\u7ebf\uff1a pymysql.tar.gz \u89e3\u538b\uff1a setup.py python3 setup.py install pymysql \u4f7f\u7528\u6d41\u7a0b \u00b6 1. \u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61 ( db = pymysql . connect ( ... )) 2. \u521b\u5efa\u6e38\u6807\u5bf9\u8c61cur ( \u64cd\u4f5c\u6570\u636e\u5e93\u7684\u5bf9\u8c61 ) 3. \u6e38\u6807\u5bf9\u8c61\u65b9\u6cd5 \uff1a cur . execute ( 'insert into ...' ) 4. \u63d0\u4ea4\u5230\u6570\u636e\u5e93\u6267\u884c \uff1a db . commit () 5. \u5173\u95ed\u6e38\u6807\u5bf9\u8c61cur . close () 6. \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61db . close () connect\u8fde\u63a5\u5bf9\u8c61 \u00b6 db = pymysql . conncet ( \u53c2\u6570\u5217\u8868 ) 1. host : \u4e3b\u673a\u5730\u5740 2. user \uff1a\u7528\u6237\u540d 3. password : \u5bc6\u7801 4. database : \u6570\u636e\u5e93 5. charset : utf8 6. port : \u7aef\u53e3\uff083306\uff09 db ( \u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61 ) \u7684\u65b9\u6cd5 db . cursor () \u521b\u5efa\u6e38\u6807\u5bf9\u8c61 , \u7528\u6765\u6267\u884csql\u547d\u4ee4 db . commit () \u63d0\u4ea4\u5230\u6570\u636e\u5e93\u6267\u884c db . close () \u65ad\u5f00\u4e0e\u6570\u636e\u5e93\u8fde\u63a5 db . rollback () \u56de\u6eda cursor \u5bf9\u8c61\u7684\u65b9\u6cd5 \u00b6 execute ( sql\u547d\u4ee4 ): # \u6267\u884csql\u547d\u4ee4 fetchone (): # \u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u7684\u7b2c\u4e00\u6761\u6570\u636e fetchmany ( n ): # \u83b7\u53d6n\u6761\u6570\u636e fetchall (): # \u83b7\u53d6\u6240\u6709\u6570\u636e close (): # \u5173\u95ed\u6e38\u6807\u5bf9\u8c61","title":"8. python3\u6570\u636e\u5e93\u7f16\u7a0b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/python3%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/#python","text":"\u6a21\u5757\u540d\uff1apymysql \u5b89\u88c5: 1. \u5728\u7ebf\uff1a sudo pip3 insatll pymysql 2. \u79bb\u7ebf\uff1a pymysql.tar.gz \u89e3\u538b\uff1a setup.py python3 setup.py install","title":"\u4e0epython\u4ea4\u4e92"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/python3%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/#pymysql","text":"1. \u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61 ( db = pymysql . connect ( ... )) 2. \u521b\u5efa\u6e38\u6807\u5bf9\u8c61cur ( \u64cd\u4f5c\u6570\u636e\u5e93\u7684\u5bf9\u8c61 ) 3. \u6e38\u6807\u5bf9\u8c61\u65b9\u6cd5 \uff1a cur . execute ( 'insert into ...' ) 4. \u63d0\u4ea4\u5230\u6570\u636e\u5e93\u6267\u884c \uff1a db . commit () 5. \u5173\u95ed\u6e38\u6807\u5bf9\u8c61cur . close () 6. \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61db . close ()","title":"pymysql \u4f7f\u7528\u6d41\u7a0b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/python3%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/#connect","text":"db = pymysql . conncet ( \u53c2\u6570\u5217\u8868 ) 1. host : \u4e3b\u673a\u5730\u5740 2. user \uff1a\u7528\u6237\u540d 3. password : \u5bc6\u7801 4. database : \u6570\u636e\u5e93 5. charset : utf8 6. port : \u7aef\u53e3\uff083306\uff09 db ( \u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61 ) \u7684\u65b9\u6cd5 db . cursor () \u521b\u5efa\u6e38\u6807\u5bf9\u8c61 , \u7528\u6765\u6267\u884csql\u547d\u4ee4 db . commit () \u63d0\u4ea4\u5230\u6570\u636e\u5e93\u6267\u884c db . close () \u65ad\u5f00\u4e0e\u6570\u636e\u5e93\u8fde\u63a5 db . rollback () \u56de\u6eda","title":"connect\u8fde\u63a5\u5bf9\u8c61"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/python3%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/#cursor","text":"execute ( sql\u547d\u4ee4 ): # \u6267\u884csql\u547d\u4ee4 fetchone (): # \u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u7684\u7b2c\u4e00\u6761\u6570\u636e fetchmany ( n ): # \u83b7\u53d6n\u6761\u6570\u636e fetchall (): # \u83b7\u53d6\u6240\u6709\u6570\u636e close (): # \u5173\u95ed\u6e38\u6807\u5bf9\u8c61","title":"cursor \u5bf9\u8c61\u7684\u65b9\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/","text":"\u6570\u636e\u5bfc\u5165 \u00b6 \u4f5c\u7528: \u628a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u5185\u5bb9\u5bfc\u5165\u5230\u6570\u636e\u5e93\u4e2d \u8bed\u6cd5 load data infile '\u6587\u4ef6\u540d' into table \u8868\u540d fields terminated by '\u5206\u9694\u7b26' lines terminated by ' \\n ' ; load data infile '/var/lib/mysql-files/scoreTable.csv' into table score fields terminated by ',' lines terminated by ' \\n ' ; \u6b65\u9aa4 1. \u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u5bf9\u5e94\u7684\u8868 create table student ( id int primary key auto_increment , name varchar ( 20 ) not null , score float ( 4 , 1 ), class varchar ( 10 )); 2. \u6267\u884c\u6570\u636e\u5bfc\u5165 1. \u67e5\u770b\u641c\u7d22\u8def\u5f84 show variables like 'secure_file_priv' ## /var/lib/mysql-files 2. \u62f7\u8d1d\u6587\u4ef6 sudo cp ~/ scoretable . csv / var / lib / mysql - files \u6570\u636e\u5bfc\u51fa \u00b6 \u628a\u6570\u636e\u5e93\u8868\u7684\u8bb0\u5f55\u5bfc\u51fa\u5230\u7cfb\u7edf\u6587\u4ef6\u91cc \u8bed\u6cd5\u683c\u5f0f select .. from \u8868\u540d into outfile \"\u6587\u4ef6\u540d\" fileds terminated by '\u5206\u9694\u7b26' lines terminated by ' \\n ' \u7ec3\u4e60 \u628aMOSHOU\u5e93\u4e0b\u7684sanguo\u8868\u4e2d , \u82f1\u96c4\u7684\u59d3\u540d / \u653b\u51fb\u503c\u548c\u56fd\u5bb6\u5bfc\u51fa\uff0c sanguo . csv 1. \u67e5\u770b\u641c\u7d22\u8def\u5f84 show variables like '%secure%' ; 2. \u6267\u884c\u5bfc\u51fa\u8bed\u53e5 select name , gongji , country from MOSHOU . sanguo into outfile '/var/lib/mysql-files/sanguo.csv' fields terminated by ',' lines terminated by ' \\n ' ; \u628amysql \u5e93\u4e0b\u7684 user \u8868\u4e2d\u7684user \u548c host \u7684\u503c\u5bfc\u51fa\u5230\u7cfb\u7edf\u6587\u4ef6user . txt select user , host from user into outfile '/var/lib/mysql-files/user.txt' fields terminated by ',' lines terminated by ' \\n ' ; \u8868\u7684\u590d\u5236 \u00b6 \u8bed\u6cd5 create table \u8868\u540d select ... from \u8868\u540d where \u6761\u4ef6 ; \u793a\u4f8b 1. \u590d\u5236MOSHOU . sanguo\u8868 , sanguo2s create table MOSHOU . sanguo2 select * from MOSHOU . sanguo ; 2. \u590d\u5236MOSHOU . sanguo \u4e2d\u7684id , name , country \u7684\u8bb0\u5f55\uff0csanguo3 create table MOSHOU . sanguo3 select id , name , country from MOSHOU . sanguo ; 3. \u590d\u5236MOSHUO . sanguo\u4e2d\u7684name , counrty , \u6bcf\u9875\u663e\u793a2\u6761\u8bb0\u5f55\u540d , \u590d\u5236\u7b2c3\u9875\u7684\u5185\u5bb9 create table MOSHOU . sanguo4 select name , country from MOSHOU . sanguo limit 4 , 2 ; \u590d\u5236\u8868\u7ed3\u6784 \u00b6 create table \u8868\u540d select * from \u8868\u540d where false ; \u6570\u636e\u5907\u4efd \u00b6 mysqldump(\u5728linux\u7ec8\u7aef\u64cd\u4f5c) \u5b8c\u6574\u5907\u4efd \u00b6 \u547d\u4ee4\u683c\u5f0f mysqldump -u\u7528\u6237\u540d -p\u5bc6\u7801 \u6e90\u5e93\u540d > ***.sql \u6e90\u5e93\u540d\u7684\u8868\u793a\u65b9\u5f0f -- all - databases \u5907\u4efd\u6240\u6709\u5e93 \u5e93\u540d \u5907\u4efd1\u4e2a\u5e93 - B \u5e931 \u5e932 \u5e933 \u5907\u4efd\u591a\u4e2a\u5e93 \u5e93\u540d \u88681 \u88682 \u88683 \u5907\u4efd\u591a\u5f20\u8868 \u7ec3\u4e60 1. \u5907\u4efd\u6240\u6709\u5e93\uff0c\u653e\u5230mydata\u76ee\u5f55\u4e0b : AllDATA . sql mysqldump - uroot - p -- all - databases > ALLDATA . sql 2. \u5907\u4efdMOSHOU\u4e0bsheng city xian \u4e09\u5f20\u8868 mysqldump - uroot - p MOSHOU sheng city xian > mscx . sql 3. \u5907\u4efdMOSHOU\u548cEXERCISE\u4e24\u4e2a\u5e93 md . sql mysqldump - uroot - p - B MOSHOU EXERCISE > md . sql \u589e\u91cf\u5907\u4efd \u00b6 \u6570\u636e\u6062\u590d \u00b6 \u547d\u4ee4\u683c\u5f0f\uff08linux \u7ec8\u7aef\uff09 mysql - u\u7528\u6237\u540d - p \u76ee\u6807\u5e93\u540d < *** . sql \u4ece\u6240\u6709\u5e93\u4e2d\u6062\u590d\u67d0\u4e00\u4e2a\u5e93 mysql - u\u7528\u6237\u540d - p -- one - database \u5e93\u540d < *** . sql \u6ce8\u610f 1. \u6062\u590d\u5e93\u65f6\uff0c\u5982\u679c\u6062\u590d\u5230\u539f\u5e93\u5c06\u4f1a\u5c06\u8868\u4e2d\u7684\u6570\u636e\u8986\u76d6\uff0c\u65b0\u589e\u8868 \u4e0d\u4f1a\u5220\u9664 2. \u6062\u590d\u5e93\u65f6\uff0c \u5982\u679c\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u5fc5\u987b\u5148\u521b\u5efa\u7a7a\u5e93","title":"6. \u6570\u636e\u5907\u4efd\u4e0e\u6062\u590d"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_1","text":"\u4f5c\u7528: \u628a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u5185\u5bb9\u5bfc\u5165\u5230\u6570\u636e\u5e93\u4e2d \u8bed\u6cd5 load data infile '\u6587\u4ef6\u540d' into table \u8868\u540d fields terminated by '\u5206\u9694\u7b26' lines terminated by ' \\n ' ; load data infile '/var/lib/mysql-files/scoreTable.csv' into table score fields terminated by ',' lines terminated by ' \\n ' ; \u6b65\u9aa4 1. \u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u5bf9\u5e94\u7684\u8868 create table student ( id int primary key auto_increment , name varchar ( 20 ) not null , score float ( 4 , 1 ), class varchar ( 10 )); 2. \u6267\u884c\u6570\u636e\u5bfc\u5165 1. \u67e5\u770b\u641c\u7d22\u8def\u5f84 show variables like 'secure_file_priv' ## /var/lib/mysql-files 2. \u62f7\u8d1d\u6587\u4ef6 sudo cp ~/ scoretable . csv / var / lib / mysql - files","title":"\u6570\u636e\u5bfc\u5165"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_2","text":"\u628a\u6570\u636e\u5e93\u8868\u7684\u8bb0\u5f55\u5bfc\u51fa\u5230\u7cfb\u7edf\u6587\u4ef6\u91cc \u8bed\u6cd5\u683c\u5f0f select .. from \u8868\u540d into outfile \"\u6587\u4ef6\u540d\" fileds terminated by '\u5206\u9694\u7b26' lines terminated by ' \\n ' \u7ec3\u4e60 \u628aMOSHOU\u5e93\u4e0b\u7684sanguo\u8868\u4e2d , \u82f1\u96c4\u7684\u59d3\u540d / \u653b\u51fb\u503c\u548c\u56fd\u5bb6\u5bfc\u51fa\uff0c sanguo . csv 1. \u67e5\u770b\u641c\u7d22\u8def\u5f84 show variables like '%secure%' ; 2. \u6267\u884c\u5bfc\u51fa\u8bed\u53e5 select name , gongji , country from MOSHOU . sanguo into outfile '/var/lib/mysql-files/sanguo.csv' fields terminated by ',' lines terminated by ' \\n ' ; \u628amysql \u5e93\u4e0b\u7684 user \u8868\u4e2d\u7684user \u548c host \u7684\u503c\u5bfc\u51fa\u5230\u7cfb\u7edf\u6587\u4ef6user . txt select user , host from user into outfile '/var/lib/mysql-files/user.txt' fields terminated by ',' lines terminated by ' \\n ' ;","title":"\u6570\u636e\u5bfc\u51fa"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_3","text":"\u8bed\u6cd5 create table \u8868\u540d select ... from \u8868\u540d where \u6761\u4ef6 ; \u793a\u4f8b 1. \u590d\u5236MOSHOU . sanguo\u8868 , sanguo2s create table MOSHOU . sanguo2 select * from MOSHOU . sanguo ; 2. \u590d\u5236MOSHOU . sanguo \u4e2d\u7684id , name , country \u7684\u8bb0\u5f55\uff0csanguo3 create table MOSHOU . sanguo3 select id , name , country from MOSHOU . sanguo ; 3. \u590d\u5236MOSHUO . sanguo\u4e2d\u7684name , counrty , \u6bcf\u9875\u663e\u793a2\u6761\u8bb0\u5f55\u540d , \u590d\u5236\u7b2c3\u9875\u7684\u5185\u5bb9 create table MOSHOU . sanguo4 select name , country from MOSHOU . sanguo limit 4 , 2 ;","title":"\u8868\u7684\u590d\u5236"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_4","text":"create table \u8868\u540d select * from \u8868\u540d where false ;","title":"\u590d\u5236\u8868\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_5","text":"mysqldump(\u5728linux\u7ec8\u7aef\u64cd\u4f5c)","title":"\u6570\u636e\u5907\u4efd"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_6","text":"\u547d\u4ee4\u683c\u5f0f mysqldump -u\u7528\u6237\u540d -p\u5bc6\u7801 \u6e90\u5e93\u540d > ***.sql \u6e90\u5e93\u540d\u7684\u8868\u793a\u65b9\u5f0f -- all - databases \u5907\u4efd\u6240\u6709\u5e93 \u5e93\u540d \u5907\u4efd1\u4e2a\u5e93 - B \u5e931 \u5e932 \u5e933 \u5907\u4efd\u591a\u4e2a\u5e93 \u5e93\u540d \u88681 \u88682 \u88683 \u5907\u4efd\u591a\u5f20\u8868 \u7ec3\u4e60 1. \u5907\u4efd\u6240\u6709\u5e93\uff0c\u653e\u5230mydata\u76ee\u5f55\u4e0b : AllDATA . sql mysqldump - uroot - p -- all - databases > ALLDATA . sql 2. \u5907\u4efdMOSHOU\u4e0bsheng city xian \u4e09\u5f20\u8868 mysqldump - uroot - p MOSHOU sheng city xian > mscx . sql 3. \u5907\u4efdMOSHOU\u548cEXERCISE\u4e24\u4e2a\u5e93 md . sql mysqldump - uroot - p - B MOSHOU EXERCISE > md . sql","title":"\u5b8c\u6574\u5907\u4efd"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_7","text":"","title":"\u589e\u91cf\u5907\u4efd"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/#_8","text":"\u547d\u4ee4\u683c\u5f0f\uff08linux \u7ec8\u7aef\uff09 mysql - u\u7528\u6237\u540d - p \u76ee\u6807\u5e93\u540d < *** . sql \u4ece\u6240\u6709\u5e93\u4e2d\u6062\u590d\u67d0\u4e00\u4e2a\u5e93 mysql - u\u7528\u6237\u540d - p -- one - database \u5e93\u540d < *** . sql \u6ce8\u610f 1. \u6062\u590d\u5e93\u65f6\uff0c\u5982\u679c\u6062\u590d\u5230\u539f\u5e93\u5c06\u4f1a\u5c06\u8868\u4e2d\u7684\u6570\u636e\u8986\u76d6\uff0c\u65b0\u589e\u8868 \u4e0d\u4f1a\u5220\u9664 2. \u6062\u590d\u5e93\u65f6\uff0c \u5982\u679c\u5e93\u4e0d\u5b58\u5728\uff0c\u5219\u5fc5\u987b\u5148\u521b\u5efa\u7a7a\u5e93","title":"\u6570\u636e\u6062\u590d"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/","text":"\u6570\u636e\u5e93\u6982\u8ff0 \u00b6 \u5b58\u50a8\u6570\u636e\u7684\u4ed3\u5e93 \u6570\u636e\u5e93\u670d\u52a1\u8f6f\u4ef6 \u00b6 \u8f6f\u4ef6\u5206\u7c7b: MySQL Oracle SQl_Server MongoDB DB2 Maraidb \u751f\u4ea7\u73af\u5883\u4e2d\u5982\u4f55\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u5e93\u8f6f\u4ef6 \u00b6 \u662f\u5426\u5f00\u6e90 \u5f00\u6e90\u4e0d\u7b49\u4e8e\u514d\u8d39 \u5f00\u6e90\u8f6f\u4ef6\uff1a MySQL Mariadb MongoDB \u5546\u4e1a\u8f6f\u4ef6\uff1a Oracle DB2 SQl_server \u662f\u5426\u8de8\u5e73\u53f0 \u4e0d\u8de8\u5e73\u53f0\u7684 SQL_server \u8de8\u5e73\u53f0\u7684: ... \u516c\u53f8\u7684\u7c7b\u578b \u5546\u4e1a\u8f6f\u4ef6\uff1a \u653f\u5e9c\u90e8\u95e8 \u91d1\u878d\u673a\u6784 \u5f00\u6e90\u8f6f\u4ef6\uff1a \u6e38\u620f\u516c\u53f8 \u8d2d\u7269\u7f51\u7ad9 \u8bba\u575b\u7f51\u7ad9\u3002\u3002\u3002 MySQL\u7279\u70b9 \u00b6 \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u6570\u636e\u4ee5\u884c\u548c\u5217\uff08\u8868\uff09\u7684\u5f62\u5f0f\u53bb\u5b58\u50a8\u7684 \u884c\uff1a \u8bb0\u5f55 \u5217\uff1a \u5b57\u6bb5 \u8868\u548c\u8868\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u8054\u53eb\u5173\u7cfb \u8de8\u5e73\u53f0 \u5728Window Linux Unix \u8fd0\u884c\u6570\u636e\u5e93 \u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00 python java php \u6570\u636e\u5e93\u8f6f\u4ef6/ \u6570\u636e\u5e93/ \u6570\u636e\u4ed3\u5e93 \u00b6 \u6570\u636e\u5e93\u8f6f\u4ef6 \u770b\u5f97\u89c1 \u53ef\u64cd\u4f5c \u5b9e\u73b0\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u903b\u8f91\u529f\u80fd \u6570\u636e\u5e93 \u903b\u8f91\u6982\u5ff5\uff0c \u5b58\u50a8\u6570\u636e\u4fa7\u91cd\u4e8e\u5b58\u50a8 \u6570\u636e\u4ed3\u5e93 \u6570\u636e\u91cf\u7279\u522b\u5e9e\u5927\uff0c \u4e3b\u8981\u7528\u4e8e\u6570\u636e\u5206\u6790\u3001\u6570\u636e\u6316\u6398 MySQL \u5b89\u88c5 \u00b6 Ubuntu \u5b89\u88c5MySQL\u670d\u52a1 \u5b89\u88c5\u670d\u52a1\u5668\u7aef sudo apt-get install mysql-server \u5b89\u88c5\u5ba2\u6237\u7aef sudo apt-get install mysql-client Ubuntu \u5b89\u88c5\u8f6f\u4ef6 sudo apt-get install update sudo apt-get -f install # \u4fee\u590d\u4f9d\u8d56\u5173\u7cfb window \u5b89\u88c5MySQL\u670d\u52a1 \u4e0b\u8f7d\u5b89\u88c5\u5305\uff08window\uff09 mysql-installer 5.7 .msi \u53cc\u51fb\u5b89\u88c5 Mac \u5b89\u88c5MySQL \u4e0b\u8f7d\u5b89\u88c5\u5305 \u8bbe\u7f6e\u4e00\u4e0b\u73af\u5883\u53d8\u91cf vi .base_profile \u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\u4fdd\u5b58\u9000\u51fa export PATH=${PATH}:/usr/local/mysql/bin \u5728\u7ec8\u7aef\u4e2d\u6267\u884c source .bash_profile \u9a8c\u8bc1\uff1a mysql -urroot -p \u5bc6\u7801 \u542f\u52a8\u548c\u94fe\u63a5MySQL\u670d\u52a1 \u00b6 \u670d\u52a1\u7aef\u542f\u52a8 \u67e5\u770b\u670d\u52a1\u72b6\u6001 sudo /etc/init.d/mysql status sudo /etc/init.d/mysql start sudo /etc/init.d/mysql stop sudo /etc/init.d/mysql restart sudo /etc/init.d/mysql reload # \u8ba9\u670d\u52a1\u4e0d\u505c\u6b62\u7684\u60c5\u51b5\u4e0b\u751f\u6548\u4fee\u6539 \u5ba2\u6237\u7aef\u8fde\u63a5 \u547d\u4ee4\u683c\u5f0f mysql -h \u4e3b\u673a\u5730\u5740 -u \u7528\u6237\u540d -p \u5bc6\u7801 mysql -hlocalhost -uroot -p123456 # \u672c\u5730\u767b\u5f55\u53ef\u7701\u7565 -h \u9009\u9879 mysql -uroot -p \u57fa\u672c\u7684SQL\u547d\u4ee4 \u00b6 SQL \u547d\u4ee4\u7684\u4f7f\u7528\u89c4\u5219 \u6bcf\u6761\u547d\u4ee4\u5fc5\u987b\u4ee5;\u7ed3\u5c3e SQL\u547d\u4ee4\u4e0d\u533a\u5206\u5927\u5c0f\u5199 \u4f7f\u7528 \\c \u7ec8\u6b62\u5f53\u524d\u547d\u4ee4\u7684\u6267\u884c \u5e93\u7684\u7ba1\u7406 \u5e93\u7684\u57fa\u672c\u64cd\u4f5c show databases; \u521b\u5efa\u5e93(\u6307\u5b9a\u5b57\u7b26\u96c6) create database \u5e93\u540d character set utf-8; \u67e5\u770b\u521b\u5efa\u5e93\u7684\u8bed\u53e5 shwo create database \u5e93\u540d; \u67e5\u770b\u5f53\u524d\u6240\u5728\u5e93 select database(); \u5207\u6362\u5e93 use \u5e93\u540d; \u67e5\u770b\u5e93\u4e2d\u7684\u8868 show tables; \u5220\u9664\u5e93 drop database \u5e93\u540d; \u5e93\u7684\u547d\u540d\u89c4\u5219 \u6570\u5b57\u3001\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\uff0c\u4f46\u662f\u4e0d\u80fd\u662f\u7eaf\u6570\u5b57 \u5e93\u7684\u540d\u5b57\u533a\u5206\u5b57\u6bcd\u5927\u5c0f\u5199 \u4e0d\u80fd\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26 \u548c MySQL\u5173\u952e\u5b57 \u8868\u7684\u7ba1\u7406 \u8868\u7684\u57fa\u672c\u64cd\u4f5c \u521b\u5efa\u8868\uff08\u522b\u5fd8\u4e86use\u5e93\uff09 create table \u8868\u540d( name char(10), age int, score int, ); \u67e5\u770b\u521b\u5efa\u8868\u7684\u8bed\u53e5\uff08\u5b57\u7b26\u96c6\uff0c\u5b58\u50a8\u5f15\u64ce\uff09 show create table \u8868\u540d; \u67e5\u770b\u8868\u7ed3\u6784 desc \u8868\u540d \u5220\u9664\u8868 drop table \u8868\u540d; sudo -i # \u83b7\u5f97\u8d85\u7ea7\u6743\u9650 \u6ce8\u610f \u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u4ee5\u6587\u4ef6\u5f62\u5f0f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u76ee\u5f55\u4e0b /var/lib/mysql \u8868\u8bb0\u5f55\u7ba1\u7406 \u63d2\u5165(insert)\uff1a insert into \u8868\u540d values(\u503c1),(\u503c2).... (\u503c\u4e3a\u4e00\u6761\u8bb0\u5f55) insert into \u8868\u540d(\u5b57\u6bb51, \u5b57\u6bb52) values(\u503c1),(\u503c2)... \u67e5\u8be2(select) select * from \u8868\u540d where \u6761\u4ef6 select \u5b57\u6bb51, \u5b57\u6bb52 from \u8868\u540d where \u6761\u4ef6; \u7ec3\u4e60\u53ca\u7b54\u6848 \u00b6 \u67e5\u770b\u6240\u6709\u5e93 show databases; \u521b\u5efa\u65b0\u8868 studb create database studb character set utf8; \u5728\u5e93studb\u4e2d\u521b\u5efa\u8868tab1, \u6307\u5b9a\u5b57\u7b26\u96c6\u4e3autf8 \u5b57\u6bb5\u6709\uff1a id name age score use studb create table tab1(id int, name char(20), age int, score int); \u67e5\u770btab1\u7684\u8868\u7ed3\u6784 show create table tab1; desc tab1; \u5728tab1\u4e2d\u4efb\u610f\u63d2\u51652\u6761\u8bb0\u5f55 insert into tab1 values(1, 'lucy', 18, 80),(2, 'tom', 21, 59); \u67e5\u8be2\u6240\u6709\u8868\u8bb0\u5f55 select * from tab1; \u5728tab1\u4e2dname, score\u4fe9\u4e2a\u5b57\u6bb5\u63d2\u5165\u4e24\u6761\u8bb0\u5f55 insert into tab1(name, score) values('bill', 40),('bob', 50); \u67e5\u770b\u8868tab1\u4e2d\u6240\u6709\u4eba\u7684\u59d3\u540d\u548c\u5e74\u9f84 select name, age from tab1; \u67e5\u770b\u8868tab1\u4e2d\u6210\u7ee9\u53ca\u683c\u7684\u5b66\u751f\u4fe1\u606f\uff08\u9ad8\u4e8e60\u5206\uff09 select * from tab1 where score > 60; \u66f4\u6539\u5e93\u7684\u9ed8\u8ba4\u5b57\u7b26\u96c6 \u00b6 \u65b9\u6cd5\uff1a \u66f4\u6539\u914d\u7f6e\u6587\u4ef6 \u6b65\u9aa4\uff1a \u83b7\u5f97root \u7528\u6237\u6743\u9650\uff1a sudo -i cd /etc/mysql/mysql.conf.d cp mysqld.cnf mysqld.cnf.bak subl mysqld.cnf \u5728[mysqld] \u4e0b\uff1a character_set_server = utf8 /etc/init.d/mysql restart","title":"1. \u6570\u636e\u5e93\u6982\u8ff0"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#_1","text":"\u5b58\u50a8\u6570\u636e\u7684\u4ed3\u5e93","title":"\u6570\u636e\u5e93\u6982\u8ff0"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#_2","text":"\u8f6f\u4ef6\u5206\u7c7b: MySQL Oracle SQl_Server MongoDB DB2 Maraidb","title":"\u6570\u636e\u5e93\u670d\u52a1\u8f6f\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#_3","text":"\u662f\u5426\u5f00\u6e90 \u5f00\u6e90\u4e0d\u7b49\u4e8e\u514d\u8d39 \u5f00\u6e90\u8f6f\u4ef6\uff1a MySQL Mariadb MongoDB \u5546\u4e1a\u8f6f\u4ef6\uff1a Oracle DB2 SQl_server \u662f\u5426\u8de8\u5e73\u53f0 \u4e0d\u8de8\u5e73\u53f0\u7684 SQL_server \u8de8\u5e73\u53f0\u7684: ... \u516c\u53f8\u7684\u7c7b\u578b \u5546\u4e1a\u8f6f\u4ef6\uff1a \u653f\u5e9c\u90e8\u95e8 \u91d1\u878d\u673a\u6784 \u5f00\u6e90\u8f6f\u4ef6\uff1a \u6e38\u620f\u516c\u53f8 \u8d2d\u7269\u7f51\u7ad9 \u8bba\u575b\u7f51\u7ad9\u3002\u3002\u3002","title":"\u751f\u4ea7\u73af\u5883\u4e2d\u5982\u4f55\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u5e93\u8f6f\u4ef6"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#mysql","text":"\u5173\u7cfb\u578b\u6570\u636e\u5e93 \u6570\u636e\u4ee5\u884c\u548c\u5217\uff08\u8868\uff09\u7684\u5f62\u5f0f\u53bb\u5b58\u50a8\u7684 \u884c\uff1a \u8bb0\u5f55 \u5217\uff1a \u5b57\u6bb5 \u8868\u548c\u8868\u4e4b\u95f4\u7684\u903b\u8f91\u5173\u8054\u53eb\u5173\u7cfb \u8de8\u5e73\u53f0 \u5728Window Linux Unix \u8fd0\u884c\u6570\u636e\u5e93 \u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8bed\u8a00 python java php","title":"MySQL\u7279\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#_4","text":"\u6570\u636e\u5e93\u8f6f\u4ef6 \u770b\u5f97\u89c1 \u53ef\u64cd\u4f5c \u5b9e\u73b0\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u903b\u8f91\u529f\u80fd \u6570\u636e\u5e93 \u903b\u8f91\u6982\u5ff5\uff0c \u5b58\u50a8\u6570\u636e\u4fa7\u91cd\u4e8e\u5b58\u50a8 \u6570\u636e\u4ed3\u5e93 \u6570\u636e\u91cf\u7279\u522b\u5e9e\u5927\uff0c \u4e3b\u8981\u7528\u4e8e\u6570\u636e\u5206\u6790\u3001\u6570\u636e\u6316\u6398","title":"\u6570\u636e\u5e93\u8f6f\u4ef6/ \u6570\u636e\u5e93/ \u6570\u636e\u4ed3\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#mysql_1","text":"Ubuntu \u5b89\u88c5MySQL\u670d\u52a1 \u5b89\u88c5\u670d\u52a1\u5668\u7aef sudo apt-get install mysql-server \u5b89\u88c5\u5ba2\u6237\u7aef sudo apt-get install mysql-client Ubuntu \u5b89\u88c5\u8f6f\u4ef6 sudo apt-get install update sudo apt-get -f install # \u4fee\u590d\u4f9d\u8d56\u5173\u7cfb window \u5b89\u88c5MySQL\u670d\u52a1 \u4e0b\u8f7d\u5b89\u88c5\u5305\uff08window\uff09 mysql-installer 5.7 .msi \u53cc\u51fb\u5b89\u88c5 Mac \u5b89\u88c5MySQL \u4e0b\u8f7d\u5b89\u88c5\u5305 \u8bbe\u7f6e\u4e00\u4e0b\u73af\u5883\u53d8\u91cf vi .base_profile \u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\u4fdd\u5b58\u9000\u51fa export PATH=${PATH}:/usr/local/mysql/bin \u5728\u7ec8\u7aef\u4e2d\u6267\u884c source .bash_profile \u9a8c\u8bc1\uff1a mysql -urroot -p \u5bc6\u7801","title":"MySQL \u5b89\u88c5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#mysql_2","text":"\u670d\u52a1\u7aef\u542f\u52a8 \u67e5\u770b\u670d\u52a1\u72b6\u6001 sudo /etc/init.d/mysql status sudo /etc/init.d/mysql start sudo /etc/init.d/mysql stop sudo /etc/init.d/mysql restart sudo /etc/init.d/mysql reload # \u8ba9\u670d\u52a1\u4e0d\u505c\u6b62\u7684\u60c5\u51b5\u4e0b\u751f\u6548\u4fee\u6539 \u5ba2\u6237\u7aef\u8fde\u63a5 \u547d\u4ee4\u683c\u5f0f mysql -h \u4e3b\u673a\u5730\u5740 -u \u7528\u6237\u540d -p \u5bc6\u7801 mysql -hlocalhost -uroot -p123456 # \u672c\u5730\u767b\u5f55\u53ef\u7701\u7565 -h \u9009\u9879 mysql -uroot -p","title":"\u542f\u52a8\u548c\u94fe\u63a5MySQL\u670d\u52a1"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#sql","text":"SQL \u547d\u4ee4\u7684\u4f7f\u7528\u89c4\u5219 \u6bcf\u6761\u547d\u4ee4\u5fc5\u987b\u4ee5;\u7ed3\u5c3e SQL\u547d\u4ee4\u4e0d\u533a\u5206\u5927\u5c0f\u5199 \u4f7f\u7528 \\c \u7ec8\u6b62\u5f53\u524d\u547d\u4ee4\u7684\u6267\u884c \u5e93\u7684\u7ba1\u7406 \u5e93\u7684\u57fa\u672c\u64cd\u4f5c show databases; \u521b\u5efa\u5e93(\u6307\u5b9a\u5b57\u7b26\u96c6) create database \u5e93\u540d character set utf-8; \u67e5\u770b\u521b\u5efa\u5e93\u7684\u8bed\u53e5 shwo create database \u5e93\u540d; \u67e5\u770b\u5f53\u524d\u6240\u5728\u5e93 select database(); \u5207\u6362\u5e93 use \u5e93\u540d; \u67e5\u770b\u5e93\u4e2d\u7684\u8868 show tables; \u5220\u9664\u5e93 drop database \u5e93\u540d; \u5e93\u7684\u547d\u540d\u89c4\u5219 \u6570\u5b57\u3001\u5b57\u6bcd\u3001\u4e0b\u5212\u7ebf\uff0c\u4f46\u662f\u4e0d\u80fd\u662f\u7eaf\u6570\u5b57 \u5e93\u7684\u540d\u5b57\u533a\u5206\u5b57\u6bcd\u5927\u5c0f\u5199 \u4e0d\u80fd\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26 \u548c MySQL\u5173\u952e\u5b57 \u8868\u7684\u7ba1\u7406 \u8868\u7684\u57fa\u672c\u64cd\u4f5c \u521b\u5efa\u8868\uff08\u522b\u5fd8\u4e86use\u5e93\uff09 create table \u8868\u540d( name char(10), age int, score int, ); \u67e5\u770b\u521b\u5efa\u8868\u7684\u8bed\u53e5\uff08\u5b57\u7b26\u96c6\uff0c\u5b58\u50a8\u5f15\u64ce\uff09 show create table \u8868\u540d; \u67e5\u770b\u8868\u7ed3\u6784 desc \u8868\u540d \u5220\u9664\u8868 drop table \u8868\u540d; sudo -i # \u83b7\u5f97\u8d85\u7ea7\u6743\u9650 \u6ce8\u610f \u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u4ee5\u6587\u4ef6\u5f62\u5f0f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u76ee\u5f55\u4e0b /var/lib/mysql \u8868\u8bb0\u5f55\u7ba1\u7406 \u63d2\u5165(insert)\uff1a insert into \u8868\u540d values(\u503c1),(\u503c2).... (\u503c\u4e3a\u4e00\u6761\u8bb0\u5f55) insert into \u8868\u540d(\u5b57\u6bb51, \u5b57\u6bb52) values(\u503c1),(\u503c2)... \u67e5\u8be2(select) select * from \u8868\u540d where \u6761\u4ef6 select \u5b57\u6bb51, \u5b57\u6bb52 from \u8868\u540d where \u6761\u4ef6;","title":"\u57fa\u672c\u7684SQL\u547d\u4ee4"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#_5","text":"\u67e5\u770b\u6240\u6709\u5e93 show databases; \u521b\u5efa\u65b0\u8868 studb create database studb character set utf8; \u5728\u5e93studb\u4e2d\u521b\u5efa\u8868tab1, \u6307\u5b9a\u5b57\u7b26\u96c6\u4e3autf8 \u5b57\u6bb5\u6709\uff1a id name age score use studb create table tab1(id int, name char(20), age int, score int); \u67e5\u770btab1\u7684\u8868\u7ed3\u6784 show create table tab1; desc tab1; \u5728tab1\u4e2d\u4efb\u610f\u63d2\u51652\u6761\u8bb0\u5f55 insert into tab1 values(1, 'lucy', 18, 80),(2, 'tom', 21, 59); \u67e5\u8be2\u6240\u6709\u8868\u8bb0\u5f55 select * from tab1; \u5728tab1\u4e2dname, score\u4fe9\u4e2a\u5b57\u6bb5\u63d2\u5165\u4e24\u6761\u8bb0\u5f55 insert into tab1(name, score) values('bill', 40),('bob', 50); \u67e5\u770b\u8868tab1\u4e2d\u6240\u6709\u4eba\u7684\u59d3\u540d\u548c\u5e74\u9f84 select name, age from tab1; \u67e5\u770b\u8868tab1\u4e2d\u6210\u7ee9\u53ca\u683c\u7684\u5b66\u751f\u4fe1\u606f\uff08\u9ad8\u4e8e60\u5206\uff09 select * from tab1 where score > 60;","title":"\u7ec3\u4e60\u53ca\u7b54\u6848"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/#_6","text":"\u65b9\u6cd5\uff1a \u66f4\u6539\u914d\u7f6e\u6587\u4ef6 \u6b65\u9aa4\uff1a \u83b7\u5f97root \u7528\u6237\u6743\u9650\uff1a sudo -i cd /etc/mysql/mysql.conf.d cp mysqld.cnf mysqld.cnf.bak subl mysqld.cnf \u5728[mysqld] \u4e0b\uff1a character_set_server = utf8 /etc/init.d/mysql restart","title":"\u66f4\u6539\u5e93\u7684\u9ed8\u8ba4\u5b57\u7b26\u96c6"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","text":"\u7c7b\u578b \u00b6 \u6570\u503c\u7c7b\u578b \u5b57\u7b26\u7c7b\u578b \u679a\u4e3e\u7c7b\u578b \u65e5\u671f\u65f6\u95f4\u7c7b\u578b \u6570\u503c\u7c7b\u578b \u00b6 int \u00b6 \u6574\u5f62 int\uff084\u4e2a\u5b57\u8282\uff09 \u53d6\u503c\u8303\u56f4\uff1a 0\uff5e(2**32 -1) 42\u4ebf\u591a tinyint \u00b6 \u5fae\u5c0f\u6574\u578b\uff081\u4e2a\u5b57\u8282\uff09 1. \u6709\u7b26\u53f7\uff08signed\u9ed8\u8ba4\uff09\uff1a -128\uff5e+127 2. \u65e0\u7b26\u53f7 (unsigned): 0\uff5e255 \u793a\u4f8b: age tinyint unsigned # \u53ea\u80fd\u4e3a\u6b63\u6570 smallint \u00b6 \u5c0f\u6574\u5f62 \uff082\u5b57\u8282\uff09 bigint \u00b6 \u6781\u5927\u6574\u5f62\uff088\u4e2a\u5b57\u8282\uff09 float \u00b6 (4\u4e2a\u5b57\u8282, \u6700\u591a\u663e\u793a7\u4e2a\u6709\u6548\u4f4d) \u5b57\u6bb5\u540d float(m, n) m \uff08\u6700\u5927\u4e3a7\uff09\u2192 \u603b\u4f4d\u6570 n \u2192 \u5c0f\u6570\u4f4d\u6570 \u793a\u4f8b\uff1a float(5, 2) \u53d6\u503c\u8303\u56f4:(-999.99 ~ +999.99) double \u00b6 \u5b57\u6bb5\u540d double(m, n) \uff08\u53608\u4e2a\u5b57\u8282\uff09 decimal(m, n) \u00b6 \u5b58\u50a8\u7a7a\u95f4\uff08\u6574\u6570\u90e8\u5206\u3001\u5c0f\u6570\u90e8\u5206\u5206\u5f00\u5b58\u50a8\uff09 \u89c4\u5219\uff1a \u5c069\u7684\u500d\u6570\u5c01\u88c5\u4e3a4\u4e2a\u5b57\u8282 \u4f59\u6570 \u5b57\u8282 0 0 1-2 1 3-4 2 5-6 3 7-8 4 \u793a\u4f8b decimal(19, 9) \u6574\u6570\u90e8\u5206\uff1a 10/9=1\u4f591 4\u4e2a\u5b57\u8282+1\u5b57\u8282 = 5 \u5c0f\u6570\u90e8\u5206\uff1a 9/9=1\u4f590 4\u4e2a\u5b57\u8282+0\u5b57\u8282 = 4 \u603b\u5171\uff1a 9\u4e2a\u5b57\u8282 \u7ec3\u4e60\u4e0e\u7b54\u6848 \u00b6 \u65b0\u5efa\u5e93studb2\uff0c \u5e76\u5728\u5e93\u4e2d\u521b\u5efa\u8868stuinfo\uff0c \u8981\u6c42 id: \u5927\u6574\u578b name: \u5b57\u7b26\u7c7b\u578b\uff0c\u5bbd\u5ea6\u4e3a15 age\uff1a \u5fae\u5c0f\u6574\u578b\uff0c \u4e0d\u80fd\u4e3a\u8d1f\u6570 height\uff1a \u6d6e\u70b9\u578b\uff0c\u5c0f\u6570\u4f4d\u4e3a2\u4f4d\uff08float\uff09 money: \u6d6e\u70b9\u578b\uff0c\u5c0f\u6570\u4f4d\u4e3a4\u4f4d\uff08decimal\uff09 \u67e5\u770b\u8868\u7ed3\u6784 \u67e5\u770b\u8868\u5b57\u7b26\u96c6\u548c\u5b58\u50a8\u5f15\u64ce \u5728\u8868\u4e2d\u63d2\u51651\u6761\u5b8c\u6574\u8bb0\u5f55 \u67e5\u8be2\u6240\u6709\u8bb0\u5f55 \u5728\u8868\u4e2did\\name\\money\u4e09\u4e2a\u5b57\u6bb5\u63d2\u51652\u6761\u8bb0\u5f55 \u67e5\u8be2\u6240\u6709\u5b66\u751f\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001money create table stuinfo(id bigint, name char(15), age tinyint unsigned, height float(5, 2), money decimal(10, 4)); desc stuinfo; show create table stuinfo; select * from stuinfo; \u5b57\u7b26\u7c7b\u578b \u00b6 char \u00b6 \u5b9a\u957f char\uff08\u5bbd\u5ea6\uff09\u5bbd\u5ea6\u53d6\u503c\u8303\u56f4\uff081-255\uff09 varchar \u00b6 \u53d8\u957f varchar(\u5bbd\u5ea6) \u5bbd\u5ea6\u53d6\u503c\u8303\u56f4\uff081-65535\uff09 char \u548c varchar \u7684\u7279\u70b9 1. char \u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c \u6027\u80fd\u9ad8 2. varchar \u8282\u7701\u5b58\u50a8\u7a7a\u95f4\uff0c\u76f8\u5bf9\u6027\u80fd\u4f4e text / longtext \u00b6 (4G\u4ee5\u5185\u6253\u53ef\u4ee5\u4e00\u6b21\u6027\u5b58\u5165) blob / longblob \u5b57\u7b26\u7c7b\u578b\u7684\u5bbd\u5ea6\u548c\u6570\u503c\u7c7b\u578b\u7684\u5bbd\u5ea6\u7684\u533a\u522b \u00b6 \u6570\u503c\u7c7b\u578b\u7684\u5bbd\u5ea6\u4e3a\u663e\u793a\u5bbd\u5ea6\uff0c \u53ea\u7528\u4e8eselect\u67e5\u8be2\u65f6\u663e\u793a\uff0c\u548c\u5360\u7528\u5b58\u50a8\u65e0\u5173\uff0c\u53ef\u7528zerofill\u67e5\u770b\u6548\u679c \u5b57\u7b26\u7c7b\u578b\u7684\u5bbd\u5ea6\u8d85\u8fc7\u540e\u65e0\u6cd5\u5b58\u50a8 \u679a\u4e3e\u7c7b\u578b \u00b6 \u5355\u9009enum \u5b57\u6bb5\u540d enum(\u503c1, \u503c2, ...) \u591a\u9009set \u5b57\u6bb5\u540d set(\u503c1, \u503c2, ...) \u63d2\u5165\u8bb0\u5f55\u65f6 \u591a\u9009 'study, python, mysql' \u65e5\u671f\u65f6\u95f4\u7c7b\u578b \u00b6 date: \"YYYY-MM-DD\" datetime: \"YYYY-MM-DD HH:MM:SS\" timestamp: \"YYYY-MM-DD HH:MM:SS\" time: \"HH:MM:SS\" \u6ce8\u610f\uff1a datetime \u548c timestamp\u7684\u533a\u522b datetime\uff1a\u4e0d\u7ed9\u503c\u9ed8\u8ba4\u8fd4\u56deNULL timestamp: \u4e0d\u7ed9\u503c\u9ed8\u8ba4\u8fd4\u56de\u7cfb\u7edf\u7684\u5f53\u524d\u65f6\u95f4 \u793a\u4f8b\uff1a 1. \u521b\u5efa\u4e00\u5f20\u8868, \u7528\u6237\u5145\u503c\u8868 create table t2 ( id int , username varchar ( 20 ), password varchar ( 20 ), money int , brithday date , cztime timestamp ); 2. \u63d2\u5165\u8bb0\u5f55 insert into t2 values ( 1 , '\u7528\u62371' , '123456' , 500 , '1995-05-20' , '2018-08-30 9:40:30' ); insert into t2 values ( 2 , '\u7528\u62372' , '123456' , 600 , '1992-02-20' , now ()); insert into t2 values ( 3 , '\u7528\u62373' , '123456' , 800 , '1990-03-03' , date ( now ())); insert into t2 values ( 4 , '\u7528\u62374' , '123456' , 1000 , '1994-4-1' , '1999-9-9 0:0:0' ); \u65e5\u671f\u65f6\u95f4\u51fd\u6570 \u00b6 now() \u8fd4\u56de\u670d\u52a1\u5668\u5f53\u524d\u7684\u65f6\u95f4 curdate() \u8fd4\u56de\u5f53\u524d\u7684\u65e5\u671f curtime() \u8fd4\u56de\u5f53\u524d\u7684\u65f6\u95f4 date('1999-09-09 09:09:09') \u4ece\u4e00\u4e2a\u73b0\u6709\u7684\u65e5\u671f\u65f6\u95f4\u91cc\u63d0\u53d6\u65e5\u671f \u2192 \u8fd4\u56de '1999-09-09' select date('1999-09-09 09:09:09'); time('1999-09-09 09:09:09') \u4ece\u4e00\u4e2a\u73b0\u6709\u7684\u65e5\u671f\u65f6\u95f4\u91cc\u63d0\u53d6\u65f6\u95f4 \u2192 \u8fd4\u56de '09\uff1a09\uff1a09' select time('1999-09-09 09:09:09'); year('1999-09-09 09:09:09') \u4ece\u4e00\u4e2a\u73b0\u6709\u7684\u65e5\u671f\u65f6\u95f4\u91cc\u63d0\u53d6\u5e74\u4efd \u2192 \u8fd4\u56de '1999' select year(now()); \u7ec3\u4e60 1. \u67e5\u627e2018\u5e748\u670830\u65e5\u7528\u6237\u5145\u503c\u7684\u8be6\u7ec6\u4fe1\u606f select * from t2 where date ( cztime ) = '2018-08-30' ; 2. \u67e5\u627e2018\u5e748\u6708\u4efd\u6240\u6709\u7528\u6237\u7684\u5145\u503c\u4fe1\u606f select * from t2 where year ( cztime ) = '2018' and month ( cztime ) = '08' ; 3. \u67e5\u627e2018\u5e7408\u670830\u65e5 08 : 00 - 10 : 00 \u4e4b\u95f4\u7528\u6237\u5145\u503c\u4fe1\u606f \u62a5\u9519\uff1aselect * from t2 where date ( cztime ) = '2018-08-30' and '08:00:00' <= time ( cztime ) and time ( cztime ) <= '10:00:00' ; \u6b63\u5e38\uff1aselect * from t2 where date ( cztime ) = '2018-08-30' and time ( cztime ) > '08:00:00' and time ( cztime ) < '10:00:00' ; \u603b\u7ed3\uff1a tiem ( cztime ) > '08:00:00' \u8fd9\u4e48\u5199 select \u5b57\u6bb5\u540d from \u8868\u540d where \u5b57\u6bb5\u540d ( now () - interval \u65f6\u95f4\u95f4\u9694\u5355\u4f4d ); \u65e5\u671f\u65f6\u95f4\u7684\u8fd0\u7b97 \u00b6 \u65e5\u671f\u65f6\u95f4\u7684\u8fd0\u7b97\uff0c\u65f6\u95f4\u95f4\u9694\u5355\u4f4d\u7684\u8868\u793a\u65b9\u5f0f 1 day \u6216 3 hour \u6216 1 minitue \u6216 1 year 1. \u8bed\u6cd5\u683c\u5f0f select \u5b57\u6bb5\u540d from \u8868\u540d where \u5b57\u6bb5\u540d \u8fd0\u7b97\u7b26(now()-interval \u65f6\u95f4\u95f4\u9694\u5355\u4f4d); \u65f6\u95f4\u95f4\u9694\u5355\u4f4d\u7684\u8868\u793a\u65b9\u5f0f 1day | 3 hour | 1 minitue | 2 year | 3 month \u793a\u4f8b 1. \u67e5\u8be2\u4e00\u5929\u4ee5\u5185\u7684\u5145\u503c\u8bb0\u5f55 select * from t2 where cztime >= ( now () - interval 1 day ); 2. \u67e5\u8be2\u4e00\u5e74\u4ee5\u524d\u7684\u5145\u503c\u8bb0\u5f55 select * from t2 where cztime <= ( now () - interval 1 year ); 3. \u67e5\u8be2\u4e00\u5929\u4ee5\u524d\u4e09\u5929\u4ee5\u5185\u7684\u5145\u503c\u8bb0\u5f55 select * from t2 where cztime >= ( now () - interval 3 day ) and cztime <= ( now () - interval 1 day );","title":"2. \u6570\u636e\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_1","text":"\u6570\u503c\u7c7b\u578b \u5b57\u7b26\u7c7b\u578b \u679a\u4e3e\u7c7b\u578b \u65e5\u671f\u65f6\u95f4\u7c7b\u578b","title":"\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_2","text":"","title":"\u6570\u503c\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#int","text":"\u6574\u5f62 int\uff084\u4e2a\u5b57\u8282\uff09 \u53d6\u503c\u8303\u56f4\uff1a 0\uff5e(2**32 -1) 42\u4ebf\u591a","title":"int"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#tinyint","text":"\u5fae\u5c0f\u6574\u578b\uff081\u4e2a\u5b57\u8282\uff09 1. \u6709\u7b26\u53f7\uff08signed\u9ed8\u8ba4\uff09\uff1a -128\uff5e+127 2. \u65e0\u7b26\u53f7 (unsigned): 0\uff5e255 \u793a\u4f8b: age tinyint unsigned # \u53ea\u80fd\u4e3a\u6b63\u6570","title":"tinyint"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#smallint","text":"\u5c0f\u6574\u5f62 \uff082\u5b57\u8282\uff09","title":"smallint"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#bigint","text":"\u6781\u5927\u6574\u5f62\uff088\u4e2a\u5b57\u8282\uff09","title":"bigint"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#float","text":"(4\u4e2a\u5b57\u8282, \u6700\u591a\u663e\u793a7\u4e2a\u6709\u6548\u4f4d) \u5b57\u6bb5\u540d float(m, n) m \uff08\u6700\u5927\u4e3a7\uff09\u2192 \u603b\u4f4d\u6570 n \u2192 \u5c0f\u6570\u4f4d\u6570 \u793a\u4f8b\uff1a float(5, 2) \u53d6\u503c\u8303\u56f4:(-999.99 ~ +999.99)","title":"float"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#double","text":"\u5b57\u6bb5\u540d double(m, n) \uff08\u53608\u4e2a\u5b57\u8282\uff09","title":"double"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#decimalm-n","text":"\u5b58\u50a8\u7a7a\u95f4\uff08\u6574\u6570\u90e8\u5206\u3001\u5c0f\u6570\u90e8\u5206\u5206\u5f00\u5b58\u50a8\uff09 \u89c4\u5219\uff1a \u5c069\u7684\u500d\u6570\u5c01\u88c5\u4e3a4\u4e2a\u5b57\u8282 \u4f59\u6570 \u5b57\u8282 0 0 1-2 1 3-4 2 5-6 3 7-8 4 \u793a\u4f8b decimal(19, 9) \u6574\u6570\u90e8\u5206\uff1a 10/9=1\u4f591 4\u4e2a\u5b57\u8282+1\u5b57\u8282 = 5 \u5c0f\u6570\u90e8\u5206\uff1a 9/9=1\u4f590 4\u4e2a\u5b57\u8282+0\u5b57\u8282 = 4 \u603b\u5171\uff1a 9\u4e2a\u5b57\u8282","title":"decimal(m, n)"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_3","text":"\u65b0\u5efa\u5e93studb2\uff0c \u5e76\u5728\u5e93\u4e2d\u521b\u5efa\u8868stuinfo\uff0c \u8981\u6c42 id: \u5927\u6574\u578b name: \u5b57\u7b26\u7c7b\u578b\uff0c\u5bbd\u5ea6\u4e3a15 age\uff1a \u5fae\u5c0f\u6574\u578b\uff0c \u4e0d\u80fd\u4e3a\u8d1f\u6570 height\uff1a \u6d6e\u70b9\u578b\uff0c\u5c0f\u6570\u4f4d\u4e3a2\u4f4d\uff08float\uff09 money: \u6d6e\u70b9\u578b\uff0c\u5c0f\u6570\u4f4d\u4e3a4\u4f4d\uff08decimal\uff09 \u67e5\u770b\u8868\u7ed3\u6784 \u67e5\u770b\u8868\u5b57\u7b26\u96c6\u548c\u5b58\u50a8\u5f15\u64ce \u5728\u8868\u4e2d\u63d2\u51651\u6761\u5b8c\u6574\u8bb0\u5f55 \u67e5\u8be2\u6240\u6709\u8bb0\u5f55 \u5728\u8868\u4e2did\\name\\money\u4e09\u4e2a\u5b57\u6bb5\u63d2\u51652\u6761\u8bb0\u5f55 \u67e5\u8be2\u6240\u6709\u5b66\u751f\u7684\u7f16\u53f7\u3001\u59d3\u540d\u3001money create table stuinfo(id bigint, name char(15), age tinyint unsigned, height float(5, 2), money decimal(10, 4)); desc stuinfo; show create table stuinfo; select * from stuinfo;","title":"\u7ec3\u4e60\u4e0e\u7b54\u6848"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_4","text":"","title":"\u5b57\u7b26\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#char","text":"\u5b9a\u957f char\uff08\u5bbd\u5ea6\uff09\u5bbd\u5ea6\u53d6\u503c\u8303\u56f4\uff081-255\uff09","title":"char"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#varchar","text":"\u53d8\u957f varchar(\u5bbd\u5ea6) \u5bbd\u5ea6\u53d6\u503c\u8303\u56f4\uff081-65535\uff09 char \u548c varchar \u7684\u7279\u70b9 1. char \u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c \u6027\u80fd\u9ad8 2. varchar \u8282\u7701\u5b58\u50a8\u7a7a\u95f4\uff0c\u76f8\u5bf9\u6027\u80fd\u4f4e","title":"varchar"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#text-longtext","text":"(4G\u4ee5\u5185\u6253\u53ef\u4ee5\u4e00\u6b21\u6027\u5b58\u5165) blob / longblob","title":"text / longtext"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_5","text":"\u6570\u503c\u7c7b\u578b\u7684\u5bbd\u5ea6\u4e3a\u663e\u793a\u5bbd\u5ea6\uff0c \u53ea\u7528\u4e8eselect\u67e5\u8be2\u65f6\u663e\u793a\uff0c\u548c\u5360\u7528\u5b58\u50a8\u65e0\u5173\uff0c\u53ef\u7528zerofill\u67e5\u770b\u6548\u679c \u5b57\u7b26\u7c7b\u578b\u7684\u5bbd\u5ea6\u8d85\u8fc7\u540e\u65e0\u6cd5\u5b58\u50a8","title":"\u5b57\u7b26\u7c7b\u578b\u7684\u5bbd\u5ea6\u548c\u6570\u503c\u7c7b\u578b\u7684\u5bbd\u5ea6\u7684\u533a\u522b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_6","text":"\u5355\u9009enum \u5b57\u6bb5\u540d enum(\u503c1, \u503c2, ...) \u591a\u9009set \u5b57\u6bb5\u540d set(\u503c1, \u503c2, ...) \u63d2\u5165\u8bb0\u5f55\u65f6 \u591a\u9009 'study, python, mysql'","title":"\u679a\u4e3e\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_7","text":"date: \"YYYY-MM-DD\" datetime: \"YYYY-MM-DD HH:MM:SS\" timestamp: \"YYYY-MM-DD HH:MM:SS\" time: \"HH:MM:SS\" \u6ce8\u610f\uff1a datetime \u548c timestamp\u7684\u533a\u522b datetime\uff1a\u4e0d\u7ed9\u503c\u9ed8\u8ba4\u8fd4\u56deNULL timestamp: \u4e0d\u7ed9\u503c\u9ed8\u8ba4\u8fd4\u56de\u7cfb\u7edf\u7684\u5f53\u524d\u65f6\u95f4 \u793a\u4f8b\uff1a 1. \u521b\u5efa\u4e00\u5f20\u8868, \u7528\u6237\u5145\u503c\u8868 create table t2 ( id int , username varchar ( 20 ), password varchar ( 20 ), money int , brithday date , cztime timestamp ); 2. \u63d2\u5165\u8bb0\u5f55 insert into t2 values ( 1 , '\u7528\u62371' , '123456' , 500 , '1995-05-20' , '2018-08-30 9:40:30' ); insert into t2 values ( 2 , '\u7528\u62372' , '123456' , 600 , '1992-02-20' , now ()); insert into t2 values ( 3 , '\u7528\u62373' , '123456' , 800 , '1990-03-03' , date ( now ())); insert into t2 values ( 4 , '\u7528\u62374' , '123456' , 1000 , '1994-4-1' , '1999-9-9 0:0:0' );","title":"\u65e5\u671f\u65f6\u95f4\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_8","text":"now() \u8fd4\u56de\u670d\u52a1\u5668\u5f53\u524d\u7684\u65f6\u95f4 curdate() \u8fd4\u56de\u5f53\u524d\u7684\u65e5\u671f curtime() \u8fd4\u56de\u5f53\u524d\u7684\u65f6\u95f4 date('1999-09-09 09:09:09') \u4ece\u4e00\u4e2a\u73b0\u6709\u7684\u65e5\u671f\u65f6\u95f4\u91cc\u63d0\u53d6\u65e5\u671f \u2192 \u8fd4\u56de '1999-09-09' select date('1999-09-09 09:09:09'); time('1999-09-09 09:09:09') \u4ece\u4e00\u4e2a\u73b0\u6709\u7684\u65e5\u671f\u65f6\u95f4\u91cc\u63d0\u53d6\u65f6\u95f4 \u2192 \u8fd4\u56de '09\uff1a09\uff1a09' select time('1999-09-09 09:09:09'); year('1999-09-09 09:09:09') \u4ece\u4e00\u4e2a\u73b0\u6709\u7684\u65e5\u671f\u65f6\u95f4\u91cc\u63d0\u53d6\u5e74\u4efd \u2192 \u8fd4\u56de '1999' select year(now()); \u7ec3\u4e60 1. \u67e5\u627e2018\u5e748\u670830\u65e5\u7528\u6237\u5145\u503c\u7684\u8be6\u7ec6\u4fe1\u606f select * from t2 where date ( cztime ) = '2018-08-30' ; 2. \u67e5\u627e2018\u5e748\u6708\u4efd\u6240\u6709\u7528\u6237\u7684\u5145\u503c\u4fe1\u606f select * from t2 where year ( cztime ) = '2018' and month ( cztime ) = '08' ; 3. \u67e5\u627e2018\u5e7408\u670830\u65e5 08 : 00 - 10 : 00 \u4e4b\u95f4\u7528\u6237\u5145\u503c\u4fe1\u606f \u62a5\u9519\uff1aselect * from t2 where date ( cztime ) = '2018-08-30' and '08:00:00' <= time ( cztime ) and time ( cztime ) <= '10:00:00' ; \u6b63\u5e38\uff1aselect * from t2 where date ( cztime ) = '2018-08-30' and time ( cztime ) > '08:00:00' and time ( cztime ) < '10:00:00' ; \u603b\u7ed3\uff1a tiem ( cztime ) > '08:00:00' \u8fd9\u4e48\u5199 select \u5b57\u6bb5\u540d from \u8868\u540d where \u5b57\u6bb5\u540d ( now () - interval \u65f6\u95f4\u95f4\u9694\u5355\u4f4d );","title":"\u65e5\u671f\u65f6\u95f4\u51fd\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_9","text":"\u65e5\u671f\u65f6\u95f4\u7684\u8fd0\u7b97\uff0c\u65f6\u95f4\u95f4\u9694\u5355\u4f4d\u7684\u8868\u793a\u65b9\u5f0f 1 day \u6216 3 hour \u6216 1 minitue \u6216 1 year 1. \u8bed\u6cd5\u683c\u5f0f select \u5b57\u6bb5\u540d from \u8868\u540d where \u5b57\u6bb5\u540d \u8fd0\u7b97\u7b26(now()-interval \u65f6\u95f4\u95f4\u9694\u5355\u4f4d); \u65f6\u95f4\u95f4\u9694\u5355\u4f4d\u7684\u8868\u793a\u65b9\u5f0f 1day | 3 hour | 1 minitue | 2 year | 3 month \u793a\u4f8b 1. \u67e5\u8be2\u4e00\u5929\u4ee5\u5185\u7684\u5145\u503c\u8bb0\u5f55 select * from t2 where cztime >= ( now () - interval 1 day ); 2. \u67e5\u8be2\u4e00\u5e74\u4ee5\u524d\u7684\u5145\u503c\u8bb0\u5f55 select * from t2 where cztime <= ( now () - interval 1 year ); 3. \u67e5\u8be2\u4e00\u5929\u4ee5\u524d\u4e09\u5929\u4ee5\u5185\u7684\u5145\u503c\u8bb0\u5f55 select * from t2 where cztime >= ( now () - interval 3 day ) and cztime <= ( now () - interval 1 day );","title":"\u65e5\u671f\u65f6\u95f4\u7684\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/","text":"\u5339\u914d\u7a7a\u548c\u975e\u7a7a \u00b6 \u7a7a\uff1a is null \u975e\u7a7a\uff1a is not null \u7ec3\u4e60 1. \u67e5\u627e\u59d3\u540d\u4e3aNULL\u7684\u8700\u56fd\u7537\u82f1\u96c4\u7684\u4fe1\u606f select * from sanguo where name is null and country = '\u8700\u56fd' and sex = '\u7537' ; 2. \u67e5\u627e\u59d3\u540d\u4e3a '' \u7684\u82f1\u96c4\u7684\u4fe1\u606f select * from sanguo where name = '' ; 3. \u5728\u6240\u6709\u8700\u56fd\u82f1\u96c4\u4e2d\u67e5\u627e\u653b\u51fb\u529b\u5927\u4e8e150\u7684\u5e76\u4e14\u540d\u5b57\u4e0d\u4e3aNULL\u7684\u82f1\u96c4\u7684\u59d3\u540d\u3001\u653b\u51fb\u503c\u548c\u56fd\u5bb6 select name , gongji , country from sanguo where country = '\u8700\u56fd' and gongji > 150 and name is not null ; 4. \u67e5\u627e\u9b4f\u8700\u4e24\u56fd\u82f1\u96c4\u4e2d\u653b\u51fb\u529b\u5c0f\u4e8e200\u5e76\u4e14\u9632\u5fa1\u529b\u5c0f\u4e8e80\u7684\u82f1\u96c4\u4fe1\u606f select * from sanguo where country in ( '\u8700\u56fd' , '\u9b4f\u56fd' ) and gongji < 200 and fangyu < 80 ; \u7a7a\u503c\u548c\u7a7a\u5b57\u7b26\u4e32\u7684\u533a\u522b \u00b6 null\uff1a\u7a7a\u503c, \u53ea\u80fd\u7528is, is not \u53bb\u5339\u914d '': \u7a7a\u5b57\u7b26\u4e32, \u53ea\u80fd\u7528= != \u53bb\u5339\u914d \u6a21\u7cca\u67e5\u8be2(like) \u00b6 where \u5b57\u6bb5\u540d like \u8868\u8fbe\u5f0f \u8868\u8fbe\u5f0f _ : \u5339\u914d\u5355\u4e2a\u5b57\u7b26 % : \u5339\u914d0\u5230\u591a\u4e2a\u5b57\u7b26 \u7ec3\u4e60 select name from sanguo where name like '_%_' ; # \u5339\u914d name \u6709\u4e24\u4e2a\u5b57\u7b26\u4ee5\u4e0a\u7684 select name from sanguo where name like '%' ; # \u5339\u914d\u6240\u6709\u4e0d\u5305\u62ecnull select name from sanguo where name like '___' ; # \u5339\u914d name \u6709\u4e09\u4e2a\u5b57\u7b26\u7684 select name from sanguo where name like '\u8d75%' ; # \u5339\u914dname \u8d75\u5f00\u5934\u7684 SQL\u9ad8\u7ea7\u67e5\u8be2 \u00b6 select ... \u805a\u5408\u51fd\u6570 from \u8868\u540d where ... group by ... having ... order by ... limit ... \u6392\u5e8f order by \u00b6 \u4f5c\u7528 \u7ed9\u67e5\u8be2\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f \u8bed\u6cd5 order by \u5b57\u6bb5\u540d ASC / DESC ASC \uff08\u5347\u5e8f\uff09 DESC \uff08\u964d\u5e8f\uff09 \u793a\u4f8b 1. \u5c06\u6240\u6709\u82f1\u96c4\u6309\u9632\u5fa1\u503c\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f select * from sanguo order by fangyu DESC ; 2. \u5c06\u8700\u56fd\u82f1\u96c4\u6309\u653b\u51fb\u529b\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f select * from sanguo where country = '\u8700\u56fd' order by gongji DESC ; 3. \u5c06\u9b4f\u8700\u4e24\u56fd\u82f1\u96c4\u4e2d\u540d\u5b57\u4e3a3\u4e2a\u5b57\u7684\uff0c\u6309\u9632\u5fa1\u529b\u5347\u5e8f\u6392\u5e8f select * from sanguo where country in ( '\u9b4f\u56fd' , '\u8700\u56fd' ) and name like '___' order by fangyu ASC ; \u9650\u5236\u663e\u793a\u67e5\u8be2\u7684\u6761\u6570 limit \u00b6 \uff08\u6c38\u8fdc\u653e\u5728SQL\u547d\u4ee4\u7684\u6700\u540e\u5199\uff09 1. \u663e\u793a\u67e5\u8be2\u7684\u6761\u6570 2. \u7528\u6cd5 limit n ; --> \u663e\u793an\u6761\u8bb0\u5f55 limit m , n ; --> \u4ece\u7b2cm + 1 \u6761\u5f00\u59cb\u663e\u793a , n\u6761 limit 2 , 3 : \u663e\u793a3 4 5 \u4e09\u6761\u8bb0\u5f55 3. \u7ec3\u4e60 1. \u5728\u8700\u56fd\u82f1\u96c4\u4e2d\uff0c\u67e5\u627e\u9632\u5fa1\u503c\u5012\u6570\u7b2c\u4e8c\u540d\u5230\u5012\u6570\u7b2c\u56db\u540d\u82f1\u96c4\u7684\u59d3\u540d\uff0c\u9632\u5fa1\u503c\uff0c\u56fd\u5bb6 select name , fangyu , country from sanguo where country = '\u8700\u56fd' order by fangyu ASC limit 1 , 3 ; 2. \u5728\u6240\u6709\u8700\u56fd\u540d\u5b57\u4e0d\u4e3anull\u82f1\u96c4\u4e2d\uff0c\u67e5\u627e\u653b\u51fb\u503c\u524d3\u540d\u7684\u82f1\u96c4\u7684\u59d3\u540d\uff0c\u653b\u51fb\u503c\u548c\u56fd\u5bb6 select name , gongji , country from sanguo where country = '\u8700\u56fd' and name is not null order by gongji DESC limit 3 ; MySQL\u91cc\u7684\u5206\u9875 \u00b6 \u6bcf\u9875\u663e\u793a5\u6761\u8bb0\u5f55\uff0c\u663e\u793a\u7b2c\u56db\u9875\u7684\u8bb0\u5f55 limit 15 , 5 ; \u7b2c\u4e00\u9875\uff1a limit 0 , 5 ; # 1, 2, 3, 4, 5 \u7b2c\u4e8c\u9875\uff1a limit 5 , 5 ; # 6, 7, 8, 9, 10 \u7b2c\u4e09\u9875\uff1a limit 10 , 5 ; # 11, 12, 13, 14, 15 \u7b2c\u56db\u9875\uff1a limit 15 , 5 ; # 16, 17, 18, 19, 20 ... \u6bcf\u9875\u663e\u793an\u6761\u8bb0\u5f55\uff0c \u663e\u793a\u7b2cm\u9875\u7684\u5185\u5bb9 limit ( m - 1 ) * n , n ; \u805a\u5408\u67e5\u8be2 \u00b6 \u805a\u5408\u51fd\u6570 \u00b6 \u5206\u7c7b avg ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u503c\u7684\u5e73\u5747\u503c sum ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u503c\u7684\u548c max ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u503c\u7684\u6700\u5927\u503c min ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u503c\u7684\u6700\u5c0f\u503c count ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u8bb0\u5f55\u6761\u6570 \u7ec3\u4e60 1. \u6240\u6709\u82f1\u96c4\u4e2d\u653b\u51fb\u529b\u6700\u5927\u503c select max ( gongji ) [ as '\u6700\u5927\u653b\u51fb' ] from sanguo ; 2. \u7edf\u8ba1id , name \u4e24\u4e2a\u5b57\u6bb5\u5206\u522b\u6709\u591a\u5c11\u6761\u8bb0\u5f55 select count ( id ), count ( name ) from sanguo ; group by\u5206\u7ec4 \u00b6 \u7ed9\u67e5\u8be2\u7684\u7ed3\u679c\u5206\u7ec4 1. \u67e5\u8be2\u8868\u4e2d\u90fd\u6709\u54ea\u4e9b\u56fd\u5bb6 select country from sanguo group by country ; 2. \u8ba1\u7b97\u6bcf\u4e2a\u56fd\u5bb6\u7684\u5e73\u5747\u653b\u51fb\u529b select country , avg ( gongji ) from sanguo group by country ; \u5206\u7ec4 \u805a\u5408 \u53bb\u91cd \u6ce8\u610f\uff1a select \u4e4b\u540e\u7684\u5b57\u6bb5\u540d\u5982\u679c\u6ca1\u6709\u5728group by\u4e4b\u540e\u51fa\u73b0\uff0c\u5219\u5fc5\u987b\u8981\u5bf9\u8be5\u5b57\u6bb5\u8fdb\u884c\u805a\u5408\u5904\u7406\uff08\u805a\u5408\u51fd\u6570\uff09 3. \u67e5\u627e\u6240\u6709\u56fd\u5bb6\u4e2d\u82f1\u96c4\u6570\u91cf\u6700\u591a\u7684\u524d\u4e24\u540d\u56fd\u5bb6\u540d\u79f0\u548c\u82f1\u96c4\u6570\u91cf select country as '\u56fd\u5bb6' , count ( id ) as '\u82f1\u96c4\u6570\u91cf' from sanguo group by country order by count ( country ) DESC limit 2 ; having\u8bed\u53e5 \u00b6 \u4f5c\u7528: \u5bf9\u67e5\u8be2\u7684\u7ed3\u679c\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u7b5b\u9009 \u7ec3\u4e60 \u627e\u51fa\u5e73\u5747\u653b\u51fb\u529b\u5927\u4e8e105\u7684\u56fd\u5bb6\u7684\u524d\u4e24\u540d\u663e\u793a\u56fd\u5bb6\u540d\u548c\u5e73\u5747\u653b\u51fb\u529b select country , avg ( gongji ) from sanguo group by country having avg ( gongji ) > 105 order by avg ( gongji ) DESC limit 2 ; \u603b\u7ed3 1. having \u8bed\u53e5\u901a\u5e38\u548cgroup by \u8bed\u53e5\u8054\u5408\u4f7f\u7528\uff0c\u8fc7\u6ee4\u53c8group by \u8bed\u53e5\u8fd4\u56de\u7684\u8bb0\u5f55\u96c6 2. where \u5173\u952e\u5b57\u53ea\u80fd\u64cd\u4f5c\u8868\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u5b57\u6bb5\uff0c having \u8bed\u53e5\u53ef\u64cd\u4f5c\u7531\u805a\u5408\u51fd\u6570\u751f\u6210\u7684\u663e\u793a\u5217 distinct \u00b6 \u4e0d\u663e\u793a\u5b57\u6bb5\u7684\u91cd\u590d\u503c select distinct \u5b57\u6bb51 , \u5b57\u6bb52 from \u8868\u540d \u7ec3\u4e60 \u8868\u4e2d\u6709\u54ea\u4e9b\u56fd\u5bb6 select ditinct country from sanguo ; \u67e5\u8be2\u8868\u4e2d\u4e00\u5171\u6709\u51e0\u4e2a\u56fd\u5bb6 select count ( distinct country ) as '\u56fd\u5bb6\u603b\u6570' from sanguo ; \u6ce8\u610f\uff1a distinct \u548c from \u4e4b\u95f4\u7684\u6240\u6709\u5b57\u6bb5\u6253\u503c\u90fd\u76f8\u540c\u624d\u4f1a\u53bb\u91cd \u67e5\u8be2\u8868\u8bb0\u5f55\u65f6\u53ef\u4ee5\u505a\u6570\u5b66\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 + - \uff0a / % \u7ec3\u4e60 \u67e5\u8be2\u65f6\u663e\u793a\u6240\u6709\u82f1\u96c4\u653b\u51fb\u529b\u7ffb\u500d select id , name , gongji * 2 , country from sanguo ; \u95ee\uff1f\uff1f\u3000\u3000 \u53ea\u8ba9\u8700\u56fd\u7684\u6218\u529b\u7ffb\u500d \u5d4c\u5957\u67e5\u8be2 \u00b6 \uff08\u5b50\u67e5\u8be2\uff09 \u5b9a\u4e49: \u628a\u5185\u5c42\u7684\u67e5\u8be2\u7ed3\u679c\u4f5c\u4e3a\u5916\u5c42\u7684\u67e5\u8be2\u6761\u4ef6 \u8bed\u6cd5 select ... from \u3000 \u8868\u540d\u3000where \u5b57\u6bb5\u540d\u3000\u8fd0\u7b97\u7b26\u3000\u503c ( select ... from \u8868\u540d\u3000where \u6761\u4ef6 ) \u7ec3\u4e60 1 / \u628a\u653b\u51fb\u503c\u5c0f\u4e8e\u5e73\u5747\u653b\u51fb\u503c\u7684\u540d\u5b57\u548c\u653b\u51fb\u503c\u663e\u793a\u51fa\u6765 \u3000 select name , gongji from sanguo \u3000 where gongji < \u3000 ( select avg ( gongji ) from sanguo ); 2 / \u627e\u51fa\u6bcf\u4e2a\u56fd\u5bb6\u4e2d\u653b\u51fb\u529b\u6700\u9ad8\u7684\u82f1\u96c4\u7684\u540d\u5b57\u548c\u653b\u51fb\u503c select name , gongji from sanguo where ( country , gongji ) in ( select country , max ( gongji ) from sanguo group by country ); \u591a\u8868\u8054\u5408\u67e5\u8be2 \u00b6 \u8fea\u5361\u5c14\u79ef\uff1a \u4e0d\u52a0where \u6761\u4ef6 select ...from \u88681, \u88682; \u8bb0\u5f55\u591a\u7684\u8868\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u53bb\u5339\u914d\u53e6\u4e00\u5f20\u8868\u7684\u6240\u6709\u8bb0\u5f55\uff0c \u5982\u679c\u4e24\u5f20\u8868\u8bb0\u5f55\u76f8\u540c\u5219\u540e\u8868\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u53bb\u5339\u914d\u524d\u8868\u7684\u6240\u6709\u8bb0\u5f55 \u52a0where \u6761\u4ef6 select ... from \u88681, \u88682 where \u6761\u4ef6; \u7ec3\u4e60 1. \u663e\u793a\u7701\u548c\u5e02\u7684\u8be6\u7ec6\u4fe1\u606f select sheng . s_name , city . c_name from sheng , city where sheng . s_id = city . cfather_id ; 2. \u663e\u793a\u7701\u5e02\u53bf\u7684\u8be6\u7ec6\u4fe1\u606f select sheng . s_name , city . c_name , xian . x_name from sheng , city , xian where xian . xfather_id = city . c_id and city . cfather_id = sheng . s_id ; \u8fde\u63a5\u67e5\u8be2 \u00b6 \u5185\u8fde\u63a5\uff08inner join\uff09 \u00b6 \u8bed\u6cd5\u683c\u5f0f select \u5b57\u6bb5\u540d1 ,... from \u88681 inner join \u88682 on \u6761\u4ef6 inner join \u88683 on \u6761\u4ef6 ; \u7ec3\u4e60 1. \u663e\u793a\u7701\u548c\u5e02\u7684\u8be6\u7ec6\u4fe1\u606f ( \u53ea\u663e\u793a\u5339\u914d\u5230\u7684 ) select sheng . s_name , city . c_name from sheng inner join city on sheng . s_id = city . cfather_id ; 2. \u663e\u793a\u7701\u5e02\u53bf\u7684\u8be6\u7ec6\u4fe1\u606f select sheng . s_name , city . c_name , xian . x_name from sheng inner join city on city . cfather_id = sheng . s_id inner join xian on xian . xfather_id = city . c_id ; \u5916\u8fde\u63a5 \u00b6 \u5de6\u8fde\u63a5\uff08left join\uff09 \u7279\u70b9: \u4ee5\u5de6\u8868\u4e3a\u4e3b\uff0c\u663e\u793a\u67e5\u8be2\u7ed3\u679c \u8bed\u6cd5\u683c\u5f0f select \u5b57\u6bb5\u540d1 ... from \u88681 left join \u88682 on \u6761\u4ef6 left join \u88683 on \u6761\u4ef6 ; \u7ec3\u4e60 1. \u663e\u793a\u7701 / \u5e02\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c \u8981\u6c42\u7701\u5168\u90e8\u663e\u793a select sheng . s_name , city . c_name from sheng left join city on city . cfather_id = sheng . s_id ; 2. \u663e\u793a\u7701 / \u5e02 / \u53bf\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c \u8981\u6c42\u7701\u5168\u90e8\u663e\u793a select sheng . s_name , city . c_name , xian . x_name from sheng left join city on sheng . s_id = city . cfather_id left join xian on city . c_id = xian . xfather_id ; select sheng . s_name , city . c_name , xian . x_name from sheng right join city on sheng . s_id = city . cfather_id right join xian on city . c_id = xian . xfather_id ; \u53f3\u8fde\u63a5\uff08right join\uff09 \u7279\u70b9: \u4ee5\u53f3\u8868\u4e3a\u4e3b\uff0c\u663e\u793a\u67e5\u8be2\u7ed3\u679c \u7528\u6cd5: \u540c\u5de6\u8fde\u63a5\u7c7b\u4f3c","title":"4. \u67e5\u8be2"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_1","text":"\u7a7a\uff1a is null \u975e\u7a7a\uff1a is not null \u7ec3\u4e60 1. \u67e5\u627e\u59d3\u540d\u4e3aNULL\u7684\u8700\u56fd\u7537\u82f1\u96c4\u7684\u4fe1\u606f select * from sanguo where name is null and country = '\u8700\u56fd' and sex = '\u7537' ; 2. \u67e5\u627e\u59d3\u540d\u4e3a '' \u7684\u82f1\u96c4\u7684\u4fe1\u606f select * from sanguo where name = '' ; 3. \u5728\u6240\u6709\u8700\u56fd\u82f1\u96c4\u4e2d\u67e5\u627e\u653b\u51fb\u529b\u5927\u4e8e150\u7684\u5e76\u4e14\u540d\u5b57\u4e0d\u4e3aNULL\u7684\u82f1\u96c4\u7684\u59d3\u540d\u3001\u653b\u51fb\u503c\u548c\u56fd\u5bb6 select name , gongji , country from sanguo where country = '\u8700\u56fd' and gongji > 150 and name is not null ; 4. \u67e5\u627e\u9b4f\u8700\u4e24\u56fd\u82f1\u96c4\u4e2d\u653b\u51fb\u529b\u5c0f\u4e8e200\u5e76\u4e14\u9632\u5fa1\u529b\u5c0f\u4e8e80\u7684\u82f1\u96c4\u4fe1\u606f select * from sanguo where country in ( '\u8700\u56fd' , '\u9b4f\u56fd' ) and gongji < 200 and fangyu < 80 ;","title":"\u5339\u914d\u7a7a\u548c\u975e\u7a7a"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_2","text":"null\uff1a\u7a7a\u503c, \u53ea\u80fd\u7528is, is not \u53bb\u5339\u914d '': \u7a7a\u5b57\u7b26\u4e32, \u53ea\u80fd\u7528= != \u53bb\u5339\u914d","title":"\u7a7a\u503c\u548c\u7a7a\u5b57\u7b26\u4e32\u7684\u533a\u522b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#like","text":"where \u5b57\u6bb5\u540d like \u8868\u8fbe\u5f0f \u8868\u8fbe\u5f0f _ : \u5339\u914d\u5355\u4e2a\u5b57\u7b26 % : \u5339\u914d0\u5230\u591a\u4e2a\u5b57\u7b26 \u7ec3\u4e60 select name from sanguo where name like '_%_' ; # \u5339\u914d name \u6709\u4e24\u4e2a\u5b57\u7b26\u4ee5\u4e0a\u7684 select name from sanguo where name like '%' ; # \u5339\u914d\u6240\u6709\u4e0d\u5305\u62ecnull select name from sanguo where name like '___' ; # \u5339\u914d name \u6709\u4e09\u4e2a\u5b57\u7b26\u7684 select name from sanguo where name like '\u8d75%' ; # \u5339\u914dname \u8d75\u5f00\u5934\u7684","title":"\u6a21\u7cca\u67e5\u8be2(like)"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#sql","text":"select ... \u805a\u5408\u51fd\u6570 from \u8868\u540d where ... group by ... having ... order by ... limit ...","title":"SQL\u9ad8\u7ea7\u67e5\u8be2"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#order-by","text":"\u4f5c\u7528 \u7ed9\u67e5\u8be2\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f \u8bed\u6cd5 order by \u5b57\u6bb5\u540d ASC / DESC ASC \uff08\u5347\u5e8f\uff09 DESC \uff08\u964d\u5e8f\uff09 \u793a\u4f8b 1. \u5c06\u6240\u6709\u82f1\u96c4\u6309\u9632\u5fa1\u503c\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f select * from sanguo order by fangyu DESC ; 2. \u5c06\u8700\u56fd\u82f1\u96c4\u6309\u653b\u51fb\u529b\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f select * from sanguo where country = '\u8700\u56fd' order by gongji DESC ; 3. \u5c06\u9b4f\u8700\u4e24\u56fd\u82f1\u96c4\u4e2d\u540d\u5b57\u4e3a3\u4e2a\u5b57\u7684\uff0c\u6309\u9632\u5fa1\u529b\u5347\u5e8f\u6392\u5e8f select * from sanguo where country in ( '\u9b4f\u56fd' , '\u8700\u56fd' ) and name like '___' order by fangyu ASC ;","title":"\u6392\u5e8f order by"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#limit","text":"\uff08\u6c38\u8fdc\u653e\u5728SQL\u547d\u4ee4\u7684\u6700\u540e\u5199\uff09 1. \u663e\u793a\u67e5\u8be2\u7684\u6761\u6570 2. \u7528\u6cd5 limit n ; --> \u663e\u793an\u6761\u8bb0\u5f55 limit m , n ; --> \u4ece\u7b2cm + 1 \u6761\u5f00\u59cb\u663e\u793a , n\u6761 limit 2 , 3 : \u663e\u793a3 4 5 \u4e09\u6761\u8bb0\u5f55 3. \u7ec3\u4e60 1. \u5728\u8700\u56fd\u82f1\u96c4\u4e2d\uff0c\u67e5\u627e\u9632\u5fa1\u503c\u5012\u6570\u7b2c\u4e8c\u540d\u5230\u5012\u6570\u7b2c\u56db\u540d\u82f1\u96c4\u7684\u59d3\u540d\uff0c\u9632\u5fa1\u503c\uff0c\u56fd\u5bb6 select name , fangyu , country from sanguo where country = '\u8700\u56fd' order by fangyu ASC limit 1 , 3 ; 2. \u5728\u6240\u6709\u8700\u56fd\u540d\u5b57\u4e0d\u4e3anull\u82f1\u96c4\u4e2d\uff0c\u67e5\u627e\u653b\u51fb\u503c\u524d3\u540d\u7684\u82f1\u96c4\u7684\u59d3\u540d\uff0c\u653b\u51fb\u503c\u548c\u56fd\u5bb6 select name , gongji , country from sanguo where country = '\u8700\u56fd' and name is not null order by gongji DESC limit 3 ;","title":"\u9650\u5236\u663e\u793a\u67e5\u8be2\u7684\u6761\u6570 limit"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#mysql","text":"\u6bcf\u9875\u663e\u793a5\u6761\u8bb0\u5f55\uff0c\u663e\u793a\u7b2c\u56db\u9875\u7684\u8bb0\u5f55 limit 15 , 5 ; \u7b2c\u4e00\u9875\uff1a limit 0 , 5 ; # 1, 2, 3, 4, 5 \u7b2c\u4e8c\u9875\uff1a limit 5 , 5 ; # 6, 7, 8, 9, 10 \u7b2c\u4e09\u9875\uff1a limit 10 , 5 ; # 11, 12, 13, 14, 15 \u7b2c\u56db\u9875\uff1a limit 15 , 5 ; # 16, 17, 18, 19, 20 ... \u6bcf\u9875\u663e\u793an\u6761\u8bb0\u5f55\uff0c \u663e\u793a\u7b2cm\u9875\u7684\u5185\u5bb9 limit ( m - 1 ) * n , n ;","title":"MySQL\u91cc\u7684\u5206\u9875"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_3","text":"","title":"\u805a\u5408\u67e5\u8be2"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_4","text":"\u5206\u7c7b avg ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u503c\u7684\u5e73\u5747\u503c sum ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u503c\u7684\u548c max ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u503c\u7684\u6700\u5927\u503c min ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u503c\u7684\u6700\u5c0f\u503c count ( \u5b57\u6bb5\u540d ) # \u6c42\u8be5\u5b57\u6bb5\u6240\u6709\u8bb0\u5f55\u6761\u6570 \u7ec3\u4e60 1. \u6240\u6709\u82f1\u96c4\u4e2d\u653b\u51fb\u529b\u6700\u5927\u503c select max ( gongji ) [ as '\u6700\u5927\u653b\u51fb' ] from sanguo ; 2. \u7edf\u8ba1id , name \u4e24\u4e2a\u5b57\u6bb5\u5206\u522b\u6709\u591a\u5c11\u6761\u8bb0\u5f55 select count ( id ), count ( name ) from sanguo ;","title":"\u805a\u5408\u51fd\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#group-by","text":"\u7ed9\u67e5\u8be2\u7684\u7ed3\u679c\u5206\u7ec4 1. \u67e5\u8be2\u8868\u4e2d\u90fd\u6709\u54ea\u4e9b\u56fd\u5bb6 select country from sanguo group by country ; 2. \u8ba1\u7b97\u6bcf\u4e2a\u56fd\u5bb6\u7684\u5e73\u5747\u653b\u51fb\u529b select country , avg ( gongji ) from sanguo group by country ; \u5206\u7ec4 \u805a\u5408 \u53bb\u91cd \u6ce8\u610f\uff1a select \u4e4b\u540e\u7684\u5b57\u6bb5\u540d\u5982\u679c\u6ca1\u6709\u5728group by\u4e4b\u540e\u51fa\u73b0\uff0c\u5219\u5fc5\u987b\u8981\u5bf9\u8be5\u5b57\u6bb5\u8fdb\u884c\u805a\u5408\u5904\u7406\uff08\u805a\u5408\u51fd\u6570\uff09 3. \u67e5\u627e\u6240\u6709\u56fd\u5bb6\u4e2d\u82f1\u96c4\u6570\u91cf\u6700\u591a\u7684\u524d\u4e24\u540d\u56fd\u5bb6\u540d\u79f0\u548c\u82f1\u96c4\u6570\u91cf select country as '\u56fd\u5bb6' , count ( id ) as '\u82f1\u96c4\u6570\u91cf' from sanguo group by country order by count ( country ) DESC limit 2 ;","title":"group by\u5206\u7ec4"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#having","text":"\u4f5c\u7528: \u5bf9\u67e5\u8be2\u7684\u7ed3\u679c\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u7b5b\u9009 \u7ec3\u4e60 \u627e\u51fa\u5e73\u5747\u653b\u51fb\u529b\u5927\u4e8e105\u7684\u56fd\u5bb6\u7684\u524d\u4e24\u540d\u663e\u793a\u56fd\u5bb6\u540d\u548c\u5e73\u5747\u653b\u51fb\u529b select country , avg ( gongji ) from sanguo group by country having avg ( gongji ) > 105 order by avg ( gongji ) DESC limit 2 ; \u603b\u7ed3 1. having \u8bed\u53e5\u901a\u5e38\u548cgroup by \u8bed\u53e5\u8054\u5408\u4f7f\u7528\uff0c\u8fc7\u6ee4\u53c8group by \u8bed\u53e5\u8fd4\u56de\u7684\u8bb0\u5f55\u96c6 2. where \u5173\u952e\u5b57\u53ea\u80fd\u64cd\u4f5c\u8868\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u5b57\u6bb5\uff0c having \u8bed\u53e5\u53ef\u64cd\u4f5c\u7531\u805a\u5408\u51fd\u6570\u751f\u6210\u7684\u663e\u793a\u5217","title":"having\u8bed\u53e5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#distinct","text":"\u4e0d\u663e\u793a\u5b57\u6bb5\u7684\u91cd\u590d\u503c select distinct \u5b57\u6bb51 , \u5b57\u6bb52 from \u8868\u540d \u7ec3\u4e60 \u8868\u4e2d\u6709\u54ea\u4e9b\u56fd\u5bb6 select ditinct country from sanguo ; \u67e5\u8be2\u8868\u4e2d\u4e00\u5171\u6709\u51e0\u4e2a\u56fd\u5bb6 select count ( distinct country ) as '\u56fd\u5bb6\u603b\u6570' from sanguo ; \u6ce8\u610f\uff1a distinct \u548c from \u4e4b\u95f4\u7684\u6240\u6709\u5b57\u6bb5\u6253\u503c\u90fd\u76f8\u540c\u624d\u4f1a\u53bb\u91cd","title":"distinct"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_5","text":"\u8fd0\u7b97\u7b26 + - \uff0a / % \u7ec3\u4e60 \u67e5\u8be2\u65f6\u663e\u793a\u6240\u6709\u82f1\u96c4\u653b\u51fb\u529b\u7ffb\u500d select id , name , gongji * 2 , country from sanguo ; \u95ee\uff1f\uff1f\u3000\u3000 \u53ea\u8ba9\u8700\u56fd\u7684\u6218\u529b\u7ffb\u500d","title":"\u67e5\u8be2\u8868\u8bb0\u5f55\u65f6\u53ef\u4ee5\u505a\u6570\u5b66\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_6","text":"\uff08\u5b50\u67e5\u8be2\uff09 \u5b9a\u4e49: \u628a\u5185\u5c42\u7684\u67e5\u8be2\u7ed3\u679c\u4f5c\u4e3a\u5916\u5c42\u7684\u67e5\u8be2\u6761\u4ef6 \u8bed\u6cd5 select ... from \u3000 \u8868\u540d\u3000where \u5b57\u6bb5\u540d\u3000\u8fd0\u7b97\u7b26\u3000\u503c ( select ... from \u8868\u540d\u3000where \u6761\u4ef6 ) \u7ec3\u4e60 1 / \u628a\u653b\u51fb\u503c\u5c0f\u4e8e\u5e73\u5747\u653b\u51fb\u503c\u7684\u540d\u5b57\u548c\u653b\u51fb\u503c\u663e\u793a\u51fa\u6765 \u3000 select name , gongji from sanguo \u3000 where gongji < \u3000 ( select avg ( gongji ) from sanguo ); 2 / \u627e\u51fa\u6bcf\u4e2a\u56fd\u5bb6\u4e2d\u653b\u51fb\u529b\u6700\u9ad8\u7684\u82f1\u96c4\u7684\u540d\u5b57\u548c\u653b\u51fb\u503c select name , gongji from sanguo where ( country , gongji ) in ( select country , max ( gongji ) from sanguo group by country );","title":"\u5d4c\u5957\u67e5\u8be2"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_7","text":"\u8fea\u5361\u5c14\u79ef\uff1a \u4e0d\u52a0where \u6761\u4ef6 select ...from \u88681, \u88682; \u8bb0\u5f55\u591a\u7684\u8868\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u53bb\u5339\u914d\u53e6\u4e00\u5f20\u8868\u7684\u6240\u6709\u8bb0\u5f55\uff0c \u5982\u679c\u4e24\u5f20\u8868\u8bb0\u5f55\u76f8\u540c\u5219\u540e\u8868\u7684\u6bcf\u4e00\u6761\u8bb0\u5f55\u53bb\u5339\u914d\u524d\u8868\u7684\u6240\u6709\u8bb0\u5f55 \u52a0where \u6761\u4ef6 select ... from \u88681, \u88682 where \u6761\u4ef6; \u7ec3\u4e60 1. \u663e\u793a\u7701\u548c\u5e02\u7684\u8be6\u7ec6\u4fe1\u606f select sheng . s_name , city . c_name from sheng , city where sheng . s_id = city . cfather_id ; 2. \u663e\u793a\u7701\u5e02\u53bf\u7684\u8be6\u7ec6\u4fe1\u606f select sheng . s_name , city . c_name , xian . x_name from sheng , city , xian where xian . xfather_id = city . c_id and city . cfather_id = sheng . s_id ;","title":"\u591a\u8868\u8054\u5408\u67e5\u8be2"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_8","text":"","title":"\u8fde\u63a5\u67e5\u8be2"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#inner-join","text":"\u8bed\u6cd5\u683c\u5f0f select \u5b57\u6bb5\u540d1 ,... from \u88681 inner join \u88682 on \u6761\u4ef6 inner join \u88683 on \u6761\u4ef6 ; \u7ec3\u4e60 1. \u663e\u793a\u7701\u548c\u5e02\u7684\u8be6\u7ec6\u4fe1\u606f ( \u53ea\u663e\u793a\u5339\u914d\u5230\u7684 ) select sheng . s_name , city . c_name from sheng inner join city on sheng . s_id = city . cfather_id ; 2. \u663e\u793a\u7701\u5e02\u53bf\u7684\u8be6\u7ec6\u4fe1\u606f select sheng . s_name , city . c_name , xian . x_name from sheng inner join city on city . cfather_id = sheng . s_id inner join xian on xian . xfather_id = city . c_id ;","title":"\u5185\u8fde\u63a5\uff08inner join\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E6%9F%A5%E8%AF%A2/#_9","text":"\u5de6\u8fde\u63a5\uff08left join\uff09 \u7279\u70b9: \u4ee5\u5de6\u8868\u4e3a\u4e3b\uff0c\u663e\u793a\u67e5\u8be2\u7ed3\u679c \u8bed\u6cd5\u683c\u5f0f select \u5b57\u6bb5\u540d1 ... from \u88681 left join \u88682 on \u6761\u4ef6 left join \u88683 on \u6761\u4ef6 ; \u7ec3\u4e60 1. \u663e\u793a\u7701 / \u5e02\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c \u8981\u6c42\u7701\u5168\u90e8\u663e\u793a select sheng . s_name , city . c_name from sheng left join city on city . cfather_id = sheng . s_id ; 2. \u663e\u793a\u7701 / \u5e02 / \u53bf\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c \u8981\u6c42\u7701\u5168\u90e8\u663e\u793a select sheng . s_name , city . c_name , xian . x_name from sheng left join city on sheng . s_id = city . cfather_id left join xian on city . c_id = xian . xfather_id ; select sheng . s_name , city . c_name , xian . x_name from sheng right join city on sheng . s_id = city . cfather_id right join xian on city . c_id = xian . xfather_id ; \u53f3\u8fde\u63a5\uff08right join\uff09 \u7279\u70b9: \u4ee5\u53f3\u8868\u4e3a\u4e3b\uff0c\u663e\u793a\u67e5\u8be2\u7ed3\u679c \u7528\u6cd5: \u540c\u5de6\u8fde\u63a5\u7c7b\u4f3c","title":"\u5916\u8fde\u63a5"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/","text":"\u7ea6\u675f \u00b6 \u4f5c\u7528: \u4fdd\u8bc1\u6570\u636e\u6253\u4e00\u81f4\u6027\uff0c\u6709\u6548\u6027 \u9ed8\u8ba4\u7ea6\u675f\uff08default\uff09 \u00b6 \u63d2\u5165\u8bb0\u5f55\u65f6, \u4e0d\u7ed9\u8be5\u5b57\u6bb5\u8d4b\u503c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c \u793a\u4f8b sex enum ( 'M' , 'F' , 'S' ) default 'S' , \u975e\u7a7a\u7ea6\u675f\uff08not null\uff09 \u00b6 \u4e0d\u5141\u8bb8\u8be5\u5b57\u6bb5\u7684\u503c\u4e3a null, \u5982 id int not null, \u7ec3\u4e60 create database db3 create table t1 ( id int not null , name varchar ( 15 ) not null , sex enum ( 'M' , 'F' , 'S' ) default 'S' , course varchar ( 20 ) not null default 'Python' ); \u5916\u952e\u7ea6\u675f\uff08foreign key\uff09 \u00b6 \u5b9a\u4e49: \u8ba9\u5f53\u524d\u8868\u7684\u5b57\u6bb5\u503c\u5728\u53e6\u4e00\u5f20\u8868\u7684\u8303\u56f4\u5185\u53bb\u9009\u62e9 \u8bed\u6cd5\u683c\u5f0f foreign key ( \u53c2\u8003\u5b57\u6bb5\u540d ) references \u4e3b\u8868\uff08\u88ab\u53c2\u8003\u5b57\u6bb5\u540d\uff09 on delete \u7ea7\u8054\u52a8\u4f5c on update \u7ea7\u8054\u52a8\u4f5c ; \u4f7f\u7528\u89c4\u5219 \u4e3b\u8868\u3001\u4ece\u8868\u5b57\u6bb5\u6570\u636e\u7c7b\u578b\u8981\u4e00\u81f4 \u4e3b\u8868\uff1a \u88ab\u53c2\u8003\u5b57\u6bb5\u662f\u4e3b\u952e \u793a\u4f8b \u88681\uff1a\u7f34\u8d39\u4fe1\u606f\u8868\uff08\u8d22\u52a1\uff09 id \u59d3\u540d \u73ed\u7ea7 \u7f34\u8d39\u91d1\u989d 1 \u5510\u4f2f\u864e AID07 300 2 \u70b9\u79cb\u9999 AID07 300 create table bjtab ( -> stu_id int , -> name varchar ( 20 ), -> money smallint ); insert into jftab values ( 1 , '\u5510\u4f2f\u864e' , 'AID07' , 300 ), ( 2 , '\u70b9\u79cb\u9999' , 'AID07' , 300 ); \u88682\uff1a\u5b66\u751f\u4fe1\u606f\u8868\uff08\u73ed\u4e3b\u4efb\uff09 stu_id \u59d3\u540d \u7f34\u8d39\u91d1\u989d 3 \u795d\u679d\u5c71 300 create table bjtab ( stu_id int , name varchar ( 20 ), money smallint , foreign key ( stu_id ) references jftab ( id ) on delete cascade on update cascade ) character set utf8 ; \u5220\u9664\u5916\u952e alter table \u8868\u540d drop foreign key \u5916\u952e\u540d ; \u5916\u952e\u540d\u7684\u67e5\u770b\u65b9\u5f0f\uff1a show create table \u8868\u540d ; \u5df2\u6709\u8868\u6dfb\u52a0\u5916\u952e alter table \u8868\u540d\u3000add foreign key ( stu_id ) references jftab ( id ) on delete \u7ea7\u8054\u52a8\u4f5c\u3000on update \u7ea7\u8054\u52a8\u4f5c ; \u7ea7\u8054\u52a8\u4f5c \u00b6 cascade \u6570\u636e\u7ea7\u8054\u5220\u9664\uff0c\u7ea7\u8054\u66f4\u65b0\uff08\u53c2\u8003\u5b57\u6bb5\uff09 restrict(\u9ed8\u8ba4) \u4ece\u8868\u4e2d\u6709\u76f8\u5173\u8054\u8bb0\u5f55\uff0c\u4e0d\u5141\u8bb8\u4e3b\u8868\u64cd\u4f5c set null \u4e3b\u8868\u5220\u9664\\\u66f4\u65b0\u65f6\uff0c\u4ece\u8868\u76f8\u5173\u8054\u8bb0\u5f55\u5b57\u6bb5\u503c\u4e3aNULL \u7d22\u5f15 \u00b6 \u5b9a\u4e49: \u5bf9\u6570\u636e\u5e93\u4e2d\u8868\u7684\u4e00\u5217\u6216\u591a\u5217\u7684\u503c\u8fdb\u884c\u6392\u5e8f\u7684\u4e00\u79cd\u7ed3\u6784\uff08Btree\uff09 \u4f18\u70b9: \u52a0\u5feb\u6570\u7684\u68c0\u7d22\u901f\u5ea6 \u7f3a\u70b9: 1. \u5f53\u4f60\u5bf9\u8868\u4e2d\u6570\u636e\u66f4\u65b0\u65f6, \u7d22\u5f15\u9700\u8981\u52a8\u6001\u7ef4\u62a4, \u5360\u7528\u7cfb\u7edf\u8d44\u6e90, \u964d\u4f4e\u6570\u636e\u7ef4\u62a4\u901f\u5ea6 2. \u5360\u7528\u7269\u7406\u5b58\u50a8\u7a7a\u95f4 \u7d22\u5f15\u793a\u4f8b 1. \u5f00\u542f\u8fd0\u884c\u65f6\u95f4\u68c0\u6d4b , mysql -> set profiling = 1 ; 2. \u6267\u884c\u67e5\u8be2\u8bed\u53e5\uff1a select name from t1 where name = 'lucy99999' ; 3. \u67e5\u770b\u6267\u884c\u65f6\u95f4 show profiles ; 4. \u5728name\u5b57\u6bb5\u521b\u5efa\u7d22\u5f15 create index name on t1 ( name ); 5. \u518d\u6b21\u6267\u884c\u67e5\u8be2\u547d\u4ee4 select name from t1 where name = 'lucy100000' ; 6. \u518d\u6b21\u67e5\u8be2\u65f6\u95f4 show profiles ; \u666e\u901a\u7d22\u5f15\uff08index\uff09 \u00b6 \u4f7f\u7528\u89c4\u5219 \u53ef\u8bbe\u7f6e\u591a\u4e2a\u5b57\u6bb5, \u5b57\u6bb5\u503c\u65e0\u7ea6\u675f \u628a\u7ecf\u5e38\u7528\u6765\u67e5\u8be2\u6253\u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u7d22\u5f15\u5b57\u6bb5 KEY\u6807\u5fd7\uff1a MUL \u521b\u5efa\u666e\u901a\u7d22\u5f15 1. \u521b\u5efa\u8868\u65f6\u521b\u5efa create table \u8868\u540d ( \u5b57\u6bb5\u540d , \u6570\u636e\u7c7b\u578b ... idenx ( \u5b57\u6bb5\u540d1 ), idenx ( \u5b57\u6bb5\u540d2 ), ... ); \u793a\u4f8b create table t2 ( id int , name varchar ( 20 ), sex enum ( 'M' , 'F' ), age tinyint , index ( id ), index ( name )); 2. \u5df2\u6709\u8868\u4e2d create index \u7d22\u5f15\u540d\u79f0 on \u8868\u540d ( \u5b57\u6bb5 ); 3. \u67e5\u770b\u7d22\u5f15 1. desc \u8868\u540d ; ---> key \u6807\u5fd7\u4e3aMUL 2. show index from \u8868\u540d \\ G ; 4. \u5220\u9664\u666e\u901a\u7d22\u5f15 drop index \u7d22\u5f15\u540d on \u8868\u540d \u552f\u4e00\u7d22\u5f15\uff08unique\uff09 \u00b6 \u4f7f\u7528\u89c4\u5219 \u53ef\u8bbe\u7f6e\u591a\u4e2a\u5b57\u6bb5 \u7ea6\u675f\uff1a\u5b57\u6bb5\u7684\u503c\u4e0d\u5141\u8bb8\u91cd\u590d, \u4f46\u53ef\u4ee5\u4e3aNULL KEY\u6807\u5fd7 UNI \u521b\u5efa\u552f\u4e00\u7d22\u5f15\uff1a \u521b\u5efa\u8868\u65f6\u521b\u5efa create table \u8868\u540d ( \u5b57\u6bb5 l\u7c7b\u578b , ... unique ( \u5b57\u6bb5 ), ... ); \u5df2\u6709\u8868\u4e2d\u521b\u5efa create unique index \u7d22\u5f15\u540d on \u8868\u540d ( \u5b57\u6bb5\u540d ); \u67e5\u770b\u5220\u9664\u540c\u666e\u901a\u7d22\u5f15 drop index \u7d22\u5f15\u540d on \u8868\u540d ; \u4e3b\u952e\u7d22\u5f15\uff08primary key\uff09 \u00b6 \u4f7f\u7528\u89c4\u5219 \u53ea\u80fd\u67091\u4e2a\u5b57\u6bb5\u4e3a\u4e3b\u952e\u5b57\u6bb5 \u7ea6\u675f\uff1a\u5b57\u6bb5\u503c\u4e0d\u5141\u8bb8\u91cd\u590d\uff0c\u4e5f\u4e0d\u80fd\u4e3aNULL KEY\u6807\u5fd7\uff1a PRI \u901a\u5e38\u8bbe\u7f6e\u8bb0\u5f55\u7f16\u53f7\u5b57\u6bb5 id, \u80fd\u591f\u552f\u4e00\u9501\u5b9a\u4e00\u6761\u8bb0\u5f55 \u521b\u5efa\u4e3b\u952e \u521b\u5efa\u8868\u65f6 id int , primary key auto_increment , name varchar ( 20 ) not null , ) auto_increment = 10000 ; ( \u9ed8\u8ba4\u4ece10000\u5f00\u59cb\u6dfb\u52a0 ) \u6216\uff08\u4e86\u89e3\uff09 id int , auto_increment , name varchar ( 20 ), ... primary key ( id , name ) # \u590d\u5408\u4e3b\u952e 2. \u5728\u5df2\u6709\u8868\u4e2d alter table \u8868\u540d add primary key ( id ); 3. \u5220\u9664\u4e3b\u952e 1. \u5148\u5220\u9664\u81ea\u589e\u957f\u5c5e\u6027\uff08modify\uff09 alter table \u8868\u540d modify id int ; 2. \u5220\u9664\u4e3b\u952e alter table \u8868\u540d drop primary key ;","title":"5. \u7ea6\u675f\u7d22\u5f15"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#_1","text":"\u4f5c\u7528: \u4fdd\u8bc1\u6570\u636e\u6253\u4e00\u81f4\u6027\uff0c\u6709\u6548\u6027","title":"\u7ea6\u675f"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#default","text":"\u63d2\u5165\u8bb0\u5f55\u65f6, \u4e0d\u7ed9\u8be5\u5b57\u6bb5\u8d4b\u503c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c \u793a\u4f8b sex enum ( 'M' , 'F' , 'S' ) default 'S' ,","title":"\u9ed8\u8ba4\u7ea6\u675f\uff08default\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#not-null","text":"\u4e0d\u5141\u8bb8\u8be5\u5b57\u6bb5\u7684\u503c\u4e3a null, \u5982 id int not null, \u7ec3\u4e60 create database db3 create table t1 ( id int not null , name varchar ( 15 ) not null , sex enum ( 'M' , 'F' , 'S' ) default 'S' , course varchar ( 20 ) not null default 'Python' );","title":"\u975e\u7a7a\u7ea6\u675f\uff08not null\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#foreign-key","text":"\u5b9a\u4e49: \u8ba9\u5f53\u524d\u8868\u7684\u5b57\u6bb5\u503c\u5728\u53e6\u4e00\u5f20\u8868\u7684\u8303\u56f4\u5185\u53bb\u9009\u62e9 \u8bed\u6cd5\u683c\u5f0f foreign key ( \u53c2\u8003\u5b57\u6bb5\u540d ) references \u4e3b\u8868\uff08\u88ab\u53c2\u8003\u5b57\u6bb5\u540d\uff09 on delete \u7ea7\u8054\u52a8\u4f5c on update \u7ea7\u8054\u52a8\u4f5c ; \u4f7f\u7528\u89c4\u5219 \u4e3b\u8868\u3001\u4ece\u8868\u5b57\u6bb5\u6570\u636e\u7c7b\u578b\u8981\u4e00\u81f4 \u4e3b\u8868\uff1a \u88ab\u53c2\u8003\u5b57\u6bb5\u662f\u4e3b\u952e \u793a\u4f8b \u88681\uff1a\u7f34\u8d39\u4fe1\u606f\u8868\uff08\u8d22\u52a1\uff09 id \u59d3\u540d \u73ed\u7ea7 \u7f34\u8d39\u91d1\u989d 1 \u5510\u4f2f\u864e AID07 300 2 \u70b9\u79cb\u9999 AID07 300 create table bjtab ( -> stu_id int , -> name varchar ( 20 ), -> money smallint ); insert into jftab values ( 1 , '\u5510\u4f2f\u864e' , 'AID07' , 300 ), ( 2 , '\u70b9\u79cb\u9999' , 'AID07' , 300 ); \u88682\uff1a\u5b66\u751f\u4fe1\u606f\u8868\uff08\u73ed\u4e3b\u4efb\uff09 stu_id \u59d3\u540d \u7f34\u8d39\u91d1\u989d 3 \u795d\u679d\u5c71 300 create table bjtab ( stu_id int , name varchar ( 20 ), money smallint , foreign key ( stu_id ) references jftab ( id ) on delete cascade on update cascade ) character set utf8 ; \u5220\u9664\u5916\u952e alter table \u8868\u540d drop foreign key \u5916\u952e\u540d ; \u5916\u952e\u540d\u7684\u67e5\u770b\u65b9\u5f0f\uff1a show create table \u8868\u540d ; \u5df2\u6709\u8868\u6dfb\u52a0\u5916\u952e alter table \u8868\u540d\u3000add foreign key ( stu_id ) references jftab ( id ) on delete \u7ea7\u8054\u52a8\u4f5c\u3000on update \u7ea7\u8054\u52a8\u4f5c ;","title":"\u5916\u952e\u7ea6\u675f\uff08foreign key\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#_2","text":"cascade \u6570\u636e\u7ea7\u8054\u5220\u9664\uff0c\u7ea7\u8054\u66f4\u65b0\uff08\u53c2\u8003\u5b57\u6bb5\uff09 restrict(\u9ed8\u8ba4) \u4ece\u8868\u4e2d\u6709\u76f8\u5173\u8054\u8bb0\u5f55\uff0c\u4e0d\u5141\u8bb8\u4e3b\u8868\u64cd\u4f5c set null \u4e3b\u8868\u5220\u9664\\\u66f4\u65b0\u65f6\uff0c\u4ece\u8868\u76f8\u5173\u8054\u8bb0\u5f55\u5b57\u6bb5\u503c\u4e3aNULL","title":"\u7ea7\u8054\u52a8\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#_3","text":"\u5b9a\u4e49: \u5bf9\u6570\u636e\u5e93\u4e2d\u8868\u7684\u4e00\u5217\u6216\u591a\u5217\u7684\u503c\u8fdb\u884c\u6392\u5e8f\u7684\u4e00\u79cd\u7ed3\u6784\uff08Btree\uff09 \u4f18\u70b9: \u52a0\u5feb\u6570\u7684\u68c0\u7d22\u901f\u5ea6 \u7f3a\u70b9: 1. \u5f53\u4f60\u5bf9\u8868\u4e2d\u6570\u636e\u66f4\u65b0\u65f6, \u7d22\u5f15\u9700\u8981\u52a8\u6001\u7ef4\u62a4, \u5360\u7528\u7cfb\u7edf\u8d44\u6e90, \u964d\u4f4e\u6570\u636e\u7ef4\u62a4\u901f\u5ea6 2. \u5360\u7528\u7269\u7406\u5b58\u50a8\u7a7a\u95f4 \u7d22\u5f15\u793a\u4f8b 1. \u5f00\u542f\u8fd0\u884c\u65f6\u95f4\u68c0\u6d4b , mysql -> set profiling = 1 ; 2. \u6267\u884c\u67e5\u8be2\u8bed\u53e5\uff1a select name from t1 where name = 'lucy99999' ; 3. \u67e5\u770b\u6267\u884c\u65f6\u95f4 show profiles ; 4. \u5728name\u5b57\u6bb5\u521b\u5efa\u7d22\u5f15 create index name on t1 ( name ); 5. \u518d\u6b21\u6267\u884c\u67e5\u8be2\u547d\u4ee4 select name from t1 where name = 'lucy100000' ; 6. \u518d\u6b21\u67e5\u8be2\u65f6\u95f4 show profiles ;","title":"\u7d22\u5f15"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#index","text":"\u4f7f\u7528\u89c4\u5219 \u53ef\u8bbe\u7f6e\u591a\u4e2a\u5b57\u6bb5, \u5b57\u6bb5\u503c\u65e0\u7ea6\u675f \u628a\u7ecf\u5e38\u7528\u6765\u67e5\u8be2\u6253\u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u7d22\u5f15\u5b57\u6bb5 KEY\u6807\u5fd7\uff1a MUL \u521b\u5efa\u666e\u901a\u7d22\u5f15 1. \u521b\u5efa\u8868\u65f6\u521b\u5efa create table \u8868\u540d ( \u5b57\u6bb5\u540d , \u6570\u636e\u7c7b\u578b ... idenx ( \u5b57\u6bb5\u540d1 ), idenx ( \u5b57\u6bb5\u540d2 ), ... ); \u793a\u4f8b create table t2 ( id int , name varchar ( 20 ), sex enum ( 'M' , 'F' ), age tinyint , index ( id ), index ( name )); 2. \u5df2\u6709\u8868\u4e2d create index \u7d22\u5f15\u540d\u79f0 on \u8868\u540d ( \u5b57\u6bb5 ); 3. \u67e5\u770b\u7d22\u5f15 1. desc \u8868\u540d ; ---> key \u6807\u5fd7\u4e3aMUL 2. show index from \u8868\u540d \\ G ; 4. \u5220\u9664\u666e\u901a\u7d22\u5f15 drop index \u7d22\u5f15\u540d on \u8868\u540d","title":"\u666e\u901a\u7d22\u5f15\uff08index\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#unique","text":"\u4f7f\u7528\u89c4\u5219 \u53ef\u8bbe\u7f6e\u591a\u4e2a\u5b57\u6bb5 \u7ea6\u675f\uff1a\u5b57\u6bb5\u7684\u503c\u4e0d\u5141\u8bb8\u91cd\u590d, \u4f46\u53ef\u4ee5\u4e3aNULL KEY\u6807\u5fd7 UNI \u521b\u5efa\u552f\u4e00\u7d22\u5f15\uff1a \u521b\u5efa\u8868\u65f6\u521b\u5efa create table \u8868\u540d ( \u5b57\u6bb5 l\u7c7b\u578b , ... unique ( \u5b57\u6bb5 ), ... ); \u5df2\u6709\u8868\u4e2d\u521b\u5efa create unique index \u7d22\u5f15\u540d on \u8868\u540d ( \u5b57\u6bb5\u540d ); \u67e5\u770b\u5220\u9664\u540c\u666e\u901a\u7d22\u5f15 drop index \u7d22\u5f15\u540d on \u8868\u540d ;","title":"\u552f\u4e00\u7d22\u5f15\uff08unique\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%BA%A6%E6%9D%9F%E7%B4%A2%E5%BC%95/#primary-key","text":"\u4f7f\u7528\u89c4\u5219 \u53ea\u80fd\u67091\u4e2a\u5b57\u6bb5\u4e3a\u4e3b\u952e\u5b57\u6bb5 \u7ea6\u675f\uff1a\u5b57\u6bb5\u503c\u4e0d\u5141\u8bb8\u91cd\u590d\uff0c\u4e5f\u4e0d\u80fd\u4e3aNULL KEY\u6807\u5fd7\uff1a PRI \u901a\u5e38\u8bbe\u7f6e\u8bb0\u5f55\u7f16\u53f7\u5b57\u6bb5 id, \u80fd\u591f\u552f\u4e00\u9501\u5b9a\u4e00\u6761\u8bb0\u5f55 \u521b\u5efa\u4e3b\u952e \u521b\u5efa\u8868\u65f6 id int , primary key auto_increment , name varchar ( 20 ) not null , ) auto_increment = 10000 ; ( \u9ed8\u8ba4\u4ece10000\u5f00\u59cb\u6dfb\u52a0 ) \u6216\uff08\u4e86\u89e3\uff09 id int , auto_increment , name varchar ( 20 ), ... primary key ( id , name ) # \u590d\u5408\u4e3b\u952e 2. \u5728\u5df2\u6709\u8868\u4e2d alter table \u8868\u540d add primary key ( id ); 3. \u5220\u9664\u4e3b\u952e 1. \u5148\u5220\u9664\u81ea\u589e\u957f\u5c5e\u6027\uff08modify\uff09 alter table \u8868\u540d modify id int ; 2. \u5220\u9664\u4e3b\u952e alter table \u8868\u540d drop primary key ;","title":"\u4e3b\u952e\u7d22\u5f15\uff08primary key\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/","text":"\u9501 \u00b6 \u5b9a\u4e49: \u89e3\u51b3\u5ba2\u6237\u7aef\u5e76\u53d1\u8bbf\u95ee\u7684\u51b2\u7a81\u95ee\u9898 \u8bfb\u9501(\u5171\u4eab\u9501) \u00b6 \u67e5\u8be2(select): \u52a0\u8bfb\u9501\u4e4b\u540e\uff0c\u522b\u4eba\u4e0d\u80fd\u66f4\u6539\u8868\u8bb0\u5f55\uff0c\u4f46\u53ef\u4ee5\u8fdb\u884c\u67e5\u8be2 \u5199\u9501(\u4e92\u65a5\u9501\uff0c \u6392\u4ed6\u9501) \u00b6 \u66f4\u65b0(update): \u52a0\u5199\u9501\u4e4b\u540e\u522b\u4eba\u4e0d\u80fd\u67e5\uff0c\u4e0d\u80fd\u6539 \u9501\u7c92\u5ea6 1. \u884c\u7ea7\u9501\uff08Innodb\uff09 select : \u52a0\u8bfb\u9501\uff0c\u95011\u884c update : \u52a0\u5199\u9501\uff0c\u95011\u884c 2. \u8868\u7ea7\u9501\uff08MyISAM\uff09 select : \u52a0\u8bfb\u9501\uff0c\u9501\u4e00\u5f20\u8868 update : \u52a0\u5199\u9501\uff0c\u9501\u4e00\u5f20\u8868 \u5b58\u50a8\u5f15\u64ce \u00b6 \uff08engine\uff1a \u5904\u7406\u8868\u7684\u5904\u7406\u5668\uff09 \u57fa\u672c\u64cd\u4f5c\u547d\u4ee4 \u00b6 1. \u67e5\u770b\u6240\u6709\u6253\u5b58\u50a8\u5f15\u64ce show engines ; 2. \u67e5\u770b\u5df2\u6709\u8868\u7684\u5b58\u50a8\u5f15\u64ce show create table \u8868\u540d ; 3. \u521b\u5efa\u8868\u65f6\u6307\u5b9a\u5b58\u50a8\u5f15\u64ce create table \u8868\u540d (...) engine = MyISAM ; 4. \u66f4\u6539\u5df2\u6709\u8868\u7684\u5b58\u50a8\u5f15\u64ce alter table \u8868\u540d engine = MyISAM ; \u5e38\u7528\u7684\u5b58\u50a8\u5f15\u64ce\u7684\u7279\u70b9 \u00b6 InnoDB\u7279\u70b9 \u00b6 \u652f\u6301\u4e8b\u52a1/\u5916\u952e/\u884c\u7ea7\u9501 \u5171\u4eab\u8868\u7a7a\u95f4 \u8868\u540d.frm: \u8868\u7ed3\u6784\u548c\u7d22\u5f15\u4fe1\u606f \u8868\u540d.idb: \u8868\u8bb0\u5f55 MyISAM\u7279\u70b9 \u00b6 \u652f\u6301\u8868\u7ea7\u9501 \u72ec\u4eab\u8868\u7a7a\u95f4 \u8868\u540d.frm \u8868\u7ed3\u6784 \u8868\u540d.MYD \u8868\u8bb0\u5f55 \u8868\u540d.MYI \u7d22\u5f15\u4fe1\u606f Memory\u7279\u70b9 \u00b6 \u6570\u636e\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u901f\u5ea6\u5feb \u670d\u52a1\u5668\u91cd\u542f\uff0cMySQL \u670d\u52a1\u91cd\u542f\u540e\u8868\u8bb0\u5f55\u6d88\u5931 \u5982\u4f55\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u5b58\u50a8\u5f15\u64ce \u00b6 \u6267\u884c\u67e5\u8be2\u64cd\u4f5c\u591a\u7684\u8868\uff0c\u4f7f\u7528MyISAM(\u4f7f\u7528InnoDB\u6d6a\u8d39\u8d44\u6e90) \u6267\u884c\u5199\u64cd\u4f5c\u591a\u7684\u8868\uff0c\u4f7f\u7528InnoDB MySQL\u7528\u6237\u8d26\u6237\u7684\u7ba1\u7406 \u00b6 \u5f00\u542fMySQL\u7684\u8fdc\u7a0b\u8fde\u63a5 \uff08\u6539\u914d\u7f6e\u6587\u4ef6\uff09 sudo -i cd /etc/mysql/mysql.conf.d/ cp mysqld.cnf/mysqld.cnf.bak # \u5907\u4efd vim mysqld.cnf #bind-address=127.0.0.1 \u6309a -> \u6539\u5185\u5bb9 -> esc -> shift + : wq \u628a\u524d\u9762\u7684 #\u53bb\u6389\uff0c\u4fdd\u5b58\u9000\u51fa /etc/init.d/mysql restart \u7528root\u7528\u6237\u6dfb\u52a0\u6388\u6743\u7528\u6237 \u7528root\u7528\u6237\u767b\u5f55MySQL mysql -uroot -p \u6388\u6743 mysql > grant \u6743\u9650\u5217\u8868 on \u5e93\u540d . \u8868\u540d to '\u7528\u6237\u540d' @'%' identified by '\u5bc6\u7801' with grant option ; \u6743\u9650\u5217\u8868 all privileges \u6240\u6709\u7684\u6743\u9650 select \u67e5\u8be2 update \u66f4\u65b0 \u5e93\u540d . \u8868\u540d db4 . * / * . * ( \u6240\u6709\u5e93\u7684\u6240\u6709\u8868 ) \u793a\u4f8b \u00b6 1. \u6dfb\u52a0\u4e00\u4e2a\u6388\u6743\u7528\u6237tiger\uff0c \u5bc6\u7801123 , \u5bf9\u6240\u6709\u5e93\u7684\u6240\u6709\u8868\u6709\u6240\u6709\u7684\u6743\u9650\uff0c\u53ef\u4ee5\u4ece\u4efb\u4f55ip\u8fde\u63a5\u6570\u636e\u5e93 grant all privileges on * . * to 'tiger' @'%' identified by '123' with grant option ; 2. \u6dfb\u52a0\u6388\u6743\u7528\u6237rabbit , \u5bc6\u7801123 , \u5bf9MOSHOU\u5e93\u6240\u6709\u8868\u53ea\u6709\u67e5\u8be2\u6743\u9650\uff0c\u53ef\u4ee5\u4ece\u4efb\u4f55ip\u8fde\u63a5 grant select on MOSHOU . * to 'rabbit' @'%' identified by '123' with grant option ;","title":"9. \u8865\u5145\u77e5\u8bc6"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_1","text":"\u5b9a\u4e49: \u89e3\u51b3\u5ba2\u6237\u7aef\u5e76\u53d1\u8bbf\u95ee\u7684\u51b2\u7a81\u95ee\u9898","title":"\u9501"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_2","text":"\u67e5\u8be2(select): \u52a0\u8bfb\u9501\u4e4b\u540e\uff0c\u522b\u4eba\u4e0d\u80fd\u66f4\u6539\u8868\u8bb0\u5f55\uff0c\u4f46\u53ef\u4ee5\u8fdb\u884c\u67e5\u8be2","title":"\u8bfb\u9501(\u5171\u4eab\u9501)"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_3","text":"\u66f4\u65b0(update): \u52a0\u5199\u9501\u4e4b\u540e\u522b\u4eba\u4e0d\u80fd\u67e5\uff0c\u4e0d\u80fd\u6539 \u9501\u7c92\u5ea6 1. \u884c\u7ea7\u9501\uff08Innodb\uff09 select : \u52a0\u8bfb\u9501\uff0c\u95011\u884c update : \u52a0\u5199\u9501\uff0c\u95011\u884c 2. \u8868\u7ea7\u9501\uff08MyISAM\uff09 select : \u52a0\u8bfb\u9501\uff0c\u9501\u4e00\u5f20\u8868 update : \u52a0\u5199\u9501\uff0c\u9501\u4e00\u5f20\u8868","title":"\u5199\u9501(\u4e92\u65a5\u9501\uff0c \u6392\u4ed6\u9501)"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_4","text":"\uff08engine\uff1a \u5904\u7406\u8868\u7684\u5904\u7406\u5668\uff09","title":"\u5b58\u50a8\u5f15\u64ce"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_5","text":"1. \u67e5\u770b\u6240\u6709\u6253\u5b58\u50a8\u5f15\u64ce show engines ; 2. \u67e5\u770b\u5df2\u6709\u8868\u7684\u5b58\u50a8\u5f15\u64ce show create table \u8868\u540d ; 3. \u521b\u5efa\u8868\u65f6\u6307\u5b9a\u5b58\u50a8\u5f15\u64ce create table \u8868\u540d (...) engine = MyISAM ; 4. \u66f4\u6539\u5df2\u6709\u8868\u7684\u5b58\u50a8\u5f15\u64ce alter table \u8868\u540d engine = MyISAM ;","title":"\u57fa\u672c\u64cd\u4f5c\u547d\u4ee4"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_6","text":"","title":"\u5e38\u7528\u7684\u5b58\u50a8\u5f15\u64ce\u7684\u7279\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#innodb","text":"\u652f\u6301\u4e8b\u52a1/\u5916\u952e/\u884c\u7ea7\u9501 \u5171\u4eab\u8868\u7a7a\u95f4 \u8868\u540d.frm: \u8868\u7ed3\u6784\u548c\u7d22\u5f15\u4fe1\u606f \u8868\u540d.idb: \u8868\u8bb0\u5f55","title":"InnoDB\u7279\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#myisam","text":"\u652f\u6301\u8868\u7ea7\u9501 \u72ec\u4eab\u8868\u7a7a\u95f4 \u8868\u540d.frm \u8868\u7ed3\u6784 \u8868\u540d.MYD \u8868\u8bb0\u5f55 \u8868\u540d.MYI \u7d22\u5f15\u4fe1\u606f","title":"MyISAM\u7279\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#memory","text":"\u6570\u636e\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u901f\u5ea6\u5feb \u670d\u52a1\u5668\u91cd\u542f\uff0cMySQL \u670d\u52a1\u91cd\u542f\u540e\u8868\u8bb0\u5f55\u6d88\u5931","title":"Memory\u7279\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_7","text":"\u6267\u884c\u67e5\u8be2\u64cd\u4f5c\u591a\u7684\u8868\uff0c\u4f7f\u7528MyISAM(\u4f7f\u7528InnoDB\u6d6a\u8d39\u8d44\u6e90) \u6267\u884c\u5199\u64cd\u4f5c\u591a\u7684\u8868\uff0c\u4f7f\u7528InnoDB","title":"\u5982\u4f55\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u5b58\u50a8\u5f15\u64ce"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#mysql","text":"\u5f00\u542fMySQL\u7684\u8fdc\u7a0b\u8fde\u63a5 \uff08\u6539\u914d\u7f6e\u6587\u4ef6\uff09 sudo -i cd /etc/mysql/mysql.conf.d/ cp mysqld.cnf/mysqld.cnf.bak # \u5907\u4efd vim mysqld.cnf #bind-address=127.0.0.1 \u6309a -> \u6539\u5185\u5bb9 -> esc -> shift + : wq \u628a\u524d\u9762\u7684 #\u53bb\u6389\uff0c\u4fdd\u5b58\u9000\u51fa /etc/init.d/mysql restart \u7528root\u7528\u6237\u6dfb\u52a0\u6388\u6743\u7528\u6237 \u7528root\u7528\u6237\u767b\u5f55MySQL mysql -uroot -p \u6388\u6743 mysql > grant \u6743\u9650\u5217\u8868 on \u5e93\u540d . \u8868\u540d to '\u7528\u6237\u540d' @'%' identified by '\u5bc6\u7801' with grant option ; \u6743\u9650\u5217\u8868 all privileges \u6240\u6709\u7684\u6743\u9650 select \u67e5\u8be2 update \u66f4\u65b0 \u5e93\u540d . \u8868\u540d db4 . * / * . * ( \u6240\u6709\u5e93\u7684\u6240\u6709\u8868 )","title":"MySQL\u7528\u6237\u8d26\u6237\u7684\u7ba1\u7406"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/#_8","text":"1. \u6dfb\u52a0\u4e00\u4e2a\u6388\u6743\u7528\u6237tiger\uff0c \u5bc6\u7801123 , \u5bf9\u6240\u6709\u5e93\u7684\u6240\u6709\u8868\u6709\u6240\u6709\u7684\u6743\u9650\uff0c\u53ef\u4ee5\u4ece\u4efb\u4f55ip\u8fde\u63a5\u6570\u636e\u5e93 grant all privileges on * . * to 'tiger' @'%' identified by '123' with grant option ; 2. \u6dfb\u52a0\u6388\u6743\u7528\u6237rabbit , \u5bc6\u7801123 , \u5bf9MOSHOU\u5e93\u6240\u6709\u8868\u53ea\u6709\u67e5\u8be2\u6743\u9650\uff0c\u53ef\u4ee5\u4ece\u4efb\u4f55ip\u8fde\u63a5 grant select on MOSHOU . * to 'rabbit' @'%' identified by '123' with grant option ;","title":"\u793a\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A8%E6%93%8D%E4%BD%9C/","text":"\u8868\u5b57\u6bb5\u64cd\u4f5c \u00b6 \u8bed\u6cd5\uff1a alter table \u8868\u540d ...; \u6dfb\u52a0\u5b57\u6bb5(add) alter table \u8868\u540d add \u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b ; \u9ed8\u8ba4\u653e\u5728\u6700\u540e alter table \u8868\u540d add \u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b first ; \u9ed8\u8ba4\u6dfb\u52a0\u5230\u6700\u524d alter table \u8868\u540d add \u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b after \u5b57\u6bb5\u540d ; \u653e\u5728\u67d0\u4e2a\u5b57\u6bb5\u524d \u5220\u9664\u5b57\u6bb5\uff08drop\uff09 alter table \u8868\u540d drop \u5b57\u6bb5\u540d ; \u4fee\u6539\u5b57\u6bb5\u6570\u636e\u7c7b\u578b\uff08modify\uff09 alter table \u8868\u540d modify \u5b57\u6bb5\u540d \u65b0\u6570\u636e\u7c7b\u578b ; \u4fee\u6539\u4f1a\u53d7\u5230\u8868\u4e2d\u5df2\u6709\u6570\u636e\u7684\u9650\u5236 \u4fee\u6539\u8868\u540d\uff08rename\uff09 alter table \u8868\u540d rename \u65b0\u8868\u540d ; \u4fee\u6539\u5b57\u6bb5\u540d\uff08change\uff09 alter table \u8868\u540d change \u539f\u5b57\u6bb5\u540d \u65b0\u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b ; \u7ec3\u4e60 1. \u5728db2\u5e93\u4e2d \u521b\u5efa\u8868 stutab\uff0c \u5b57\u6bb5\u67093\u4e2a ; name , age , phnumber ( bigint ) create table stutab ( name char , age int , phnumber bigint ); 2. \u5728\u8868\u4e2d\u7b2c\u4e00\u5217\u6dfb\u52a0\u4e00\u4e2aid \u5b57\u6bb5 alter table stutab add id int ( 3 ) zerofill first ; 3. \u628a phnumber \u7684\u6570\u636e\u7c7b\u578b\u6539\u4e3a char ( 11 ) alter table stutab change phnumber phnumber char ( 11 ); 4. \u5728\u8868\u4e2d\u6700\u540e\u4e00\u5217\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bb5 address alter table stutab add address varchar ( 20 ); 5. \u5220\u9664\u8868\u4e2d\u7684age \u5b57\u6bb5 alter table stutab drop age ; \u8868\u8bb0\u5f55\u7684\u5220\u9664 \u00b6 \u5220\u9664\u8868\u8bb0\u5f55\uff08delete\uff09 delete from \u8868\u540d where \u6761\u4ef6 ; \u6ce8\u610f \u4e00\u5b9a\u8981\u52a0where\u6761\u4ef6\uff0c \u4e0d\u52a0\u6761\u4ef6\u5168\u90e8\u5220\u9664 \u66f4\u6539\u8868\u8bb0\u5f55 \u00b6 update \u8868\u540d set \u5b57\u6bb51 = \u503c1 , \u5b57\u6bb52 = \u503c2 , where \u6761\u4ef6 ; \u8fd0\u7b97\u7b26\u64cd\u4f5c \u00b6 \u6570\u503c\u6bd4\u8f83 && \u5b57\u7b26\u6bd4\u8f83 && \u903b\u8f91\u6bd4\u8f83 \u6570\u503c\u6bd4\u8f83\uff1a = \uff01 = > >= < <= \u5b57\u7b26\u6bd4\u8f83\uff1a = \uff01 = \u903b\u8f91\u6bd4\u8f83\uff1a and or \u8303\u56f4\u5185\u6bd4\u8f83 between \u503c1 and \u503c2 in ( \u503c1 , \u503c2 ) not in ( \u503c1 , \u503c2 ) \u7ec3\u4e60 1. \u67e5\u627e\u653b\u51fb\u529b\u9ad8\u4e8e150\u7684\u82f1\u96c4\u7684\u540d\u5b57\u548c\u653b\u51fb\u529b select name , gongji from sanguo where gongji > 150 ; 2. \u5c06\u8d75\u4e91\u7684\u653b\u51fb\u529b\u8bbe\u7f6e\u4e3a360 , \u9632\u5fa1\u529b\u8bbe\u7f6e\u4e3a88 , \u540d\u5b57\u8bbe\u7f6e\u4e3a\u8d75\u5b50\u9f99 update sanguo set gongji = 360 , fangyu = 88 , name = '\u8d75\u5b50\u9f99' where name = '\u8d75\u4e91' ; 3. \u5c06\u5434\u56fd\u82f1\u96c4\u4e2d\u7684\u653b\u51fb\u529b\u503c\u4e3a110\u7684\u82f1\u96c4\u653b\u51fb\u503c\u6539\u4e3a100 , \u9632\u5fa1\u6539\u4e3a60 update sanguo set gongji = 100 , fangyu = 60 where country = '\u5434\u56fd' and gongji = 110 ; 4. \u67e5\u627e\u8700\u56fd\u548c\u9b4f\u56fd\u7684\u82f1\u96c4\u4fe1\u606f select * from sanguo where country = '\u8700\u56fd' or country = '\u9b4f\u56fd' ; 5. \u627e\u51fa\u653b\u51fb\u529b\u9ad8\u4e8e200\u7684\u8700\u56fd\u82f1\u96c4\u7684\u540d\u5b57\uff0c\u653b\u51fb\u529b\u503c\u548c\u56fd\u5bb6 select name , gongji , country from sanguo where gongji > 200 and country = '\u8700\u56fd' ; 6. \u67e5\u627e\u653b\u51fb\u503c100 - 200 \u4e4b\u95f4\u7684\u8700\u56fd\u82f1\u96c4\u7684\u6570\u636e select * from sanguo where ( gongji between 100 and 200 ) and country = '\u8700\u56fd' ; 7. \u67e5\u627e\u8700\u56fd\u548c\u5434\u56fd\u4ee5\u5916\u7684\u56fd\u5bb6\u7684\u5973\u82f1\u96c4\u7684\u4fe1\u606f select * from sanguo where country not in ( '\u8700\u56fd' , '\u5434\u56fd' ) and sex = '\u5973' ; 8. \u67e5\u627eid\u4e3a1 , 3 \u6216 5 \u7684\u8700\u56fd\u82f1\u96c4\u548c\u8c82\u8749\u7684\u4fe1\u606f select * from sanguo where ( id in ( 1 , 3 , 5 ) and country = '\u8700\u56fd' ) or name = '\u8c82\u8749' ; \u8868\u5b57\u6bb5\u548c\u8868\u8bb0\u5f55\u7684\u64cd\u4f5c \u00b6 \u8868\u5b57\u6bb5 ( alter table \u8868\u540d ) \u8868\u8bb0\u5f55 () \u589e add insert into \u8868\u540d \u5220 drop delete from \u8868\u540d where \u6539 modify update \u8868\u540d set \u5b57\u6bb5 = \u503c where \u67e5 desc \u8868\u540d select \u5b57\u6bb5 from \u8868\u540d where","title":"3. \u8868\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A8%E6%93%8D%E4%BD%9C/#_1","text":"\u8bed\u6cd5\uff1a alter table \u8868\u540d ...; \u6dfb\u52a0\u5b57\u6bb5(add) alter table \u8868\u540d add \u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b ; \u9ed8\u8ba4\u653e\u5728\u6700\u540e alter table \u8868\u540d add \u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b first ; \u9ed8\u8ba4\u6dfb\u52a0\u5230\u6700\u524d alter table \u8868\u540d add \u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b after \u5b57\u6bb5\u540d ; \u653e\u5728\u67d0\u4e2a\u5b57\u6bb5\u524d \u5220\u9664\u5b57\u6bb5\uff08drop\uff09 alter table \u8868\u540d drop \u5b57\u6bb5\u540d ; \u4fee\u6539\u5b57\u6bb5\u6570\u636e\u7c7b\u578b\uff08modify\uff09 alter table \u8868\u540d modify \u5b57\u6bb5\u540d \u65b0\u6570\u636e\u7c7b\u578b ; \u4fee\u6539\u4f1a\u53d7\u5230\u8868\u4e2d\u5df2\u6709\u6570\u636e\u7684\u9650\u5236 \u4fee\u6539\u8868\u540d\uff08rename\uff09 alter table \u8868\u540d rename \u65b0\u8868\u540d ; \u4fee\u6539\u5b57\u6bb5\u540d\uff08change\uff09 alter table \u8868\u540d change \u539f\u5b57\u6bb5\u540d \u65b0\u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b ; \u7ec3\u4e60 1. \u5728db2\u5e93\u4e2d \u521b\u5efa\u8868 stutab\uff0c \u5b57\u6bb5\u67093\u4e2a ; name , age , phnumber ( bigint ) create table stutab ( name char , age int , phnumber bigint ); 2. \u5728\u8868\u4e2d\u7b2c\u4e00\u5217\u6dfb\u52a0\u4e00\u4e2aid \u5b57\u6bb5 alter table stutab add id int ( 3 ) zerofill first ; 3. \u628a phnumber \u7684\u6570\u636e\u7c7b\u578b\u6539\u4e3a char ( 11 ) alter table stutab change phnumber phnumber char ( 11 ); 4. \u5728\u8868\u4e2d\u6700\u540e\u4e00\u5217\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bb5 address alter table stutab add address varchar ( 20 ); 5. \u5220\u9664\u8868\u4e2d\u7684age \u5b57\u6bb5 alter table stutab drop age ;","title":"\u8868\u5b57\u6bb5\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A8%E6%93%8D%E4%BD%9C/#_2","text":"\u5220\u9664\u8868\u8bb0\u5f55\uff08delete\uff09 delete from \u8868\u540d where \u6761\u4ef6 ; \u6ce8\u610f \u4e00\u5b9a\u8981\u52a0where\u6761\u4ef6\uff0c \u4e0d\u52a0\u6761\u4ef6\u5168\u90e8\u5220\u9664","title":"\u8868\u8bb0\u5f55\u7684\u5220\u9664"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A8%E6%93%8D%E4%BD%9C/#_3","text":"update \u8868\u540d set \u5b57\u6bb51 = \u503c1 , \u5b57\u6bb52 = \u503c2 , where \u6761\u4ef6 ;","title":"\u66f4\u6539\u8868\u8bb0\u5f55"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A8%E6%93%8D%E4%BD%9C/#_4","text":"\u6570\u503c\u6bd4\u8f83 && \u5b57\u7b26\u6bd4\u8f83 && \u903b\u8f91\u6bd4\u8f83 \u6570\u503c\u6bd4\u8f83\uff1a = \uff01 = > >= < <= \u5b57\u7b26\u6bd4\u8f83\uff1a = \uff01 = \u903b\u8f91\u6bd4\u8f83\uff1a and or \u8303\u56f4\u5185\u6bd4\u8f83 between \u503c1 and \u503c2 in ( \u503c1 , \u503c2 ) not in ( \u503c1 , \u503c2 ) \u7ec3\u4e60 1. \u67e5\u627e\u653b\u51fb\u529b\u9ad8\u4e8e150\u7684\u82f1\u96c4\u7684\u540d\u5b57\u548c\u653b\u51fb\u529b select name , gongji from sanguo where gongji > 150 ; 2. \u5c06\u8d75\u4e91\u7684\u653b\u51fb\u529b\u8bbe\u7f6e\u4e3a360 , \u9632\u5fa1\u529b\u8bbe\u7f6e\u4e3a88 , \u540d\u5b57\u8bbe\u7f6e\u4e3a\u8d75\u5b50\u9f99 update sanguo set gongji = 360 , fangyu = 88 , name = '\u8d75\u5b50\u9f99' where name = '\u8d75\u4e91' ; 3. \u5c06\u5434\u56fd\u82f1\u96c4\u4e2d\u7684\u653b\u51fb\u529b\u503c\u4e3a110\u7684\u82f1\u96c4\u653b\u51fb\u503c\u6539\u4e3a100 , \u9632\u5fa1\u6539\u4e3a60 update sanguo set gongji = 100 , fangyu = 60 where country = '\u5434\u56fd' and gongji = 110 ; 4. \u67e5\u627e\u8700\u56fd\u548c\u9b4f\u56fd\u7684\u82f1\u96c4\u4fe1\u606f select * from sanguo where country = '\u8700\u56fd' or country = '\u9b4f\u56fd' ; 5. \u627e\u51fa\u653b\u51fb\u529b\u9ad8\u4e8e200\u7684\u8700\u56fd\u82f1\u96c4\u7684\u540d\u5b57\uff0c\u653b\u51fb\u529b\u503c\u548c\u56fd\u5bb6 select name , gongji , country from sanguo where gongji > 200 and country = '\u8700\u56fd' ; 6. \u67e5\u627e\u653b\u51fb\u503c100 - 200 \u4e4b\u95f4\u7684\u8700\u56fd\u82f1\u96c4\u7684\u6570\u636e select * from sanguo where ( gongji between 100 and 200 ) and country = '\u8700\u56fd' ; 7. \u67e5\u627e\u8700\u56fd\u548c\u5434\u56fd\u4ee5\u5916\u7684\u56fd\u5bb6\u7684\u5973\u82f1\u96c4\u7684\u4fe1\u606f select * from sanguo where country not in ( '\u8700\u56fd' , '\u5434\u56fd' ) and sex = '\u5973' ; 8. \u67e5\u627eid\u4e3a1 , 3 \u6216 5 \u7684\u8700\u56fd\u82f1\u96c4\u548c\u8c82\u8749\u7684\u4fe1\u606f select * from sanguo where ( id in ( 1 , 3 , 5 ) and country = '\u8700\u56fd' ) or name = '\u8c82\u8749' ;","title":"\u8fd0\u7b97\u7b26\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%A1%A8%E6%93%8D%E4%BD%9C/#_5","text":"\u8868\u5b57\u6bb5 ( alter table \u8868\u540d ) \u8868\u8bb0\u5f55 () \u589e add insert into \u8868\u540d \u5220 drop delete from \u8868\u540d where \u6539 modify update \u8868\u540d set \u5b57\u6bb5 = \u503c where \u67e5 desc \u8868\u540d select \u5b57\u6bb5 from \u8868\u540d where","title":"\u8868\u5b57\u6bb5\u548c\u8868\u8bb0\u5f55\u7684\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%B0%83%E4%BC%98%E5%92%8C%E4%BA%8B%E5%8A%A1/","text":"MySQL \u8c03\u4f18 \u00b6 \u521b\u5efa\u7d22\u5f15 \u00b6 \u5728select / where / order by \u5e38\u6d89\u53ca\u5230\u7684\u5b57\u6bb5\u4e0a\u5efa\u7acb\u7d22\u5f15 \u9009\u62e9\u5408\u9002\u7684\u5b58\u50a8\u5f15\u64ce \u00b6 \u8bfb\u64cd\u4f5c\u591a : MyISAM \u5199\u64cd\u4f5c\u591a : InnoDB SQL\u8bed\u53e5\u4f18\u5316 \u00b6 (\u907f\u514d\u5168\u8868\u626b\u63cf) 1. where \u5b50\u53e5\u5c3d\u91cf\u4e0d\u4f7f\u7528 != , \u5426\u5219\u653e\u5f03\u7d22\u5f15\uff0c\u5168\u8868\u626b\u63cf 2. \u5c3d\u91cf\u907f\u514dNULL\u5224\u65ad\uff0c \u5168\u8868\u626b\u9762 \u4f18\u5316\u524d\uff1a select number from t1 where number is null ; \u4f18\u5316\u540e\uff1a \u5728number\u5b57\u6bb5\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a0 , \u786e\u4fdd number \u5b57\u6bb5\u65e0NULL select number from t1 where number = 0 ; 3. \u5c3d\u91cf\u907f\u514d\u7528 or \u8fde\u63a5\u6761\u4ef6\uff0c \u5426\u5219\u5168\u8868\u626b\u9762 \u4f18\u5316\u524d\uff1a select id from t1 where id = 10 or id = 20 \u4f18\u5316\u540e\uff1a select id from t1 where id = 10 union all select id from t1 where id = 20 ; 4. \u6a21\u7cca\u67e5\u8be2\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u524d\u7f6e\u7684 % , \u5426\u5219\u5168\u8868\u626b\u63cf select variable from t1 where name = 'secure_file%' ; 5. \u5c3d\u91cf\u907f\u514d\u4f7f\u7528in , not in , \u5426\u5219\u5168\u8868\u626b\u9762 \u4f18\u5316\u524d\uff1a select id from t1 where id in ( 1 , 2 , 3 , 4 ) \u4f18\u5316\u540e\uff1a select id from t1 where id between 1 and 4 ; 6. \u4e0d\u80fd\u4f7f\u7528 select * from ... \u7528\u5177\u4f53\u6253\u5b57\u6bb5\u6765\u4ee3\u66ff * , \u4e0d\u8981\u8fd4\u56de\u7528\u4e0d\u5230\u7684\u4efb\u4f55\u5b57\u6bb5 \u4e8b\u52a1\u548c\u4e8b\u52a1\u56de\u6eda \u00b6 \u5b9a\u4e49\uff1a \u4e00\u4ef6\u4e8b\u4ece\u5f00\u59cb\u53d1\u751f\u5230\u7ed3\u675f\u7684\u6574\u4e2a\u8fc7\u7a0b \u4f5c\u7528\uff1a \u786e\u4fdd\u6570\u636e\u6253\u4e00\u81f4\u6027 \u4e8b\u52a1\u548c\u4e8b\u52a1\u56de\u6eda\u7684\u5e94\u7528 \u00b6 SQL\u547d\u4ee4\u4f1a autocommit \u5230\u6570\u636e\u5e93\u6267\u884c \u4e8b\u52a1\u64cd\u4f5c 1. \u5f00\u542f\u4e8b\u52a1 mysql > begin ; \u6216 start transactions ; mysql > SQL\u547d\u4ee4 ... mysql > SQL\u547d\u4ee4 ... ## \u6b64\u65f6autocommit \u88ab\u7981\u7528 ## 2. \u7ec8\u6b62\u4e8b\u52a1 mysql > commit ; \u6210\u529f mysql > rollback ; \u5931\u8d25 \u793a\u4f8b 1. \u80cc\u666f \u4f60 : \u5efa\u884c\u5361 \u670b\u53cb\uff1a \u5de5\u884c\u5361 \u4f60\u5728\u5efa\u884cATM\u7ed9\u4f60\u670b\u53cb\u8f6c5000\u5143\u94b1 2. \u5efa\u8868 \u88681\uff1a CCB create table CCB ( name varchar ( 20 ), money decimal ( 20 , 2 )); insert into CCB values ( '\u6709\u94b1\u4eba' , 100000 ); \u88682\uff1a ICBC create table ICBC ( name varchar ( 20 ), money decimal ( 20 , 2 )); insert into ICBC values ( '\u6ca1\u94b1\u4eba' , 0 ); 3. \u5f00\u59cb\u8f6c\u8d26 begin ; update CCB set money = money - 5000 where name = '\u6709\u94b1\u4eba' ; update ICBC set money = money + 5000 where name = '\u6ca1\u94b1\u4eba' ; commit ; ### \u8f6c\u8d26\u6210\u529f ### begin ; update CCB set money = money - 5000 where name = '\u6709\u94b1\u4eba' ; update ICBC set money = money + 5000 where name = '\u6ca1\u94b1\u4eba' ; ( \u6545\u969c ) rollback ; ### \u8f6c\u8d26\u5931\u8d25 ###","title":"7. \u8c03\u4f18\u548c\u4e8b\u52a1"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%B0%83%E4%BC%98%E5%92%8C%E4%BA%8B%E5%8A%A1/#mysql","text":"","title":"MySQL \u8c03\u4f18"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%B0%83%E4%BC%98%E5%92%8C%E4%BA%8B%E5%8A%A1/#_1","text":"\u5728select / where / order by \u5e38\u6d89\u53ca\u5230\u7684\u5b57\u6bb5\u4e0a\u5efa\u7acb\u7d22\u5f15","title":"\u521b\u5efa\u7d22\u5f15"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%B0%83%E4%BC%98%E5%92%8C%E4%BA%8B%E5%8A%A1/#_2","text":"\u8bfb\u64cd\u4f5c\u591a : MyISAM \u5199\u64cd\u4f5c\u591a : InnoDB","title":"\u9009\u62e9\u5408\u9002\u7684\u5b58\u50a8\u5f15\u64ce"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%B0%83%E4%BC%98%E5%92%8C%E4%BA%8B%E5%8A%A1/#sql","text":"(\u907f\u514d\u5168\u8868\u626b\u63cf) 1. where \u5b50\u53e5\u5c3d\u91cf\u4e0d\u4f7f\u7528 != , \u5426\u5219\u653e\u5f03\u7d22\u5f15\uff0c\u5168\u8868\u626b\u63cf 2. \u5c3d\u91cf\u907f\u514dNULL\u5224\u65ad\uff0c \u5168\u8868\u626b\u9762 \u4f18\u5316\u524d\uff1a select number from t1 where number is null ; \u4f18\u5316\u540e\uff1a \u5728number\u5b57\u6bb5\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u4e3a0 , \u786e\u4fdd number \u5b57\u6bb5\u65e0NULL select number from t1 where number = 0 ; 3. \u5c3d\u91cf\u907f\u514d\u7528 or \u8fde\u63a5\u6761\u4ef6\uff0c \u5426\u5219\u5168\u8868\u626b\u9762 \u4f18\u5316\u524d\uff1a select id from t1 where id = 10 or id = 20 \u4f18\u5316\u540e\uff1a select id from t1 where id = 10 union all select id from t1 where id = 20 ; 4. \u6a21\u7cca\u67e5\u8be2\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u524d\u7f6e\u7684 % , \u5426\u5219\u5168\u8868\u626b\u63cf select variable from t1 where name = 'secure_file%' ; 5. \u5c3d\u91cf\u907f\u514d\u4f7f\u7528in , not in , \u5426\u5219\u5168\u8868\u626b\u9762 \u4f18\u5316\u524d\uff1a select id from t1 where id in ( 1 , 2 , 3 , 4 ) \u4f18\u5316\u540e\uff1a select id from t1 where id between 1 and 4 ; 6. \u4e0d\u80fd\u4f7f\u7528 select * from ... \u7528\u5177\u4f53\u6253\u5b57\u6bb5\u6765\u4ee3\u66ff * , \u4e0d\u8981\u8fd4\u56de\u7528\u4e0d\u5230\u7684\u4efb\u4f55\u5b57\u6bb5","title":"SQL\u8bed\u53e5\u4f18\u5316"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%B0%83%E4%BC%98%E5%92%8C%E4%BA%8B%E5%8A%A1/#_3","text":"\u5b9a\u4e49\uff1a \u4e00\u4ef6\u4e8b\u4ece\u5f00\u59cb\u53d1\u751f\u5230\u7ed3\u675f\u7684\u6574\u4e2a\u8fc7\u7a0b \u4f5c\u7528\uff1a \u786e\u4fdd\u6570\u636e\u6253\u4e00\u81f4\u6027","title":"\u4e8b\u52a1\u548c\u4e8b\u52a1\u56de\u6eda"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E8%B0%83%E4%BC%98%E5%92%8C%E4%BA%8B%E5%8A%A1/#_4","text":"SQL\u547d\u4ee4\u4f1a autocommit \u5230\u6570\u636e\u5e93\u6267\u884c \u4e8b\u52a1\u64cd\u4f5c 1. \u5f00\u542f\u4e8b\u52a1 mysql > begin ; \u6216 start transactions ; mysql > SQL\u547d\u4ee4 ... mysql > SQL\u547d\u4ee4 ... ## \u6b64\u65f6autocommit \u88ab\u7981\u7528 ## 2. \u7ec8\u6b62\u4e8b\u52a1 mysql > commit ; \u6210\u529f mysql > rollback ; \u5931\u8d25 \u793a\u4f8b 1. \u80cc\u666f \u4f60 : \u5efa\u884c\u5361 \u670b\u53cb\uff1a \u5de5\u884c\u5361 \u4f60\u5728\u5efa\u884cATM\u7ed9\u4f60\u670b\u53cb\u8f6c5000\u5143\u94b1 2. \u5efa\u8868 \u88681\uff1a CCB create table CCB ( name varchar ( 20 ), money decimal ( 20 , 2 )); insert into CCB values ( '\u6709\u94b1\u4eba' , 100000 ); \u88682\uff1a ICBC create table ICBC ( name varchar ( 20 ), money decimal ( 20 , 2 )); insert into ICBC values ( '\u6ca1\u94b1\u4eba' , 0 ); 3. \u5f00\u59cb\u8f6c\u8d26 begin ; update CCB set money = money - 5000 where name = '\u6709\u94b1\u4eba' ; update ICBC set money = money + 5000 where name = '\u6ca1\u94b1\u4eba' ; commit ; ### \u8f6c\u8d26\u6210\u529f ### begin ; update CCB set money = money - 5000 where name = '\u6709\u94b1\u4eba' ; update ICBC set money = money + 5000 where name = '\u6ca1\u94b1\u4eba' ; ( \u6545\u969c ) rollback ; ### \u8f6c\u8d26\u5931\u8d25 ###","title":"\u4e8b\u52a1\u548c\u4e8b\u52a1\u56de\u6eda\u7684\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","text":"wikipedia \u00b6 \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff08\u82f1\u8bed\uff1abinary search algorithm\uff09\uff0c\u4e5f\u79f0\u6298\u534a\u641c\u7d22\u7b97\u6cd5\uff08\u82f1\u8bed\uff1ahalf-interval search algorithm\uff09\u3001\u5bf9\u6570\u641c\u7d22\u7b97\u6cd5\uff08\u82f1\u8bed\uff1alogarithmic search algorithm\uff09\uff0c\u662f\u4e00\u79cd\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u67d0\u4e00\u7279\u5b9a\u5143\u7d20\u7684\u641c\u7d22\u7b97\u6cd5\u3002\u641c\u7d22\u8fc7\u7a0b\u4ece\u6570\u7ec4\u7684\u4e2d\u95f4\u5143\u7d20\u5f00\u59cb\uff0c\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u6b63\u597d\u662f\u8981\u67e5\u627e\u7684\u5143\u7d20\uff0c\u5219\u641c\u7d22\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u67d0\u4e00\u7279\u5b9a\u5143\u7d20\u5927\u4e8e\u6216\u8005\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\uff0c\u5219\u5728\u6570\u7ec4\u5927\u4e8e\u6216\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\u7684\u90a3\u4e00\u534a\u4e2d\u67e5\u627e\uff0c\u800c\u4e14\u8ddf\u5f00\u59cb\u4e00\u6837\u4ece\u4e2d\u95f4\u5143\u7d20\u5f00\u59cb\u6bd4\u8f83\u3002\u5982\u679c\u5728\u67d0\u4e00\u6b65\u9aa4\u6570\u7ec4\u4e3a\u7a7a\uff0c\u5219\u4ee3\u8868\u627e\u4e0d\u5230\u3002\u8fd9\u79cd\u641c\u7d22\u7b97\u6cd5\u6bcf\u4e00\u6b21\u6bd4\u8f83\u90fd\u4f7f\u641c\u7d22\u8303\u56f4\u7f29\u5c0f\u4e00\u534a\u3002 \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u5728\u60c5\u51b5\u4e0b\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u6570\u65f6\u95f4\uff0c\u8fdb\u884cO(log n)\u6b21\u6bd4\u8f83\u64cd\u4f5cO(n)n\u5728\u6b64\u5904\u662f\u6570\u7ec4\u7684\u5143\u7d20\u6570\u91cf\uff0cO\u662f\u5927O\u8bb0\u53f7, \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\uff0c\u65e0\u8bba\u5bf9\u4efb\u4f55\u5927\u5c0f\u7684\u8f93\u5165\u6570\u636e\uff0c\u7b97\u6cd5\u4f7f\u7528\u7684\u7a7a\u95f4\u90fd\u662f\u4e00\u6837\u7684\u3002\u9664\u975e\u8f93\u5165\u6570\u636e\u6570\u91cf\u5f88\u5c11\uff0c\u5426\u5219\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u6bd4\u7ebf\u6027\u641c\u7d22\u66f4\u5feb\uff0c\u4f46\u6570\u7ec4\u5fc5\u987b\u4e8b\u5148\u88ab\u6392\u5e8f\u3002\u5c3d\u7ba1\u7279\u5b9a\u7684\u3001\u4e3a\u4e86\u5feb\u901f\u641c\u7d22\u800c\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u66f4\u6709\u6548( \u6bd4\u5982\u54c8\u5e0c\u8868 )\uff0c\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u5e94\u7528\u9762\u66f4\u5e7f\u3002 \u7b97\u6cd5\u8981\u6c42 \u00b6 \u5e8f\u5217\u6709\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u7ebf\u6027\u5b58\u50a8 python \u5b9e\u73b0 \u00b6 def bindary_search ( seq , target , begin = 0 , end = None ): if end is None : end = len ( seq ) - 1 if end < begin : return None tmp = ( begin + end ) // 2 if seq [ tmp ] == target : return tmp elif seq [ tmp ] > target : end = tmp - 1 else : begin = tmp + 1 return bindary_search ( seq , target , begin = begin , end = end ) def test_bindary_search (): seq = [ 0 , 1 , 2 , 5 , 6 , 8 , 9 ] assert ( bindary_search ( seq , - 1 ) is None ) assert ( bindary_search ( seq , 0 ) == 0 ) assert ( bindary_search ( seq , 1 ) == 1 ) assert ( bindary_search ( seq , 2 ) == 2 ) assert ( bindary_search ( seq , 5 ) == 3 ) assert ( bindary_search ( seq , 6 ) == 4 ) assert ( bindary_search ( seq , 8 ) == 5 ) assert ( bindary_search ( seq , 9 ) == 6 ) assert ( bindary_search ( seq , 10 ) is None ) assert ( 0 )","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#wikipedia","text":"\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\uff08\u82f1\u8bed\uff1abinary search algorithm\uff09\uff0c\u4e5f\u79f0\u6298\u534a\u641c\u7d22\u7b97\u6cd5\uff08\u82f1\u8bed\uff1ahalf-interval search algorithm\uff09\u3001\u5bf9\u6570\u641c\u7d22\u7b97\u6cd5\uff08\u82f1\u8bed\uff1alogarithmic search algorithm\uff09\uff0c\u662f\u4e00\u79cd\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u67d0\u4e00\u7279\u5b9a\u5143\u7d20\u7684\u641c\u7d22\u7b97\u6cd5\u3002\u641c\u7d22\u8fc7\u7a0b\u4ece\u6570\u7ec4\u7684\u4e2d\u95f4\u5143\u7d20\u5f00\u59cb\uff0c\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u6b63\u597d\u662f\u8981\u67e5\u627e\u7684\u5143\u7d20\uff0c\u5219\u641c\u7d22\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u67d0\u4e00\u7279\u5b9a\u5143\u7d20\u5927\u4e8e\u6216\u8005\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\uff0c\u5219\u5728\u6570\u7ec4\u5927\u4e8e\u6216\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\u7684\u90a3\u4e00\u534a\u4e2d\u67e5\u627e\uff0c\u800c\u4e14\u8ddf\u5f00\u59cb\u4e00\u6837\u4ece\u4e2d\u95f4\u5143\u7d20\u5f00\u59cb\u6bd4\u8f83\u3002\u5982\u679c\u5728\u67d0\u4e00\u6b65\u9aa4\u6570\u7ec4\u4e3a\u7a7a\uff0c\u5219\u4ee3\u8868\u627e\u4e0d\u5230\u3002\u8fd9\u79cd\u641c\u7d22\u7b97\u6cd5\u6bcf\u4e00\u6b21\u6bd4\u8f83\u90fd\u4f7f\u641c\u7d22\u8303\u56f4\u7f29\u5c0f\u4e00\u534a\u3002 \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u5728\u60c5\u51b5\u4e0b\u7684\u590d\u6742\u5ea6\u662f\u5bf9\u6570\u65f6\u95f4\uff0c\u8fdb\u884cO(log n)\u6b21\u6bd4\u8f83\u64cd\u4f5cO(n)n\u5728\u6b64\u5904\u662f\u6570\u7ec4\u7684\u5143\u7d20\u6570\u91cf\uff0cO\u662f\u5927O\u8bb0\u53f7, \u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\uff0c\u65e0\u8bba\u5bf9\u4efb\u4f55\u5927\u5c0f\u7684\u8f93\u5165\u6570\u636e\uff0c\u7b97\u6cd5\u4f7f\u7528\u7684\u7a7a\u95f4\u90fd\u662f\u4e00\u6837\u7684\u3002\u9664\u975e\u8f93\u5165\u6570\u636e\u6570\u91cf\u5f88\u5c11\uff0c\u5426\u5219\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u6bd4\u7ebf\u6027\u641c\u7d22\u66f4\u5feb\uff0c\u4f46\u6570\u7ec4\u5fc5\u987b\u4e8b\u5148\u88ab\u6392\u5e8f\u3002\u5c3d\u7ba1\u7279\u5b9a\u7684\u3001\u4e3a\u4e86\u5feb\u901f\u641c\u7d22\u800c\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u66f4\u6709\u6548( \u6bd4\u5982\u54c8\u5e0c\u8868 )\uff0c\u4e8c\u5206\u67e5\u627e\u7b97\u6cd5\u5e94\u7528\u9762\u66f4\u5e7f\u3002","title":"wikipedia"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_1","text":"\u5e8f\u5217\u6709\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f \u7ebf\u6027\u5b58\u50a8","title":"\u7b97\u6cd5\u8981\u6c42"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#python","text":"def bindary_search ( seq , target , begin = 0 , end = None ): if end is None : end = len ( seq ) - 1 if end < begin : return None tmp = ( begin + end ) // 2 if seq [ tmp ] == target : return tmp elif seq [ tmp ] > target : end = tmp - 1 else : begin = tmp + 1 return bindary_search ( seq , target , begin = begin , end = end ) def test_bindary_search (): seq = [ 0 , 1 , 2 , 5 , 6 , 8 , 9 ] assert ( bindary_search ( seq , - 1 ) is None ) assert ( bindary_search ( seq , 0 ) == 0 ) assert ( bindary_search ( seq , 1 ) == 1 ) assert ( bindary_search ( seq , 2 ) == 2 ) assert ( bindary_search ( seq , 5 ) == 3 ) assert ( bindary_search ( seq , 6 ) == 4 ) assert ( bindary_search ( seq , 8 ) == 5 ) assert ( bindary_search ( seq , 9 ) == 6 ) assert ( bindary_search ( seq , 10 ) is None ) assert ( 0 )","title":"python \u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/","text":"\u54c8\u5e0c\u8868\u7684\u5de5\u4f5c\u8fc7\u7a0b \u00b6 \u524d\u9762\u6211\u4eec\u5df2\u7ecf\u8bb2\u5230\u4e86\u6570\u7ec4\u548c\u94fe\u8868\uff0c\u6570\u7ec4\u80fd\u901a\u8fc7\u4e0b\u6807 O(1) \u8bbf\u95ee\uff0c\u4f46\u662f\u5220\u9664\u4e00\u4e2a\u4e2d\u95f4\u5143\u7d20\u5374\u8981\u79fb\u52a8\u5176\u4ed6\u5143\u7d20\uff0c\u65f6\u95f4 O(n)\u3002 \u96be\u9053\u5c31\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u548c\u5220\u9664\u5143\u7d20\u5417\uff1f\u4f3c\u4e4e\u60f3\u8981\u5feb\u901f\u627e\u5230\u4e00\u4e2a\u5143\u7d20\u9664\u4e86\u77e5\u9053\u4e0b\u6807\u4e4b\u5916\u522b\u65e0\u4ed6\u6cd5\uff0c\u4e8e\u662f\u4e4e\u806a\u660e\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u53c8\u60f3\u5230\u4e86\u4e00\u79cd\u65b9\u6cd5\u3002 \u80fd\u4e0d\u80fd\u7ed9\u6bcf\u4e2a\u5143\u7d20\u4e00\u79cd\u300e\u903b\u8f91\u4e0b\u6807\u300f\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u5b83\u5462\uff0c\u54c8\u5e0c\u8868\u5c31\u662f\u8fd9\u79cd\u5b9e\u73b0\u3002\u5b83\u901a\u8fc7\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u6765\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u653e\u5728\u6570\u7ec4\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5f53\u7136\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684\u5143\u7d20\uff0c \u54c8\u5e0c\u51fd\u6570\u6bcf\u6b21\u8ba1\u7b97\u7684\u4e0b\u6807\u5fc5\u987b\u8981\u4e00\u6837\u624d\u53ef\u4ee5\uff0c\u800c\u4e14\u8303\u56f4\u4e0d\u80fd\u8d85\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6\u3002 \u54c8\u5e0c\u51fd\u6570 \u00b6 \u5373\u65e0\u8bba\u4f60\u7ed9\u5b83\u4ec0\u4e48\u6570\u636e\uff0c\u5b83\u90fd\u8fd8\u4f60\u4e00\u4e2a\u6570\u5b57\u3002 \u5fc5\u987b\u662f\u4e00\u81f4\u7684\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u8f93\u5165apple\u65f6\u5f97\u5230\u7684\u662f4\uff0c\u90a3\u4e48\u6bcf\u6b21\u8f93\u5165apple\u65f6\uff0c\u5f97\u5230\u7684\u90fd\u5fc5\u987b\u4e3a4\u3002\u5982\u679c\u4e0d\u662f\u8fd9\u6837\uff0c\u6563\u5217\u8868\u5c06\u6beb\u65e0\u7528\u5904\u3002 \u5b83\u5e94\u5c06\u4e0d\u540c\u7684\u8f93\u5165\u6620\u5c04\u5230\u4e0d\u540c\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u6563\u5217\u51fd\u6570\u4e0d\u7ba1\u8f93\u5165\u662f\u4ec0\u4e48\u90fd\u8fd4\u56de1\uff0c\u5b83\u5c31\u4e0d\u662f\u597d\u7684\u6563\u5217\u51fd\u6570\u3002\u6700\u7406\u60f3\u7684\u60c5\u51b5\u662f\uff0c\u5c06\u4e0d\u540c\u7684\u8f93\u5165\u6620\u5c04\u5230\u4e0d\u540c\u7684\u6570\u5b57\u3002 \u6563\u5217\u51fd\u6570\u51c6\u786e\u5730\u6307\u51fa\u4e86\u4ef7\u683c\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c \u4f60\u6839\u672c\u4e0d\u7528\u67e5\u627e\uff01 \u4e4b\u6240\u4ee5\u80fd\u591f\u8fd9\u6837\uff0c \u5177\u4f53\u539f\u56e0\u5982\u4e0b\u3002 \u6563\u5217\u51fd\u6570\u603b\u662f\u5c06\u540c\u6837\u7684\u8f93\u5165\u6620\u5c04\u5230\u76f8\u540c\u7684\u7d22\u5f15\u3002\u6bcf\u6b21\u4f60\u8f93\u5165avocado\uff0c\u5f97\u5230\u7684\u90fd\u662f\u540c\u4e00\u4e2a \u6570\u5b57\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u9996\u5148\u4f7f\u7528\u5b83\u6765\u786e\u5b9a\u5c06\u9cc4\u68a8\u7684\u4ef7\u683c\u5b58\u50a8\u5728\u4ec0\u4e48\u5730\u65b9\uff0c\u5e76\u5728\u4ee5\u540e\u4f7f\u7528\u5b83\u6765\u786e\u5b9a\u9cc4\u68a8\u7684\u4ef7\u683c\u5b58\u50a8\u5728\u4ec0\u4e48\u5730\u65b9\u3002 \u6563\u5217\u51fd\u6570\u5c06\u4e0d\u540c\u7684\u8f93\u5165\u6620\u5c04\u5230\u4e0d\u540c\u7684\u7d22\u5f15\u3002avocado\u6620\u5c04\u5230\u7d22\u5f154\uff0cmilk\u6620\u5c04\u5230\u7d22\u5f150\u3002\u6bcf \u79cd\u5546\u54c1\u90fd\u6620\u5c04\u5230\u6570\u7ec4\u7684\u4e0d\u540c\u4f4d\u7f6e\uff0c\u8ba9\u4f60\u80fd\u591f\u5c06\u5176\u4ef7\u683c\u5b58\u50a8\u5230\u8fd9\u91cc\u3002 \u6563\u5217\u51fd\u6570\u77e5\u9053\u6570\u7ec4\u6709\u591a\u5927\uff0c\u53ea\u8fd4\u56de\u6709\u6548\u7684\u7d22\u5f15\u3002\u5982\u679c\u6570\u7ec4\u5305\u542b5\u4e2a\u5143\u7d20\uff0c\u6563\u5217\u51fd\u6570\u5c31\u4e0d\u4f1a\u8fd4\u56de\u65e0\u6548\u7d22\u5f15100\u3002 \u6027\u80fd \u00b6 \u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u6563\u5217\u8868\u7684\u67e5\u627e\uff08\u83b7\u53d6\u7ed9\u5b9a\u7d22\u5f15\u5904\u7684\u503c\uff09\u901f\u5ea6\u4e0e\u6570\u7ec4\u4e00\u6837\u5feb\uff0c\u800c\u63d2\u5165\u548c\u5220\u9664\u901f\u5ea6\u4e0e\u94fe\u8868\u4e00\u6837\u5feb\uff0c\u56e0\u6b64\u5b83\u517c\u5177\u4e24\u8005\u7684\u4f18\u70b9\uff01\u4f46\u5728\u6700\u7cdf\u60c5\u51b5\u4e0b\uff0c\u6563\u5217\u8868\u7684\u5404\u79cd\u64cd\u4f5c\u7684\u901f\u5ea6\u90fd\u5f88\u6162\u3002 \u56e0\u6b64\uff0c\u5728\u4f7f\u7528\u6563\u5217\u8868\u65f6\uff0c\u907f\u5f00\u6700\u7cdf\u60c5\u51b5\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\uff0c\u9700\u8981\u907f\u514d\u51b2\u7a81\u3002\u800c\u8981\u907f\u514d\u51b2\u7a81\uff0c\u9700\u8981\u6709\uff1a \u8f83\u4f4e\u7684\u586b\u88c5\u56e0\u5b50 \u826f\u597d\u7684\u6563\u5217\u51fd\u6570 \u586b\u88c5\u56e0\u5b50 \u00b6 \u6563\u5217\u8868\u7684\u586b\u88c5\u56e0\u5b50\u5f88\u5bb9\u6613\u8ba1\u7b97\u3002 \u6563\u5217\u8868\u4f7f\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u6570\u636e\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u8ba1\u7b97\u6570\u7ec4\u4e2d\u88ab\u5360\u7528\u7684\u4f4d\u7f6e\u6570\u3002\u4f8b\u5982\uff0c\u4e0b\u8ff0\u6563\u5217\u8868\u7684\u586b\u88c5\u56e0\u5b50\u4e3a\u2156\uff0c\u53730.4\u3002 \u4e0b\u9762\u8fd9\u4e2a\u6563\u5217\u8868\u7684\u586b\u88c5\u56e0\u5b50\u4e3a\u591a\u5c11\u5462\uff1f \u5982\u679c\u4f60\u7684\u7b54\u6848\u4e3a\u2153\uff0c\u90a3\u5c31\u5bf9\u4e86\u3002 \u586b\u88c5\u56e0\u5b50\u5ea6\u91cf\u7684\u662f\u6563\u5217\u8868\u4e2d\u6709\u591a\u5c11\u4f4d\u7f6e\u662f\u7a7a\u7684\u3002 \u826f\u597d\u7684\u6563\u5217\u51fd\u6570 \u00b6 \u826f\u597d\u7684\u6563\u5217\u51fd\u6570\u8ba9\u6570\u7ec4\u4e2d\u7684\u503c\u5448\u5747\u5300\u5206\u5e03\u3002 \u7cdf\u7cd5\u7684\u6563\u5217\u51fd\u6570\u8ba9\u503c\u624e\u5806\uff0c\u5bfc\u81f4\u5927\u91cf\u7684\u51b2\u7a81\u3002 \u5c0f\u7ed3 \u00b6 \u4f60\u53ef\u4ee5\u7ed3\u5408\u6563\u5217\u51fd\u6570\u548c\u6570\u7ec4\u6765\u521b\u5efa\u6563\u5217\u8868\u3002 \u51b2\u7a81\u5f88\u7cdf\u7cd5\uff0c\u4f60\u5e94\u4f7f\u7528\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u51cf\u5c11\u51b2\u7a81\u7684\u6563\u5217\u51fd\u6570\u3002 \u6563\u5217\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u901f\u5ea6\u90fd\u975e\u5e38\u5feb\u3002 \u6563\u5217\u8868\u9002\u5408\u7528\u4e8e\u6a21\u62df\u6620\u5c04\u5173\u7cfb\u3002 \u4e00\u65e6\u586b\u88c5\u56e0\u5b50\u8d85\u8fc70.7\uff0c\u5c31\u8be5\u8c03\u6574\u6563\u5217\u8868\u7684\u957f\u5ea6\u3002 \u6563\u5217\u8868\u975e\u5e38\u9002\u5408\u7528\u4e8e\u9632\u6b62\u91cd\u590d\u3002 \u54c8\u5e0c\u51b2\u7a81 (collision) \u00b6 \u4e0d\u540c\u7684 key \u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u540e\u5f97\u5230\u7684\u4e0b\u6807\u4e00\u6837\uff0c \u8fd9\u79cd\u60c5\u51b5\u6210\u4e3a\u54c8\u5e0c\u51b2\u7a81\u3002 \u600e\u4e48\u529e\u5462\uff1f\u806a\u660e\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u53c8\u60f3\u5230\u4e86\u529e\u6cd5\uff0c\u5176\u5b9e\u4e00\u79cd\u76f4\u89c2\u7684\u60f3\u6cd5\u662f\u5982\u679c\u51b2\u7a81\u4e86\u6211\u80fd\u4e0d\u80fd\u8ba9\u6570\u7ec4\u4e2d\u5bf9\u5e94\u7684\u69fd\u53d8\u6210\u4e00\u4e2a\u94fe\u5f0f\u7ed3\u6784\u5462\uff1f\u8fd9\u5c31\u662f\u5176\u4e2d\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\uff0c\u53eb\u505a**\u94fe\u63a5\u6cd5**(chaining)\u3002 \u8fd9\u6837\u5c31\u7528\u94fe\u8868\u89e3\u51b3\u4e86\u51b2\u7a81\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9009\u4e0d\u597d\u7684\u8bdd\uff0c\u53ef\u80fd\u5c31\u5bfc\u81f4\u51b2\u7a81\u592a\u591a\u4e00\u4e2a\u94fe\u53d8\u5f97\u592a\u957f\uff0c\u8fd9\u6837\u67e5\u627e\u5c31\u4e0d\u518d\u662f O(1) \u7684\u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u53eb\u505a\u5f00\u653e\u5bfb\u5740\u6cd5(open addressing)\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\u7684\u65f6\u5019\uff0c\u91c7\u7528\u4e00\u79cd\u65b9\u5f0f\u6765\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u69fd\u3002 \uff08\u8fd9\u91cc\u69fd\u6307\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff09\uff0c\u6839\u636e\u627e\u4e0b\u4e00\u4e2a\u69fd\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u5206\u4e3a\uff1a \u7ebf\u6027\u63a2\u67e5(linear probing): \u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\uff0c\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u69fd\u3002 \u4e8c\u6b21\u63a2\u67e5(quadratic probing): \u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\uff0c\u4ee5\u4e8c\u6b21\u65b9\u4f5c\u4e3a\u504f\u79fb\u91cf\u3002 \u53cc\u91cd\u6563\u5217(double hashing): \u91cd\u65b0\u8ba1\u7b97 hash \u7ed3\u679c\u3002 python \u5b9e\u73b0 \u00b6 # \u7ebf\u6027\u63a2\u67e5\u6cd5\u89e3\u51b3\u51b2\u7a81 from _array import Array class Slot ( object ): def __init__ ( self , key , value ): self . key , self . value = key , value def __str__ ( self ): return '<key: {key} , value: {value} >' . format ( key = self . key , value = self . value ) class HashTable ( object ): UNUSE = None # \u672a\u4f7f\u7528\u8fc7 EMPTY = Slot ( None , None ) # \u4f7f\u7528\u8fc7\u88ab\u5220\u9664\u4e86 def __init__ ( self ): self . _items = Array ( 4 ) self . length = 0 def __str__ ( self ): res = '' for solt in self . _items : if solt not in ( HashTable . UNUSE , HashTable . EMPTY ): res += str ( solt ) return res def _hash ( self , key ): return abs ( hash ( key )) % len ( self . _items ) def _index_can_insert ( self , index ): return self . _items [ index ] is HashTable . UNUSE or self . _items [ index ] is HashTable . EMPTY @property def _load_factor ( self ): return self . length / float ( len ( self . _items )) def _find_can_insert_index ( self , key ): index = self . _hash ( key ) while not self . _index_can_insert ( index ): index = self . _hash ( index + 1 ) return index def _rehash ( self ): new_length = len ( self . _items ) * 2 old_items = self . _items self . _items = Array ( new_length ) self . length = 0 for solt in old_items : if solt is not HashTable . EMPTY and solt is not HashTable . UNUSE : index = self . _find_can_insert_index ( solt . key ) self . _items [ index ] = solt self . length += 1 def __setitem__ ( self , key , value ): if key in self : index = self . _find_key ( key ) self . _items [ index ] . value = value else : # \u68c0\u67e5\u88c5\u8f7d\u56e0\u5b50, >0.7\u91cd\u54c8\u5e0c if self . _load_factor > 0.7 : self . _rehash () index = self . _find_can_insert_index ( key ) self . _items [ index ] = Slot ( key , value ) self . length += 1 def _find_key ( self , key ): ''' \u89e3\u91ca\u4e00\u4e2a slot \u4e3a UNUSED \u548c EMPTY \u7684\u533a\u522b \u56e0\u4e3a\u4f7f\u7528\u7684\u662f\u7ebf\u6027\u63a2\u67e5\u7684\u65b9\u5f0f\uff0c\u5047\u5982\u6709\u4e24\u4e2a\u5143\u7d20 A\uff0cB \u51b2\u7a81\u4e86\uff0c\u9996\u5148A hash \u5f97\u5230\u662f slot \u4e0b\u68075\uff0cA \u653e\u5230\u4e86\u7b2c5\u4e2a\u69fd\uff0c\u4e4b\u540e\u63d2\u5165 B \u56e0\u4e3a\u51b2\u7a81\u4e86\uff0c\u6240\u4ee5\u7ee7\u7eed\u6839\u636e\u7ebf\u6027\u63a2\u67e5\u65b9\u5f0f\u653e\u5230\u4e86 slot8\u3002 \u7136\u540e\u5220\u9664 A\uff0c\u69fd 5 \u88ab\u7f6e\u4e3a EMPTY\u3002\u7136\u540e\u6211\u53bb\u67e5\u627e B\uff0c\u7b2c\u4e00\u6b21 hash \u5f97\u5230\u7684\u662f \u69fd5\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u6211\u8fd8\u662f\u9700\u8981\u7b2c\u4e8c\u6b21\u8ba1\u7b97 hash \u624d\u80fd\u627e\u5230 B\u3002 \u4f46\u662f\u5982\u679c\u69fd\u662f UNUSED \u6211\u5c31\u4e0d\u7528\u7ee7\u7eed\u627e\u4e86\uff0c\u6211\u8ba4\u4e3a B \u5c31\u662f\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u5c31\u662f UNUSED \u548c EMPTY \u7684\u533a\u522b\u3002 ''' origin_index = self . _hash ( key ) # \u67e5\u627e\u8d77\u70b9\uff0c\u5982\u679c\u627e\u4e86\u4e00\u5708\u53c8\u56de\u5230\u4e86\u8d77\u70b9\uff0c\u5219\u6ca1\u6709key index = origin_index while self . _items [ index ] is not HashTable . UNUSE : if self . _items [ index ] is HashTable . EMPTY : # \u6ce8\u610f\u5982\u679c\u662f EMPTY\uff0c\u7ee7\u7eed\u5bfb\u627e\u4e0b\u4e00\u4e2a\u69fd index = self . _hash ( index + 1 ) if index == origin_index : return None continue if self . _items [ index ] . key == key : return index else : index = self . _hash ( index + 1 ) if index == origin_index : return None def __getitem__ ( self , key ): index = self . _find_key ( key ) if index is None : return None return self . _items [ index ] . value def __len__ ( self ): return self . length def remove ( self , key ): index = self . _find_key ( key ) if index is None : raise KeyError () self . _items [ index ] = HashTable . EMPTY self . length -= 1 def __contains__ ( self , key ): index = self . _find_key ( key ) return index is not None def __iter__ ( self ): for solt in self . _items : if solt not in ( HashTable . UNUSE , HashTable . EMPTY ): yield solt . key def test_hash_table (): a = HashTable () assert ( len ( a ) == 0 ) a [ None ] = None assert ( len ( a ) == 1 ) a [ 'a' ] = 0 a [ 'b' ] = 1 assert ( len ( a ) == 3 ) assert ( a [ None ] is None ) assert ( a [ 'a' ] == 0 ) assert ( a [ 'b' ] == 1 ) assert ( a [ 'c' ] == None ) a . remove ( 'b' ) assert ( len ( a ) == 2 ) a [ 'b' ] = 1 a [ 'c' ] = 2 a [ 'd' ] = 3 a [ 'e' ] = 4 a [ 'f' ] = 5 a [ 'g' ] = 6 a [ 'g' ] = 7 print ( a ) assert ( a [ 'b' ] == 1 ) assert ( a [ 'c' ] == 2 ) assert ( a [ 'd' ] == 3 ) assert ( a [ 'e' ] == 4 ) assert ( a [ 'f' ] == 5 ) assert ( a [ 'g' ] == 7 ) test_hash_table ()","title":"\u54c8\u5e0c\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_1","text":"\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u8bb2\u5230\u4e86\u6570\u7ec4\u548c\u94fe\u8868\uff0c\u6570\u7ec4\u80fd\u901a\u8fc7\u4e0b\u6807 O(1) \u8bbf\u95ee\uff0c\u4f46\u662f\u5220\u9664\u4e00\u4e2a\u4e2d\u95f4\u5143\u7d20\u5374\u8981\u79fb\u52a8\u5176\u4ed6\u5143\u7d20\uff0c\u65f6\u95f4 O(n)\u3002 \u96be\u9053\u5c31\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u548c\u5220\u9664\u5143\u7d20\u5417\uff1f\u4f3c\u4e4e\u60f3\u8981\u5feb\u901f\u627e\u5230\u4e00\u4e2a\u5143\u7d20\u9664\u4e86\u77e5\u9053\u4e0b\u6807\u4e4b\u5916\u522b\u65e0\u4ed6\u6cd5\uff0c\u4e8e\u662f\u4e4e\u806a\u660e\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u53c8\u60f3\u5230\u4e86\u4e00\u79cd\u65b9\u6cd5\u3002 \u80fd\u4e0d\u80fd\u7ed9\u6bcf\u4e2a\u5143\u7d20\u4e00\u79cd\u300e\u903b\u8f91\u4e0b\u6807\u300f\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u5b83\u5462\uff0c\u54c8\u5e0c\u8868\u5c31\u662f\u8fd9\u79cd\u5b9e\u73b0\u3002\u5b83\u901a\u8fc7\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u6765\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u653e\u5728\u6570\u7ec4\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5f53\u7136\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684\u5143\u7d20\uff0c \u54c8\u5e0c\u51fd\u6570\u6bcf\u6b21\u8ba1\u7b97\u7684\u4e0b\u6807\u5fc5\u987b\u8981\u4e00\u6837\u624d\u53ef\u4ee5\uff0c\u800c\u4e14\u8303\u56f4\u4e0d\u80fd\u8d85\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6\u3002","title":"\u54c8\u5e0c\u8868\u7684\u5de5\u4f5c\u8fc7\u7a0b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_2","text":"\u5373\u65e0\u8bba\u4f60\u7ed9\u5b83\u4ec0\u4e48\u6570\u636e\uff0c\u5b83\u90fd\u8fd8\u4f60\u4e00\u4e2a\u6570\u5b57\u3002 \u5fc5\u987b\u662f\u4e00\u81f4\u7684\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u8f93\u5165apple\u65f6\u5f97\u5230\u7684\u662f4\uff0c\u90a3\u4e48\u6bcf\u6b21\u8f93\u5165apple\u65f6\uff0c\u5f97\u5230\u7684\u90fd\u5fc5\u987b\u4e3a4\u3002\u5982\u679c\u4e0d\u662f\u8fd9\u6837\uff0c\u6563\u5217\u8868\u5c06\u6beb\u65e0\u7528\u5904\u3002 \u5b83\u5e94\u5c06\u4e0d\u540c\u7684\u8f93\u5165\u6620\u5c04\u5230\u4e0d\u540c\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u6563\u5217\u51fd\u6570\u4e0d\u7ba1\u8f93\u5165\u662f\u4ec0\u4e48\u90fd\u8fd4\u56de1\uff0c\u5b83\u5c31\u4e0d\u662f\u597d\u7684\u6563\u5217\u51fd\u6570\u3002\u6700\u7406\u60f3\u7684\u60c5\u51b5\u662f\uff0c\u5c06\u4e0d\u540c\u7684\u8f93\u5165\u6620\u5c04\u5230\u4e0d\u540c\u7684\u6570\u5b57\u3002 \u6563\u5217\u51fd\u6570\u51c6\u786e\u5730\u6307\u51fa\u4e86\u4ef7\u683c\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c \u4f60\u6839\u672c\u4e0d\u7528\u67e5\u627e\uff01 \u4e4b\u6240\u4ee5\u80fd\u591f\u8fd9\u6837\uff0c \u5177\u4f53\u539f\u56e0\u5982\u4e0b\u3002 \u6563\u5217\u51fd\u6570\u603b\u662f\u5c06\u540c\u6837\u7684\u8f93\u5165\u6620\u5c04\u5230\u76f8\u540c\u7684\u7d22\u5f15\u3002\u6bcf\u6b21\u4f60\u8f93\u5165avocado\uff0c\u5f97\u5230\u7684\u90fd\u662f\u540c\u4e00\u4e2a \u6570\u5b57\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u9996\u5148\u4f7f\u7528\u5b83\u6765\u786e\u5b9a\u5c06\u9cc4\u68a8\u7684\u4ef7\u683c\u5b58\u50a8\u5728\u4ec0\u4e48\u5730\u65b9\uff0c\u5e76\u5728\u4ee5\u540e\u4f7f\u7528\u5b83\u6765\u786e\u5b9a\u9cc4\u68a8\u7684\u4ef7\u683c\u5b58\u50a8\u5728\u4ec0\u4e48\u5730\u65b9\u3002 \u6563\u5217\u51fd\u6570\u5c06\u4e0d\u540c\u7684\u8f93\u5165\u6620\u5c04\u5230\u4e0d\u540c\u7684\u7d22\u5f15\u3002avocado\u6620\u5c04\u5230\u7d22\u5f154\uff0cmilk\u6620\u5c04\u5230\u7d22\u5f150\u3002\u6bcf \u79cd\u5546\u54c1\u90fd\u6620\u5c04\u5230\u6570\u7ec4\u7684\u4e0d\u540c\u4f4d\u7f6e\uff0c\u8ba9\u4f60\u80fd\u591f\u5c06\u5176\u4ef7\u683c\u5b58\u50a8\u5230\u8fd9\u91cc\u3002 \u6563\u5217\u51fd\u6570\u77e5\u9053\u6570\u7ec4\u6709\u591a\u5927\uff0c\u53ea\u8fd4\u56de\u6709\u6548\u7684\u7d22\u5f15\u3002\u5982\u679c\u6570\u7ec4\u5305\u542b5\u4e2a\u5143\u7d20\uff0c\u6563\u5217\u51fd\u6570\u5c31\u4e0d\u4f1a\u8fd4\u56de\u65e0\u6548\u7d22\u5f15100\u3002","title":"\u54c8\u5e0c\u51fd\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_3","text":"\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u6563\u5217\u8868\u7684\u67e5\u627e\uff08\u83b7\u53d6\u7ed9\u5b9a\u7d22\u5f15\u5904\u7684\u503c\uff09\u901f\u5ea6\u4e0e\u6570\u7ec4\u4e00\u6837\u5feb\uff0c\u800c\u63d2\u5165\u548c\u5220\u9664\u901f\u5ea6\u4e0e\u94fe\u8868\u4e00\u6837\u5feb\uff0c\u56e0\u6b64\u5b83\u517c\u5177\u4e24\u8005\u7684\u4f18\u70b9\uff01\u4f46\u5728\u6700\u7cdf\u60c5\u51b5\u4e0b\uff0c\u6563\u5217\u8868\u7684\u5404\u79cd\u64cd\u4f5c\u7684\u901f\u5ea6\u90fd\u5f88\u6162\u3002 \u56e0\u6b64\uff0c\u5728\u4f7f\u7528\u6563\u5217\u8868\u65f6\uff0c\u907f\u5f00\u6700\u7cdf\u60c5\u51b5\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\uff0c\u9700\u8981\u907f\u514d\u51b2\u7a81\u3002\u800c\u8981\u907f\u514d\u51b2\u7a81\uff0c\u9700\u8981\u6709\uff1a \u8f83\u4f4e\u7684\u586b\u88c5\u56e0\u5b50 \u826f\u597d\u7684\u6563\u5217\u51fd\u6570","title":"\u6027\u80fd"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_4","text":"\u6563\u5217\u8868\u7684\u586b\u88c5\u56e0\u5b50\u5f88\u5bb9\u6613\u8ba1\u7b97\u3002 \u6563\u5217\u8868\u4f7f\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u6570\u636e\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u8ba1\u7b97\u6570\u7ec4\u4e2d\u88ab\u5360\u7528\u7684\u4f4d\u7f6e\u6570\u3002\u4f8b\u5982\uff0c\u4e0b\u8ff0\u6563\u5217\u8868\u7684\u586b\u88c5\u56e0\u5b50\u4e3a\u2156\uff0c\u53730.4\u3002 \u4e0b\u9762\u8fd9\u4e2a\u6563\u5217\u8868\u7684\u586b\u88c5\u56e0\u5b50\u4e3a\u591a\u5c11\u5462\uff1f \u5982\u679c\u4f60\u7684\u7b54\u6848\u4e3a\u2153\uff0c\u90a3\u5c31\u5bf9\u4e86\u3002 \u586b\u88c5\u56e0\u5b50\u5ea6\u91cf\u7684\u662f\u6563\u5217\u8868\u4e2d\u6709\u591a\u5c11\u4f4d\u7f6e\u662f\u7a7a\u7684\u3002","title":"\u586b\u88c5\u56e0\u5b50"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_5","text":"\u826f\u597d\u7684\u6563\u5217\u51fd\u6570\u8ba9\u6570\u7ec4\u4e2d\u7684\u503c\u5448\u5747\u5300\u5206\u5e03\u3002 \u7cdf\u7cd5\u7684\u6563\u5217\u51fd\u6570\u8ba9\u503c\u624e\u5806\uff0c\u5bfc\u81f4\u5927\u91cf\u7684\u51b2\u7a81\u3002","title":"\u826f\u597d\u7684\u6563\u5217\u51fd\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_6","text":"\u4f60\u53ef\u4ee5\u7ed3\u5408\u6563\u5217\u51fd\u6570\u548c\u6570\u7ec4\u6765\u521b\u5efa\u6563\u5217\u8868\u3002 \u51b2\u7a81\u5f88\u7cdf\u7cd5\uff0c\u4f60\u5e94\u4f7f\u7528\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u51cf\u5c11\u51b2\u7a81\u7684\u6563\u5217\u51fd\u6570\u3002 \u6563\u5217\u8868\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u901f\u5ea6\u90fd\u975e\u5e38\u5feb\u3002 \u6563\u5217\u8868\u9002\u5408\u7528\u4e8e\u6a21\u62df\u6620\u5c04\u5173\u7cfb\u3002 \u4e00\u65e6\u586b\u88c5\u56e0\u5b50\u8d85\u8fc70.7\uff0c\u5c31\u8be5\u8c03\u6574\u6563\u5217\u8868\u7684\u957f\u5ea6\u3002 \u6563\u5217\u8868\u975e\u5e38\u9002\u5408\u7528\u4e8e\u9632\u6b62\u91cd\u590d\u3002","title":"\u5c0f\u7ed3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#collision","text":"\u4e0d\u540c\u7684 key \u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u540e\u5f97\u5230\u7684\u4e0b\u6807\u4e00\u6837\uff0c \u8fd9\u79cd\u60c5\u51b5\u6210\u4e3a\u54c8\u5e0c\u51b2\u7a81\u3002 \u600e\u4e48\u529e\u5462\uff1f\u806a\u660e\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u53c8\u60f3\u5230\u4e86\u529e\u6cd5\uff0c\u5176\u5b9e\u4e00\u79cd\u76f4\u89c2\u7684\u60f3\u6cd5\u662f\u5982\u679c\u51b2\u7a81\u4e86\u6211\u80fd\u4e0d\u80fd\u8ba9\u6570\u7ec4\u4e2d\u5bf9\u5e94\u7684\u69fd\u53d8\u6210\u4e00\u4e2a\u94fe\u5f0f\u7ed3\u6784\u5462\uff1f\u8fd9\u5c31\u662f\u5176\u4e2d\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\uff0c\u53eb\u505a**\u94fe\u63a5\u6cd5**(chaining)\u3002 \u8fd9\u6837\u5c31\u7528\u94fe\u8868\u89e3\u51b3\u4e86\u51b2\u7a81\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9009\u4e0d\u597d\u7684\u8bdd\uff0c\u53ef\u80fd\u5c31\u5bfc\u81f4\u51b2\u7a81\u592a\u591a\u4e00\u4e2a\u94fe\u53d8\u5f97\u592a\u957f\uff0c\u8fd9\u6837\u67e5\u627e\u5c31\u4e0d\u518d\u662f O(1) \u7684\u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u53eb\u505a\u5f00\u653e\u5bfb\u5740\u6cd5(open addressing)\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\u7684\u65f6\u5019\uff0c\u91c7\u7528\u4e00\u79cd\u65b9\u5f0f\u6765\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u69fd\u3002 \uff08\u8fd9\u91cc\u69fd\u6307\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff09\uff0c\u6839\u636e\u627e\u4e0b\u4e00\u4e2a\u69fd\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u5206\u4e3a\uff1a \u7ebf\u6027\u63a2\u67e5(linear probing): \u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\uff0c\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u69fd\u3002 \u4e8c\u6b21\u63a2\u67e5(quadratic probing): \u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\uff0c\u4ee5\u4e8c\u6b21\u65b9\u4f5c\u4e3a\u504f\u79fb\u91cf\u3002 \u53cc\u91cd\u6563\u5217(double hashing): \u91cd\u65b0\u8ba1\u7b97 hash \u7ed3\u679c\u3002","title":"\u54c8\u5e0c\u51b2\u7a81 (collision)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#python","text":"# \u7ebf\u6027\u63a2\u67e5\u6cd5\u89e3\u51b3\u51b2\u7a81 from _array import Array class Slot ( object ): def __init__ ( self , key , value ): self . key , self . value = key , value def __str__ ( self ): return '<key: {key} , value: {value} >' . format ( key = self . key , value = self . value ) class HashTable ( object ): UNUSE = None # \u672a\u4f7f\u7528\u8fc7 EMPTY = Slot ( None , None ) # \u4f7f\u7528\u8fc7\u88ab\u5220\u9664\u4e86 def __init__ ( self ): self . _items = Array ( 4 ) self . length = 0 def __str__ ( self ): res = '' for solt in self . _items : if solt not in ( HashTable . UNUSE , HashTable . EMPTY ): res += str ( solt ) return res def _hash ( self , key ): return abs ( hash ( key )) % len ( self . _items ) def _index_can_insert ( self , index ): return self . _items [ index ] is HashTable . UNUSE or self . _items [ index ] is HashTable . EMPTY @property def _load_factor ( self ): return self . length / float ( len ( self . _items )) def _find_can_insert_index ( self , key ): index = self . _hash ( key ) while not self . _index_can_insert ( index ): index = self . _hash ( index + 1 ) return index def _rehash ( self ): new_length = len ( self . _items ) * 2 old_items = self . _items self . _items = Array ( new_length ) self . length = 0 for solt in old_items : if solt is not HashTable . EMPTY and solt is not HashTable . UNUSE : index = self . _find_can_insert_index ( solt . key ) self . _items [ index ] = solt self . length += 1 def __setitem__ ( self , key , value ): if key in self : index = self . _find_key ( key ) self . _items [ index ] . value = value else : # \u68c0\u67e5\u88c5\u8f7d\u56e0\u5b50, >0.7\u91cd\u54c8\u5e0c if self . _load_factor > 0.7 : self . _rehash () index = self . _find_can_insert_index ( key ) self . _items [ index ] = Slot ( key , value ) self . length += 1 def _find_key ( self , key ): ''' \u89e3\u91ca\u4e00\u4e2a slot \u4e3a UNUSED \u548c EMPTY \u7684\u533a\u522b \u56e0\u4e3a\u4f7f\u7528\u7684\u662f\u7ebf\u6027\u63a2\u67e5\u7684\u65b9\u5f0f\uff0c\u5047\u5982\u6709\u4e24\u4e2a\u5143\u7d20 A\uff0cB \u51b2\u7a81\u4e86\uff0c\u9996\u5148A hash \u5f97\u5230\u662f slot \u4e0b\u68075\uff0cA \u653e\u5230\u4e86\u7b2c5\u4e2a\u69fd\uff0c\u4e4b\u540e\u63d2\u5165 B \u56e0\u4e3a\u51b2\u7a81\u4e86\uff0c\u6240\u4ee5\u7ee7\u7eed\u6839\u636e\u7ebf\u6027\u63a2\u67e5\u65b9\u5f0f\u653e\u5230\u4e86 slot8\u3002 \u7136\u540e\u5220\u9664 A\uff0c\u69fd 5 \u88ab\u7f6e\u4e3a EMPTY\u3002\u7136\u540e\u6211\u53bb\u67e5\u627e B\uff0c\u7b2c\u4e00\u6b21 hash \u5f97\u5230\u7684\u662f \u69fd5\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u6211\u8fd8\u662f\u9700\u8981\u7b2c\u4e8c\u6b21\u8ba1\u7b97 hash \u624d\u80fd\u627e\u5230 B\u3002 \u4f46\u662f\u5982\u679c\u69fd\u662f UNUSED \u6211\u5c31\u4e0d\u7528\u7ee7\u7eed\u627e\u4e86\uff0c\u6211\u8ba4\u4e3a B \u5c31\u662f\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u5c31\u662f UNUSED \u548c EMPTY \u7684\u533a\u522b\u3002 ''' origin_index = self . _hash ( key ) # \u67e5\u627e\u8d77\u70b9\uff0c\u5982\u679c\u627e\u4e86\u4e00\u5708\u53c8\u56de\u5230\u4e86\u8d77\u70b9\uff0c\u5219\u6ca1\u6709key index = origin_index while self . _items [ index ] is not HashTable . UNUSE : if self . _items [ index ] is HashTable . EMPTY : # \u6ce8\u610f\u5982\u679c\u662f EMPTY\uff0c\u7ee7\u7eed\u5bfb\u627e\u4e0b\u4e00\u4e2a\u69fd index = self . _hash ( index + 1 ) if index == origin_index : return None continue if self . _items [ index ] . key == key : return index else : index = self . _hash ( index + 1 ) if index == origin_index : return None def __getitem__ ( self , key ): index = self . _find_key ( key ) if index is None : return None return self . _items [ index ] . value def __len__ ( self ): return self . length def remove ( self , key ): index = self . _find_key ( key ) if index is None : raise KeyError () self . _items [ index ] = HashTable . EMPTY self . length -= 1 def __contains__ ( self , key ): index = self . _find_key ( key ) return index is not None def __iter__ ( self ): for solt in self . _items : if solt not in ( HashTable . UNUSE , HashTable . EMPTY ): yield solt . key def test_hash_table (): a = HashTable () assert ( len ( a ) == 0 ) a [ None ] = None assert ( len ( a ) == 1 ) a [ 'a' ] = 0 a [ 'b' ] = 1 assert ( len ( a ) == 3 ) assert ( a [ None ] is None ) assert ( a [ 'a' ] == 0 ) assert ( a [ 'b' ] == 1 ) assert ( a [ 'c' ] == None ) a . remove ( 'b' ) assert ( len ( a ) == 2 ) a [ 'b' ] = 1 a [ 'c' ] = 2 a [ 'd' ] = 3 a [ 'e' ] = 4 a [ 'f' ] = 5 a [ 'g' ] = 6 a [ 'g' ] = 7 print ( a ) assert ( a [ 'b' ] == 1 ) assert ( a [ 'c' ] == 2 ) assert ( a [ 'd' ] == 3 ) assert ( a [ 'e' ] == 4 ) assert ( a [ 'f' ] == 5 ) assert ( a [ 'g' ] == 7 ) test_hash_table ()","title":"python \u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/","text":"\u56fe \u00b6 \u56fe\u6a21\u62df\u4e00\u7ec4\u8fde\u63a5\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u4e0e\u670b\u53cb\u73a9\u724c\uff0c\u5e76\u8981\u6a21\u62df\u8c01\u6b20\u8c01\u94b1\uff0c\u53ef\u50cf\u4e0b\u9762\u8fd9\u6837\u6307\u51faAlex\u6b20Rama\u94b1\u3002 \u5b8c\u6574\u7684\u6b20\u94b1\u56fe\u53ef\u80fd\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\u3002 Alex\u6b20Rama\u94b1\uff0cTom\u6b20Adit\u94b1\uff0c\u7b49\u7b49\u3002\u56fe\u7531\u8282\u70b9\uff08node\uff09\u548c\u8fb9\uff08edge\uff09\u7ec4\u6210\u3002 \u5c31\u8fd9\u4e48\u7b80\u5355\uff01\u56fe\u7531\u8282\u70b9\u548c\u8fb9\u7ec4\u6210\u3002\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u4e0e\u4f17\u591a\u8282\u70b9\u76f4\u63a5\u76f8\u8fde\uff0c\u8fd9\u4e9b\u8282\u70b9\u88ab\u79f0\u4e3a\u90bb\u5c45\u3002 \u5728\u524d\u9762\u7684\u6b20\u94b1\u56fe\u4e2d\uff0cRama\u662fAlex\u7684\u90bb\u5c45\u3002Adit\u4e0d\u662fAlex\u7684\u90bb\u5c45\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u76f4\u63a5\u76f8\u8fde\u3002 \u4f46Adit\u65e2\u662fRama\u7684\u90bb\u5c45\uff0c\u53c8\u662fTom\u7684\u90bb\u5c45\u3002 \u56fe\u7528\u4e8e\u6a21\u62df\u4e0d\u540c\u7684\u4e1c\u897f\u662f\u5982\u4f55\u76f8\u8fde\u7684\u3002 \u4e0b\u9762\u6765\u770b\u770b\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u00b6 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u662f\u4e00\u79cd\u7528\u4e8e\u56fe\u7684\u67e5\u627e\u7b97\u6cd5\u3002 \u53ef\u5e2e\u52a9\u56de\u7b54\u4e24\u7c7b\u95ee\u9898\u3002 \u7b2c\u4e00\u7c7b\u95ee\u9898\uff1a\u4ece\u8282\u70b9A\u51fa\u53d1\uff0c\u6709\u524d\u5f80\u8282\u70b9B\u7684\u8def\u5f84\u5417\uff1f \u7b2c\u4e8c\u7c7b\u95ee\u9898\uff1a\u4ece\u8282\u70b9A\u51fa\u53d1\uff0c\u524d\u5f80\u8282\u70b9B\u7684\u54ea\u6761\u8def\u5f84\u6700\u77ed\uff1f \u5047\u8bbe\u4f60\u7ecf\u8425\u7740\u4e00\u4e2a\u8292\u679c\u519c\u573a\uff0c\u9700\u8981\u5bfb\u627e\u8292\u679c\u9500\u552e\u5546\uff0c\u4ee5\u4fbf\u5c06\u8292\u679c\u5356\u7ed9\u4ed6\u3002 \u5728Facebook\uff0c\u4f60\u4e0e \u8292\u679c\u9500\u552e\u5546\u6709\u8054\u7cfb\u5417\uff1f\u4e3a\u6b64\uff0c\u4f60\u53ef\u5728\u670b\u53cb\u4e2d\u67e5\u627e\u3002 \u8fd9\u79cd\u67e5\u627e\u5f88\u7b80\u5355\u3002\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u670b\u53cb\u540d\u5355\u3002 \u7136\u540e\uff0c\u4f9d\u6b21\u68c0\u67e5\u540d\u5355\u4e2d\u7684\u6bcf\u4e2a\u4eba\uff0c\u770b\u770b\u4ed6\u662f\u5426\u662f\u8292\u679c\u9500\u552e\u5546\u3002 \u5047\u8bbe\u4f60\u6ca1\u6709\u670b\u53cb\u662f\u8292\u679c\u9500\u552e\u5546\uff0c\u90a3\u4e48\u4f60\u5c31\u5fc5\u987b\u5728\u670b\u53cb\u7684\u670b\u53cb\u4e2d\u67e5\u627e\u3002 \u68c0\u67e5\u540d\u5355\u4e2d\u7684\u6bcf\u4e2a\u4eba\u65f6\uff0c\u4f60\u90fd\u5c06\u5176\u670b\u53cb\u52a0\u5165\u540d\u5355\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u4f60\u4e0d\u4ec5\u5728\u670b\u53cb\u4e2d\u67e5\u627e\uff0c\u8fd8\u5728\u670b\u53cb\u7684\u670b\u53cb\u4e2d\u67e5\u627e\u3002\u522b\u5fd8\u4e86\uff0c\u4f60\u7684\u76ee\u6807\u662f\u5728\u4f60\u7684\u4eba\u9645 \u5173\u7cfb\u7f51\u4e2d\u627e\u5230\u4e00\u4f4d\u8292\u679c\u9500\u552e\u5546\u3002\u56e0\u6b64\uff0c\u5982\u679cAlice\u4e0d\u662f\u8292\u679c\u9500\u552e\u5546\uff0c\u5c31\u5c06\u5176\u670b\u53cb\u4e5f\u52a0\u5165\u5230\u540d\u5355\u4e2d\u3002 \u8fd9\u610f\u5473\u7740\u4f60\u5c06\u5728\u5979\u7684\u670b\u53cb\u3001\u670b\u53cb\u7684\u670b\u53cb\u7b49\u4e2d\u67e5\u627e\u3002\u4f7f\u7528\u8fd9\u79cd\u7b97\u6cd5\u5c06\u641c\u904d\u4f60\u7684\u6574\u4e2a\u4eba\u9645\u5173\u7cfb\u7f51\uff0c\u76f4 \u5230\u627e\u5230\u8292\u679c\u9500\u552e\u5546\u3002\u8fd9\u5c31\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\u3002 \u67e5\u627e\u6700\u77ed\u8def\u5f84 \u00b6 \u518d\u8bf4\u4e00\u6b21\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u53ef\u56de\u7b54\u4e24\u7c7b\u95ee\u9898\u3002 \u7b2c\u4e00\u7c7b\u95ee\u9898\uff1a\u4ece\u8282\u70b9A\u51fa\u53d1\uff0c\u6709\u524d\u5f80\u8282\u70b9B\u7684\u8def\u5f84\u5417\uff1f\uff08\u5728\u4f60\u7684\u4eba\u9645\u5173\u7cfb\u7f51\u4e2d\uff0c\u6709\u8292\u679c\u9500 \u552e\u5546\u5417\uff1f\uff09 \u7b2c\u4e8c\u7c7b\u95ee\u9898\uff1a\u4ece\u8282\u70b9A\u51fa\u53d1\uff0c\u524d\u5f80\u8282\u70b9B\u7684\u54ea\u6761\u8def\u5f84\u6700\u77ed\uff1f\uff08\u54ea\u4e2a\u8292\u679c\u9500\u552e\u5546\u4e0e\u4f60\u7684\u5173\u7cfb \u6700\u8fd1\uff1f\uff09 \u521a\u624d\u4f60\u770b\u5230\u4e86\u5982\u4f55\u56de\u7b54\u7b2c\u4e00\u7c7b\u95ee\u9898\uff0c\u4e0b\u9762\u6765\u5c1d\u8bd5\u56de\u7b54\u7b2c\u4e8c\u7c7b\u95ee\u9898\u2014\u2014\u8c01\u662f\u5173\u7cfb\u6700\u8fd1\u7684\u8292\u679c\u9500\u552e\u5546\u3002 \u4f8b\u5982\uff0c\u670b\u53cb\u662f\u4e00\u5ea6\u5173\u7cfb\uff0c\u670b\u53cb\u7684\u670b\u53cb\u662f\u4e8c\u5ea6\u5173\u7cfb\u3002 \u5728\u4f60\u770b\u6765\uff0c\u4e00\u5ea6\u5173\u7cfb\u80dc\u8fc7\u4e8c\u5ea6\u5173\u7cfb\uff0c\u4e8c\u5ea6\u5173\u7cfb\u80dc\u8fc7\u4e09\u5ea6\u5173\u7cfb\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u56e0\u6b64\uff0c\u4f60\u5e94\u5148\u5728\u4e00\u5ea6\u5173\u7cfb\u4e2d\u641c\u7d22\uff0c \u786e\u5b9a\u5176\u4e2d\u6ca1\u6709\u8292\u679c\u9500\u552e\u5546\u540e\uff0c\u624d\u5728\u4e8c\u5ea6\u5173\u7cfb\u4e2d\u641c\u7d22\u3002 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5c31\u662f\u8fd9\u6837\u505a\u7684\uff01 \u5728\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u641c\u7d22\u8303\u56f4\u4ece\u8d77\u70b9\u5f00\u59cb\u9010\u6e10\u5411\u5916\u5ef6\u4f38\uff0c\u5373\u5148\u68c0\u67e5\u4e00\u5ea6\u5173\u7cfb\uff0c\u518d\u68c0\u67e5\u4e8c\u5ea6\u5173\u7cfb\u3002 \u987a\u4fbf\u95ee\u4e00\u53e5\uff1a\u5c06\u5148\u68c0\u67e5Claire\u8fd8\u662fAnuj\u5462\uff1fClaire\u662f\u4e00\u5ea6\u5173\u7cfb\uff0c\u800cAnuj\u662f\u4e8c\u5ea6\u5173\u7cfb\uff0c\u56e0 \u6b64\u5c06\u5148\u68c0\u67e5Claire\uff0c\u540e\u68c0\u67e5Anuj\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u770b\uff0c\u4e00\u5ea6\u5173\u7cfb\u5728\u4e8c\u5ea6\u5173\u7cfb\u4e4b\u524d\u52a0\u5165\u67e5\u627e\u540d\u5355\u3002 \u4f60\u6309\u987a\u5e8f\u4f9d\u6b21\u68c0\u67e5\u540d\u5355\u4e2d\u7684\u6bcf\u4e2a\u4eba\uff0c\u770b\u770b\u4ed6\u662f\u5426\u662f\u8292\u679c\u9500\u552e\u5546\u3002 \u8fd9\u5c06\u5148\u5728\u4e00\u5ea6\u5173\u7cfb\u4e2d\u67e5\u627e\uff0c\u518d\u5728\u4e8c\u5ea6\u5173\u7cfb\u4e2d\u67e5\u627e\uff0c\u56e0\u6b64\u627e\u5230\u7684\u662f\u5173\u7cfb\u6700\u8fd1\u7684\u8292\u679c\u9500\u552e\u5546\u3002 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4e0d\u4ec5\u67e5\u627e\u4eceA\u5230B\u7684\u8def\u5f84\uff0c\u800c\u4e14\u627e\u5230\u7684\u662f\u6700\u77ed\u7684\u8def\u5f84\u3002 \u6ce8\u610f\uff0c\u53ea\u6709\u6309\u6dfb\u52a0\u987a\u5e8f\u67e5\u627e\u65f6\uff0c\u624d\u80fd\u5b9e\u73b0\u8fd9\u6837\u7684\u76ee\u7684\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679cClaire\u5148\u4e8eAnuj\u52a0\u5165 \u540d\u5355\uff0c\u5c31\u9700\u8981\u5148\u68c0\u67e5Claire\uff0c\u518d\u68c0\u67e5Anuj\u3002 \u5982\u679cClaire\u548cAnuj\u90fd\u662f\u8292\u679c\u9500\u552e\u5546\uff0c\u800c\u4f60\u5148\u68c0\u67e5Anuj \u518d\u68c0\u67e5Claire\uff0c\u7ed3\u679c\u5c06\u5982\u4f55\u5462\uff1f \u627e\u5230\u7684\u8292\u679c\u9500\u552e\u5546\u5e76\u975e\u662f\u4e0e\u4f60\u5173\u7cfb\u6700\u8fd1\u7684\uff0c\u56e0\u4e3aAnuj\u662f\u4f60\u670b\u53cb\u7684\u670b\u53cb\uff0c\u800cClaire\u662f\u4f60\u7684\u670b\u53cb\u3002\u56e0\u6b64\uff0c\u4f60\u9700\u8981\u6309\u6dfb\u52a0\u987a\u5e8f\u8fdb\u884c\u68c0\u67e5\u3002\u6709\u4e00\u4e2a\u53ef\u5b9e\u73b0\u8fd9\u79cd\u76ee\u7684\u7684\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u5c31\u662f\u961f\u5217\uff08queue\uff09\u3002 \u5b9e\u73b0\u56fe \u00b6 \u9996\u5148\uff0c\u9700\u8981\u4f7f\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u56fe\u3002\u56fe\u7531\u591a\u4e2a\u8282\u70b9\u7ec4\u6210\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u4e0e\u90bb\u8fd1\u8282\u70b9\u76f8\u8fde\uff0c\u5982\u679c\u8868\u793a\u7c7b\u4f3c\u4e8e\u201c\u4f60\u2192Bob\u201d \u8fd9\u6837\u7684\u5173\u7cfb\u5462\uff1f\u597d\u5728\u4f60\u77e5\u9053\u7684\u4e00\u79cd\u7ed3\u6784\u8ba9\u4f60\u80fd\u591f\u8868\u793a\u8fd9\u79cd\u5173\u7cfb\uff0c\u5b83\u5c31\u662f\u6563\u5217\u8868\uff01 \u8bb0\u4f4f\uff0c\u6563\u5217\u8868\u8ba9\u4f60\u80fd\u591f\u5c06\u952e\u6620\u5c04\u5230\u503c\u3002\u5728\u8fd9\u91cc\uff0c\u4f60\u8981\u5c06\u8282\u70b9\u6620\u5c04\u5230\u5176\u6240\u6709\u90bb\u5c45\u3002 \u8868\u793a\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\u7684Python\u4ee3\u7801\u5982\u4e0b\u3002 graph = {} graph [ \"you\" ] = [ \"alice\" , \"bob\" , \"claire\" ] \u6ce8\u610f\uff0c \u201c\u4f60\u201d\u88ab\u6620\u5c04\u5230\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u56e0\u6b64graph[\"you\"]\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u201c\u4f60\u201d\u7684 \u6240\u6709\u90bb\u5c45\u3002 \u56fe\u4e0d\u8fc7\u662f\u4e00\u7cfb\u5217\u7684\u8282\u70b9\u548c\u8fb9\uff0c\u56e0\u6b64\u5728Python\u4e2d\uff0c\u53ea\u9700\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u5c31\u53ef\u8868\u793a\u4e00\u4e2a\u56fe\u3002\u90a3\u50cf\u4e0b \u9762\u8fd9\u6837\u66f4\u5927\u7684\u56fe\u5462\uff1f \u8868\u793a\u5b83\u7684Python\u4ee3\u7801\u5982\u4e0b\u3002 graph = {} graph [ \"you\" ] = [ \"alice\" , \"bob\" , \"claire\" ] graph [ \"bob\" ] = [ \"anuj\" , \"peggy\" ] graph [ \"alice\" ] = [ \"peggy\" ] graph [ \"claire\" ] = [ \"thom\" , \"jonny\" ] graph [ \"anuj\" ] = [] graph [ \"peggy\" ] = [] graph [ \"thom\" ] = [] graph [ \"jonny\" ] = [] \u4ee3\u7801\u5b9e\u73b0 \u00b6 \u89e3\u51b3\u95ee\u9898\u4e00\uff1a \u662f\u5426\u5b58\u5728\uff1f \u00b6 from collections import deque # \u5b9a\u4e49\u4e00\u4e2a\u56fe graph = {} graph [ \"you\" ] = [ \"alice\" , \"bob\" , \"claire\" ] graph [ \"bob\" ] = [ \"anuj\" , \"peggy\" ] graph [ \"alice\" ] = [ \"peggy\" ] graph [ \"claire\" ] = [ \"thom\" , \"jonny\" ] graph [ \"anuj\" ] = [] graph [ \"peggy\" ] = [] graph [ \"thom\" ] = [] graph [ \"jonny\" ] = [] def find_person ( target ): ''' \u67e5\u627e\u5173\u7cfb\u7f51\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u4eba ''' searched = [] # \u641c\u7d22\u8fc7\u7684\u4eba search_queue = deque () search_queue += graph [ 'you' ] while search_queue : person = search_queue . popleft () if person not in searched : searched . append ( person ) if person == target : return True search_queue += graph [ person ] return False print ( find_person ( 'thom' )) \u89e3\u51b3\u95ee\u9898\u4e8c\uff1a \u6700\u77ed\u8def\u5f84 \u00b6 \u8fd0\u884c\u65f6\u95f4 \u00b6 \u5982\u679c\u4f60\u5728\u4f60\u7684\u6574\u4e2a\u4eba\u9645\u5173\u7cfb\u7f51\u4e2d\u641c\u7d22\u8292\u679c\u9500\u552e\u5546\uff0c\u5c31\u610f\u5473\u7740\u4f60\u5c06\u6cbf\u6bcf\u6761\u8fb9\u524d\u884c\uff08\u8bb0\u4f4f\uff0c\u8fb9\u662f \u4ece\u4e00\u4e2a\u4eba\u5230\u53e6\u4e00\u4e2a\u4eba\u7684\u7bad\u5934\u6216\u8fde\u63a5\uff09 \uff0c\u56e0\u6b64\u8fd0\u884c\u65f6\u95f4\u81f3\u5c11\u4e3aO(\u8fb9\u6570)\u3002 \u4f60\u8fd8\u4f7f\u7528\u4e86\u4e00\u4e2a\u961f\u5217\uff0c\u5176\u4e2d\u5305\u542b\u8981\u68c0\u67e5\u7684\u6bcf\u4e2a\u4eba\u3002 \u5c06\u4e00\u4e2a\u4eba\u6dfb\u52a0\u5230\u961f\u5217\u9700\u8981\u7684\u65f6\u95f4\u662f\u56fa\u5b9a\u7684\uff0c\u5373\u4e3aO(1)\uff0c\u56e0\u6b64\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u8fd9\u6837\u505a\u9700\u8981\u7684\u603b\u65f6\u95f4\u4e3aO(\u4eba\u6570)\u3002\u6240\u4ee5\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a O(\u4eba\u6570 + \u8fb9\u6570)\uff0c\u8fd9\u901a\u5e38\u5199\u4f5cO(V + E)\uff0c\u5176\u4e2dV\u4e3a\u9876\u70b9\uff08vertice\uff09\u6570\uff0cE\u4e3a\u8fb9\u6570\u3002","title":"\u56fe\u548c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/#_1","text":"\u56fe\u6a21\u62df\u4e00\u7ec4\u8fde\u63a5\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u4e0e\u670b\u53cb\u73a9\u724c\uff0c\u5e76\u8981\u6a21\u62df\u8c01\u6b20\u8c01\u94b1\uff0c\u53ef\u50cf\u4e0b\u9762\u8fd9\u6837\u6307\u51faAlex\u6b20Rama\u94b1\u3002 \u5b8c\u6574\u7684\u6b20\u94b1\u56fe\u53ef\u80fd\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6837\u3002 Alex\u6b20Rama\u94b1\uff0cTom\u6b20Adit\u94b1\uff0c\u7b49\u7b49\u3002\u56fe\u7531\u8282\u70b9\uff08node\uff09\u548c\u8fb9\uff08edge\uff09\u7ec4\u6210\u3002 \u5c31\u8fd9\u4e48\u7b80\u5355\uff01\u56fe\u7531\u8282\u70b9\u548c\u8fb9\u7ec4\u6210\u3002\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u4e0e\u4f17\u591a\u8282\u70b9\u76f4\u63a5\u76f8\u8fde\uff0c\u8fd9\u4e9b\u8282\u70b9\u88ab\u79f0\u4e3a\u90bb\u5c45\u3002 \u5728\u524d\u9762\u7684\u6b20\u94b1\u56fe\u4e2d\uff0cRama\u662fAlex\u7684\u90bb\u5c45\u3002Adit\u4e0d\u662fAlex\u7684\u90bb\u5c45\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u76f4\u63a5\u76f8\u8fde\u3002 \u4f46Adit\u65e2\u662fRama\u7684\u90bb\u5c45\uff0c\u53c8\u662fTom\u7684\u90bb\u5c45\u3002 \u56fe\u7528\u4e8e\u6a21\u62df\u4e0d\u540c\u7684\u4e1c\u897f\u662f\u5982\u4f55\u76f8\u8fde\u7684\u3002 \u4e0b\u9762\u6765\u770b\u770b\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002","title":"\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/#_2","text":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u662f\u4e00\u79cd\u7528\u4e8e\u56fe\u7684\u67e5\u627e\u7b97\u6cd5\u3002 \u53ef\u5e2e\u52a9\u56de\u7b54\u4e24\u7c7b\u95ee\u9898\u3002 \u7b2c\u4e00\u7c7b\u95ee\u9898\uff1a\u4ece\u8282\u70b9A\u51fa\u53d1\uff0c\u6709\u524d\u5f80\u8282\u70b9B\u7684\u8def\u5f84\u5417\uff1f \u7b2c\u4e8c\u7c7b\u95ee\u9898\uff1a\u4ece\u8282\u70b9A\u51fa\u53d1\uff0c\u524d\u5f80\u8282\u70b9B\u7684\u54ea\u6761\u8def\u5f84\u6700\u77ed\uff1f \u5047\u8bbe\u4f60\u7ecf\u8425\u7740\u4e00\u4e2a\u8292\u679c\u519c\u573a\uff0c\u9700\u8981\u5bfb\u627e\u8292\u679c\u9500\u552e\u5546\uff0c\u4ee5\u4fbf\u5c06\u8292\u679c\u5356\u7ed9\u4ed6\u3002 \u5728Facebook\uff0c\u4f60\u4e0e \u8292\u679c\u9500\u552e\u5546\u6709\u8054\u7cfb\u5417\uff1f\u4e3a\u6b64\uff0c\u4f60\u53ef\u5728\u670b\u53cb\u4e2d\u67e5\u627e\u3002 \u8fd9\u79cd\u67e5\u627e\u5f88\u7b80\u5355\u3002\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u670b\u53cb\u540d\u5355\u3002 \u7136\u540e\uff0c\u4f9d\u6b21\u68c0\u67e5\u540d\u5355\u4e2d\u7684\u6bcf\u4e2a\u4eba\uff0c\u770b\u770b\u4ed6\u662f\u5426\u662f\u8292\u679c\u9500\u552e\u5546\u3002 \u5047\u8bbe\u4f60\u6ca1\u6709\u670b\u53cb\u662f\u8292\u679c\u9500\u552e\u5546\uff0c\u90a3\u4e48\u4f60\u5c31\u5fc5\u987b\u5728\u670b\u53cb\u7684\u670b\u53cb\u4e2d\u67e5\u627e\u3002 \u68c0\u67e5\u540d\u5355\u4e2d\u7684\u6bcf\u4e2a\u4eba\u65f6\uff0c\u4f60\u90fd\u5c06\u5176\u670b\u53cb\u52a0\u5165\u540d\u5355\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u4f60\u4e0d\u4ec5\u5728\u670b\u53cb\u4e2d\u67e5\u627e\uff0c\u8fd8\u5728\u670b\u53cb\u7684\u670b\u53cb\u4e2d\u67e5\u627e\u3002\u522b\u5fd8\u4e86\uff0c\u4f60\u7684\u76ee\u6807\u662f\u5728\u4f60\u7684\u4eba\u9645 \u5173\u7cfb\u7f51\u4e2d\u627e\u5230\u4e00\u4f4d\u8292\u679c\u9500\u552e\u5546\u3002\u56e0\u6b64\uff0c\u5982\u679cAlice\u4e0d\u662f\u8292\u679c\u9500\u552e\u5546\uff0c\u5c31\u5c06\u5176\u670b\u53cb\u4e5f\u52a0\u5165\u5230\u540d\u5355\u4e2d\u3002 \u8fd9\u610f\u5473\u7740\u4f60\u5c06\u5728\u5979\u7684\u670b\u53cb\u3001\u670b\u53cb\u7684\u670b\u53cb\u7b49\u4e2d\u67e5\u627e\u3002\u4f7f\u7528\u8fd9\u79cd\u7b97\u6cd5\u5c06\u641c\u904d\u4f60\u7684\u6574\u4e2a\u4eba\u9645\u5173\u7cfb\u7f51\uff0c\u76f4 \u5230\u627e\u5230\u8292\u679c\u9500\u552e\u5546\u3002\u8fd9\u5c31\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\u3002","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/#_3","text":"\u518d\u8bf4\u4e00\u6b21\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u53ef\u56de\u7b54\u4e24\u7c7b\u95ee\u9898\u3002 \u7b2c\u4e00\u7c7b\u95ee\u9898\uff1a\u4ece\u8282\u70b9A\u51fa\u53d1\uff0c\u6709\u524d\u5f80\u8282\u70b9B\u7684\u8def\u5f84\u5417\uff1f\uff08\u5728\u4f60\u7684\u4eba\u9645\u5173\u7cfb\u7f51\u4e2d\uff0c\u6709\u8292\u679c\u9500 \u552e\u5546\u5417\uff1f\uff09 \u7b2c\u4e8c\u7c7b\u95ee\u9898\uff1a\u4ece\u8282\u70b9A\u51fa\u53d1\uff0c\u524d\u5f80\u8282\u70b9B\u7684\u54ea\u6761\u8def\u5f84\u6700\u77ed\uff1f\uff08\u54ea\u4e2a\u8292\u679c\u9500\u552e\u5546\u4e0e\u4f60\u7684\u5173\u7cfb \u6700\u8fd1\uff1f\uff09 \u521a\u624d\u4f60\u770b\u5230\u4e86\u5982\u4f55\u56de\u7b54\u7b2c\u4e00\u7c7b\u95ee\u9898\uff0c\u4e0b\u9762\u6765\u5c1d\u8bd5\u56de\u7b54\u7b2c\u4e8c\u7c7b\u95ee\u9898\u2014\u2014\u8c01\u662f\u5173\u7cfb\u6700\u8fd1\u7684\u8292\u679c\u9500\u552e\u5546\u3002 \u4f8b\u5982\uff0c\u670b\u53cb\u662f\u4e00\u5ea6\u5173\u7cfb\uff0c\u670b\u53cb\u7684\u670b\u53cb\u662f\u4e8c\u5ea6\u5173\u7cfb\u3002 \u5728\u4f60\u770b\u6765\uff0c\u4e00\u5ea6\u5173\u7cfb\u80dc\u8fc7\u4e8c\u5ea6\u5173\u7cfb\uff0c\u4e8c\u5ea6\u5173\u7cfb\u80dc\u8fc7\u4e09\u5ea6\u5173\u7cfb\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u56e0\u6b64\uff0c\u4f60\u5e94\u5148\u5728\u4e00\u5ea6\u5173\u7cfb\u4e2d\u641c\u7d22\uff0c \u786e\u5b9a\u5176\u4e2d\u6ca1\u6709\u8292\u679c\u9500\u552e\u5546\u540e\uff0c\u624d\u5728\u4e8c\u5ea6\u5173\u7cfb\u4e2d\u641c\u7d22\u3002 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5c31\u662f\u8fd9\u6837\u505a\u7684\uff01 \u5728\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u641c\u7d22\u8303\u56f4\u4ece\u8d77\u70b9\u5f00\u59cb\u9010\u6e10\u5411\u5916\u5ef6\u4f38\uff0c\u5373\u5148\u68c0\u67e5\u4e00\u5ea6\u5173\u7cfb\uff0c\u518d\u68c0\u67e5\u4e8c\u5ea6\u5173\u7cfb\u3002 \u987a\u4fbf\u95ee\u4e00\u53e5\uff1a\u5c06\u5148\u68c0\u67e5Claire\u8fd8\u662fAnuj\u5462\uff1fClaire\u662f\u4e00\u5ea6\u5173\u7cfb\uff0c\u800cAnuj\u662f\u4e8c\u5ea6\u5173\u7cfb\uff0c\u56e0 \u6b64\u5c06\u5148\u68c0\u67e5Claire\uff0c\u540e\u68c0\u67e5Anuj\u3002 \u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u770b\uff0c\u4e00\u5ea6\u5173\u7cfb\u5728\u4e8c\u5ea6\u5173\u7cfb\u4e4b\u524d\u52a0\u5165\u67e5\u627e\u540d\u5355\u3002 \u4f60\u6309\u987a\u5e8f\u4f9d\u6b21\u68c0\u67e5\u540d\u5355\u4e2d\u7684\u6bcf\u4e2a\u4eba\uff0c\u770b\u770b\u4ed6\u662f\u5426\u662f\u8292\u679c\u9500\u552e\u5546\u3002 \u8fd9\u5c06\u5148\u5728\u4e00\u5ea6\u5173\u7cfb\u4e2d\u67e5\u627e\uff0c\u518d\u5728\u4e8c\u5ea6\u5173\u7cfb\u4e2d\u67e5\u627e\uff0c\u56e0\u6b64\u627e\u5230\u7684\u662f\u5173\u7cfb\u6700\u8fd1\u7684\u8292\u679c\u9500\u552e\u5546\u3002 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4e0d\u4ec5\u67e5\u627e\u4eceA\u5230B\u7684\u8def\u5f84\uff0c\u800c\u4e14\u627e\u5230\u7684\u662f\u6700\u77ed\u7684\u8def\u5f84\u3002 \u6ce8\u610f\uff0c\u53ea\u6709\u6309\u6dfb\u52a0\u987a\u5e8f\u67e5\u627e\u65f6\uff0c\u624d\u80fd\u5b9e\u73b0\u8fd9\u6837\u7684\u76ee\u7684\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679cClaire\u5148\u4e8eAnuj\u52a0\u5165 \u540d\u5355\uff0c\u5c31\u9700\u8981\u5148\u68c0\u67e5Claire\uff0c\u518d\u68c0\u67e5Anuj\u3002 \u5982\u679cClaire\u548cAnuj\u90fd\u662f\u8292\u679c\u9500\u552e\u5546\uff0c\u800c\u4f60\u5148\u68c0\u67e5Anuj \u518d\u68c0\u67e5Claire\uff0c\u7ed3\u679c\u5c06\u5982\u4f55\u5462\uff1f \u627e\u5230\u7684\u8292\u679c\u9500\u552e\u5546\u5e76\u975e\u662f\u4e0e\u4f60\u5173\u7cfb\u6700\u8fd1\u7684\uff0c\u56e0\u4e3aAnuj\u662f\u4f60\u670b\u53cb\u7684\u670b\u53cb\uff0c\u800cClaire\u662f\u4f60\u7684\u670b\u53cb\u3002\u56e0\u6b64\uff0c\u4f60\u9700\u8981\u6309\u6dfb\u52a0\u987a\u5e8f\u8fdb\u884c\u68c0\u67e5\u3002\u6709\u4e00\u4e2a\u53ef\u5b9e\u73b0\u8fd9\u79cd\u76ee\u7684\u7684\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u5c31\u662f\u961f\u5217\uff08queue\uff09\u3002","title":"\u67e5\u627e\u6700\u77ed\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/#_4","text":"\u9996\u5148\uff0c\u9700\u8981\u4f7f\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u56fe\u3002\u56fe\u7531\u591a\u4e2a\u8282\u70b9\u7ec4\u6210\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u4e0e\u90bb\u8fd1\u8282\u70b9\u76f8\u8fde\uff0c\u5982\u679c\u8868\u793a\u7c7b\u4f3c\u4e8e\u201c\u4f60\u2192Bob\u201d \u8fd9\u6837\u7684\u5173\u7cfb\u5462\uff1f\u597d\u5728\u4f60\u77e5\u9053\u7684\u4e00\u79cd\u7ed3\u6784\u8ba9\u4f60\u80fd\u591f\u8868\u793a\u8fd9\u79cd\u5173\u7cfb\uff0c\u5b83\u5c31\u662f\u6563\u5217\u8868\uff01 \u8bb0\u4f4f\uff0c\u6563\u5217\u8868\u8ba9\u4f60\u80fd\u591f\u5c06\u952e\u6620\u5c04\u5230\u503c\u3002\u5728\u8fd9\u91cc\uff0c\u4f60\u8981\u5c06\u8282\u70b9\u6620\u5c04\u5230\u5176\u6240\u6709\u90bb\u5c45\u3002 \u8868\u793a\u8fd9\u79cd\u6620\u5c04\u5173\u7cfb\u7684Python\u4ee3\u7801\u5982\u4e0b\u3002 graph = {} graph [ \"you\" ] = [ \"alice\" , \"bob\" , \"claire\" ] \u6ce8\u610f\uff0c \u201c\u4f60\u201d\u88ab\u6620\u5c04\u5230\u4e86\u4e00\u4e2a\u6570\u7ec4\uff0c\u56e0\u6b64graph[\"you\"]\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u201c\u4f60\u201d\u7684 \u6240\u6709\u90bb\u5c45\u3002 \u56fe\u4e0d\u8fc7\u662f\u4e00\u7cfb\u5217\u7684\u8282\u70b9\u548c\u8fb9\uff0c\u56e0\u6b64\u5728Python\u4e2d\uff0c\u53ea\u9700\u4f7f\u7528\u4e0a\u8ff0\u4ee3\u7801\u5c31\u53ef\u8868\u793a\u4e00\u4e2a\u56fe\u3002\u90a3\u50cf\u4e0b \u9762\u8fd9\u6837\u66f4\u5927\u7684\u56fe\u5462\uff1f \u8868\u793a\u5b83\u7684Python\u4ee3\u7801\u5982\u4e0b\u3002 graph = {} graph [ \"you\" ] = [ \"alice\" , \"bob\" , \"claire\" ] graph [ \"bob\" ] = [ \"anuj\" , \"peggy\" ] graph [ \"alice\" ] = [ \"peggy\" ] graph [ \"claire\" ] = [ \"thom\" , \"jonny\" ] graph [ \"anuj\" ] = [] graph [ \"peggy\" ] = [] graph [ \"thom\" ] = [] graph [ \"jonny\" ] = []","title":"\u5b9e\u73b0\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/#_5","text":"","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/#_6","text":"from collections import deque # \u5b9a\u4e49\u4e00\u4e2a\u56fe graph = {} graph [ \"you\" ] = [ \"alice\" , \"bob\" , \"claire\" ] graph [ \"bob\" ] = [ \"anuj\" , \"peggy\" ] graph [ \"alice\" ] = [ \"peggy\" ] graph [ \"claire\" ] = [ \"thom\" , \"jonny\" ] graph [ \"anuj\" ] = [] graph [ \"peggy\" ] = [] graph [ \"thom\" ] = [] graph [ \"jonny\" ] = [] def find_person ( target ): ''' \u67e5\u627e\u5173\u7cfb\u7f51\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u4eba ''' searched = [] # \u641c\u7d22\u8fc7\u7684\u4eba search_queue = deque () search_queue += graph [ 'you' ] while search_queue : person = search_queue . popleft () if person not in searched : searched . append ( person ) if person == target : return True search_queue += graph [ person ] return False print ( find_person ( 'thom' ))","title":"\u89e3\u51b3\u95ee\u9898\u4e00\uff1a \u662f\u5426\u5b58\u5728\uff1f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/#_7","text":"","title":"\u89e3\u51b3\u95ee\u9898\u4e8c\uff1a \u6700\u77ed\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9B%BE%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/#_8","text":"\u5982\u679c\u4f60\u5728\u4f60\u7684\u6574\u4e2a\u4eba\u9645\u5173\u7cfb\u7f51\u4e2d\u641c\u7d22\u8292\u679c\u9500\u552e\u5546\uff0c\u5c31\u610f\u5473\u7740\u4f60\u5c06\u6cbf\u6bcf\u6761\u8fb9\u524d\u884c\uff08\u8bb0\u4f4f\uff0c\u8fb9\u662f \u4ece\u4e00\u4e2a\u4eba\u5230\u53e6\u4e00\u4e2a\u4eba\u7684\u7bad\u5934\u6216\u8fde\u63a5\uff09 \uff0c\u56e0\u6b64\u8fd0\u884c\u65f6\u95f4\u81f3\u5c11\u4e3aO(\u8fb9\u6570)\u3002 \u4f60\u8fd8\u4f7f\u7528\u4e86\u4e00\u4e2a\u961f\u5217\uff0c\u5176\u4e2d\u5305\u542b\u8981\u68c0\u67e5\u7684\u6bcf\u4e2a\u4eba\u3002 \u5c06\u4e00\u4e2a\u4eba\u6dfb\u52a0\u5230\u961f\u5217\u9700\u8981\u7684\u65f6\u95f4\u662f\u56fa\u5b9a\u7684\uff0c\u5373\u4e3aO(1)\uff0c\u56e0\u6b64\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u8fd9\u6837\u505a\u9700\u8981\u7684\u603b\u65f6\u95f4\u4e3aO(\u4eba\u6570)\u3002\u6240\u4ee5\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u8fd0\u884c\u65f6\u95f4\u4e3a O(\u4eba\u6570 + \u8fb9\u6570)\uff0c\u8fd9\u901a\u5e38\u5199\u4f5cO(V + E)\uff0c\u5176\u4e2dV\u4e3a\u9876\u70b9\uff08vertice\uff09\u6570\uff0cE\u4e3a\u8fb9\u6570\u3002","title":"\u8fd0\u884c\u65f6\u95f4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","text":"\u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20 \u00b6 \u903b\u8f91\u7ed3\u6784 \u7269\u7406\u7ed3\u6784\uff08\u5b58\u50a8\u7ed3\u6784\uff09 \u6570\u636e\u7684\u8fd0\u7b97 \u6570\u636e\u7c7b\u578b\u548c\u62bd\u8c61\u6570\u636e\u7c7b\u578b \u00b6 \u6570\u636e\u7c7b\u578b: \u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u8fd9\u4e2a\u503c\u7684\u96c6\u5408\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0 \u539f\u5b50\u7c7b\u578b: \u5176\u503c\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u7c7b\u578b \u4f8b\u5982: bool\u7c7b\u578b\uff0c\u503c\u7684\u8303\u56f4\uff1atrue, false; \u53ef\u8fdb\u884c\u7684\u64cd\u4f5c: \u4e0e\uff0c\u6216\uff0c\u975e \u7ed3\u6784\u7c7b\u578b: \u5176\u503c\u53ef\u4ee5\u518d\u5206\u89e3\u4e3a\u82e5\u5e72\u6210\u5206\u7684\u6570\u636e\u7c7b\u578b \u62bd\u8c61\u6570\u636e\u7c7b\u578b: \u62bd\u8c61\u6570\u636e\u7ec4\u7ec7\u53ca\u76f8\u5173\u7684\u64cd\u4f5c \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\u603b\u662f\u8003\u8651\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4ee5\u4fdd\u8bc1\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u6bd4\u4ed6\u66f4\u957f \u52a0\u6cd5\u6cd5\u5219: O(f(n)) + O(g(n)) = O(max(f(n), g(n)) \u4e58\u6cd5\u6cd5\u5219: O(f(n)) x O(g(n)) = O(f(n) x g(n)) O(1) < O(lg n) < O(n) < O(nlg n) < O(n^2) < O(2^n) < O(n!) < O(n^n) \u7b97\u6cd5\u7684\u6027\u80fd\u95ee\u9898\u53ea\u6709\u5728n\u5f88\u5927\u65f6\u624d\u4f1a\u66b4\u9732\u51fa\u6765 \u7b97\u6cd5\u539f\u5730\u5de5\u4f5c: \u7b97\u6cd5\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\u4e3a\u5e38\u91cf","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_1","text":"\u903b\u8f91\u7ed3\u6784 \u7269\u7406\u7ed3\u6784\uff08\u5b58\u50a8\u7ed3\u6784\uff09 \u6570\u636e\u7684\u8fd0\u7b97","title":"\u6570\u636e\u7ed3\u6784\u4e09\u8981\u7d20"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_2","text":"\u6570\u636e\u7c7b\u578b: \u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u8fd9\u4e2a\u503c\u7684\u96c6\u5408\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0 \u539f\u5b50\u7c7b\u578b: \u5176\u503c\u4e0d\u53ef\u518d\u5206\u7684\u6570\u636e\u7c7b\u578b \u4f8b\u5982: bool\u7c7b\u578b\uff0c\u503c\u7684\u8303\u56f4\uff1atrue, false; \u53ef\u8fdb\u884c\u7684\u64cd\u4f5c: \u4e0e\uff0c\u6216\uff0c\u975e \u7ed3\u6784\u7c7b\u578b: \u5176\u503c\u53ef\u4ee5\u518d\u5206\u89e3\u4e3a\u82e5\u5e72\u6210\u5206\u7684\u6570\u636e\u7c7b\u578b \u62bd\u8c61\u6570\u636e\u7c7b\u578b: \u62bd\u8c61\u6570\u636e\u7ec4\u7ec7\u53ca\u76f8\u5173\u7684\u64cd\u4f5c","title":"\u6570\u636e\u7c7b\u578b\u548c\u62bd\u8c61\u6570\u636e\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#_3","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u603b\u662f\u8003\u8651\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4ee5\u4fdd\u8bc1\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u4e0d\u4f1a\u6bd4\u4ed6\u66f4\u957f \u52a0\u6cd5\u6cd5\u5219: O(f(n)) + O(g(n)) = O(max(f(n), g(n)) \u4e58\u6cd5\u6cd5\u5219: O(f(n)) x O(g(n)) = O(f(n) x g(n)) O(1) < O(lg n) < O(n) < O(nlg n) < O(n^2) < O(2^n) < O(n!) < O(n^n) \u7b97\u6cd5\u7684\u6027\u80fd\u95ee\u9898\u53ea\u6709\u5728n\u5f88\u5927\u65f6\u624d\u4f1a\u66b4\u9732\u51fa\u6765 \u7b97\u6cd5\u539f\u5730\u5de5\u4f5c: \u7b97\u6cd5\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\u4e3a\u5e38\u91cf","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","text":"\u7b97\u6cd5\u601d\u60f3 \u00b6 \u662f\u521b\u5efa\u5728\u5f52\u5e76\u64cd\u4f5c\u4e0a\u7684\u4e00\u79cd\u6709\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u6548\u7387\u4e3aO(nlogn)\uff08\u5927O\u7b26\u53f7\uff09\u30021945\u5e74\u7531\u7ea6\u7ff0\u00b7\u51af\u00b7\u8bfa\u4f0a\u66fc\u9996\u6b21\u63d0\u51fa\u3002 \u8be5\u7b97\u6cd5\u662f\u91c7\u7528\u5206\u6cbb\u6cd5\uff08Divide and Conquer\uff09\u7684\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u5e94\u7528\uff0c\u4e14\u5404\u5c42\u5206\u6cbb\u9012\u5f52\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u3002 \u91c7\u7528\u5206\u6cbb\u6cd5: \u5206\u5272\uff1a\u9012\u5f52\u5730\u628a\u5f53\u524d\u5e8f\u5217\u5e73\u5747\u5206\u5272\u6210\u4e24\u534a\u3002 \u96c6\u6210\uff1a\u5728\u4fdd\u6301\u5143\u7d20\u987a\u5e8f\u7684\u540c\u65f6\u5c06\u4e0a\u4e00\u6b65\u5f97\u5230\u7684\u5b50\u5e8f\u5217\u96c6\u6210\u5230\u4e00\u8d77\uff08\u5f52\u5e76\uff09\u3002 python \u5b9e\u73b0 \u00b6 def merge_sort ( seq ): if len ( seq ) < 2 : return seq mid = len ( seq ) // 2 left_handle = merge_sort ( seq [: mid ]) right_handle = merge_sort ( seq [ mid : ]) return merge_sort_list ( left_handle , right_handle ) def merge_sort_list ( seq1 , seq2 ): if seq1 == []: return seq2 if seq2 == []: return seq1 ret = [] i , j = 0 , 0 # \u5206\u522b\u4ee3\u8868seq1, seq2\u7684\u4e0b\u6807 while True : if seq1 [ i ] < seq2 [ j ]: ret . append ( seq1 [ i ]) i += 1 else : ret . append ( seq2 [ j ]) j += 1 if i >= len ( seq1 ): ret . extend ( seq2 [ j :]) break if j >= len ( seq2 ): ret . extend ( seq1 [ i :]) break return ret def test_merge_sort_list (): seq1 = [ 1 , 2 , 3 , 4 , 6 ] seq2 = [ 0 , 1 , 1 , 2 , 5 ] assert ( merge_sort_list ( seq1 , seq2 ) == [ 0 , 1 , 1 , 1 , 2 , 2 , 3 , 4 , 5 , 6 ]) seq1 = [] seq2 = [ 0 , 1 , 1 , 2 , 5 ] assert ( merge_sort_list ( seq1 , seq2 ) == [ 0 , 1 , 1 , 2 , 5 ]) def test_merge_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) assert ( merge_sort ( seq ) == sorted ( seq ))","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_1","text":"\u662f\u521b\u5efa\u5728\u5f52\u5e76\u64cd\u4f5c\u4e0a\u7684\u4e00\u79cd\u6709\u6548\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u6548\u7387\u4e3aO(nlogn)\uff08\u5927O\u7b26\u53f7\uff09\u30021945\u5e74\u7531\u7ea6\u7ff0\u00b7\u51af\u00b7\u8bfa\u4f0a\u66fc\u9996\u6b21\u63d0\u51fa\u3002 \u8be5\u7b97\u6cd5\u662f\u91c7\u7528\u5206\u6cbb\u6cd5\uff08Divide and Conquer\uff09\u7684\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u5e94\u7528\uff0c\u4e14\u5404\u5c42\u5206\u6cbb\u9012\u5f52\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u3002 \u91c7\u7528\u5206\u6cbb\u6cd5: \u5206\u5272\uff1a\u9012\u5f52\u5730\u628a\u5f53\u524d\u5e8f\u5217\u5e73\u5747\u5206\u5272\u6210\u4e24\u534a\u3002 \u96c6\u6210\uff1a\u5728\u4fdd\u6301\u5143\u7d20\u987a\u5e8f\u7684\u540c\u65f6\u5c06\u4e0a\u4e00\u6b65\u5f97\u5230\u7684\u5b50\u5e8f\u5217\u96c6\u6210\u5230\u4e00\u8d77\uff08\u5f52\u5e76\uff09\u3002","title":"\u7b97\u6cd5\u601d\u60f3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#python","text":"def merge_sort ( seq ): if len ( seq ) < 2 : return seq mid = len ( seq ) // 2 left_handle = merge_sort ( seq [: mid ]) right_handle = merge_sort ( seq [ mid : ]) return merge_sort_list ( left_handle , right_handle ) def merge_sort_list ( seq1 , seq2 ): if seq1 == []: return seq2 if seq2 == []: return seq1 ret = [] i , j = 0 , 0 # \u5206\u522b\u4ee3\u8868seq1, seq2\u7684\u4e0b\u6807 while True : if seq1 [ i ] < seq2 [ j ]: ret . append ( seq1 [ i ]) i += 1 else : ret . append ( seq2 [ j ]) j += 1 if i >= len ( seq1 ): ret . extend ( seq2 [ j :]) break if j >= len ( seq2 ): ret . extend ( seq1 [ i :]) break return ret def test_merge_sort_list (): seq1 = [ 1 , 2 , 3 , 4 , 6 ] seq2 = [ 0 , 1 , 1 , 2 , 5 ] assert ( merge_sort_list ( seq1 , seq2 ) == [ 0 , 1 , 1 , 1 , 2 , 2 , 3 , 4 , 5 , 6 ]) seq1 = [] seq2 = [ 0 , 1 , 1 , 2 , 5 ] assert ( merge_sort_list ( seq1 , seq2 ) == [ 0 , 1 , 1 , 2 , 5 ]) def test_merge_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) assert ( merge_sort ( seq ) == sorted ( seq ))","title":"python \u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","text":"\u6392\u5e8f\u601d\u60f3\uff08\u6458\u81ea\u7b97\u6cd5\u56fe\u89e3\uff09 \u00b6 \u5feb\u901f\u6392\u5e8f\u662f\u4e00\u79cd\u5e38\u7528\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u6bd4\u9009\u62e9\u6392\u5e8f\u5feb\u5f97\u591a\u3002\u4f8b\u5982\uff0cC\u8bed\u8a00\u6807\u51c6\u5e93\u4e2d\u7684\u51fd\u6570qsort \u5b9e\u73b0\u7684\u5c31\u662f\u5feb\u901f\u6392\u5e8f\u3002\u5feb\u901f\u6392\u5e8f\u4e5f\u4f7f\u7528\u4e86D&C\u3002 \u4e0b\u9762\u6765\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u6392\u5e8f\u7b97\u6cd5\u6765\u8bf4\uff0c\u6700\u7b80\u5355\u7684\u6570\u7ec4\u4ec0\u4e48\u6837\u5462\uff1f \u8fd8\u8bb0\u5f97\u524d\u4e00\u8282\u7684\u201c\u63d0\u793a\u201d\u5417\uff1f\u5c31\u662f\u6839\u672c\u4e0d\u9700\u8981\u6392\u5e8f\u7684\u6570\u7ec4\u3002 \u56e0\u6b64\uff0c\u57fa\u7ebf\u6761\u4ef6\u4e3a\u6570\u7ec4\u4e3a\u7a7a\u6216\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700 \u539f\u6837\u8fd4\u56de\u6570\u7ec4\u2014\u2014\u6839\u672c\u5c31\u4e0d\u7528\u6392\u5e8f\u3002 def quicksort ( array ): if len ( array ) < 2 : return array \u6211\u4eec\u6765\u770b\u770b\u66f4\u957f\u7684\u6570\u7ec4\u3002\u5bf9\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u4e5f\u5f88\u5bb9\u6613\u3002 \u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u5462\uff1f \u522b\u5fd8\u4e86\uff0c\u4f60\u8981\u4f7f\u7528D&C\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u6570\u7ec4\u5206\u89e3\uff0c\u76f4\u5230\u6ee1\u8db3\u57fa\u7ebf\u6761\u4ef6\u3002\u4e0b\u9762\u4ecb\u7ecd\u5feb\u901f\u6392\u5e8f\u7684\u5de5 \u4f5c\u539f\u7406\u3002\u9996\u5148\uff0c\u4ece\u6570\u7ec4\u4e2d\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e2a\u5143\u7d20\u88ab\u79f0\u4e3a\u57fa\u51c6\u503c\uff08pivot\uff09 \u3002 \u7a0d\u540e\u518d\u4ecb\u7ecd\u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u57fa\u51c6\u503c\u3002 \u6211\u4eec\u6682\u65f6\u5c06\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7528\u4f5c\u57fa\u51c6\u503c\u3002 \u63a5\u4e0b\u6765\uff0c\u627e\u51fa\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u5143\u7d20\u4ee5\u53ca\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u5143\u7d20\u3002 \u8fd9\u88ab\u79f0\u4e3a\u5206\u533a\uff08partitioning\uff09\u3002\u73b0\u5728\u4f60\u6709\uff1a \u4e00\u4e2a\u7531\u6240\u6709\u5c0f\u4e8e\u57fa\u51c6\u503c\u7684\u6570\u5b57\u7ec4\u6210\u7684\u5b50\u6570\u7ec4\uff1b \u57fa\u51c6\u503c\uff1b \u4e00\u4e2a\u7531\u6240\u6709\u5927\u4e8e\u57fa\u51c6\u503c\u7684\u6570\u7ec4\u6210\u7684\u5b50\u6570\u7ec4\u3002 \u8fd9\u91cc\u53ea\u662f\u8fdb\u884c\u4e86\u5206\u533a\uff0c\u5f97\u5230\u7684\u4e24\u4e2a\u5b50\u6570\u7ec4\u662f\u65e0\u5e8f\u7684\u3002\u4f46\u5982\u679c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u5bf9\u6574\u4e2a\u6570 \u7ec4\u8fdb\u884c\u6392\u5e8f\u5c06\u975e\u5e38\u5bb9\u6613\u3002 \u5982\u679c\u5b50\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u5c31\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5408\u5e76\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\uff1a\u5de6\u8fb9\u7684\u6570\u7ec4 + \u57fa\u51c6\u503c + \u53f3\u8fb9\u7684\u6570\u7ec4\u3002\u5728\u8fd9\u91cc\uff0c\u5c31\u662f[10, 15] + [33] + []\uff0c\u7ed3\u679c\u4e3a\u6709\u5e8f\u6570\u7ec4[10, 15, 33]\u3002 \u5982\u4f55\u5bf9\u5b50\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u5462\uff1f\u5bf9\u4e8e\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff08\u5de6\u8fb9\u7684\u5b50\u6570\u7ec4\uff09\u4ee5\u53ca\u7a7a\u6570\u7ec4\uff08\u53f3\u8fb9\u7684\u5b50\u6570\u7ec4\uff09 \uff0c\u5feb\u901f\u6392\u5e8f\u77e5\u9053\u5982\u4f55\u5c06\u5b83\u4eec\u6392\u5e8f\uff0c\u56e0\u6b64\u53ea\u8981\u5bf9\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\uff0c\u518d\u5408\u5e76\u7ed3\u679c\uff0c \u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff01 \u4e0d\u7ba1\u5c06\u54ea\u4e2a\u5143\u7d20\u7528\u4f5c\u57fa\u51c6\u503c\uff0c\u8fd9\u90fd\u7ba1\u7528\u3002\u5047\u8bbe\u4f60\u5c0615\u7528\u4f5c\u57fa\u51c6\u503c\u3002 \u8fd9\u4e2a\u5b50\u6570\u7ec4\u90fd\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u4f60\u77e5\u9053\u5982\u4f55\u5bf9\u8fd9\u4e9b\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u73b0\u5728\u4f60\u5c31\u77e5\u9053\u5982\u4f55\u5bf9\u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u4e86\uff0c\u6b65\u9aa4\u5982\u4e0b\u3002 (1) \u9009\u62e9\u57fa\u51c6\u503c\u3002 (2) \u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\uff1a\u5c0f\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u3002 (3) \u5bf9\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002 \u5305\u542b\u56db\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u5462\uff1f \u5047\u8bbe\u4f60\u4e5f\u5c0633\u7528\u4f5c\u57fa\u51c6\u503c\u3002 \u5de6\u8fb9\u7684\u5b50\u6570\u7ec4\u5305\u542b\u4e09\u4e2a\u5143\u7d20\uff0c\u800c\u4f60\u77e5\u9053\u5982\u4f55\u5bf9\u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff1a\u5bf9\u5176\u9012\u5f52\u5730\u8c03 \u7528\u5feb\u901f\u6392\u5e8f\u3002 \u56e0\u6b64\u4f60\u80fd\u591f\u5bf9\u5305\u542b\u56db\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u5982\u679c\u80fd\u591f\u5bf9\u5305\u542b\u56db\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u5c31 \u80fd\u5bf9\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u5047\u8bbe\u6709\u4e0b\u9762\u8fd9\u6837\u4e00\u4e2a\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u3002 \u6839\u636e\u9009\u62e9\u7684\u57fa\u51c6\u503c\uff0c\u5bf9\u8fd9\u4e2a\u6570\u7ec4\u8fdb\u884c\u5206\u533a\u7684\u5404\u79cd\u53ef\u80fd\u65b9\u5f0f\u5982\u4e0b\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e9b\u5b50\u6570\u7ec4\u5305\u542b\u7684\u5143\u7d20\u6570\u90fd\u57280\uff5e4\u5185\uff0c\u800c\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u5bf9\u5305\u542b0\uff5e4 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff01\u56e0\u6b64\uff0c\u4e0d\u7ba1\u5982\u4f55\u9009\u62e9\u57fa\u51c6\u503c\uff0c\u4f60\u90fd\u53ef\u5bf9\u5212\u5206\u5f97\u5230\u7684\u4e24\u4e2a\u5b50\u6570\u7ec4\u9012\u5f52\u5730\u8fdb \u884c\u5feb\u901f\u6392\u5e8f\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5c063\u7528\u4f5c\u57fa\u51c6\u503c\uff0c\u53ef\u5bf9\u5f97\u5230\u7684\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002 \u5c06\u5b50\u6570\u7ec4\u6392\u5e8f\u540e\uff0c\u5c06\u5b83\u4eec\u5408\u5e76\uff0c\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002\u5373\u4fbf\u4f60\u5c065\u7528\u4f5c\u57fa\u51c6\u503c\uff0c\u8fd9\u4e5f\u53ef\u884c\u3002 \u5c06\u4efb\u4f55\u5143\u7d20\u7528\u4f5c\u57fa\u51c6\u503c\u90fd\u53ef\u884c\uff0c \u56e0\u6b64\u4f60\u80fd\u591f\u5bf9\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002 \u540c\u7406\uff0c \u4f60\u80fd\u591f \u5bf9\u5305\u542b\u516d\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 python \u57fa\u4e8e\u4ee5\u4e0a\u601d\u8def\u7684\u5b9e\u73b0 \u00b6 ''' \u9700\u989d\u5916\u7a7a\u95f4\u7248\u672c ''' def quick_sort ( seq ): if len ( seq ) <= 1 : return seq pivot = seq [ 0 ] less = [ i for i in seq [ 1 :] if i < seq [ 0 ]] greater = [ i for i in seq [ 1 :] if i >= seq [ 0 ]] return quick_sort ( less ) + [ pivot ] + quick_sort ( greater ) def test_quick_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) assert ( quick_sort ( seq ) == sorted ( seq )) \u4e0a\u8ff0\u7684\u6539\u8fdb \u00b6 \u4e0a\u8ff0\u7684\u4ee3\u7801\u7b80\u5355\u6e05\u6670\uff0c\u552f\u4e00\u7684\u7f3a\u70b9\u662f\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u80fd\u4e0d\u80fd\u5728\u539f\u6570\u7ec4\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4ea4\u6362\uff0c\u65e0\u9700\u989d\u5916\u7a7a\u95f4\uff1f \u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u7684\u3002\u6211\u4eec\u8bbe\u7f6e\u9996\u4f4d\u4fe9\u4e2a\u6307\u9488 left, right\uff0c\u4e24\u4e2a\u6307\u9488\u4e0d\u65ad\u5411\u4e2d\u95f4\u6536\u62e2\u3002\u5982\u679c\u9047\u5230 left \u4f4d\u7f6e\u7684\u5143\u7d20\u5927\u4e8e pivot \u5e76\u4e14 right \u6307\u5411\u7684\u5143\u7d20\u5c0f\u4e8e pivot\uff0c\u6211\u4eec\u5c31\u4ea4\u6362\u8fd9\u4fe9\u5143\u7d20\uff0c\u5f53 left > right \u7684\u65f6\u5019\u9000\u51fa\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u5b9e\u73b0\u4e86\u4e00\u6b21\u904d\u5386\u5c31\u5b8c\u6210\u4e86 partition\u3002\u5982\u679c\u4f60\u611f\u89c9\u61f5\u903c\uff0c\u7eb8\u4e0a\u753b\u753b\u5c31\u7acb\u9a6c\u660e\u767d\u4e86\u3002 ''' \u539f\u4f4d\u7f6e\u4ea4\u6362\u7248\u672c ''' def quick_sort ( seq , begin , end ): if begin < end : pivot = partition ( seq , begin , end ) quick_sort ( seq , begin , pivot ) quick_sort ( seq , pivot + 1 , end ) def partition ( seq , begin , end ): pivot_index = begin left = begin right = end while left < right : while seq [ left ] < seq [ pivot_index ]: left += 1 while seq [ right ] > seq [ pivot_index ]: right -= 1 seq [ left ], seq [ right ] = seq [ right ], seq [ left ] seq [ pivot_index ], seq [ left ] = seq [ left ], seq [ pivot_index ] return right def test_quick_sort (): seq = list ( range ( 10 )) seq_copy = seq . copy () import random random . shuffle ( seq_copy ) quick_sort ( seq , 0 , len ( seq ) - 1 ) assert ( seq == sorted ( seq_copy ))","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#_1","text":"\u5feb\u901f\u6392\u5e8f\u662f\u4e00\u79cd\u5e38\u7528\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u6bd4\u9009\u62e9\u6392\u5e8f\u5feb\u5f97\u591a\u3002\u4f8b\u5982\uff0cC\u8bed\u8a00\u6807\u51c6\u5e93\u4e2d\u7684\u51fd\u6570qsort \u5b9e\u73b0\u7684\u5c31\u662f\u5feb\u901f\u6392\u5e8f\u3002\u5feb\u901f\u6392\u5e8f\u4e5f\u4f7f\u7528\u4e86D&C\u3002 \u4e0b\u9762\u6765\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u6392\u5e8f\u7b97\u6cd5\u6765\u8bf4\uff0c\u6700\u7b80\u5355\u7684\u6570\u7ec4\u4ec0\u4e48\u6837\u5462\uff1f \u8fd8\u8bb0\u5f97\u524d\u4e00\u8282\u7684\u201c\u63d0\u793a\u201d\u5417\uff1f\u5c31\u662f\u6839\u672c\u4e0d\u9700\u8981\u6392\u5e8f\u7684\u6570\u7ec4\u3002 \u56e0\u6b64\uff0c\u57fa\u7ebf\u6761\u4ef6\u4e3a\u6570\u7ec4\u4e3a\u7a7a\u6216\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700 \u539f\u6837\u8fd4\u56de\u6570\u7ec4\u2014\u2014\u6839\u672c\u5c31\u4e0d\u7528\u6392\u5e8f\u3002 def quicksort ( array ): if len ( array ) < 2 : return array \u6211\u4eec\u6765\u770b\u770b\u66f4\u957f\u7684\u6570\u7ec4\u3002\u5bf9\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u4e5f\u5f88\u5bb9\u6613\u3002 \u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u5462\uff1f \u522b\u5fd8\u4e86\uff0c\u4f60\u8981\u4f7f\u7528D&C\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u6570\u7ec4\u5206\u89e3\uff0c\u76f4\u5230\u6ee1\u8db3\u57fa\u7ebf\u6761\u4ef6\u3002\u4e0b\u9762\u4ecb\u7ecd\u5feb\u901f\u6392\u5e8f\u7684\u5de5 \u4f5c\u539f\u7406\u3002\u9996\u5148\uff0c\u4ece\u6570\u7ec4\u4e2d\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e2a\u5143\u7d20\u88ab\u79f0\u4e3a\u57fa\u51c6\u503c\uff08pivot\uff09 \u3002 \u7a0d\u540e\u518d\u4ecb\u7ecd\u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u57fa\u51c6\u503c\u3002 \u6211\u4eec\u6682\u65f6\u5c06\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7528\u4f5c\u57fa\u51c6\u503c\u3002 \u63a5\u4e0b\u6765\uff0c\u627e\u51fa\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u5143\u7d20\u4ee5\u53ca\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u5143\u7d20\u3002 \u8fd9\u88ab\u79f0\u4e3a\u5206\u533a\uff08partitioning\uff09\u3002\u73b0\u5728\u4f60\u6709\uff1a \u4e00\u4e2a\u7531\u6240\u6709\u5c0f\u4e8e\u57fa\u51c6\u503c\u7684\u6570\u5b57\u7ec4\u6210\u7684\u5b50\u6570\u7ec4\uff1b \u57fa\u51c6\u503c\uff1b \u4e00\u4e2a\u7531\u6240\u6709\u5927\u4e8e\u57fa\u51c6\u503c\u7684\u6570\u7ec4\u6210\u7684\u5b50\u6570\u7ec4\u3002 \u8fd9\u91cc\u53ea\u662f\u8fdb\u884c\u4e86\u5206\u533a\uff0c\u5f97\u5230\u7684\u4e24\u4e2a\u5b50\u6570\u7ec4\u662f\u65e0\u5e8f\u7684\u3002\u4f46\u5982\u679c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u5bf9\u6574\u4e2a\u6570 \u7ec4\u8fdb\u884c\u6392\u5e8f\u5c06\u975e\u5e38\u5bb9\u6613\u3002 \u5982\u679c\u5b50\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u5c31\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u5408\u5e76\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\uff1a\u5de6\u8fb9\u7684\u6570\u7ec4 + \u57fa\u51c6\u503c + \u53f3\u8fb9\u7684\u6570\u7ec4\u3002\u5728\u8fd9\u91cc\uff0c\u5c31\u662f[10, 15] + [33] + []\uff0c\u7ed3\u679c\u4e3a\u6709\u5e8f\u6570\u7ec4[10, 15, 33]\u3002 \u5982\u4f55\u5bf9\u5b50\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u5462\uff1f\u5bf9\u4e8e\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff08\u5de6\u8fb9\u7684\u5b50\u6570\u7ec4\uff09\u4ee5\u53ca\u7a7a\u6570\u7ec4\uff08\u53f3\u8fb9\u7684\u5b50\u6570\u7ec4\uff09 \uff0c\u5feb\u901f\u6392\u5e8f\u77e5\u9053\u5982\u4f55\u5c06\u5b83\u4eec\u6392\u5e8f\uff0c\u56e0\u6b64\u53ea\u8981\u5bf9\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\uff0c\u518d\u5408\u5e76\u7ed3\u679c\uff0c \u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\uff01 \u4e0d\u7ba1\u5c06\u54ea\u4e2a\u5143\u7d20\u7528\u4f5c\u57fa\u51c6\u503c\uff0c\u8fd9\u90fd\u7ba1\u7528\u3002\u5047\u8bbe\u4f60\u5c0615\u7528\u4f5c\u57fa\u51c6\u503c\u3002 \u8fd9\u4e2a\u5b50\u6570\u7ec4\u90fd\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u4f60\u77e5\u9053\u5982\u4f55\u5bf9\u8fd9\u4e9b\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u73b0\u5728\u4f60\u5c31\u77e5\u9053\u5982\u4f55\u5bf9\u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u4e86\uff0c\u6b65\u9aa4\u5982\u4e0b\u3002 (1) \u9009\u62e9\u57fa\u51c6\u503c\u3002 (2) \u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\uff1a\u5c0f\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u3002 (3) \u5bf9\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002 \u5305\u542b\u56db\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u5462\uff1f \u5047\u8bbe\u4f60\u4e5f\u5c0633\u7528\u4f5c\u57fa\u51c6\u503c\u3002 \u5de6\u8fb9\u7684\u5b50\u6570\u7ec4\u5305\u542b\u4e09\u4e2a\u5143\u7d20\uff0c\u800c\u4f60\u77e5\u9053\u5982\u4f55\u5bf9\u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff1a\u5bf9\u5176\u9012\u5f52\u5730\u8c03 \u7528\u5feb\u901f\u6392\u5e8f\u3002 \u56e0\u6b64\u4f60\u80fd\u591f\u5bf9\u5305\u542b\u56db\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u5982\u679c\u80fd\u591f\u5bf9\u5305\u542b\u56db\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u5c31 \u80fd\u5bf9\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u5047\u8bbe\u6709\u4e0b\u9762\u8fd9\u6837\u4e00\u4e2a\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u3002 \u6839\u636e\u9009\u62e9\u7684\u57fa\u51c6\u503c\uff0c\u5bf9\u8fd9\u4e2a\u6570\u7ec4\u8fdb\u884c\u5206\u533a\u7684\u5404\u79cd\u53ef\u80fd\u65b9\u5f0f\u5982\u4e0b\u3002 \u6ce8\u610f\uff0c\u8fd9\u4e9b\u5b50\u6570\u7ec4\u5305\u542b\u7684\u5143\u7d20\u6570\u90fd\u57280\uff5e4\u5185\uff0c\u800c\u4f60\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u5bf9\u5305\u542b0\uff5e4 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff01\u56e0\u6b64\uff0c\u4e0d\u7ba1\u5982\u4f55\u9009\u62e9\u57fa\u51c6\u503c\uff0c\u4f60\u90fd\u53ef\u5bf9\u5212\u5206\u5f97\u5230\u7684\u4e24\u4e2a\u5b50\u6570\u7ec4\u9012\u5f52\u5730\u8fdb \u884c\u5feb\u901f\u6392\u5e8f\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5c063\u7528\u4f5c\u57fa\u51c6\u503c\uff0c\u53ef\u5bf9\u5f97\u5230\u7684\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002 \u5c06\u5b50\u6570\u7ec4\u6392\u5e8f\u540e\uff0c\u5c06\u5b83\u4eec\u5408\u5e76\uff0c\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002\u5373\u4fbf\u4f60\u5c065\u7528\u4f5c\u57fa\u51c6\u503c\uff0c\u8fd9\u4e5f\u53ef\u884c\u3002 \u5c06\u4efb\u4f55\u5143\u7d20\u7528\u4f5c\u57fa\u51c6\u503c\u90fd\u53ef\u884c\uff0c \u56e0\u6b64\u4f60\u80fd\u591f\u5bf9\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u3002 \u540c\u7406\uff0c \u4f60\u80fd\u591f \u5bf9\u5305\u542b\u516d\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"\u6392\u5e8f\u601d\u60f3\uff08\u6458\u81ea\u7b97\u6cd5\u56fe\u89e3\uff09"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#python","text":"''' \u9700\u989d\u5916\u7a7a\u95f4\u7248\u672c ''' def quick_sort ( seq ): if len ( seq ) <= 1 : return seq pivot = seq [ 0 ] less = [ i for i in seq [ 1 :] if i < seq [ 0 ]] greater = [ i for i in seq [ 1 :] if i >= seq [ 0 ]] return quick_sort ( less ) + [ pivot ] + quick_sort ( greater ) def test_quick_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) assert ( quick_sort ( seq ) == sorted ( seq ))","title":"python \u57fa\u4e8e\u4ee5\u4e0a\u601d\u8def\u7684\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#_2","text":"\u4e0a\u8ff0\u7684\u4ee3\u7801\u7b80\u5355\u6e05\u6670\uff0c\u552f\u4e00\u7684\u7f3a\u70b9\u662f\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u80fd\u4e0d\u80fd\u5728\u539f\u6570\u7ec4\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u4ea4\u6362\uff0c\u65e0\u9700\u989d\u5916\u7a7a\u95f4\uff1f \u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u7684\u3002\u6211\u4eec\u8bbe\u7f6e\u9996\u4f4d\u4fe9\u4e2a\u6307\u9488 left, right\uff0c\u4e24\u4e2a\u6307\u9488\u4e0d\u65ad\u5411\u4e2d\u95f4\u6536\u62e2\u3002\u5982\u679c\u9047\u5230 left \u4f4d\u7f6e\u7684\u5143\u7d20\u5927\u4e8e pivot \u5e76\u4e14 right \u6307\u5411\u7684\u5143\u7d20\u5c0f\u4e8e pivot\uff0c\u6211\u4eec\u5c31\u4ea4\u6362\u8fd9\u4fe9\u5143\u7d20\uff0c\u5f53 left > right \u7684\u65f6\u5019\u9000\u51fa\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u5b9e\u73b0\u4e86\u4e00\u6b21\u904d\u5386\u5c31\u5b8c\u6210\u4e86 partition\u3002\u5982\u679c\u4f60\u611f\u89c9\u61f5\u903c\uff0c\u7eb8\u4e0a\u753b\u753b\u5c31\u7acb\u9a6c\u660e\u767d\u4e86\u3002 ''' \u539f\u4f4d\u7f6e\u4ea4\u6362\u7248\u672c ''' def quick_sort ( seq , begin , end ): if begin < end : pivot = partition ( seq , begin , end ) quick_sort ( seq , begin , pivot ) quick_sort ( seq , pivot + 1 , end ) def partition ( seq , begin , end ): pivot_index = begin left = begin right = end while left < right : while seq [ left ] < seq [ pivot_index ]: left += 1 while seq [ right ] > seq [ pivot_index ]: right -= 1 seq [ left ], seq [ right ] = seq [ right ], seq [ left ] seq [ pivot_index ], seq [ left ] = seq [ left ], seq [ pivot_index ] return right def test_quick_sort (): seq = list ( range ( 10 )) seq_copy = seq . copy () import random random . shuffle ( seq_copy ) quick_sort ( seq , 0 , len ( seq ) - 1 ) assert ( seq == sorted ( seq_copy ))","title":"\u4e0a\u8ff0\u7684\u6539\u8fdb"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/","text":"\u6570\u7ec4\u7684\u7279\u70b9 \u00b6 \u7ebf\u6027\u7ed3\u6784: \u6bcf\u6b21\u5411\u5185\u5b58\u7533\u8bf7\u56fa\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u8fde\u7eed\u5b58\u50a8\u7a7a\u95f4\uff0c\u53ef\u505a\u5230\u968f\u673a\u8bbf\u95ee \u67e5\u627e: \u968f\u673a\u67e5\u627e\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 \u67e5\u627e O(1) \u63d2\u5165 O(n) \u5220\u9664 O(n) python \u5b9e\u73b0 \u00b6 class Array ( object ): def __init__ ( self , max_length ): self . max_length = max_length self . _items = [ None ] * max_length def __len__ ( self ): return self . max_length def __getitem__ ( self , index ): return self . _items [ index ] def __setitem__ ( self , index , value ): self . _items [ index ] = value def test_array (): arr = Array ( 5 ) arr [ 0 ] = 0 arr [ 1 ] = 1 arr [ 2 ] = 2 arr [ 3 ] = 3 arr [ 4 ] = 4 assert ( len ( arr ) == 5 ) assert ( arr [ 0 ] == 0 ) assert ( arr [ 1 ] == 1 ) assert ( arr [ 2 ] == 2 ) assert ( arr [ 3 ] == 3 ) assert ( arr [ 4 ] == 4 ) arr [ 4 ] = 6 assert ( arr [ 4 ] == 6 )","title":"\u6570\u7ec4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_1","text":"\u7ebf\u6027\u7ed3\u6784: \u6bcf\u6b21\u5411\u5185\u5b58\u7533\u8bf7\u56fa\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u8fde\u7eed\u5b58\u50a8\u7a7a\u95f4\uff0c\u53ef\u505a\u5230\u968f\u673a\u8bbf\u95ee \u67e5\u627e: \u968f\u673a\u67e5\u627e\u3002","title":"\u6570\u7ec4\u7684\u7279\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_2","text":"\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 \u67e5\u627e O(1) \u63d2\u5165 O(n) \u5220\u9664 O(n)","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#python","text":"class Array ( object ): def __init__ ( self , max_length ): self . max_length = max_length self . _items = [ None ] * max_length def __len__ ( self ): return self . max_length def __getitem__ ( self , index ): return self . _items [ index ] def __setitem__ ( self , index , value ): self . _items [ index ] = value def test_array (): arr = Array ( 5 ) arr [ 0 ] = 0 arr [ 1 ] = 1 arr [ 2 ] = 2 arr [ 3 ] = 3 arr [ 4 ] = 4 assert ( len ( arr ) == 5 ) assert ( arr [ 0 ] == 0 ) assert ( arr [ 1 ] == 1 ) assert ( arr [ 2 ] == 2 ) assert ( arr [ 3 ] == 3 ) assert ( arr [ 4 ] == 4 ) arr [ 4 ] = 6 assert ( arr [ 4 ] == 6 )","title":"python \u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%A0%88/","text":"\u6808\u7684\u7279\u70b9 \u00b6 \u5148\u8fdb\u540e\u51fa n \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u8fdb\u6808\uff0c\u51fa\u6808\u5143\u7d20\u4e0d\u540c\u6392\u5217\u7684\u4e2a\u6570\u4e3a python\u5b9e\u73b0 \u00b6 \u6570\u7ec4\u6808 \u00b6 c++ \u5b9e\u73b0: stack.cpp python \u5b9e\u73b0: array_stack.py \u94fe\u8868\u6808 \u00b6 from link_list import LinkList class LinkListStack ( object ): def __init__ ( self , size ): self . top = 0 self . _size = size self . _items = LinkList () def __len__ ( self ): return self . top def push ( self , value ): if self . top >= self . _size : raise Exception ( \"stack is full\" ) self . _items . append ( value ) self . top += 1 def pop ( self ): if self . top <= 0 : raise Exception ( \"stack is empty\" ) v = self . _items . pop () self . top -= 1 return v def is_empty ( self ): return self . top == 0 def test_linklist_stack (): lltack = LinkListStack ( 5 ) lltack . push ( 1 ) lltack . push ( 2 ) lltack . push ( 3 ) lltack . push ( 4 ) lltack . push ( 5 ) # lltack.push(6) assert ( len ( lltack ) == 5 ) assert ( lltack . pop () == 5 ) assert ( len ( lltack ) == 4 ) assert ( lltack . pop () == 4 ) assert ( lltack . pop () == 3 ) assert ( lltack . pop () == 2 ) assert ( lltack . pop () == 1 ) # assert(lltack.pop()) assert ( lltack . is_empty ())","title":"\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%A0%88/#_1","text":"\u5148\u8fdb\u540e\u51fa n \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u8fdb\u6808\uff0c\u51fa\u6808\u5143\u7d20\u4e0d\u540c\u6392\u5217\u7684\u4e2a\u6570\u4e3a","title":"\u6808\u7684\u7279\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%A0%88/#python","text":"","title":"python\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%A0%88/#_2","text":"c++ \u5b9e\u73b0: stack.cpp python \u5b9e\u73b0: array_stack.py","title":"\u6570\u7ec4\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%A0%88/#_3","text":"from link_list import LinkList class LinkListStack ( object ): def __init__ ( self , size ): self . top = 0 self . _size = size self . _items = LinkList () def __len__ ( self ): return self . top def push ( self , value ): if self . top >= self . _size : raise Exception ( \"stack is full\" ) self . _items . append ( value ) self . top += 1 def pop ( self ): if self . top <= 0 : raise Exception ( \"stack is empty\" ) v = self . _items . pop () self . top -= 1 return v def is_empty ( self ): return self . top == 0 def test_linklist_stack (): lltack = LinkListStack ( 5 ) lltack . push ( 1 ) lltack . push ( 2 ) lltack . push ( 3 ) lltack . push ( 4 ) lltack . push ( 5 ) # lltack.push(6) assert ( len ( lltack ) == 5 ) assert ( lltack . pop () == 5 ) assert ( len ( lltack ) == 4 ) assert ( lltack . pop () == 4 ) assert ( lltack . pop () == 3 ) assert ( lltack . pop () == 2 ) assert ( lltack . pop () == 1 ) # assert(lltack.pop()) assert ( lltack . is_empty ())","title":"\u94fe\u8868\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89/","text":"\u7b97\u6cd5\u4ecb\u7ecd \u00b6 \u53c2\u8003\u300a\u7b97\u6cd5\u56fe\u89e3\u300b\u7b2c\u4e03\u7ae0\u6216\u767e\u5ea6 \u7b97\u6cd5\u529f\u80fd \u00b6 \u6c42\u89e3\u6709\u5411\u65e0\u73af\u52a0\u6743\u56fe\u7684\u6700\u77ed\u8def\u5f84\u3002 \u6ce8\u610f: \u4e0d\u80fd\u6709\u8d1f\u6743\u8fb9\uff0c\u5426\u5219\u53c2\u8003 \u5c14\u66fc\u798f\u5fb7\u7b97\u6cd5\uff08Bellman-Ford algorithm\uff09 \u7b97\u6cd5\u6b65\u9aa4 \u00b6 \u627e\u51fa\u6700\u4fbf\u5b9c\u7684\u8282\u70b9\uff0c\u5373\u53ef\u5728\u6700\u77ed\u65f6\u95f4\u5185\u524d\u5f80\u7684\u8282\u70b9\u3002 \u5bf9\u4e8e\u8be5\u8282\u70b9\u7684\u90bb\u5c45\uff0c\u68c0\u67e5\u662f\u5426\u6709\u524d\u5f80\u5b83\u4eec\u7684\u66f4\u77ed\u8def\u5f84\uff0c\u5982\u679c\u6709\uff0c\u5c31\u66f4\u65b0\u5176\u5f00\u9500\u3002 \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u5bf9\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u8fd9\u6837\u505a\u4e86\u3002 \u8ba1\u7b97\u6700\u7ec8\u8def\u5f84\u3002 python \u793a\u4f8b \u00b6 \u6c42\u89e3\u4e0b\u56fe\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8ddd\u79bb MAX = float ( 'inf' ) # \u58f0\u660e\u4e00\u4e2a\u56fe graph = {} graph [ 'start' ] = {} graph [ 'start' ][ 'a' ] = 6 graph [ 'start' ][ 'b' ] = 2 graph [ 'a' ] = {} graph [ 'a' ][ 'fin' ] = MAX graph [ 'b' ] = {} graph [ 'b' ][ 'a' ] = 3 graph [ 'b' ][ 'fin' ] = MAX # \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u82b1\u8d39\u5b57\u5178 costs = {} costs [ 'a' ] = 6 costs [ 'b' ] = 2 costs [ 'fin' ] = MAX # \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9 parents = {} parents [ 'a' ] = 'start' parents [ 'b' ] = 'start' parents [ 'fin' ] = None # \u8bb0\u5f55\u88ab\u5904\u7406\u8fc7\u7684\u8282\u70b9 process = [] def find_lower_cost_node ( costs ): cost = MAX lower_cost_node = None for n in costs . keys (): if costs [ n ] < cost and n not in process : cost = costs [ n ] lower_cost_node = n return lower_cost_node def main (): lower_cost_node = find_lower_cost_node ( costs ) while lower_cost_node is not None : neighbor = graph [ lower_cost_node ] for n in neighbor . keys (): new_costs = costs [ lower_cost_node ] + neighbor [ n ] if costs [ n ] > new_costs : costs [ n ] = new_costs parents [ n ] = lower_cost_node process . append ( lower_cost_node ) lower_cost_node = find_lower_cost_node ( costs ) print ( parents ) if __name__ == '__main__' : main ()","title":"\u72c4\u514b\u65af\u7279\u62c9\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89/#_1","text":"\u53c2\u8003\u300a\u7b97\u6cd5\u56fe\u89e3\u300b\u7b2c\u4e03\u7ae0\u6216\u767e\u5ea6","title":"\u7b97\u6cd5\u4ecb\u7ecd"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89/#_2","text":"\u6c42\u89e3\u6709\u5411\u65e0\u73af\u52a0\u6743\u56fe\u7684\u6700\u77ed\u8def\u5f84\u3002 \u6ce8\u610f: \u4e0d\u80fd\u6709\u8d1f\u6743\u8fb9\uff0c\u5426\u5219\u53c2\u8003 \u5c14\u66fc\u798f\u5fb7\u7b97\u6cd5\uff08Bellman-Ford algorithm\uff09","title":"\u7b97\u6cd5\u529f\u80fd"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89/#_3","text":"\u627e\u51fa\u6700\u4fbf\u5b9c\u7684\u8282\u70b9\uff0c\u5373\u53ef\u5728\u6700\u77ed\u65f6\u95f4\u5185\u524d\u5f80\u7684\u8282\u70b9\u3002 \u5bf9\u4e8e\u8be5\u8282\u70b9\u7684\u90bb\u5c45\uff0c\u68c0\u67e5\u662f\u5426\u6709\u524d\u5f80\u5b83\u4eec\u7684\u66f4\u77ed\u8def\u5f84\uff0c\u5982\u679c\u6709\uff0c\u5c31\u66f4\u65b0\u5176\u5f00\u9500\u3002 \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230\u5bf9\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u8fd9\u6837\u505a\u4e86\u3002 \u8ba1\u7b97\u6700\u7ec8\u8def\u5f84\u3002","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89/#python","text":"\u6c42\u89e3\u4e0b\u56fe\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8ddd\u79bb MAX = float ( 'inf' ) # \u58f0\u660e\u4e00\u4e2a\u56fe graph = {} graph [ 'start' ] = {} graph [ 'start' ][ 'a' ] = 6 graph [ 'start' ][ 'b' ] = 2 graph [ 'a' ] = {} graph [ 'a' ][ 'fin' ] = MAX graph [ 'b' ] = {} graph [ 'b' ][ 'a' ] = 3 graph [ 'b' ][ 'fin' ] = MAX # \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u82b1\u8d39\u5b57\u5178 costs = {} costs [ 'a' ] = 6 costs [ 'b' ] = 2 costs [ 'fin' ] = MAX # \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9 parents = {} parents [ 'a' ] = 'start' parents [ 'b' ] = 'start' parents [ 'fin' ] = None # \u8bb0\u5f55\u88ab\u5904\u7406\u8fc7\u7684\u8282\u70b9 process = [] def find_lower_cost_node ( costs ): cost = MAX lower_cost_node = None for n in costs . keys (): if costs [ n ] < cost and n not in process : cost = costs [ n ] lower_cost_node = n return lower_cost_node def main (): lower_cost_node = find_lower_cost_node ( costs ) while lower_cost_node is not None : neighbor = graph [ lower_cost_node ] for n in neighbor . keys (): new_costs = costs [ lower_cost_node ] + neighbor [ n ] if costs [ n ] > new_costs : costs [ n ] = new_costs parents [ n ] = lower_cost_node process . append ( lower_cost_node ) lower_cost_node = find_lower_cost_node ( costs ) print ( parents ) if __name__ == '__main__' : main ()","title":"python \u793a\u4f8b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E8%A1%A8/","text":"\u987a\u5e8f\u8868 \u00b6 \u7528 \u987a\u5e8f\u5b58\u50a8 \u7684\u65b9\u5f0f\u5b9e\u73b0\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u3002 \u628a\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u5143\u7d20\u5b58\u50a8\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb\u7684\u5b58\u50a8\u5355\u5143\u4e2d\uff0c\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u7531\u5b58\u50a8\u5355\u5143\u7684\u90bb\u63a5\u5173\u7cfb\u6765\u4f53\u73b0 \u4f18\u70b9: \u652f\u6301\u968f\u673a\u5b58\u53d6\uff0c\u5b58\u50a8\u5bc6\u5ea6\u9ad8 \u7f3a\u70b9: \u8981\u6c42\u8fde\u7eed\u7a7a\u95f4\uff0c\u6539\u53d8\u5bb9\u91cf\u4e0d\u65b9\u4fbf \u5355\u94fe\u8868 \u00b6 \u7528 \u94fe\u5f0f\u5b58\u50a8 \u7684\u65b9\u5f0f\u5b9e\u73b0\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8 \u4f18\u70b9\uff1a\u4e0d\u8981\u6c42\u8fde\u7eed\u7684\u7a7a\u95f4\uff0c\u6539\u53d8\u5bb9\u91cf\u65b9\u4fbf \u7f3a\u70b9\uff1a\u4e0d\u53ef\u968f\u673a\u5b58\u53d6\uff0c\u8981\u8017\u8d39\u4e00\u5b9a\u7684\u7a7a\u95f4\u653e\u6307\u9488 LinkList.cpp \u9759\u6001\u94fe\u8868 \u00b6 \u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u94fe\u8868 \u9002\u7528\u573a\u666f \u4e0d\u652f\u6301\u6307\u9488\u7684\u4f4e\u7ea7\u8bed\u8a00 \u6570\u636e\u5143\u7d20\u6570\u91cf\u56fa\u5b9a\u4e0d\u53d8\u7684\u573a\u666f\uff0c\u5982\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u5206\u914d\u8868FAT","title":"\u7ebf\u6027\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_1","text":"\u7528 \u987a\u5e8f\u5b58\u50a8 \u7684\u65b9\u5f0f\u5b9e\u73b0\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u3002 \u628a\u903b\u8f91\u4e0a\u76f8\u90bb\u7684\u5143\u7d20\u5b58\u50a8\u5728\u7269\u7406\u4f4d\u7f6e\u4e0a\u4e5f\u76f8\u90bb\u7684\u5b58\u50a8\u5355\u5143\u4e2d\uff0c\u5143\u7d20\u4e4b\u95f4\u7684\u5173\u7cfb\u7531\u5b58\u50a8\u5355\u5143\u7684\u90bb\u63a5\u5173\u7cfb\u6765\u4f53\u73b0 \u4f18\u70b9: \u652f\u6301\u968f\u673a\u5b58\u53d6\uff0c\u5b58\u50a8\u5bc6\u5ea6\u9ad8 \u7f3a\u70b9: \u8981\u6c42\u8fde\u7eed\u7a7a\u95f4\uff0c\u6539\u53d8\u5bb9\u91cf\u4e0d\u65b9\u4fbf","title":"\u987a\u5e8f\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_2","text":"\u7528 \u94fe\u5f0f\u5b58\u50a8 \u7684\u65b9\u5f0f\u5b9e\u73b0\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u5b58\u50a8 \u4f18\u70b9\uff1a\u4e0d\u8981\u6c42\u8fde\u7eed\u7684\u7a7a\u95f4\uff0c\u6539\u53d8\u5bb9\u91cf\u65b9\u4fbf \u7f3a\u70b9\uff1a\u4e0d\u53ef\u968f\u673a\u5b58\u53d6\uff0c\u8981\u8017\u8d39\u4e00\u5b9a\u7684\u7a7a\u95f4\u653e\u6307\u9488 LinkList.cpp","title":"\u5355\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_3","text":"\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u94fe\u8868 \u9002\u7528\u573a\u666f \u4e0d\u652f\u6301\u6307\u9488\u7684\u4f4e\u7ea7\u8bed\u8a00 \u6570\u636e\u5143\u7d20\u6570\u91cf\u56fa\u5b9a\u4e0d\u53d8\u7684\u573a\u666f\uff0c\u5982\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u5206\u914d\u8868FAT","title":"\u9759\u6001\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","text":"\u5047\u8bbe\u4f60\u7684\u8ba1\u7b97\u673a\u5b58\u50a8\u4e86\u5f88\u591a\u4e50\u66f2\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u4e50\u961f\uff0c\u4f60\u90fd\u8bb0\u5f55\u4e86\u5176\u4f5c \u54c1\u88ab\u64ad\u653e\u7684\u6b21\u6570\u3002 \u4f60\u8981\u5c06\u8fd9\u4e2a\u5217\u8868\u6309\u64ad\u653e\u6b21\u6570\u4ece\u591a\u5230\u5c11\u7684\u987a\u5e8f\u6392\u5217\uff0c\u4ece\u800c\u5c06\u4f60\u559c\u6b22\u7684\u4e50\u961f\u6392\u5e8f\u3002\u8be5\u5982\u4f55\u505a\u5462\uff1f \u4e00\u79cd\u529e\u6cd5\u662f\u904d\u5386\u8fd9\u4e2a\u5217\u8868\uff0c \u627e\u51fa\u4f5c\u54c1\u64ad\u653e\u6b21\u6570\u6700\u591a\u7684\u4e50\u961f\uff0c \u5e76\u5c06\u8be5\u4e50\u961f\u6dfb\u52a0\u5230\u4e00\u4e2a\u65b0\u5217\u8868\u4e2d \u518d\u6b21\u8fd9\u6837\u505a\uff0c\u627e\u51fa\u64ad\u653e\u6b21\u6570\u7b2c\u4e8c\u591a\u7684\u4e50\u961f\u3002 \u7ee7\u7eed\u8fd9\u6837\u505a\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u5217\u8868\u3002 python\u5b9e\u73b0 \u00b6 \u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4 \u00b6 def select_sort ( seq ): new_seq = [] seq_cp = list . copy ( seq ) for i in range ( len ( seq )): min_elem = min ( seq_cp ) new_seq . append ( min_elem ) seq_cp . remove ( min_elem ) return new_seq def test_select_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) assert ( select_sort ( seq ) == sorted ( seq )) \u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4 \u00b6 \u4e00 \u00b6 def select_sort ( seq ): for i in range ( len ( seq )): seq [ i ] = min ( seq [ i :]) def test_select_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) select_sort ( seq ) assert ( seq == sorted ( seq )) \u4e8c \u00b6 def select_sort ( seq ): for i in range ( len ( seq )): _min = seq [ i ] for j in range ( i + 1 , len ( seq )): if seq [ j ] < _min : _min = seq [ j ] seq [ i ] = _min def test_select_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) select_sort ( seq ) assert ( seq == sorted ( seq )) assert ( 0 )","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/#python","text":"","title":"python\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/#_1","text":"def select_sort ( seq ): new_seq = [] seq_cp = list . copy ( seq ) for i in range ( len ( seq )): min_elem = min ( seq_cp ) new_seq . append ( min_elem ) seq_cp . remove ( min_elem ) return new_seq def test_select_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) assert ( select_sort ( seq ) == sorted ( seq ))","title":"\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/#_2","text":"","title":"\u4e0d\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/#_3","text":"def select_sort ( seq ): for i in range ( len ( seq )): seq [ i ] = min ( seq [ i :]) def test_select_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) select_sort ( seq ) assert ( seq == sorted ( seq ))","title":"\u4e00"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/#_4","text":"def select_sort ( seq ): for i in range ( len ( seq )): _min = seq [ i ] for j in range ( i + 1 , len ( seq )): if seq [ j ] < _min : _min = seq [ j ] seq [ i ] = _min def test_select_sort (): seq = list ( range ( 10 )) import random random . shuffle ( seq ) select_sort ( seq ) assert ( seq == sorted ( seq )) assert ( 0 )","title":"\u4e8c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/","text":"\u5355\u94fe\u8868 \u00b6 \u5355\u94fe\u8868\u7684\u7279\u70b9 \u00b6 \u94fe\u5f0f\u7ed3\u6784: \u521b\u5efa\u4e00\u4e2a\u94fe\u8868\u4e0d\u5fc5\u63d0\u524d\u7533\u8bf7\u5b58\u50a8\u7a7a\u95f4\uff0c\u94fe\u8868\u7531\u8282\u70b9\u7ec4\u6210\uff0c\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u503c\u548c\u4e0b\u4e00\u4e2a\u503c\u7684\u5730\u5740\u3002 \u67e5\u627e\uff1a\u987a\u5e8f\u67e5\u627e\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 \u67e5\u627e O(n) \u63d2\u5165 O(1) \u5220\u9664 O(n) cpp \u5b9e\u73b0 \u00b6 list.cpp python\u5b9e\u73b0 \u00b6 class Node ( object ): def __init__ ( self , value = None , nxt = None ): self . value = value self . next = nxt def __str__ ( self ): return '<value: {value} , next= {next} >' . format ( value = self . value , next = self . next ) class LinkList ( object ): '''\u5355\u94fe\u8868''' def __init__ ( self ): self . head , self . tail = None , None self . length = 0 def __iter ( self ): cur_node = self . head while cur_node != self . tail : yield cur_node cur_node = cur_node . next yield self . tail def __len__ ( self ): return self . length def __iter__ ( self ): for node in self . __iter (): yield node . value def append ( self , value ): node = Node ( value = value ) if self . head is None : self . head = node self . tail = node else : self . tail . next = node self . tail = node self . length += 1 def left_append ( self , value ): node = Node ( value = value ) node . next = self . head self . head = node self . length += 1 def find ( self , value ): if self . head is None : return False for v in self : if v == value : return True return False def delete ( self , value ): if self . head . value == value : self . head = self . head . next self . length -= 1 return value if self . tail . value == value : for node in self . __iter (): if node . next == self . tail : self . tail = node self . length -= 1 return value for node in self . __iter (): if node . next . value == value : node . next = node . next . next self . length -= 1 return value return - 1 def pop ( self ): if self . tail == None : raise Exception ( \"link list is empty\" ) res = None for node in self . __iter (): print ( node ) if node . next == self . tail : res = self . tail . value node . next = None self . tail = node self . length -= 1 return res res = self . tail . value self . tail = None self . head = None self . length -= 1 return res def test_linklist (): ll = LinkList () ll . append ( 1 ) ll . append ( 2 ) assert ( len ( ll ) == 2 ) ll . append ( 3 ) ll . append ( 4 ) ll . append ( 5 ) assert ( len ( ll ) == 5 ) assert ( list ( ll ) == list ( range ( 1 , 6 ))) ll . delete ( 1 ) assert ( len ( ll ) == 4 ) assert ( list ( ll ) == [ 2 , 3 , 4 , 5 ]) assert ( ll . pop () == 5 ) ll . append ( 6 ) assert ( len ( ll ) == 4 ) assert ( list ( ll ) == [ 2 , 3 , 4 , 6 ]) ll . delete ( 6 ) assert ( len ( ll ) == 3 ) assert ( list ( ll ) == [ 2 , 3 , 4 ]) ll . delete ( 3 ) assert ( list ( ll ) == [ 2 , 4 ]) assert ( ll . pop () == 4 ) assert ( ll . pop () == 2 ) assert ( len ( ll ) == 0 ) assert ( ll . find ( 0 )) if __name__ == '__main__' : test_linklist ()","title":"\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/#_1","text":"","title":"\u5355\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/#_2","text":"\u94fe\u5f0f\u7ed3\u6784: \u521b\u5efa\u4e00\u4e2a\u94fe\u8868\u4e0d\u5fc5\u63d0\u524d\u7533\u8bf7\u5b58\u50a8\u7a7a\u95f4\uff0c\u94fe\u8868\u7531\u8282\u70b9\u7ec4\u6210\uff0c\u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u503c\u548c\u4e0b\u4e00\u4e2a\u503c\u7684\u5730\u5740\u3002 \u67e5\u627e\uff1a\u987a\u5e8f\u67e5\u627e\u3002","title":"\u5355\u94fe\u8868\u7684\u7279\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/#_3","text":"\u65f6\u95f4\u590d\u6742\u5ea6 \u67e5\u627e O(n) \u63d2\u5165 O(1) \u5220\u9664 O(n)","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/#cpp","text":"list.cpp","title":"cpp \u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/#python","text":"class Node ( object ): def __init__ ( self , value = None , nxt = None ): self . value = value self . next = nxt def __str__ ( self ): return '<value: {value} , next= {next} >' . format ( value = self . value , next = self . next ) class LinkList ( object ): '''\u5355\u94fe\u8868''' def __init__ ( self ): self . head , self . tail = None , None self . length = 0 def __iter ( self ): cur_node = self . head while cur_node != self . tail : yield cur_node cur_node = cur_node . next yield self . tail def __len__ ( self ): return self . length def __iter__ ( self ): for node in self . __iter (): yield node . value def append ( self , value ): node = Node ( value = value ) if self . head is None : self . head = node self . tail = node else : self . tail . next = node self . tail = node self . length += 1 def left_append ( self , value ): node = Node ( value = value ) node . next = self . head self . head = node self . length += 1 def find ( self , value ): if self . head is None : return False for v in self : if v == value : return True return False def delete ( self , value ): if self . head . value == value : self . head = self . head . next self . length -= 1 return value if self . tail . value == value : for node in self . __iter (): if node . next == self . tail : self . tail = node self . length -= 1 return value for node in self . __iter (): if node . next . value == value : node . next = node . next . next self . length -= 1 return value return - 1 def pop ( self ): if self . tail == None : raise Exception ( \"link list is empty\" ) res = None for node in self . __iter (): print ( node ) if node . next == self . tail : res = self . tail . value node . next = None self . tail = node self . length -= 1 return res res = self . tail . value self . tail = None self . head = None self . length -= 1 return res def test_linklist (): ll = LinkList () ll . append ( 1 ) ll . append ( 2 ) assert ( len ( ll ) == 2 ) ll . append ( 3 ) ll . append ( 4 ) ll . append ( 5 ) assert ( len ( ll ) == 5 ) assert ( list ( ll ) == list ( range ( 1 , 6 ))) ll . delete ( 1 ) assert ( len ( ll ) == 4 ) assert ( list ( ll ) == [ 2 , 3 , 4 , 5 ]) assert ( ll . pop () == 5 ) ll . append ( 6 ) assert ( len ( ll ) == 4 ) assert ( list ( ll ) == [ 2 , 3 , 4 , 6 ]) ll . delete ( 6 ) assert ( len ( ll ) == 3 ) assert ( list ( ll ) == [ 2 , 3 , 4 ]) ll . delete ( 3 ) assert ( list ( ll ) == [ 2 , 4 ]) assert ( ll . pop () == 4 ) assert ( ll . pop () == 2 ) assert ( len ( ll ) == 0 ) assert ( ll . find ( 0 )) if __name__ == '__main__' : test_linklist ()","title":"python\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/","text":"\u961f\u5217 \u00b6 \u961f\u5217\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u961f\u5217\u5b8c\u5168\u76f8\u540c\u3002 \u5047\u8bbe\u4f60\u4e0e\u670b\u53cb\u4e00\u8d77\u5728\u516c\u4ea4\u8f66\u7ad9\u6392\u961f\uff0c\u5982\u679c\u4f60\u6392\u5728\u4ed6\u524d\u9762\uff0c\u4f60\u5c06\u5148\u4e0a\u8f66\u3002\u961f\u5217\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u6b64\u76f8\u540c\u3002 \u961f\u5217\u7c7b\u4f3c\u4e8e\u6808\uff0c\u4f60\u4e0d\u80fd\u968f\u673a\u5730\u8bbf\u95ee\u961f\u5217\u4e2d\u7684\u5143\u7d20\u3002\u961f\u5217\u53ea\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\u5165\u961f\u548c\u51fa\u961f\u3002 \u5982\u679c\u4f60\u5c06\u4e24\u4e2a\u5143\u7d20\u52a0\u5165\u961f\u5217\uff0c\u5148\u52a0\u5165\u7684\u5143\u7d20\u5c06\u5728\u540e\u52a0\u5165\u7684\u5143\u7d20\u4e4b\u524d\u51fa\u961f\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u4f7f\u7528\u961f\u5217\u6765\u8868\u793a\u67e5\u627e\u540d\u5355\uff01\u8fd9\u6837\uff0c\u5148\u52a0\u5165\u7684\u4eba\u5c06\u5148\u51fa\u961f\u5e76\u5148\u88ab\u68c0\u67e5\u3002 \u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08First In First Out\uff0cFIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u6808\u662f\u4e00\u79cd\u540e\u8fdb\u5148\u51fa\uff08Last In First Out\uff0cLIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\u3002 python \u5b9e\u73b0 \u00b6 from _array import Array class Queue ( object ): def __init__ ( self , size ): self . _items = Array ( size ) self . head , self . tail = - 1 , - 1 self . length = 0 def __len__ ( self ): return self . length def push ( self , value ): if self . is_full (): raise Exception ( \"queue is full\" ) self . tail += 1 index = self . tail % len ( self . _items ) self . _items [ index ] = value self . length += 1 self . tail = index def pop ( self ): if self . is_empty (): raise Exception ( \"queue is empty\" ) self . head += 1 index = self . head % len ( self . _items ) value = self . _items [ index ] self . length -= 1 self . head = index return value def is_full ( self ): return self . length == len ( self . _items ) def is_empty ( self ): return self . length <= 0 def test_queue (): queue = Queue ( 4 ) assert ( len ( queue ) == 0 ) assert ( queue . is_empty () == True ) queue . push ( 0 ) queue . push ( 1 ) queue . push ( 2 ) queue . push ( 3 ) assert ( queue . is_empty () == False ) assert ( queue . is_full () == True ) assert ( queue . pop () == 0 ) assert ( queue . is_full () == False ) assert ( queue . pop () == 1 ) assert ( queue . pop () == 2 ) queue . push ( 4 ) assert ( queue . pop () == 3 ) assert ( queue . pop () == 4 ) assert ( queue . is_empty () == True ) assert ( 0 )","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/#_1","text":"\u961f\u5217\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u961f\u5217\u5b8c\u5168\u76f8\u540c\u3002 \u5047\u8bbe\u4f60\u4e0e\u670b\u53cb\u4e00\u8d77\u5728\u516c\u4ea4\u8f66\u7ad9\u6392\u961f\uff0c\u5982\u679c\u4f60\u6392\u5728\u4ed6\u524d\u9762\uff0c\u4f60\u5c06\u5148\u4e0a\u8f66\u3002\u961f\u5217\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u6b64\u76f8\u540c\u3002 \u961f\u5217\u7c7b\u4f3c\u4e8e\u6808\uff0c\u4f60\u4e0d\u80fd\u968f\u673a\u5730\u8bbf\u95ee\u961f\u5217\u4e2d\u7684\u5143\u7d20\u3002\u961f\u5217\u53ea\u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff1a\u5165\u961f\u548c\u51fa\u961f\u3002 \u5982\u679c\u4f60\u5c06\u4e24\u4e2a\u5143\u7d20\u52a0\u5165\u961f\u5217\uff0c\u5148\u52a0\u5165\u7684\u5143\u7d20\u5c06\u5728\u540e\u52a0\u5165\u7684\u5143\u7d20\u4e4b\u524d\u51fa\u961f\u3002\u56e0\u6b64\uff0c\u4f60\u53ef\u4f7f\u7528\u961f\u5217\u6765\u8868\u793a\u67e5\u627e\u540d\u5355\uff01\u8fd9\u6837\uff0c\u5148\u52a0\u5165\u7684\u4eba\u5c06\u5148\u51fa\u961f\u5e76\u5148\u88ab\u68c0\u67e5\u3002 \u961f\u5217\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08First In First Out\uff0cFIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u6808\u662f\u4e00\u79cd\u540e\u8fdb\u5148\u51fa\uff08Last In First Out\uff0cLIFO\uff09\u7684\u6570\u636e\u7ed3\u6784\u3002","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/#python","text":"from _array import Array class Queue ( object ): def __init__ ( self , size ): self . _items = Array ( size ) self . head , self . tail = - 1 , - 1 self . length = 0 def __len__ ( self ): return self . length def push ( self , value ): if self . is_full (): raise Exception ( \"queue is full\" ) self . tail += 1 index = self . tail % len ( self . _items ) self . _items [ index ] = value self . length += 1 self . tail = index def pop ( self ): if self . is_empty (): raise Exception ( \"queue is empty\" ) self . head += 1 index = self . head % len ( self . _items ) value = self . _items [ index ] self . length -= 1 self . head = index return value def is_full ( self ): return self . length == len ( self . _items ) def is_empty ( self ): return self . length <= 0 def test_queue (): queue = Queue ( 4 ) assert ( len ( queue ) == 0 ) assert ( queue . is_empty () == True ) queue . push ( 0 ) queue . push ( 1 ) queue . push ( 2 ) queue . push ( 3 ) assert ( queue . is_empty () == False ) assert ( queue . is_full () == True ) assert ( queue . pop () == 0 ) assert ( queue . is_full () == False ) assert ( queue . pop () == 1 ) assert ( queue . pop () == 2 ) queue . push ( 4 ) assert ( queue . pop () == 3 ) assert ( queue . pop () == 4 ) assert ( queue . is_empty () == True ) assert ( 0 )","title":"python \u5b9e\u73b0"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/","text":"\u503c\u5f97\u6295\u8d44\u7684\u884c\u4e1a\u6307\u6570 \u00b6 \u6cdb\u6559\u80b2 \u6cdb\u7406\u8d22\uff08\u7406\u8d22\u81ea\u5a92\u4f53...\uff09 \u6cdb\u5a31\u4e50 \u6cdb\u5065\u5eb7\uff08\u533b\u836f\uff0c\u751f\u7269\u79d1\u6280\uff0c\u533b\u7597\u5668\u68b0\uff0c\u65b0\u80fd\u6e90\uff0c\u73af\u4fdd\uff09 \u57fa\u91d1\u89e3\u5957\u7b56\u7565 \u00b6 \u52a0\u4ed3\u7b56\u7565 \u901a\u8fc7\u5728\u4f4e\u4f4d\u6309\u7167\u6700\u5c111\u500d\u4ee5\u4e0a\u7684\u5957\u7262\u8d44\u91d1\u4e70\u5165\u57fa\u91d1\uff0c\u644a\u8584\u6bcf\u4efd\u7684\u6301\u6709\u6210\u672c\uff0c\u4ece\u800c\u5b9e\u73b0\u89e3\u5957 \u88c5\u6b7b\u7b56\u7565 \u4ec0\u4e48\u90fd\u4e0d\u7ba1\uff0c\u4e00\u76f4\u7b49\u5230\u57fa\u91d1\u725b\u5e02\u56de\u672c\u518d\u5356\uff0c\u7b80\u5355\uff0c\u4f46\u662f\u65f6\u95f4\u6210\u672c\u9ad8\uff0c\u89e3\u5957\u4e4b\u540e\u53ef\u80fd\u56e0\u4e3a\u901a\u80c0\u4e8f\u635f\uff0c\u4e0d\u63a8\u8350\u3002 \u6362\u4ed3\u7b56\u7565 \u5957\u7262\u7684\u57fa\u91d1\u5f88\u5dee\uff0c\u7acb\u523b\u5356\u51fa\uff0c\u6362\u4e2a\u8dd1\u9053\uff0c\u91cd\u65b0\u6295\u8d44\u3002 \u6b62\u635f\u7b56\u7565 \u4e0d\u63a8\u8350\uff0c\u987e\u540d\u601d\u4e49 \u603b\u7ed3\uff1a \u5982\u679c\u770b\u597d\u5957\u7262\u7684\u57fa\u91d1\uff0c\u8fd8\u6709\u94b1\u52a0\u4ed3\uff0c\u5c31\u91c7\u53d6\u52a0\u4ed3\u7b56\u7565\uff0c\u6ca1\u94b1\u5c31\u91c7\u53d6\u88c5\u6b7b\u7b56\u7565 \u4e0d\u770b\u597d\u5957\u7262\u7684\u57fa\u91d1\uff0c\u5c31\u91c7\u53d6\u6362\u4ed3\u7b56\u7565 \u57fa\u91d1\u5b9a\u6295 \u00b6 \u5168\u79f0: \u57fa\u91d1\u5b9a\u989d\u6295\u8d44 \u57fa\u91d1\u5b9a\u6295\u539f\u7406 \u00b6 \u901a\u8fc7\u5b9a\u671f\u5b9a\u989d\u6295\u8d44\uff0c\u4e0d\u505c\u7684\u5206\u6279\u6b21\u5c0f\u989d\u4e70\u5165\u57fa\u91d1\uff0c\u4f7f\u57fa\u91d1\u7684\u6536\u76ca\u66f2\u7ebf\u66f4\u63a5\u8fd1\u5b8f\u89c2\u7ecf\u6d4e\u8d70\u52bf\uff0c\u53d8\u5f97\u6bd4\u8f83\u5e73\u6ed1\u3002 \u57fa\u91d1\u5b9a\u6295\u9002\u7528\u573a\u5408 \u00b6 \u57fa\u91d1\u5b9a\u6295\u66f4\u9002\u7528\u4e8e\u66f2\u7ebf\u6ce2\u52a8\u6bd4\u8f83\u5927\u7684\u57fa\u91d1\uff0c\u5982\u6307\u6570\u57fa\u91d1; \u57fa\u91d1\u53d8\u989d\u5b9a\u6295 \u00b6 \u901a\u8fc7\u5b9a\u671f\u4e0d\u5b9a\u989d\u6295\u8d44\uff0c\u5b9e\u73b0\u56fa\u5b9a\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e70\u5165\u591a\uff0c\u9ad8\u4f4d\u4e70\u5165\u5c11\u7684\u7b56\u7565 \u5747\u7ebf\u7b56\u7565\u667a\u6295 \u8fd0\u7528\u79fb\u52a8\u5e73\u5747\u7ebfMA\u4f5c\u4e3a\u53c2\u8003\u6307\u6807\uff0c\u6765\u6307\u5bfc\u57fa\u91d1\u667a\u80fd\u5b9a\u6295\u7684\u7b56\u7565 \u52a8\u6001\u518d\u5e73\u8861\u7b56\u7565 \u4e03\u6b65\u5b9a\u6295\u7b56\u7565 \u00b6 \u56db\u5927\u539f\u5219 \u00b6 \u957f\u671f\u575a\u6301\u5b9a\u671f\u4e0d\u5b9a\u989d\u6295\u8d44 \u957f\u671f\u575a\u6301\u6b62\u76c8\u4e0d\u6b62\u635f\u6295\u8d44 \u53ea\u95ee\u8d35\u8d31\uff0c\u4e0d\u770b\u8d8b\u52bf \u8d8a\u8dcc\u8d8a\u4e70\uff0c\u8d8a\u6da8\u8d8a\u5356 \u4e94\u79cd\u5177\u4f53\u7684\u7b56\u7565 \u00b6 \u5168\u5929\u5019\u914d\u7f6e\u7b56\u7565\uff08\u6bcf\u4e00\u79cd\u7406\u8d22\u4ea7\u54c1\u90fd\u4e70\u4e00\u70b9\uff09 \u4e3b\uff1aA\u80a1\uff0c\u6e2f\u80a1\uff0c\u7f8e\u80a1 (0%-80%) \u526f\uff1a\u5370\u5ea6\u80a1\u5e02\uff0c\u4e1c\u76df\u80a1\u5e02\uff0c\u5fb7\u56fd\u80a1\u5e02 \u9ec4\u91d1+\u767d\u94f6\uff0c\u77f3\u6cb9+\u5927\u5b97\u5546\u54c1(0%-30%) \u8bf4\u660e\uff1a\u4e3b\u526f\u4e3a\u4e00\u7ec4\uff0cA\u80a1+\u5370\u5ea6\u80a1\u5e02\uff0c\u6e2f\u80a1+\u4e1c\u76df\u80a1\u5e02\uff0c\u7f8e\u80a1+\u5fb7\u56fd\u80a1\u5e02 \u4f4e\u4f30\u503c\u62e9\u65f6\u8f6e\u52a8\u7b56\u7565 \uff08\u5f00\u59cb\u5b9a\u6295\u65f6\u5206\u4f4d\u70b9\u5fc5\u987b\u4f4e\u4e8e40%\uff09 \u9009\u62e9\u4f4e\u4f30\u503c\u57fa\u91d1\u62e9\u65f6\u4e70\u5165\uff1b \u4f30\u503c\u5224\u65ad\uff1aPE\uff08\u5e02\u76c8\u7387\uff09\uff0cPB(\u5e02\u51c0\u7387)\uff1b\u5e02\u76c8\u7387\u8d85\u8fc750\u500d\u7684\u4e0d\u78b0\uff0c\u5e02\u76c8\u7387\u592a\u9ad8\uff0c\u4f30\u503c\u592a\u9ad8\u3002 \u4ee5\u81ea\u8eab\u5e02\u76c8\u7387\u4e3a\u9274\u6765\u5224\u65ad\u5e02\u76c8\u7387\u7684\u9ad8\u4f4e\uff0c\u5728\u5e02\u76c8\u7387\u7684\u5386\u53f2\u9ad8\u4f4d\u53ef\u4ee5\u629b\u51fa\u3002\uff08\u5206\u4f4d\u6cd5\uff09 \u9ec4\u91d1\u4f30\u503c\uff1a<1000\u7f8e\u5143/\u76ce\u53f8\uff0c\u4f4e\u4f30\uff1b1000\u7f8e\u5143-1500\u7f8e\u5143/\u76ce\u53f8\uff0c\u5408\u7406\u4f30\u503c; >1500\u7f8e\u5143/\u76ce\u53f8, \u9ad8\u4f30 \u77f3\u6cb9\u4f30\u503c\uff1a<35\u7f8e\u5143/\u6876, \u4f4e\u4f30\uff1b35\u7f8e\u5143-75\u7f8e\u5143/\u6876\uff0c\u5408\u7406\u4f30\u503c\uff0c>75\u7f8e\u5143/\u6876, \u9ad8\u4f30\u3002 \u4ef7\u503c\u5e73\u5747\u7b56\u7565 \u56fa\u5b9a\u6bcf\u6708\u6295\u5165\u7684\u5e02\u503c\uff0c\u4e0d\u591f\u8865\u9f50\uff0c\u591a\u4e86\u5356\u51fa \u6bd4\u5982\uff0c\u6bcf\u6708\u56fa\u5b9a\u6295\u516510000\u5143\uff0c\u7b2c\u4e8c\u4e2a\u6708\u6da8\u5230\u4e8612000\u5143\uff0c\u7b2c\u4e8c\u4e2a\u6708\u53ea\u9700\u5b9a\u62958000\u5143\uff1b\u76f8\u53cd\uff0c\u7b2c\u4e8c\u4e2a\u6708\u8dcc\u5230\u4e869000\u5143\uff0c\u7b2c\u4e8c\u4e2a\u6708\u9700\u8981\u5b9a\u629511000\u5143\uff1b\u6781\u7aef\u60c5\u51b5\uff0c\u7b2c\u4e8c\u4e2a\u6708\u6da8\u5230\u4e8622000\u5143\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u6708\u65e0\u9700\u5b9a\u6295\uff0c\u8fd8\u8981\u5356\u51fa2000\u5143\uff0c\u6b62\u76c8\u3002 \u7f51\u683c\u4ea4\u6613\u7b56\u7565 \u5f53\u67d0\u57fa\u91d1\u8fbe\u5230\u4e86\u8be5\u6b21\u5b9a\u6295\u8ba1\u5212\u6700\u521d\u8bbe\u5b9a\u7684\u76ee\u6807\u5b9a\u6295\u5e02\u503c\u4e4b\u540e\uff0c\u6682\u65f6\u5c31\u4e0d\u9700\u8981\u7ee7\u7eed\u5b9a\u6295\u4e86\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u683c\u4ea4\u6613\u6cd5\u8fdb\u884c\u6536\u5272\u3002 \u5355\u8fb9\u884c\u60c5\u4e2d\uff0c\u7f51\u683c\u5e94\u8be5\u653e\u5927\u4e00\u70b9\u3002 \u9707\u8361\u884c\u60c5\u4e2d\uff0c\u7f51\u683c\u5e94\u8be5\u6536\u5c0f\u4e00\u70b9\u3002 \u7f51\u683c\u8bbe\u7f6e\uff1a\u6700\u5927\u7f51\u683c\u8bbe\u7f6e\u4e3a20%\uff0c\u6700\u5c0f\u7f51\u683c\u4e3a3%\u3002 \u52a8\u6001\u518d\u5e73\u8861\u7b56\u7565 \u4e03\u4e2a\u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u5b8c\u6210\u98ce\u9669\u504f\u597d\u6d4b\u8bd5 \u5168\u9762\u7edf\u8ba1\u5bb6\u5ead\u8d22\u52a1\u4fe1\u606f \u505a\u597d\u5bb6\u5ead\u8d44\u4ea7\u914d\u7f6e\u65b9\u6848 \u63d0\u53d6\u751f\u6d3b\u7d27\u6025\u5907\u7528\u91d1 \u8d2d\u7f6e\u9002\u5408\u7684\u4fdd\u9669\u4ea7\u54c1 \u77ed\u671f\u8981\u7528\u94b1\u7684\u7559\u51fa \u957f\u671f\u4e0d\u7528\u7684\u94b1\u624d\u80fd\u505a\u957f\u671f\u6295\u8d44 \u8bbe\u8ba1\u5b58\u91cf\u8d44\u91d1\u5b9a\u6295\u8ba1\u5212 \u5168\u5929\u5019\u914d\u7f6e\u7b56\u7565\uff0c \u4f4e\u4f30\u503c\u62e9\u65f6\u8f6e\u52a8\u7b56\u7565 \u8ba1\u5212\u5b9a\u6295\u9636\u6bb5 \u5e03\u5c40\u5b9a\u6295\u9636\u6bb5 \u7ef4\u6301\u5b9a\u6295\u9636\u6bb5 \u8c03\u6574\u5b9a\u6295\u9636\u6bb5 \u672a\u6765\u4e00\u5e74\u5b8c\u6210\u5b58\u91cf\u57fa\u91d1\u7684\u5b9a\u6295 \u4ef7\u503c\u5e73\u5747\u7b56\u7565\uff0c\u5e03\u5c40\u5b9a\u6295\u9636\u6bb5 \u5bf9\u63d0\u524d\u5b8c\u6210\u5b9a\u6295\u7684\u57fa\u91d1\u8fdb\u884c\u7f51\u683c\u6536\u5272 \u7f51\u683c\u4ea4\u6613\u7b56\u7565\uff0c\u7ef4\u6301\u5b9a\u6295\u9636\u6bb5 \u8bbe\u7f6e\u589e\u91cf\u57fa\u91d1\u5b9a\u6295\u8ba1\u5212\uff08\u8fd8\u662f\u4ee5\u4e00\u5e74\u4e3a\u5468\u671f\uff09 \u52a8\u6001\u518d\u5e73\u8861\u7b56\u7565\uff0c\u8c03\u6574\u5b9a\u6295\u9636\u6bb5 \u53ef\u6295\u6307\u6570 \u00b6 \u63a8\u8350\u9009\u573a\u5185\u6307\u6570\uff0cETF, LOF, \u5206\u7ea7B\uff0c\u4e3b\u8981\u662f\u964d\u4f4e\u4ea4\u6613\u6210\u672c\u548c\u65b9\u4fbf\u64cd\u4f5c\u3002 \u6e2f\u80a1\uff1a\u6052\u751f\u6307\u6570\uff0cH\u80a1\u6307\u6570 \u7f8e\u80a1\uff1a\u6807\u666e500\u6307\u6570\u548c\u7eb3\u65af\u8fbe\u514b\u6307\u6570 A\u80a1\uff1a\u6caa\u6df1300\uff0c\u4e2d\u8bc1500 \u77f3\u6cb9\uff1a\u534e\u5b9d\u6cb9\u6c14\uff0c\u534e\u5b89\u77f3\u6cb9","title":"\u57fa\u91d1\u7406\u8d22"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_1","text":"\u6cdb\u6559\u80b2 \u6cdb\u7406\u8d22\uff08\u7406\u8d22\u81ea\u5a92\u4f53...\uff09 \u6cdb\u5a31\u4e50 \u6cdb\u5065\u5eb7\uff08\u533b\u836f\uff0c\u751f\u7269\u79d1\u6280\uff0c\u533b\u7597\u5668\u68b0\uff0c\u65b0\u80fd\u6e90\uff0c\u73af\u4fdd\uff09","title":"\u503c\u5f97\u6295\u8d44\u7684\u884c\u4e1a\u6307\u6570"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_2","text":"\u52a0\u4ed3\u7b56\u7565 \u901a\u8fc7\u5728\u4f4e\u4f4d\u6309\u7167\u6700\u5c111\u500d\u4ee5\u4e0a\u7684\u5957\u7262\u8d44\u91d1\u4e70\u5165\u57fa\u91d1\uff0c\u644a\u8584\u6bcf\u4efd\u7684\u6301\u6709\u6210\u672c\uff0c\u4ece\u800c\u5b9e\u73b0\u89e3\u5957 \u88c5\u6b7b\u7b56\u7565 \u4ec0\u4e48\u90fd\u4e0d\u7ba1\uff0c\u4e00\u76f4\u7b49\u5230\u57fa\u91d1\u725b\u5e02\u56de\u672c\u518d\u5356\uff0c\u7b80\u5355\uff0c\u4f46\u662f\u65f6\u95f4\u6210\u672c\u9ad8\uff0c\u89e3\u5957\u4e4b\u540e\u53ef\u80fd\u56e0\u4e3a\u901a\u80c0\u4e8f\u635f\uff0c\u4e0d\u63a8\u8350\u3002 \u6362\u4ed3\u7b56\u7565 \u5957\u7262\u7684\u57fa\u91d1\u5f88\u5dee\uff0c\u7acb\u523b\u5356\u51fa\uff0c\u6362\u4e2a\u8dd1\u9053\uff0c\u91cd\u65b0\u6295\u8d44\u3002 \u6b62\u635f\u7b56\u7565 \u4e0d\u63a8\u8350\uff0c\u987e\u540d\u601d\u4e49 \u603b\u7ed3\uff1a \u5982\u679c\u770b\u597d\u5957\u7262\u7684\u57fa\u91d1\uff0c\u8fd8\u6709\u94b1\u52a0\u4ed3\uff0c\u5c31\u91c7\u53d6\u52a0\u4ed3\u7b56\u7565\uff0c\u6ca1\u94b1\u5c31\u91c7\u53d6\u88c5\u6b7b\u7b56\u7565 \u4e0d\u770b\u597d\u5957\u7262\u7684\u57fa\u91d1\uff0c\u5c31\u91c7\u53d6\u6362\u4ed3\u7b56\u7565","title":"\u57fa\u91d1\u89e3\u5957\u7b56\u7565"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_3","text":"\u5168\u79f0: \u57fa\u91d1\u5b9a\u989d\u6295\u8d44","title":"\u57fa\u91d1\u5b9a\u6295"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_4","text":"\u901a\u8fc7\u5b9a\u671f\u5b9a\u989d\u6295\u8d44\uff0c\u4e0d\u505c\u7684\u5206\u6279\u6b21\u5c0f\u989d\u4e70\u5165\u57fa\u91d1\uff0c\u4f7f\u57fa\u91d1\u7684\u6536\u76ca\u66f2\u7ebf\u66f4\u63a5\u8fd1\u5b8f\u89c2\u7ecf\u6d4e\u8d70\u52bf\uff0c\u53d8\u5f97\u6bd4\u8f83\u5e73\u6ed1\u3002","title":"\u57fa\u91d1\u5b9a\u6295\u539f\u7406"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_5","text":"\u57fa\u91d1\u5b9a\u6295\u66f4\u9002\u7528\u4e8e\u66f2\u7ebf\u6ce2\u52a8\u6bd4\u8f83\u5927\u7684\u57fa\u91d1\uff0c\u5982\u6307\u6570\u57fa\u91d1;","title":"\u57fa\u91d1\u5b9a\u6295\u9002\u7528\u573a\u5408"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_6","text":"\u901a\u8fc7\u5b9a\u671f\u4e0d\u5b9a\u989d\u6295\u8d44\uff0c\u5b9e\u73b0\u56fa\u5b9a\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e70\u5165\u591a\uff0c\u9ad8\u4f4d\u4e70\u5165\u5c11\u7684\u7b56\u7565 \u5747\u7ebf\u7b56\u7565\u667a\u6295 \u8fd0\u7528\u79fb\u52a8\u5e73\u5747\u7ebfMA\u4f5c\u4e3a\u53c2\u8003\u6307\u6807\uff0c\u6765\u6307\u5bfc\u57fa\u91d1\u667a\u80fd\u5b9a\u6295\u7684\u7b56\u7565 \u52a8\u6001\u518d\u5e73\u8861\u7b56\u7565","title":"\u57fa\u91d1\u53d8\u989d\u5b9a\u6295"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_7","text":"","title":"\u4e03\u6b65\u5b9a\u6295\u7b56\u7565"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_8","text":"\u957f\u671f\u575a\u6301\u5b9a\u671f\u4e0d\u5b9a\u989d\u6295\u8d44 \u957f\u671f\u575a\u6301\u6b62\u76c8\u4e0d\u6b62\u635f\u6295\u8d44 \u53ea\u95ee\u8d35\u8d31\uff0c\u4e0d\u770b\u8d8b\u52bf \u8d8a\u8dcc\u8d8a\u4e70\uff0c\u8d8a\u6da8\u8d8a\u5356","title":"\u56db\u5927\u539f\u5219"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_9","text":"\u5168\u5929\u5019\u914d\u7f6e\u7b56\u7565\uff08\u6bcf\u4e00\u79cd\u7406\u8d22\u4ea7\u54c1\u90fd\u4e70\u4e00\u70b9\uff09 \u4e3b\uff1aA\u80a1\uff0c\u6e2f\u80a1\uff0c\u7f8e\u80a1 (0%-80%) \u526f\uff1a\u5370\u5ea6\u80a1\u5e02\uff0c\u4e1c\u76df\u80a1\u5e02\uff0c\u5fb7\u56fd\u80a1\u5e02 \u9ec4\u91d1+\u767d\u94f6\uff0c\u77f3\u6cb9+\u5927\u5b97\u5546\u54c1(0%-30%) \u8bf4\u660e\uff1a\u4e3b\u526f\u4e3a\u4e00\u7ec4\uff0cA\u80a1+\u5370\u5ea6\u80a1\u5e02\uff0c\u6e2f\u80a1+\u4e1c\u76df\u80a1\u5e02\uff0c\u7f8e\u80a1+\u5fb7\u56fd\u80a1\u5e02 \u4f4e\u4f30\u503c\u62e9\u65f6\u8f6e\u52a8\u7b56\u7565 \uff08\u5f00\u59cb\u5b9a\u6295\u65f6\u5206\u4f4d\u70b9\u5fc5\u987b\u4f4e\u4e8e40%\uff09 \u9009\u62e9\u4f4e\u4f30\u503c\u57fa\u91d1\u62e9\u65f6\u4e70\u5165\uff1b \u4f30\u503c\u5224\u65ad\uff1aPE\uff08\u5e02\u76c8\u7387\uff09\uff0cPB(\u5e02\u51c0\u7387)\uff1b\u5e02\u76c8\u7387\u8d85\u8fc750\u500d\u7684\u4e0d\u78b0\uff0c\u5e02\u76c8\u7387\u592a\u9ad8\uff0c\u4f30\u503c\u592a\u9ad8\u3002 \u4ee5\u81ea\u8eab\u5e02\u76c8\u7387\u4e3a\u9274\u6765\u5224\u65ad\u5e02\u76c8\u7387\u7684\u9ad8\u4f4e\uff0c\u5728\u5e02\u76c8\u7387\u7684\u5386\u53f2\u9ad8\u4f4d\u53ef\u4ee5\u629b\u51fa\u3002\uff08\u5206\u4f4d\u6cd5\uff09 \u9ec4\u91d1\u4f30\u503c\uff1a<1000\u7f8e\u5143/\u76ce\u53f8\uff0c\u4f4e\u4f30\uff1b1000\u7f8e\u5143-1500\u7f8e\u5143/\u76ce\u53f8\uff0c\u5408\u7406\u4f30\u503c; >1500\u7f8e\u5143/\u76ce\u53f8, \u9ad8\u4f30 \u77f3\u6cb9\u4f30\u503c\uff1a<35\u7f8e\u5143/\u6876, \u4f4e\u4f30\uff1b35\u7f8e\u5143-75\u7f8e\u5143/\u6876\uff0c\u5408\u7406\u4f30\u503c\uff0c>75\u7f8e\u5143/\u6876, \u9ad8\u4f30\u3002 \u4ef7\u503c\u5e73\u5747\u7b56\u7565 \u56fa\u5b9a\u6bcf\u6708\u6295\u5165\u7684\u5e02\u503c\uff0c\u4e0d\u591f\u8865\u9f50\uff0c\u591a\u4e86\u5356\u51fa \u6bd4\u5982\uff0c\u6bcf\u6708\u56fa\u5b9a\u6295\u516510000\u5143\uff0c\u7b2c\u4e8c\u4e2a\u6708\u6da8\u5230\u4e8612000\u5143\uff0c\u7b2c\u4e8c\u4e2a\u6708\u53ea\u9700\u5b9a\u62958000\u5143\uff1b\u76f8\u53cd\uff0c\u7b2c\u4e8c\u4e2a\u6708\u8dcc\u5230\u4e869000\u5143\uff0c\u7b2c\u4e8c\u4e2a\u6708\u9700\u8981\u5b9a\u629511000\u5143\uff1b\u6781\u7aef\u60c5\u51b5\uff0c\u7b2c\u4e8c\u4e2a\u6708\u6da8\u5230\u4e8622000\u5143\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u6708\u65e0\u9700\u5b9a\u6295\uff0c\u8fd8\u8981\u5356\u51fa2000\u5143\uff0c\u6b62\u76c8\u3002 \u7f51\u683c\u4ea4\u6613\u7b56\u7565 \u5f53\u67d0\u57fa\u91d1\u8fbe\u5230\u4e86\u8be5\u6b21\u5b9a\u6295\u8ba1\u5212\u6700\u521d\u8bbe\u5b9a\u7684\u76ee\u6807\u5b9a\u6295\u5e02\u503c\u4e4b\u540e\uff0c\u6682\u65f6\u5c31\u4e0d\u9700\u8981\u7ee7\u7eed\u5b9a\u6295\u4e86\uff0c\u53ef\u4ee5\u901a\u8fc7\u7f51\u683c\u4ea4\u6613\u6cd5\u8fdb\u884c\u6536\u5272\u3002 \u5355\u8fb9\u884c\u60c5\u4e2d\uff0c\u7f51\u683c\u5e94\u8be5\u653e\u5927\u4e00\u70b9\u3002 \u9707\u8361\u884c\u60c5\u4e2d\uff0c\u7f51\u683c\u5e94\u8be5\u6536\u5c0f\u4e00\u70b9\u3002 \u7f51\u683c\u8bbe\u7f6e\uff1a\u6700\u5927\u7f51\u683c\u8bbe\u7f6e\u4e3a20%\uff0c\u6700\u5c0f\u7f51\u683c\u4e3a3%\u3002 \u52a8\u6001\u518d\u5e73\u8861\u7b56\u7565","title":"\u4e94\u79cd\u5177\u4f53\u7684\u7b56\u7565"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_10","text":"\u5b8c\u6210\u98ce\u9669\u504f\u597d\u6d4b\u8bd5 \u5168\u9762\u7edf\u8ba1\u5bb6\u5ead\u8d22\u52a1\u4fe1\u606f \u505a\u597d\u5bb6\u5ead\u8d44\u4ea7\u914d\u7f6e\u65b9\u6848 \u63d0\u53d6\u751f\u6d3b\u7d27\u6025\u5907\u7528\u91d1 \u8d2d\u7f6e\u9002\u5408\u7684\u4fdd\u9669\u4ea7\u54c1 \u77ed\u671f\u8981\u7528\u94b1\u7684\u7559\u51fa \u957f\u671f\u4e0d\u7528\u7684\u94b1\u624d\u80fd\u505a\u957f\u671f\u6295\u8d44 \u8bbe\u8ba1\u5b58\u91cf\u8d44\u91d1\u5b9a\u6295\u8ba1\u5212 \u5168\u5929\u5019\u914d\u7f6e\u7b56\u7565\uff0c \u4f4e\u4f30\u503c\u62e9\u65f6\u8f6e\u52a8\u7b56\u7565 \u8ba1\u5212\u5b9a\u6295\u9636\u6bb5 \u5e03\u5c40\u5b9a\u6295\u9636\u6bb5 \u7ef4\u6301\u5b9a\u6295\u9636\u6bb5 \u8c03\u6574\u5b9a\u6295\u9636\u6bb5 \u672a\u6765\u4e00\u5e74\u5b8c\u6210\u5b58\u91cf\u57fa\u91d1\u7684\u5b9a\u6295 \u4ef7\u503c\u5e73\u5747\u7b56\u7565\uff0c\u5e03\u5c40\u5b9a\u6295\u9636\u6bb5 \u5bf9\u63d0\u524d\u5b8c\u6210\u5b9a\u6295\u7684\u57fa\u91d1\u8fdb\u884c\u7f51\u683c\u6536\u5272 \u7f51\u683c\u4ea4\u6613\u7b56\u7565\uff0c\u7ef4\u6301\u5b9a\u6295\u9636\u6bb5 \u8bbe\u7f6e\u589e\u91cf\u57fa\u91d1\u5b9a\u6295\u8ba1\u5212\uff08\u8fd8\u662f\u4ee5\u4e00\u5e74\u4e3a\u5468\u671f\uff09 \u52a8\u6001\u518d\u5e73\u8861\u7b56\u7565\uff0c\u8c03\u6574\u5b9a\u6295\u9636\u6bb5","title":"\u4e03\u4e2a\u64cd\u4f5c\u6b65\u9aa4"},{"location":"%E7%90%86%E8%B4%A2/%E5%9F%BA%E9%87%91%E7%90%86%E8%B4%A2/#_11","text":"\u63a8\u8350\u9009\u573a\u5185\u6307\u6570\uff0cETF, LOF, \u5206\u7ea7B\uff0c\u4e3b\u8981\u662f\u964d\u4f4e\u4ea4\u6613\u6210\u672c\u548c\u65b9\u4fbf\u64cd\u4f5c\u3002 \u6e2f\u80a1\uff1a\u6052\u751f\u6307\u6570\uff0cH\u80a1\u6307\u6570 \u7f8e\u80a1\uff1a\u6807\u666e500\u6307\u6570\u548c\u7eb3\u65af\u8fbe\u514b\u6307\u6570 A\u80a1\uff1a\u6caa\u6df1300\uff0c\u4e2d\u8bc1500 \u77f3\u6cb9\uff1a\u534e\u5b9d\u6cb9\u6c14\uff0c\u534e\u5b89\u77f3\u6cb9","title":"\u53ef\u6295\u6307\u6570"},{"location":"%E7%90%86%E8%B4%A2/%E7%99%BD%E6%89%8B%E8%B5%B7%E5%AE%B6%E7%9A%84%E7%99%BE%E4%B8%87%E5%AF%8C%E7%BF%81%E7%9A%84%E7%A7%98%E5%AF%86/","text":"\u5bcc\u4eba\u7684\u4e60\u60ef \u00b6 \u4ef7\u503c\u521b\u9020\u8005 \u8eab\u4e3a\u5458\u5de5\u65f6: \u603b\u662f\u8d85\u51fa\u9884\u671f\u7684\u5b8c\u6210\u5de5\u4f5c\u4efb\u52a1\uff0c\u4e3a\u516c\u53f8\u5e26\u6765\u8d85\u989d\u7684\u5229\u6da6\uff0c\u8ba9\u516c\u53f8\u4ed8\u51fa\u7684\u85aa\u6c34\u6210\u4e3a\u4e00\u9879\u9ad8\u56de\u62a5\u7684\u6295\u8d44 \u8eab\u4e3a\u4f01\u4e1a\u65f6: \u4e3a\u5ba2\u6237\u5e26\u6765*\u8d85\u9884\u671f*\u7684\u670d\u52a1\uff0c\u4e3a\u5ba2\u6237\u63d0\u4f9b\u65e0\u4e0e\u4f26\u6bd4\u7684\u4f53\u9a8c\uff0c\u63d0\u4f9b\u5de8\u5927\u7684\u4ef7\u503c\u3002 \u79ef\u6781\u7684\u5fc3\u6001: \u901a\u8fc7\u79ef\u6781\u4e3b\u52a8\u7684\u5fc3\u6001\uff0c\u4f60\u5c06\u81ea\u5df1\u7f6e\u4e8e\u6743\u529b\u548c\u9009\u62e9\u7684\u4f4d\u7f6e\u3002\u4f60\u638c\u63a7\u7740\u4e00 \u5207\uff0c\u5e76\u5c06\u91c7\u53d6\u884c\u52a8\uff0c\u5e26\u6765\u8d22\u5bcc\u548c\u6210\u529f\u3002\u7136\u800c\uff0c\u5f53\u4f60\u4ee5\u4e00\u79cd\u88ab\u52a8\u7684\u65b9\u5f0f\u884c\u52a8 \u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u4f60\u7684\u8d22\u52a1\u6c38\u8fdc\u4e0d\u4f1a\u5728\u4f60\u7684\u638c\u63a7\u4e4b\u4e2d \u627f\u62c5100%\u7684\u8d23\u4efb: \u613f\u610f\u4e3a\u81ea\u5df1\u7684\u6210\u7ee9\u548c\u8d22\u5bcc\u627f\u62c5100%\u7684\u8d23\u4efb\uff0c\u800c\u4e0d\u662f\u9009\u62e9\u63a5\u53d7\u53d7\u5bb3\u8005\u7684\u5fc3\u6001 \u5ef6\u8fdf\u7684\u6ee1\u8db3: \u6709\u8010\u5fc3\u7b49\u5f85\u66f4\u4e30\u5bcc\u7684\u672a\u6765\uff0c\u65e0\u8bba\u662f\u5728\u5546\u4e1a\u4e0a\u8fd8\u662f\u6295\u8d44\u4e0a\uff0c\u800c\u4e0d\u662f\u5173\u6ce8\u4e0e\u5373\u4f7f\u7684\u6ee1\u8db3\u611f\u3002 \u505a\u81ea\u5df1\u559c\u6b22\u7684\u4e8b: \u5bfb\u627e\u81ea\u5df1\u559c\u6b22\u7684\u4e8b\u3002 \u52aa\u529b\u5de5\u4f5c \u2192 \u8d5a\u5230\u8db3\u591f\u7684\u94b1 \u2192 \u505a\u6211\u559c\u6b22\u505a\u7684\u4e8b \u505a\u6211\u559c\u6b22\u505a\u7684\u4e8b \u2192 \u8d5a\u94b1 \u2192 \u7ee7\u7eed\u505a\u6211\u559c\u6b22\u505a\u7684\u4e8b \u4e3a\u4eba\u6b63\u76f4: \u5728\u8fd9\u4e2a\u4e16\u754c\u4e0a\uff0c\u5f88\u591a\u4eba\u90fd\u662f\u4e0d\u9053\u5fb7\u548c\u4e0d\u8bda\u5b9e\u7684\uff0c\u5efa\u7acb\u4f60\u7684\u8bda\u4fe1\u58f0\u8a89\uff0c\u4f60\u4f1a\u6709\u6e90\u6e90\u4e0d\u65ad\u7684\u5ba2\u6237\u3001 \u4f9b\u5e94\u5546\u3001 \u6295\u8d44\u8005\u548c\u5546\u4e1a\u4f19\u4f34 \u3002 \u767e\u5206\u767e\u6295\u5165: \u6210\u4e3a\u767e\u4e07\u5bcc\u7fc1\u8fd9\u4ef6\u4e8b\u662f\u4e00\u5b9a\u8981\u53d1\u751f\u7684\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u201c\u613f\u671b\u201d\u3002 \u628a\u5931\u8d25\u53d8\u6210\u6210\u529f\u7684\u80fd\u529b: \u5728\u5931\u8d25\u4e2d\u5b66\u4e60\u7ecf\u9a8c\uff0c\u63a5\u6536\u53cd\u9988\uff0c\u8c03\u6574\u7b56\u7565\u3002 \u6210\u529f\u662f\u826f\u597d\u5224\u65ad\u7684\u7ed3\u679c\u3002\u826f\u597d\u7684\u5224\u65ad\u529b\u662f\u7ecf\u9a8c\u7684\u7ed3\u679c\u3002\u7ecf\u9a8c\u662f\u9519\u8bef\u5224\u65ad\u7684\u7ed3\u679c \u5c0a\u91cd\u548c\u70ed\u7231\u91d1\u94b1","title":"\u767d\u624b\u8d77\u5bb6\u7684\u767e\u4e07\u5bcc\u7fc1\u7684\u79d8\u5bc6"},{"location":"%E7%90%86%E8%B4%A2/%E7%99%BD%E6%89%8B%E8%B5%B7%E5%AE%B6%E7%9A%84%E7%99%BE%E4%B8%87%E5%AF%8C%E7%BF%81%E7%9A%84%E7%A7%98%E5%AF%86/#_1","text":"\u4ef7\u503c\u521b\u9020\u8005 \u8eab\u4e3a\u5458\u5de5\u65f6: \u603b\u662f\u8d85\u51fa\u9884\u671f\u7684\u5b8c\u6210\u5de5\u4f5c\u4efb\u52a1\uff0c\u4e3a\u516c\u53f8\u5e26\u6765\u8d85\u989d\u7684\u5229\u6da6\uff0c\u8ba9\u516c\u53f8\u4ed8\u51fa\u7684\u85aa\u6c34\u6210\u4e3a\u4e00\u9879\u9ad8\u56de\u62a5\u7684\u6295\u8d44 \u8eab\u4e3a\u4f01\u4e1a\u65f6: \u4e3a\u5ba2\u6237\u5e26\u6765*\u8d85\u9884\u671f*\u7684\u670d\u52a1\uff0c\u4e3a\u5ba2\u6237\u63d0\u4f9b\u65e0\u4e0e\u4f26\u6bd4\u7684\u4f53\u9a8c\uff0c\u63d0\u4f9b\u5de8\u5927\u7684\u4ef7\u503c\u3002 \u79ef\u6781\u7684\u5fc3\u6001: \u901a\u8fc7\u79ef\u6781\u4e3b\u52a8\u7684\u5fc3\u6001\uff0c\u4f60\u5c06\u81ea\u5df1\u7f6e\u4e8e\u6743\u529b\u548c\u9009\u62e9\u7684\u4f4d\u7f6e\u3002\u4f60\u638c\u63a7\u7740\u4e00 \u5207\uff0c\u5e76\u5c06\u91c7\u53d6\u884c\u52a8\uff0c\u5e26\u6765\u8d22\u5bcc\u548c\u6210\u529f\u3002\u7136\u800c\uff0c\u5f53\u4f60\u4ee5\u4e00\u79cd\u88ab\u52a8\u7684\u65b9\u5f0f\u884c\u52a8 \u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u4f60\u7684\u8d22\u52a1\u6c38\u8fdc\u4e0d\u4f1a\u5728\u4f60\u7684\u638c\u63a7\u4e4b\u4e2d \u627f\u62c5100%\u7684\u8d23\u4efb: \u613f\u610f\u4e3a\u81ea\u5df1\u7684\u6210\u7ee9\u548c\u8d22\u5bcc\u627f\u62c5100%\u7684\u8d23\u4efb\uff0c\u800c\u4e0d\u662f\u9009\u62e9\u63a5\u53d7\u53d7\u5bb3\u8005\u7684\u5fc3\u6001 \u5ef6\u8fdf\u7684\u6ee1\u8db3: \u6709\u8010\u5fc3\u7b49\u5f85\u66f4\u4e30\u5bcc\u7684\u672a\u6765\uff0c\u65e0\u8bba\u662f\u5728\u5546\u4e1a\u4e0a\u8fd8\u662f\u6295\u8d44\u4e0a\uff0c\u800c\u4e0d\u662f\u5173\u6ce8\u4e0e\u5373\u4f7f\u7684\u6ee1\u8db3\u611f\u3002 \u505a\u81ea\u5df1\u559c\u6b22\u7684\u4e8b: \u5bfb\u627e\u81ea\u5df1\u559c\u6b22\u7684\u4e8b\u3002 \u52aa\u529b\u5de5\u4f5c \u2192 \u8d5a\u5230\u8db3\u591f\u7684\u94b1 \u2192 \u505a\u6211\u559c\u6b22\u505a\u7684\u4e8b \u505a\u6211\u559c\u6b22\u505a\u7684\u4e8b \u2192 \u8d5a\u94b1 \u2192 \u7ee7\u7eed\u505a\u6211\u559c\u6b22\u505a\u7684\u4e8b \u4e3a\u4eba\u6b63\u76f4: \u5728\u8fd9\u4e2a\u4e16\u754c\u4e0a\uff0c\u5f88\u591a\u4eba\u90fd\u662f\u4e0d\u9053\u5fb7\u548c\u4e0d\u8bda\u5b9e\u7684\uff0c\u5efa\u7acb\u4f60\u7684\u8bda\u4fe1\u58f0\u8a89\uff0c\u4f60\u4f1a\u6709\u6e90\u6e90\u4e0d\u65ad\u7684\u5ba2\u6237\u3001 \u4f9b\u5e94\u5546\u3001 \u6295\u8d44\u8005\u548c\u5546\u4e1a\u4f19\u4f34 \u3002 \u767e\u5206\u767e\u6295\u5165: \u6210\u4e3a\u767e\u4e07\u5bcc\u7fc1\u8fd9\u4ef6\u4e8b\u662f\u4e00\u5b9a\u8981\u53d1\u751f\u7684\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u201c\u613f\u671b\u201d\u3002 \u628a\u5931\u8d25\u53d8\u6210\u6210\u529f\u7684\u80fd\u529b: \u5728\u5931\u8d25\u4e2d\u5b66\u4e60\u7ecf\u9a8c\uff0c\u63a5\u6536\u53cd\u9988\uff0c\u8c03\u6574\u7b56\u7565\u3002 \u6210\u529f\u662f\u826f\u597d\u5224\u65ad\u7684\u7ed3\u679c\u3002\u826f\u597d\u7684\u5224\u65ad\u529b\u662f\u7ecf\u9a8c\u7684\u7ed3\u679c\u3002\u7ecf\u9a8c\u662f\u9519\u8bef\u5224\u65ad\u7684\u7ed3\u679c \u5c0a\u91cd\u548c\u70ed\u7231\u91d1\u94b1","title":"\u5bcc\u4eba\u7684\u4e60\u60ef"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/","text":"\u80a1\u7968\u6295\u8d44\u548c\u7092\u80a1 \u00b6 \u80a1\u7968\u6295\u8d44\uff1a\u957f\u671f\u884c\u4e3a\uff0c\u4f17\u4eba\u4e00\u8d77\u628a\u86cb\u7cd5\u505a\u5927\u7684\uff0c\u5206\u5f97\u66f4\u591a\u7684\u6536\u76ca \u7092\u80a1\uff1a\u77ed\u671f\u7684\u6295\u673a\u884c\u4e3a\uff0c\u56fa\u5b9a\u5927\u5c0f\u7684\u86cb\u7cd5\uff0c\u83b7\u5f97\u7684\u56de\u62a5\u662f\u522b\u4eba\u7684\u8d44\u91d1\uff0c 7\u4e8f2\u5e731\u8d5a \u80a1\u7968\u5e02\u573a \u00b6 \u4e00\u7ea7\u5e02\u573a: \u76f4\u63a5\u5bf9\u6295\u8d44\u8005\u53d1\u884c\u80a1\u7968\u7b79\u96c6\u8d44\u91d1\u7684\u5e02\u573a \u4e8c\u7ea7\u5e02\u573a\uff1b\u76f8\u4e92\u8f6c\u8ba9\u80a1\u7968\u7684\u5e02\u573a \u4e0a\u5e02\u516c\u53f8\uff1a\u80fd\u5728\u80a1\u7968\u4ea4\u6613\u6240\u6302\u724c\u4ea4\u6613\u7684\u516c\u53f8 \u80a1\u7968\u7684\u7279\u70b9 \u00b6 \u80a1\u7968\u6295\u8d44\u4e0d\u540c\u507f\u8fd8 \u80a1\u7968\u5177\u6709\u9ad8\u6d41\u52a8\u6027 \u80a1\u7968\u5177\u6709\u9ad8\u6536\u76ca\u6027 \u80a1\u7968\u5177\u6709\u9ad8\u98ce\u9669\u6027 \u80a1\u7968\u5177\u6709\u5f3a\u53c2\u4e0e\u6027 \u80a1\u7968\u6743\u5229\u6c38\u4e45\u6709\u6548 \u80a1\u7968\u6307\u6570 \u00b6 \u80a1\u7968\u4ef7\u683c\u6307\u6570 \u8fd0\u7528\u7b80\u5355\u7684\u7edf\u8ba1\u65b9\u6cd5\u7f16\u5236\u800c\u6210\u7528\u6765\u53cd\u6620\u5e02\u573a\u603b\u4f53\u4ef7\u683c\u6216\u67d0\u7c7b\u80a1\u7968\u4ef7\u683c\u53d8\u52a8\u8d70\u52bf\u3002 \u4e0a\u8bc1\u6307\u6570 \u00b6 \u5305\u542b\u4e0a\u4ea4\u6240\u7684\u5168\u90e8\u80a1\u7968\uff0c\u53cd\u6620\u4e0a\u4ea4\u6240\u4e0a\u5e02\u80a1\u7968\u4ef7\u683c\u7684\u6574\u4f53\u53d8\u52a8\u60c5\u51b5 1990\u5e7412\u670819\u65e5\uff0c\u4e0a\u8bc1\u6307\u6570100\u70b9 \u6df1\u5733\u6307\u6570 \u00b6 \u6df1\u5733\u7efc\u6307\uff0c\u7531\u6df1\u5733\u8bc1\u5238\u4ea4\u6613\u6240\u7f16\u5236\u5176\u6837\u672c\u4e3a\u6240\u6709\u5728\u6df1\u5733\u8bc1\u5238\u4ea4\u6613\u6240\u6302\u724c\u4e0a\u5e02\u7684\u80a1\u7968 \u6df1\u5733\u6210\u6307 \u00b6 \u6df1\u5733\u6210\u5206\u80a1\u6307\u6570\uff0c\u6df1\u6210\u6307\uff0c\u53ea\u9009\u53d6\u4e86\u6df1\u4ea4\u6240\u90e8\u5206\u80a1\u7968\uff0c\u4ee3\u8868\u6bd4\u8f83\u597d\u4e00\u70b9\u7684\u80a1\u7968 \u6caa\u6df1300\u6307\u6570 \u00b6 2005\u5e744\u67088\u65e5\u6caa\u6df1\u4ea4\u6613\u6240\u8054\u5408\u53d1\u5e03\u7684\u7b2c\u4e00\u53ea\u6a2a\u8de8\u4e24\u5e02\u7684\u80a1\u7968\u6307\u6570\u3002 \u80a1\u7968\u7684\u5206\u7c7b \u00b6 \u6309\u7167\u5229\u6da6\u5206\u914d\u7684\u5148\u540e\u987a\u5e8f\u5206\u7c7b \u666e\u901a\u80a1\uff1a\u6839\u636e\u516c\u53f8\u7ecf\u8425\u6548\u7387\u5747\u7b49\u5206\u914d\u80a1\u4e1c\u6743\u76ca\uff0c\u76ee\u524d\u5728\u6caa\u5e02\u548c\u6df1\u5e02\u4e0a\u5e02\u7684\u80a1\u7968\u90fd\u662f\u666e\u901a\u80a1 \u4f18\u5148\u80a1\uff1a\u4f18\u5148\u80a1\u7684\u80a1\u4e1c\u5bf9\u516c\u53f8\u8d44\u4ea7\u5229\u6da6\u5206\u914d\u4eab\u6709\u4f18\u5148\u6743 \u6309\u7167\u80a1\u7968\u7684\u53d1\u884c\u65b9\u5f0f\u5206\u7c7b A\u80a1\uff1a\u4eba\u6c11\u5e01\u666e\u901a\u80a1\u7968\uff0c\u5883\u5185\u4e0a\u5e02\u516c\u53f8\u53d1\u884c\u4ee5\u4eba\u6c11\u5e01\u4e3a\u8d27\u5e01\u8fdb\u884c\u4ea4\u6613\u7684\u80a1\u7968 B\u80a1\uff1a\u4eba\u6c11\u5e01\u7279\u79cd\u80a1\u7968\uff0c\u5883\u5185\u4e0a\u5e02\u516c\u53f8\u53d1\u884c\u4ee5\u4eba\u6c11\u5e01\u8868\u660e\u9762\u503c\u4f46\u7528\u5916\u5e01\u4ea4\u6613\u7684\u80a1\u7968\uff0c\u6caa\u5e02\u7528\u7f8e\u5143\uff0c\u6df1\u5e02\u7528\u6e2f\u5e01 H\u80a1\uff1a\u5728\u4e2d\u56fd\u5927\u9646\u5883\u5185\u6ce8\u518c\uff0c\u800c\u5728\u9999\u6e2f\u4e0a\u5e02\u4ea4\u6613\u7684\u80a1\u7968 \u6309\u7167\u4e0a\u5e02\u516c\u53f8\u6240\u5c5e\u7684\u884c\u4e1a\u6765\u5212\u5206 \u91d1\u878d\u677f\u5757\uff0c\u5de5\u4e1a\u677f\u5757\u3002\u3002\u3002 \u6309\u7167\u4e0a\u5e02\u516c\u53f8\u7684\u7ecf\u8425\u4e1a\u7ee9\u6765\u5212\u5206 \u84dd\u7b79\u80a1\uff1a\u7ecf\u8425\u4e1a\u7ee9\u8f83\u597d\uff0c\u7a33\u5b9a\u6027\u8f83\u9ad8\u73b0\u91d1\u80a1\u5229\u8f83\u4e30\u539a\u7684\u516c\u53f8\u80a1\u7968 \u7ee9\u5dee\u80a1\uff1a\u6307\u4e1a\u7ee9\u8f83\u5dee\u7684\u80a1\u7968\uff0c\u8fd9\u7c7b\u80a1\u7968\u4ef7\u683c\u5f80\u5f80\u8868\u73b0\u4e0d\u4f73 ST\u80a1\uff1aSpecial Treatment\uff0cST\u4ee3\u8868\u8fde\u7eed\u4e24\u5e74\u4e8f\u635f *ST\u80a1\uff1a\u8fde\u7eed\u4e09\u5e74\u4e8f\u635f \u3002\u3002\u3002 \u9884\u6d4b\u80a1\u5e02\u7684\u4e24\u4e2a\u6c34\u6676\u7403 \u00b6 \u57fa\u672c\u9762\u5206\u6790\u7406\u8bba, \u4ef7\u503c\u6295\u8d44\u6d41\u6d3e \u00b6 \u5e95\u5c42\u8ba4\u77e5\u6846\u67b6\uff1a\u575a\u5b9e\u57fa\u7840\u7406\u8bba \u575a\u5b9e\u57fa\u7840\u7406\u8bba\u8ba4\u4e3a\uff0c\u6bcf\u4e00\u4e2a\u6295\u8d44\u5de5\u5177\uff0c\u65e0\u8bba\u662f\u80a1\u7968\u3001\u503a\u5238\u8fd8\u662f\u623f\u4ea7\uff0c\u90fd\u6709\u4e00\u4e2a\u5185\u5728\u4ef7\u503c\u7684\u575a\u5b9e\u57fa\u7840\uff0c\u6211\u4eec\u901a\u8fc7\u4ed4\u7ec6\u5206\u6790\u8fd9\u4e2a\u8d44\u4ea7\u7684\u73b0\u72b6\u548c\u524d\u666f\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u5176\u5185\u5728\u4ef7\u503c\uff0c\u5f53\u5e02\u573a\u4ef7\u503c\u4f4e\u4e8e\u505a\u4e3a\u575a\u5b9e\u57fa\u7840\u7684\u5185\u5728\u4ef7\u503c\u65f6\uff0c\u4e70\u5165\u673a\u4f1a\u5c31\u51fa\u73b0\u4e86\uff0c\u53cd\u4e4b\uff0c\u5356\u51fa\u673a\u4f1a\u5c31\u51fa\u73b0\u4e86 \u6280\u672f\u5206\u6790\u7406\u8bba\uff0c\u8d8b\u52bf\u6295\u8d44\u6d41\u6d3e \u00b6 \u5e95\u5c42\u8ba4\u77e5\u6846\u67b6\uff1a\u7a7a\u4e2d\u697c\u9601\u7406\u8bba \u7a7a\u4e2d\u697c\u9601\u7406\u8bba\u8ba4\u4e3a\uff0c\u4e13\u4e1a\u6295\u8d44\u8005\u4e0d\u613f\u5c06\u7cbe\u529b\u7528\u4e8e\u4f30\u8ba1\u4f01\u4e1a\u7684\u5185\u5728\u4ef7\u503c\uff0c\u7b2c\u4e00\u662f\u56e0\u4e3a\u672a\u6765\u5145\u6ee1\u4e86\u4e0d\u786e\u5b9a\u6027\uff0c\u54ea\u6015\u4e13\u4e1a\u4eba\u58eb\u4ed8\u51fa\u4e86\u5de8\u5927\u7684\u52b3\u52a8\uff0c\u4f01\u4e1a\u7684\u771f\u662f\u5185\u5728\u4ef7\u503c\uff0c\u4e5f\u5f88\u96be\u51c6\u786e\u8bc4\u4f30\uff1b\u7b2c\u4e8c\uff0c\u5c31\u7b97\u8bc4\u4f30\u51c6\u786e\uff0c\u73b0\u5728\u80a1\u4ef7\u88ab\u4f4e\u4f30\u4e86\uff0c\u4e5f\u4e0d\u786e\u5b9a\u4f55\u65f6\u4f1a\u56de\u5f52\u4ef7\u503c\u3002\u6f2b\u957f\u7684\u7b49\u5f85\u672c\u8eab\u5c31\u5145\u6ee1\u4e86\u4e0d\u786e\u5b9a\u6027\u548c\u98ce\u9669\uff0c\u800c\u806a\u660e\u7684\u6295\u8d44\u8005\u4e0d\u4f1a\u82b1\u66f4\u5927\u7684\u7cbe\u529b\u53bb\u7814\u7a76\u4f01\u4e1a\u7684\u5185\u5728\u4ef7\u503c\uff0c\u800c\u4f1a\u82b1\u65f6\u95f4\u53bb\u7814\u7a76\u5176\u4ed6\u6295\u8d44\u8005\u672a\u6765\u7684\u6295\u8d44\u884c\u4e3a\uff0c\u53bb\u5206\u6790\u4ed6\u4eec\u5728\u4e50\u89c2\u65f6\u5982\u4f55\u5c06\u81ea\u5df1\u7684\u5e0c\u671b\u5efa\u6210\u7a7a\u4e2d\u697c\u9601\uff0c\u806a\u660e\u7684\u6295\u8d44\u8005\u4f1a\u4f30\u8ba1\u51fa\u4ec0\u4e48\u6837\u7684\u6295\u8d44\u6700\u5bb9\u6613\u88ab\u5927\u4f17\u60c5\u7eea\u5806\u79ef\u8d77\u4e00\u5ea7\u7a7a\u4e2d\u697c\u9601\uff0c\u7136\u540e\u5728\u5927\u4f17\u5f00\u59cb\u884c\u52a8\u4e4b\u524d\uff0c\u6211\u73b0\u884c\u4e70\u5165\uff0c\u5360\u636e\u5e02\u573a\u5148\u673a\uff0c\u5750\u7b49\u5927\u5bb6\u628a\u80a1\u4ef7\u63a8\u4e0a\u53bb\uff0c\u6700\u7ec8\u5efa\u6210\u7a7a\u4e2d\u697c\u9601 \u80a1\u7968\u5206\u6790 \u00b6 \u57fa\u672c\u9762 \u00b6 \u5bf9\u5e94\u575a\u5b9e\u57fa\u7840\u7406\u8bba \u5b8f\u89c2\uff1a \u80a1\u5e02\u7684\u8d70\u52bf\u548c\u53d8\u5316\u7531\u56fd\u5bb6\u7ecf\u6d4e\u53d1\u5c55\u6c34\u5e73\u548c\u7ecf\u6d4e\u7684\u666f\u6c14\u72b6\u6001\u51b3\u5b9a \u80a1\u4ef7\u5e38\u88ab\u770b\u4f5c\u5b8f\u89c2\u7ecf\u6d4e\u7684\u6674\u96e8\u8868 \u5229\u7387\uff1a\u5f71\u54cd\u7740\u516c\u53f8\u878d\u8d44\u7684\u96be\u5ea6\uff0c\u56fd\u5bb6\u4e0a\u8c03\u5229\u7387\uff0c\u5b58\u6b3e\u5229\u7387\u4e0a\u5347\uff0c\u4eba\u4eec\u613f\u610f\u628a\u94b1\u5b58\u94f6\u884c\uff0c\u5c31\u4e0d\u592a\u613f\u610f\u53bb\u505a\u98ce\u9669\u66f4\u9ad8\u7684\u80a1\u7968\u6295\u8d44\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u4f1a\u6709\u4e00\u90e8\u5206\u8d44\u91d1\uff0c\u4ece\u80a1\u5e02\u91cc\u62bd\u8d70\uff0c\u5bfc\u81f4\u5e02\u573a\u8d44\u91d1\u7d27\u7f3a\uff0c\u5c31\u4f1a\u5bf9\u80a1\u4ef7\u9020\u6210\u4e00\u5b9a\u7684\u8d1f\u9762\u5f71\u54cd\uff0c\u540c\u65f6\uff0c\u7531\u4e8e\u5229\u6da6\u4e0a\u5347\uff0c\u4f01\u4e1a\u501f\u94b1\u7684\u6210\u672c\u4e5f\u63d0\u9ad8\u4e86\uff0c\u610f\u5473\u7740\u4e0a\u5e02\u516c\u53f8\u7684\u7ecf\u8425\u6210\u672c\u4e0a\u5347\u4e86\uff0c\u5229\u6da6\u76f8\u5bf9\u5c31\u4f1a\u51cf\u5c11\uff0c\u4e5f\u662f\u4f1a\u5bfc\u81f4\u80a1\u7968\u4ef7\u683c\u6709\u6240\u4e0b\u8dcc\u3002 \u901a\u8d27\u81a8\u80c0\uff1a\u901a\u8d27\u81a8\u80c0\u4e5f\u4f1a\u5bfc\u81f4\u80a1\u5e02\u4e0a\u6da8\uff0c\u4f46\u662f\u8fd9\u662f\u7531\u4e8e\u589e\u53d1\u7684\u8d27\u6bd4\u5bfc\u81f4\u7684\u4e0a\u6da8\uff0c\u5355\u7eaf\u6492\u94b1\uff0c\u80a1\u5e02\u4e0a\u6da8\u662f\u7eaf\u7cb9\u7684\u6ce1\u6cab\uff0c\u4e00\u65e6\u53d1\u94b1\u901f\u5ea6\u53d8\u6162\u4e86\uff0c\u4e0d\u4f46\u80a1\u5e02\u8981\u5d29\u76d8\uff0c\u5b9e\u4f53\u7ecf\u6d4e\u4e5f\u4f1a\u4ea7\u751f\u8fde\u9501\u5371\u673a\u3002 \u5fae\u89c2\uff1a \u516c\u53f8\u7684\u8d22\u52a1\u72b6\u51b5\uff0c\u5e02\u573a\u7ade\u4e89\u683c\u5c40\uff0c\u7ecf\u8425\u7ba1\u7406\u4f53\u5236\u7b49\u5404\u65b9\u9762\u60c5\u51b5\u5f71\u54cd\u7740\u516c\u53f8\u7684\u80a1\u4ef7\u3002 \u4ef7\u503c\u6295\u8d44\uff1a\u80a1\u7968\u957f\u671f\u6295\u8d44\u4ef7\u503c\u7684\u552f\u4e00\u51b3\u5b9a\u56e0\u7d20\uff0c\u5c31\u662f\u4f01\u4e1a\u7684\u57fa\u672c\u9762\uff0c\u57fa\u672c\u9762\u662f\u4f01\u4e1a\u589e\u957f\u7684\u6839\u672c\u6027\u7684\u5185\u751f\u52a8\u529b\uff0c\u6bcf\u4e2a\u4ef7\u503c\u6295\u8d44\u8005\u5728\u9009\u62e9\u80a1\u7968\u505a\u4ef7\u503c\u6295\u8d44\u65f6\uff0c\u90fd\u9700\u8981\u53bb\u5f7b\u5e95\u7684\u5206\u6790\u4f01\u4e1a\u7684\u57fa\u672c\u9762\uff0c\u4f01\u4e1a\u5b58\u5728\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u76c8\u5229\uff0c\u6295\u8d44\u8005\u6700\u5927\u7684\u5173\u6ce8\u70b9\u4e5f\u5e94\u8be5\u662f\u5728\u4f01\u4e1a\u7684\u76c8\u5229\u72b6\u51b5\u4e0a\uff0c\u6295\u8d44\u80a1\u7968\u6700\u5927\u7684\u76ee\u6807\u5c31\u662f\u5e94\u8be5\u53bb\u5bfb\u627e\u90a3\u4e9b\u6700\u80fd\u591f\u8d5a\u94b1\u7684\u4f01\u4e1a\uff0c\u5173\u952e\u662f\u5c06\u6765\u4e5f\u80fd\u7ee7\u7eed\u8d5a\u5927\u94b1\uff0c\u800c\u4e14\u8d5a\u7684\u94b1\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u7136\u540e\u6295\u8d44\u8005\u4ee5\u5408\u7406\u7684\u6216\u8005\u4f4e\u4f30\u7684\u4ef7\u683c\u4e70\u5165 \u5224\u65ad\u4f01\u4e1a\u7684\u8d5a\u94b1\u80fd\u529b\uff1a ROE\uff08\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\uff09 \u516c\u53f8\u7a0e\u540e\u5229\u6da6\u9664\u4ee5\u51c0\u8d44\u4ea7\u5f97\u5230\u7684\u767e\u5206\u6bd4\uff0c\u6307\u6807\u503c\u8d8a\u9ad8\uff0c\u8bf4\u660e\u6295\u8d44\u6536\u76ca\u8d8a\u9ad8\uff0cROE\u8d8a\u9ad8\uff0c\u8bf4\u660e\u4f01\u4e1a\u7684\u8d5a\u94b1\u80fd\u529b\u8d8a\u5f3a\uff0c\u7ecf\u8425\u4e1a\u7ee9\u8d8a\u597d\u3002 \u6839\u636e\u6295\u8d44\u754c\u4f9b\u8ba4\u7684\u6807\u51c6\uff0c\u4e00\u5bb6\u516c\u53f8\u5982\u679c\u5e38\u5e74\u7684ROE\u4fdd\u6301\u572815%\u4ee5\u4e0a\uff0c\u5c31\u53ef\u4ee5\u7b97\u662f\u4e00\u4e2a\u597d\u5b66\u751f\u4e86\uff0c\u5982\u679cROE\u8fbe\u5230\u4e8620%\u4ee5\u4e0a\uff0c\u90a3\u57fa\u672c\u4e0a\u5c31\u662f\u5b66\u9738\u7ea7\u522b\u4e86 ROE = \u51c0\u5229\u6da6 / \u51c0\u8d44\u4ea7 \u51c0\u8d44\u4ea7 = \u603b\u8d44\u4ea7 - \u603b\u8d1f\u503a PE\uff08\u5e02\u76c8\u7387\uff09 \u4ee3\u8868\u5355\u4f4d\u76c8\u5229\u6295\u8d44\u8005\u4ed8\u51fa\u7684\u4ee3\u4ef7\u6709\u591a\u9ad8\uff0c\u5e02\u76c8\u7387\u5c31\u662f\u9700\u8981\u591a\u5c11\u5e74\u624d\u80fd\u6536\u56de\u6211\u4eec\u7684\u6295\u8d44 \u7528\u6765\u8861\u91cf\u80a1\u4ef7\u662f\u88ab\u9ad8\u4f30\u8fd8\u662f\u4f4e\u4f30 PE = \u6bcf\u80a1\u5e02\u4ef7 / \u6bcf\u80a1\u51c0\u6536\u76ca \u8d22\u52a1\u72b6\u51b5\uff1a\u516c\u53f8\u7684\u603b\u8d44\u4ea7 = \u6240\u6709\u8005\u6743\u76ca\uff08\u80a1\u4e1c\u6295\u5165\u7684\u94b1\uff09+ \u8d1f\u503a\uff08\u516c\u53f8\u5411\u94f6\u884c\u501f\u7684\u94b1\uff09 \u8d1f\u503a\u7ecf\u8425\uff1a \u597d\u5904\uff1a\u653e\u5927\u7ecf\u8425\u6760\u6746\uff0c\u6709\u51cf\u7a0e\u4f5c\u7528 \u574f\u5904\uff1a\u964d\u4f4e\u4f01\u4e1a\u7684\u7a33\u5b9a\u6027 \u4e00\u822c\u4f01\u4e1a\u7684\u8d44\u4ea7\u8d1f\u503a\u7387\u572840%-60%\u4e4b\u95f4\uff0c\u662f\u6bd4\u8f83\u5408\u7406\u7684 \u4f01\u4e1a\u6d3b\u52a8\uff1b \u51c0\u73b0\u91d1\u6d41\uff1a\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4f01\u4e1a\u7ecf\u8425\uff0c\u6295\u8d44\u548c\u878d\u8d44\u6d3b\u52a8\u7684\u73b0\u91d1\u6d41\u5165\u548c\u6d41\u51fa\u7684\u5dee\u989d \u9009\u62e9\u4f01\u4e1a\u65f6\uff0c\u6211\u4eec\u4e0d\u5149\u8981\u6c42\u4f01\u4e1a\u7684\u73b0\u91d1\u6d41\u4e3a\u6b63\uff0c\u66f4\u91cd\u8981\u7684\u662f\u4e00\u5b9a\u8981\u6c42\u4f01\u4e1a\u7684\u7ecf\u8425\u73b0\u91d1\u6d41\u4e3a\u6b63\uff0c\u5982\u679c\u4e00\u5bb6\u4f01\u4e1a\u7684\u7ecf\u8425\u73b0\u91d1\u6d41\u4e3a\u8d1f\u6570\uff0c\u4ee3\u8868\u4e00\u5bb6\u4f01\u4e1a\u81ea\u8eab\u7684\u7ecf\u8425\u5b58\u5728\u95ee\u9898\u3002**\u4f01\u4e1a\u53ef\u4ee5\u6ca1\u6709\u5229\u6da6\uff0c\u4f46\u4e07\u4e07\u4e0d\u80fd\u6ca1\u6709\u73b0\u91d1\u6d41 ** \u4e2d\u89c2\u5206\u6790 \u5bf9\u4f01\u4e1a\u6240\u5904\u7684\u884c\u4e1a\u8fdb\u884c\u5206\u6790 \u884c\u4e1a\u5206\u6790\u8981\u7d20\uff1a \u884c\u4e1a\u662f\u5426\u5177\u6709\u5468\u671f\u6027 \u5f3a\u5468\u671f\u6027\u884c\u4e1a\uff1a\u5982\u94a2\u94c1\u3001\u7164\u70ad\u539f\u6750\u6599\u884c\u4e1a\uff0c\u8239\u8236\u673a\u68b0\u3001\u91d1\u878d\u8bc1\u5238 \u5f31\u5468\u671f\u6027\u884c\u4e1a\uff1a\u98df\u54c1\u3001\u5bb6\u7535\u3001\u5a31\u4e50\u3001\u533b\u836f\u884c\u4e1a \u884c\u4e1a\u662f\u5426\u5177\u6709\u6210\u957f\u6027\uff1a\u884c\u4e1a\u662f\u5426\u9971\u548c \u751f\u5b58\u73af\u5883\u662f\u5426\u6fc0\u70c8 \u5c3d\u91cf\u9009\u62e9\u4ea7\u54c1\u548c\u6a21\u5f0f\u7b80\u5355\u4e00\u773c\u5c31\u80fd\u770b\u61c2\u7684\u516c\u53f8 \u7ade\u4e89\u5206\u6790 \u6838\u5fc3\u7ade\u4e89\u529b \u4f01\u4e1a\u4f18\u79c0\u7ba1\u7406\u5c42 \u8bda\u4fe1\uff0c\u656c\u4e1a\uff0c\u793e\u4f1a\u8d23\u4efb \u8d22\u52a1\u62a5\u544a\uff1a \u7ba1\u7406\u8005\u5b9a\u671f\u5411\u80a1\u4e1c\u63d0\u4ea4\u6210\u7ee9\u5355\uff0c\u62a5\u544a\u516c\u53f8\u7684\u8d22\u52a1\u72b6\u51b5\u548c\u7ecf\u8425\u6210\u679c\uff0c\u662f\u4e86\u89e3\u4f01\u4e1a\u7684\u4fe1\u606f\u7a97\u53e3 \u8d44\u4ea7\u8d1f\u503a\u8868\uff1a \u76ee\u524d\u4f01\u4e1a\u7684\u53ef\u7528\u8d44\u6e90 \u8d44\u4ea7\uff1a\u4f01\u4e1a\u80fd\u6709\u63a7\u5236\u7684\u9884\u671f\u4f1a\u7ed9\u4f01\u4e1a\u5e26\u6765\u6536\u76ca\u7684\u4e1c\u897f \u6d41\u52a8\u6027\u8d44\u4ea7\uff1a\u73b0\u91d1\u6216\u8005\u53d8\u73b0\u80fd\u529b\u8f83\u5f3a\u7684\u8d44\u4ea7 \u975e\u6d41\u52a8\u6027\u8d44\u4ea7\uff1a\u77ed\u671f\u5185\u4e0d\u6253\u7b97\u53d8\u73b0\u6216\u8005\u53d8\u73b0\u80fd\u529b\u8f83\u5dee\u7684\u8d44\u4ea7 \u5e94\u6536\u8d26\u6b3e\uff1a\u5e94\u6536\u8d26\u6b3e\u8d8a\u591a\uff0c\u4f01\u4e1a\u8bdd\u8bed\u6743\u8d8a\u4f4e\uff0c\u6709\u7ade\u4e89\u529b\u7684\u4f01\u4e1a\u901a\u5e38\u8868\u73b0\u4e3a\u5e94\u6536\u8d26\u6b3e\u5f88\u5c11\uff0c\u751a\u81f3\u6ca1\u6709\uff0c\u800c\u9884\u6536\u8d26\u6b3e\u8f83\u591a \u6240\u6709\u8005\u6743\u76ca \u5b9e\u6536\u8d44\u672c\uff1a\u4e00\u822c\u662f\u6307\u516c\u53f8\u6ce8\u518c\u65f6\u7684\u8d44\u672c \u8d44\u672c\u516c\u79ef\uff1a\u4f01\u4e1a\u5728\u7ecf\u8425\u8fc7\u7a0b\u4e2d\u7531\u4e8e\u63a5\u53d7\u6350\u8d60\u3001\u80a1\u672c\u6ea2\u4ef7\u4ee5\u53ca\u6cd5\u5b9a\u8d22\u4ea7\u91cd\u4f30\u589e\u503c\u7b49\u539f\u56e0\u6240\u5f62\u6210\u7684\u516c\u79ef\u91d1 \u672c\u5e74\u5229\u6da6\uff1a\u516c\u53f8\u5f53\u5e74\u8d5a\u5f97\u7684\u5229\u6da6 \u672a\u5206\u914d\u5229\u6da6\uff1a\u516c\u53f8\u4ee5\u524d\u8d5a\u7684\u5229\u6da6\u8fd8\u672a\u6765\u5f97\u53ca\u5206\u7ea2 \u8d1f\u503a \u6d41\u52a8\u6027\u8d1f\u503a\uff1a\u77ed\u671f\u5185\u9700\u8981\u8fd8\u7684\u8d1f\u503a \u975e\u6d41\u52a8\u6027\u8d1f\u503a \u6d41\u52a8\u6bd4\u7387 = \u6d41\u52a8\u8d44\u4ea7 / \u6d41\u52a8\u8d1f\u503a \uff08\u6700\u597d\u5927\u4e8e200%\uff09 \u5229\u6da6\u8868 \u4e00\u6bb5\u65f6\u95f4\u5185\u4f01\u4e1a\u5229\u7528\u8d44\u6e90\u5e26\u6765\u56de\u62a5\u7684\u80fd\u529b\u548c\u6548\u7387 \u7ecf\u8425\u5229\u6da6\uff1a\u4e3b\u4e1a\u6536\u5165 \u6263\u975e\u51c0\u5229\u6da6\uff1a\u6263\u9664\u5f69\u7968\u4e2d\u5956\u548c\u7092\u80a1\u975e\u65e5\u5e38\u6536\u5165\u548c\u652f\u51fa\u540e\u7684\u5229\u6da6 \u6bdb\u5229\u7387\uff1a \u6bdb\u5229\u6da6\u5360\u8425\u4e1a\u6536\u5165\u7684\u767e\u5206\u6bd4\uff0c\u5176\u4e2d\u6bdb\u5229\u6da6\u4e3a\u8425\u4e1a\u6536\u5165\u51cf\u53bb\u8425\u4e1a\u6210\u672c \u6bdb\u5229\u7387\u7684\u6bd4\u8f83\u4e3b\u8981\u662f\u57fa\u4e8e\u884c\u4e1a\u5185\u548c\u81ea\u8eab\u5386\u53f2\u6c34\u5e73 \u901a\u5e38\u6bdb\u5229\u7387\u4e0d\u80fd\u5c0f\u4e8e30% \u51c0\u5229\u6da6\uff1a \u51c0\u5229\u6da6 = \u6bdb\u5229\u6da6 - \u4e09\u8d39 - \u7a0e\u8d39 \u4e09\u8d39 = \u9500\u552e\u8d39 + \u7ba1\u7406\u8d39 + \u8d22\u52a1\u8d39 \u975e\u7ecf\u8425\u5229\u6da6\uff1a\u526f\u4e1a\u6536\u5165 \u73b0\u91d1\u6d41\u91cf\u8868 \u6d41\u52a8\u73b0\u91d1\u8d1f\u503a\u4fdd\u969c\u6bd4\u7387 = \u6d41\u52a8\u73b0\u91d1 / \u6d41\u52a8\u8d1f\u503a \u8868\u660e\u7684\u662f\u4f01\u4e1a\u80fd\u5426\u7528\u4e00\u5e74\u5185\u6d41\u52a8\u7684\u73b0\u91d1\u6765\u507f\u8fd8\u4e00\u5e74\u5185\u6d41\u52a8\u7684\u503a\u52a1\uff0c\u6bd4\u7387\u8d8a\u9ad8\uff0c\u8bf4\u660e\u6709\u66f4\u591a\u7684\u6d41\u52a8\u8d44\u91d1\u6765\u507f\u8fd8\u6d41\u52a8\u503a\u52a1 \u8d22\u62a53+1\u9009\u80a1\u6cd5 \u00b6 \u8d22\u62a5\u4e0b\u8f7d\uff1a \u5de8\u6f6e\u8d44\u8baf\u7f51: http://www.cninfo.com.cn/ \u4e0a\u4ea4\u6240\u5b98\u7f51\uff1a http://www.sse.com.cn/ \u6df1\u4ea4\u6240\u5b98\u7f51\uff1a http://www.szse.cn/ \u675c\u90a6\u5206\u6790\u6cd5\uff1a ROE = \u51c0\u5229\u7387 * \u603b\u8d44\u4ea7\u5468\u8f6c\u7387 * \u6743\u76ca\u4e58\u6570 \u603b\u8d44\u4ea7\u5468\u8f6c\u7387\uff1a\u9500\u552e\u6536\u5165 / \u603b\u8d44\u4ea7 \u8861\u91cf\u8d44\u6e90\u7684\u5229\u7528\u6548\u7387 \u603b\u8d44\u4ea7\u5468\u8f6c\u7387\u8d8a\u9ad8\uff0c\u516c\u53f8\u8fd0\u8425\u80fd\u529b\u8d8a\u5f3a\uff0c\u516c\u53f8\u76c8\u5229\u80fd\u529b\u8d8a\u9ad8 \u6743\u76ca\u4e58\u6570\uff1a\u8d44\u4ea7 / \u6240\u6709\u8005\u6743\u76ca \u6743\u76ca\u4e58\u6570\u8d8a\u9ad8\uff0c\u6240\u6709\u8005\u6743\u76ca\u5360\u6bd4\u8d8a\u4f4e\uff0c\u8d44\u4ea7\u8d1f\u503a\u7387\u8d8a\u9ad8 3+1\u9009\u80a1\u6cd5\uff1a 3\u4ee3\u6307\u675c\u90a6\u5206\u6790\u6cd5\u4e2dROE\u7684\u4e09\u4e2a\u6307\u6807 1\u4ee3\u6307\u7ecf\u8425\u6027\u73b0\u91d1\u6d41\u548c\u51c0\u5229\u6da6\u4e4b\u6bd4 \u4e94\u4e2a\u6b65\u9aa4\uff1a \u51c0\u8d44\u4ea7\u6536\u76ca\u7387\uff1a\u6700\u8fd1\u4e09\u5e74ROE\u572815%\u4ee5\u4e0a \u51c0\u5229\u7387 / \u6bdb\u5229\u7387\uff1a\u8d8a\u9ad8\uff0c\u516c\u53f8\u76c8\u5229\u80fd\u529b\u8d8a\u5f3a \u603b\u8d44\u4ea7\u5468\u8f6c\u7387\uff1a\u8d8a\u9ad8\uff0c\u516c\u53f8\u80fd\u529b\u8d8a\u5f3a \u6743\u76ca\u4e58\u6570\uff1a\u8d8a\u4f4e\uff0c\u8d1f\u503a\u7387\u8d8a\u4f4e\uff0c\u516c\u53f8\u8d8a\u7a33\u5b9a \u76c8\u5229\u8d28\u91cf\uff1a\u6709\u5f88\u9ad8\u7684\u5229\u6da6\u5374\u6ca1\u6709\u76f8\u5e94\u7684\u73b0\u91d1\u6d41\uff0c\u8bf4\u660e\u5229\u6da6\u4e2d\u6c34\u5206\u8f83\u591a \u795e\u5947\u516c\u5f0f \u00b6 \u300a\u80a1\u5e02\u7a33\u8d5a\u300b\u4f5c\u8005\uff1a\u4e54\u5c14\u00b7\u683c\u6797\u5e03\u62c9\u7279 \u8d44\u4ea7\u56de\u62a5\u7387 \uff08\u76f8\u5f53\u4e8e ROE\uff09 \u80a1\u7968\u6536\u76ca\u7387 \uff08\u76f8\u5f53\u4e8e 1/PE\uff09 \u539f\u7406\uff1a \u6309\u7167ROE\u4ece\u9ad8\u5230\u5e95\u6392\u5e8f \u6309\u7167PE\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f \u4e24\u8005\u7efc\u5408\u627e\u51fa\u6700\u4f73\u7ec4\u5408\uff08\u6392\u540d = ROE\u7684\u6392\u540d + PE\u6392\u540d\uff09 \u795e\u5947\u516c\u5f0f\u7684\u4e09\u4e2a\u524d\u63d0\u6761\u4ef6 \u6df1\u4fe1\u5e76\u575a\u6301\u957f\u671f\u6295\u8d44 \u795e\u5947\u516c\u5f0f\u4e0d\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u6bcf\u65f6\u6bcf\u523b\u90fd\u6709\u6548\uff0c\u9700\u8981\u6709\u8010\u5fc3 \u8c03\u6574\u81ea\u5df1\u7684\u5fc3\u91cc\u9884\u671f \u5b9e\u64cd\uff1a \u6253\u5f00\u4e1c\u65b9\u8d22\u5bcc\u7f51\u7684PC\u7aef\uff0c\u70b9\u51fb\u5de6\u4fa7\u7684**\u6caa\u6df1**\uff0c\u5c06\u52a0\u6743\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\u548c\u5e02\u76c8\u7387\u6dfb\u52a0\u8fdb\u83dc\u5355\u680f \u5728\u80a1\u7968\u90e8\u5206\u70b9\u51fb\u53f3\u952e\uff0c\u5c06\u6570\u636e\u5bfc\u51fa\u81f4excel\u8868\u683c \u5bfc\u51fa\u5c5e\u6027\u5305\u542b\uff0c\u516c\u53f8\u540d\u79f0\uff0c\u80a1\u4ef7\uff0c\u52a0\u6743\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\uff0c\u5e02\u76c8\u7387 \u5254\u9664\u540d\u79f0\u4ee5*ST\u3001ST\u3001PT\u3001S\u5f00\u5934\u7684\u80a1\u7968\uff08\u4e8f\u635f\u6216\u5373\u5c06\u9000\u5e02\uff09 \u5254\u9664\u6389\u80a1\u4ef7\u4e3a\u6a2a\u6760\u7684\u80a1\u7968 \u5254\u9664\u52a0\u6743\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\u548c\u5e02\u76c8\u7387\u4e3a\u8d1f\u6570\u7684\u80a1\u7968 \u6309\u7167ROE\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f \u6309\u7167PE\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f \u5c06\u4e24\u4e2a\u6392\u540d\u76f8\u52a0\u627e\u51fa\u524d30\u53ea\u80a1\u7968 \u6280\u672f\u9762 \u00b6 \u5bf9\u5e94\u7a7a\u4e2d\u697c\u9601\u7406 \u91cf\uff1a\u6210\u4ea4\u91cf\uff0c\u6210\u4ea4\u91cf\u8d8a\u591a\uff0c\u5e02\u573a\u8d8a\u6d3b\u8dc3 \u4ef7\uff1a\u6210\u4ea4\u4ef7 \u65f6\uff1a\u80a1\u7968\u4ef7\u683c\u53d8\u5316\u7684\u65f6\u95f4\u5468\u671f \u7a7a\uff1a\u80a1\u7968\u4ef7\u683c\u6ce2\u52a8\u7684\u7a7a\u95f4\u8303\u56f4 \u6280\u672f\u5206\u6790\u662f\u57fa\u4e8e\u4e09\u4e2a\u7406\u8bba\u5047\u8bbe\u6210\u7acb\u7684 \u5047\u8bbe\u4e00\uff1a\u80a1\u4ef7\u53d8\u5316\u6db5\u76d6\u4e00\u5207\u5e02\u573a\u4fe1\u606f \u5047\u8bbe\u4e8c\uff1a\u4ef7\u683c\u6cbf\u8d8b\u52bf\u79fb\u52a8 \u5047\u8bbe\u4e09\uff1a\u5386\u53f2\u4f1a\u91cd\u6f14 \u6280\u672f\u5206\u6790\u901a\u8fc7\u6280\u672f\u6307\u6807\u7814\u7a76\u80a1\u7968\u4ef7\u683c\u8fc7\u53bb\u7684\u8fd0\u884c\u8f68\u8ff9\uff0c\u5bfb\u627e\u80a1\u4ef7\u672a\u6765\u53d8\u5316\u65b9\u5411\u7684\u7ebf\u7d22\u3002 \u6280\u672f\u5206\u6790\u7684\u5de5\u5177 K\u7ebf\uff1a k\u7ebf\u7684\u51e0\u79cd\u5f62\u6001\uff1a \u5149\u5934\u5149\u811a\u9633\u7ebf \u5149\u811a\u9633\u7ebf \u5982\u679c\u51fa\u73b0\u5728\u9ad8\u4ef7\u533a\u8868\u793a\u540e\u5e02\u770b\u8dcc \u5149\u5934\u9633\u7ebf \u5927\u9633\u7ebf \u5c0f\u9633\u7ebf \u4e00\u5b57\u7ebf \u5341\u5b57\u661f\u7ebf \u4e24\u7c7b\u6295\u8d44\u8005 \u591a\u5934\uff1a\u770b\u6da8\u7684\u4eba \u7a7a\u5934\uff1a\u770b\u8dcc\u7684\u4eba \u8d8b\u52bf\u5206\u6790\u6cd5 \u80a1\u5e02\u6309\u7167\u4e00\u5b9a\u89c4\u5f8b\u8fd0\u884c\uff0c\u6da8\u52bf\u6216\u8005\u8dcc\u52bf\u4f1a\u5ef6\u7eed\uff0c\u76f4\u5230\u9047\u5230\u963b\u529b\u6216\u8005\u652f\u6491\u6539\u53d8\u5176\u8d70\u52bf \u652f\u6491\u7ebf \u652f\u6491\u4f4d\uff1a\u5728\u8fd9\u4e2a\u4ef7\u4f4d\u65f6\uff0c\u591a\u65b9\u529b\u91cf\u8db3\u591f\u5f3a\u5927\uff0c\u4ef7\u683c\u5f00\u59cb\u53cd\u5f39 \u963b\u529b\u7ebf \u963b\u529b\u4f4d\uff1a\u5728\u8fd9\u4e2a\u4ef7\u4f4d\u65f6\uff0c\u7a7a\u623f\u529b\u91cf\u8db3\u591f\u5f3a\u5927\uff0c\u4ef7\u683c\u5f00\u59cb\u4e0b\u8dcc \u8d8b\u52bf\u7ebf \u95ee\uff1a\u5982\u4f55\u5229\u7528\u652f\u6491\u4f4d\u548c\u963b\u529b\u4f4d\uff1f \u7b54\uff1a\u5728\u652f\u6491\u4f4d\u4e70\u5165\uff0c\u5728\u963b\u529b\u4f4d\u5356\u51fa\uff1b\u5728\u652f\u6491\u4f4d\u4e0b\u8bbe\u7f6e\u4e00\u4e2a\u6b62\u635f\u4ef7\uff0c\u5982\u679c\u80a1\u4ef7\u53cd\u5f39\uff0c\u4fdd\u6301\u4e0d\u52a8\uff0c\u5982\u679c\u80a1\u4ef7\u6ca1\u6709\u53cd\u5f39\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u6e05\u4ed3\u9000\u573a\uff1b\u5f53\u80a1\u4ef7\u6da8\u5230\u963b\u529b\u4f4d\u65f6\uff0c\u5356\u51fa\u7684\u540c\u65f6\uff0c\u5728\u963b\u529b\u4f4d\u4e0a\u8bbe\u7f6e\u4e00\u4e2a\u4e70\u5355\uff0c\u5982\u679c\u80a1\u4ef7\u8dcc\u4e86\uff0c\u4fdd\u6301\u4e0d\u52a8\uff0c\u6da8\u4e86\u4e70\u5355\u542f\u52a8\u81ea\u52a8\u8d2d\u5165\u4e00\u4e9b\u3002 \u79fb\u52a8\u5e73\u5747\u7ebf \u5747\u7ebf\uff0c\u82f1\u6587MA\uff0c\u53cd\u5e94\u6570\u636e\u5728\u65f6\u95f4\u7a97\u53e3\u4e0a\u7684\u5e73\u5747\u4ef7\u683c \u6280\u672f\u5206\u6790\u7684\u5929\u654c \u5b58\u5728\u4ea4\u6613\u8d39\u7528 \u4ea4\u6613\u8005\u7684\u5fc3\u9b54 **\u4e3a\u4ec0\u4e48\u8981\u4e86\u89e3\u6280\u672f\u5206\u6790\uff1f\uff1f ** \u6280\u672f\u5206\u6790\u80fd\u91cf\u5316\u5e02\u573a\u60c5\u7eea\uff0c\u6b63\u786e\u7387\u6bd4\u731c\u6d4b\u8981\u9ad8\u4e00\u4e9b\u3002 \u6d88\u606f\u9762 \u00b6 \u5bf9\u5e94\u7a7a\u4e2d\u697c\u9601\u7406\u8bba \u7b2c\u4e00\u6b65\uff1a\u5206\u8fa8\u6d88\u606f \u7b2c\u4e00\u79cd\u6d88\u606f\uff1a\u5e84\u5bb6\u6545\u610f\u653e\u5047\u6d88\u606f \u7b2c\u4e8c\u79cd\u6d88\u606f\uff1a\u4e0a\u5e02\u516c\u53f8\u771f\u6709\u91cd\u5927\u4e8b\u4ef6 \u7b2c\u4e8c\u6b65\uff1a\u5224\u65ad\u6d88\u606f\u7684\u53ef\u4fe1\u5ea6 \u5fc3\u7406\u9762 \u00b6 \u5bf9\u5e94\u7a7a\u4e2d\u697c\u9601\u7406\u8bba \u504f\u89c1\uff1a\u5728\u6295\u8d44\u5fc3\u7406\u4e2d\uff0c\u6211\u4eec\u628a\u4e00\u5207\u8ba9\u51b3\u7b56\u80cc\u79bb\u7406\u6027\u7684\u56e0\u7d20\u90fd\u79f0\u4e4b\u4e3a\u504f\u89c1 \u8ba4\u77e5\u504f\u89c1\uff1a\u4fe1\u606f\u83b7\u53d6\u6216\u5904\u7406\u80fd\u529b\u6709\u9650 \u60c5\u7eea\u504f\u89c1\uff1a\u56e0\u6267\u7740\u6216\u8005\u81ea\u6211\u4fdd\u62a4\u4ea7\u751f\u504f\u89c1 \u884c\u4e1a\u9009\u80a1 \u00b6 \u6bd4\u8f83\u9002\u5408\u666e\u901a\u6295\u8d44\u8005\u9009\u80a1 \u9009\u80a1\u7b2c\u4e00\u770b\u884c\u4e1a \u5468\u671f\u6027 \u5468\u671f\u6027\u884c\u4e1a\uff08\u53d6\u51b3\u4e8e\u7ecf\u6d4e\u5927\u73af\u5883\uff09 \u884c\u4e1a\u7684\u666f\u6c14\u5ea6\u4e0e\u5916\u90e8\u5b8f\u89c2\u7ecf\u6d4e\u73af\u5883\u9ad8\u5ea6\u6b63\u76f8\u5173\uff0c\u5e76\u5448\u73b0\u5468\u671f\u6027\u5faa\u73af\u7684\u884c\u4e1a \u94a2\u94c1\uff0c\u9020\u8239\uff0c\u6c7d\u8f66\uff0c\u623f\u5730\u4ea7\uff0c\u6709\u8272\u91d1\u5c5e\uff0c\u94f6\u884c\u3002\u3002\u3002 \u6c7d\u8f66\uff0c\u94a2\u94c1\uff0c\u673a\u68b0\uff0c\u822a\u7a7a\uff0c\u5efa\u7b51\uff0c\u519b\u5de5 \u975e\u5468\u671f\u6027\u884c\u4e1a\uff08\u6bd4\u8f83\u5bb9\u6613\u51fa\u725b\u80a1\uff09 \u533b\u7597\uff0c\u6d88\u8d39\u54c1\uff0c\u73af\u4fdd\uff0c\u4ea4\u901a\u8fd0\u8f93 \u533b\u836f\uff0c\u533b\u7597\u5668\u68b0\uff0c\u8ba1\u7b97\u673a\u8f6f\u4ef6\uff0c\u6d88\u8d39\uff0c\u4f11\u95f2\u5a31\u4e50 \u9632\u5fa1\u6027\u884c\u4e1a \u7cae\u6cb9\u98df\u54c1\uff0c\u516c\u7528\u4e8b\u4e1a \u5468\u671f\u6027\u884c\u4e1a\u9002\u5408\u6ce2\u6bb5\u64cd\u4f5c\uff0c\u975e\u5468\u671f\u6027\u884c\u4e1a\u9002\u5408\u957f\u671f\u6301\u6709\uff0c\u9632\u5fa1\u6027\u884c\u4e1a\u5f88\u96be\u6709\u8d85\u989d\u6536\u76ca \u751f\u547d\u5468\u671f \u521d\u521b\u671f\uff1a \u884c\u4e1a\u524d\u666f\u5e7f\u9614\uff0c\u5e02\u573a\u9700\u6c42\u4e0d\u9ad8\uff0c\u4ea7\u54c1\u9500\u91cf\u8f83\u4f4e\uff0c\u4f01\u4e1a\u5f15\u529b\u8f83\u5c11 \u6210\u957f\u671f\uff1a \u4ea7\u54c1\u66f4\u65b0\u8fed\u4ee3\u5feb\uff0c\u8d44\u672c\u6d8c\u5165\u591a\uff0c\u589e\u957f\u5177\u6709\u786e\u5b9a\u6027 \u6210\u719f\u671f\uff1a \u5e02\u573a\u4efd\u989d\u5360\u6bd4\u7a33\u5b9a\uff0c\u4ea7\u54c1\u4ef7\u683c\u8f83\u4e3a\u7a33\u5b9a\uff0c\u589e\u503c\u670d\u52a1\u589e\u591a\uff0c\u4f01\u4e1a\u5229\u6da6\u8f83\u4e3a\u4e30\u539a\uff0c\u98ce\u9669\u76f8\u5bf9\u66f4\u4f4e \u8870\u9000\u671f\uff1a \u5e02\u573a\u9700\u6c42\u51cf\u5c11\uff0c\u4ea7\u54c1\u9500\u91cf\u4e0b\u6ed1\uff0c\u4f01\u4e1a\u5229\u6da6\u964d\u4f4e \u5b9e\u64cd \u89c4\u907f\u521d\u521b\u671f\u8870\u9000\u671f\u4f01\u4e1a \u6210\u957f\u6027\u4f01\u4e1a\u662f\u6700\u4f73\u9009\u62e9 \u6210\u719f\u671f\u4f01\u4e1a\u9002\u5408\u7a33\u5065\u6027\u6295\u8d44\u8005 \u9009\u62e9\u81ea\u5df1\u66f4\u719f\u6089\u7684\u884c\u4e1a \u9009\u80a1\u7b2c\u4e8c\u770b\u516c\u53f8 \u6210\u957f\u80a1\u6295\u8d44 \u00b6 \u6210\u957f\u80a1\u4f01\u4e1a\u7279\u70b9\uff1a \u5904\u4e8e\u671d\u9633\u884c\u4e1a \u8d77\u6b65\u5e02\u503c\u5c0f \u7ade\u4e89\u4f18\u52bf\u5f3a \u529b\u54e5\u539f\u521b\u6307\u6570\u9009\u80a1\u6cd5 \u00b6 \u7b2c\u4e00\u6b65\uff1a\u6311\u9009\u770b\u597d\u7684\u884c\u4e1a \u7b2c\u4e8c\u6b65\uff1a\u6311\u9009\u884c\u4e1a\u6307\u6570\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6210\u5206\u80a1 \u7b2c\u4e09\u6b65\uff1a\u9009\u51fa\u6765\u7684\u4e2a\u80a1\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1 \u7b2c\u56db\u6b65\uff1a\u901a\u8fc7\u8d22\u52a1\u5206\u6790\u7b5b\u9009 \u7b2c\u4e94\u6b65\uff1a\u5224\u65ad\u4f30\u503c\u7684\u9ad8\u4f4e","title":"\u80a1\u7968\u7406\u8d22"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_1","text":"\u80a1\u7968\u6295\u8d44\uff1a\u957f\u671f\u884c\u4e3a\uff0c\u4f17\u4eba\u4e00\u8d77\u628a\u86cb\u7cd5\u505a\u5927\u7684\uff0c\u5206\u5f97\u66f4\u591a\u7684\u6536\u76ca \u7092\u80a1\uff1a\u77ed\u671f\u7684\u6295\u673a\u884c\u4e3a\uff0c\u56fa\u5b9a\u5927\u5c0f\u7684\u86cb\u7cd5\uff0c\u83b7\u5f97\u7684\u56de\u62a5\u662f\u522b\u4eba\u7684\u8d44\u91d1\uff0c 7\u4e8f2\u5e731\u8d5a","title":"\u80a1\u7968\u6295\u8d44\u548c\u7092\u80a1"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_2","text":"\u4e00\u7ea7\u5e02\u573a: \u76f4\u63a5\u5bf9\u6295\u8d44\u8005\u53d1\u884c\u80a1\u7968\u7b79\u96c6\u8d44\u91d1\u7684\u5e02\u573a \u4e8c\u7ea7\u5e02\u573a\uff1b\u76f8\u4e92\u8f6c\u8ba9\u80a1\u7968\u7684\u5e02\u573a \u4e0a\u5e02\u516c\u53f8\uff1a\u80fd\u5728\u80a1\u7968\u4ea4\u6613\u6240\u6302\u724c\u4ea4\u6613\u7684\u516c\u53f8","title":"\u80a1\u7968\u5e02\u573a"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_3","text":"\u80a1\u7968\u6295\u8d44\u4e0d\u540c\u507f\u8fd8 \u80a1\u7968\u5177\u6709\u9ad8\u6d41\u52a8\u6027 \u80a1\u7968\u5177\u6709\u9ad8\u6536\u76ca\u6027 \u80a1\u7968\u5177\u6709\u9ad8\u98ce\u9669\u6027 \u80a1\u7968\u5177\u6709\u5f3a\u53c2\u4e0e\u6027 \u80a1\u7968\u6743\u5229\u6c38\u4e45\u6709\u6548","title":"\u80a1\u7968\u7684\u7279\u70b9"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_4","text":"\u80a1\u7968\u4ef7\u683c\u6307\u6570 \u8fd0\u7528\u7b80\u5355\u7684\u7edf\u8ba1\u65b9\u6cd5\u7f16\u5236\u800c\u6210\u7528\u6765\u53cd\u6620\u5e02\u573a\u603b\u4f53\u4ef7\u683c\u6216\u67d0\u7c7b\u80a1\u7968\u4ef7\u683c\u53d8\u52a8\u8d70\u52bf\u3002","title":"\u80a1\u7968\u6307\u6570"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_5","text":"\u5305\u542b\u4e0a\u4ea4\u6240\u7684\u5168\u90e8\u80a1\u7968\uff0c\u53cd\u6620\u4e0a\u4ea4\u6240\u4e0a\u5e02\u80a1\u7968\u4ef7\u683c\u7684\u6574\u4f53\u53d8\u52a8\u60c5\u51b5 1990\u5e7412\u670819\u65e5\uff0c\u4e0a\u8bc1\u6307\u6570100\u70b9","title":"\u4e0a\u8bc1\u6307\u6570"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_6","text":"\u6df1\u5733\u7efc\u6307\uff0c\u7531\u6df1\u5733\u8bc1\u5238\u4ea4\u6613\u6240\u7f16\u5236\u5176\u6837\u672c\u4e3a\u6240\u6709\u5728\u6df1\u5733\u8bc1\u5238\u4ea4\u6613\u6240\u6302\u724c\u4e0a\u5e02\u7684\u80a1\u7968","title":"\u6df1\u5733\u6307\u6570"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_7","text":"\u6df1\u5733\u6210\u5206\u80a1\u6307\u6570\uff0c\u6df1\u6210\u6307\uff0c\u53ea\u9009\u53d6\u4e86\u6df1\u4ea4\u6240\u90e8\u5206\u80a1\u7968\uff0c\u4ee3\u8868\u6bd4\u8f83\u597d\u4e00\u70b9\u7684\u80a1\u7968","title":"\u6df1\u5733\u6210\u6307"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#300","text":"2005\u5e744\u67088\u65e5\u6caa\u6df1\u4ea4\u6613\u6240\u8054\u5408\u53d1\u5e03\u7684\u7b2c\u4e00\u53ea\u6a2a\u8de8\u4e24\u5e02\u7684\u80a1\u7968\u6307\u6570\u3002","title":"\u6caa\u6df1300\u6307\u6570"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_8","text":"\u6309\u7167\u5229\u6da6\u5206\u914d\u7684\u5148\u540e\u987a\u5e8f\u5206\u7c7b \u666e\u901a\u80a1\uff1a\u6839\u636e\u516c\u53f8\u7ecf\u8425\u6548\u7387\u5747\u7b49\u5206\u914d\u80a1\u4e1c\u6743\u76ca\uff0c\u76ee\u524d\u5728\u6caa\u5e02\u548c\u6df1\u5e02\u4e0a\u5e02\u7684\u80a1\u7968\u90fd\u662f\u666e\u901a\u80a1 \u4f18\u5148\u80a1\uff1a\u4f18\u5148\u80a1\u7684\u80a1\u4e1c\u5bf9\u516c\u53f8\u8d44\u4ea7\u5229\u6da6\u5206\u914d\u4eab\u6709\u4f18\u5148\u6743 \u6309\u7167\u80a1\u7968\u7684\u53d1\u884c\u65b9\u5f0f\u5206\u7c7b A\u80a1\uff1a\u4eba\u6c11\u5e01\u666e\u901a\u80a1\u7968\uff0c\u5883\u5185\u4e0a\u5e02\u516c\u53f8\u53d1\u884c\u4ee5\u4eba\u6c11\u5e01\u4e3a\u8d27\u5e01\u8fdb\u884c\u4ea4\u6613\u7684\u80a1\u7968 B\u80a1\uff1a\u4eba\u6c11\u5e01\u7279\u79cd\u80a1\u7968\uff0c\u5883\u5185\u4e0a\u5e02\u516c\u53f8\u53d1\u884c\u4ee5\u4eba\u6c11\u5e01\u8868\u660e\u9762\u503c\u4f46\u7528\u5916\u5e01\u4ea4\u6613\u7684\u80a1\u7968\uff0c\u6caa\u5e02\u7528\u7f8e\u5143\uff0c\u6df1\u5e02\u7528\u6e2f\u5e01 H\u80a1\uff1a\u5728\u4e2d\u56fd\u5927\u9646\u5883\u5185\u6ce8\u518c\uff0c\u800c\u5728\u9999\u6e2f\u4e0a\u5e02\u4ea4\u6613\u7684\u80a1\u7968 \u6309\u7167\u4e0a\u5e02\u516c\u53f8\u6240\u5c5e\u7684\u884c\u4e1a\u6765\u5212\u5206 \u91d1\u878d\u677f\u5757\uff0c\u5de5\u4e1a\u677f\u5757\u3002\u3002\u3002 \u6309\u7167\u4e0a\u5e02\u516c\u53f8\u7684\u7ecf\u8425\u4e1a\u7ee9\u6765\u5212\u5206 \u84dd\u7b79\u80a1\uff1a\u7ecf\u8425\u4e1a\u7ee9\u8f83\u597d\uff0c\u7a33\u5b9a\u6027\u8f83\u9ad8\u73b0\u91d1\u80a1\u5229\u8f83\u4e30\u539a\u7684\u516c\u53f8\u80a1\u7968 \u7ee9\u5dee\u80a1\uff1a\u6307\u4e1a\u7ee9\u8f83\u5dee\u7684\u80a1\u7968\uff0c\u8fd9\u7c7b\u80a1\u7968\u4ef7\u683c\u5f80\u5f80\u8868\u73b0\u4e0d\u4f73 ST\u80a1\uff1aSpecial Treatment\uff0cST\u4ee3\u8868\u8fde\u7eed\u4e24\u5e74\u4e8f\u635f *ST\u80a1\uff1a\u8fde\u7eed\u4e09\u5e74\u4e8f\u635f \u3002\u3002\u3002","title":"\u80a1\u7968\u7684\u5206\u7c7b"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_9","text":"","title":"\u9884\u6d4b\u80a1\u5e02\u7684\u4e24\u4e2a\u6c34\u6676\u7403"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_10","text":"\u5e95\u5c42\u8ba4\u77e5\u6846\u67b6\uff1a\u575a\u5b9e\u57fa\u7840\u7406\u8bba \u575a\u5b9e\u57fa\u7840\u7406\u8bba\u8ba4\u4e3a\uff0c\u6bcf\u4e00\u4e2a\u6295\u8d44\u5de5\u5177\uff0c\u65e0\u8bba\u662f\u80a1\u7968\u3001\u503a\u5238\u8fd8\u662f\u623f\u4ea7\uff0c\u90fd\u6709\u4e00\u4e2a\u5185\u5728\u4ef7\u503c\u7684\u575a\u5b9e\u57fa\u7840\uff0c\u6211\u4eec\u901a\u8fc7\u4ed4\u7ec6\u5206\u6790\u8fd9\u4e2a\u8d44\u4ea7\u7684\u73b0\u72b6\u548c\u524d\u666f\uff0c\u5c31\u53ef\u4ee5\u786e\u5b9a\u5176\u5185\u5728\u4ef7\u503c\uff0c\u5f53\u5e02\u573a\u4ef7\u503c\u4f4e\u4e8e\u505a\u4e3a\u575a\u5b9e\u57fa\u7840\u7684\u5185\u5728\u4ef7\u503c\u65f6\uff0c\u4e70\u5165\u673a\u4f1a\u5c31\u51fa\u73b0\u4e86\uff0c\u53cd\u4e4b\uff0c\u5356\u51fa\u673a\u4f1a\u5c31\u51fa\u73b0\u4e86","title":"\u57fa\u672c\u9762\u5206\u6790\u7406\u8bba, \u4ef7\u503c\u6295\u8d44\u6d41\u6d3e"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_11","text":"\u5e95\u5c42\u8ba4\u77e5\u6846\u67b6\uff1a\u7a7a\u4e2d\u697c\u9601\u7406\u8bba \u7a7a\u4e2d\u697c\u9601\u7406\u8bba\u8ba4\u4e3a\uff0c\u4e13\u4e1a\u6295\u8d44\u8005\u4e0d\u613f\u5c06\u7cbe\u529b\u7528\u4e8e\u4f30\u8ba1\u4f01\u4e1a\u7684\u5185\u5728\u4ef7\u503c\uff0c\u7b2c\u4e00\u662f\u56e0\u4e3a\u672a\u6765\u5145\u6ee1\u4e86\u4e0d\u786e\u5b9a\u6027\uff0c\u54ea\u6015\u4e13\u4e1a\u4eba\u58eb\u4ed8\u51fa\u4e86\u5de8\u5927\u7684\u52b3\u52a8\uff0c\u4f01\u4e1a\u7684\u771f\u662f\u5185\u5728\u4ef7\u503c\uff0c\u4e5f\u5f88\u96be\u51c6\u786e\u8bc4\u4f30\uff1b\u7b2c\u4e8c\uff0c\u5c31\u7b97\u8bc4\u4f30\u51c6\u786e\uff0c\u73b0\u5728\u80a1\u4ef7\u88ab\u4f4e\u4f30\u4e86\uff0c\u4e5f\u4e0d\u786e\u5b9a\u4f55\u65f6\u4f1a\u56de\u5f52\u4ef7\u503c\u3002\u6f2b\u957f\u7684\u7b49\u5f85\u672c\u8eab\u5c31\u5145\u6ee1\u4e86\u4e0d\u786e\u5b9a\u6027\u548c\u98ce\u9669\uff0c\u800c\u806a\u660e\u7684\u6295\u8d44\u8005\u4e0d\u4f1a\u82b1\u66f4\u5927\u7684\u7cbe\u529b\u53bb\u7814\u7a76\u4f01\u4e1a\u7684\u5185\u5728\u4ef7\u503c\uff0c\u800c\u4f1a\u82b1\u65f6\u95f4\u53bb\u7814\u7a76\u5176\u4ed6\u6295\u8d44\u8005\u672a\u6765\u7684\u6295\u8d44\u884c\u4e3a\uff0c\u53bb\u5206\u6790\u4ed6\u4eec\u5728\u4e50\u89c2\u65f6\u5982\u4f55\u5c06\u81ea\u5df1\u7684\u5e0c\u671b\u5efa\u6210\u7a7a\u4e2d\u697c\u9601\uff0c\u806a\u660e\u7684\u6295\u8d44\u8005\u4f1a\u4f30\u8ba1\u51fa\u4ec0\u4e48\u6837\u7684\u6295\u8d44\u6700\u5bb9\u6613\u88ab\u5927\u4f17\u60c5\u7eea\u5806\u79ef\u8d77\u4e00\u5ea7\u7a7a\u4e2d\u697c\u9601\uff0c\u7136\u540e\u5728\u5927\u4f17\u5f00\u59cb\u884c\u52a8\u4e4b\u524d\uff0c\u6211\u73b0\u884c\u4e70\u5165\uff0c\u5360\u636e\u5e02\u573a\u5148\u673a\uff0c\u5750\u7b49\u5927\u5bb6\u628a\u80a1\u4ef7\u63a8\u4e0a\u53bb\uff0c\u6700\u7ec8\u5efa\u6210\u7a7a\u4e2d\u697c\u9601","title":"\u6280\u672f\u5206\u6790\u7406\u8bba\uff0c\u8d8b\u52bf\u6295\u8d44\u6d41\u6d3e"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_12","text":"","title":"\u80a1\u7968\u5206\u6790"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_13","text":"\u5bf9\u5e94\u575a\u5b9e\u57fa\u7840\u7406\u8bba \u5b8f\u89c2\uff1a \u80a1\u5e02\u7684\u8d70\u52bf\u548c\u53d8\u5316\u7531\u56fd\u5bb6\u7ecf\u6d4e\u53d1\u5c55\u6c34\u5e73\u548c\u7ecf\u6d4e\u7684\u666f\u6c14\u72b6\u6001\u51b3\u5b9a \u80a1\u4ef7\u5e38\u88ab\u770b\u4f5c\u5b8f\u89c2\u7ecf\u6d4e\u7684\u6674\u96e8\u8868 \u5229\u7387\uff1a\u5f71\u54cd\u7740\u516c\u53f8\u878d\u8d44\u7684\u96be\u5ea6\uff0c\u56fd\u5bb6\u4e0a\u8c03\u5229\u7387\uff0c\u5b58\u6b3e\u5229\u7387\u4e0a\u5347\uff0c\u4eba\u4eec\u613f\u610f\u628a\u94b1\u5b58\u94f6\u884c\uff0c\u5c31\u4e0d\u592a\u613f\u610f\u53bb\u505a\u98ce\u9669\u66f4\u9ad8\u7684\u80a1\u7968\u6295\u8d44\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u4f1a\u6709\u4e00\u90e8\u5206\u8d44\u91d1\uff0c\u4ece\u80a1\u5e02\u91cc\u62bd\u8d70\uff0c\u5bfc\u81f4\u5e02\u573a\u8d44\u91d1\u7d27\u7f3a\uff0c\u5c31\u4f1a\u5bf9\u80a1\u4ef7\u9020\u6210\u4e00\u5b9a\u7684\u8d1f\u9762\u5f71\u54cd\uff0c\u540c\u65f6\uff0c\u7531\u4e8e\u5229\u6da6\u4e0a\u5347\uff0c\u4f01\u4e1a\u501f\u94b1\u7684\u6210\u672c\u4e5f\u63d0\u9ad8\u4e86\uff0c\u610f\u5473\u7740\u4e0a\u5e02\u516c\u53f8\u7684\u7ecf\u8425\u6210\u672c\u4e0a\u5347\u4e86\uff0c\u5229\u6da6\u76f8\u5bf9\u5c31\u4f1a\u51cf\u5c11\uff0c\u4e5f\u662f\u4f1a\u5bfc\u81f4\u80a1\u7968\u4ef7\u683c\u6709\u6240\u4e0b\u8dcc\u3002 \u901a\u8d27\u81a8\u80c0\uff1a\u901a\u8d27\u81a8\u80c0\u4e5f\u4f1a\u5bfc\u81f4\u80a1\u5e02\u4e0a\u6da8\uff0c\u4f46\u662f\u8fd9\u662f\u7531\u4e8e\u589e\u53d1\u7684\u8d27\u6bd4\u5bfc\u81f4\u7684\u4e0a\u6da8\uff0c\u5355\u7eaf\u6492\u94b1\uff0c\u80a1\u5e02\u4e0a\u6da8\u662f\u7eaf\u7cb9\u7684\u6ce1\u6cab\uff0c\u4e00\u65e6\u53d1\u94b1\u901f\u5ea6\u53d8\u6162\u4e86\uff0c\u4e0d\u4f46\u80a1\u5e02\u8981\u5d29\u76d8\uff0c\u5b9e\u4f53\u7ecf\u6d4e\u4e5f\u4f1a\u4ea7\u751f\u8fde\u9501\u5371\u673a\u3002 \u5fae\u89c2\uff1a \u516c\u53f8\u7684\u8d22\u52a1\u72b6\u51b5\uff0c\u5e02\u573a\u7ade\u4e89\u683c\u5c40\uff0c\u7ecf\u8425\u7ba1\u7406\u4f53\u5236\u7b49\u5404\u65b9\u9762\u60c5\u51b5\u5f71\u54cd\u7740\u516c\u53f8\u7684\u80a1\u4ef7\u3002 \u4ef7\u503c\u6295\u8d44\uff1a\u80a1\u7968\u957f\u671f\u6295\u8d44\u4ef7\u503c\u7684\u552f\u4e00\u51b3\u5b9a\u56e0\u7d20\uff0c\u5c31\u662f\u4f01\u4e1a\u7684\u57fa\u672c\u9762\uff0c\u57fa\u672c\u9762\u662f\u4f01\u4e1a\u589e\u957f\u7684\u6839\u672c\u6027\u7684\u5185\u751f\u52a8\u529b\uff0c\u6bcf\u4e2a\u4ef7\u503c\u6295\u8d44\u8005\u5728\u9009\u62e9\u80a1\u7968\u505a\u4ef7\u503c\u6295\u8d44\u65f6\uff0c\u90fd\u9700\u8981\u53bb\u5f7b\u5e95\u7684\u5206\u6790\u4f01\u4e1a\u7684\u57fa\u672c\u9762\uff0c\u4f01\u4e1a\u5b58\u5728\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u76c8\u5229\uff0c\u6295\u8d44\u8005\u6700\u5927\u7684\u5173\u6ce8\u70b9\u4e5f\u5e94\u8be5\u662f\u5728\u4f01\u4e1a\u7684\u76c8\u5229\u72b6\u51b5\u4e0a\uff0c\u6295\u8d44\u80a1\u7968\u6700\u5927\u7684\u76ee\u6807\u5c31\u662f\u5e94\u8be5\u53bb\u5bfb\u627e\u90a3\u4e9b\u6700\u80fd\u591f\u8d5a\u94b1\u7684\u4f01\u4e1a\uff0c\u5173\u952e\u662f\u5c06\u6765\u4e5f\u80fd\u7ee7\u7eed\u8d5a\u5927\u94b1\uff0c\u800c\u4e14\u8d5a\u7684\u94b1\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u7136\u540e\u6295\u8d44\u8005\u4ee5\u5408\u7406\u7684\u6216\u8005\u4f4e\u4f30\u7684\u4ef7\u683c\u4e70\u5165 \u5224\u65ad\u4f01\u4e1a\u7684\u8d5a\u94b1\u80fd\u529b\uff1a ROE\uff08\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\uff09 \u516c\u53f8\u7a0e\u540e\u5229\u6da6\u9664\u4ee5\u51c0\u8d44\u4ea7\u5f97\u5230\u7684\u767e\u5206\u6bd4\uff0c\u6307\u6807\u503c\u8d8a\u9ad8\uff0c\u8bf4\u660e\u6295\u8d44\u6536\u76ca\u8d8a\u9ad8\uff0cROE\u8d8a\u9ad8\uff0c\u8bf4\u660e\u4f01\u4e1a\u7684\u8d5a\u94b1\u80fd\u529b\u8d8a\u5f3a\uff0c\u7ecf\u8425\u4e1a\u7ee9\u8d8a\u597d\u3002 \u6839\u636e\u6295\u8d44\u754c\u4f9b\u8ba4\u7684\u6807\u51c6\uff0c\u4e00\u5bb6\u516c\u53f8\u5982\u679c\u5e38\u5e74\u7684ROE\u4fdd\u6301\u572815%\u4ee5\u4e0a\uff0c\u5c31\u53ef\u4ee5\u7b97\u662f\u4e00\u4e2a\u597d\u5b66\u751f\u4e86\uff0c\u5982\u679cROE\u8fbe\u5230\u4e8620%\u4ee5\u4e0a\uff0c\u90a3\u57fa\u672c\u4e0a\u5c31\u662f\u5b66\u9738\u7ea7\u522b\u4e86 ROE = \u51c0\u5229\u6da6 / \u51c0\u8d44\u4ea7 \u51c0\u8d44\u4ea7 = \u603b\u8d44\u4ea7 - \u603b\u8d1f\u503a PE\uff08\u5e02\u76c8\u7387\uff09 \u4ee3\u8868\u5355\u4f4d\u76c8\u5229\u6295\u8d44\u8005\u4ed8\u51fa\u7684\u4ee3\u4ef7\u6709\u591a\u9ad8\uff0c\u5e02\u76c8\u7387\u5c31\u662f\u9700\u8981\u591a\u5c11\u5e74\u624d\u80fd\u6536\u56de\u6211\u4eec\u7684\u6295\u8d44 \u7528\u6765\u8861\u91cf\u80a1\u4ef7\u662f\u88ab\u9ad8\u4f30\u8fd8\u662f\u4f4e\u4f30 PE = \u6bcf\u80a1\u5e02\u4ef7 / \u6bcf\u80a1\u51c0\u6536\u76ca \u8d22\u52a1\u72b6\u51b5\uff1a\u516c\u53f8\u7684\u603b\u8d44\u4ea7 = \u6240\u6709\u8005\u6743\u76ca\uff08\u80a1\u4e1c\u6295\u5165\u7684\u94b1\uff09+ \u8d1f\u503a\uff08\u516c\u53f8\u5411\u94f6\u884c\u501f\u7684\u94b1\uff09 \u8d1f\u503a\u7ecf\u8425\uff1a \u597d\u5904\uff1a\u653e\u5927\u7ecf\u8425\u6760\u6746\uff0c\u6709\u51cf\u7a0e\u4f5c\u7528 \u574f\u5904\uff1a\u964d\u4f4e\u4f01\u4e1a\u7684\u7a33\u5b9a\u6027 \u4e00\u822c\u4f01\u4e1a\u7684\u8d44\u4ea7\u8d1f\u503a\u7387\u572840%-60%\u4e4b\u95f4\uff0c\u662f\u6bd4\u8f83\u5408\u7406\u7684 \u4f01\u4e1a\u6d3b\u52a8\uff1b \u51c0\u73b0\u91d1\u6d41\uff1a\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4f01\u4e1a\u7ecf\u8425\uff0c\u6295\u8d44\u548c\u878d\u8d44\u6d3b\u52a8\u7684\u73b0\u91d1\u6d41\u5165\u548c\u6d41\u51fa\u7684\u5dee\u989d \u9009\u62e9\u4f01\u4e1a\u65f6\uff0c\u6211\u4eec\u4e0d\u5149\u8981\u6c42\u4f01\u4e1a\u7684\u73b0\u91d1\u6d41\u4e3a\u6b63\uff0c\u66f4\u91cd\u8981\u7684\u662f\u4e00\u5b9a\u8981\u6c42\u4f01\u4e1a\u7684\u7ecf\u8425\u73b0\u91d1\u6d41\u4e3a\u6b63\uff0c\u5982\u679c\u4e00\u5bb6\u4f01\u4e1a\u7684\u7ecf\u8425\u73b0\u91d1\u6d41\u4e3a\u8d1f\u6570\uff0c\u4ee3\u8868\u4e00\u5bb6\u4f01\u4e1a\u81ea\u8eab\u7684\u7ecf\u8425\u5b58\u5728\u95ee\u9898\u3002**\u4f01\u4e1a\u53ef\u4ee5\u6ca1\u6709\u5229\u6da6\uff0c\u4f46\u4e07\u4e07\u4e0d\u80fd\u6ca1\u6709\u73b0\u91d1\u6d41 ** \u4e2d\u89c2\u5206\u6790 \u5bf9\u4f01\u4e1a\u6240\u5904\u7684\u884c\u4e1a\u8fdb\u884c\u5206\u6790 \u884c\u4e1a\u5206\u6790\u8981\u7d20\uff1a \u884c\u4e1a\u662f\u5426\u5177\u6709\u5468\u671f\u6027 \u5f3a\u5468\u671f\u6027\u884c\u4e1a\uff1a\u5982\u94a2\u94c1\u3001\u7164\u70ad\u539f\u6750\u6599\u884c\u4e1a\uff0c\u8239\u8236\u673a\u68b0\u3001\u91d1\u878d\u8bc1\u5238 \u5f31\u5468\u671f\u6027\u884c\u4e1a\uff1a\u98df\u54c1\u3001\u5bb6\u7535\u3001\u5a31\u4e50\u3001\u533b\u836f\u884c\u4e1a \u884c\u4e1a\u662f\u5426\u5177\u6709\u6210\u957f\u6027\uff1a\u884c\u4e1a\u662f\u5426\u9971\u548c \u751f\u5b58\u73af\u5883\u662f\u5426\u6fc0\u70c8 \u5c3d\u91cf\u9009\u62e9\u4ea7\u54c1\u548c\u6a21\u5f0f\u7b80\u5355\u4e00\u773c\u5c31\u80fd\u770b\u61c2\u7684\u516c\u53f8 \u7ade\u4e89\u5206\u6790 \u6838\u5fc3\u7ade\u4e89\u529b \u4f01\u4e1a\u4f18\u79c0\u7ba1\u7406\u5c42 \u8bda\u4fe1\uff0c\u656c\u4e1a\uff0c\u793e\u4f1a\u8d23\u4efb \u8d22\u52a1\u62a5\u544a\uff1a \u7ba1\u7406\u8005\u5b9a\u671f\u5411\u80a1\u4e1c\u63d0\u4ea4\u6210\u7ee9\u5355\uff0c\u62a5\u544a\u516c\u53f8\u7684\u8d22\u52a1\u72b6\u51b5\u548c\u7ecf\u8425\u6210\u679c\uff0c\u662f\u4e86\u89e3\u4f01\u4e1a\u7684\u4fe1\u606f\u7a97\u53e3 \u8d44\u4ea7\u8d1f\u503a\u8868\uff1a \u76ee\u524d\u4f01\u4e1a\u7684\u53ef\u7528\u8d44\u6e90 \u8d44\u4ea7\uff1a\u4f01\u4e1a\u80fd\u6709\u63a7\u5236\u7684\u9884\u671f\u4f1a\u7ed9\u4f01\u4e1a\u5e26\u6765\u6536\u76ca\u7684\u4e1c\u897f \u6d41\u52a8\u6027\u8d44\u4ea7\uff1a\u73b0\u91d1\u6216\u8005\u53d8\u73b0\u80fd\u529b\u8f83\u5f3a\u7684\u8d44\u4ea7 \u975e\u6d41\u52a8\u6027\u8d44\u4ea7\uff1a\u77ed\u671f\u5185\u4e0d\u6253\u7b97\u53d8\u73b0\u6216\u8005\u53d8\u73b0\u80fd\u529b\u8f83\u5dee\u7684\u8d44\u4ea7 \u5e94\u6536\u8d26\u6b3e\uff1a\u5e94\u6536\u8d26\u6b3e\u8d8a\u591a\uff0c\u4f01\u4e1a\u8bdd\u8bed\u6743\u8d8a\u4f4e\uff0c\u6709\u7ade\u4e89\u529b\u7684\u4f01\u4e1a\u901a\u5e38\u8868\u73b0\u4e3a\u5e94\u6536\u8d26\u6b3e\u5f88\u5c11\uff0c\u751a\u81f3\u6ca1\u6709\uff0c\u800c\u9884\u6536\u8d26\u6b3e\u8f83\u591a \u6240\u6709\u8005\u6743\u76ca \u5b9e\u6536\u8d44\u672c\uff1a\u4e00\u822c\u662f\u6307\u516c\u53f8\u6ce8\u518c\u65f6\u7684\u8d44\u672c \u8d44\u672c\u516c\u79ef\uff1a\u4f01\u4e1a\u5728\u7ecf\u8425\u8fc7\u7a0b\u4e2d\u7531\u4e8e\u63a5\u53d7\u6350\u8d60\u3001\u80a1\u672c\u6ea2\u4ef7\u4ee5\u53ca\u6cd5\u5b9a\u8d22\u4ea7\u91cd\u4f30\u589e\u503c\u7b49\u539f\u56e0\u6240\u5f62\u6210\u7684\u516c\u79ef\u91d1 \u672c\u5e74\u5229\u6da6\uff1a\u516c\u53f8\u5f53\u5e74\u8d5a\u5f97\u7684\u5229\u6da6 \u672a\u5206\u914d\u5229\u6da6\uff1a\u516c\u53f8\u4ee5\u524d\u8d5a\u7684\u5229\u6da6\u8fd8\u672a\u6765\u5f97\u53ca\u5206\u7ea2 \u8d1f\u503a \u6d41\u52a8\u6027\u8d1f\u503a\uff1a\u77ed\u671f\u5185\u9700\u8981\u8fd8\u7684\u8d1f\u503a \u975e\u6d41\u52a8\u6027\u8d1f\u503a \u6d41\u52a8\u6bd4\u7387 = \u6d41\u52a8\u8d44\u4ea7 / \u6d41\u52a8\u8d1f\u503a \uff08\u6700\u597d\u5927\u4e8e200%\uff09 \u5229\u6da6\u8868 \u4e00\u6bb5\u65f6\u95f4\u5185\u4f01\u4e1a\u5229\u7528\u8d44\u6e90\u5e26\u6765\u56de\u62a5\u7684\u80fd\u529b\u548c\u6548\u7387 \u7ecf\u8425\u5229\u6da6\uff1a\u4e3b\u4e1a\u6536\u5165 \u6263\u975e\u51c0\u5229\u6da6\uff1a\u6263\u9664\u5f69\u7968\u4e2d\u5956\u548c\u7092\u80a1\u975e\u65e5\u5e38\u6536\u5165\u548c\u652f\u51fa\u540e\u7684\u5229\u6da6 \u6bdb\u5229\u7387\uff1a \u6bdb\u5229\u6da6\u5360\u8425\u4e1a\u6536\u5165\u7684\u767e\u5206\u6bd4\uff0c\u5176\u4e2d\u6bdb\u5229\u6da6\u4e3a\u8425\u4e1a\u6536\u5165\u51cf\u53bb\u8425\u4e1a\u6210\u672c \u6bdb\u5229\u7387\u7684\u6bd4\u8f83\u4e3b\u8981\u662f\u57fa\u4e8e\u884c\u4e1a\u5185\u548c\u81ea\u8eab\u5386\u53f2\u6c34\u5e73 \u901a\u5e38\u6bdb\u5229\u7387\u4e0d\u80fd\u5c0f\u4e8e30% \u51c0\u5229\u6da6\uff1a \u51c0\u5229\u6da6 = \u6bdb\u5229\u6da6 - \u4e09\u8d39 - \u7a0e\u8d39 \u4e09\u8d39 = \u9500\u552e\u8d39 + \u7ba1\u7406\u8d39 + \u8d22\u52a1\u8d39 \u975e\u7ecf\u8425\u5229\u6da6\uff1a\u526f\u4e1a\u6536\u5165 \u73b0\u91d1\u6d41\u91cf\u8868 \u6d41\u52a8\u73b0\u91d1\u8d1f\u503a\u4fdd\u969c\u6bd4\u7387 = \u6d41\u52a8\u73b0\u91d1 / \u6d41\u52a8\u8d1f\u503a \u8868\u660e\u7684\u662f\u4f01\u4e1a\u80fd\u5426\u7528\u4e00\u5e74\u5185\u6d41\u52a8\u7684\u73b0\u91d1\u6765\u507f\u8fd8\u4e00\u5e74\u5185\u6d41\u52a8\u7684\u503a\u52a1\uff0c\u6bd4\u7387\u8d8a\u9ad8\uff0c\u8bf4\u660e\u6709\u66f4\u591a\u7684\u6d41\u52a8\u8d44\u91d1\u6765\u507f\u8fd8\u6d41\u52a8\u503a\u52a1","title":"\u57fa\u672c\u9762"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#31","text":"\u8d22\u62a5\u4e0b\u8f7d\uff1a \u5de8\u6f6e\u8d44\u8baf\u7f51: http://www.cninfo.com.cn/ \u4e0a\u4ea4\u6240\u5b98\u7f51\uff1a http://www.sse.com.cn/ \u6df1\u4ea4\u6240\u5b98\u7f51\uff1a http://www.szse.cn/ \u675c\u90a6\u5206\u6790\u6cd5\uff1a ROE = \u51c0\u5229\u7387 * \u603b\u8d44\u4ea7\u5468\u8f6c\u7387 * \u6743\u76ca\u4e58\u6570 \u603b\u8d44\u4ea7\u5468\u8f6c\u7387\uff1a\u9500\u552e\u6536\u5165 / \u603b\u8d44\u4ea7 \u8861\u91cf\u8d44\u6e90\u7684\u5229\u7528\u6548\u7387 \u603b\u8d44\u4ea7\u5468\u8f6c\u7387\u8d8a\u9ad8\uff0c\u516c\u53f8\u8fd0\u8425\u80fd\u529b\u8d8a\u5f3a\uff0c\u516c\u53f8\u76c8\u5229\u80fd\u529b\u8d8a\u9ad8 \u6743\u76ca\u4e58\u6570\uff1a\u8d44\u4ea7 / \u6240\u6709\u8005\u6743\u76ca \u6743\u76ca\u4e58\u6570\u8d8a\u9ad8\uff0c\u6240\u6709\u8005\u6743\u76ca\u5360\u6bd4\u8d8a\u4f4e\uff0c\u8d44\u4ea7\u8d1f\u503a\u7387\u8d8a\u9ad8 3+1\u9009\u80a1\u6cd5\uff1a 3\u4ee3\u6307\u675c\u90a6\u5206\u6790\u6cd5\u4e2dROE\u7684\u4e09\u4e2a\u6307\u6807 1\u4ee3\u6307\u7ecf\u8425\u6027\u73b0\u91d1\u6d41\u548c\u51c0\u5229\u6da6\u4e4b\u6bd4 \u4e94\u4e2a\u6b65\u9aa4\uff1a \u51c0\u8d44\u4ea7\u6536\u76ca\u7387\uff1a\u6700\u8fd1\u4e09\u5e74ROE\u572815%\u4ee5\u4e0a \u51c0\u5229\u7387 / \u6bdb\u5229\u7387\uff1a\u8d8a\u9ad8\uff0c\u516c\u53f8\u76c8\u5229\u80fd\u529b\u8d8a\u5f3a \u603b\u8d44\u4ea7\u5468\u8f6c\u7387\uff1a\u8d8a\u9ad8\uff0c\u516c\u53f8\u80fd\u529b\u8d8a\u5f3a \u6743\u76ca\u4e58\u6570\uff1a\u8d8a\u4f4e\uff0c\u8d1f\u503a\u7387\u8d8a\u4f4e\uff0c\u516c\u53f8\u8d8a\u7a33\u5b9a \u76c8\u5229\u8d28\u91cf\uff1a\u6709\u5f88\u9ad8\u7684\u5229\u6da6\u5374\u6ca1\u6709\u76f8\u5e94\u7684\u73b0\u91d1\u6d41\uff0c\u8bf4\u660e\u5229\u6da6\u4e2d\u6c34\u5206\u8f83\u591a","title":"\u8d22\u62a53+1\u9009\u80a1\u6cd5"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_14","text":"\u300a\u80a1\u5e02\u7a33\u8d5a\u300b\u4f5c\u8005\uff1a\u4e54\u5c14\u00b7\u683c\u6797\u5e03\u62c9\u7279 \u8d44\u4ea7\u56de\u62a5\u7387 \uff08\u76f8\u5f53\u4e8e ROE\uff09 \u80a1\u7968\u6536\u76ca\u7387 \uff08\u76f8\u5f53\u4e8e 1/PE\uff09 \u539f\u7406\uff1a \u6309\u7167ROE\u4ece\u9ad8\u5230\u5e95\u6392\u5e8f \u6309\u7167PE\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f \u4e24\u8005\u7efc\u5408\u627e\u51fa\u6700\u4f73\u7ec4\u5408\uff08\u6392\u540d = ROE\u7684\u6392\u540d + PE\u6392\u540d\uff09 \u795e\u5947\u516c\u5f0f\u7684\u4e09\u4e2a\u524d\u63d0\u6761\u4ef6 \u6df1\u4fe1\u5e76\u575a\u6301\u957f\u671f\u6295\u8d44 \u795e\u5947\u516c\u5f0f\u4e0d\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u6bcf\u65f6\u6bcf\u523b\u90fd\u6709\u6548\uff0c\u9700\u8981\u6709\u8010\u5fc3 \u8c03\u6574\u81ea\u5df1\u7684\u5fc3\u91cc\u9884\u671f \u5b9e\u64cd\uff1a \u6253\u5f00\u4e1c\u65b9\u8d22\u5bcc\u7f51\u7684PC\u7aef\uff0c\u70b9\u51fb\u5de6\u4fa7\u7684**\u6caa\u6df1**\uff0c\u5c06\u52a0\u6743\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\u548c\u5e02\u76c8\u7387\u6dfb\u52a0\u8fdb\u83dc\u5355\u680f \u5728\u80a1\u7968\u90e8\u5206\u70b9\u51fb\u53f3\u952e\uff0c\u5c06\u6570\u636e\u5bfc\u51fa\u81f4excel\u8868\u683c \u5bfc\u51fa\u5c5e\u6027\u5305\u542b\uff0c\u516c\u53f8\u540d\u79f0\uff0c\u80a1\u4ef7\uff0c\u52a0\u6743\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\uff0c\u5e02\u76c8\u7387 \u5254\u9664\u540d\u79f0\u4ee5*ST\u3001ST\u3001PT\u3001S\u5f00\u5934\u7684\u80a1\u7968\uff08\u4e8f\u635f\u6216\u5373\u5c06\u9000\u5e02\uff09 \u5254\u9664\u6389\u80a1\u4ef7\u4e3a\u6a2a\u6760\u7684\u80a1\u7968 \u5254\u9664\u52a0\u6743\u51c0\u8d44\u4ea7\u6536\u76ca\u7387\u548c\u5e02\u76c8\u7387\u4e3a\u8d1f\u6570\u7684\u80a1\u7968 \u6309\u7167ROE\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f \u6309\u7167PE\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f \u5c06\u4e24\u4e2a\u6392\u540d\u76f8\u52a0\u627e\u51fa\u524d30\u53ea\u80a1\u7968","title":"\u795e\u5947\u516c\u5f0f"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_15","text":"\u5bf9\u5e94\u7a7a\u4e2d\u697c\u9601\u7406 \u91cf\uff1a\u6210\u4ea4\u91cf\uff0c\u6210\u4ea4\u91cf\u8d8a\u591a\uff0c\u5e02\u573a\u8d8a\u6d3b\u8dc3 \u4ef7\uff1a\u6210\u4ea4\u4ef7 \u65f6\uff1a\u80a1\u7968\u4ef7\u683c\u53d8\u5316\u7684\u65f6\u95f4\u5468\u671f \u7a7a\uff1a\u80a1\u7968\u4ef7\u683c\u6ce2\u52a8\u7684\u7a7a\u95f4\u8303\u56f4 \u6280\u672f\u5206\u6790\u662f\u57fa\u4e8e\u4e09\u4e2a\u7406\u8bba\u5047\u8bbe\u6210\u7acb\u7684 \u5047\u8bbe\u4e00\uff1a\u80a1\u4ef7\u53d8\u5316\u6db5\u76d6\u4e00\u5207\u5e02\u573a\u4fe1\u606f \u5047\u8bbe\u4e8c\uff1a\u4ef7\u683c\u6cbf\u8d8b\u52bf\u79fb\u52a8 \u5047\u8bbe\u4e09\uff1a\u5386\u53f2\u4f1a\u91cd\u6f14 \u6280\u672f\u5206\u6790\u901a\u8fc7\u6280\u672f\u6307\u6807\u7814\u7a76\u80a1\u7968\u4ef7\u683c\u8fc7\u53bb\u7684\u8fd0\u884c\u8f68\u8ff9\uff0c\u5bfb\u627e\u80a1\u4ef7\u672a\u6765\u53d8\u5316\u65b9\u5411\u7684\u7ebf\u7d22\u3002 \u6280\u672f\u5206\u6790\u7684\u5de5\u5177 K\u7ebf\uff1a k\u7ebf\u7684\u51e0\u79cd\u5f62\u6001\uff1a \u5149\u5934\u5149\u811a\u9633\u7ebf \u5149\u811a\u9633\u7ebf \u5982\u679c\u51fa\u73b0\u5728\u9ad8\u4ef7\u533a\u8868\u793a\u540e\u5e02\u770b\u8dcc \u5149\u5934\u9633\u7ebf \u5927\u9633\u7ebf \u5c0f\u9633\u7ebf \u4e00\u5b57\u7ebf \u5341\u5b57\u661f\u7ebf \u4e24\u7c7b\u6295\u8d44\u8005 \u591a\u5934\uff1a\u770b\u6da8\u7684\u4eba \u7a7a\u5934\uff1a\u770b\u8dcc\u7684\u4eba \u8d8b\u52bf\u5206\u6790\u6cd5 \u80a1\u5e02\u6309\u7167\u4e00\u5b9a\u89c4\u5f8b\u8fd0\u884c\uff0c\u6da8\u52bf\u6216\u8005\u8dcc\u52bf\u4f1a\u5ef6\u7eed\uff0c\u76f4\u5230\u9047\u5230\u963b\u529b\u6216\u8005\u652f\u6491\u6539\u53d8\u5176\u8d70\u52bf \u652f\u6491\u7ebf \u652f\u6491\u4f4d\uff1a\u5728\u8fd9\u4e2a\u4ef7\u4f4d\u65f6\uff0c\u591a\u65b9\u529b\u91cf\u8db3\u591f\u5f3a\u5927\uff0c\u4ef7\u683c\u5f00\u59cb\u53cd\u5f39 \u963b\u529b\u7ebf \u963b\u529b\u4f4d\uff1a\u5728\u8fd9\u4e2a\u4ef7\u4f4d\u65f6\uff0c\u7a7a\u623f\u529b\u91cf\u8db3\u591f\u5f3a\u5927\uff0c\u4ef7\u683c\u5f00\u59cb\u4e0b\u8dcc \u8d8b\u52bf\u7ebf \u95ee\uff1a\u5982\u4f55\u5229\u7528\u652f\u6491\u4f4d\u548c\u963b\u529b\u4f4d\uff1f \u7b54\uff1a\u5728\u652f\u6491\u4f4d\u4e70\u5165\uff0c\u5728\u963b\u529b\u4f4d\u5356\u51fa\uff1b\u5728\u652f\u6491\u4f4d\u4e0b\u8bbe\u7f6e\u4e00\u4e2a\u6b62\u635f\u4ef7\uff0c\u5982\u679c\u80a1\u4ef7\u53cd\u5f39\uff0c\u4fdd\u6301\u4e0d\u52a8\uff0c\u5982\u679c\u80a1\u4ef7\u6ca1\u6709\u53cd\u5f39\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u6e05\u4ed3\u9000\u573a\uff1b\u5f53\u80a1\u4ef7\u6da8\u5230\u963b\u529b\u4f4d\u65f6\uff0c\u5356\u51fa\u7684\u540c\u65f6\uff0c\u5728\u963b\u529b\u4f4d\u4e0a\u8bbe\u7f6e\u4e00\u4e2a\u4e70\u5355\uff0c\u5982\u679c\u80a1\u4ef7\u8dcc\u4e86\uff0c\u4fdd\u6301\u4e0d\u52a8\uff0c\u6da8\u4e86\u4e70\u5355\u542f\u52a8\u81ea\u52a8\u8d2d\u5165\u4e00\u4e9b\u3002 \u79fb\u52a8\u5e73\u5747\u7ebf \u5747\u7ebf\uff0c\u82f1\u6587MA\uff0c\u53cd\u5e94\u6570\u636e\u5728\u65f6\u95f4\u7a97\u53e3\u4e0a\u7684\u5e73\u5747\u4ef7\u683c \u6280\u672f\u5206\u6790\u7684\u5929\u654c \u5b58\u5728\u4ea4\u6613\u8d39\u7528 \u4ea4\u6613\u8005\u7684\u5fc3\u9b54 **\u4e3a\u4ec0\u4e48\u8981\u4e86\u89e3\u6280\u672f\u5206\u6790\uff1f\uff1f ** \u6280\u672f\u5206\u6790\u80fd\u91cf\u5316\u5e02\u573a\u60c5\u7eea\uff0c\u6b63\u786e\u7387\u6bd4\u731c\u6d4b\u8981\u9ad8\u4e00\u4e9b\u3002","title":"\u6280\u672f\u9762"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_16","text":"\u5bf9\u5e94\u7a7a\u4e2d\u697c\u9601\u7406\u8bba \u7b2c\u4e00\u6b65\uff1a\u5206\u8fa8\u6d88\u606f \u7b2c\u4e00\u79cd\u6d88\u606f\uff1a\u5e84\u5bb6\u6545\u610f\u653e\u5047\u6d88\u606f \u7b2c\u4e8c\u79cd\u6d88\u606f\uff1a\u4e0a\u5e02\u516c\u53f8\u771f\u6709\u91cd\u5927\u4e8b\u4ef6 \u7b2c\u4e8c\u6b65\uff1a\u5224\u65ad\u6d88\u606f\u7684\u53ef\u4fe1\u5ea6","title":"\u6d88\u606f\u9762"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_17","text":"\u5bf9\u5e94\u7a7a\u4e2d\u697c\u9601\u7406\u8bba \u504f\u89c1\uff1a\u5728\u6295\u8d44\u5fc3\u7406\u4e2d\uff0c\u6211\u4eec\u628a\u4e00\u5207\u8ba9\u51b3\u7b56\u80cc\u79bb\u7406\u6027\u7684\u56e0\u7d20\u90fd\u79f0\u4e4b\u4e3a\u504f\u89c1 \u8ba4\u77e5\u504f\u89c1\uff1a\u4fe1\u606f\u83b7\u53d6\u6216\u5904\u7406\u80fd\u529b\u6709\u9650 \u60c5\u7eea\u504f\u89c1\uff1a\u56e0\u6267\u7740\u6216\u8005\u81ea\u6211\u4fdd\u62a4\u4ea7\u751f\u504f\u89c1","title":"\u5fc3\u7406\u9762"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_18","text":"\u6bd4\u8f83\u9002\u5408\u666e\u901a\u6295\u8d44\u8005\u9009\u80a1 \u9009\u80a1\u7b2c\u4e00\u770b\u884c\u4e1a \u5468\u671f\u6027 \u5468\u671f\u6027\u884c\u4e1a\uff08\u53d6\u51b3\u4e8e\u7ecf\u6d4e\u5927\u73af\u5883\uff09 \u884c\u4e1a\u7684\u666f\u6c14\u5ea6\u4e0e\u5916\u90e8\u5b8f\u89c2\u7ecf\u6d4e\u73af\u5883\u9ad8\u5ea6\u6b63\u76f8\u5173\uff0c\u5e76\u5448\u73b0\u5468\u671f\u6027\u5faa\u73af\u7684\u884c\u4e1a \u94a2\u94c1\uff0c\u9020\u8239\uff0c\u6c7d\u8f66\uff0c\u623f\u5730\u4ea7\uff0c\u6709\u8272\u91d1\u5c5e\uff0c\u94f6\u884c\u3002\u3002\u3002 \u6c7d\u8f66\uff0c\u94a2\u94c1\uff0c\u673a\u68b0\uff0c\u822a\u7a7a\uff0c\u5efa\u7b51\uff0c\u519b\u5de5 \u975e\u5468\u671f\u6027\u884c\u4e1a\uff08\u6bd4\u8f83\u5bb9\u6613\u51fa\u725b\u80a1\uff09 \u533b\u7597\uff0c\u6d88\u8d39\u54c1\uff0c\u73af\u4fdd\uff0c\u4ea4\u901a\u8fd0\u8f93 \u533b\u836f\uff0c\u533b\u7597\u5668\u68b0\uff0c\u8ba1\u7b97\u673a\u8f6f\u4ef6\uff0c\u6d88\u8d39\uff0c\u4f11\u95f2\u5a31\u4e50 \u9632\u5fa1\u6027\u884c\u4e1a \u7cae\u6cb9\u98df\u54c1\uff0c\u516c\u7528\u4e8b\u4e1a \u5468\u671f\u6027\u884c\u4e1a\u9002\u5408\u6ce2\u6bb5\u64cd\u4f5c\uff0c\u975e\u5468\u671f\u6027\u884c\u4e1a\u9002\u5408\u957f\u671f\u6301\u6709\uff0c\u9632\u5fa1\u6027\u884c\u4e1a\u5f88\u96be\u6709\u8d85\u989d\u6536\u76ca \u751f\u547d\u5468\u671f \u521d\u521b\u671f\uff1a \u884c\u4e1a\u524d\u666f\u5e7f\u9614\uff0c\u5e02\u573a\u9700\u6c42\u4e0d\u9ad8\uff0c\u4ea7\u54c1\u9500\u91cf\u8f83\u4f4e\uff0c\u4f01\u4e1a\u5f15\u529b\u8f83\u5c11 \u6210\u957f\u671f\uff1a \u4ea7\u54c1\u66f4\u65b0\u8fed\u4ee3\u5feb\uff0c\u8d44\u672c\u6d8c\u5165\u591a\uff0c\u589e\u957f\u5177\u6709\u786e\u5b9a\u6027 \u6210\u719f\u671f\uff1a \u5e02\u573a\u4efd\u989d\u5360\u6bd4\u7a33\u5b9a\uff0c\u4ea7\u54c1\u4ef7\u683c\u8f83\u4e3a\u7a33\u5b9a\uff0c\u589e\u503c\u670d\u52a1\u589e\u591a\uff0c\u4f01\u4e1a\u5229\u6da6\u8f83\u4e3a\u4e30\u539a\uff0c\u98ce\u9669\u76f8\u5bf9\u66f4\u4f4e \u8870\u9000\u671f\uff1a \u5e02\u573a\u9700\u6c42\u51cf\u5c11\uff0c\u4ea7\u54c1\u9500\u91cf\u4e0b\u6ed1\uff0c\u4f01\u4e1a\u5229\u6da6\u964d\u4f4e \u5b9e\u64cd \u89c4\u907f\u521d\u521b\u671f\u8870\u9000\u671f\u4f01\u4e1a \u6210\u957f\u6027\u4f01\u4e1a\u662f\u6700\u4f73\u9009\u62e9 \u6210\u719f\u671f\u4f01\u4e1a\u9002\u5408\u7a33\u5065\u6027\u6295\u8d44\u8005 \u9009\u62e9\u81ea\u5df1\u66f4\u719f\u6089\u7684\u884c\u4e1a \u9009\u80a1\u7b2c\u4e8c\u770b\u516c\u53f8","title":"\u884c\u4e1a\u9009\u80a1"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_19","text":"\u6210\u957f\u80a1\u4f01\u4e1a\u7279\u70b9\uff1a \u5904\u4e8e\u671d\u9633\u884c\u4e1a \u8d77\u6b65\u5e02\u503c\u5c0f \u7ade\u4e89\u4f18\u52bf\u5f3a","title":"\u6210\u957f\u80a1\u6295\u8d44"},{"location":"%E7%90%86%E8%B4%A2/%E8%82%A1%E7%A5%A8%E7%90%86%E8%B4%A2/#_20","text":"\u7b2c\u4e00\u6b65\uff1a\u6311\u9009\u770b\u597d\u7684\u884c\u4e1a \u7b2c\u4e8c\u6b65\uff1a\u6311\u9009\u884c\u4e1a\u6307\u6570\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u6210\u5206\u80a1 \u7b2c\u4e09\u6b65\uff1a\u9009\u51fa\u6765\u7684\u4e2a\u80a1\u8fdb\u884c\u4ea4\u53c9\u9a8c\u8bc1 \u7b2c\u56db\u6b65\uff1a\u901a\u8fc7\u8d22\u52a1\u5206\u6790\u7b5b\u9009 \u7b2c\u4e94\u6b65\uff1a\u5224\u65ad\u4f30\u503c\u7684\u9ad8\u4f4e","title":"\u529b\u54e5\u539f\u521b\u6307\u6570\u9009\u80a1\u6cd5"},{"location":"%E7%90%86%E8%B4%A2/%E8%87%AA%E9%80%89%E8%82%A1/","text":"\u533b\u836f\u884c\u4e1a \u00b6 \u9633\u666e\u533b\u7597\uff1a\u56fd\u5185\u771f\u7a7a\u91c7\u8840\u7cfb\u7edf\u884c\u4e1a\u9f99\u5934\u4f01\u4e1a \u6052\u745e\u533b\u836f\uff1a\u56fd\u5185\u5316\u5b66\u5236\u836f\u5b9e\u529b\u7b2c\u4e00 https://finance.sina.com.cn/realstock/company/sh600276/nc.shtml \u8fbe\u5b89\u57fa\u56e0\uff1a\u56fd\u5185\u6838\u9178\u8bca\u65ad\u8bd5\u5242\u9886\u57df\u9886\u5148\u8005 https://finance.sina.com.cn/realstock/company/sz002030/nc.shtml \u534e\u5170\u751f\u7269\uff1a\u56fd\u5185\u8840\u6db2\u5236\u54c1\u884c\u4e1a\u9f99\u5934\u4f01\u4e1a https://finance.sina.com.cn/realstock/company/sz002007/nc.shtml \u79d1\u534e\u751f\u7269\uff1a\u56fd\u5185\u4f53\u5916\u4e34\u5e8a\u8bca\u65ad\u884c\u4e1a\u9f99\u5934\u4f01\u4e1a https://finance.sina.com.cn/realstock/company/sz002022/nc.shtml \u7231\u5c14\u773c\u79d1\uff1a\u773c\u79d1\u533b\u7597\u9f99\u5934 https://finance.sina.com.cn/realstock/company/sz300015/nc.shtml \u9c7c\u8dc3\u533b\u7597\uff1a\u533b\u7597\u5668\u68b0\u9f99\u5934 https://finance.sina.com.cn/realstock/company/sz002223/nc.shtml \u6d88\u8d39\u5a31\u4e50 \u00b6 \u4e07\u8fbe\u7535\u5f71\uff1a\u56fd\u5185\u7535\u5f71\u9662\u7b2c\u4e00\u54c1\u724c \uff08\u4f4e\u4f4d 20200618\uff09 https://finance.sina.com.cn/realstock/company/sz002739/nc.shtml \u4e07\u5174\u79d1\u6280\uff1a\u4e2d\u56fd\u6d88\u8d39\u7c7b\u8f6f\u4ef6\u7b2c\u4e00\u80a1 https://finance.sina.com.cn/realstock/company/sz300624/nc.shtml \u8d35\u5dde\u8305\u53f0\uff1a\u767d\u9152\u7b2c\u4e00\u54c1\u724c\uff0c\u4e94\u5e74\u5185\u6ca1\u6709\u5176\u5b83\u767d\u9152\u4f01\u4e1a\u53ef\u4ee5\u64bc\u52a8\u5b83\u7684\u8001\u5927\u5730\u4f4d https://finance.sina.com.cn/realstock/company/sh600519/nc.shtml \u79d1\u6280 \u00b6 \u79d1\u5927\u8baf\u98de\uff1a\u667a\u80fd\u8bed\u97f3\u3001\u4e2d\u6587\u8bed\u97f3\u7b49\u4ea7\u4e1a\u8bed\u97f3\u5e02\u573a\u7684\u7edd\u5bf9\u8001\u5927 https://finance.sina.com.cn/realstock/company/sz002230/nc.shtml \u73af\u4fdd \u00b6 \u6bd4\u4e9a\u8fea\uff1a\u4e2d\u56fd\u65b0\u80fd\u6e90\u6c7d\u8f66\u6280\u672f\u7efc\u5408\u5b9e\u529b\u7b2c\u4e00 https://finance.sina.com.cn/realstock/company/sz002594/nc.shtml \u4ea4\u901a\u8fd0\u8f93 \u00b6 \u987a\u4e30\u63a7\u80a1\uff1a\u56fd\u5185\u5feb\u9012\u884c\u4e1a\u9f99\u5934 https://finance.sina.com.cn/realstock/company/sz002352/nc.shtml \u5176\u4ed6 \u00b6 \u4e1c\u65b9\u8d22\u5bcc\uff1a\u56fd\u5185\u9886\u5148\u7f51\u7edc\u8d22\u7ecf\u4fe1\u606f\u5e73\u53f0\u7efc\u5408\u8fd0\u8425\u5546 \u4e0a\u6d77\u5bb6\u5316\uff1a\u56fd\u5185\u4e0a\u5e02\u516c\u53f8\u65e5\u5316\u62a4\u7406\u7b2c\u4e00 https://finance.sina.com.cn/realstock/company/sh600315/nc.shtml","title":"\u81ea\u9009\u80a1"},{"location":"%E7%90%86%E8%B4%A2/%E8%87%AA%E9%80%89%E8%82%A1/#_1","text":"\u9633\u666e\u533b\u7597\uff1a\u56fd\u5185\u771f\u7a7a\u91c7\u8840\u7cfb\u7edf\u884c\u4e1a\u9f99\u5934\u4f01\u4e1a \u6052\u745e\u533b\u836f\uff1a\u56fd\u5185\u5316\u5b66\u5236\u836f\u5b9e\u529b\u7b2c\u4e00 https://finance.sina.com.cn/realstock/company/sh600276/nc.shtml \u8fbe\u5b89\u57fa\u56e0\uff1a\u56fd\u5185\u6838\u9178\u8bca\u65ad\u8bd5\u5242\u9886\u57df\u9886\u5148\u8005 https://finance.sina.com.cn/realstock/company/sz002030/nc.shtml \u534e\u5170\u751f\u7269\uff1a\u56fd\u5185\u8840\u6db2\u5236\u54c1\u884c\u4e1a\u9f99\u5934\u4f01\u4e1a https://finance.sina.com.cn/realstock/company/sz002007/nc.shtml \u79d1\u534e\u751f\u7269\uff1a\u56fd\u5185\u4f53\u5916\u4e34\u5e8a\u8bca\u65ad\u884c\u4e1a\u9f99\u5934\u4f01\u4e1a https://finance.sina.com.cn/realstock/company/sz002022/nc.shtml \u7231\u5c14\u773c\u79d1\uff1a\u773c\u79d1\u533b\u7597\u9f99\u5934 https://finance.sina.com.cn/realstock/company/sz300015/nc.shtml \u9c7c\u8dc3\u533b\u7597\uff1a\u533b\u7597\u5668\u68b0\u9f99\u5934 https://finance.sina.com.cn/realstock/company/sz002223/nc.shtml","title":"\u533b\u836f\u884c\u4e1a"},{"location":"%E7%90%86%E8%B4%A2/%E8%87%AA%E9%80%89%E8%82%A1/#_2","text":"\u4e07\u8fbe\u7535\u5f71\uff1a\u56fd\u5185\u7535\u5f71\u9662\u7b2c\u4e00\u54c1\u724c \uff08\u4f4e\u4f4d 20200618\uff09 https://finance.sina.com.cn/realstock/company/sz002739/nc.shtml \u4e07\u5174\u79d1\u6280\uff1a\u4e2d\u56fd\u6d88\u8d39\u7c7b\u8f6f\u4ef6\u7b2c\u4e00\u80a1 https://finance.sina.com.cn/realstock/company/sz300624/nc.shtml \u8d35\u5dde\u8305\u53f0\uff1a\u767d\u9152\u7b2c\u4e00\u54c1\u724c\uff0c\u4e94\u5e74\u5185\u6ca1\u6709\u5176\u5b83\u767d\u9152\u4f01\u4e1a\u53ef\u4ee5\u64bc\u52a8\u5b83\u7684\u8001\u5927\u5730\u4f4d https://finance.sina.com.cn/realstock/company/sh600519/nc.shtml","title":"\u6d88\u8d39\u5a31\u4e50"},{"location":"%E7%90%86%E8%B4%A2/%E8%87%AA%E9%80%89%E8%82%A1/#_3","text":"\u79d1\u5927\u8baf\u98de\uff1a\u667a\u80fd\u8bed\u97f3\u3001\u4e2d\u6587\u8bed\u97f3\u7b49\u4ea7\u4e1a\u8bed\u97f3\u5e02\u573a\u7684\u7edd\u5bf9\u8001\u5927 https://finance.sina.com.cn/realstock/company/sz002230/nc.shtml","title":"\u79d1\u6280"},{"location":"%E7%90%86%E8%B4%A2/%E8%87%AA%E9%80%89%E8%82%A1/#_4","text":"\u6bd4\u4e9a\u8fea\uff1a\u4e2d\u56fd\u65b0\u80fd\u6e90\u6c7d\u8f66\u6280\u672f\u7efc\u5408\u5b9e\u529b\u7b2c\u4e00 https://finance.sina.com.cn/realstock/company/sz002594/nc.shtml","title":"\u73af\u4fdd"},{"location":"%E7%90%86%E8%B4%A2/%E8%87%AA%E9%80%89%E8%82%A1/#_5","text":"\u987a\u4e30\u63a7\u80a1\uff1a\u56fd\u5185\u5feb\u9012\u884c\u4e1a\u9f99\u5934 https://finance.sina.com.cn/realstock/company/sz002352/nc.shtml","title":"\u4ea4\u901a\u8fd0\u8f93"},{"location":"%E7%90%86%E8%B4%A2/%E8%87%AA%E9%80%89%E8%82%A1/#_6","text":"\u4e1c\u65b9\u8d22\u5bcc\uff1a\u56fd\u5185\u9886\u5148\u7f51\u7edc\u8d22\u7ecf\u4fe1\u606f\u5e73\u53f0\u7efc\u5408\u8fd0\u8425\u5546 \u4e0a\u6d77\u5bb6\u5316\uff1a\u56fd\u5185\u4e0a\u5e02\u516c\u53f8\u65e5\u5316\u62a4\u7406\u7b2c\u4e00 https://finance.sina.com.cn/realstock/company/sh600315/nc.shtml","title":"\u5176\u4ed6"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/","text":"\u4f4d\u8fd0\u7b97 \u00b6 \u98981\uff1a\u627e\u51fa\u552f\u4e00\u6210\u5bf9\u7684\u6570 \u00b6 \u89e3\u9898\u601d\u8def\uff1a n 1 1 = n, \u4e00\u4e2a\u6570\u4e24\u6b21^\u540c\u4e00\u4e2a\u6570\uff0c\u5f97\u5230\u6570\u672c\u8eab\u3002 n^0 = n, \u4efb\u4f55\u6570\u5f02\u62160\u90fd\u662f\u4ed6\u81ea\u5df1\u3002 \u5c06res \u6570\u7ec4\u4e0b\u6807 \u6570\u7ec4\u7684value\uff0c\u6700\u7ec8\u5f97\u51fa\u7684\u7ed3\u679c\u5c31\u4e3a\u91cd\u590d\u503c\u3002 def find_repeat ( nums ): res = 0 for i in range ( len ( nums )): res ^= i res ^= nums [ i ] return res print ( find_repeat ([ 1 , 2 , 3 , 3 , 4 , 5 , 6 ])) \u98982\uff1a\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 \u00b6 \u89e3\u9898\u601d\u8def\uff1a \u89e3\u6cd5\u4e00 \u00b6 \u5c069\u7684\u4e8c\u8fdb\u5236\u6570\u7684\u6bcf\u4e00\u4f4d\u4e0e1\u505a\u4e0e\u8fd0\u7b97\uff0c\u5982\u679c\u7ed3\u679c\u4e3a1\u79fb\u5230\u8be5\u4f4d\u7684\u503c\uff0c\u5219\u8be5\u4f4d\u6570\u5b57\u4e3a1\uff0c\u5426\u5219\u4e3a0\u3002 \u9700\u5faa\u73af32\u6b21\uff0c\u5c061\u4f9d\u6b21\u79fb\u5230\u6307\u5b9a\u4f4d\u6570\u4e0e9\u7684\u4e8c\u8fdb\u5236\u6570\u505a\u4e0e\u8fd0\u7b97\uff0c\u5982\u679c\u7ed3\u679c\u4e3a1\u79fb\u5230\u8be5\u4f4d\u7684\u503c\u5219\u8ba1\u6570\u3002 \u6ce8\uff1a32\u6b21\uff0c\u6574\u6570\u4e3a\u56db\u5b57\u8282\u8868\u793a\uff0c\u4e00\u5b57\u8282\u516b\u4f4d\u3002 def count_bin_1 ( n ): count = 0 for i in range ( 32 ): if ( 1 << i ) & n == 1 << i : count += 1 return count print ( count_bin_1 ( 9 )) \u89e3\u6cd5\u4e8c \u00b6 \u67e5\u770b\u4e0a\u56fe\u603b\u7ed3\u89c4\u5f8b\uff0c(n-1)&n\u5b9e\u9645\u4e0a\u5c31\u662f\u6d88\u96641001\u4e2d\u201c1\u201d\u7684\u8fc7\u7a0b\uff0c\u7edf\u8ba1\u6267\u884c\u4e86\u591a\u5c11\u6b21(n-1)&n\uff0c\u5373\u53ef\u77e5\u90531001\u4e2d\u5305\u542b\u51e0\u4e2a\u201c1\u201d def count_bin_1 ( n ): count = 0 while n != 0 : n = ( n - 1 ) & n count += 1 return count print ( count_bin_1 ( 15 )) \u98983\uff1a\u662f\u5426\u4e3a2\u7684\u6574\u6570\u6b21\u65b9 \u00b6 \u89e3\u9898\u601d\u8def: 2\u7684\u6574\u6570\u6b21\u65b9\uff0c2^0, 2^1, 2^2, \u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u8be5\u6570\u8f6c\u5316\u4e3a2\u8fdb\u5236\u8868\u793a\uff0c\u53ea\u6709\u4e00\u4e2a1\u51fa\u73b0\u3002 def is2 ( n ): return not ( n - 1 ) & n print ( is2 ( 8 )) \u98984\uff1a\u5c06\u4e8c\u8fdb\u5236\u6574\u6570\u7684\u5947\u5076\u4f4d\u4e92\u6362 \u00b6 \u89e3\u9898\u8fc7\u7a0b def exchange ( n ): ji = n & 0xaaaaaaaa # 10101010 10101010 10101010 10101010 ou = n & 0x55555555 # 01010101 01010101 01010101 01010101 return ( ji >> 1 ) ^ ( ou << 1 ) print ( exchange ( 9 )) \u98985\uff1a0~1\u95f4\u6d6e\u70b9\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a \u00b6 \u89e3\u9898\u601d\u8def\uff1a \u6d6e\u70b9\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\u4e582\u632a\u6574\uff0c\u5982\u4e0b\u56fe def float_bin ( f ): res = [ '0.' ] while f != 0 : f = f * 2 res . append ( str ( int ( f ))) f -= int ( f ) return '' . join ( res ) print ( float_bin ( 0.625 )) \u98986\uff1a\u51fa\u73b0k\u6b21\u4e0e\u51fa\u73b01\u6b21 \u00b6 \u89e3\u9898\u601d\u8def\uff1a 2\u4e2a\u76f8\u540c\u76842\u8fdb\u5236\u6574\u6570\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u7ed3\u679c\u4f4d0 10\u4e2a\u76f8\u540c\u768410\u8fdb\u5236\u6574\u6570\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u7ed3\u679c\u4f4d0 k\u4e2a\u76f8\u540c\u7684k\u8fdb\u5236\u6574\u6570\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u7ed3\u679c\u4e3a0 leetcode137 \u9898 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a**\u975e\u7a7a**\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1: \u8f93\u5165: [2,2,3,2] \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: [0,1,0,1,0,1,99] \u8f93\u51fa: 99 \u8be5\u9898\u53ef\u4ee5\u7528\u4e09\u8fdb\u5236\u6570\u6765\u5b9e\u73b0\uff0c3\u4e2a\u4e09\u8fdb\u5236\u505a\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u4e3a0\uff0c\u843d\u5355\u7684\u5373\u4e3a\u7b54\u6848 class Solution : def singleNumber ( self , nums : List [ int ]) -> int : # \u8fd4\u56de\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\u4e4b\u540e\u7684\u4e09\u8fdb\u5236 three = 0 for i in range ( len ( nums )): three = self . ncarry ( three , nums [ i ], base = 3 ) return three def ncarry ( self , m , n , base = 2 ): '''\u5c06\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u4ee5k\u8fdb\u5236\u6570\u505a\u8fd4\u56de\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\u8fd4\u56de m: \u5341\u8fdb\u5236\u6570 n: \u5341\u8fdb\u5236\u6570 return: \u5341\u8fdb\u5236\u6570 ''' m = self . toradix ( m , base ) n = self . toradix ( n , base ) res = [] for i in range ( 32 ): res . append (( m [ i ] + n [ i ]) % base ) return self . todeci ( res , base = 3 ) def todeci ( self , nums , base = 2 ): '''\u4f20\u5165\u6570\u503c\u5217\u8868\uff0c\u5c06\u5217\u8868\u8f6c\u4e3a\u5341\u8fdb\u5236\u6570\uff0cbase\u4ee3\u8868\u4f20\u5165\u7684\u8fdb\u5236''' res = 0 for i in range ( 32 ): res += ( base ** i ) * nums [ 31 - i ] return res def toradix ( self , n , base = 2 ): '''\u5c06\u5341\u8fdb\u5236\u6570\u8f6c\u6210\u6307\u5b9a\u8fdb\u5236 m: \u9700\u8981\u8f6c\u7684\u6570 base: \u8981\u8f6c\u6362\u7684\u8fdb\u5236 return: \u5bf9\u5e94\u4f4d\u6570\u7ec4\u621032\u4f4d\u7684\u5217\u8868 # [0, 0, 0, 0...1, 1, 1] ''' res = [ 0 ] * 32 i = 31 # \u4e0b\u6807 while n // base != 0 : res [ i ] = n % base n //= base i -= 1 res [ i ] = n % base return res \u6ce8\u610f\uff1a\u53ea\u9002\u7528\u4e8e\u5217\u8868\u6570\u5b57\u5168\u4e3a\u6b63\u6570\u7684\u60c5\u51b5\u3002 \u603b\u7ed3 \u00b6 \u5f02\u6216\u8fd0\u7b97\u76f8\u5f53\u4e8e\u4e0d\u8fdb\u4f4d\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c1+1\u4e3a0\uff0c0+0\u4e3a0\uff0c1+0\u4e3a1\uff0c\u6240\u4ee5\u5f02\u6216\u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1 n^0 = n; n x x = n; x^x = 0 \u5224\u65ad\u4e8c\u8fdb\u5236\u6570\u67d0\u4f4d\u662f\u5426\u4e3a1\uff1a1<<\u67d0\u4f4d & n = 1<<\u67d0\u4f4d\uff0c\u53ef\u67e5\u9605\u98982\u89e3\u6cd5\u4e00 (n-1) & n \u4ece\u4f4e\u4f4d\u4f9d\u6b21\u5f80\u9ad8\u4f4d\u6d88\u9664n(\u4e8c\u8fdb\u5236\u8868\u793a)\u4e2d\u76841\u3002 n&0xaaaaaaaa \u53ea\u4fdd\u75592\u8fdb\u5236\u5076\u6570\u4f4d\uff1b0xaaaaaaaa == 0b10101010 10101010 10101010 10101010 n&0x55555555 \u53ea\u4fdd\u75592\u8fdb\u5236\u5947\u6570\u4f4d; 0x55555555 == 0b01010101 01010101 01010101 01010101","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#_1","text":"","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#1","text":"\u89e3\u9898\u601d\u8def\uff1a n 1 1 = n, \u4e00\u4e2a\u6570\u4e24\u6b21^\u540c\u4e00\u4e2a\u6570\uff0c\u5f97\u5230\u6570\u672c\u8eab\u3002 n^0 = n, \u4efb\u4f55\u6570\u5f02\u62160\u90fd\u662f\u4ed6\u81ea\u5df1\u3002 \u5c06res \u6570\u7ec4\u4e0b\u6807 \u6570\u7ec4\u7684value\uff0c\u6700\u7ec8\u5f97\u51fa\u7684\u7ed3\u679c\u5c31\u4e3a\u91cd\u590d\u503c\u3002 def find_repeat ( nums ): res = 0 for i in range ( len ( nums )): res ^= i res ^= nums [ i ] return res print ( find_repeat ([ 1 , 2 , 3 , 3 , 4 , 5 , 6 ]))","title":"\u98981\uff1a\u627e\u51fa\u552f\u4e00\u6210\u5bf9\u7684\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#21","text":"\u89e3\u9898\u601d\u8def\uff1a","title":"\u98982\uff1a\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#_2","text":"\u5c069\u7684\u4e8c\u8fdb\u5236\u6570\u7684\u6bcf\u4e00\u4f4d\u4e0e1\u505a\u4e0e\u8fd0\u7b97\uff0c\u5982\u679c\u7ed3\u679c\u4e3a1\u79fb\u5230\u8be5\u4f4d\u7684\u503c\uff0c\u5219\u8be5\u4f4d\u6570\u5b57\u4e3a1\uff0c\u5426\u5219\u4e3a0\u3002 \u9700\u5faa\u73af32\u6b21\uff0c\u5c061\u4f9d\u6b21\u79fb\u5230\u6307\u5b9a\u4f4d\u6570\u4e0e9\u7684\u4e8c\u8fdb\u5236\u6570\u505a\u4e0e\u8fd0\u7b97\uff0c\u5982\u679c\u7ed3\u679c\u4e3a1\u79fb\u5230\u8be5\u4f4d\u7684\u503c\u5219\u8ba1\u6570\u3002 \u6ce8\uff1a32\u6b21\uff0c\u6574\u6570\u4e3a\u56db\u5b57\u8282\u8868\u793a\uff0c\u4e00\u5b57\u8282\u516b\u4f4d\u3002 def count_bin_1 ( n ): count = 0 for i in range ( 32 ): if ( 1 << i ) & n == 1 << i : count += 1 return count print ( count_bin_1 ( 9 ))","title":"\u89e3\u6cd5\u4e00"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#_3","text":"\u67e5\u770b\u4e0a\u56fe\u603b\u7ed3\u89c4\u5f8b\uff0c(n-1)&n\u5b9e\u9645\u4e0a\u5c31\u662f\u6d88\u96641001\u4e2d\u201c1\u201d\u7684\u8fc7\u7a0b\uff0c\u7edf\u8ba1\u6267\u884c\u4e86\u591a\u5c11\u6b21(n-1)&n\uff0c\u5373\u53ef\u77e5\u90531001\u4e2d\u5305\u542b\u51e0\u4e2a\u201c1\u201d def count_bin_1 ( n ): count = 0 while n != 0 : n = ( n - 1 ) & n count += 1 return count print ( count_bin_1 ( 15 ))","title":"\u89e3\u6cd5\u4e8c"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#32","text":"\u89e3\u9898\u601d\u8def: 2\u7684\u6574\u6570\u6b21\u65b9\uff0c2^0, 2^1, 2^2, \u4e5f\u5c31\u662f\u8bf4\uff0c\u5c06\u8be5\u6570\u8f6c\u5316\u4e3a2\u8fdb\u5236\u8868\u793a\uff0c\u53ea\u6709\u4e00\u4e2a1\u51fa\u73b0\u3002 def is2 ( n ): return not ( n - 1 ) & n print ( is2 ( 8 ))","title":"\u98983\uff1a\u662f\u5426\u4e3a2\u7684\u6574\u6570\u6b21\u65b9"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#4","text":"\u89e3\u9898\u8fc7\u7a0b def exchange ( n ): ji = n & 0xaaaaaaaa # 10101010 10101010 10101010 10101010 ou = n & 0x55555555 # 01010101 01010101 01010101 01010101 return ( ji >> 1 ) ^ ( ou << 1 ) print ( exchange ( 9 ))","title":"\u98984\uff1a\u5c06\u4e8c\u8fdb\u5236\u6574\u6570\u7684\u5947\u5076\u4f4d\u4e92\u6362"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#501","text":"\u89e3\u9898\u601d\u8def\uff1a \u6d6e\u70b9\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a\u4e582\u632a\u6574\uff0c\u5982\u4e0b\u56fe def float_bin ( f ): res = [ '0.' ] while f != 0 : f = f * 2 res . append ( str ( int ( f ))) f -= int ( f ) return '' . join ( res ) print ( float_bin ( 0.625 ))","title":"\u98985\uff1a0~1\u95f4\u6d6e\u70b9\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#6k1","text":"\u89e3\u9898\u601d\u8def\uff1a 2\u4e2a\u76f8\u540c\u76842\u8fdb\u5236\u6574\u6570\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u7ed3\u679c\u4f4d0 10\u4e2a\u76f8\u540c\u768410\u8fdb\u5236\u6574\u6570\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u7ed3\u679c\u4f4d0 k\u4e2a\u76f8\u540c\u7684k\u8fdb\u5236\u6574\u6570\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u7ed3\u679c\u4e3a0","title":"\u98986\uff1a\u51fa\u73b0k\u6b21\u4e0e\u51fa\u73b01\u6b21"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#leetcode137","text":"\u7ed9\u5b9a\u4e00\u4e2a**\u975e\u7a7a**\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1: \u8f93\u5165: [2,2,3,2] \u8f93\u51fa: 3 \u793a\u4f8b 2: \u8f93\u5165: [0,1,0,1,0,1,99] \u8f93\u51fa: 99 \u8be5\u9898\u53ef\u4ee5\u7528\u4e09\u8fdb\u5236\u6570\u6765\u5b9e\u73b0\uff0c3\u4e2a\u4e09\u8fdb\u5236\u505a\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u4e3a0\uff0c\u843d\u5355\u7684\u5373\u4e3a\u7b54\u6848 class Solution : def singleNumber ( self , nums : List [ int ]) -> int : # \u8fd4\u56de\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\u4e4b\u540e\u7684\u4e09\u8fdb\u5236 three = 0 for i in range ( len ( nums )): three = self . ncarry ( three , nums [ i ], base = 3 ) return three def ncarry ( self , m , n , base = 2 ): '''\u5c06\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u4ee5k\u8fdb\u5236\u6570\u505a\u8fd4\u56de\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\u8fd4\u56de m: \u5341\u8fdb\u5236\u6570 n: \u5341\u8fdb\u5236\u6570 return: \u5341\u8fdb\u5236\u6570 ''' m = self . toradix ( m , base ) n = self . toradix ( n , base ) res = [] for i in range ( 32 ): res . append (( m [ i ] + n [ i ]) % base ) return self . todeci ( res , base = 3 ) def todeci ( self , nums , base = 2 ): '''\u4f20\u5165\u6570\u503c\u5217\u8868\uff0c\u5c06\u5217\u8868\u8f6c\u4e3a\u5341\u8fdb\u5236\u6570\uff0cbase\u4ee3\u8868\u4f20\u5165\u7684\u8fdb\u5236''' res = 0 for i in range ( 32 ): res += ( base ** i ) * nums [ 31 - i ] return res def toradix ( self , n , base = 2 ): '''\u5c06\u5341\u8fdb\u5236\u6570\u8f6c\u6210\u6307\u5b9a\u8fdb\u5236 m: \u9700\u8981\u8f6c\u7684\u6570 base: \u8981\u8f6c\u6362\u7684\u8fdb\u5236 return: \u5bf9\u5e94\u4f4d\u6570\u7ec4\u621032\u4f4d\u7684\u5217\u8868 # [0, 0, 0, 0...1, 1, 1] ''' res = [ 0 ] * 32 i = 31 # \u4e0b\u6807 while n // base != 0 : res [ i ] = n % base n //= base i -= 1 res [ i ] = n % base return res \u6ce8\u610f\uff1a\u53ea\u9002\u7528\u4e8e\u5217\u8868\u6570\u5b57\u5168\u4e3a\u6b63\u6570\u7684\u60c5\u51b5\u3002","title":"leetcode137 \u9898"},{"location":"%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/#_4","text":"\u5f02\u6216\u8fd0\u7b97\u76f8\u5f53\u4e8e\u4e0d\u8fdb\u4f4d\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c1+1\u4e3a0\uff0c0+0\u4e3a0\uff0c1+0\u4e3a1\uff0c\u6240\u4ee5\u5f02\u6216\u76f8\u540c\u4e3a0\uff0c\u4e0d\u540c\u4e3a1 n^0 = n; n x x = n; x^x = 0 \u5224\u65ad\u4e8c\u8fdb\u5236\u6570\u67d0\u4f4d\u662f\u5426\u4e3a1\uff1a1<<\u67d0\u4f4d & n = 1<<\u67d0\u4f4d\uff0c\u53ef\u67e5\u9605\u98982\u89e3\u6cd5\u4e00 (n-1) & n \u4ece\u4f4e\u4f4d\u4f9d\u6b21\u5f80\u9ad8\u4f4d\u6d88\u9664n(\u4e8c\u8fdb\u5236\u8868\u793a)\u4e2d\u76841\u3002 n&0xaaaaaaaa \u53ea\u4fdd\u75592\u8fdb\u5236\u5076\u6570\u4f4d\uff1b0xaaaaaaaa == 0b10101010 10101010 10101010 10101010 n&0x55555555 \u53ea\u4fdd\u75592\u8fdb\u5236\u5947\u6570\u4f4d; 0x55555555 == 0b01010101 01010101 01010101 01010101","title":"\u603b\u7ed3"},{"location":"%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","text":"\u5206\u6cbb\u6cd5 (Divide and Conquer) \u00b6 \u5f88\u591a\u6709\u7528\u7684\u7b97\u6cd5\u7ed3\u6784\u4e0a\u662f\u9012\u5f52\u7684\uff0c\u4e3a\u4e86\u89e3\u51b3\u4e00\u4e2a\u7279\u5b9a\u95ee\u9898\uff0c\u7b97\u6cd5\u4e00\u6b21\u6216\u8005\u591a\u6b21\u9012\u5f52\u8c03\u7528\u5176\u81ea\u8eab\u4ee5\u89e3\u51b3\u82e5\u5e72\u5b50\u95ee\u9898\u3002 \u8fd9\u4e9b\u7b97\u6cd5\u5178\u578b\u5730\u9075\u5faa\u5206\u6cbb\u6cd5\u7684\u601d\u60f3\uff1a\u5c06\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u51e0\u4e2a\u89c4\u6a21\u8f83\u5c0f\u4f46\u662f\u7c7b\u4f3c\u4e8e\u539f\u95ee\u9898\u7684\u5b50\u95ee\u9898\uff0c\u9012\u5f52\u6c42\u89e3\u8fd9\u4e9b\u5b50\u95ee\u9898\uff0c \u7136\u540e\u518d\u5408\u5e76\u8fd9\u4e9b\u95ee\u9898\u7684\u89e3\u6765\u5efa\u7acb\u539f\u95ee\u9898\u7684\u89e3\u3002 \u5206\u6cbb\u6cd5\u5728\u6bcf\u5c42\u9012\u5f52\u65f6\u6709\u4e09\u4e2a\u6b65\u9aa4\uff1a **\u5206\u89e3**\u539f\u95ee\u9898\u4e3a\u82e5\u5e72\u5b50\u95ee\u9898\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u662f\u539f\u95ee\u9898\u7684\u89c4\u6a21\u6700\u5c0f\u7684\u5b9e\u4f8b **\u89e3\u51b3**\u8fd9\u4e9b\u5b50\u95ee\u9898\uff0c\u9012\u5f52\u5730\u6c42\u89e3\u8fd9\u4e9b\u5b50\u95ee\u9898\u3002\u5f53\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u8db3\u591f\u5c0f\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42\u89e3 **\u5408\u5e76**\u8fd9\u4e9b\u5b50\u95ee\u9898\u7684\u89e3\u6210\u539f\u95ee\u9898\u7684\u89e3 \u5f52\u5e76\u6392\u5e8f \u00b6 \u73b0\u5728\u6211\u4eec\u5c31\u6765\u770b\u4e0b\u5f52\u5e76\u6392\u5e8f\u662f\u662f\u5982\u4f55\u5229\u7528\u5206\u6cbb\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u3002 \u5206\u89e3 \uff1a\u5c06\u5f85\u6392\u5e8f\u7684 n \u4e2a\u5143\u7d20\u5206\u6210\u5404\u5305\u542b n/2 \u4e2a\u5143\u7d20\u7684\u5b50\u5e8f\u5217 \u89e3\u51b3 \uff1a\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u9012\u5f52\u6392\u5e8f\u4e24\u4e2a\u5b50\u5e8f\u5217 \u5408\u5e76 \uff1a\u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5b50\u5e8f\u5217\u4ee5\u4ea7\u751f\u5df2\u6392\u5e8f\u7684\u7b54\u6848 \u4f8b\u5982\uff1a\u5217\u8868 [80, 30, 60, 40, 20, 10, 50, 70] \u4f7f\u7528\u5206\u6cbb\u6cd5\u8fdb\u884c\u6392\u5e8f\uff0c\u9996\u5148\u9012\u5f52\u7740\u5c06\u6570\u7ec4\u8fdb\u884c\u5206\u89e3 \u5f53\u6570\u7ec4\u88ab\u5b8c\u5168\u5206\u9694\u6210\u53ea\u6709\u5355\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u65f6\uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u4eec\u5408\u5e76\u56de\u53bb\uff0c\u6bcf\u6b21\u4e24\u4e24\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\u3002 \u7528\u9012\u5f52\u4ee3\u7801\u6765\u63cf\u8ff0\u8fd9\u4e2a\u95ee\u9898\uff1a def merge_sort ( seq ): '''\u5f52\u5e76\u6392\u5e8f''' if len ( seq ) <= 1 : # \u9012\u5f52\u51fa\u53e3 return seq # \u4e2d\u95f4\u4f4d\u7f6e mid = len ( seq ) // 2 # \u9012\u5f52\u62c6\u5206\u6210\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206 left_half = merge_sort ( seq [: mid ]) right_half = merge_sort ( seq [ mid :]) # \u518d\u5c06\u6392\u597d\u5e8f\u7684\u5408\u5e76\u56de\u53bb new_sort_list = merge_sort_list ( left_half , right_half ) return new_sort_list \u6709\u4e00\u4e2a\u51fd\u6570\u6ca1\u6709\u5b9e\u73b0\uff0c\u5c31\u662f merge_sort_list \uff0c\u600e\u4e48\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\u3002 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\uff1a\u5c06\u6240\u6709\u7684\u6570\u4fdd\u5b58\u5230\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u4e2d\uff0c\u5206\u522b\u7528\u4e24\u4e2a\u6307\u9488a\uff0cb\u904d\u5386\u5217\u8868a\uff0c\u5217\u8868b\uff0c\u5224\u65ad\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u76f4\u5230\u67d0\u4e00\u4e2a\u5217\u8868\u904d\u5386\u7ed3\u675f\uff0c\u6700\u540e\u628a\u5269\u4f59\u7684\u5143\u7d20\u8ffd\u52a0\u5230new_list\u4e2d\u3002 def merge_sort_list ( sort_a , sort_b ): ''' \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868 :param sort_a: \u6709\u5e8f\u5217\u8868a :param sort_b: \u6709\u5e8f\u5217\u8868b ''' a = b = 0 length_a , length_b = len ( sort_a ), len ( sort_b ) new_sort_list = [] while a < length_a and b < length_b : if sort_a [ a ] < sort_b [ b ]: new_sort_list . append ( sort_a [ a ]) a += 1 else : new_sort_list . append ( sort_b [ b ]) b += 1 # \u628a\u591a\u4f59\u7684\u5217\u8868\u5143\u7d20\u8ffd\u52a0\u5230new_sort_list while a < length_a : new_sort_list . append ( sort_a [ a ]) a += 1 while b < length_b : new_sort_list . append ( sort_b [ b ]) b += 1 return new_sort_list","title":"\u5206\u6cbb\u6cd5 (Divide and Conquer)"},{"location":"%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#divide-and-conquer","text":"\u5f88\u591a\u6709\u7528\u7684\u7b97\u6cd5\u7ed3\u6784\u4e0a\u662f\u9012\u5f52\u7684\uff0c\u4e3a\u4e86\u89e3\u51b3\u4e00\u4e2a\u7279\u5b9a\u95ee\u9898\uff0c\u7b97\u6cd5\u4e00\u6b21\u6216\u8005\u591a\u6b21\u9012\u5f52\u8c03\u7528\u5176\u81ea\u8eab\u4ee5\u89e3\u51b3\u82e5\u5e72\u5b50\u95ee\u9898\u3002 \u8fd9\u4e9b\u7b97\u6cd5\u5178\u578b\u5730\u9075\u5faa\u5206\u6cbb\u6cd5\u7684\u601d\u60f3\uff1a\u5c06\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u51e0\u4e2a\u89c4\u6a21\u8f83\u5c0f\u4f46\u662f\u7c7b\u4f3c\u4e8e\u539f\u95ee\u9898\u7684\u5b50\u95ee\u9898\uff0c\u9012\u5f52\u6c42\u89e3\u8fd9\u4e9b\u5b50\u95ee\u9898\uff0c \u7136\u540e\u518d\u5408\u5e76\u8fd9\u4e9b\u95ee\u9898\u7684\u89e3\u6765\u5efa\u7acb\u539f\u95ee\u9898\u7684\u89e3\u3002 \u5206\u6cbb\u6cd5\u5728\u6bcf\u5c42\u9012\u5f52\u65f6\u6709\u4e09\u4e2a\u6b65\u9aa4\uff1a **\u5206\u89e3**\u539f\u95ee\u9898\u4e3a\u82e5\u5e72\u5b50\u95ee\u9898\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u662f\u539f\u95ee\u9898\u7684\u89c4\u6a21\u6700\u5c0f\u7684\u5b9e\u4f8b **\u89e3\u51b3**\u8fd9\u4e9b\u5b50\u95ee\u9898\uff0c\u9012\u5f52\u5730\u6c42\u89e3\u8fd9\u4e9b\u5b50\u95ee\u9898\u3002\u5f53\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u8db3\u591f\u5c0f\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42\u89e3 **\u5408\u5e76**\u8fd9\u4e9b\u5b50\u95ee\u9898\u7684\u89e3\u6210\u539f\u95ee\u9898\u7684\u89e3","title":"\u5206\u6cbb\u6cd5 (Divide and Conquer)"},{"location":"%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95%E5%92%8C%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/#_1","text":"\u73b0\u5728\u6211\u4eec\u5c31\u6765\u770b\u4e0b\u5f52\u5e76\u6392\u5e8f\u662f\u662f\u5982\u4f55\u5229\u7528\u5206\u6cbb\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u3002 \u5206\u89e3 \uff1a\u5c06\u5f85\u6392\u5e8f\u7684 n \u4e2a\u5143\u7d20\u5206\u6210\u5404\u5305\u542b n/2 \u4e2a\u5143\u7d20\u7684\u5b50\u5e8f\u5217 \u89e3\u51b3 \uff1a\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u9012\u5f52\u6392\u5e8f\u4e24\u4e2a\u5b50\u5e8f\u5217 \u5408\u5e76 \uff1a\u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5b50\u5e8f\u5217\u4ee5\u4ea7\u751f\u5df2\u6392\u5e8f\u7684\u7b54\u6848 \u4f8b\u5982\uff1a\u5217\u8868 [80, 30, 60, 40, 20, 10, 50, 70] \u4f7f\u7528\u5206\u6cbb\u6cd5\u8fdb\u884c\u6392\u5e8f\uff0c\u9996\u5148\u9012\u5f52\u7740\u5c06\u6570\u7ec4\u8fdb\u884c\u5206\u89e3 \u5f53\u6570\u7ec4\u88ab\u5b8c\u5168\u5206\u9694\u6210\u53ea\u6709\u5355\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u65f6\uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u4eec\u5408\u5e76\u56de\u53bb\uff0c\u6bcf\u6b21\u4e24\u4e24\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\u3002 \u7528\u9012\u5f52\u4ee3\u7801\u6765\u63cf\u8ff0\u8fd9\u4e2a\u95ee\u9898\uff1a def merge_sort ( seq ): '''\u5f52\u5e76\u6392\u5e8f''' if len ( seq ) <= 1 : # \u9012\u5f52\u51fa\u53e3 return seq # \u4e2d\u95f4\u4f4d\u7f6e mid = len ( seq ) // 2 # \u9012\u5f52\u62c6\u5206\u6210\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206 left_half = merge_sort ( seq [: mid ]) right_half = merge_sort ( seq [ mid :]) # \u518d\u5c06\u6392\u597d\u5e8f\u7684\u5408\u5e76\u56de\u53bb new_sort_list = merge_sort_list ( left_half , right_half ) return new_sort_list \u6709\u4e00\u4e2a\u51fd\u6570\u6ca1\u6709\u5b9e\u73b0\uff0c\u5c31\u662f merge_sort_list \uff0c\u600e\u4e48\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\u3002 \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868\uff1a\u5c06\u6240\u6709\u7684\u6570\u4fdd\u5b58\u5230\u4e00\u4e2a\u65b0\u7684\u5217\u8868\u4e2d\uff0c\u5206\u522b\u7528\u4e24\u4e2a\u6307\u9488a\uff0cb\u904d\u5386\u5217\u8868a\uff0c\u5217\u8868b\uff0c\u5224\u65ad\u5143\u7d20\u7684\u5927\u5c0f\uff0c\u76f4\u5230\u67d0\u4e00\u4e2a\u5217\u8868\u904d\u5386\u7ed3\u675f\uff0c\u6700\u540e\u628a\u5269\u4f59\u7684\u5143\u7d20\u8ffd\u52a0\u5230new_list\u4e2d\u3002 def merge_sort_list ( sort_a , sort_b ): ''' \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868 :param sort_a: \u6709\u5e8f\u5217\u8868a :param sort_b: \u6709\u5e8f\u5217\u8868b ''' a = b = 0 length_a , length_b = len ( sort_a ), len ( sort_b ) new_sort_list = [] while a < length_a and b < length_b : if sort_a [ a ] < sort_b [ b ]: new_sort_list . append ( sort_a [ a ]) a += 1 else : new_sort_list . append ( sort_b [ b ]) b += 1 # \u628a\u591a\u4f59\u7684\u5217\u8868\u5143\u7d20\u8ffd\u52a0\u5230new_sort_list while a < length_a : new_sort_list . append ( sort_a [ a ]) a += 1 while b < length_b : new_sort_list . append ( sort_b [ b ]) b += 1 return new_sort_list","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","text":"\u57fa\u672c\u6392\u5e8f\u7b97\u6cd5 \u00b6 \u5192\u6ce1\u6392\u5e8f \u00b6 \u8fdb\u884cn-1\u8f6e\u8fed\u4ee3\uff0c\u6bcf\u6b21\u6bd4\u8f83\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u8005\u5927\u4e8e\u540e\u8005\uff0c\u5219\u4ea4\u6362\u987a\u5e8f\u3002\u56e0\u4e3a\u76f4\u63a5\u5728\u5143\u7d20\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\u3002\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u8f6e\u5192\u6ce1\uff0c\u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\u5c31\u4f1a\u901a\u8fc7\u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u79fb\u5230\u6700\u53f3\u8fb9\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\uff0c10\u4e2a\u5c0f\u670b\u53cb\u7ad9\u4e00\u6392\uff0c\u8eab\u9ad8\u5e76\u4e00\uff0c\u73b0\u5728\u8001\u5e08\u558a\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\uff0c\u4e24\u4e24\u6bd4\u8f83\uff0c \u4e2a\u5b50\u9ad8\u7684\u5f80\u53f3\u79fb\uff08\u8001\u5e08\u60f3\u8ba9\u4ed6\u4eec\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\uff09\uff0c\u7b2c\u4e00\u8f6e\u5c31\u6709\u4e00\u4e2a\u5c0f\u670b\u53cb\u6700\u9ad8\u7684\u5c0f\u670b\u53cb\u7ad9\u5230\u6700\u53f3\u8fb9\uff0c \u7b2c\u4e8c\u8f6e\u6b21\u9ad8\u7684\u5c0f\u670b\u53cb\u7ad9\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u6700\u540e\u4e00\u8f6e\uff0c\u4e00\u4e2a\u5c0f\u670b\u53cb\u4e0d\u7528\u6bd4\u8f83\uff0c\u6240\u4ee5\u662fn-1\u8f6e\uff089\u8f6e\uff09 def bubble_sort ( seq ): '''\u5192\u6ce1\u6392\u5e8f''' n = len ( seq ) for i in range ( n - 1 ): for j in range ( n - 1 - i ): if seq [ j ] > seq [ j + 1 ]: seq [ j ], seq [ j + 1 ] = seq [ j + 1 ], seq [ j ] def test_bubble_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) bubble_sort ( seq ) assert seq_sort == seq \u9009\u62e9\u6392\u5e8f \u00b6 \u5192\u6ce1\u6392\u5e8f\u7684\u601d\u8def\u662f\u4e24\u4e24\u6bd4\u8f83\uff0c\u8f83\u5927\u7684\u6307\u79fb\u5230\u4e86\u6700\u540e\u8fb9\uff0c\u9009\u62e9\u6392\u5e8f\u5219\u662f\u4e24\u4e24\u6bd4\u8f83\uff0c\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c \u518d\u4ece\u5269\u4e0b\u7684\u5143\u7d20\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u5269\u4e0b\u7684\u5143\u7d20\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u662fn-1\u8f6e\u3002 \u540c\u6837\u7684\uff0c10\u4e2a\u5c0f\u670b\u53cb\u7ad9\u6210\u4e00\u6392\uff0c\u7b2c\u4e00\u8f6e\u4ece10\u4e2a\u5c0f\u670b\u53cb\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u77ee\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u8f6e\u4ece\u5269\u4e0b\u76849\u4e2a\u5c0f\u670b\u53cb\u4e2d\uff0c\u518d\u9009\u62e9\u4e00\u4e2a\u6700\u77ee\u7684\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u53ea\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb\uff0c\u76f4\u63a5\u7ad9\u5728\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u662fn-1\u8f6e\u3002 \u548c\u5192\u6ce1\u6392\u5e8f\u4e00\u6837\uff0c\u4e5f\u662f\u4e24\u4e24\u4ea4\u6362\u3002 def select_sort ( seq ): '''\u9009\u62e9\u6392\u5e8f''' n = len ( seq ) for i in range ( n - 1 ): for j in range ( i + 1 , n ): if seq [ j ] < seq [ i ]: seq [ i ], seq [ j ] = seq [ j ], seq [ i ] def test_select_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) select_sort ( seq ) assert seq_sort == seq \u63d2\u5165\u6392\u5e8f \u00b6 \u5982\u679c\u6709\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u8981\u6c42\u5728\u8fd9\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5e8f\u5217\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u8981\u6c42\u63d2\u5165\u540e\u4ecd\u7136\u6709\u5e8f\u3002\u56e0\u4e3a\u662f\u5728\u6709\u5e8f\u7684\u57fa\u7840\u4e0a\u518d\u6392\u5e8f\uff0c\u5229\u7528\u4e86\u4e4b\u524d\u7684\u6709\u5e8f\u6761\u4ef6\uff0c\u6240\u4ee5\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u6251\u514b\u724c\u6478\u724c\uff0c\u7b2c\u4e00\u5f20\u6478\u5230\u624b\u91cc\u540e\uff0c\u56e0\u4e3a\u624b\u91cc\u53ea\u6709\u4e00\u5f20\u724c\uff0c\u8ba4\u4e3a\u662f\u6709\u5e8f\u7684\uff0c\u6478\u7b2c\u4e8c\u5f20\u7684\u65f6\u5019\uff0c\u8fd9\u5f20\u724c\u548c\u7b2c\u4e00\u5f20\u6bd4\u8f83\uff0c \u6ca1\u4ed6\u5927\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6478\u7b2c\u4e09\u5f20\u724c\u7684\u65f6\u5019\uff0c\u548c\u7b2c\u4e8c\u5f20\u724c\u6bd4\u8f83\uff0c\u6ca1\u4ed6\u5927\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u5426\u5219\u4e00\u76f4\u627e\u5230\u6bd4\u4ed6\u5c0f\u7684\uff0c\u4ea4\u6362\u4f4d \u7f6e\u3002\u5230\u6700\u540e\u4e00\u5f20\u724c\u4e5f\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u540e\u6392\u597d\u5e8f\u4e86\u3002 def insert_sort ( seq ): n = len ( seq ) for i in range ( 1 , n ): value = seq [ i ] # \u4fdd\u5b58\u4e00\u4e0b\u5f53\u524d\u7684\u4f4d\u7f6e pos = i while pos > 0 and seq [ pos - 1 ] > value : # \u524d\u4e00\u5f20\u5927\u4e8e\u5f53\u524d\u7684\u4f4d\u7f6e,\u5c31\u8ba9\u4ed6\u4e00\u76f4\u524d\u79fb seq [ pos ] = seq [ pos - 1 ] pos -= 1 seq [ pos ] = value def test_insert_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) insert_sort ( seq ) assert seq_sort == seq","title":"\u57fa\u672c\u6392\u5e8f\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#_1","text":"","title":"\u57fa\u672c\u6392\u5e8f\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#_2","text":"\u8fdb\u884cn-1\u8f6e\u8fed\u4ee3\uff0c\u6bcf\u6b21\u6bd4\u8f83\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u8005\u5927\u4e8e\u540e\u8005\uff0c\u5219\u4ea4\u6362\u987a\u5e8f\u3002\u56e0\u4e3a\u76f4\u63a5\u5728\u5143\u7d20\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\u3002\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u8f6e\u5192\u6ce1\uff0c\u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\u5c31\u4f1a\u901a\u8fc7\u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u79fb\u5230\u6700\u53f3\u8fb9\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\uff0c10\u4e2a\u5c0f\u670b\u53cb\u7ad9\u4e00\u6392\uff0c\u8eab\u9ad8\u5e76\u4e00\uff0c\u73b0\u5728\u8001\u5e08\u558a\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\uff0c\u4e24\u4e24\u6bd4\u8f83\uff0c \u4e2a\u5b50\u9ad8\u7684\u5f80\u53f3\u79fb\uff08\u8001\u5e08\u60f3\u8ba9\u4ed6\u4eec\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\uff09\uff0c\u7b2c\u4e00\u8f6e\u5c31\u6709\u4e00\u4e2a\u5c0f\u670b\u53cb\u6700\u9ad8\u7684\u5c0f\u670b\u53cb\u7ad9\u5230\u6700\u53f3\u8fb9\uff0c \u7b2c\u4e8c\u8f6e\u6b21\u9ad8\u7684\u5c0f\u670b\u53cb\u7ad9\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u6700\u540e\u4e00\u8f6e\uff0c\u4e00\u4e2a\u5c0f\u670b\u53cb\u4e0d\u7528\u6bd4\u8f83\uff0c\u6240\u4ee5\u662fn-1\u8f6e\uff089\u8f6e\uff09 def bubble_sort ( seq ): '''\u5192\u6ce1\u6392\u5e8f''' n = len ( seq ) for i in range ( n - 1 ): for j in range ( n - 1 - i ): if seq [ j ] > seq [ j + 1 ]: seq [ j ], seq [ j + 1 ] = seq [ j + 1 ], seq [ j ] def test_bubble_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) bubble_sort ( seq ) assert seq_sort == seq","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#_3","text":"\u5192\u6ce1\u6392\u5e8f\u7684\u601d\u8def\u662f\u4e24\u4e24\u6bd4\u8f83\uff0c\u8f83\u5927\u7684\u6307\u79fb\u5230\u4e86\u6700\u540e\u8fb9\uff0c\u9009\u62e9\u6392\u5e8f\u5219\u662f\u4e24\u4e24\u6bd4\u8f83\uff0c\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c \u518d\u4ece\u5269\u4e0b\u7684\u5143\u7d20\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u5269\u4e0b\u7684\u5143\u7d20\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u662fn-1\u8f6e\u3002 \u540c\u6837\u7684\uff0c10\u4e2a\u5c0f\u670b\u53cb\u7ad9\u6210\u4e00\u6392\uff0c\u7b2c\u4e00\u8f6e\u4ece10\u4e2a\u5c0f\u670b\u53cb\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u77ee\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u8f6e\u4ece\u5269\u4e0b\u76849\u4e2a\u5c0f\u670b\u53cb\u4e2d\uff0c\u518d\u9009\u62e9\u4e00\u4e2a\u6700\u77ee\u7684\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u53ea\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb\uff0c\u76f4\u63a5\u7ad9\u5728\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u662fn-1\u8f6e\u3002 \u548c\u5192\u6ce1\u6392\u5e8f\u4e00\u6837\uff0c\u4e5f\u662f\u4e24\u4e24\u4ea4\u6362\u3002 def select_sort ( seq ): '''\u9009\u62e9\u6392\u5e8f''' n = len ( seq ) for i in range ( n - 1 ): for j in range ( i + 1 , n ): if seq [ j ] < seq [ i ]: seq [ i ], seq [ j ] = seq [ j ], seq [ i ] def test_select_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) select_sort ( seq ) assert seq_sort == seq","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#_4","text":"\u5982\u679c\u6709\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u8981\u6c42\u5728\u8fd9\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5e8f\u5217\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u8981\u6c42\u63d2\u5165\u540e\u4ecd\u7136\u6709\u5e8f\u3002\u56e0\u4e3a\u662f\u5728\u6709\u5e8f\u7684\u57fa\u7840\u4e0a\u518d\u6392\u5e8f\uff0c\u5229\u7528\u4e86\u4e4b\u524d\u7684\u6709\u5e8f\u6761\u4ef6\uff0c\u6240\u4ee5\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u6251\u514b\u724c\u6478\u724c\uff0c\u7b2c\u4e00\u5f20\u6478\u5230\u624b\u91cc\u540e\uff0c\u56e0\u4e3a\u624b\u91cc\u53ea\u6709\u4e00\u5f20\u724c\uff0c\u8ba4\u4e3a\u662f\u6709\u5e8f\u7684\uff0c\u6478\u7b2c\u4e8c\u5f20\u7684\u65f6\u5019\uff0c\u8fd9\u5f20\u724c\u548c\u7b2c\u4e00\u5f20\u6bd4\u8f83\uff0c \u6ca1\u4ed6\u5927\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6478\u7b2c\u4e09\u5f20\u724c\u7684\u65f6\u5019\uff0c\u548c\u7b2c\u4e8c\u5f20\u724c\u6bd4\u8f83\uff0c\u6ca1\u4ed6\u5927\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u5426\u5219\u4e00\u76f4\u627e\u5230\u6bd4\u4ed6\u5c0f\u7684\uff0c\u4ea4\u6362\u4f4d \u7f6e\u3002\u5230\u6700\u540e\u4e00\u5f20\u724c\u4e5f\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u540e\u6392\u597d\u5e8f\u4e86\u3002 def insert_sort ( seq ): n = len ( seq ) for i in range ( 1 , n ): value = seq [ i ] # \u4fdd\u5b58\u4e00\u4e0b\u5f53\u524d\u7684\u4f4d\u7f6e pos = i while pos > 0 and seq [ pos - 1 ] > value : # \u524d\u4e00\u5f20\u5927\u4e8e\u5f53\u524d\u7684\u4f4d\u7f6e,\u5c31\u8ba9\u4ed6\u4e00\u76f4\u524d\u79fb seq [ pos ] = seq [ pos - 1 ] pos -= 1 seq [ pos ] = value def test_insert_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) insert_sort ( seq ) assert seq_sort == seq","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u590d\u6742\u5ea6\u5206\u6790\u662f\u6574\u4e2a\u7b97\u6cd5\u5b66\u4e60\u7684\u7cbe\u9ad3\uff0c\u53ea\u8981\u638c\u63e1\u4e86\u5b83\uff0c\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u5185\u5bb9\u57fa\u672c\u4e0a\u5c31\u638c\u63e1\u4e86\u4e00\u534a \u5927 O \u590d\u6742\u5ea6\u8868\u793a\u6cd5 \u00b6 \u7b97\u6cd5\u7684\u6267\u884c\u6548\u7387\uff0c\u7c97\u7565\u5730\u8bb2\uff0c\u5c31\u662f\u7b97\u6cd5\u4ee3\u7801\u6267\u884c\u7684\u65f6\u95f4\u3002 \u4f46\u662f\uff0c\u5982\u4f55\u5728\u4e0d\u8fd0\u884c\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u201c\u8089\u773c\u201d\u5f97\u5230\u4e00\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\u5462\uff1f\u8fd9\u91cc\u6709\u6bb5\u975e\u5e38\u7b80\u5355\u7684\u4ee3\u7801\uff0c\u6c42 1,2,3\u2026n \u7684\u7d2f\u52a0\u548c\u3002\u73b0\u5728\uff0c\u6211\u5c31\u5e26\u4f60\u4e00\u5757\u6765\u4f30\u7b97\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\u3002 int cal ( int n ) { int sum = 0 ; int i = 1 ; for (; i <= n ; ++ i ) { sum = sum + i ; } return sum ; } \u4ece CPU \u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u6bcf\u4e00\u884c\u90fd\u6267\u884c\u7740\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff1a \u8bfb\u6570\u636e-\u8fd0\u7b97-\u5199\u6570\u636e \u3002\u5c3d\u7ba1\u6bcf\u884c\u4ee3\u7801\u5bf9\u5e94\u7684 CPU \u6267 \u884c\u7684\u4e2a\u6570\u3001\u6267\u884c\u7684\u65f6\u95f4\u90fd\u4e0d\u4e00\u6837\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u662f\u7c97\u7565\u4f30\u8ba1\uff0c\u6240\u4ee5\u53ef\u4ee5\u5047\u8bbe\u6bcf\u884c\u4ee3\u7801\u6267\u884c\u7684\u65f6\u95f4\u90fd\u4e00\u6837\uff0c\u4e3a unit_time\u3002\u5728\u8fd9\u4e2a\u5047\u8bbe\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u603b\u6267\u884c\u65f6\u95f4\u662f\u591a\u5c11\u5462\uff1f \u7b2c 2\u30013 \u884c\u4ee3\u7801\u5206\u522b\u9700\u8981 1 \u4e2a unit_time \u7684\u6267\u884c\u65f6\u95f4\uff0c\u7b2c 4\u30015 \u884c\u90fd\u8fd0\u884c\u4e86 n \u904d\uff0c\u6240\u4ee5\u9700\u8981 2n unit_time \u7684\u6267\u884c \u65f6\u95f4\uff0c\u6240\u4ee5\u8fd9\u6bb5\u4ee3\u7801\u603b\u7684\u6267\u884c\u65f6\u95f4\u5c31\u662f (2n+2) unit_time\u3002\u53ef\u4ee5\u770b\u51fa\u6765\uff0c**\u6240\u6709\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4 T(n) \u4e0e\u6bcf\u884c\u4ee3\u7801\u7684* \u6267\u884c\u6b21\u6570\u6210\u6b63\u6bd4 \u3002 \u6309\u7167\u8fd9\u4e2a\u5206\u6790\u601d\u8def\uff0c\u6211\u4eec\u518d\u6765\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 int cal ( int n ) { int sum = 0 ; int i = 1 ; int j = 1 ; for (; i <= n ; ++ i ) { j = 1 ; for (; j <= n ; ++ j ) { sum = sum + i * j ; } } } \u6211\u4eec\u4f9d\u65e7\u5047\u8bbe\u6bcf\u4e2a\u8bed\u53e5\u7684\u6267\u884c\u65f6\u95f4\u662f unit_time\u3002\u90a3\u8fd9\u6bb5\u4ee3\u7801\u7684\u603b\u6267\u884c\u65f6\u95f4 T(n) \u662f\u591a\u5c11\u5462\uff1f \u7b2c 2\u30013\u30014 \u884c\u4ee3\u7801\uff0c\u6bcf\u884c\u90fd\u9700\u8981 1 \u4e2a unit_time \u7684\u6267\u884c\u65f6\u95f4\uff0c\u7b2c 5\u30016 \u884c\u4ee3\u7801\u5faa\u73af\u6267\u884c\u4e86 n \u904d\uff0c\u9700\u8981 2n * unit_time \u7684\u6267\u884c\u65f6\u95f4\uff0c\u7b2c 7\u30018 \u884c\u4ee3\u7801\u5faa\u73af\u6267\u884c\u4e86 n2\u904d\uff0c\u6240\u4ee5\u9700\u8981 2n2* unit_time \u7684\u6267\u884c\u65f6\u95f4\u3002\u6240\u4ee5\uff0c\u6574\u6bb5\u4ee3 \u7801\u603b\u7684\u6267\u884c\u65f6\u95f4 T(n) = (2n2+2n+3)*unit_time\u3002 \u5c3d\u7ba1\u6211\u4eec\u4e0d\u77e5\u9053 unit_time \u7684\u5177\u4f53\u503c\uff0c\u4f46\u662f\u901a\u8fc7\u8fd9\u4e24\u6bb5\u4ee3\u7801\u6267\u884c\u65f6\u95f4\u7684\u63a8\u5bfc\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u89c4 \u5f8b\uff0c\u90a3\u5c31\u662f\uff0c \u6240\u6709\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4 T(n) \u4e0e\u6bcf\u884c\u4ee3\u7801\u7684\u6267\u884c\u6b21\u6570 n \u6210\u6b63\u6bd4 \u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u89c4\u5f8b\u603b\u7ed3\u6210\u4e00\u4e2a\u516c\u5f0f\u3002\u6ce8\u610f\uff0c\u5927 O \u5c31\u8981\u767b\u573a\u4e86\uff01 \u6211\u6765\u5177\u4f53\u89e3\u91ca\u4e00\u4e0b\u8fd9\u4e2a\u516c\u5f0f\u3002\u5176\u4e2d\uff0cT(n) \u6211\u4eec\u5df2\u7ecf\u8bb2\u8fc7\u4e86\uff0c\u5b83\u8868\u793a\u4ee3\u7801\u6267\u884c\u7684\u65f6\u95f4\uff1bn \u8868\u793a\u6570\u636e\u89c4\u6a21\u7684\u5927\u5c0f\uff1bf(n) \u8868\u793a\u6bcf\u884c\u4ee3\u7801\u6267\u884c\u7684\u6b21\u6570\u603b\u548c\u3002\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u516c\u5f0f\uff0c\u6240\u4ee5\u7528 f(n) \u6765\u8868\u793a\u3002\u516c\u5f0f\u4e2d\u7684 O\uff0c\u8868\u793a\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4 T(n) \u4e0e f(n) \u8868\u8fbe\u5f0f\u6210\u6b63\u6bd4\u3002 \u6240\u4ee5\uff0c\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u7684 T(n) = O(2n+2)\uff0c\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d\u7684 T(n) = O(2n2+2n+3)\u3002\u8fd9\u5c31\u662f**\u5927 O \u65f6\u95f4\u590d\u6742\u5ea6\u8868\u793a\u6cd5**\u3002 \u5927 O \u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5177\u4f53\u8868\u793a\u4ee3\u7801\u771f\u6b63\u7684\u6267\u884c\u65f6\u95f4\uff0c\u800c\u662f\u8868\u793a**\u4ee3\u7801\u6267\u884c\u65f6\u95f4\u968f\u6570\u636e\u89c4\u6a21\u589e\u957f\u7684\u53d8\u5316\u8d8b\u52bf**\uff0c \u6240\u4ee5\uff0c\u4e5f\u53eb\u4f5c**\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\uff08asymptotic time complexity\uff09 \uff0c\u7b80\u79f0**\u65f6\u95f4\u590d\u6742\u5ea6 \u3002 \u5f53 n \u5f88\u5927\u65f6\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210 10000\u3001100000\u3002\u800c\u516c\u5f0f\u4e2d\u7684\u4f4e\u9636\u3001\u5e38\u91cf\u3001\u7cfb\u6570\u4e09\u90e8\u5206\u5e76\u4e0d\u5de6\u53f3\u589e\u957f\u8d8b\u52bf\uff0c\u6240\u4ee5 \u90fd\u53ef\u4ee5\u5ffd\u7565\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u6700\u5927\u91cf\u7ea7\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u679c\u7528\u5927 O \u8868\u793a\u6cd5\u8868\u793a\u521a\u8bb2\u7684\u90a3\u4e24\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c \u5c31\u53ef\u4ee5\u8bb0\u4e3a\uff1aT(n) = O(n)\uff1b T(n) = O(n2)\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u524d\u9762\u4ecb\u7ecd\u4e86\u5927 O \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u7531\u6765\u548c\u8868\u793a\u65b9\u6cd5\u3002\u73b0\u5728\u6211\u4eec\u6765\u770b\u4e0b\uff0c\u5982\u4f55\u5206\u6790\u4e00\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f\u6211\u8fd9\u513f\u6709\u4e09 \u4e2a\u6bd4\u8f83\u5b9e\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u5206\u4eab\u7ed9\u4f60\u3002 \u53ea\u5173\u6ce8\u5faa\u73af\u6267\u884c\u6b21\u6570\u6700\u591a\u7684\u4e00\u6bb5\u4ee3\u7801 \u00b6 \u6211\u521a\u624d\u8bf4\u4e86\uff0c\u5927 O \u8fd9\u79cd\u590d\u6742\u5ea6\u8868\u793a\u65b9\u6cd5\u53ea\u662f\u8868\u793a\u4e00\u79cd\u53d8\u5316\u8d8b\u52bf\u3002\u6211\u4eec\u901a\u5e38\u4f1a\u5ffd\u7565\u6389\u516c\u5f0f\u4e2d\u7684\u5e38\u91cf\u3001\u4f4e\u9636\u3001\u7cfb \u6570\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u6700\u5927\u9636\u7684\u91cf\u7ea7\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u5728\u5206\u6790\u4e00\u4e2a\u7b97\u6cd5\u3001\u4e00\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u65f6\u5019\uff0c\u4e5f \u53ea\u5173\u6ce8\u5faa\u73af\u6267\u884c\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e00\u6bb5\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6bb5\u6838\u5fc3\u4ee3\u7801\u6267\u884c\u6b21\u6570\u7684 n \u7684\u91cf\u7ea7\uff0c\u5c31\u662f\u6574\u6bb5\u8981\u5206\u6790\u4ee3\u7801 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u4f60\u7406\u89e3\uff0c\u6211\u8fd8\u62ff\u524d\u9762\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u3002 int cal ( int n ) { int sum = 0 ; int i = 1 ; for (; i <= n ; ++ i ) { sum = sum + i ; } return sum ; } \u5176\u4e2d\u7b2c 2\u30013 \u884c\u4ee3\u7801\u90fd\u662f\u5e38\u91cf\u7ea7\u7684\u6267\u884c\u65f6\u95f4\uff0c\u4e0e n \u7684\u5927\u5c0f\u65e0\u5173\uff0c\u6240\u4ee5\u5bf9\u4e8e\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u5f71\u54cd\u3002\u5faa\u73af\u6267\u884c\u6b21\u6570\u6700 \u591a\u7684\u662f\u7b2c 4\u30015 \u884c\u4ee3\u7801\uff0c\u6240\u4ee5\u8fd9\u5757\u4ee3\u7801\u8981\u91cd\u70b9\u5206\u6790\u3002\u524d\u9762\u6211\u4eec\u4e5f\u8bb2\u8fc7\uff0c\u8fd9\u4e24\u884c\u4ee3\u7801\u88ab\u6267\u884c\u4e86 n \u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6 \u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\u3002 \u52a0\u6cd5\u6cd5\u5219\uff1a\u603b\u590d\u6742\u5ea6\u7b49\u4e8e\u91cf\u7ea7\u6700\u5927\u7684\u90a3\u6bb5\u4ee3\u7801\u7684\u590d\u6742\u5ea6 \u00b6 \u6211\u8fd9\u91cc\u8fd8\u6709\u4e00\u6bb5\u4ee3\u7801\u3002\u4f60\u53ef\u4ee5\u5148\u8bd5\u7740\u5206\u6790\u4e00\u4e0b\uff0c\u7136\u540e\u518d\u5f80\u4e0b\u770b\u8ddf\u6211\u7684\u5206\u6790\u601d\u8def\u662f\u5426\u4e00\u6837\u3002 int cal ( int n ) { int sum_1 = 0 ; int p = 1 ; for (; p < 100 ; ++ p ) { sum_1 = sum_1 + p ; } int sum_2 = 0 ; int q = 1 ; for (; q < n ; ++ q ) { sum_2 = sum_2 + q ; } int sum_3 = 0 ; int i = 1 ; int j = 1 ; for (; i <= n ; ++ i ) { j = 1 ; for (; j <= n ; ++ j ) { sum_3 = sum_3 + i * j ; } } return sum_1 + sum_2 + sum_3 ; } \u8fd9\u4e2a\u4ee3\u7801\u5206\u4e3a\u4e09\u90e8\u5206\uff0c\u5206\u522b\u662f\u6c42 sum_1\u3001sum_2\u3001sum_3\u3002\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5206\u6790\u6bcf\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7136\u540e \u628a\u5b83\u4eec\u653e\u5230\u4e00\u5757\u513f\uff0c\u518d\u53d6\u4e00\u4e2a\u91cf\u7ea7\u6700\u5927\u7684\u4f5c\u4e3a\u6574\u6bb5\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u3002 \u7b2c\u4e00\u6bb5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u8fd9\u6bb5\u4ee3\u7801\u5faa\u73af\u6267\u884c\u4e86 100 \u6b21\uff0c\u6240\u4ee5\u662f\u4e00\u4e2a\u5e38\u91cf\u7684\u6267\u884c\u65f6\u95f4\uff0c\u8ddf n \u7684\u89c4\u6a21\u65e0 \u5173\u3002 \u8fd9\u91cc\u6211\u8981\u518d\u5f3a\u8c03\u4e00\u4e0b\uff0c\u5373\u4fbf\u8fd9\u6bb5\u4ee3\u7801\u5faa\u73af 10000 \u6b21\u3001100000 \u6b21\uff0c\u53ea\u8981\u662f\u4e00\u4e2a\u5df2\u77e5\u7684\u6570\uff0c\u8ddf n \u65e0\u5173\uff0c\u7167\u6837\u4e5f \u662f\u5e38\u91cf\u7ea7\u7684\u6267\u884c\u65f6\u95f4\u3002\u5f53 n \u65e0\u9650\u5927\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u5ffd\u7565\u3002\u5c3d\u7ba1\u5bf9\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\u4f1a\u6709\u5f88\u5927\u5f71\u54cd\uff0c\u4f46\u662f\u56de\u5230\u65f6 \u95f4\u590d\u6742\u5ea6\u7684\u6982\u5ff5\u6765\u8bf4\uff0c\u5b83\u8868\u793a\u7684\u662f\u4e00\u4e2a\u7b97\u6cd5\u6267\u884c\u6548\u7387\u4e0e\u6570\u636e\u89c4\u6a21\u589e\u957f\u7684\u53d8\u5316\u8d8b\u52bf\uff0c\u6240\u4ee5\u4e0d\u7ba1\u5e38\u91cf\u7684\u6267\u884c\u65f6\u95f4\u591a \u5927\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5ffd\u7565\u6389\u3002\u56e0\u4e3a\u5b83\u672c\u8eab\u5bf9\u589e\u957f\u8d8b\u52bf\u5e76\u6ca1\u6709\u5f71\u54cd\u3002 \u90a3\u7b2c\u4e8c\u6bb5\u4ee3\u7801\u548c\u7b2c\u4e09\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u7b54\u6848\u662f O(n) \u548c O(n2)\uff0c\u4f60\u5e94\u8be5\u80fd\u5bb9\u6613\u5c31\u5206\u6790\u51fa\u6765\uff0c\u6211 \u5c31\u4e0d\u5570\u55e6\u4e86\u3002 \u200b \u7efc\u5408\u8fd9\u4e09\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53d6\u5176\u4e2d\u6700\u5927\u7684\u91cf\u7ea7\u3002\u6240\u4ee5\uff0c\u6574\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4e3a O(n2)\u3002\u4e5f\u5c31\u662f \u8bf4\uff1a \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u7b49\u4e8e\u91cf\u7ea7\u6700\u5927\u7684\u90a3\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u3002\u90a3\u6211\u4eec\u5c06\u8fd9\u4e2a\u89c4\u5f8b\u62bd\u8c61\u6210\u516c\u5f0f\u5c31\u662f\uff1a \u5982\u679c T1(n)=O(f(n))\uff0cT2(n)=O(g(n))\uff1b\u90a3\u4e48 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))). \u4e58\u6cd5\u6cd5\u5219\uff1a\u5d4c\u5957\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u7b49\u4e8e\u5d4c\u5957\u5185\u5916\u4ee3\u7801\u590d\u6742\u5ea6\u7684\u4e58\u79ef \u00b6 \u6211\u521a\u8bb2\u4e86\u4e00\u4e2a\u590d\u6742\u5ea6\u5206\u6790\u4e2d\u7684\u52a0\u6cd5\u6cd5\u5219\uff0c\u8fd9\u513f\u8fd8\u6709\u4e00\u4e2a**\u4e58\u6cd5\u6cd5\u5219**\u3002\u7c7b\u6bd4\u4e00\u4e0b\uff0c\u4f60\u5e94\u8be5\u80fd\u201c\u731c\u5230\u201d\u516c\u5f0f\u662f\u4ec0\u4e48\u6837\u5b50 \u7684\u5427\uff1f \u5982\u679c T1(n)=O(f(n))\uff0cT2(n)=O(g(n))\uff1b \u90a3\u4e48 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)). \u4e5f\u5c31\u662f\u8bf4\uff0c\u5047\u8bbe T1(n) = O(n)\uff0cT2(n) = O(n2)\uff0c\u5219 T1(n) * T2(n) = O(n3)\u3002\u843d\u5b9e\u5230\u5177\u4f53\u7684\u4ee3\u7801\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u628a \u4e58\u6cd5\u6cd5\u5219\u770b\u6210\u662f**\u5d4c\u5957\u5faa\u73af**\uff0c\u6211\u4e3e\u4e2a\u4f8b\u5b50\u7ed9\u4f60\u89e3\u91ca\u4e00\u4e0b\u3002 int cal ( int n ) { int ret = 0 ; int i = 1 ; for (; i < n ; ++ i ) { ret = ret + f ( i ); } } int f ( int n ) { int sum = 0 ; int i = 1 ; for (; i < n ; ++ i ) { sum = sum + i ; } return sum ; } \u6211\u4eec\u5355\u72ec\u770b cal() \u51fd\u6570\u3002\u5047\u8bbe f() \u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u64cd\u4f5c\uff0c\u90a3\u7b2c 4\uff5e6 \u884c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff0cT1(n) = O(n)\u3002\u4f46 f() \u51fd\u6570\u672c\u8eab\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f T2(n) = O(n)\uff0c\u6240\u4ee5\uff0c\u6574\u4e2a cal() \u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff0c T(n) = T1(n) * T2(n) = O(n*n) = O(n2)\u3002 \u6211\u521a\u521a\u8bb2\u4e86\u4e09\u79cd\u590d\u6742\u5ea6\u7684\u5206\u6790\u6280\u5de7\u3002\u4e0d\u8fc7\uff0c\u4f60\u5e76\u4e0d\u7528\u523b\u610f\u53bb\u8bb0\u5fc6\u3002\u5b9e\u9645\u4e0a\uff0c\u590d\u6742\u5ea6\u5206\u6790\u8fd9\u4e2a\u4e1c\u897f\u5173\u952e\u5728\u4e8e\u201c\u719f \u7ec3\u201d\u3002\u4f60\u53ea\u8981\u591a\u770b\u6848\u4f8b\uff0c\u591a\u5206\u6790\uff0c\u5c31\u80fd\u505a\u5230\u201c\u65e0\u62db\u80dc\u6709\u62db\u201d\u3002 ## \u51e0\u79cd\u5e38\u89c1\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u4f8b\u5206\u6790 ### O(1) \u9996\u5148\u4f60\u5fc5\u987b\u660e\u786e\u4e00\u4e2a\u6982\u5ff5\uff0cO(1) \u53ea\u662f\u5e38\u91cf\u7ea7\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4e00\u79cd\u8868\u793a\u65b9\u6cd5\uff0c\u5e76\u4e0d\u662f\u6307\u53ea\u6267\u884c\u4e86\u4e00\u884c\u4ee3\u7801\u3002\u6bd4\u5982 \u8fd9\u6bb5\u4ee3\u7801\uff0c\u5373\u4fbf\u6709 3 \u884c\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(1\uff09\uff0c\u800c\u4e0d\u662f O(3)\u3002 int i = 8 ; int j = 6 ; int sum = i + j ; \u6211\u7a0d\u5fae\u603b\u7ed3\u4e00\u4e0b\uff0c\u53ea\u8981\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\u4e0d\u968f n \u7684\u589e\u5927\u800c\u589e\u957f\uff0c\u8fd9\u6837\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u90fd\u8bb0\u4f5c O(1)\u3002\u6216\u8005 \u8bf4\uff0c \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u7b97\u6cd5\u4e2d\u4e0d\u5b58\u5728\u5faa\u73af\u8bed\u53e5\u3001\u9012\u5f52\u8bed\u53e5\uff0c\u5373\u4f7f\u6709\u6210\u5343\u4e0a\u4e07\u884c\u7684\u4ee3\u7801\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f \u039f(1)\u3002 ### O(logn)\u3001O(nlogn) \u5bf9\u6570\u9636\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u5e38\u89c1\uff0c\u540c\u65f6\u4e5f\u662f\u6700\u96be\u5206\u6790\u7684\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6211\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u4e00\u4e0b\u3002 i = 1 ; while ( i <= n ) { i = i * 2 ; } \u6839\u636e\u6211\u4eec\u524d\u9762\u8bb2\u7684\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\uff0c\u7b2c\u4e09\u884c\u4ee3\u7801\u662f\u5faa\u73af\u6267\u884c\u6b21\u6570\u6700\u591a\u7684\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u8981\u80fd\u8ba1\u7b97\u51fa\u8fd9\u884c\u4ee3\u7801\u88ab \u6267\u884c\u4e86\u591a\u5c11\u6b21\uff0c\u5c31\u80fd\u77e5\u9053\u6574\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u53d8\u91cf i \u7684\u503c\u4ece 1 \u5f00\u59cb\u53d6\uff0c\u6bcf\u5faa\u73af\u4e00\u6b21\u5c31\u4e58\u4ee5 2\u3002\u5f53\u5927\u4e8e n \u65f6\uff0c\u5faa\u73af\u7ed3\u675f\u3002\u8fd8\u8bb0\u5f97\u6211\u4eec\u9ad8\u4e2d \u5b66\u8fc7\u7684\u7b49\u6bd4\u6570\u5217\u5417\uff1f\u5b9e\u9645\u4e0a\uff0c\u53d8\u91cf i \u7684\u53d6\u503c\u5c31\u662f\u4e00\u4e2a\u7b49\u6bd4\u6570\u5217\u3002\u5982\u679c\u6211\u628a\u5b83\u4e00\u4e2a\u4e00\u4e2a\u5217\u51fa\u6765\uff0c\u5c31\u5e94\u8be5\u662f\u8fd9\u4e2a\u6837 \u5b50\u7684\uff1a \u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u8981\u77e5\u9053 x \u503c\u662f\u591a\u5c11\uff0c\u5c31\u77e5\u9053\u8fd9\u884c\u4ee3\u7801\u6267\u884c\u7684\u6b21\u6570\u4e86\u3002\u901a\u8fc7 2x=n \u6c42\u89e3 x \u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u60f3\u9ad8\u4e2d\u5e94\u8be5 \u5c31\u5b66\u8fc7\u4e86\uff0c\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002x=log2n\uff0c\u6240\u4ee5\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(log2n)\u3002 \u73b0\u5728\uff0c\u6211\u628a\u4ee3\u7801\u7a0d\u5fae\u6539\u4e0b\uff0c\u4f60\u518d\u770b\u770b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f i = 1 ; while ( i <= n ) { i = i * 3 ; } \u6839\u636e\u6211\u521a\u521a\u8bb2\u7684\u601d\u8def\uff0c\u5f88\u7b80\u5355\u5c31\u80fd\u770b\u51fa\u6765\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log3n)\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e0d\u7ba1\u662f\u4ee5 2 \u4e3a\u5e95\u3001\u4ee5 3 \u4e3a\u5e95\uff0c\u8fd8\u662f\u4ee5 10 \u4e3a\u5e95\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u5bf9\u6570\u9636\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u8bb0\u4e3a O(logn)\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u6570\u4e4b\u95f4\u662f\u53ef\u4ee5\u4e92\u76f8\u8f6c\u6362\u7684\uff0clog3n \u5c31\u7b49\u4e8e log32 * log2n\uff0c\u6240\u4ee5 O(log3n) = O(C * log2n)\uff0c\u5176\u4e2d C=log32 \u662f\u4e00\u4e2a\u5e38\u91cf\u3002\u57fa\u4e8e\u6211\u4eec\u524d\u9762\u7684\u4e00\u4e2a\u7406\u8bba\uff1a \u5728\u91c7\u7528\u5927 O \u6807\u8bb0\u590d\u6742\u5ea6\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5ffd\u7565\u7cfb\u6570\uff0c\u5373O(Cf(n)) = O(f(n)) \u3002\u6240\u4ee5\uff0cO(log2n) \u5c31\u7b49\u4e8e O(log3n)\u3002\u56e0\u6b64\uff0c\u5728\u5bf9\u6570\u9636\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8868\u793a\u65b9\u6cd5\u91cc\uff0c\u6211\u4eec\u5ffd\u7565 \u5bf9\u6570\u7684\u201c\u5e95\u201d\uff0c\u7edf\u4e00\u8868\u793a\u4e3a O(logn)\u3002 \u5982\u679c\u4f60\u7406\u89e3\u4e86\u6211\u524d\u9762\u8bb2\u7684 O(logn)\uff0c\u90a3 O(nlogn) \u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\u3002\u8fd8\u8bb0\u5f97\u6211\u4eec\u521a\u8bb2\u7684\u4e58\u6cd5\u6cd5\u5219\u5417\uff1f\u5982\u679c\u4e00\u6bb5 \u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(logn)\uff0c\u6211\u4eec\u5faa\u73af\u6267\u884c n \u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(nlogn) \u4e86\u3002\u800c\u4e14\uff0cO(nlogn) \u4e5f\u662f\u4e00\u79cd \u975e\u5e38\u5e38\u89c1\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6bd4\u5982\uff0c\u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(nlogn)\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u524d\u9762\uff0c\u54b1\u4eec\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u8bb2\u5927 O \u8868\u793a\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff0c\u7406\u89e3\u4e86\u524d\u9762\u8bb2\u7684\u5185\u5bb9\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\u5b66\u8d77\u6765\u5c31 \u975e\u5e38\u7b80\u5355\u4e86\u3002 \u524d\u9762\u6211\u8bb2\u8fc7\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5168\u79f0\u662f**\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8868\u793a\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u6570\u636e\u89c4\u6a21\u4e4b\u95f4\u7684\u589e\u957f\u5173\u7cfb**\u3002\u7c7b\u6bd4\u4e00\u4e0b\uff0c \u7a7a\u95f4\u590d\u6742\u5ea6\u5168\u79f0\u5c31\u662f**\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\uff08asymptotic space complexity\uff09 \uff0c**\u8868\u793a\u7b97\u6cd5\u7684\u5b58\u50a8\u7a7a\u95f4\u4e0e\u6570\u636e\u89c4\u6a21\u4e4b\u95f4\u7684\u589e\u957f\u5173\u7cfb \u3002 \u6211\u8fd8\u662f\u62ff\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u7ed9\u4f60\u8bf4\u660e\u3002\uff08\u8fd9\u6bb5\u4ee3\u7801\u6709\u70b9\u201c\u50bb\u201d\uff0c\u4e00\u822c\u6ca1\u4eba\u4f1a\u8fd9\u4e48\u5199\uff0c\u6211\u8fd9\u4e48\u5199\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u7ed9\u4f60\u89e3\u91ca\u3002\uff09 void print ( int n ) { int i = 0 ; int [] a = new int [ n ]; for ( i ; i < n ; ++ i ) { a [ i ] = i * i ; } for ( i = n -1 ; i >= 0 ; -- i ) { print out a [ i ] } } \u8ddf\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c 2 \u884c\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u7533\u8bf7\u4e86\u4e00\u4e2a\u7a7a\u95f4\u5b58\u50a8\u53d8\u91cf i\uff0c\u4f46\u662f\u5b83\u662f\u5e38\u91cf\u9636\u7684\uff0c\u8ddf \u6570\u636e\u89c4\u6a21 n \u6ca1\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u3002\u7b2c 3 \u884c\u7533\u8bf7\u4e86\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684 int \u7c7b\u578b\u6570\u7ec4\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u5269\u4e0b\u7684\u4ee3\u7801 \u90fd\u6ca1\u6709\u5360\u7528\u66f4\u591a\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u6574\u6bb5\u4ee3\u7801\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\u3002 \u6211\u4eec\u5e38\u89c1\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(1)\u3001O(n)\u3001O(n2)\uff0c\u50cf O(logn)\u3001O(nlogn) \u8fd9\u6837\u7684\u5bf9\u6570\u9636\u590d\u6742\u5ea6\u5e73\u65f6\u90fd\u7528\u4e0d\u5230\u3002\u800c \u4e14\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u6bd4\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u8981\u7b80\u5355\u5f88\u591a\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u638c\u63e1\u521a\u6211\u8bf4\u7684\u8fd9\u4e9b\u5185\u5bb9\u5df2\u7ecf\u8db3\u591f\u4e86\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/#_1","text":"\u590d\u6742\u5ea6\u5206\u6790\u662f\u6574\u4e2a\u7b97\u6cd5\u5b66\u4e60\u7684\u7cbe\u9ad3\uff0c\u53ea\u8981\u638c\u63e1\u4e86\u5b83\uff0c\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u5185\u5bb9\u57fa\u672c\u4e0a\u5c31\u638c\u63e1\u4e86\u4e00\u534a","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/#o","text":"\u7b97\u6cd5\u7684\u6267\u884c\u6548\u7387\uff0c\u7c97\u7565\u5730\u8bb2\uff0c\u5c31\u662f\u7b97\u6cd5\u4ee3\u7801\u6267\u884c\u7684\u65f6\u95f4\u3002 \u4f46\u662f\uff0c\u5982\u4f55\u5728\u4e0d\u8fd0\u884c\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u201c\u8089\u773c\u201d\u5f97\u5230\u4e00\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\u5462\uff1f\u8fd9\u91cc\u6709\u6bb5\u975e\u5e38\u7b80\u5355\u7684\u4ee3\u7801\uff0c\u6c42 1,2,3\u2026n \u7684\u7d2f\u52a0\u548c\u3002\u73b0\u5728\uff0c\u6211\u5c31\u5e26\u4f60\u4e00\u5757\u6765\u4f30\u7b97\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\u3002 int cal ( int n ) { int sum = 0 ; int i = 1 ; for (; i <= n ; ++ i ) { sum = sum + i ; } return sum ; } \u4ece CPU \u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u6bcf\u4e00\u884c\u90fd\u6267\u884c\u7740\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff1a \u8bfb\u6570\u636e-\u8fd0\u7b97-\u5199\u6570\u636e \u3002\u5c3d\u7ba1\u6bcf\u884c\u4ee3\u7801\u5bf9\u5e94\u7684 CPU \u6267 \u884c\u7684\u4e2a\u6570\u3001\u6267\u884c\u7684\u65f6\u95f4\u90fd\u4e0d\u4e00\u6837\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u662f\u7c97\u7565\u4f30\u8ba1\uff0c\u6240\u4ee5\u53ef\u4ee5\u5047\u8bbe\u6bcf\u884c\u4ee3\u7801\u6267\u884c\u7684\u65f6\u95f4\u90fd\u4e00\u6837\uff0c\u4e3a unit_time\u3002\u5728\u8fd9\u4e2a\u5047\u8bbe\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u603b\u6267\u884c\u65f6\u95f4\u662f\u591a\u5c11\u5462\uff1f \u7b2c 2\u30013 \u884c\u4ee3\u7801\u5206\u522b\u9700\u8981 1 \u4e2a unit_time \u7684\u6267\u884c\u65f6\u95f4\uff0c\u7b2c 4\u30015 \u884c\u90fd\u8fd0\u884c\u4e86 n \u904d\uff0c\u6240\u4ee5\u9700\u8981 2n unit_time \u7684\u6267\u884c \u65f6\u95f4\uff0c\u6240\u4ee5\u8fd9\u6bb5\u4ee3\u7801\u603b\u7684\u6267\u884c\u65f6\u95f4\u5c31\u662f (2n+2) unit_time\u3002\u53ef\u4ee5\u770b\u51fa\u6765\uff0c**\u6240\u6709\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4 T(n) \u4e0e\u6bcf\u884c\u4ee3\u7801\u7684* \u6267\u884c\u6b21\u6570\u6210\u6b63\u6bd4 \u3002 \u6309\u7167\u8fd9\u4e2a\u5206\u6790\u601d\u8def\uff0c\u6211\u4eec\u518d\u6765\u770b\u8fd9\u6bb5\u4ee3\u7801\u3002 int cal ( int n ) { int sum = 0 ; int i = 1 ; int j = 1 ; for (; i <= n ; ++ i ) { j = 1 ; for (; j <= n ; ++ j ) { sum = sum + i * j ; } } } \u6211\u4eec\u4f9d\u65e7\u5047\u8bbe\u6bcf\u4e2a\u8bed\u53e5\u7684\u6267\u884c\u65f6\u95f4\u662f unit_time\u3002\u90a3\u8fd9\u6bb5\u4ee3\u7801\u7684\u603b\u6267\u884c\u65f6\u95f4 T(n) \u662f\u591a\u5c11\u5462\uff1f \u7b2c 2\u30013\u30014 \u884c\u4ee3\u7801\uff0c\u6bcf\u884c\u90fd\u9700\u8981 1 \u4e2a unit_time \u7684\u6267\u884c\u65f6\u95f4\uff0c\u7b2c 5\u30016 \u884c\u4ee3\u7801\u5faa\u73af\u6267\u884c\u4e86 n \u904d\uff0c\u9700\u8981 2n * unit_time \u7684\u6267\u884c\u65f6\u95f4\uff0c\u7b2c 7\u30018 \u884c\u4ee3\u7801\u5faa\u73af\u6267\u884c\u4e86 n2\u904d\uff0c\u6240\u4ee5\u9700\u8981 2n2* unit_time \u7684\u6267\u884c\u65f6\u95f4\u3002\u6240\u4ee5\uff0c\u6574\u6bb5\u4ee3 \u7801\u603b\u7684\u6267\u884c\u65f6\u95f4 T(n) = (2n2+2n+3)*unit_time\u3002 \u5c3d\u7ba1\u6211\u4eec\u4e0d\u77e5\u9053 unit_time \u7684\u5177\u4f53\u503c\uff0c\u4f46\u662f\u901a\u8fc7\u8fd9\u4e24\u6bb5\u4ee3\u7801\u6267\u884c\u65f6\u95f4\u7684\u63a8\u5bfc\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u89c4 \u5f8b\uff0c\u90a3\u5c31\u662f\uff0c \u6240\u6709\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4 T(n) \u4e0e\u6bcf\u884c\u4ee3\u7801\u7684\u6267\u884c\u6b21\u6570 n \u6210\u6b63\u6bd4 \u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u89c4\u5f8b\u603b\u7ed3\u6210\u4e00\u4e2a\u516c\u5f0f\u3002\u6ce8\u610f\uff0c\u5927 O \u5c31\u8981\u767b\u573a\u4e86\uff01 \u6211\u6765\u5177\u4f53\u89e3\u91ca\u4e00\u4e0b\u8fd9\u4e2a\u516c\u5f0f\u3002\u5176\u4e2d\uff0cT(n) \u6211\u4eec\u5df2\u7ecf\u8bb2\u8fc7\u4e86\uff0c\u5b83\u8868\u793a\u4ee3\u7801\u6267\u884c\u7684\u65f6\u95f4\uff1bn \u8868\u793a\u6570\u636e\u89c4\u6a21\u7684\u5927\u5c0f\uff1bf(n) \u8868\u793a\u6bcf\u884c\u4ee3\u7801\u6267\u884c\u7684\u6b21\u6570\u603b\u548c\u3002\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u516c\u5f0f\uff0c\u6240\u4ee5\u7528 f(n) \u6765\u8868\u793a\u3002\u516c\u5f0f\u4e2d\u7684 O\uff0c\u8868\u793a\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4 T(n) \u4e0e f(n) \u8868\u8fbe\u5f0f\u6210\u6b63\u6bd4\u3002 \u6240\u4ee5\uff0c\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u7684 T(n) = O(2n+2)\uff0c\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d\u7684 T(n) = O(2n2+2n+3)\u3002\u8fd9\u5c31\u662f**\u5927 O \u65f6\u95f4\u590d\u6742\u5ea6\u8868\u793a\u6cd5**\u3002 \u5927 O \u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5177\u4f53\u8868\u793a\u4ee3\u7801\u771f\u6b63\u7684\u6267\u884c\u65f6\u95f4\uff0c\u800c\u662f\u8868\u793a**\u4ee3\u7801\u6267\u884c\u65f6\u95f4\u968f\u6570\u636e\u89c4\u6a21\u589e\u957f\u7684\u53d8\u5316\u8d8b\u52bf**\uff0c \u6240\u4ee5\uff0c\u4e5f\u53eb\u4f5c**\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\uff08asymptotic time complexity\uff09 \uff0c\u7b80\u79f0**\u65f6\u95f4\u590d\u6742\u5ea6 \u3002 \u5f53 n \u5f88\u5927\u65f6\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u60f3\u8c61\u6210 10000\u3001100000\u3002\u800c\u516c\u5f0f\u4e2d\u7684\u4f4e\u9636\u3001\u5e38\u91cf\u3001\u7cfb\u6570\u4e09\u90e8\u5206\u5e76\u4e0d\u5de6\u53f3\u589e\u957f\u8d8b\u52bf\uff0c\u6240\u4ee5 \u90fd\u53ef\u4ee5\u5ffd\u7565\u3002\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u6700\u5927\u91cf\u7ea7\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u679c\u7528\u5927 O \u8868\u793a\u6cd5\u8868\u793a\u521a\u8bb2\u7684\u90a3\u4e24\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c \u5c31\u53ef\u4ee5\u8bb0\u4e3a\uff1aT(n) = O(n)\uff1b T(n) = O(n2)\u3002","title":"\u5927 O \u590d\u6742\u5ea6\u8868\u793a\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/#_2","text":"\u524d\u9762\u4ecb\u7ecd\u4e86\u5927 O \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u7531\u6765\u548c\u8868\u793a\u65b9\u6cd5\u3002\u73b0\u5728\u6211\u4eec\u6765\u770b\u4e0b\uff0c\u5982\u4f55\u5206\u6790\u4e00\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1f\u6211\u8fd9\u513f\u6709\u4e09 \u4e2a\u6bd4\u8f83\u5b9e\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u5206\u4eab\u7ed9\u4f60\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/#_3","text":"\u6211\u521a\u624d\u8bf4\u4e86\uff0c\u5927 O \u8fd9\u79cd\u590d\u6742\u5ea6\u8868\u793a\u65b9\u6cd5\u53ea\u662f\u8868\u793a\u4e00\u79cd\u53d8\u5316\u8d8b\u52bf\u3002\u6211\u4eec\u901a\u5e38\u4f1a\u5ffd\u7565\u6389\u516c\u5f0f\u4e2d\u7684\u5e38\u91cf\u3001\u4f4e\u9636\u3001\u7cfb \u6570\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e2a\u6700\u5927\u9636\u7684\u91cf\u7ea7\u5c31\u53ef\u4ee5\u4e86\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u5728\u5206\u6790\u4e00\u4e2a\u7b97\u6cd5\u3001\u4e00\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u65f6\u5019\uff0c\u4e5f \u53ea\u5173\u6ce8\u5faa\u73af\u6267\u884c\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e00\u6bb5\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6bb5\u6838\u5fc3\u4ee3\u7801\u6267\u884c\u6b21\u6570\u7684 n \u7684\u91cf\u7ea7\uff0c\u5c31\u662f\u6574\u6bb5\u8981\u5206\u6790\u4ee3\u7801 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4e3a\u4e86\u4fbf\u4e8e\u4f60\u7406\u89e3\uff0c\u6211\u8fd8\u62ff\u524d\u9762\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u3002 int cal ( int n ) { int sum = 0 ; int i = 1 ; for (; i <= n ; ++ i ) { sum = sum + i ; } return sum ; } \u5176\u4e2d\u7b2c 2\u30013 \u884c\u4ee3\u7801\u90fd\u662f\u5e38\u91cf\u7ea7\u7684\u6267\u884c\u65f6\u95f4\uff0c\u4e0e n \u7684\u5927\u5c0f\u65e0\u5173\uff0c\u6240\u4ee5\u5bf9\u4e8e\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u5f71\u54cd\u3002\u5faa\u73af\u6267\u884c\u6b21\u6570\u6700 \u591a\u7684\u662f\u7b2c 4\u30015 \u884c\u4ee3\u7801\uff0c\u6240\u4ee5\u8fd9\u5757\u4ee3\u7801\u8981\u91cd\u70b9\u5206\u6790\u3002\u524d\u9762\u6211\u4eec\u4e5f\u8bb2\u8fc7\uff0c\u8fd9\u4e24\u884c\u4ee3\u7801\u88ab\u6267\u884c\u4e86 n \u6b21\uff0c\u6240\u4ee5\u603b\u7684\u65f6 \u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\u3002","title":"\u53ea\u5173\u6ce8\u5faa\u73af\u6267\u884c\u6b21\u6570\u6700\u591a\u7684\u4e00\u6bb5\u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/#_4","text":"\u6211\u8fd9\u91cc\u8fd8\u6709\u4e00\u6bb5\u4ee3\u7801\u3002\u4f60\u53ef\u4ee5\u5148\u8bd5\u7740\u5206\u6790\u4e00\u4e0b\uff0c\u7136\u540e\u518d\u5f80\u4e0b\u770b\u8ddf\u6211\u7684\u5206\u6790\u601d\u8def\u662f\u5426\u4e00\u6837\u3002 int cal ( int n ) { int sum_1 = 0 ; int p = 1 ; for (; p < 100 ; ++ p ) { sum_1 = sum_1 + p ; } int sum_2 = 0 ; int q = 1 ; for (; q < n ; ++ q ) { sum_2 = sum_2 + q ; } int sum_3 = 0 ; int i = 1 ; int j = 1 ; for (; i <= n ; ++ i ) { j = 1 ; for (; j <= n ; ++ j ) { sum_3 = sum_3 + i * j ; } } return sum_1 + sum_2 + sum_3 ; } \u8fd9\u4e2a\u4ee3\u7801\u5206\u4e3a\u4e09\u90e8\u5206\uff0c\u5206\u522b\u662f\u6c42 sum_1\u3001sum_2\u3001sum_3\u3002\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u5206\u6790\u6bcf\u4e00\u90e8\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7136\u540e \u628a\u5b83\u4eec\u653e\u5230\u4e00\u5757\u513f\uff0c\u518d\u53d6\u4e00\u4e2a\u91cf\u7ea7\u6700\u5927\u7684\u4f5c\u4e3a\u6574\u6bb5\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u3002 \u7b2c\u4e00\u6bb5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u8fd9\u6bb5\u4ee3\u7801\u5faa\u73af\u6267\u884c\u4e86 100 \u6b21\uff0c\u6240\u4ee5\u662f\u4e00\u4e2a\u5e38\u91cf\u7684\u6267\u884c\u65f6\u95f4\uff0c\u8ddf n \u7684\u89c4\u6a21\u65e0 \u5173\u3002 \u8fd9\u91cc\u6211\u8981\u518d\u5f3a\u8c03\u4e00\u4e0b\uff0c\u5373\u4fbf\u8fd9\u6bb5\u4ee3\u7801\u5faa\u73af 10000 \u6b21\u3001100000 \u6b21\uff0c\u53ea\u8981\u662f\u4e00\u4e2a\u5df2\u77e5\u7684\u6570\uff0c\u8ddf n \u65e0\u5173\uff0c\u7167\u6837\u4e5f \u662f\u5e38\u91cf\u7ea7\u7684\u6267\u884c\u65f6\u95f4\u3002\u5f53 n \u65e0\u9650\u5927\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u5ffd\u7565\u3002\u5c3d\u7ba1\u5bf9\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\u4f1a\u6709\u5f88\u5927\u5f71\u54cd\uff0c\u4f46\u662f\u56de\u5230\u65f6 \u95f4\u590d\u6742\u5ea6\u7684\u6982\u5ff5\u6765\u8bf4\uff0c\u5b83\u8868\u793a\u7684\u662f\u4e00\u4e2a\u7b97\u6cd5\u6267\u884c\u6548\u7387\u4e0e\u6570\u636e\u89c4\u6a21\u589e\u957f\u7684\u53d8\u5316\u8d8b\u52bf\uff0c\u6240\u4ee5\u4e0d\u7ba1\u5e38\u91cf\u7684\u6267\u884c\u65f6\u95f4\u591a \u5927\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5ffd\u7565\u6389\u3002\u56e0\u4e3a\u5b83\u672c\u8eab\u5bf9\u589e\u957f\u8d8b\u52bf\u5e76\u6ca1\u6709\u5f71\u54cd\u3002 \u90a3\u7b2c\u4e8c\u6bb5\u4ee3\u7801\u548c\u7b2c\u4e09\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u7b54\u6848\u662f O(n) \u548c O(n2)\uff0c\u4f60\u5e94\u8be5\u80fd\u5bb9\u6613\u5c31\u5206\u6790\u51fa\u6765\uff0c\u6211 \u5c31\u4e0d\u5570\u55e6\u4e86\u3002 \u200b \u7efc\u5408\u8fd9\u4e09\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53d6\u5176\u4e2d\u6700\u5927\u7684\u91cf\u7ea7\u3002\u6240\u4ee5\uff0c\u6574\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4e3a O(n2)\u3002\u4e5f\u5c31\u662f \u8bf4\uff1a \u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u7b49\u4e8e\u91cf\u7ea7\u6700\u5927\u7684\u90a3\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u3002\u90a3\u6211\u4eec\u5c06\u8fd9\u4e2a\u89c4\u5f8b\u62bd\u8c61\u6210\u516c\u5f0f\u5c31\u662f\uff1a \u5982\u679c T1(n)=O(f(n))\uff0cT2(n)=O(g(n))\uff1b\u90a3\u4e48 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n))).","title":"\u52a0\u6cd5\u6cd5\u5219\uff1a\u603b\u590d\u6742\u5ea6\u7b49\u4e8e\u91cf\u7ea7\u6700\u5927\u7684\u90a3\u6bb5\u4ee3\u7801\u7684\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/#_5","text":"\u6211\u521a\u8bb2\u4e86\u4e00\u4e2a\u590d\u6742\u5ea6\u5206\u6790\u4e2d\u7684\u52a0\u6cd5\u6cd5\u5219\uff0c\u8fd9\u513f\u8fd8\u6709\u4e00\u4e2a**\u4e58\u6cd5\u6cd5\u5219**\u3002\u7c7b\u6bd4\u4e00\u4e0b\uff0c\u4f60\u5e94\u8be5\u80fd\u201c\u731c\u5230\u201d\u516c\u5f0f\u662f\u4ec0\u4e48\u6837\u5b50 \u7684\u5427\uff1f \u5982\u679c T1(n)=O(f(n))\uff0cT2(n)=O(g(n))\uff1b \u90a3\u4e48 T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n)). \u4e5f\u5c31\u662f\u8bf4\uff0c\u5047\u8bbe T1(n) = O(n)\uff0cT2(n) = O(n2)\uff0c\u5219 T1(n) * T2(n) = O(n3)\u3002\u843d\u5b9e\u5230\u5177\u4f53\u7684\u4ee3\u7801\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u628a \u4e58\u6cd5\u6cd5\u5219\u770b\u6210\u662f**\u5d4c\u5957\u5faa\u73af**\uff0c\u6211\u4e3e\u4e2a\u4f8b\u5b50\u7ed9\u4f60\u89e3\u91ca\u4e00\u4e0b\u3002 int cal ( int n ) { int ret = 0 ; int i = 1 ; for (; i < n ; ++ i ) { ret = ret + f ( i ); } } int f ( int n ) { int sum = 0 ; int i = 1 ; for (; i < n ; ++ i ) { sum = sum + i ; } return sum ; } \u6211\u4eec\u5355\u72ec\u770b cal() \u51fd\u6570\u3002\u5047\u8bbe f() \u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u64cd\u4f5c\uff0c\u90a3\u7b2c 4\uff5e6 \u884c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff0cT1(n) = O(n)\u3002\u4f46 f() \u51fd\u6570\u672c\u8eab\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f T2(n) = O(n)\uff0c\u6240\u4ee5\uff0c\u6574\u4e2a cal() \u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff0c T(n) = T1(n) * T2(n) = O(n*n) = O(n2)\u3002 \u6211\u521a\u521a\u8bb2\u4e86\u4e09\u79cd\u590d\u6742\u5ea6\u7684\u5206\u6790\u6280\u5de7\u3002\u4e0d\u8fc7\uff0c\u4f60\u5e76\u4e0d\u7528\u523b\u610f\u53bb\u8bb0\u5fc6\u3002\u5b9e\u9645\u4e0a\uff0c\u590d\u6742\u5ea6\u5206\u6790\u8fd9\u4e2a\u4e1c\u897f\u5173\u952e\u5728\u4e8e\u201c\u719f \u7ec3\u201d\u3002\u4f60\u53ea\u8981\u591a\u770b\u6848\u4f8b\uff0c\u591a\u5206\u6790\uff0c\u5c31\u80fd\u505a\u5230\u201c\u65e0\u62db\u80dc\u6709\u62db\u201d\u3002 ## \u51e0\u79cd\u5e38\u89c1\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u4f8b\u5206\u6790 ### O(1) \u9996\u5148\u4f60\u5fc5\u987b\u660e\u786e\u4e00\u4e2a\u6982\u5ff5\uff0cO(1) \u53ea\u662f\u5e38\u91cf\u7ea7\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4e00\u79cd\u8868\u793a\u65b9\u6cd5\uff0c\u5e76\u4e0d\u662f\u6307\u53ea\u6267\u884c\u4e86\u4e00\u884c\u4ee3\u7801\u3002\u6bd4\u5982 \u8fd9\u6bb5\u4ee3\u7801\uff0c\u5373\u4fbf\u6709 3 \u884c\uff0c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(1\uff09\uff0c\u800c\u4e0d\u662f O(3)\u3002 int i = 8 ; int j = 6 ; int sum = i + j ; \u6211\u7a0d\u5fae\u603b\u7ed3\u4e00\u4e0b\uff0c\u53ea\u8981\u4ee3\u7801\u7684\u6267\u884c\u65f6\u95f4\u4e0d\u968f n \u7684\u589e\u5927\u800c\u589e\u957f\uff0c\u8fd9\u6837\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u90fd\u8bb0\u4f5c O(1)\u3002\u6216\u8005 \u8bf4\uff0c \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u7b97\u6cd5\u4e2d\u4e0d\u5b58\u5728\u5faa\u73af\u8bed\u53e5\u3001\u9012\u5f52\u8bed\u53e5\uff0c\u5373\u4f7f\u6709\u6210\u5343\u4e0a\u4e07\u884c\u7684\u4ee3\u7801\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f \u039f(1)\u3002 ### O(logn)\u3001O(nlogn) \u5bf9\u6570\u9636\u65f6\u95f4\u590d\u6742\u5ea6\u975e\u5e38\u5e38\u89c1\uff0c\u540c\u65f6\u4e5f\u662f\u6700\u96be\u5206\u6790\u7684\u4e00\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6211\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u4e00\u4e0b\u3002 i = 1 ; while ( i <= n ) { i = i * 2 ; } \u6839\u636e\u6211\u4eec\u524d\u9762\u8bb2\u7684\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\uff0c\u7b2c\u4e09\u884c\u4ee3\u7801\u662f\u5faa\u73af\u6267\u884c\u6b21\u6570\u6700\u591a\u7684\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u8981\u80fd\u8ba1\u7b97\u51fa\u8fd9\u884c\u4ee3\u7801\u88ab \u6267\u884c\u4e86\u591a\u5c11\u6b21\uff0c\u5c31\u80fd\u77e5\u9053\u6574\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u53d8\u91cf i \u7684\u503c\u4ece 1 \u5f00\u59cb\u53d6\uff0c\u6bcf\u5faa\u73af\u4e00\u6b21\u5c31\u4e58\u4ee5 2\u3002\u5f53\u5927\u4e8e n \u65f6\uff0c\u5faa\u73af\u7ed3\u675f\u3002\u8fd8\u8bb0\u5f97\u6211\u4eec\u9ad8\u4e2d \u5b66\u8fc7\u7684\u7b49\u6bd4\u6570\u5217\u5417\uff1f\u5b9e\u9645\u4e0a\uff0c\u53d8\u91cf i \u7684\u53d6\u503c\u5c31\u662f\u4e00\u4e2a\u7b49\u6bd4\u6570\u5217\u3002\u5982\u679c\u6211\u628a\u5b83\u4e00\u4e2a\u4e00\u4e2a\u5217\u51fa\u6765\uff0c\u5c31\u5e94\u8be5\u662f\u8fd9\u4e2a\u6837 \u5b50\u7684\uff1a \u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u8981\u77e5\u9053 x \u503c\u662f\u591a\u5c11\uff0c\u5c31\u77e5\u9053\u8fd9\u884c\u4ee3\u7801\u6267\u884c\u7684\u6b21\u6570\u4e86\u3002\u901a\u8fc7 2x=n \u6c42\u89e3 x \u8fd9\u4e2a\u95ee\u9898\u6211\u4eec\u60f3\u9ad8\u4e2d\u5e94\u8be5 \u5c31\u5b66\u8fc7\u4e86\uff0c\u6211\u5c31\u4e0d\u591a\u8bf4\u4e86\u3002x=log2n\uff0c\u6240\u4ee5\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(log2n)\u3002 \u73b0\u5728\uff0c\u6211\u628a\u4ee3\u7801\u7a0d\u5fae\u6539\u4e0b\uff0c\u4f60\u518d\u770b\u770b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f i = 1 ; while ( i <= n ) { i = i * 3 ; } \u6839\u636e\u6211\u521a\u521a\u8bb2\u7684\u601d\u8def\uff0c\u5f88\u7b80\u5355\u5c31\u80fd\u770b\u51fa\u6765\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log3n)\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e0d\u7ba1\u662f\u4ee5 2 \u4e3a\u5e95\u3001\u4ee5 3 \u4e3a\u5e95\uff0c\u8fd8\u662f\u4ee5 10 \u4e3a\u5e95\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u5bf9\u6570\u9636\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u8bb0\u4e3a O(logn)\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u5bf9\u6570\u4e4b\u95f4\u662f\u53ef\u4ee5\u4e92\u76f8\u8f6c\u6362\u7684\uff0clog3n \u5c31\u7b49\u4e8e log32 * log2n\uff0c\u6240\u4ee5 O(log3n) = O(C * log2n)\uff0c\u5176\u4e2d C=log32 \u662f\u4e00\u4e2a\u5e38\u91cf\u3002\u57fa\u4e8e\u6211\u4eec\u524d\u9762\u7684\u4e00\u4e2a\u7406\u8bba\uff1a \u5728\u91c7\u7528\u5927 O \u6807\u8bb0\u590d\u6742\u5ea6\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5ffd\u7565\u7cfb\u6570\uff0c\u5373O(Cf(n)) = O(f(n)) \u3002\u6240\u4ee5\uff0cO(log2n) \u5c31\u7b49\u4e8e O(log3n)\u3002\u56e0\u6b64\uff0c\u5728\u5bf9\u6570\u9636\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8868\u793a\u65b9\u6cd5\u91cc\uff0c\u6211\u4eec\u5ffd\u7565 \u5bf9\u6570\u7684\u201c\u5e95\u201d\uff0c\u7edf\u4e00\u8868\u793a\u4e3a O(logn)\u3002 \u5982\u679c\u4f60\u7406\u89e3\u4e86\u6211\u524d\u9762\u8bb2\u7684 O(logn)\uff0c\u90a3 O(nlogn) \u5c31\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\u3002\u8fd8\u8bb0\u5f97\u6211\u4eec\u521a\u8bb2\u7684\u4e58\u6cd5\u6cd5\u5219\u5417\uff1f\u5982\u679c\u4e00\u6bb5 \u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(logn)\uff0c\u6211\u4eec\u5faa\u73af\u6267\u884c n \u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(nlogn) \u4e86\u3002\u800c\u4e14\uff0cO(nlogn) \u4e5f\u662f\u4e00\u79cd \u975e\u5e38\u5e38\u89c1\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6bd4\u5982\uff0c\u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(nlogn)\u3002","title":"\u4e58\u6cd5\u6cd5\u5219\uff1a\u5d4c\u5957\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u7b49\u4e8e\u5d4c\u5957\u5185\u5916\u4ee3\u7801\u590d\u6742\u5ea6\u7684\u4e58\u79ef"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A/#_6","text":"\u524d\u9762\uff0c\u54b1\u4eec\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u8bb2\u5927 O \u8868\u793a\u6cd5\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff0c\u7406\u89e3\u4e86\u524d\u9762\u8bb2\u7684\u5185\u5bb9\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\u5b66\u8d77\u6765\u5c31 \u975e\u5e38\u7b80\u5355\u4e86\u3002 \u524d\u9762\u6211\u8bb2\u8fc7\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5168\u79f0\u662f**\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u8868\u793a\u7b97\u6cd5\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u6570\u636e\u89c4\u6a21\u4e4b\u95f4\u7684\u589e\u957f\u5173\u7cfb**\u3002\u7c7b\u6bd4\u4e00\u4e0b\uff0c \u7a7a\u95f4\u590d\u6742\u5ea6\u5168\u79f0\u5c31\u662f**\u6e10\u8fdb\u7a7a\u95f4\u590d\u6742\u5ea6\uff08asymptotic space complexity\uff09 \uff0c**\u8868\u793a\u7b97\u6cd5\u7684\u5b58\u50a8\u7a7a\u95f4\u4e0e\u6570\u636e\u89c4\u6a21\u4e4b\u95f4\u7684\u589e\u957f\u5173\u7cfb \u3002 \u6211\u8fd8\u662f\u62ff\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u7ed9\u4f60\u8bf4\u660e\u3002\uff08\u8fd9\u6bb5\u4ee3\u7801\u6709\u70b9\u201c\u50bb\u201d\uff0c\u4e00\u822c\u6ca1\u4eba\u4f1a\u8fd9\u4e48\u5199\uff0c\u6211\u8fd9\u4e48\u5199\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u7ed9\u4f60\u89e3\u91ca\u3002\uff09 void print ( int n ) { int i = 0 ; int [] a = new int [ n ]; for ( i ; i < n ; ++ i ) { a [ i ] = i * i ; } for ( i = n -1 ; i >= 0 ; -- i ) { print out a [ i ] } } \u8ddf\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e00\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c 2 \u884c\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u7533\u8bf7\u4e86\u4e00\u4e2a\u7a7a\u95f4\u5b58\u50a8\u53d8\u91cf i\uff0c\u4f46\u662f\u5b83\u662f\u5e38\u91cf\u9636\u7684\uff0c\u8ddf \u6570\u636e\u89c4\u6a21 n \u6ca1\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565\u3002\u7b2c 3 \u884c\u7533\u8bf7\u4e86\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684 int \u7c7b\u578b\u6570\u7ec4\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u5269\u4e0b\u7684\u4ee3\u7801 \u90fd\u6ca1\u6709\u5360\u7528\u66f4\u591a\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u6574\u6bb5\u4ee3\u7801\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\u3002 \u6211\u4eec\u5e38\u89c1\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(1)\u3001O(n)\u3001O(n2)\uff0c\u50cf O(logn)\u3001O(nlogn) \u8fd9\u6837\u7684\u5bf9\u6570\u9636\u590d\u6742\u5ea6\u5e73\u65f6\u90fd\u7528\u4e0d\u5230\u3002\u800c \u4e14\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u6bd4\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u8981\u7b80\u5355\u5f88\u591a\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u638c\u63e1\u521a\u6211\u8bf4\u7684\u8fd9\u4e9b\u5185\u5bb9\u5df2\u7ecf\u8db3\u591f\u4e86\u3002","title":"\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B/","text":"\u6d45\u6790\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u3001\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u4e0a\u4e00\u8282\uff0c\u6211\u4eec\u8bb2\u4e86\u590d\u6742\u5ea6\u7684\u5927 O \u8868\u793a\u6cd5\u548c\u51e0\u4e2a\u5206\u6790\u6280\u5de7\uff0c\u8fd8\u4e3e\u4e86\u4e00\u4e9b\u5e38\u89c1\u590d\u6742\u5ea6\u5206\u6790\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982 O(1)\u3001 O(logn)\u3001O(n)\u3001O(nlogn) \u590d\u6742\u5ea6\u5206\u6790\u3002\u638c\u63e1\u4e86\u8fd9\u4e9b\u5185\u5bb9\uff0c\u5bf9\u4e8e\u590d\u6742\u5ea6\u5206\u6790\u8fd9\u4e2a\u77e5\u8bc6\u70b9\uff0c\u4f60\u5df2\u7ecf\u53ef\u4ee5\u5230\u53ca\u683c\u7ebf\u4e86\u3002 \u4f46\u662f\uff0c\u6211\u60f3\u4f60\u80af\u5b9a\u4e0d\u4f1a\u6ee1\u8db3\u4e8e\u6b64\u3002 \u4eca\u5929\u6211\u4f1a\u7ee7\u7eed\u7ed9\u4f60\u8bb2\u56db\u4e2a\u590d\u6742\u5ea6\u5206\u6790\u65b9\u9762\u7684\u77e5\u8bc6\u70b9\uff0c \u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \uff08best case time complexity\uff09\u3001 \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \uff08worst case time complexity\uff09\u3001 \u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \uff08average case time complexity\uff09\u3001 \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6 \uff08amortized time complexity\uff09\u3002\u5982\u679c\u8fd9\u51e0\u4e2a\u6982\u5ff5\u4f60\u90fd\u80fd\u638c\u63e1\uff0c\u90a3\u5bf9\u4f60\u6765\u8bf4\uff0c\u590d \u6742\u5ea6\u5206\u6790\u8fd9\u90e8\u5206\u5185\u5bb9\u5c31\u6ca1\u4ec0\u4e48\u5927\u95ee\u9898\u4e86\u3002 \u6700\u597d\u3001\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 // n\u8868\u793a\u6570\u7ec4array\u7684\u957f\u5ea6 int find ( int [] array , int n , int x ) { int i = 0 ; int pos = -1 ; for (; i < n ; ++ i ) { if ( array [ i ] == x ) pos = i ; } return pos ; } \u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u8fd9\u6bb5\u4ee3\u7801\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u662f\uff0c\u5728\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4\uff08array\uff09\u4e2d\uff0c\u67e5\u627e\u53d8\u91cf x \u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u6ca1 \u6709\u627e\u5230\uff0c\u5c31\u8fd4\u56de -1\u3002\u6309\u7167\u4e0a\u8282\u8bfe\u8bb2\u7684\u5206\u6790\u65b9\u6cd5\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u662f O(n)\uff0c\u5176\u4e2d\uff0cn \u4ee3\u8868\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u6211\u4eec\u5728\u6570 \u7ec4\u4e2d\u67e5\u627e\u4e00\u4e2a\u6570\u636e\uff0c\u5e76\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u628a\u6574\u4e2a\u6570\u7ec4\u90fd\u904d\u5386\u4e00\u904d\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u4e2d\u9014\u627e\u5230\u5c31\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f\u5faa\u73af\u4e86\u3002\u4f46\u662f\uff0c \u8fd9\u6bb5\u4ee3\u7801\u5199\u5f97\u4e0d\u591f\u9ad8\u6548\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u4f18\u5316\u4e00\u4e0b\u8fd9\u6bb5\u67e5\u627e\u4ee3\u7801\u3002 // n\u8868\u793a\u6570\u7ec4array\u7684\u957f\u5ea6 int find ( int [] array , int n , int x ) { int i = 0 ; int pos = -1 ; for (; i < n ; ++ i ) { if ( array [ i ] == x ) { pos = i ; break ; } } return pos ; } \u8fd9\u4e2a\u65f6\u5019\uff0c\u95ee\u9898\u5c31\u6765\u4e86\u3002\u6211\u4eec\u4f18\u5316\u5b8c\u4e4b\u540e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f O(n) \u5417\uff1f\u5f88\u663e\u7136\uff0c\u54b1\u4eec\u4e0a\u4e00\u8282\u8bb2\u7684\u5206\u6790\u65b9 \u6cd5\uff0c\u89e3\u51b3\u4e0d\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u56e0\u4e3a\uff0c\u8981\u67e5\u627e\u7684\u53d8\u91cf x \u53ef\u80fd\u51fa\u73b0\u5728\u6570\u7ec4\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\u5982\u679c\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6b63\u597d\u662f\u8981\u67e5\u627e\u7684\u53d8\u91cf x\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u7ee7 \u7eed\u904d\u5386\u5269\u4e0b\u7684 n-1 \u4e2a\u6570\u636e\u4e86\uff0c\u90a3\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(1)\u3002\u4f46\u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u53d8\u91cf x\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u628a\u6574\u4e2a\u6570\u7ec4\u90fd \u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u6210\u4e86 O(n)\u3002\u6240\u4ee5\uff0c\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u4e3a\u4e86\u8868\u793a\u4ee3\u7801\u5728\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u4e0d\u540c\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e09\u4e2a\u6982\u5ff5\uff1a\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742 \u5ea6\u548c\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u987e\u540d\u601d\u4e49\uff0c \u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff0c\u5728\u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u3002\u5c31\u50cf\u6211\u4eec\u521a\u521a\u8bb2\u5230\u7684\uff0c\u5728 \u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u67e5\u627e\u7684\u53d8\u91cf x \u6b63\u597d\u662f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e2a\u65f6\u5019\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742 \u5ea6\u3002 \u540c\u7406\uff0c \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff0c\u5728\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u3002\u5c31\u50cf\u521a\u4e3e\u7684\u90a3\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6570 \u7ec4\u4e2d\u6ca1\u6709\u8981\u67e5\u627e\u7684\u53d8\u91cf x\uff0c\u6211\u4eec\u9700\u8981\u628a\u6574\u4e2a\u6570\u7ec4\u90fd\u904d\u5386\u4e00\u904d\u624d\u884c\uff0c\u6240\u4ee5\u8fd9\u79cd\u6700\u7cdf\u7cd5\u60c5\u51b5\u4e0b\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u6700 \u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u6211\u4eec\u90fd\u77e5\u9053\uff0c\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u5bf9\u5e94\u7684\u90fd\u662f\u6781\u7aef\u60c5\u51b5\u4e0b\u7684\u4ee3\u7801\u590d\u6742\u5ea6\uff0c\u53d1\u751f\u7684\u6982\u7387\u5176\u5b9e\u5e76 \u4e0d\u5927\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u8868\u793a\u5e73\u5747\u60c5\u51b5\u4e0b\u7684\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u53e6\u4e00\u4e2a\u6982\u5ff5\uff1a\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u540e\u9762\u6211\u7b80\u79f0\u4e3a\u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u53c8\u8be5\u600e\u4e48\u5206\u6790\u5462\uff1f\u6211\u8fd8\u662f\u501f\u52a9\u521a\u624d\u67e5\u627e\u53d8\u91cf x \u7684\u4f8b\u5b50\u6765\u7ed9\u4f60\u89e3\u91ca\u3002\u8981\u67e5\u627e\u7684\u53d8\u91cf x \u5728\u6570\u7ec4\u4e2d\u7684\u4f4d \u7f6e\uff0c\u6709 n+1 \u79cd\u60c5\u51b5\uff1a \u5728\u6570\u7ec4\u7684 0\uff5en-1 \u4f4d\u7f6e\u4e2d**\u548c**\u4e0d\u5728\u6570\u7ec4\u4e2d \u3002\u6211\u4eec\u628a\u6bcf\u79cd\u60c5\u51b5\u4e0b\uff0c\u67e5\u627e\u9700\u8981\u904d\u5386\u7684\u5143\u7d20\u4e2a\u6570\u7d2f\u52a0\u8d77 \u6765\uff0c\u7136\u540e\u518d\u9664\u4ee5 n+1\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u9700\u8981\u904d\u5386\u7684\u5143\u7d20\u4e2a\u6570\u7684\u5e73\u5747\u503c\uff0c\u5373\uff1a \u6211\u4eec\u77e5\u9053\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5927 O \u6807\u8bb0\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u7701\u7565\u6389\u7cfb\u6570\u3001\u4f4e\u9636\u3001\u5e38\u91cf\uff0c\u6240\u4ee5\uff0c\u54b1\u4eec\u628a\u521a\u521a\u8fd9\u4e2a\u516c\u5f0f\u7b80\u5316\u4e4b\u540e\uff0c \u5f97\u5230\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\u3002 \u8fd9\u4e2a\u7ed3\u8bba\u867d\u7136\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u8ba1\u7b97\u8fc7\u7a0b\u7a0d\u5fae\u6709\u70b9\u513f\u95ee\u9898\u3002\u7a76\u7adf\u662f\u4ec0\u4e48\u95ee\u9898\u5462\uff1f\u6211\u4eec\u521a\u8bb2\u7684\u8fd9 n+1 \u79cd\u60c5\u51b5\uff0c\u51fa\u73b0\u7684 \u6982\u7387\u5e76\u4e0d\u662f\u4e00\u6837\u7684\u3002\u6211\u5e26\u4f60\u5177\u4f53\u5206\u6790\u4e00\u4e0b\u3002\uff08\u8fd9\u91cc\u8981\u7a0d\u5fae\u7528\u5230\u4e00\u70b9\u513f\u6982\u7387\u8bba\u7684\u77e5\u8bc6\uff0c\u4e0d\u8fc7\u975e\u5e38\u7b80\u5355\uff0c\u4f60\u4e0d\u7528\u62c5 \u5fc3\u3002\uff09 \u6211\u4eec\u77e5\u9053\uff0c\u8981\u67e5\u627e\u7684\u53d8\u91cf x\uff0c\u8981\u4e48\u5728\u6570\u7ec4\u91cc\uff0c\u8981\u4e48\u5c31\u4e0d\u5728\u6570\u7ec4\u91cc\u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u5bf9\u5e94\u7684\u6982\u7387\u7edf\u8ba1\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u4e3a\u4e86\u65b9 \u4fbf\u4f60\u7406\u89e3\uff0c\u6211\u4eec\u5047\u8bbe\u5728\u6570\u7ec4\u4e2d\u4e0e\u4e0d\u5728\u6570\u7ec4\u4e2d\u7684\u6982\u7387\u90fd\u4e3a \u00bd\u3002\u53e6\u5916\uff0c\u8981\u67e5\u627e\u7684\u6570\u636e\u51fa\u73b0\u5728 0\uff5en-1 \u8fd9 n \u4e2a\u4f4d\u7f6e\u7684\u6982 \u7387\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u4e3a 1/n\u3002\u6240\u4ee5\uff0c\u6839\u636e\u6982\u7387\u4e58\u6cd5\u6cd5\u5219\uff0c\u8981\u67e5\u627e\u7684\u6570\u636e\u51fa\u73b0\u5728 0\uff5en-1 \u4e2d\u4efb\u610f\u4f4d\u7f6e\u7684\u6982\u7387\u5c31\u662f 1/(2n)\u3002 \u56e0\u6b64\uff0c\u524d\u9762\u7684\u63a8\u5bfc\u8fc7\u7a0b\u4e2d\u5b58\u5728\u7684\u6700\u5927\u95ee\u9898\u5c31\u662f\uff0c\u6ca1\u6709\u5c06\u5404\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u8003\u8651\u8fdb\u53bb\u3002\u5982\u679c\u6211\u4eec\u628a\u6bcf\u79cd\u60c5\u51b5\u53d1\u751f\u7684 \u6982\u7387\u4e5f\u8003\u8651\u8fdb\u53bb\uff0c\u90a3\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97\u8fc7\u7a0b\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a \u8fd9\u4e2a\u503c\u5c31\u662f\u6982\u7387\u8bba\u4e2d\u7684**\u52a0\u6743\u5e73\u5747\u503c**\uff0c\u4e5f\u53eb\u4f5c**\u671f\u671b\u503c**\uff0c\u6240\u4ee5\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5168\u79f0\u5e94\u8be5\u53eb**\u52a0\u6743\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6** \u6216\u8005**\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6**\u3002 \u5f15\u5165\u6982\u7387\u4e4b\u540e\uff0c\u524d\u9762\u90a3\u6bb5\u4ee3\u7801\u7684\u52a0\u6743\u5e73\u5747\u503c\u4e3a (3n+1)/4\u3002\u7528\u5927 O \u8868\u793a\u6cd5\u6765\u8868\u793a\uff0c\u53bb\u6389\u7cfb\u6570\u548c\u5e38\u91cf\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u52a0 \u6743\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f O(n)\u3002 \u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u597d\u590d\u6742\u554a\uff0c\u8fd8\u8981\u6d89\u53ca\u6982\u7387\u8bba\u7684\u77e5\u8bc6\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u533a \u5206\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e09\u79cd\u60c5\u51b5\u3002\u50cf\u6211\u4eec\u4e0a\u4e00\u8282\u8bfe\u4e3e\u7684\u90a3\u4e9b\u4f8b\u5b50\u90a3\u6837\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u590d\u6742 \u5ea6\u5c31\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\u4e86\u3002\u53ea\u6709\u540c\u4e00\u5757\u4ee3\u7801\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u91cf\u7ea7\u7684\u5dee\u8ddd\uff0c\u6211\u4eec\u624d\u4f1a\u4f7f\u7528\u8fd9\u4e09\u79cd\u590d\u6742\u5ea6\u8868 \u793a\u6cd5\u6765\u533a\u5206\u3002 \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5230\u6b64\u4e3a\u6b62\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u4e86\u7b97\u6cd5\u590d\u6742\u5ea6\u5206\u6790\u7684\u5927\u90e8\u5206\u5185\u5bb9\u4e86\u3002\u4e0b\u9762\u6211\u8981\u7ed9\u4f60\u8bb2\u4e00\u4e2a\u66f4\u52a0\u9ad8\u7ea7\u7684\u6982\u5ff5\uff0c\u5747\u644a\u65f6\u95f4\u590d \u6742\u5ea6\uff0c\u4ee5\u53ca\u5b83\u5bf9\u5e94\u7684\u5206\u6790\u65b9\u6cd5\uff0c\u644a\u8fd8\u5206\u6790\uff08\u6216\u8005\u53eb\u5e73\u644a\u5206\u6790\uff09\u3002 \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u542c\u8d77\u6765\u8ddf\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u70b9\u513f\u50cf\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u8fd9\u4e24\u4e2a\u6982\u5ff5\u786e\u5b9e\u975e\u5e38\u5bb9\u6613\u5f04\u6df7\u3002\u6211\u524d\u9762\u8bf4 \u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u533a\u5206\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u4e09\u79cd\u590d\u6742\u5ea6\u3002\u5e73\u5747\u590d\u6742\u5ea6\u53ea\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\u624d\u4f1a\u7528\u5230\uff0c \u800c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u7528\u7684\u573a\u666f\u6bd4\u5b83\u66f4\u52a0\u7279\u6b8a\u3001\u66f4\u52a0\u6709\u9650\u3002 \u8001\u89c4\u77e9\uff0c\u6211\u8fd8\u662f\u501f\u52a9\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u5e2e\u52a9\u4f60\u7406\u89e3\u3002\uff08\u5f53\u7136\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u53ea\u662f\u6211\u4e3a\u4e86\u65b9\u4fbf\u8bb2\u89e3\u60f3\u51fa\u6765\u7684\uff0c\u5b9e\u9645\u4e0a\u6ca1\u4eba \u4f1a\u8fd9\u4e48\u5199\u3002\uff09 // array\u8868\u793a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4 // \u4ee3\u7801\u4e2d\u7684array.length\u5c31\u7b49\u4e8en int [] array = new int [ n ]; int count = 0 ; void insert ( int val ) { if ( count == array . length ) { int sum = 0 ; for ( int i = 0 ; i < array . length ; ++ i ) { sum = sum + array [ i ]; } array [ 0 ] = sum ; count = 1 ; } array [ count ] = val ; ++ count ; } \u6211\u5148\u6765\u89e3\u91ca\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u3002\u8fd9\u6bb5\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5f80\u6570\u7ec4\u4e2d\u63d2\u5165\u6570\u636e\u7684\u529f\u80fd\u3002\u5f53\u6570\u7ec4\u6ee1\u4e86\u4e4b\u540e\uff0c\u4e5f\u5c31\u662f\u4ee3\u7801\u4e2d\u7684 count == array.length \u65f6\uff0c\u6211\u4eec\u7528 for \u5faa\u73af\u904d\u5386\u6570\u7ec4\u6c42\u548c\uff0c\u5e76\u6e05\u7a7a\u6570\u7ec4\uff0c\u5c06\u6c42\u548c\u4e4b\u540e\u7684 sum \u503c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a \u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u5c06\u65b0\u7684\u6570\u636e\u63d2\u5165\u3002\u4f46\u5982\u679c\u6570\u7ec4\u4e00\u5f00\u59cb\u5c31\u6709\u7a7a\u95f2\u7a7a\u95f4\uff0c\u5219\u76f4\u63a5\u5c06\u6570\u636e\u63d2\u5165\u6570\u7ec4\u3002 \u90a3\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u4f60\u53ef\u4ee5\u5148\u7528\u6211\u4eec\u521a\u8bb2\u5230\u7684\u4e09\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\u65b9\u6cd5\u6765\u5206\u6790\u4e00\u4e0b\u3002\u6700\u7406\u60f3\u7684\u60c5 \u51b5\u4e0b\uff0c\u6570\u7ec4\u4e2d\u6709\u7a7a\u95f2\u7a7a\u95f4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6570\u636e\u63d2\u5165\u5230\u6570\u7ec4\u4e0b\u6807\u4e3a count \u7684\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742 \u5ea6\u4e3a O(1)\u3002\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u7a7a\u95f2\u7a7a\u95f4\u4e86\uff0c\u6211\u4eec\u9700\u8981\u5148\u505a\u4e00\u6b21\u6570\u7ec4\u7684\u904d\u5386\u6c42\u548c\uff0c\u7136\u540e\u518d\u5c06\u6570\u636e\u63d2\u5165\uff0c\u6240 \u4ee5\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u90a3\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u7b54\u6848\u662f O(1)\u3002\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u901a\u8fc7\u524d\u9762\u8bb2\u7684\u6982\u7387\u8bba\u7684\u65b9\u6cd5\u6765\u5206\u6790\u3002\u5047\u8bbe\u6570\u7ec4\u7684\u957f\u5ea6\u662f n\uff0c\u6839\u636e\u6570\u636e\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a n \u79cd\u60c5\u51b5\uff0c\u6bcf\u79cd\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u201c\u989d \u5916\u201d\u7684\u60c5\u51b5\uff0c\u5c31\u662f\u5728\u6570\u7ec4\u6ca1\u6709\u7a7a\u95f2\u7a7a\u95f4\u65f6\u63d2\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002\u800c\u4e14\uff0c\u8fd9 n+1 \u79cd\u60c5\u51b5\u53d1\u751f \u7684\u6982\u7387\u4e00\u6837\uff0c\u90fd\u662f 1/(n+1)\u3002\u6240\u4ee5\uff0c\u6839\u636e\u52a0\u6743\u5e73\u5747\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u6211\u4eec\u6c42\u5f97\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff1a \u200b \u81f3\u6b64\u4e3a\u6b62\uff0c\u524d\u9762\u7684\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97\uff0c\u7406\u89e3\u8d77\u6765\u5e94\u8be5\u90fd\u6ca1\u6709\u95ee\u9898\u3002\u4f46\u662f\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u7684\u5e73\u5747\u590d\u6742\u5ea6 \u5206\u6790\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u8fd9\u4e48\u590d\u6742\uff0c\u4e0d\u9700\u8981\u5f15\u5165\u6982\u7387\u8bba\u7684\u77e5\u8bc6\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5148\u6765\u5bf9\u6bd4\u4e00\u4e0b\u8fd9\u4e2a insert() \u7684\u4f8b\u5b50\u548c \u524d\u9762\u90a3\u4e2a find() \u7684\u4f8b\u5b50\uff0c\u4f60\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e24\u8005\u6709\u5f88\u5927\u5dee\u522b\u3002 \u9996\u5148\uff0cfind() \u51fd\u6570\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u590d\u6742\u5ea6\u624d\u4e3a O(1)\u3002\u4f46 insert() \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(1)\u3002\u53ea\u6709\u4e2a\u522b \u60c5\u51b5\u4e0b\uff0c\u590d\u6742\u5ea6\u624d\u6bd4\u8f83\u9ad8\uff0c\u4e3a O(n)\u3002\u8fd9\u662f insert()\u7b2c\u4e00\u4e2a\u533a\u522b\u4e8e find() \u7684\u5730\u65b9\u3002 \u6211\u4eec\u518d\u6765\u770b**\u7b2c\u4e8c\u4e2a**\u4e0d\u540c\u7684\u5730\u65b9\u3002\u5bf9\u4e8e insert() \u51fd\u6570\u6765\u8bf4\uff0cO(1) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d2\u5165\u548c O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d2\u5165\uff0c\u51fa\u73b0 \u7684\u9891\u7387\u662f\u975e\u5e38\u6709\u89c4\u5f8b\u7684\uff0c\u800c\u4e14\u6709\u4e00\u5b9a\u7684\u524d\u540e\u65f6\u5e8f\u5173\u7cfb\uff0c\u4e00\u822c\u90fd\u662f\u4e00\u4e2a O(n) \u63d2\u5165\u4e4b\u540e\uff0c\u7d27\u8ddf\u7740 n-1 \u4e2a O(1) \u7684\u63d2\u5165\u64cd \u4f5c\uff0c\u5faa\u73af\u5f80\u590d\u3002 \u6240\u4ee5\uff0c\u9488\u5bf9\u8fd9\u6837\u4e00\u79cd\u7279\u6b8a\u573a\u666f\u7684\u590d\u6742\u5ea6\u5206\u6790\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u50cf\u4e4b\u524d\u8bb2\u5e73\u5747\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\u90a3\u6837\uff0c\u627e\u51fa\u6240\u6709\u7684\u8f93\u5165\u60c5 \u51b5\u53ca\u76f8\u5e94\u7684\u53d1\u751f\u6982\u7387\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u52a0\u6743\u5e73\u5747\u503c\u3002 \u9488\u5bf9\u8fd9\u79cd\u7279\u6b8a\u7684\u573a\u666f\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u79cd\u66f4\u52a0\u7b80\u5355\u7684\u5206\u6790\u65b9\u6cd5\uff1a \u644a\u8fd8\u5206\u6790\u6cd5 \uff0c\u901a\u8fc7\u644a\u8fd8\u5206\u6790\u5f97\u5230\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u8d77 \u4e86\u4e00\u4e2a\u540d\u5b57\uff0c\u53eb**\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6**\u3002 \u90a3\u7a76\u7adf\u5982\u4f55\u4f7f\u7528\u644a\u8fd8\u5206\u6790\u6cd5\u6765\u5206\u6790\u7b97\u6cd5\u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5462\uff1f \u6211\u4eec\u8fd8\u662f\u7ee7\u7eed\u770b\u5728\u6570\u7ec4\u4e2d\u63d2\u5165\u6570\u636e\u7684\u8fd9\u4e2a\u4f8b\u5b50\u3002\u6bcf\u4e00\u6b21 O(n) \u7684\u63d2\u5165\u64cd\u4f5c\uff0c\u90fd\u4f1a\u8ddf\u7740 n-1 \u6b21 O(1) \u7684\u63d2\u5165\u64cd\u4f5c\uff0c\u6240\u4ee5 \u628a\u8017\u65f6\u591a\u7684\u90a3\u6b21\u64cd\u4f5c\u5747\u644a\u5230\u63a5\u4e0b\u6765\u7684 n-1 \u6b21\u8017\u65f6\u5c11\u7684\u64cd\u4f5c\u4e0a\uff0c\u5747\u644a\u4e0b\u6765\uff0c\u8fd9\u4e00\u7ec4\u8fde\u7eed\u7684\u64cd\u4f5c\u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5c31 \u662f O(1)\u3002\u8fd9\u5c31\u662f\u5747\u644a\u5206\u6790\u7684\u5927\u81f4\u601d\u8def\u3002\u4f60\u90fd\u7406\u89e3\u4e86\u5417\uff1f \u200b \u00b6 \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u644a\u8fd8\u5206\u6790\u5e94\u7528\u573a\u666f\u6bd4\u8f83\u7279\u6b8a\uff0c\u6240\u4ee5\u6211\u4eec\u5e76\u4e0d\u4f1a\u7ecf\u5e38\u7528\u5230\u3002\u4e3a\u4e86\u65b9\u4fbf\u4f60\u7406\u89e3\u3001\u8bb0\u5fc6\uff0c\u6211\u8fd9\u91cc\u7b80\u5355\u603b \u7ed3\u4e00\u4e0b\u5b83\u4eec\u7684\u5e94\u7528\u573a\u666f\u3002\u5982\u679c\u4f60\u9047\u5230\u4e86\uff0c\u77e5\u9053\u662f\u600e\u4e48\u56de\u4e8b\u513f\u5c31\u884c\u4e86\u3002 \u5bf9\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u4e00\u7ec4\u8fde\u7eed\u64cd\u4f5c\u4e2d\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u5f88\u4f4e\uff0c\u53ea\u6709\u4e2a\u522b\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u800c\u4e14 \u8fd9\u4e9b\u64cd\u4f5c\u4e4b\u95f4\u5b58\u5728\u524d\u540e\u8fde\u8d2f\u7684\u65f6\u5e8f\u5173\u7cfb\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e00\u7ec4\u64cd\u4f5c\u653e\u5728\u4e00\u5757\u513f\u5206\u6790\uff0c\u770b\u662f\u5426\u80fd\u5c06\u8f83\u9ad8\u65f6 \u95f4\u590d\u6742\u5ea6\u90a3\u6b21\u64cd\u4f5c\u7684\u8017\u65f6\uff0c\u5e73\u644a\u5230\u5176\u4ed6\u90a3\u4e9b\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u4f4e\u7684\u64cd\u4f5c\u4e0a\u3002\u800c\u4e14\uff0c\u5728\u80fd\u591f\u5e94\u7528\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684 \u573a\u5408\uff0c \u4e00\u822c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u7b49\u4e8e\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \u3002 \u5c3d\u7ba1\u5f88\u591a\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e66\u7c4d\u90fd\u82b1\u4e86\u5f88\u5927\u529b\u6c14\u6765\u533a\u5206\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u5176\u5b9e\u6211\u4e2a\u4eba\u8ba4\u4e3a\uff0c \u5747\u644a **\u65f6\u95f4\u590d\u6742\u5ea6**\u5c31\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u6ca1\u5fc5\u8981\u82b1\u592a\u591a\u7cbe\u529b\u53bb\u533a\u5206\u5b83\u4eec\u3002\u4f60\u6700\u5e94\u8be5\u638c\u63e1\u7684\u662f\u5b83\u7684\u5206\u6790\u65b9 \u6cd5\uff0c\u644a\u8fd8\u5206\u6790\u3002\u81f3\u4e8e\u5206\u6790\u51fa\u6765\u7684\u7ed3\u679c\u662f\u53eb\u5e73\u5747\u8fd8\u662f\u53eb\u5747\u644a\uff0c\u8fd9\u53ea\u662f\u4e2a\u8bf4\u6cd5\uff0c\u5e76\u4e0d\u91cd\u8981\u3002","title":"\u6d45\u6790\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u3001\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B/#_1","text":"\u4e0a\u4e00\u8282\uff0c\u6211\u4eec\u8bb2\u4e86\u590d\u6742\u5ea6\u7684\u5927 O \u8868\u793a\u6cd5\u548c\u51e0\u4e2a\u5206\u6790\u6280\u5de7\uff0c\u8fd8\u4e3e\u4e86\u4e00\u4e9b\u5e38\u89c1\u590d\u6742\u5ea6\u5206\u6790\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982 O(1)\u3001 O(logn)\u3001O(n)\u3001O(nlogn) \u590d\u6742\u5ea6\u5206\u6790\u3002\u638c\u63e1\u4e86\u8fd9\u4e9b\u5185\u5bb9\uff0c\u5bf9\u4e8e\u590d\u6742\u5ea6\u5206\u6790\u8fd9\u4e2a\u77e5\u8bc6\u70b9\uff0c\u4f60\u5df2\u7ecf\u53ef\u4ee5\u5230\u53ca\u683c\u7ebf\u4e86\u3002 \u4f46\u662f\uff0c\u6211\u60f3\u4f60\u80af\u5b9a\u4e0d\u4f1a\u6ee1\u8db3\u4e8e\u6b64\u3002 \u4eca\u5929\u6211\u4f1a\u7ee7\u7eed\u7ed9\u4f60\u8bb2\u56db\u4e2a\u590d\u6742\u5ea6\u5206\u6790\u65b9\u9762\u7684\u77e5\u8bc6\u70b9\uff0c \u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \uff08best case time complexity\uff09\u3001 \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \uff08worst case time complexity\uff09\u3001 \u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \uff08average case time complexity\uff09\u3001 \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6 \uff08amortized time complexity\uff09\u3002\u5982\u679c\u8fd9\u51e0\u4e2a\u6982\u5ff5\u4f60\u90fd\u80fd\u638c\u63e1\uff0c\u90a3\u5bf9\u4f60\u6765\u8bf4\uff0c\u590d \u6742\u5ea6\u5206\u6790\u8fd9\u90e8\u5206\u5185\u5bb9\u5c31\u6ca1\u4ec0\u4e48\u5927\u95ee\u9898\u4e86\u3002","title":"\u6d45\u6790\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u3001\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B/#_2","text":"// n\u8868\u793a\u6570\u7ec4array\u7684\u957f\u5ea6 int find ( int [] array , int n , int x ) { int i = 0 ; int pos = -1 ; for (; i < n ; ++ i ) { if ( array [ i ] == x ) pos = i ; } return pos ; } \u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u8fd9\u6bb5\u4ee3\u7801\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u662f\uff0c\u5728\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4\uff08array\uff09\u4e2d\uff0c\u67e5\u627e\u53d8\u91cf x \u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u6ca1 \u6709\u627e\u5230\uff0c\u5c31\u8fd4\u56de -1\u3002\u6309\u7167\u4e0a\u8282\u8bfe\u8bb2\u7684\u5206\u6790\u65b9\u6cd5\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u662f O(n)\uff0c\u5176\u4e2d\uff0cn \u4ee3\u8868\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u6211\u4eec\u5728\u6570 \u7ec4\u4e2d\u67e5\u627e\u4e00\u4e2a\u6570\u636e\uff0c\u5e76\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u628a\u6574\u4e2a\u6570\u7ec4\u90fd\u904d\u5386\u4e00\u904d\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u4e2d\u9014\u627e\u5230\u5c31\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f\u5faa\u73af\u4e86\u3002\u4f46\u662f\uff0c \u8fd9\u6bb5\u4ee3\u7801\u5199\u5f97\u4e0d\u591f\u9ad8\u6548\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u4f18\u5316\u4e00\u4e0b\u8fd9\u6bb5\u67e5\u627e\u4ee3\u7801\u3002 // n\u8868\u793a\u6570\u7ec4array\u7684\u957f\u5ea6 int find ( int [] array , int n , int x ) { int i = 0 ; int pos = -1 ; for (; i < n ; ++ i ) { if ( array [ i ] == x ) { pos = i ; break ; } } return pos ; } \u8fd9\u4e2a\u65f6\u5019\uff0c\u95ee\u9898\u5c31\u6765\u4e86\u3002\u6211\u4eec\u4f18\u5316\u5b8c\u4e4b\u540e\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8fd8\u662f O(n) \u5417\uff1f\u5f88\u663e\u7136\uff0c\u54b1\u4eec\u4e0a\u4e00\u8282\u8bb2\u7684\u5206\u6790\u65b9 \u6cd5\uff0c\u89e3\u51b3\u4e0d\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 \u56e0\u4e3a\uff0c\u8981\u67e5\u627e\u7684\u53d8\u91cf x \u53ef\u80fd\u51fa\u73b0\u5728\u6570\u7ec4\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\u5982\u679c\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6b63\u597d\u662f\u8981\u67e5\u627e\u7684\u53d8\u91cf x\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u7ee7 \u7eed\u904d\u5386\u5269\u4e0b\u7684 n-1 \u4e2a\u6570\u636e\u4e86\uff0c\u90a3\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(1)\u3002\u4f46\u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u53d8\u91cf x\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u628a\u6574\u4e2a\u6570\u7ec4\u90fd \u904d\u5386\u4e00\u904d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u6210\u4e86 O(n)\u3002\u6240\u4ee5\uff0c\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u4e3a\u4e86\u8868\u793a\u4ee3\u7801\u5728\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u4e0d\u540c\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e09\u4e2a\u6982\u5ff5\uff1a\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u3001\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742 \u5ea6\u548c\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u987e\u540d\u601d\u4e49\uff0c \u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff0c\u5728\u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u3002\u5c31\u50cf\u6211\u4eec\u521a\u521a\u8bb2\u5230\u7684\uff0c\u5728 \u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u67e5\u627e\u7684\u53d8\u91cf x \u6b63\u597d\u662f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e2a\u65f6\u5019\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742 \u5ea6\u3002 \u540c\u7406\uff0c \u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff0c\u5728\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u3002\u5c31\u50cf\u521a\u4e3e\u7684\u90a3\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6570 \u7ec4\u4e2d\u6ca1\u6709\u8981\u67e5\u627e\u7684\u53d8\u91cf x\uff0c\u6211\u4eec\u9700\u8981\u628a\u6574\u4e2a\u6570\u7ec4\u90fd\u904d\u5386\u4e00\u904d\u624d\u884c\uff0c\u6240\u4ee5\u8fd9\u79cd\u6700\u7cdf\u7cd5\u60c5\u51b5\u4e0b\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u6700 \u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u3002","title":"\u6700\u597d\u3001\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B/#_3","text":"\u6211\u4eec\u90fd\u77e5\u9053\uff0c\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u5bf9\u5e94\u7684\u90fd\u662f\u6781\u7aef\u60c5\u51b5\u4e0b\u7684\u4ee3\u7801\u590d\u6742\u5ea6\uff0c\u53d1\u751f\u7684\u6982\u7387\u5176\u5b9e\u5e76 \u4e0d\u5927\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u8868\u793a\u5e73\u5747\u60c5\u51b5\u4e0b\u7684\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u53e6\u4e00\u4e2a\u6982\u5ff5\uff1a\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u540e\u9762\u6211\u7b80\u79f0\u4e3a\u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u53c8\u8be5\u600e\u4e48\u5206\u6790\u5462\uff1f\u6211\u8fd8\u662f\u501f\u52a9\u521a\u624d\u67e5\u627e\u53d8\u91cf x \u7684\u4f8b\u5b50\u6765\u7ed9\u4f60\u89e3\u91ca\u3002\u8981\u67e5\u627e\u7684\u53d8\u91cf x \u5728\u6570\u7ec4\u4e2d\u7684\u4f4d \u7f6e\uff0c\u6709 n+1 \u79cd\u60c5\u51b5\uff1a \u5728\u6570\u7ec4\u7684 0\uff5en-1 \u4f4d\u7f6e\u4e2d**\u548c**\u4e0d\u5728\u6570\u7ec4\u4e2d \u3002\u6211\u4eec\u628a\u6bcf\u79cd\u60c5\u51b5\u4e0b\uff0c\u67e5\u627e\u9700\u8981\u904d\u5386\u7684\u5143\u7d20\u4e2a\u6570\u7d2f\u52a0\u8d77 \u6765\uff0c\u7136\u540e\u518d\u9664\u4ee5 n+1\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u9700\u8981\u904d\u5386\u7684\u5143\u7d20\u4e2a\u6570\u7684\u5e73\u5747\u503c\uff0c\u5373\uff1a \u6211\u4eec\u77e5\u9053\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5927 O \u6807\u8bb0\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u7701\u7565\u6389\u7cfb\u6570\u3001\u4f4e\u9636\u3001\u5e38\u91cf\uff0c\u6240\u4ee5\uff0c\u54b1\u4eec\u628a\u521a\u521a\u8fd9\u4e2a\u516c\u5f0f\u7b80\u5316\u4e4b\u540e\uff0c \u5f97\u5230\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n)\u3002 \u8fd9\u4e2a\u7ed3\u8bba\u867d\u7136\u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u8ba1\u7b97\u8fc7\u7a0b\u7a0d\u5fae\u6709\u70b9\u513f\u95ee\u9898\u3002\u7a76\u7adf\u662f\u4ec0\u4e48\u95ee\u9898\u5462\uff1f\u6211\u4eec\u521a\u8bb2\u7684\u8fd9 n+1 \u79cd\u60c5\u51b5\uff0c\u51fa\u73b0\u7684 \u6982\u7387\u5e76\u4e0d\u662f\u4e00\u6837\u7684\u3002\u6211\u5e26\u4f60\u5177\u4f53\u5206\u6790\u4e00\u4e0b\u3002\uff08\u8fd9\u91cc\u8981\u7a0d\u5fae\u7528\u5230\u4e00\u70b9\u513f\u6982\u7387\u8bba\u7684\u77e5\u8bc6\uff0c\u4e0d\u8fc7\u975e\u5e38\u7b80\u5355\uff0c\u4f60\u4e0d\u7528\u62c5 \u5fc3\u3002\uff09 \u6211\u4eec\u77e5\u9053\uff0c\u8981\u67e5\u627e\u7684\u53d8\u91cf x\uff0c\u8981\u4e48\u5728\u6570\u7ec4\u91cc\uff0c\u8981\u4e48\u5c31\u4e0d\u5728\u6570\u7ec4\u91cc\u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u5bf9\u5e94\u7684\u6982\u7387\u7edf\u8ba1\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u4e3a\u4e86\u65b9 \u4fbf\u4f60\u7406\u89e3\uff0c\u6211\u4eec\u5047\u8bbe\u5728\u6570\u7ec4\u4e2d\u4e0e\u4e0d\u5728\u6570\u7ec4\u4e2d\u7684\u6982\u7387\u90fd\u4e3a \u00bd\u3002\u53e6\u5916\uff0c\u8981\u67e5\u627e\u7684\u6570\u636e\u51fa\u73b0\u5728 0\uff5en-1 \u8fd9 n \u4e2a\u4f4d\u7f6e\u7684\u6982 \u7387\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u4e3a 1/n\u3002\u6240\u4ee5\uff0c\u6839\u636e\u6982\u7387\u4e58\u6cd5\u6cd5\u5219\uff0c\u8981\u67e5\u627e\u7684\u6570\u636e\u51fa\u73b0\u5728 0\uff5en-1 \u4e2d\u4efb\u610f\u4f4d\u7f6e\u7684\u6982\u7387\u5c31\u662f 1/(2n)\u3002 \u56e0\u6b64\uff0c\u524d\u9762\u7684\u63a8\u5bfc\u8fc7\u7a0b\u4e2d\u5b58\u5728\u7684\u6700\u5927\u95ee\u9898\u5c31\u662f\uff0c\u6ca1\u6709\u5c06\u5404\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u8003\u8651\u8fdb\u53bb\u3002\u5982\u679c\u6211\u4eec\u628a\u6bcf\u79cd\u60c5\u51b5\u53d1\u751f\u7684 \u6982\u7387\u4e5f\u8003\u8651\u8fdb\u53bb\uff0c\u90a3\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97\u8fc7\u7a0b\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a \u8fd9\u4e2a\u503c\u5c31\u662f\u6982\u7387\u8bba\u4e2d\u7684**\u52a0\u6743\u5e73\u5747\u503c**\uff0c\u4e5f\u53eb\u4f5c**\u671f\u671b\u503c**\uff0c\u6240\u4ee5\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5168\u79f0\u5e94\u8be5\u53eb**\u52a0\u6743\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6** \u6216\u8005**\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6**\u3002 \u5f15\u5165\u6982\u7387\u4e4b\u540e\uff0c\u524d\u9762\u90a3\u6bb5\u4ee3\u7801\u7684\u52a0\u6743\u5e73\u5747\u503c\u4e3a (3n+1)/4\u3002\u7528\u5927 O \u8868\u793a\u6cd5\u6765\u8868\u793a\uff0c\u53bb\u6389\u7cfb\u6570\u548c\u5e38\u91cf\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u52a0 \u6743\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f O(n)\u3002 \u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u597d\u590d\u6742\u554a\uff0c\u8fd8\u8981\u6d89\u53ca\u6982\u7387\u8bba\u7684\u77e5\u8bc6\u3002\u5b9e\u9645\u4e0a\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u533a \u5206\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e09\u79cd\u60c5\u51b5\u3002\u50cf\u6211\u4eec\u4e0a\u4e00\u8282\u8bfe\u4e3e\u7684\u90a3\u4e9b\u4f8b\u5b50\u90a3\u6837\uff0c\u5f88\u591a\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u590d\u6742 \u5ea6\u5c31\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\u4e86\u3002\u53ea\u6709\u540c\u4e00\u5757\u4ee3\u7801\u5728\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u91cf\u7ea7\u7684\u5dee\u8ddd\uff0c\u6211\u4eec\u624d\u4f1a\u4f7f\u7528\u8fd9\u4e09\u79cd\u590d\u6742\u5ea6\u8868 \u793a\u6cd5\u6765\u533a\u5206\u3002","title":"\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B/#_4","text":"\u5230\u6b64\u4e3a\u6b62\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u4e86\u7b97\u6cd5\u590d\u6742\u5ea6\u5206\u6790\u7684\u5927\u90e8\u5206\u5185\u5bb9\u4e86\u3002\u4e0b\u9762\u6211\u8981\u7ed9\u4f60\u8bb2\u4e00\u4e2a\u66f4\u52a0\u9ad8\u7ea7\u7684\u6982\u5ff5\uff0c\u5747\u644a\u65f6\u95f4\u590d \u6742\u5ea6\uff0c\u4ee5\u53ca\u5b83\u5bf9\u5e94\u7684\u5206\u6790\u65b9\u6cd5\uff0c\u644a\u8fd8\u5206\u6790\uff08\u6216\u8005\u53eb\u5e73\u644a\u5206\u6790\uff09\u3002 \u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u542c\u8d77\u6765\u8ddf\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u6709\u70b9\u513f\u50cf\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u8fd9\u4e24\u4e2a\u6982\u5ff5\u786e\u5b9e\u975e\u5e38\u5bb9\u6613\u5f04\u6df7\u3002\u6211\u524d\u9762\u8bf4 \u4e86\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u533a\u5206\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u4e09\u79cd\u590d\u6742\u5ea6\u3002\u5e73\u5747\u590d\u6742\u5ea6\u53ea\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\u624d\u4f1a\u7528\u5230\uff0c \u800c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u7528\u7684\u573a\u666f\u6bd4\u5b83\u66f4\u52a0\u7279\u6b8a\u3001\u66f4\u52a0\u6709\u9650\u3002 \u8001\u89c4\u77e9\uff0c\u6211\u8fd8\u662f\u501f\u52a9\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u6765\u5e2e\u52a9\u4f60\u7406\u89e3\u3002\uff08\u5f53\u7136\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u53ea\u662f\u6211\u4e3a\u4e86\u65b9\u4fbf\u8bb2\u89e3\u60f3\u51fa\u6765\u7684\uff0c\u5b9e\u9645\u4e0a\u6ca1\u4eba \u4f1a\u8fd9\u4e48\u5199\u3002\uff09 // array\u8868\u793a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4 // \u4ee3\u7801\u4e2d\u7684array.length\u5c31\u7b49\u4e8en int [] array = new int [ n ]; int count = 0 ; void insert ( int val ) { if ( count == array . length ) { int sum = 0 ; for ( int i = 0 ; i < array . length ; ++ i ) { sum = sum + array [ i ]; } array [ 0 ] = sum ; count = 1 ; } array [ count ] = val ; ++ count ; } \u6211\u5148\u6765\u89e3\u91ca\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u3002\u8fd9\u6bb5\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5f80\u6570\u7ec4\u4e2d\u63d2\u5165\u6570\u636e\u7684\u529f\u80fd\u3002\u5f53\u6570\u7ec4\u6ee1\u4e86\u4e4b\u540e\uff0c\u4e5f\u5c31\u662f\u4ee3\u7801\u4e2d\u7684 count == array.length \u65f6\uff0c\u6211\u4eec\u7528 for \u5faa\u73af\u904d\u5386\u6570\u7ec4\u6c42\u548c\uff0c\u5e76\u6e05\u7a7a\u6570\u7ec4\uff0c\u5c06\u6c42\u548c\u4e4b\u540e\u7684 sum \u503c\u653e\u5230\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a \u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u5c06\u65b0\u7684\u6570\u636e\u63d2\u5165\u3002\u4f46\u5982\u679c\u6570\u7ec4\u4e00\u5f00\u59cb\u5c31\u6709\u7a7a\u95f2\u7a7a\u95f4\uff0c\u5219\u76f4\u63a5\u5c06\u6570\u636e\u63d2\u5165\u6570\u7ec4\u3002 \u90a3\u8fd9\u6bb5\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u4f60\u53ef\u4ee5\u5148\u7528\u6211\u4eec\u521a\u8bb2\u5230\u7684\u4e09\u79cd\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5206\u6790\u65b9\u6cd5\u6765\u5206\u6790\u4e00\u4e0b\u3002\u6700\u7406\u60f3\u7684\u60c5 \u51b5\u4e0b\uff0c\u6570\u7ec4\u4e2d\u6709\u7a7a\u95f2\u7a7a\u95f4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u6570\u636e\u63d2\u5165\u5230\u6570\u7ec4\u4e0b\u6807\u4e3a count \u7684\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742 \u5ea6\u4e3a O(1)\u3002\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u7a7a\u95f2\u7a7a\u95f4\u4e86\uff0c\u6211\u4eec\u9700\u8981\u5148\u505a\u4e00\u6b21\u6570\u7ec4\u7684\u904d\u5386\u6c42\u548c\uff0c\u7136\u540e\u518d\u5c06\u6570\u636e\u63d2\u5165\uff0c\u6240 \u4ee5\u6700\u574f\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u90a3\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u7b54\u6848\u662f O(1)\u3002\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u901a\u8fc7\u524d\u9762\u8bb2\u7684\u6982\u7387\u8bba\u7684\u65b9\u6cd5\u6765\u5206\u6790\u3002\u5047\u8bbe\u6570\u7ec4\u7684\u957f\u5ea6\u662f n\uff0c\u6839\u636e\u6570\u636e\u63d2\u5165\u7684\u4f4d\u7f6e\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a n \u79cd\u60c5\u51b5\uff0c\u6bcf\u79cd\u60c5\u51b5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u201c\u989d \u5916\u201d\u7684\u60c5\u51b5\uff0c\u5c31\u662f\u5728\u6570\u7ec4\u6ca1\u6709\u7a7a\u95f2\u7a7a\u95f4\u65f6\u63d2\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002\u800c\u4e14\uff0c\u8fd9 n+1 \u79cd\u60c5\u51b5\u53d1\u751f \u7684\u6982\u7387\u4e00\u6837\uff0c\u90fd\u662f 1/(n+1)\u3002\u6240\u4ee5\uff0c\u6839\u636e\u52a0\u6743\u5e73\u5747\u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u6211\u4eec\u6c42\u5f97\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\uff1a \u200b \u81f3\u6b64\u4e3a\u6b62\uff0c\u524d\u9762\u7684\u6700\u597d\u3001\u6700\u574f\u3001\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8ba1\u7b97\uff0c\u7406\u89e3\u8d77\u6765\u5e94\u8be5\u90fd\u6ca1\u6709\u95ee\u9898\u3002\u4f46\u662f\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u7684\u5e73\u5747\u590d\u6742\u5ea6 \u5206\u6790\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u8fd9\u4e48\u590d\u6742\uff0c\u4e0d\u9700\u8981\u5f15\u5165\u6982\u7387\u8bba\u7684\u77e5\u8bc6\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5148\u6765\u5bf9\u6bd4\u4e00\u4e0b\u8fd9\u4e2a insert() \u7684\u4f8b\u5b50\u548c \u524d\u9762\u90a3\u4e2a find() \u7684\u4f8b\u5b50\uff0c\u4f60\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e24\u8005\u6709\u5f88\u5927\u5dee\u522b\u3002 \u9996\u5148\uff0cfind() \u51fd\u6570\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u590d\u6742\u5ea6\u624d\u4e3a O(1)\u3002\u4f46 insert() \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(1)\u3002\u53ea\u6709\u4e2a\u522b \u60c5\u51b5\u4e0b\uff0c\u590d\u6742\u5ea6\u624d\u6bd4\u8f83\u9ad8\uff0c\u4e3a O(n)\u3002\u8fd9\u662f insert()\u7b2c\u4e00\u4e2a\u533a\u522b\u4e8e find() \u7684\u5730\u65b9\u3002 \u6211\u4eec\u518d\u6765\u770b**\u7b2c\u4e8c\u4e2a**\u4e0d\u540c\u7684\u5730\u65b9\u3002\u5bf9\u4e8e insert() \u51fd\u6570\u6765\u8bf4\uff0cO(1) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d2\u5165\u548c O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d2\u5165\uff0c\u51fa\u73b0 \u7684\u9891\u7387\u662f\u975e\u5e38\u6709\u89c4\u5f8b\u7684\uff0c\u800c\u4e14\u6709\u4e00\u5b9a\u7684\u524d\u540e\u65f6\u5e8f\u5173\u7cfb\uff0c\u4e00\u822c\u90fd\u662f\u4e00\u4e2a O(n) \u63d2\u5165\u4e4b\u540e\uff0c\u7d27\u8ddf\u7740 n-1 \u4e2a O(1) \u7684\u63d2\u5165\u64cd \u4f5c\uff0c\u5faa\u73af\u5f80\u590d\u3002 \u6240\u4ee5\uff0c\u9488\u5bf9\u8fd9\u6837\u4e00\u79cd\u7279\u6b8a\u573a\u666f\u7684\u590d\u6742\u5ea6\u5206\u6790\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u50cf\u4e4b\u524d\u8bb2\u5e73\u5747\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\u90a3\u6837\uff0c\u627e\u51fa\u6240\u6709\u7684\u8f93\u5165\u60c5 \u51b5\u53ca\u76f8\u5e94\u7684\u53d1\u751f\u6982\u7387\uff0c\u7136\u540e\u518d\u8ba1\u7b97\u52a0\u6743\u5e73\u5747\u503c\u3002 \u9488\u5bf9\u8fd9\u79cd\u7279\u6b8a\u7684\u573a\u666f\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u79cd\u66f4\u52a0\u7b80\u5355\u7684\u5206\u6790\u65b9\u6cd5\uff1a \u644a\u8fd8\u5206\u6790\u6cd5 \uff0c\u901a\u8fc7\u644a\u8fd8\u5206\u6790\u5f97\u5230\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6211\u4eec\u8d77 \u4e86\u4e00\u4e2a\u540d\u5b57\uff0c\u53eb**\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6**\u3002 \u90a3\u7a76\u7adf\u5982\u4f55\u4f7f\u7528\u644a\u8fd8\u5206\u6790\u6cd5\u6765\u5206\u6790\u7b97\u6cd5\u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5462\uff1f \u6211\u4eec\u8fd8\u662f\u7ee7\u7eed\u770b\u5728\u6570\u7ec4\u4e2d\u63d2\u5165\u6570\u636e\u7684\u8fd9\u4e2a\u4f8b\u5b50\u3002\u6bcf\u4e00\u6b21 O(n) \u7684\u63d2\u5165\u64cd\u4f5c\uff0c\u90fd\u4f1a\u8ddf\u7740 n-1 \u6b21 O(1) \u7684\u63d2\u5165\u64cd\u4f5c\uff0c\u6240\u4ee5 \u628a\u8017\u65f6\u591a\u7684\u90a3\u6b21\u64cd\u4f5c\u5747\u644a\u5230\u63a5\u4e0b\u6765\u7684 n-1 \u6b21\u8017\u65f6\u5c11\u7684\u64cd\u4f5c\u4e0a\uff0c\u5747\u644a\u4e0b\u6765\uff0c\u8fd9\u4e00\u7ec4\u8fde\u7eed\u7684\u64cd\u4f5c\u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5c31 \u662f O(1)\u3002\u8fd9\u5c31\u662f\u5747\u644a\u5206\u6790\u7684\u5927\u81f4\u601d\u8def\u3002\u4f60\u90fd\u7406\u89e3\u4e86\u5417\uff1f \u200b","title":"\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B/#_5","text":"\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u644a\u8fd8\u5206\u6790\u5e94\u7528\u573a\u666f\u6bd4\u8f83\u7279\u6b8a\uff0c\u6240\u4ee5\u6211\u4eec\u5e76\u4e0d\u4f1a\u7ecf\u5e38\u7528\u5230\u3002\u4e3a\u4e86\u65b9\u4fbf\u4f60\u7406\u89e3\u3001\u8bb0\u5fc6\uff0c\u6211\u8fd9\u91cc\u7b80\u5355\u603b \u7ed3\u4e00\u4e0b\u5b83\u4eec\u7684\u5e94\u7528\u573a\u666f\u3002\u5982\u679c\u4f60\u9047\u5230\u4e86\uff0c\u77e5\u9053\u662f\u600e\u4e48\u56de\u4e8b\u513f\u5c31\u884c\u4e86\u3002 \u5bf9\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u4e00\u7ec4\u8fde\u7eed\u64cd\u4f5c\u4e2d\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u5f88\u4f4e\uff0c\u53ea\u6709\u4e2a\u522b\u60c5\u51b5\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u800c\u4e14 \u8fd9\u4e9b\u64cd\u4f5c\u4e4b\u95f4\u5b58\u5728\u524d\u540e\u8fde\u8d2f\u7684\u65f6\u5e8f\u5173\u7cfb\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e00\u7ec4\u64cd\u4f5c\u653e\u5728\u4e00\u5757\u513f\u5206\u6790\uff0c\u770b\u662f\u5426\u80fd\u5c06\u8f83\u9ad8\u65f6 \u95f4\u590d\u6742\u5ea6\u90a3\u6b21\u64cd\u4f5c\u7684\u8017\u65f6\uff0c\u5e73\u644a\u5230\u5176\u4ed6\u90a3\u4e9b\u65f6\u95f4\u590d\u6742\u5ea6\u6bd4\u8f83\u4f4e\u7684\u64cd\u4f5c\u4e0a\u3002\u800c\u4e14\uff0c\u5728\u80fd\u591f\u5e94\u7528\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684 \u573a\u5408\uff0c \u4e00\u822c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u7b49\u4e8e\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6 \u3002 \u5c3d\u7ba1\u5f88\u591a\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e66\u7c4d\u90fd\u82b1\u4e86\u5f88\u5927\u529b\u6c14\u6765\u533a\u5206\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u5176\u5b9e\u6211\u4e2a\u4eba\u8ba4\u4e3a\uff0c \u5747\u644a **\u65f6\u95f4\u590d\u6742\u5ea6**\u5c31\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u6ca1\u5fc5\u8981\u82b1\u592a\u591a\u7cbe\u529b\u53bb\u533a\u5206\u5b83\u4eec\u3002\u4f60\u6700\u5e94\u8be5\u638c\u63e1\u7684\u662f\u5b83\u7684\u5206\u6790\u65b9 \u6cd5\uff0c\u644a\u8fd8\u5206\u6790\u3002\u81f3\u4e8e\u5206\u6790\u51fa\u6765\u7684\u7ed3\u679c\u662f\u53eb\u5e73\u5747\u8fd8\u662f\u53eb\u5747\u644a\uff0c\u8fd9\u53ea\u662f\u4e2a\u8bf4\u6cd5\uff0c\u5e76\u4e0d\u91cd\u8981\u3002","title":""},{"location":"%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","text":"\u5feb\u901f\u6392\u5e8f \u00b6 \u5feb\u901f\u6392\u5e8f\u662f\u57fa\u4e8e\u5206\u6cbb\u6cd5\u8fdb\u884c\u6392\u5e8f\uff0c\u9009\u53d6\u4e00\u4e2a\u4e3b\u5143pivot, \u904d\u5386\u5e8f\u5217\uff0c\u5c06\u5c0f\u4e8epivot\u7684\u6570\u5b57\u653e\u5728\u4e3b\u5143\u5de6\u8fb9\uff0c\u5927\u4e8epivot\u7684\u6570\u653e\u5728\u4e3b\u5143\u53f3\u8fb9\uff1b\u518d\u5c06\u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u9012\u5f52\u4e0b\u53bb\uff0c\u5c31\u6392\u597d\u5e8f\u4e86\u3002 \u5b9e\u73b0\u65b9\u6848 \u00b6 \u4e3b\u5143(pivot)\u9009\u62e9\u4e3a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5de6\u53f3\u6307\u9488(left, right)\u4ece\u4e24\u7aef\u904d\u5386\u5e8f\u5217\uff0c\u5de6\u6307\u9488\u4e00\u76f4\u627e\u5230\u6bd4\u4e3b\u5143\u5927\u7684\u5143\u7d20\uff0c\u53f3\u6307\u9488\u4e00\u76f4\u627e\u5230\u6bd4\u4e3b\u5143\u5c0f\u7684\u5143\u7d20\uff0c\u4ea4\u6362left, right\u6307\u5411\u7684\u503c\uff0c\u91cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230left < right\u3002 \u6ce8\u610f\uff1a left < right \u65f6\u624d\u4ea4\u6362left, right \u6307\u5411\u7684\u503c \u6309\u7167\u4e0a\u8ff0\uff0cr\u6307\u5411\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u4e3b\u5143\u7684\u6570\uff0c\u628a\u4e3b\u5143\u548cright\u6240\u6307\u7684\u503c\u8fdb\u884c\u4ea4\u6362 def quick_sort ( nums , beg = 0 , end = None ): end = len ( nums ) if end is None else end if beg < end : pivot = partition ( nums , beg , end ) quick_sort ( nums , beg , pivot ) quick_sort ( nums , pivot + 1 , end ) def partition ( nums , beg , end ): pivot_index = beg left = pivot_index + 1 right = end - 1 while True : while left <= right and nums [ left ] < nums [ pivot_index ]: left += 1 while left <= right and nums [ right ] >= nums [ pivot_index ]: right -= 1 if left > right : break swap ( nums , left , right ) # \u4ea4\u6362 # \u628a\u4e3b\u5143\u548cright\u7684\u4f4d\u7f6e\u4e92\u6362 swap ( nums , pivot_index , right ) return right def swap ( nums , left , right ): temp = nums [ left ] nums [ left ] = nums [ right ] nums [ right ] = temp def test_partition (): l = [ 4 , 1 , 2 , 8 ] assert ( partition ( l , 0 , len ( l )) == 2 ) l = [ 1 , 2 , 3 , 4 ] assert ( partition ( l , 0 , len ( l )) == 0 ) l = [ 4 , 3 , 2 , 1 ] assert partition ( l , 0 , len ( l )) nums = [ 2 , 3 , 5 , 1 , 3 , 5 , 5 , 6 , 8 , 9 , 0 ] quick_sort ( nums ) print ( nums ) \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5728\u6bd4\u8f83\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982\u6570\u7ec4\u6bcf\u6b21\u90fd\u88ab pivot \u5747\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u9012\u5f52\u5f0f\uff1a T(n) = 2T(n/2) + n \u901a\u8fc7\u9012\u5f52\u6811\u5f97\u5230\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nlog(n))\u3002\u5373\u4fbf\u662f\u5f88\u574f\u7684\u60c5\u51b5\uff0c\u6bd4\u5982 pivot \u6bcf\u6b21\u90fd\u628a\u6570\u7ec4\u6309\u7167 1:9 \u5212\u5206\uff0c\u4f9d\u7136\u662f O(nlog(n))\uff0c\u611f\u5174\u8da3\u8bf7\u9605\u8bfb\u7b97\u6cd5\u5bfc\u8bba\u76f8\u5173\u7ae0\u8282\u3002 \u5982\u4e0a\u6240\u8ff0 \uff1a\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5728\u6bcf\u6b21\u9012\u5f52\u65f6\uff0c\u5728\u4e3b\u5143\u4e24\u4fa7\u5206\u5e03\u7684\u6570\u8d8a\u5747\u5300\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8d8a\u9760\u8fd1nlgn, \u6240\u4ee5\u5feb\u901f\u6392\u5e8f\u7684\u4f18\u5316\u70b9\u5728\u4e8e\u5982\u679c\u9009\u53d6\u4e3b\u5143\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u7b80\u5355\u7684\u9009\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4e3b\u5143\u3002\u5176\u5b9e\uff0c\u4e3b\u5143\u8d8a\u63a5 \u8fd1\u6570\u5217\u7684\u4e2d\u4f4d\u6570\u6548\u7387\u8d8a\u9ad8\u3002 \u4e09\u70b9\u4e2d\u503c\u6cd5 \u00b6 \u53d6\u5e8f\u5217\u9996\u4f4d\uff0c\u4e2d\u90e8\u7684\u4e09\u4e2a\u6570\u4e4b\u95f4\u7684\u7b2c\u4e8c\u5927\u7684\u6570\u4e3a\u4e3b\u5143\u3002 def quick_sort ( nums , beg = 0 , end = None ): end = len ( nums ) if end is None else end if beg < end : pivot = partition ( nums , beg , end ) quick_sort ( nums , beg , pivot ) quick_sort ( nums , pivot + 1 , end ) def partition ( nums , beg , end ): # \u4e09\u70b9\u4e2d\u503c\u6cd5 mid = ( end + beg ) >> 1 if nums [ beg ] > nums [ mid ] > nums [ end - 1 ] or nums [ end - 1 ] > nums [ mid ] > nums [ beg ]: swap ( nums , beg , mid ) if nums [ beg ] > nums [ end - 1 ] > nums [ mid ] or nums [ mid ] > nums [ end - 1 ] > nums [ beg ]: swap ( nums , beg , end - 1 ) pivot_index = beg left = pivot_index + 1 right = end - 1 while True : while left <= right and nums [ left ] < nums [ pivot_index ]: left += 1 while left <= right and nums [ right ] >= nums [ pivot_index ]: right -= 1 if left > right : break swap ( nums , left , right ) # \u4ea4\u6362 # \u628a\u4e3b\u5143\u548cright\u7684\u4f4d\u7f6e\u4e92\u6362 swap ( nums , pivot_index , right ) return right def swap ( nums , left , right ): temp = nums [ left ] nums [ left ] = nums [ right ] nums [ right ] = temp def test_partition (): l = [ 4 , 1 , 2 , 8 ] assert ( partition ( l , 0 , len ( l )) == 2 ) l = [ 1 , 2 , 3 , 4 ] assert ( partition ( l , 0 , len ( l )) == 0 ) l = [ 4 , 3 , 2 , 1 ] assert partition ( l , 0 , len ( l )) nums = [ 2 , 3 , 5 , 1 , 3 , 5 , 5 , 6 , 8 , 9 , 0 ] quick_sort ( nums ) print ( nums )","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#_1","text":"\u5feb\u901f\u6392\u5e8f\u662f\u57fa\u4e8e\u5206\u6cbb\u6cd5\u8fdb\u884c\u6392\u5e8f\uff0c\u9009\u53d6\u4e00\u4e2a\u4e3b\u5143pivot, \u904d\u5386\u5e8f\u5217\uff0c\u5c06\u5c0f\u4e8epivot\u7684\u6570\u5b57\u653e\u5728\u4e3b\u5143\u5de6\u8fb9\uff0c\u5927\u4e8epivot\u7684\u6570\u653e\u5728\u4e3b\u5143\u53f3\u8fb9\uff1b\u518d\u5c06\u5de6\u53f3\u4e24\u8fb9\u7684\u6570\u9012\u5f52\u4e0b\u53bb\uff0c\u5c31\u6392\u597d\u5e8f\u4e86\u3002","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#_2","text":"\u4e3b\u5143(pivot)\u9009\u62e9\u4e3a\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5de6\u53f3\u6307\u9488(left, right)\u4ece\u4e24\u7aef\u904d\u5386\u5e8f\u5217\uff0c\u5de6\u6307\u9488\u4e00\u76f4\u627e\u5230\u6bd4\u4e3b\u5143\u5927\u7684\u5143\u7d20\uff0c\u53f3\u6307\u9488\u4e00\u76f4\u627e\u5230\u6bd4\u4e3b\u5143\u5c0f\u7684\u5143\u7d20\uff0c\u4ea4\u6362left, right\u6307\u5411\u7684\u503c\uff0c\u91cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230left < right\u3002 \u6ce8\u610f\uff1a left < right \u65f6\u624d\u4ea4\u6362left, right \u6307\u5411\u7684\u503c \u6309\u7167\u4e0a\u8ff0\uff0cr\u6307\u5411\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8e\u4e3b\u5143\u7684\u6570\uff0c\u628a\u4e3b\u5143\u548cright\u6240\u6307\u7684\u503c\u8fdb\u884c\u4ea4\u6362 def quick_sort ( nums , beg = 0 , end = None ): end = len ( nums ) if end is None else end if beg < end : pivot = partition ( nums , beg , end ) quick_sort ( nums , beg , pivot ) quick_sort ( nums , pivot + 1 , end ) def partition ( nums , beg , end ): pivot_index = beg left = pivot_index + 1 right = end - 1 while True : while left <= right and nums [ left ] < nums [ pivot_index ]: left += 1 while left <= right and nums [ right ] >= nums [ pivot_index ]: right -= 1 if left > right : break swap ( nums , left , right ) # \u4ea4\u6362 # \u628a\u4e3b\u5143\u548cright\u7684\u4f4d\u7f6e\u4e92\u6362 swap ( nums , pivot_index , right ) return right def swap ( nums , left , right ): temp = nums [ left ] nums [ left ] = nums [ right ] nums [ right ] = temp def test_partition (): l = [ 4 , 1 , 2 , 8 ] assert ( partition ( l , 0 , len ( l )) == 2 ) l = [ 1 , 2 , 3 , 4 ] assert ( partition ( l , 0 , len ( l )) == 0 ) l = [ 4 , 3 , 2 , 1 ] assert partition ( l , 0 , len ( l )) nums = [ 2 , 3 , 5 , 1 , 3 , 5 , 5 , 6 , 8 , 9 , 0 ] quick_sort ( nums ) print ( nums )","title":"\u5b9e\u73b0\u65b9\u6848"},{"location":"%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#_3","text":"\u5728\u6bd4\u8f83\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982\u6570\u7ec4\u6bcf\u6b21\u90fd\u88ab pivot \u5747\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u9012\u5f52\u5f0f\uff1a T(n) = 2T(n/2) + n \u901a\u8fc7\u9012\u5f52\u6811\u5f97\u5230\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nlog(n))\u3002\u5373\u4fbf\u662f\u5f88\u574f\u7684\u60c5\u51b5\uff0c\u6bd4\u5982 pivot \u6bcf\u6b21\u90fd\u628a\u6570\u7ec4\u6309\u7167 1:9 \u5212\u5206\uff0c\u4f9d\u7136\u662f O(nlog(n))\uff0c\u611f\u5174\u8da3\u8bf7\u9605\u8bfb\u7b97\u6cd5\u5bfc\u8bba\u76f8\u5173\u7ae0\u8282\u3002 \u5982\u4e0a\u6240\u8ff0 \uff1a\u5feb\u901f\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5728\u6bcf\u6b21\u9012\u5f52\u65f6\uff0c\u5728\u4e3b\u5143\u4e24\u4fa7\u5206\u5e03\u7684\u6570\u8d8a\u5747\u5300\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8d8a\u9760\u8fd1nlgn, \u6240\u4ee5\u5feb\u901f\u6392\u5e8f\u7684\u4f18\u5316\u70b9\u5728\u4e8e\u5982\u679c\u9009\u53d6\u4e3b\u5143\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u7b80\u5355\u7684\u9009\u53d6\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4e3b\u5143\u3002\u5176\u5b9e\uff0c\u4e3b\u5143\u8d8a\u63a5 \u8fd1\u6570\u5217\u7684\u4e2d\u4f4d\u6570\u6548\u7387\u8d8a\u9ad8\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/#_4","text":"\u53d6\u5e8f\u5217\u9996\u4f4d\uff0c\u4e2d\u90e8\u7684\u4e09\u4e2a\u6570\u4e4b\u95f4\u7684\u7b2c\u4e8c\u5927\u7684\u6570\u4e3a\u4e3b\u5143\u3002 def quick_sort ( nums , beg = 0 , end = None ): end = len ( nums ) if end is None else end if beg < end : pivot = partition ( nums , beg , end ) quick_sort ( nums , beg , pivot ) quick_sort ( nums , pivot + 1 , end ) def partition ( nums , beg , end ): # \u4e09\u70b9\u4e2d\u503c\u6cd5 mid = ( end + beg ) >> 1 if nums [ beg ] > nums [ mid ] > nums [ end - 1 ] or nums [ end - 1 ] > nums [ mid ] > nums [ beg ]: swap ( nums , beg , mid ) if nums [ beg ] > nums [ end - 1 ] > nums [ mid ] or nums [ mid ] > nums [ end - 1 ] > nums [ beg ]: swap ( nums , beg , end - 1 ) pivot_index = beg left = pivot_index + 1 right = end - 1 while True : while left <= right and nums [ left ] < nums [ pivot_index ]: left += 1 while left <= right and nums [ right ] >= nums [ pivot_index ]: right -= 1 if left > right : break swap ( nums , left , right ) # \u4ea4\u6362 # \u628a\u4e3b\u5143\u548cright\u7684\u4f4d\u7f6e\u4e92\u6362 swap ( nums , pivot_index , right ) return right def swap ( nums , left , right ): temp = nums [ left ] nums [ left ] = nums [ right ] nums [ right ] = temp def test_partition (): l = [ 4 , 1 , 2 , 8 ] assert ( partition ( l , 0 , len ( l )) == 2 ) l = [ 1 , 2 , 3 , 4 ] assert ( partition ( l , 0 , len ( l )) == 0 ) l = [ 4 , 3 , 2 , 1 ] assert partition ( l , 0 , len ( l )) nums = [ 2 , 3 , 5 , 1 , 3 , 5 , 5 , 6 , 8 , 9 , 0 ] quick_sort ( nums ) print ( nums )","title":"\u4e09\u70b9\u4e2d\u503c\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/","text":"\u57fa\u672c\u6392\u5e8f\u7b97\u6cd5 \u00b6 \u5192\u6ce1\u6392\u5e8f(n**2) \u00b6 \u8fdb\u884cn-1\u8f6e\u8fed\u4ee3\uff0c\u6bcf\u6b21\u6bd4\u8f83\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u8005\u5927\u4e8e\u540e\u8005\uff0c\u5219\u4ea4\u6362\u987a\u5e8f\u3002\u56e0\u4e3a\u76f4\u63a5\u5728\u5143\u7d20\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\u3002\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u8f6e\u5192\u6ce1\uff0c\u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\u5c31\u4f1a\u901a\u8fc7\u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u79fb\u5230\u6700\u53f3\u8fb9\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\uff0c10\u4e2a\u5c0f\u670b\u53cb\u7ad9\u4e00\u6392\uff0c\u8eab\u9ad8\u5e76\u4e00\uff0c\u73b0\u5728\u8001\u5e08\u558a\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\uff0c\u4e24\u4e24\u6bd4\u8f83\uff0c \u4e2a\u5b50\u9ad8\u7684\u5f80\u53f3\u79fb\uff08\u8001\u5e08\u60f3\u8ba9\u4ed6\u4eec\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\uff09\uff0c\u7b2c\u4e00\u8f6e\u5c31\u6709\u4e00\u4e2a\u5c0f\u670b\u53cb\u6700\u9ad8\u7684\u5c0f\u670b\u53cb\u7ad9\u5230\u6700\u53f3\u8fb9\uff0c \u7b2c\u4e8c\u8f6e\u6b21\u9ad8\u7684\u5c0f\u670b\u53cb\u7ad9\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u6700\u540e\u4e00\u8f6e\uff0c\u4e00\u4e2a\u5c0f\u670b\u53cb\u4e0d\u7528\u6bd4\u8f83\uff0c\u6240\u4ee5\u662fn-1\u8f6e\uff089\u8f6e\uff09 def bubble_sort ( seq ): '''\u5192\u6ce1\u6392\u5e8f''' n = len ( seq ) for i in range ( n - 1 ): for j in range ( n - 1 - i ): if seq [ j ] > seq [ j + 1 ]: seq [ j ], seq [ j + 1 ] = seq [ j + 1 ], seq [ j ] def test_bubble_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) bubble_sort ( seq ) assert seq_sort == seq \u9009\u62e9\u6392\u5e8f(n**2) \u00b6 \u5192\u6ce1\u6392\u5e8f\u7684\u601d\u8def\u662f\u4e24\u4e24\u6bd4\u8f83\uff0c\u8f83\u5927\u7684\u6307\u79fb\u5230\u4e86\u6700\u540e\u8fb9\uff0c\u9009\u62e9\u6392\u5e8f\u5219\u662f\u4e24\u4e24\u6bd4\u8f83\uff0c\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c \u518d\u4ece\u5269\u4e0b\u7684\u5143\u7d20\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u5269\u4e0b\u7684\u5143\u7d20\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u662fn-1\u8f6e\u3002 \u540c\u6837\u7684\uff0c10\u4e2a\u5c0f\u670b\u53cb\u7ad9\u6210\u4e00\u6392\uff0c\u7b2c\u4e00\u8f6e\u4ece10\u4e2a\u5c0f\u670b\u53cb\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u77ee\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u8f6e\u4ece\u5269\u4e0b\u76849\u4e2a\u5c0f\u670b\u53cb\u4e2d\uff0c\u518d\u9009\u62e9\u4e00\u4e2a\u6700\u77ee\u7684\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u53ea\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb\uff0c\u76f4\u63a5\u7ad9\u5728\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u662fn-1\u8f6e\u3002 \u548c\u5192\u6ce1\u6392\u5e8f\u4e00\u6837\uff0c\u4e5f\u662f\u4e24\u4e24\u4ea4\u6362\u3002 def select_sort ( seq ): '''\u9009\u62e9\u6392\u5e8f''' n = len ( seq ) for i in range ( n - 1 ): for j in range ( i + 1 , n ): if seq [ j ] < seq [ i ]: seq [ i ], seq [ j ] = seq [ j ], seq [ i ] def test_select_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) select_sort ( seq ) assert seq_sort == seq \u63d2\u5165\u6392\u5e8f(n**2) \u00b6 \u5982\u679c\u6709\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u8981\u6c42\u5728\u8fd9\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5e8f\u5217\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u8981\u6c42\u63d2\u5165\u540e\u4ecd\u7136\u6709\u5e8f\u3002\u56e0\u4e3a\u662f\u5728\u6709\u5e8f\u7684\u57fa\u7840\u4e0a\u518d\u6392\u5e8f\uff0c\u5229\u7528\u4e86\u4e4b\u524d\u7684\u6709\u5e8f\u6761\u4ef6\uff0c\u6240\u4ee5\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u6251\u514b\u724c\u6478\u724c\uff0c\u7b2c\u4e00\u5f20\u6478\u5230\u624b\u91cc\u540e\uff0c\u56e0\u4e3a\u624b\u91cc\u53ea\u6709\u4e00\u5f20\u724c\uff0c\u8ba4\u4e3a\u662f\u6709\u5e8f\u7684\uff0c\u6478\u7b2c\u4e8c\u5f20\u7684\u65f6\u5019\uff0c\u8fd9\u5f20\u724c\u548c\u7b2c\u4e00\u5f20\u6bd4\u8f83\uff0c \u6ca1\u4ed6\u5927\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6478\u7b2c\u4e09\u5f20\u724c\u7684\u65f6\u5019\uff0c\u548c\u7b2c\u4e8c\u5f20\u724c\u6bd4\u8f83\uff0c\u6ca1\u4ed6\u5927\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u5426\u5219\u4e00\u76f4\u627e\u5230\u6bd4\u4ed6\u5c0f\u7684\uff0c\u4ea4\u6362\u4f4d \u7f6e\u3002\u5230\u6700\u540e\u4e00\u5f20\u724c\u4e5f\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u540e\u6392\u597d\u5e8f\u4e86\u3002 def insert_sort ( seq ): n = len ( seq ) for i in range ( 1 , n ): target = seq [ i ] pos = i - 1 while 0 <= pos and target < seq [ pos ]: seq [ pos + 1 ] = seq [ pos ] pos -= 1 seq [ pos + 1 ] = target def test_insert_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) insert_sort ( seq ) assert seq_sort == seq \u5e0c\u5c14\u6392\u5e8f \u00b6 1959\u5e74Shell\u53d1\u660e\uff0c\u7b2c\u4e00\u4e2a\u7a81\u7834O(n2)\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u662f\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u6539\u8fdb\u7248\u3002\u5b83\u4e0e\u63d2\u5165\u6392\u5e8f\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4f1a\u4f18\u5148\u6bd4\u8f83\u8ddd\u79bb\u8f83\u8fdc\u7684\u5143\u7d20\u3002\u5e0c\u5c14\u6392\u5e8f\u53c8\u53eb**\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f**\u3002 \u5e0c\u5c14\u6392\u5e8f\u5c5e\u4e8e\u63d2\u5165\u7c7b\u6392\u5e8f,\u662f\u5c06\u6574\u4e2a\u6709\u5e8f\u5e8f\u5217\u5206\u5272\u6210\u82e5\u5e72\u5c0f\u7684\u5b50\u5e8f\u5217\u5206\u522b\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002 def shell_sort ( seq ): n = len ( seq ) interval = n // 2 # \u4e0d\u65ad\u7f29\u5c0f\u589e\u91cf\uff0c\u6bcf\u6b21\u662f\u539f\u6765\u7684\u4e00\u534a while 0 < interval < n : # \u91cc\u9762\u662f\u4e00\u4e2a\u63d2\u5165\u6392\u5e8f for i in range ( 1 , n ): target = seq [ i ] pos = i - interval while 0 <= pos and target < seq [ pos ]: seq [ pos + interval ] = seq [ pos ] pos -= interval seq [ pos + interval ] = target interval //= 2 def test_insert_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) shell_sort ( seq ) assert seq_sort == seq","title":"\u57fa\u672c\u6392\u5e8f\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#_1","text":"","title":"\u57fa\u672c\u6392\u5e8f\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#n2","text":"\u8fdb\u884cn-1\u8f6e\u8fed\u4ee3\uff0c\u6bcf\u6b21\u6bd4\u8f83\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u524d\u8005\u5927\u4e8e\u540e\u8005\uff0c\u5219\u4ea4\u6362\u987a\u5e8f\u3002\u56e0\u4e3a\u76f4\u63a5\u5728\u5143\u7d20\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\u3002\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u8f6e\u5192\u6ce1\uff0c\u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\u5c31\u4f1a\u901a\u8fc7\u6bd4\u8f83\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u79fb\u5230\u6700\u53f3\u8fb9\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\uff0c10\u4e2a\u5c0f\u670b\u53cb\u7ad9\u4e00\u6392\uff0c\u8eab\u9ad8\u5e76\u4e00\uff0c\u73b0\u5728\u8001\u5e08\u558a\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\uff0c\u4e24\u4e24\u6bd4\u8f83\uff0c \u4e2a\u5b50\u9ad8\u7684\u5f80\u53f3\u79fb\uff08\u8001\u5e08\u60f3\u8ba9\u4ed6\u4eec\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\uff09\uff0c\u7b2c\u4e00\u8f6e\u5c31\u6709\u4e00\u4e2a\u5c0f\u670b\u53cb\u6700\u9ad8\u7684\u5c0f\u670b\u53cb\u7ad9\u5230\u6700\u53f3\u8fb9\uff0c \u7b2c\u4e8c\u8f6e\u6b21\u9ad8\u7684\u5c0f\u670b\u53cb\u7ad9\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u6700\u540e\u4e00\u8f6e\uff0c\u4e00\u4e2a\u5c0f\u670b\u53cb\u4e0d\u7528\u6bd4\u8f83\uff0c\u6240\u4ee5\u662fn-1\u8f6e\uff089\u8f6e\uff09 def bubble_sort ( seq ): '''\u5192\u6ce1\u6392\u5e8f''' n = len ( seq ) for i in range ( n - 1 ): for j in range ( n - 1 - i ): if seq [ j ] > seq [ j + 1 ]: seq [ j ], seq [ j + 1 ] = seq [ j + 1 ], seq [ j ] def test_bubble_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) bubble_sort ( seq ) assert seq_sort == seq","title":"\u5192\u6ce1\u6392\u5e8f(n**2)"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#n2_1","text":"\u5192\u6ce1\u6392\u5e8f\u7684\u601d\u8def\u662f\u4e24\u4e24\u6bd4\u8f83\uff0c\u8f83\u5927\u7684\u6307\u79fb\u5230\u4e86\u6700\u540e\u8fb9\uff0c\u9009\u62e9\u6392\u5e8f\u5219\u662f\u4e24\u4e24\u6bd4\u8f83\uff0c\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c \u518d\u4ece\u5269\u4e0b\u7684\u5143\u7d20\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u5269\u4e0b\u7684\u5143\u7d20\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u662fn-1\u8f6e\u3002 \u540c\u6837\u7684\uff0c10\u4e2a\u5c0f\u670b\u53cb\u7ad9\u6210\u4e00\u6392\uff0c\u7b2c\u4e00\u8f6e\u4ece10\u4e2a\u5c0f\u670b\u53cb\u4e2d\u9009\u62e9\u4e00\u4e2a\u6700\u77ee\u7684\u653e\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u8f6e\u4ece\u5269\u4e0b\u76849\u4e2a\u5c0f\u670b\u53cb\u4e2d\uff0c\u518d\u9009\u62e9\u4e00\u4e2a\u6700\u77ee\u7684\u653e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\uff0c\u4e00\u76f4\u5230\u53ea\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb\uff0c\u76f4\u63a5\u7ad9\u5728\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e5f\u662fn-1\u8f6e\u3002 \u548c\u5192\u6ce1\u6392\u5e8f\u4e00\u6837\uff0c\u4e5f\u662f\u4e24\u4e24\u4ea4\u6362\u3002 def select_sort ( seq ): '''\u9009\u62e9\u6392\u5e8f''' n = len ( seq ) for i in range ( n - 1 ): for j in range ( i + 1 , n ): if seq [ j ] < seq [ i ]: seq [ i ], seq [ j ] = seq [ j ], seq [ i ] def test_select_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) select_sort ( seq ) assert seq_sort == seq","title":"\u9009\u62e9\u6392\u5e8f(n**2)"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#n2_2","text":"\u5982\u679c\u6709\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\uff0c\u8981\u6c42\u5728\u8fd9\u4e2a\u5df2\u7ecf\u6392\u597d\u5e8f\u7684\u5e8f\u5217\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u8981\u6c42\u63d2\u5165\u540e\u4ecd\u7136\u6709\u5e8f\u3002\u56e0\u4e3a\u662f\u5728\u6709\u5e8f\u7684\u57fa\u7840\u4e0a\u518d\u6392\u5e8f\uff0c\u5229\u7528\u4e86\u4e4b\u524d\u7684\u6709\u5e8f\u6761\u4ef6\uff0c\u6240\u4ee5\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u6251\u514b\u724c\u6478\u724c\uff0c\u7b2c\u4e00\u5f20\u6478\u5230\u624b\u91cc\u540e\uff0c\u56e0\u4e3a\u624b\u91cc\u53ea\u6709\u4e00\u5f20\u724c\uff0c\u8ba4\u4e3a\u662f\u6709\u5e8f\u7684\uff0c\u6478\u7b2c\u4e8c\u5f20\u7684\u65f6\u5019\uff0c\u8fd9\u5f20\u724c\u548c\u7b2c\u4e00\u5f20\u6bd4\u8f83\uff0c \u6ca1\u4ed6\u5927\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u6478\u7b2c\u4e09\u5f20\u724c\u7684\u65f6\u5019\uff0c\u548c\u7b2c\u4e8c\u5f20\u724c\u6bd4\u8f83\uff0c\u6ca1\u4ed6\u5927\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u5426\u5219\u4e00\u76f4\u627e\u5230\u6bd4\u4ed6\u5c0f\u7684\uff0c\u4ea4\u6362\u4f4d \u7f6e\u3002\u5230\u6700\u540e\u4e00\u5f20\u724c\u4e5f\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\u540e\u6392\u597d\u5e8f\u4e86\u3002 def insert_sort ( seq ): n = len ( seq ) for i in range ( 1 , n ): target = seq [ i ] pos = i - 1 while 0 <= pos and target < seq [ pos ]: seq [ pos + 1 ] = seq [ pos ] pos -= 1 seq [ pos + 1 ] = target def test_insert_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) insert_sort ( seq ) assert seq_sort == seq","title":"\u63d2\u5165\u6392\u5e8f(n**2)"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#_2","text":"1959\u5e74Shell\u53d1\u660e\uff0c\u7b2c\u4e00\u4e2a\u7a81\u7834O(n2)\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u662f\u7b80\u5355\u63d2\u5165\u6392\u5e8f\u7684\u6539\u8fdb\u7248\u3002\u5b83\u4e0e\u63d2\u5165\u6392\u5e8f\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u4f1a\u4f18\u5148\u6bd4\u8f83\u8ddd\u79bb\u8f83\u8fdc\u7684\u5143\u7d20\u3002\u5e0c\u5c14\u6392\u5e8f\u53c8\u53eb**\u7f29\u5c0f\u589e\u91cf\u6392\u5e8f**\u3002 \u5e0c\u5c14\u6392\u5e8f\u5c5e\u4e8e\u63d2\u5165\u7c7b\u6392\u5e8f,\u662f\u5c06\u6574\u4e2a\u6709\u5e8f\u5e8f\u5217\u5206\u5272\u6210\u82e5\u5e72\u5c0f\u7684\u5b50\u5e8f\u5217\u5206\u522b\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002 def shell_sort ( seq ): n = len ( seq ) interval = n // 2 # \u4e0d\u65ad\u7f29\u5c0f\u589e\u91cf\uff0c\u6bcf\u6b21\u662f\u539f\u6765\u7684\u4e00\u534a while 0 < interval < n : # \u91cc\u9762\u662f\u4e00\u4e2a\u63d2\u5165\u6392\u5e8f for i in range ( 1 , n ): target = seq [ i ] pos = i - interval while 0 <= pos and target < seq [ pos ]: seq [ pos + interval ] = seq [ pos ] pos -= interval seq [ pos + interval ] = target interval //= 2 def test_insert_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) seq_sort = sorted ( seq ) shell_sort ( seq ) assert seq_sort == seq","title":"\u5e0c\u5c14\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","text":"\u6392\u5e8f\u65b9\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6\uff08\u5e73\u5747\uff09 \u65f6\u95f4\u590d\u6742\u5ea6\uff08\u6700\u574f\uff09 \u65f6\u95f4\u590d\u6742\u5ea6\uff08\u6700\u597d\uff09 \u7a7a\u95f4\u590d\u6742\u5ea6 \u7a33\u5b9a\u6027 \u5192\u6ce1\u6392\u5e8f O(n^2) O(n^2) O(n) O(1) \u7a33\u5b9a \u9009\u62e9\u6392\u5e8f O(n^2) O(n^2) O(n^2) O(1) \u4e0d\u7a33\u5b9a \u63d2\u5165\u6392\u5e8f O(n^2) O(n^2) O(n) O(1) \u7a33\u5b9a \u5e0c\u5c14\u6392\u5e8f O(n^1.3) O(n^2) O(n) O(1) \u4e0d\u7a33\u5b9a \u5f52\u5e76\u6392\u5e8f O(nlgn) O(nlgn) O(nlgn) O(n) \u7a33\u5b9a \u5feb\u901f\u6392\u5e8f O(nlgn) O(n^2) O(nlgn) O(nlgn) \u4e0d\u7a33\u5b9a \u5806\u6392\u5e8f O(nlgn) O(nlgn) O(nlgn) O(1) \u4e0d\u7a33\u5b9a \u8ba1\u6570\u6392\u5e8f O(n+k) O(n+k) O(n+k) O(n+k) \u7a33\u5b9a \u6876\u6392\u5e8f O(n+k) O(n^2) O(n) O(n+k) \u7a33\u5b9a \u57fa\u6570\u6392\u5e8f O(n*k) O(n*k) O(n*k) O(n+k) \u7a33\u5b9a","title":"\u6392\u5e8f\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.md/","text":"\u91cd\u70b9\u638c\u63e1 \u00b6 10 \u4e2a\u6570\u636e\u7ed3\u6784\uff1a\u6570\u7ec4\u3001\u94fe\u8868\u3001\u6808\u3001\u961f\u5217\u3001\u6563\u5217\u8868\u3001\u4e8c\u53c9\u6811\u3001\u5806\u3001\u8df3\u8868\u3001\u56fe\u3001Trie \u6811\uff1b 10 \u4e2a\u7b97\u6cd5\uff1a\u9012\u5f52\u3001\u6392\u5e8f\u3001\u4e8c\u5206\u67e5\u627e\u3001\u641c\u7d22\u3001\u54c8\u5e0c\u7b97\u6cd5\u3001\u8d2a\u5fc3\u7b97\u6cd5\u3001\u5206\u6cbb\u7b97\u6cd5\u3001\u56de\u6eaf\u7b97\u6cd5\u3001\u52a8\u6001\u89c4\u5212\u3001\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\u3002 \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u601d\u7ef4\u5bfc\u56fe \u00b6","title":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u601d\u7ef4\u5bfc\u56fe.md"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.md/#_1","text":"10 \u4e2a\u6570\u636e\u7ed3\u6784\uff1a\u6570\u7ec4\u3001\u94fe\u8868\u3001\u6808\u3001\u961f\u5217\u3001\u6563\u5217\u8868\u3001\u4e8c\u53c9\u6811\u3001\u5806\u3001\u8df3\u8868\u3001\u56fe\u3001Trie \u6811\uff1b 10 \u4e2a\u7b97\u6cd5\uff1a\u9012\u5f52\u3001\u6392\u5e8f\u3001\u4e8c\u5206\u67e5\u627e\u3001\u641c\u7d22\u3001\u54c8\u5e0c\u7b97\u6cd5\u3001\u8d2a\u5fc3\u7b97\u6cd5\u3001\u5206\u6cbb\u7b97\u6cd5\u3001\u56de\u6eaf\u7b97\u6cd5\u3001\u52a8\u6001\u89c4\u5212\u3001\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\u3002","title":"\u91cd\u70b9\u638c\u63e1"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.md/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u601d\u7ef4\u5bfc\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/","text":"\u6570\u7ec4 \u00b6 \u63d0\u5230\u6570\u7ec4\uff0c\u6211\u60f3\u4f60\u80af\u5b9a\u4e0d\u964c\u751f\uff0c\u751a\u81f3\u8fd8\u4f1a\u81ea\u4fe1\u5730\u8bf4\uff0c\u5b83\u5f88\u7b80\u5355\u554a\u3002 \u662f\u7684\uff0c\u5728\u6bcf\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u57fa\u672c\u90fd\u4f1a\u6709\u6570\u7ec4\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u3002\u4e0d\u8fc7\uff0c\u5b83\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fd8\u662f \u4e00\u79cd\u6700\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\u3002\u5c3d\u7ba1\u6570\u7ec4\u770b\u8d77\u6765\u975e\u5e38\u57fa\u7840\u3001\u7b80\u5355\uff0c\u4f46\u662f\u6211\u4f30\u8ba1\u5f88\u591a\u4eba\u90fd\u5e76\u6ca1\u6709\u7406\u89e3\u8fd9\u4e2a\u57fa\u7840\u6570\u636e\u7ed3\u6784\u7684\u7cbe \u9ad3\u3002 \u5728\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6570\u7ec4\u90fd\u662f\u4ece 0 \u5f00\u59cb\u7f16\u53f7\u7684\uff0c\u4f46\u4f60\u662f\u5426\u4e0b\u610f\u8bc6\u5730\u60f3\u8fc7\uff0c \u4e3a\u4ec0\u4e48\u6570\u7ec4\u8981\u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u800c\u4e0d\u662f \u4ece 1 \u5f00\u59cb\u5462\uff1f \u4ece 1 \u5f00\u59cb\u4e0d\u662f\u66f4\u7b26\u5408\u4eba\u7c7b\u7684\u601d\u7ef4\u4e60\u60ef\u5417\uff1f \u4f60\u53ef\u4ee5\u5e26\u7740\u8fd9\u4e2a\u95ee\u9898\u6765\u5b66\u4e60\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u3002 \u5982\u4f55\u5b9e\u73b0\u968f\u673a\u8bbf\u95ee\uff1f \u00b6 \u4ec0\u4e48\u662f\u6570\u7ec4\uff1f\u6211\u4f30\u8ba1\u4f60\u5fc3\u4e2d\u5df2\u7ecf\u6709\u4e86\u7b54\u6848\u3002\u4e0d\u8fc7\uff0c\u6211\u8fd8\u662f\u60f3\u7528\u4e13\u4e1a\u7684\u8bdd\u6765\u7ed9\u4f60\u505a\u4e0b\u89e3\u91ca\u3002 \u6570\u7ec4\uff08Array\uff09\u662f\u4e00\u79cd \u7ebf\u6027\u8868\u6570\u636e\u7ed3\u6784\u3002\u5b83\u7528\u4e00\u7ec4\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6765\u5b58\u50a8\u4e00\u7ec4\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u5b9a\u4e49\u91cc\u6709\u51e0\u4e2a\u5173\u952e\u8bcd\uff0c\u7406\u89e3\u4e86\u8fd9\u51e0\u4e2a\u5173\u952e\u8bcd\uff0c\u6211\u60f3\u4f60\u5c31\u80fd\u5f7b\u5e95\u638c\u63e1\u6570\u7ec4\u7684\u6982\u5ff5\u4e86\u3002\u4e0b\u9762\u5c31\u4ece\u6211\u7684\u89d2\u5ea6\u5206\u522b\u7ed9 \u4f60\u201c\u70b9\u62e8\u201d\u4e00\u4e0b\u3002 \u7b2c\u4e00\u662f**\u7ebf\u6027\u8868**\uff08Linear List\uff09\u3002\u987e\u540d\u601d\u4e49\uff0c\u7ebf\u6027\u8868\u5c31\u662f\u6570\u636e\u6392\u6210\u50cf\u4e00\u6761\u7ebf\u4e00\u6837\u7684\u7ed3\u6784\u3002\u6bcf\u4e2a\u7ebf\u6027\u8868\u4e0a\u7684\u6570\u636e\u6700\u591a\u53ea \u6709\u524d\u548c\u540e\u4e24\u4e2a\u65b9\u5411\u3002\u5176\u5b9e\u9664\u4e86\u6570\u7ec4\uff0c\u94fe\u8868\u3001\u961f\u5217\u3001\u6808\u7b49\u4e5f\u662f\u7ebf\u6027\u8868\u7ed3\u6784\u3002 \u800c\u4e0e\u5b83\u76f8\u5bf9\u7acb\u7684\u6982\u5ff5\u662f**\u975e\u7ebf\u6027\u8868**\uff0c\u6bd4\u5982\u4e8c\u53c9\u6811\u3001\u5806\u3001\u56fe\u7b49\u3002\u4e4b\u6240\u4ee5\u53eb\u975e\u7ebf\u6027\uff0c\u662f\u56e0\u4e3a\uff0c\u5728\u975e\u7ebf\u6027\u8868\u4e2d\uff0c\u6570\u636e \u4e4b\u95f4\u5e76\u4e0d\u662f\u7b80\u5355\u7684\u524d\u540e\u5173\u7cfb\u3002 \u7b2c\u4e8c\u4e2a\u662f**\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u76f8\u540c\u7c7b\u578b\u7684\u6570\u636e**\u3002\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u9650\u5236\uff0c\u5b83\u624d\u6709\u4e86\u4e00\u4e2a\u582a\u79f0\u201c\u6740\u624b\u950f\u201d\u7684\u7279\u6027\uff1a\u201c\u968f\u673a\u8bbf \u95ee\u201d\u3002\u4f46\u6709\u5229\u5c31\u6709\u5f0a\uff0c\u8fd9\u4e24\u4e2a\u9650\u5236\u4e5f\u8ba9\u6570\u7ec4\u7684\u5f88\u591a\u64cd\u4f5c\u53d8\u5f97\u975e\u5e38\u4f4e\u6548\uff0c\u6bd4\u5982\u8981\u60f3\u5728\u6570\u7ec4\u4e2d\u5220\u9664\u3001\u63d2\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u4e3a \u4e86\u4fdd\u8bc1\u8fde\u7eed\u6027\uff0c\u5c31\u9700\u8981\u505a\u5927\u91cf\u7684\u6570\u636e\u642c\u79fb\u5de5\u4f5c\u3002 \u8bf4\u5230\u6570\u636e\u7684\u8bbf\u95ee\uff0c\u90a3\u4f60\u77e5\u9053\u6570\u7ec4\u662f\u5982\u4f55\u5b9e\u73b0\u6839\u636e\u4e0b\u6807\u968f\u673a\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u7684\u5417\uff1f \u6211\u4eec\u62ff\u4e00\u4e2a\u957f\u5ea6\u4e3a 10 \u7684 int \u7c7b\u578b\u7684\u6570\u7ec4 int[] a = new int[10] \u6765\u4e3e\u4f8b\u3002\u5728\u6211\u753b\u7684\u8fd9\u4e2a\u56fe\u4e2d\uff0c\u8ba1\u7b97\u673a\u7ed9\u6570\u7ec4 a[10]\uff0c \u5206\u914d\u4e86\u4e00\u5757\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4 1000\uff5e1039\uff0c\u5176\u4e2d\uff0c\u5185\u5b58\u5757\u7684\u9996\u5730\u5740\u4e3a base_address = 1000\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u8ba1\u7b97\u673a\u4f1a\u7ed9\u6bcf\u4e2a\u5185\u5b58\u5355\u5143\u5206\u914d\u4e00\u4e2a\u5730\u5740\uff0c\u8ba1\u7b97\u673a\u901a\u8fc7\u5730\u5740\u6765\u8bbf\u95ee\u5185\u5b58\u4e2d\u7684\u6570\u636e\u3002\u5f53\u8ba1\u7b97\u673a\u9700\u8981\u968f\u673a\u8bbf\u95ee \u6570\u7ec4\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u65f6\uff0c\u5b83\u4f1a\u9996\u5148\u901a\u8fc7\u4e0b\u9762\u7684\u5bfb\u5740\u516c\u5f0f\uff0c\u8ba1\u7b97\u51fa\u8be5\u5143\u7d20\u5b58\u50a8\u7684\u5185\u5b58\u5730\u5740\uff1a a [ i ] _address = base_address + i * data_type_size \u5176\u4e2d data_type_size \u8868\u793a\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u3002\u6211\u4eec\u4e3e\u7684\u8fd9\u4e2a\u4f8b\u5b50\u91cc\uff0c\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u662f int \u7c7b\u578b\u6570\u636e\uff0c\u6240\u4ee5 data_type_size \u5c31\u4e3a 4 \u4e2a\u5b57\u8282\u3002\u8fd9\u4e2a\u516c\u5f0f\u975e\u5e38\u7b80\u5355\uff0c\u6211\u5c31\u4e0d\u591a\u505a\u89e3\u91ca\u4e86\u3002 **\u8fd9\u91cc\u6211\u8981\u7279\u522b\u7ea0\u6b63\u4e00\u4e2a\u201c\u9519\u8bef\u201d\u3002**\u6211\u5728\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u4f1a\u95ee\u6570\u7ec4\u548c\u94fe\u8868\u7684\u533a\u522b\uff0c\u5f88\u591a\u4eba\u90fd\u56de\u7b54\u8bf4\uff0c\u201c\u94fe\u8868\u9002\u5408\u63d2 \u5165\u3001\u5220\u9664\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(1)\uff1b\u6570\u7ec4\u9002\u5408\u67e5\u627e\uff0c\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u201d\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u79cd\u8868\u8ff0\u662f\u4e0d\u51c6\u786e\u7684\u3002\u6570\u7ec4\u662f\u9002\u5408\u67e5\u627e\u64cd\u4f5c\uff0c\u4f46\u662f\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u4e3a O(1)\u3002\u5373\u4fbf\u662f\u6392\u597d\u5e8f\u7684\u6570 \u7ec4\uff0c\u4f60\u7528\u4e8c\u5206**\u67e5\u627e**\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(logn)\u3002\u6240\u4ee5\uff0c\u6b63\u786e\u7684\u8868\u8ff0\u5e94\u8be5\u662f\uff0c\u6570\u7ec4\u652f\u6301**\u968f\u673a\u8bbf\u95ee**\uff0c\u6839\u636e\u4e0b\u6807\u968f\u673a\u8bbf\u95ee \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002 \u4f4e\u6548\u7684\u201c\u63d2\u5165\u201d\u548c\u201c\u5220\u9664\u201d \u00b6 \u524d\u9762\u6982\u5ff5\u90e8\u5206\u6211\u4eec\u63d0\u5230\uff0c\u6570\u7ec4\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u6570\u636e\u7684\u8fde\u7eed\u6027\uff0c\u4f1a\u5bfc\u81f4\u63d2\u5165\u3001\u5220\u9664\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u4f4e\u6548\u3002\u73b0\u5728\u6211\u4eec\u5c31\u6765 \u8be6\u7ec6\u8bf4\u4e00\u4e0b\uff0c\u7a76\u7adf\u4e3a\u4ec0\u4e48\u4f1a\u5bfc\u81f4\u4f4e\u6548\uff1f\u53c8\u6709\u54ea\u4e9b\u6539\u8fdb\u65b9\u6cd5\u5462\uff1f \u63d2\u5165\u64cd\u4f5c \u00b6 \u6211\u4eec\u5148\u6765\u770b\u63d2\u5165\u64cd\u4f5c\u3002 \u5047\u8bbe\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a n\uff0c\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u6570\u636e\u63d2\u5165\u5230\u6570\u7ec4\u4e2d\u7684\u7b2c k \u4e2a\u4f4d\u7f6e\u3002\u4e3a\u4e86\u628a\u7b2c k \u4e2a\u4f4d\u7f6e\u817e\u51fa\u6765\uff0c\u7ed9 \u65b0\u6765\u7684\u6570\u636e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u7b2c k\uff5en \u8fd9\u90e8\u5206\u7684\u5143\u7d20\u90fd\u987a\u5e8f\u5730\u5f80\u540e\u632a\u4e00\u4f4d\u3002\u90a3\u63d2\u5165\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u4f60\u53ef\u4ee5 \u81ea\u5df1\u5148\u8bd5\u7740\u5206\u6790\u4e00\u4e0b\u3002 \u5982\u679c\u5728\u6570\u7ec4\u7684\u672b\u5c3e\u63d2\u5165\u5143\u7d20\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u79fb\u52a8\u6570\u636e\u4e86\uff0c\u8fd9\u65f6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002\u4f46\u5982\u679c\u5728\u6570\u7ec4\u7684\u5f00\u5934\u63d2\u5165\u5143 \u7d20\uff0c\u90a3\u6240\u6709\u7684\u6570\u636e\u90fd\u9700\u8981\u4f9d\u6b21\u5f80\u540e\u79fb\u52a8\u4e00\u4f4d\uff0c\u6240\u4ee5\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002 \u56e0\u4e3a\u6211\u4eec\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u7684\u6982\u7387 \u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a (1+2+\u2026n)/n=O(n)\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u662f\u6709\u5e8f\u7684\uff0c\u6211\u4eec\u5728\u67d0\u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u65f6\uff0c\u5c31\u5fc5\u987b\u6309\u7167\u521a\u624d\u7684\u65b9\u6cd5\u642c\u79fb k \u4e4b\u540e\u7684\u6570\u636e\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u5e76\u6ca1\u6709\u4efb\u4f55\u89c4\u5f8b\uff0c\u6570\u7ec4\u53ea\u662f\u88ab\u5f53\u4f5c\u4e00\u4e2a\u5b58\u50a8\u6570\u636e\u7684\u96c6\u5408\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8981\u5c06\u67d0 \u4e2a\u6570\u7ec4\u63d2\u5165\u5230\u7b2c k \u4e2a\u4f4d\u7f6e\uff0c\u4e3a\u4e86\u907f\u514d\u5927\u89c4\u6a21\u7684\u6570\u636e\u642c\u79fb\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\uff0c\u76f4\u63a5\u5c06\u7b2c k \u4f4d\u7684\u6570\u636e\u642c \u79fb\u5230\u6570\u7ec4\u5143\u7d20\u7684\u6700\u540e\uff0c\u628a\u65b0\u7684\u5143\u7d20\u76f4\u63a5\u653e\u5165\u7b2c k \u4e2a\u4f4d\u7f6e\u3002 \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u3002\u5047\u8bbe\u6570\u7ec4 a[10] \u4e2d\u5b58\u50a8\u4e86\u5982\u4e0b 5 \u4e2a\u5143\u7d20\uff1aa\uff0cb\uff0cc\uff0cd\uff0ce\u3002 \u6211\u4eec\u73b0\u5728\u9700\u8981\u5c06\u5143\u7d20 x \u63d2\u5165\u5230\u7b2c 3 \u4e2a\u4f4d\u7f6e\u3002\u6211\u4eec\u53ea\u9700\u8981\u5c06 c \u653e\u5165\u5230 a[5]\uff0c\u5c06 a[2] \u8d4b\u503c\u4e3a x \u5373\u53ef\u3002\u6700\u540e\uff0c\u6570\u7ec4\u4e2d\u7684 \u5143\u7d20\u5982\u4e0b\uff1a a\uff0cb\uff0cx\uff0cd\uff0ce\uff0cc\u3002 \u5229\u7528\u8fd9\u79cd\u5904\u7406\u6280\u5de7\uff0c\u5728\u7279\u5b9a\u573a\u666f\u4e0b\uff0c\u5728\u7b2c k \u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u964d\u4e3a O(1)\u3002\u8fd9\u4e2a\u5904\u7406\u601d\u60f3\u5728\u5feb \u6392\u4e2d\u4e5f\u4f1a\u7528\u5230\uff0c\u6211\u4f1a\u5728\u6392\u5e8f\u90a3\u4e00\u8282\u5177\u4f53\u6765\u8bb2\uff0c\u8fd9\u91cc\u5c31\u8bf4\u5230\u8fd9\u513f\u3002 \u5220\u9664\u64cd\u4f5c \u00b6 \u6211\u4eec\u518d\u6765\u770b\u5220\u9664\u64cd\u4f5c\u3002 \u8ddf\u63d2\u5165\u6570\u636e\u7c7b\u4f3c\uff0c\u5982\u679c\u6211\u4eec\u8981\u5220\u9664\u7b2c k \u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\uff0c\u4e3a\u4e86\u5185\u5b58\u7684\u8fde\u7eed\u6027\uff0c\u4e5f\u9700\u8981\u642c\u79fb\u6570\u636e\uff0c\u4e0d\u7136\u4e2d\u95f4\u5c31\u4f1a\u51fa\u73b0 \u7a7a\u6d1e\uff0c\u5185\u5b58\u5c31\u4e0d\u8fde\u7eed\u4e86\u3002 \u548c\u63d2\u5165\u7c7b\u4f3c\uff0c\u5982\u679c\u5220\u9664\u6570\u7ec4\u672b\u5c3e\u7684\u6570\u636e\uff0c\u5219\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff1b\u5982\u679c\u5220\u9664\u5f00\u5934\u7684\u6570\u636e\uff0c\u5219\u6700\u574f\u60c5\u51b5\u65f6\u95f4 \u590d\u6742\u5ea6\u4e3a O(n)\uff1b\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e3a O(n)\u3002 \u5b9e\u9645\u4e0a\uff0c\u5728\u67d0\u4e9b\u7279\u6b8a\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u8ffd\u6c42\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u8fde\u7eed\u6027\u3002\u5982\u679c\u6211\u4eec\u5c06\u591a\u6b21\u5220\u9664\u64cd\u4f5c\u96c6\u4e2d\u5728\u4e00\u8d77\u6267 \u884c\uff0c\u5220\u9664\u7684\u6548\u7387\u662f\u4e0d\u662f\u4f1a\u63d0\u9ad8\u5f88\u591a\u5462\uff1f \u6211\u4eec\u7ee7\u7eed\u6765\u770b\u4f8b\u5b50\u3002\u6570\u7ec4 a[10] \u4e2d\u5b58\u50a8\u4e86 8 \u4e2a\u5143\u7d20\uff1aa\uff0cb\uff0cc\uff0cd\uff0ce\uff0cf\uff0cg\uff0ch\u3002\u73b0\u5728\uff0c\u6211\u4eec\u8981\u4f9d\u6b21\u5220\u9664 a\uff0cb\uff0cc \u4e09\u4e2a\u5143\u7d20\u3002 \u4e3a\u4e86\u907f\u514d d\uff0ce\uff0cf\uff0cg\uff0ch \u8fd9\u51e0\u4e2a\u6570\u636e\u4f1a\u88ab\u642c\u79fb\u4e09\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8bb0\u5f55\u4e0b\u5df2\u7ecf\u5220\u9664\u7684\u6570\u636e\u3002\u6bcf\u6b21\u7684\u5220\u9664\u64cd\u4f5c\u5e76\u4e0d\u662f \u771f\u6b63\u5730\u642c\u79fb\u6570\u636e\uff0c\u53ea\u662f\u8bb0\u5f55\u6570\u636e\u5df2\u7ecf\u88ab\u5220\u9664\u3002\u5f53\u6570\u7ec4\u6ca1\u6709\u66f4\u591a\u7a7a\u95f4\u5b58\u50a8\u6570\u636e\u65f6\uff0c\u6211\u4eec\u518d\u89e6\u53d1\u6267\u884c\u4e00\u6b21\u771f\u6b63\u7684\u5220\u9664\u64cd \u4f5c\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u5220\u9664\u64cd\u4f5c\u5bfc\u81f4\u7684\u6570\u636e\u642c\u79fb\u3002 \u5982\u679c\u4f60\u4e86\u89e3 JVM\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e0d\u5c31\u662f JVM \u6807\u8bb0\u6e05\u9664\u5783\u573e\u56de\u6536\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u5417\uff1f\u6ca1\u9519\uff0c\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u9b45\u529b \u5c31\u5728\u4e8e\u6b64\uff0c \u5f88\u591a\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u662f\u8981\u53bb\u6b7b\u8bb0\u786c\u80cc\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u7b97\u6cd5\uff0c\u800c\u662f\u8981\u5b66\u4e60\u5b83\u80cc\u540e\u7684\u601d\u60f3\u548c\u5904\u7406\u6280\u5de7\uff0c\u8fd9\u4e9b \u4e1c\u897f\u624d\u662f\u6700\u6709\u4ef7\u503c\u7684 \u3002\u5982\u679c\u4f60\u7ec6\u5fc3\u7559\u610f\uff0c\u4e0d\u7ba1\u662f\u5728\u8f6f\u4ef6\u5f00\u53d1\u8fd8\u662f\u67b6\u6784\u8bbe\u8ba1\u4e2d\uff0c\u603b\u80fd\u627e\u5230\u67d0\u4e9b\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u5f71 \u5b50\u3002 \u8b66\u60d5\u6570\u7ec4\u7684\u8bbf\u95ee\u8d8a\u754c\u95ee\u9898 \u00b6 \u4e86\u89e3\u4e86\u6570\u7ec4\u7684\u51e0\u4e2a\u57fa\u672c\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u6765\u804a\u804a\u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c\u7684\u95ee\u9898\u3002 \u9996\u5148\uff0c\u6211\u8bf7\u4f60\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u6bb5 C \u8bed\u8a00\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\uff1a int main ( int argc , char * argv []){ int i = 0 ; int arr [ 3 ] = { 0 }; for (; i <= 3 ; i ++ ){ arr [ i ] = 0 ; printf ( \"hello world \\n \" ); } return 0 ; } \u4f60\u53d1\u73b0\u95ee\u9898\u4e86\u5417\uff1f\u8fd9\u6bb5\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u5e76\u975e\u662f\u6253\u5370\u4e09\u884c\u201chello word\u201d\uff0c\u800c\u662f\u4f1a\u65e0\u9650\u6253\u5370\u201chello world\u201d\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48 \u5462\uff1f \u56e0\u4e3a\uff0c\u6570\u7ec4\u5927\u5c0f\u4e3a 3\uff0ca[0]\uff0ca[1]\uff0ca[2]\uff0c\u800c\u6211\u4eec\u7684\u4ee3\u7801\u56e0\u4e3a\u4e66\u5199\u9519\u8bef\uff0c\u5bfc\u81f4 for \u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u9519\u5199\u4e3a\u4e86 i<=3 \u800c \u975e i<3\uff0c\u6240\u4ee5\u5f53 i=3 \u65f6\uff0c\u6570\u7ec4 a[3] \u8bbf\u95ee\u8d8a\u754c\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u5728 C \u8bed\u8a00\u4e2d\uff0c\u53ea\u8981\u4e0d\u662f\u8bbf\u95ee\u53d7\u9650\u7684\u5185\u5b58\uff0c\u6240\u6709\u7684\u5185\u5b58\u7a7a\u95f4\u90fd\u662f\u53ef\u4ee5\u81ea\u7531\u8bbf\u95ee\u7684\u3002\u6839\u636e\u6211\u4eec\u524d\u9762\u8bb2\u7684\u6570 \u7ec4\u5bfb\u5740\u516c\u5f0f\uff0ca[3] \u4e5f\u4f1a\u88ab\u5b9a\u4f4d\u5230\u67d0\u5757\u4e0d\u5c5e\u4e8e\u6570\u7ec4\u7684\u5185\u5b58\u5730\u5740\u4e0a\uff0c\u800c\u8fd9\u4e2a\u5730\u5740\u6b63\u597d\u662f\u5b58\u50a8\u53d8\u91cf i \u7684\u5185\u5b58\u5730\u5740\uff0c\u90a3\u4e48 a[3]=0 \u5c31\u76f8\u5f53\u4e8e i=0\uff0c\u6240\u4ee5\u5c31\u4f1a\u5bfc\u81f4\u4ee3\u7801\u65e0\u9650\u5faa\u73af\u3002 \u6570\u7ec4\u8d8a\u754c\u5728 C \u8bed\u8a00\u4e2d\u662f\u4e00\u79cd\u672a\u51b3\u884c\u4e3a\uff0c\u5e76\u6ca1\u6709\u89c4\u5b9a\u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c\u65f6\u7f16\u8bd1\u5668\u5e94\u8be5\u5982\u4f55\u5904\u7406\u3002\u56e0\u4e3a\uff0c\u8bbf\u95ee\u6570\u7ec4\u7684\u672c\u8d28 \u5c31\u662f\u8bbf\u95ee\u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\uff0c\u53ea\u8981\u6570\u7ec4\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u5f97\u5230\u7684\u5185\u5b58\u5730\u5740\u662f\u53ef\u7528\u7684\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u53ef\u80fd\u4e0d\u4f1a\u62a5\u4efb\u4f55\u9519\u8bef\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u822c\u90fd\u4f1a\u51fa\u73b0\u83ab\u540d\u5176\u5999\u7684\u903b\u8f91\u9519\u8bef\uff0c\u5c31\u50cf\u6211\u4eec\u521a\u521a\u4e3e\u7684\u90a3\u4e2a\u4f8b\u5b50\uff0cdebug \u7684\u96be\u5ea6\u975e\u5e38\u7684\u5927\u3002\u800c\u4e14\uff0c \u5f88\u591a\u8ba1\u7b97\u673a\u75c5\u6bd2\u4e5f\u6b63\u662f\u5229\u7528\u5230\u4e86\u4ee3\u7801\u4e2d\u7684\u6570\u7ec4\u8d8a\u754c\u53ef\u4ee5\u8bbf\u95ee\u975e\u6cd5\u5730\u5740\u7684\u6f0f\u6d1e\uff0c\u6765\u653b\u51fb\u7cfb\u7edf\uff0c\u6240\u4ee5\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e00\u5b9a \u8981\u8b66\u60d5\u6570\u7ec4\u8d8a\u754c\u3002 \u4f46\u5e76\u975e\u6240\u6709\u7684\u8bed\u8a00\u90fd\u50cf C \u4e00\u6837\uff0c\u628a\u6570\u7ec4\u8d8a\u754c\u68c0\u67e5\u7684\u5de5\u4f5c\u4e22\u7ed9\u7a0b\u5e8f\u5458\u6765\u505a\uff0c\u50cf Java \u672c\u8eab\u5c31\u4f1a\u505a\u8d8a\u754c\u68c0\u67e5\uff0c\u6bd4\u5982\u4e0b\u9762 \u8fd9\u51e0\u884c Java \u4ee3\u7801\uff0c\u5c31\u4f1a\u629b\u51fa java.lang.ArrayIndexOutOfBoundsException\u3002 int [] a = new int [ 3 ]; a [ 3 ] = 10 ; \u5bb9\u5668\u80fd\u5426\u5b8c\u5168\u66ff\u4ee3\u6570\u7ec4\uff1f \u00b6 \u9488\u5bf9\u6570\u7ec4\u7c7b\u578b\uff0c\u5f88\u591a\u8bed\u8a00\u90fd\u63d0\u4f9b\u4e86\u5bb9\u5668\u7c7b\uff0c\u6bd4\u5982 Java \u4e2d\u7684 ArrayList\u3001C++ STL \u4e2d\u7684 vector\u3002\u5728\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u4ec0\u4e48 \u65f6\u5019\u9002\u5408\u7528\u6570\u7ec4\uff0c\u4ec0\u4e48\u65f6\u5019\u9002\u5408\u7528\u5bb9\u5668\u5462\uff1f \u8fd9\u91cc\u6211\u62ff Java \u8bed\u8a00\u6765\u4e3e\u4f8b\u3002\u5982\u679c\u4f60\u662f Java \u5de5\u7a0b\u5e08\uff0c\u51e0\u4e4e\u5929\u5929\u90fd\u5728\u7528 ArrayList\uff0c\u5bf9\u5b83\u5e94\u8be5\u975e\u5e38\u719f\u6089\u3002\u90a3\u5b83\u4e0e\u6570\u7ec4 \u76f8\u6bd4\uff0c\u5230\u5e95\u6709\u54ea\u4e9b\u4f18\u52bf\u5462\uff1f \u6211\u4e2a\u4eba\u89c9\u5f97\uff0cArrayList \u6700\u5927\u7684\u4f18\u52bf\u5c31\u662f**\u53ef\u4ee5\u5c06\u5f88\u591a\u6570\u7ec4\u64cd\u4f5c\u7684\u7ec6\u8282\u5c01\u88c5\u8d77\u6765**\u3002\u6bd4\u5982\u524d\u9762\u63d0\u5230\u7684\u6570\u7ec4\u63d2\u5165\u3001\u5220\u9664\u6570 \u636e\u65f6\u9700\u8981\u642c\u79fb\u5176\u4ed6\u6570\u636e\u7b49\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a\u4f18\u52bf\uff0c\u5c31\u662f**\u652f\u6301\u52a8\u6001\u6269\u5bb9**\u3002 \u6570\u7ec4\u672c\u8eab\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u9700\u8981\u9884\u5148\u6307\u5b9a\u5927\u5c0f\uff0c\u56e0\u4e3a\u9700\u8981\u5206\u914d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u5982\u679c\u6211\u4eec\u7533\u8bf7\u4e86\u5927\u5c0f\u4e3a 10 \u7684\u6570\u7ec4\uff0c\u5f53 \u7b2c 11 \u4e2a\u6570\u636e\u9700\u8981\u5b58\u50a8\u5230\u6570\u7ec4\u4e2d\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u91cd\u65b0\u5206\u914d\u4e00\u5757\u66f4\u5927\u7684\u7a7a\u95f4\uff0c\u5c06\u539f\u6765\u7684\u6570\u636e\u590d\u5236\u8fc7\u53bb\uff0c\u7136\u540e\u518d\u5c06\u65b0\u7684 \u6570\u636e\u63d2\u5165\u3002 \u5982\u679c\u4f7f\u7528 ArrayList\uff0c\u6211\u4eec\u5c31\u5b8c\u5168\u4e0d\u9700\u8981\u5173\u5fc3\u5e95\u5c42\u7684\u6269\u5bb9\u903b\u8f91\uff0cArrayList \u5df2\u7ecf\u5e2e\u6211\u4eec\u5b9e\u73b0\u597d\u4e86\u3002\u6bcf\u6b21\u5b58\u50a8\u7a7a\u95f4\u4e0d\u591f \u7684\u65f6\u5019\uff0c\u5b83\u90fd\u4f1a\u5c06\u7a7a\u95f4\u81ea\u52a8\u6269\u5bb9\u4e3a 1.5 \u500d\u5927\u5c0f\u3002 \u4e0d\u8fc7\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u56e0\u4e3a\u6269\u5bb9\u64cd\u4f5c\u6d89\u53ca\u5185\u5b58\u7533\u8bf7\u548c\u6570\u636e\u642c\u79fb\uff0c\u662f\u6bd4\u8f83\u8017\u65f6\u7684\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4e8b\u5148\u80fd\u786e\u5b9a\u9700\u8981\u5b58 \u50a8\u7684\u6570\u636e\u5927\u5c0f\uff0c \u6700\u597d\u5728\u521b\u5efa ArrayList \u7684\u65f6\u5019\u4e8b\u5148\u6307\u5b9a\u6570\u636e\u5927\u5c0f \u3002 \u6bd4\u5982\u6211\u4eec\u8981\u4ece\u6570\u636e\u5e93\u4e2d\u53d6\u51fa 10000 \u6761\u6570\u636e\u653e\u5165 ArrayList\u3002\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u51e0\u884c\u4ee3\u7801\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4e8b\u5148\u6307 \u5b9a\u6570\u636e\u5927\u5c0f\u53ef\u4ee5\u7701\u6389\u5f88\u591a\u6b21\u5185\u5b58\u7533\u8bf7\u548c\u6570\u636e\u642c\u79fb\u64cd\u4f5c\u3002 ArrayList < User > users = new ArrayList ( 10000 ); for ( int i = 0 ; i < 10000 ; ++ i ) { users . add ( xxx ); } \u4f5c\u4e3a\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u8005\uff0c\u662f\u4e0d\u662f\u6570\u7ec4\u5c31\u65e0\u7528\u6b66\u4e4b\u5730\u4e86\u5462\uff1f\u5f53\u7136\u4e0d\u662f\uff0c\u6709\u4e9b\u65f6\u5019\uff0c\u7528\u6570\u7ec4\u4f1a\u66f4\u5408\u9002\u4e9b\uff0c\u6211\u603b\u7ed3\u4e86\u51e0\u70b9\u81ea \u5df1\u7684\u7ecf\u9a8c\u3002 Java ArrayList \u65e0\u6cd5\u5b58\u50a8\u57fa\u672c\u7c7b\u578b\uff0c\u6bd4\u5982 int\u3001long\uff0c\u9700\u8981\u5c01\u88c5\u4e3a Integer\u3001Long \u7c7b\uff0c\u800c Autoboxing\u3001Unboxing \u5219\u6709\u4e00\u5b9a\u7684\u6027\u80fd\u6d88\u8017\uff0c\u6240\u4ee5\u5982\u679c\u7279\u522b\u5173\u6ce8\u6027\u80fd\uff0c\u6216\u8005\u5e0c\u671b\u4f7f\u7528\u57fa\u672c\u7c7b\u578b\uff0c\u5c31\u53ef\u4ee5\u9009\u7528\u6570\u7ec4\u3002 \u5982\u679c\u6570\u636e\u5927\u5c0f\u4e8b\u5148\u5df2\u77e5\uff0c\u5e76\u4e14\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u975e\u5e38\u7b80\u5355\uff0c\u7528\u4e0d\u5230 ArrayList \u63d0\u4f9b\u7684\u5927\u90e8\u5206\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6570\u7ec4\u3002 \u8fd8\u6709\u4e00\u4e2a\u662f\u6211\u4e2a\u4eba\u7684\u559c\u597d\uff0c\u5f53\u8981\u8868\u793a\u591a\u7ef4\u6570\u7ec4\u65f6\uff0c\u7528\u6570\u7ec4\u5f80\u5f80\u4f1a\u66f4\u52a0\u76f4\u89c2\u3002\u6bd4\u5982 Object[][] array\uff1b\u800c\u7528\u5bb9\u5668\u7684\u8bdd\u5219\u9700\u8981\u8fd9\u6837\u5b9a\u4e49\uff1aArrayList > array\u3002 \u6211\u603b\u7ed3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u5f00\u53d1\uff0c\u76f4\u63a5\u4f7f\u7528\u5bb9\u5668\u5c31\u8db3\u591f\u4e86\uff0c\u7701\u65f6\u7701\u529b\u3002\u6bd5\u7adf\u635f\u8017\u4e00\u4e22\u4e22\u6027\u80fd\uff0c\u5b8c\u5168\u4e0d\u4f1a\u5f71\u54cd\u5230\u7cfb\u7edf\u6574\u4f53 \u7684\u6027\u80fd\u3002\u4f46\u5982\u679c\u4f60\u662f\u505a\u4e00\u4e9b\u975e\u5e38\u5e95\u5c42\u7684\u5f00\u53d1\uff0c\u6bd4\u5982\u5f00\u53d1\u7f51\u7edc\u6846\u67b6\uff0c\u6027\u80fd\u7684\u4f18\u5316\u9700\u8981\u505a\u5230\u6781\u81f4\uff0c\u8fd9\u4e2a\u65f6\u5019\u6570\u7ec4\u5c31\u4f1a\u4f18 \u4e8e\u5bb9\u5668\uff0c\u6210\u4e3a\u9996\u9009\u3002 \u4e3a\u4ec0\u4e48\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6570\u7ec4\u90fd\u4ece0\u5f00\u59cb\u7f16\u53f7\uff1f \u00b6 \u73b0\u5728\u6211\u4eec\u6765\u601d\u8003\u5f00\u7bc7\u7684\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6570\u7ec4\u8981\u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u4ece 1 \u5f00\u59cb\u5462\uff1f \u4ece\u6570\u7ec4\u5b58\u50a8\u7684\u5185\u5b58\u6a21\u578b\u4e0a\u6765\u770b\uff0c\u201c\u4e0b\u6807\u201d\u6700\u786e\u5207\u7684\u5b9a\u4e49\u5e94\u8be5\u662f\u201c\u504f\u79fb\uff08offset\uff09\u201d\u3002\u524d\u9762\u4e5f\u8bb2\u5230\uff0c\u5982\u679c\u7528 a \u6765\u8868\u793a\u6570\u7ec4 \u7684\u9996\u5730\u5740\uff0ca[0] \u5c31\u662f\u504f\u79fb\u4e3a 0 \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u9996\u5730\u5740\uff0ca[k] \u5c31\u8868\u793a\u504f\u79fb k \u4e2a type_size \u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8ba1\u7b97 a[k] \u7684 \u5185\u5b58\u5730\u5740\u53ea\u9700\u8981\u7528\u8fd9\u4e2a\u516c\u5f0f\uff1a a [ k ] _address = base_address + k * type_size \u4f46\u662f\uff0c\u5982\u679c\u6570\u7ec4\u4ece 1 \u5f00\u59cb\u8ba1\u6570\uff0c\u90a3\u6211\u4eec\u8ba1\u7b97\u6570\u7ec4\u5143\u7d20 a[k] \u7684\u5185\u5b58\u5730\u5740\u5c31\u4f1a\u53d8\u4e3a\uff1a a [ k ] _address = base_address + ( k -1 ) * type_size \u5bf9\u6bd4\u4e24\u4e2a\u516c\u5f0f\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u4ece 1 \u5f00\u59cb\u7f16\u53f7\uff0c\u6bcf\u6b21\u968f\u673a\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u90fd\u591a\u4e86\u4e00\u6b21\u51cf\u6cd5\u8fd0\u7b97\uff0c\u5bf9\u4e8e CPU \u6765\u8bf4\uff0c\u5c31 \u662f\u591a\u4e86\u4e00\u6b21\u51cf\u6cd5\u6307\u4ee4\u3002 \u6570\u7ec4\u4f5c\u4e3a\u975e\u5e38\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u901a\u8fc7\u4e0b\u6807\u968f\u673a\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u53c8\u662f\u5176\u975e\u5e38\u57fa\u7840\u7684\u7f16\u7a0b\u64cd\u4f5c\uff0c\u6548\u7387\u7684\u4f18\u5316\u5c31\u8981\u5c3d\u53ef\u80fd\u505a \u5230\u6781\u81f4\u3002\u6240\u4ee5\u4e3a\u4e86\u51cf\u5c11\u4e00\u6b21\u51cf\u6cd5\u64cd\u4f5c\uff0c\u6570\u7ec4\u9009\u62e9\u4e86\u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u4ece 1 \u5f00\u59cb\u3002 \u4e0d\u8fc7\u6211\u8ba4\u4e3a\uff0c\u4e0a\u9762\u89e3\u91ca\u5f97\u518d\u591a\u5176\u5b9e\u90fd\u7b97\u4e0d\u4e0a\u538b\u5012\u6027\u7684\u8bc1\u660e\uff0c\u8bf4\u6570\u7ec4\u8d77\u59cb\u7f16\u53f7\u975e 0 \u5f00\u59cb\u4e0d\u53ef\u3002\u6240\u4ee5\u6211\u89c9\u5f97\u6700\u4e3b\u8981\u7684 \u539f\u56e0\u53ef\u80fd\u662f\u5386\u53f2\u539f\u56e0\u3002 C \u8bed\u8a00\u8bbe\u8ba1\u8005\u7528 0 \u5f00\u59cb\u8ba1\u6570\u6570\u7ec4\u4e0b\u6807\uff0c\u4e4b\u540e\u7684 Java\u3001JavaScript \u7b49\u9ad8\u7ea7\u8bed\u8a00\u90fd\u6548\u4eff\u4e86 C \u8bed\u8a00\uff0c\u6216\u8005\u8bf4\uff0c\u4e3a\u4e86\u5728\u4e00 \u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c11 C \u8bed\u8a00\u7a0b\u5e8f\u5458\u5b66\u4e60 Java \u7684\u5b66\u4e60\u6210\u672c\uff0c\u56e0\u6b64\u7ee7\u7eed\u6cbf\u7528\u4e86\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7684\u4e60\u60ef\u3002\u5b9e\u9645\u4e0a\uff0c\u5f88\u591a\u8bed\u8a00\u4e2d\u6570 \u7ec4\u4e5f\u5e76\u4e0d\u662f\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6bd4\u5982 Matlab\u3002\u751a\u81f3\u8fd8\u6709\u4e00\u4e9b\u8bed\u8a00\u652f\u6301\u8d1f\u6570\u4e0b\u6807\uff0c\u6bd4\u5982 Python\u3002 \u5185\u5bb9\u5c0f\u7ed3 \u00b6 \u6211\u4eec\u4eca\u5929\u5b66\u4e60\u4e86\u6570\u7ec4\u3002\u5b83\u53ef\u4ee5\u8bf4\u662f\u6700\u57fa\u7840\u3001\u6700\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u4e86\u3002\u6570\u7ec4\u7528\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6765\u5b58\u50a8\u76f8\u540c\u7c7b\u578b\u7684 \u4e00\u7ec4\u6570\u636e\uff0c\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4f46\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u4e5f\u56e0\u6b64\u53d8\u5f97\u6bd4\u8f83\u4f4e\u6548\uff0c\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u5728\u5e73\u65f6\u7684\u4e1a\u52a1\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7684\u5bb9\u5668\u7c7b\uff0c\u4f46\u662f\uff0c\u5982\u679c\u662f\u7279\u522b\u5e95\u5c42\u7684\u5f00\u53d1\uff0c\u76f4\u63a5\u4f7f\u7528 \u6570\u7ec4\u53ef\u80fd\u4f1a\u66f4\u5408\u9002\u3002","title":"\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_1","text":"\u63d0\u5230\u6570\u7ec4\uff0c\u6211\u60f3\u4f60\u80af\u5b9a\u4e0d\u964c\u751f\uff0c\u751a\u81f3\u8fd8\u4f1a\u81ea\u4fe1\u5730\u8bf4\uff0c\u5b83\u5f88\u7b80\u5355\u554a\u3002 \u662f\u7684\uff0c\u5728\u6bcf\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u57fa\u672c\u90fd\u4f1a\u6709\u6570\u7ec4\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u3002\u4e0d\u8fc7\uff0c\u5b83\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fd8\u662f \u4e00\u79cd\u6700\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\u3002\u5c3d\u7ba1\u6570\u7ec4\u770b\u8d77\u6765\u975e\u5e38\u57fa\u7840\u3001\u7b80\u5355\uff0c\u4f46\u662f\u6211\u4f30\u8ba1\u5f88\u591a\u4eba\u90fd\u5e76\u6ca1\u6709\u7406\u89e3\u8fd9\u4e2a\u57fa\u7840\u6570\u636e\u7ed3\u6784\u7684\u7cbe \u9ad3\u3002 \u5728\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6570\u7ec4\u90fd\u662f\u4ece 0 \u5f00\u59cb\u7f16\u53f7\u7684\uff0c\u4f46\u4f60\u662f\u5426\u4e0b\u610f\u8bc6\u5730\u60f3\u8fc7\uff0c \u4e3a\u4ec0\u4e48\u6570\u7ec4\u8981\u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u800c\u4e0d\u662f \u4ece 1 \u5f00\u59cb\u5462\uff1f \u4ece 1 \u5f00\u59cb\u4e0d\u662f\u66f4\u7b26\u5408\u4eba\u7c7b\u7684\u601d\u7ef4\u4e60\u60ef\u5417\uff1f \u4f60\u53ef\u4ee5\u5e26\u7740\u8fd9\u4e2a\u95ee\u9898\u6765\u5b66\u4e60\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u3002","title":"\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_2","text":"\u4ec0\u4e48\u662f\u6570\u7ec4\uff1f\u6211\u4f30\u8ba1\u4f60\u5fc3\u4e2d\u5df2\u7ecf\u6709\u4e86\u7b54\u6848\u3002\u4e0d\u8fc7\uff0c\u6211\u8fd8\u662f\u60f3\u7528\u4e13\u4e1a\u7684\u8bdd\u6765\u7ed9\u4f60\u505a\u4e0b\u89e3\u91ca\u3002 \u6570\u7ec4\uff08Array\uff09\u662f\u4e00\u79cd \u7ebf\u6027\u8868\u6570\u636e\u7ed3\u6784\u3002\u5b83\u7528\u4e00\u7ec4\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6765\u5b58\u50a8\u4e00\u7ec4\u5177\u6709\u76f8\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002 \u8fd9\u4e2a\u5b9a\u4e49\u91cc\u6709\u51e0\u4e2a\u5173\u952e\u8bcd\uff0c\u7406\u89e3\u4e86\u8fd9\u51e0\u4e2a\u5173\u952e\u8bcd\uff0c\u6211\u60f3\u4f60\u5c31\u80fd\u5f7b\u5e95\u638c\u63e1\u6570\u7ec4\u7684\u6982\u5ff5\u4e86\u3002\u4e0b\u9762\u5c31\u4ece\u6211\u7684\u89d2\u5ea6\u5206\u522b\u7ed9 \u4f60\u201c\u70b9\u62e8\u201d\u4e00\u4e0b\u3002 \u7b2c\u4e00\u662f**\u7ebf\u6027\u8868**\uff08Linear List\uff09\u3002\u987e\u540d\u601d\u4e49\uff0c\u7ebf\u6027\u8868\u5c31\u662f\u6570\u636e\u6392\u6210\u50cf\u4e00\u6761\u7ebf\u4e00\u6837\u7684\u7ed3\u6784\u3002\u6bcf\u4e2a\u7ebf\u6027\u8868\u4e0a\u7684\u6570\u636e\u6700\u591a\u53ea \u6709\u524d\u548c\u540e\u4e24\u4e2a\u65b9\u5411\u3002\u5176\u5b9e\u9664\u4e86\u6570\u7ec4\uff0c\u94fe\u8868\u3001\u961f\u5217\u3001\u6808\u7b49\u4e5f\u662f\u7ebf\u6027\u8868\u7ed3\u6784\u3002 \u800c\u4e0e\u5b83\u76f8\u5bf9\u7acb\u7684\u6982\u5ff5\u662f**\u975e\u7ebf\u6027\u8868**\uff0c\u6bd4\u5982\u4e8c\u53c9\u6811\u3001\u5806\u3001\u56fe\u7b49\u3002\u4e4b\u6240\u4ee5\u53eb\u975e\u7ebf\u6027\uff0c\u662f\u56e0\u4e3a\uff0c\u5728\u975e\u7ebf\u6027\u8868\u4e2d\uff0c\u6570\u636e \u4e4b\u95f4\u5e76\u4e0d\u662f\u7b80\u5355\u7684\u524d\u540e\u5173\u7cfb\u3002 \u7b2c\u4e8c\u4e2a\u662f**\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u548c\u76f8\u540c\u7c7b\u578b\u7684\u6570\u636e**\u3002\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u9650\u5236\uff0c\u5b83\u624d\u6709\u4e86\u4e00\u4e2a\u582a\u79f0\u201c\u6740\u624b\u950f\u201d\u7684\u7279\u6027\uff1a\u201c\u968f\u673a\u8bbf \u95ee\u201d\u3002\u4f46\u6709\u5229\u5c31\u6709\u5f0a\uff0c\u8fd9\u4e24\u4e2a\u9650\u5236\u4e5f\u8ba9\u6570\u7ec4\u7684\u5f88\u591a\u64cd\u4f5c\u53d8\u5f97\u975e\u5e38\u4f4e\u6548\uff0c\u6bd4\u5982\u8981\u60f3\u5728\u6570\u7ec4\u4e2d\u5220\u9664\u3001\u63d2\u5165\u4e00\u4e2a\u6570\u636e\uff0c\u4e3a \u4e86\u4fdd\u8bc1\u8fde\u7eed\u6027\uff0c\u5c31\u9700\u8981\u505a\u5927\u91cf\u7684\u6570\u636e\u642c\u79fb\u5de5\u4f5c\u3002 \u8bf4\u5230\u6570\u636e\u7684\u8bbf\u95ee\uff0c\u90a3\u4f60\u77e5\u9053\u6570\u7ec4\u662f\u5982\u4f55\u5b9e\u73b0\u6839\u636e\u4e0b\u6807\u968f\u673a\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u7684\u5417\uff1f \u6211\u4eec\u62ff\u4e00\u4e2a\u957f\u5ea6\u4e3a 10 \u7684 int \u7c7b\u578b\u7684\u6570\u7ec4 int[] a = new int[10] \u6765\u4e3e\u4f8b\u3002\u5728\u6211\u753b\u7684\u8fd9\u4e2a\u56fe\u4e2d\uff0c\u8ba1\u7b97\u673a\u7ed9\u6570\u7ec4 a[10]\uff0c \u5206\u914d\u4e86\u4e00\u5757\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4 1000\uff5e1039\uff0c\u5176\u4e2d\uff0c\u5185\u5b58\u5757\u7684\u9996\u5730\u5740\u4e3a base_address = 1000\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u8ba1\u7b97\u673a\u4f1a\u7ed9\u6bcf\u4e2a\u5185\u5b58\u5355\u5143\u5206\u914d\u4e00\u4e2a\u5730\u5740\uff0c\u8ba1\u7b97\u673a\u901a\u8fc7\u5730\u5740\u6765\u8bbf\u95ee\u5185\u5b58\u4e2d\u7684\u6570\u636e\u3002\u5f53\u8ba1\u7b97\u673a\u9700\u8981\u968f\u673a\u8bbf\u95ee \u6570\u7ec4\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u65f6\uff0c\u5b83\u4f1a\u9996\u5148\u901a\u8fc7\u4e0b\u9762\u7684\u5bfb\u5740\u516c\u5f0f\uff0c\u8ba1\u7b97\u51fa\u8be5\u5143\u7d20\u5b58\u50a8\u7684\u5185\u5b58\u5730\u5740\uff1a a [ i ] _address = base_address + i * data_type_size \u5176\u4e2d data_type_size \u8868\u793a\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u3002\u6211\u4eec\u4e3e\u7684\u8fd9\u4e2a\u4f8b\u5b50\u91cc\uff0c\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u662f int \u7c7b\u578b\u6570\u636e\uff0c\u6240\u4ee5 data_type_size \u5c31\u4e3a 4 \u4e2a\u5b57\u8282\u3002\u8fd9\u4e2a\u516c\u5f0f\u975e\u5e38\u7b80\u5355\uff0c\u6211\u5c31\u4e0d\u591a\u505a\u89e3\u91ca\u4e86\u3002 **\u8fd9\u91cc\u6211\u8981\u7279\u522b\u7ea0\u6b63\u4e00\u4e2a\u201c\u9519\u8bef\u201d\u3002**\u6211\u5728\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u4f1a\u95ee\u6570\u7ec4\u548c\u94fe\u8868\u7684\u533a\u522b\uff0c\u5f88\u591a\u4eba\u90fd\u56de\u7b54\u8bf4\uff0c\u201c\u94fe\u8868\u9002\u5408\u63d2 \u5165\u3001\u5220\u9664\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(1)\uff1b\u6570\u7ec4\u9002\u5408\u67e5\u627e\uff0c\u67e5\u627e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u201d\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u79cd\u8868\u8ff0\u662f\u4e0d\u51c6\u786e\u7684\u3002\u6570\u7ec4\u662f\u9002\u5408\u67e5\u627e\u64cd\u4f5c\uff0c\u4f46\u662f\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u4e3a O(1)\u3002\u5373\u4fbf\u662f\u6392\u597d\u5e8f\u7684\u6570 \u7ec4\uff0c\u4f60\u7528\u4e8c\u5206**\u67e5\u627e**\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(logn)\u3002\u6240\u4ee5\uff0c\u6b63\u786e\u7684\u8868\u8ff0\u5e94\u8be5\u662f\uff0c\u6570\u7ec4\u652f\u6301**\u968f\u673a\u8bbf\u95ee**\uff0c\u6839\u636e\u4e0b\u6807\u968f\u673a\u8bbf\u95ee \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002","title":"\u5982\u4f55\u5b9e\u73b0\u968f\u673a\u8bbf\u95ee\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_3","text":"\u524d\u9762\u6982\u5ff5\u90e8\u5206\u6211\u4eec\u63d0\u5230\uff0c\u6570\u7ec4\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u6570\u636e\u7684\u8fde\u7eed\u6027\uff0c\u4f1a\u5bfc\u81f4\u63d2\u5165\u3001\u5220\u9664\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u4f4e\u6548\u3002\u73b0\u5728\u6211\u4eec\u5c31\u6765 \u8be6\u7ec6\u8bf4\u4e00\u4e0b\uff0c\u7a76\u7adf\u4e3a\u4ec0\u4e48\u4f1a\u5bfc\u81f4\u4f4e\u6548\uff1f\u53c8\u6709\u54ea\u4e9b\u6539\u8fdb\u65b9\u6cd5\u5462\uff1f","title":"\u4f4e\u6548\u7684\u201c\u63d2\u5165\u201d\u548c\u201c\u5220\u9664\u201d"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_4","text":"\u6211\u4eec\u5148\u6765\u770b\u63d2\u5165\u64cd\u4f5c\u3002 \u5047\u8bbe\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a n\uff0c\u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5c06\u4e00\u4e2a\u6570\u636e\u63d2\u5165\u5230\u6570\u7ec4\u4e2d\u7684\u7b2c k \u4e2a\u4f4d\u7f6e\u3002\u4e3a\u4e86\u628a\u7b2c k \u4e2a\u4f4d\u7f6e\u817e\u51fa\u6765\uff0c\u7ed9 \u65b0\u6765\u7684\u6570\u636e\uff0c\u6211\u4eec\u9700\u8981\u5c06\u7b2c k\uff5en \u8fd9\u90e8\u5206\u7684\u5143\u7d20\u90fd\u987a\u5e8f\u5730\u5f80\u540e\u632a\u4e00\u4f4d\u3002\u90a3\u63d2\u5165\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u4f60\u53ef\u4ee5 \u81ea\u5df1\u5148\u8bd5\u7740\u5206\u6790\u4e00\u4e0b\u3002 \u5982\u679c\u5728\u6570\u7ec4\u7684\u672b\u5c3e\u63d2\u5165\u5143\u7d20\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u79fb\u52a8\u6570\u636e\u4e86\uff0c\u8fd9\u65f6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002\u4f46\u5982\u679c\u5728\u6570\u7ec4\u7684\u5f00\u5934\u63d2\u5165\u5143 \u7d20\uff0c\u90a3\u6240\u6709\u7684\u6570\u636e\u90fd\u9700\u8981\u4f9d\u6b21\u5f80\u540e\u79fb\u52a8\u4e00\u4f4d\uff0c\u6240\u4ee5\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002 \u56e0\u4e3a\u6211\u4eec\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20\u7684\u6982\u7387 \u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a (1+2+\u2026n)/n=O(n)\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u662f\u6709\u5e8f\u7684\uff0c\u6211\u4eec\u5728\u67d0\u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\u65f6\uff0c\u5c31\u5fc5\u987b\u6309\u7167\u521a\u624d\u7684\u65b9\u6cd5\u642c\u79fb k \u4e4b\u540e\u7684\u6570\u636e\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u5e76\u6ca1\u6709\u4efb\u4f55\u89c4\u5f8b\uff0c\u6570\u7ec4\u53ea\u662f\u88ab\u5f53\u4f5c\u4e00\u4e2a\u5b58\u50a8\u6570\u636e\u7684\u96c6\u5408\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8981\u5c06\u67d0 \u4e2a\u6570\u7ec4\u63d2\u5165\u5230\u7b2c k \u4e2a\u4f4d\u7f6e\uff0c\u4e3a\u4e86\u907f\u514d\u5927\u89c4\u6a21\u7684\u6570\u636e\u642c\u79fb\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\uff0c\u76f4\u63a5\u5c06\u7b2c k \u4f4d\u7684\u6570\u636e\u642c \u79fb\u5230\u6570\u7ec4\u5143\u7d20\u7684\u6700\u540e\uff0c\u628a\u65b0\u7684\u5143\u7d20\u76f4\u63a5\u653e\u5165\u7b2c k \u4e2a\u4f4d\u7f6e\u3002 \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u3002\u5047\u8bbe\u6570\u7ec4 a[10] \u4e2d\u5b58\u50a8\u4e86\u5982\u4e0b 5 \u4e2a\u5143\u7d20\uff1aa\uff0cb\uff0cc\uff0cd\uff0ce\u3002 \u6211\u4eec\u73b0\u5728\u9700\u8981\u5c06\u5143\u7d20 x \u63d2\u5165\u5230\u7b2c 3 \u4e2a\u4f4d\u7f6e\u3002\u6211\u4eec\u53ea\u9700\u8981\u5c06 c \u653e\u5165\u5230 a[5]\uff0c\u5c06 a[2] \u8d4b\u503c\u4e3a x \u5373\u53ef\u3002\u6700\u540e\uff0c\u6570\u7ec4\u4e2d\u7684 \u5143\u7d20\u5982\u4e0b\uff1a a\uff0cb\uff0cx\uff0cd\uff0ce\uff0cc\u3002 \u5229\u7528\u8fd9\u79cd\u5904\u7406\u6280\u5de7\uff0c\u5728\u7279\u5b9a\u573a\u666f\u4e0b\uff0c\u5728\u7b2c k \u4e2a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u964d\u4e3a O(1)\u3002\u8fd9\u4e2a\u5904\u7406\u601d\u60f3\u5728\u5feb \u6392\u4e2d\u4e5f\u4f1a\u7528\u5230\uff0c\u6211\u4f1a\u5728\u6392\u5e8f\u90a3\u4e00\u8282\u5177\u4f53\u6765\u8bb2\uff0c\u8fd9\u91cc\u5c31\u8bf4\u5230\u8fd9\u513f\u3002","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_5","text":"\u6211\u4eec\u518d\u6765\u770b\u5220\u9664\u64cd\u4f5c\u3002 \u8ddf\u63d2\u5165\u6570\u636e\u7c7b\u4f3c\uff0c\u5982\u679c\u6211\u4eec\u8981\u5220\u9664\u7b2c k \u4e2a\u4f4d\u7f6e\u7684\u6570\u636e\uff0c\u4e3a\u4e86\u5185\u5b58\u7684\u8fde\u7eed\u6027\uff0c\u4e5f\u9700\u8981\u642c\u79fb\u6570\u636e\uff0c\u4e0d\u7136\u4e2d\u95f4\u5c31\u4f1a\u51fa\u73b0 \u7a7a\u6d1e\uff0c\u5185\u5b58\u5c31\u4e0d\u8fde\u7eed\u4e86\u3002 \u548c\u63d2\u5165\u7c7b\u4f3c\uff0c\u5982\u679c\u5220\u9664\u6570\u7ec4\u672b\u5c3e\u7684\u6570\u636e\uff0c\u5219\u6700\u597d\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\uff1b\u5982\u679c\u5220\u9664\u5f00\u5934\u7684\u6570\u636e\uff0c\u5219\u6700\u574f\u60c5\u51b5\u65f6\u95f4 \u590d\u6742\u5ea6\u4e3a O(n)\uff1b\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u4e3a O(n)\u3002 \u5b9e\u9645\u4e0a\uff0c\u5728\u67d0\u4e9b\u7279\u6b8a\u573a\u666f\u4e0b\uff0c\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u8ffd\u6c42\u6570\u7ec4\u4e2d\u6570\u636e\u7684\u8fde\u7eed\u6027\u3002\u5982\u679c\u6211\u4eec\u5c06\u591a\u6b21\u5220\u9664\u64cd\u4f5c\u96c6\u4e2d\u5728\u4e00\u8d77\u6267 \u884c\uff0c\u5220\u9664\u7684\u6548\u7387\u662f\u4e0d\u662f\u4f1a\u63d0\u9ad8\u5f88\u591a\u5462\uff1f \u6211\u4eec\u7ee7\u7eed\u6765\u770b\u4f8b\u5b50\u3002\u6570\u7ec4 a[10] \u4e2d\u5b58\u50a8\u4e86 8 \u4e2a\u5143\u7d20\uff1aa\uff0cb\uff0cc\uff0cd\uff0ce\uff0cf\uff0cg\uff0ch\u3002\u73b0\u5728\uff0c\u6211\u4eec\u8981\u4f9d\u6b21\u5220\u9664 a\uff0cb\uff0cc \u4e09\u4e2a\u5143\u7d20\u3002 \u4e3a\u4e86\u907f\u514d d\uff0ce\uff0cf\uff0cg\uff0ch \u8fd9\u51e0\u4e2a\u6570\u636e\u4f1a\u88ab\u642c\u79fb\u4e09\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8bb0\u5f55\u4e0b\u5df2\u7ecf\u5220\u9664\u7684\u6570\u636e\u3002\u6bcf\u6b21\u7684\u5220\u9664\u64cd\u4f5c\u5e76\u4e0d\u662f \u771f\u6b63\u5730\u642c\u79fb\u6570\u636e\uff0c\u53ea\u662f\u8bb0\u5f55\u6570\u636e\u5df2\u7ecf\u88ab\u5220\u9664\u3002\u5f53\u6570\u7ec4\u6ca1\u6709\u66f4\u591a\u7a7a\u95f4\u5b58\u50a8\u6570\u636e\u65f6\uff0c\u6211\u4eec\u518d\u89e6\u53d1\u6267\u884c\u4e00\u6b21\u771f\u6b63\u7684\u5220\u9664\u64cd \u4f5c\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u5220\u9664\u64cd\u4f5c\u5bfc\u81f4\u7684\u6570\u636e\u642c\u79fb\u3002 \u5982\u679c\u4f60\u4e86\u89e3 JVM\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e0d\u5c31\u662f JVM \u6807\u8bb0\u6e05\u9664\u5783\u573e\u56de\u6536\u7b97\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u5417\uff1f\u6ca1\u9519\uff0c\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u9b45\u529b \u5c31\u5728\u4e8e\u6b64\uff0c \u5f88\u591a\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u662f\u8981\u53bb\u6b7b\u8bb0\u786c\u80cc\u67d0\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u7b97\u6cd5\uff0c\u800c\u662f\u8981\u5b66\u4e60\u5b83\u80cc\u540e\u7684\u601d\u60f3\u548c\u5904\u7406\u6280\u5de7\uff0c\u8fd9\u4e9b \u4e1c\u897f\u624d\u662f\u6700\u6709\u4ef7\u503c\u7684 \u3002\u5982\u679c\u4f60\u7ec6\u5fc3\u7559\u610f\uff0c\u4e0d\u7ba1\u662f\u5728\u8f6f\u4ef6\u5f00\u53d1\u8fd8\u662f\u67b6\u6784\u8bbe\u8ba1\u4e2d\uff0c\u603b\u80fd\u627e\u5230\u67d0\u4e9b\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u5f71 \u5b50\u3002","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_6","text":"\u4e86\u89e3\u4e86\u6570\u7ec4\u7684\u51e0\u4e2a\u57fa\u672c\u64cd\u4f5c\u540e\uff0c\u6211\u4eec\u6765\u804a\u804a\u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c\u7684\u95ee\u9898\u3002 \u9996\u5148\uff0c\u6211\u8bf7\u4f60\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u6bb5 C \u8bed\u8a00\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\uff1a int main ( int argc , char * argv []){ int i = 0 ; int arr [ 3 ] = { 0 }; for (; i <= 3 ; i ++ ){ arr [ i ] = 0 ; printf ( \"hello world \\n \" ); } return 0 ; } \u4f60\u53d1\u73b0\u95ee\u9898\u4e86\u5417\uff1f\u8fd9\u6bb5\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u5e76\u975e\u662f\u6253\u5370\u4e09\u884c\u201chello word\u201d\uff0c\u800c\u662f\u4f1a\u65e0\u9650\u6253\u5370\u201chello world\u201d\uff0c\u8fd9\u662f\u4e3a\u4ec0\u4e48 \u5462\uff1f \u56e0\u4e3a\uff0c\u6570\u7ec4\u5927\u5c0f\u4e3a 3\uff0ca[0]\uff0ca[1]\uff0ca[2]\uff0c\u800c\u6211\u4eec\u7684\u4ee3\u7801\u56e0\u4e3a\u4e66\u5199\u9519\u8bef\uff0c\u5bfc\u81f4 for \u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u9519\u5199\u4e3a\u4e86 i<=3 \u800c \u975e i<3\uff0c\u6240\u4ee5\u5f53 i=3 \u65f6\uff0c\u6570\u7ec4 a[3] \u8bbf\u95ee\u8d8a\u754c\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u5728 C \u8bed\u8a00\u4e2d\uff0c\u53ea\u8981\u4e0d\u662f\u8bbf\u95ee\u53d7\u9650\u7684\u5185\u5b58\uff0c\u6240\u6709\u7684\u5185\u5b58\u7a7a\u95f4\u90fd\u662f\u53ef\u4ee5\u81ea\u7531\u8bbf\u95ee\u7684\u3002\u6839\u636e\u6211\u4eec\u524d\u9762\u8bb2\u7684\u6570 \u7ec4\u5bfb\u5740\u516c\u5f0f\uff0ca[3] \u4e5f\u4f1a\u88ab\u5b9a\u4f4d\u5230\u67d0\u5757\u4e0d\u5c5e\u4e8e\u6570\u7ec4\u7684\u5185\u5b58\u5730\u5740\u4e0a\uff0c\u800c\u8fd9\u4e2a\u5730\u5740\u6b63\u597d\u662f\u5b58\u50a8\u53d8\u91cf i \u7684\u5185\u5b58\u5730\u5740\uff0c\u90a3\u4e48 a[3]=0 \u5c31\u76f8\u5f53\u4e8e i=0\uff0c\u6240\u4ee5\u5c31\u4f1a\u5bfc\u81f4\u4ee3\u7801\u65e0\u9650\u5faa\u73af\u3002 \u6570\u7ec4\u8d8a\u754c\u5728 C \u8bed\u8a00\u4e2d\u662f\u4e00\u79cd\u672a\u51b3\u884c\u4e3a\uff0c\u5e76\u6ca1\u6709\u89c4\u5b9a\u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c\u65f6\u7f16\u8bd1\u5668\u5e94\u8be5\u5982\u4f55\u5904\u7406\u3002\u56e0\u4e3a\uff0c\u8bbf\u95ee\u6570\u7ec4\u7684\u672c\u8d28 \u5c31\u662f\u8bbf\u95ee\u4e00\u6bb5\u8fde\u7eed\u5185\u5b58\uff0c\u53ea\u8981\u6570\u7ec4\u901a\u8fc7\u504f\u79fb\u8ba1\u7b97\u5f97\u5230\u7684\u5185\u5b58\u5730\u5740\u662f\u53ef\u7528\u7684\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u53ef\u80fd\u4e0d\u4f1a\u62a5\u4efb\u4f55\u9519\u8bef\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u822c\u90fd\u4f1a\u51fa\u73b0\u83ab\u540d\u5176\u5999\u7684\u903b\u8f91\u9519\u8bef\uff0c\u5c31\u50cf\u6211\u4eec\u521a\u521a\u4e3e\u7684\u90a3\u4e2a\u4f8b\u5b50\uff0cdebug \u7684\u96be\u5ea6\u975e\u5e38\u7684\u5927\u3002\u800c\u4e14\uff0c \u5f88\u591a\u8ba1\u7b97\u673a\u75c5\u6bd2\u4e5f\u6b63\u662f\u5229\u7528\u5230\u4e86\u4ee3\u7801\u4e2d\u7684\u6570\u7ec4\u8d8a\u754c\u53ef\u4ee5\u8bbf\u95ee\u975e\u6cd5\u5730\u5740\u7684\u6f0f\u6d1e\uff0c\u6765\u653b\u51fb\u7cfb\u7edf\uff0c\u6240\u4ee5\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4e00\u5b9a \u8981\u8b66\u60d5\u6570\u7ec4\u8d8a\u754c\u3002 \u4f46\u5e76\u975e\u6240\u6709\u7684\u8bed\u8a00\u90fd\u50cf C \u4e00\u6837\uff0c\u628a\u6570\u7ec4\u8d8a\u754c\u68c0\u67e5\u7684\u5de5\u4f5c\u4e22\u7ed9\u7a0b\u5e8f\u5458\u6765\u505a\uff0c\u50cf Java \u672c\u8eab\u5c31\u4f1a\u505a\u8d8a\u754c\u68c0\u67e5\uff0c\u6bd4\u5982\u4e0b\u9762 \u8fd9\u51e0\u884c Java \u4ee3\u7801\uff0c\u5c31\u4f1a\u629b\u51fa java.lang.ArrayIndexOutOfBoundsException\u3002 int [] a = new int [ 3 ]; a [ 3 ] = 10 ;","title":"\u8b66\u60d5\u6570\u7ec4\u7684\u8bbf\u95ee\u8d8a\u754c\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_7","text":"\u9488\u5bf9\u6570\u7ec4\u7c7b\u578b\uff0c\u5f88\u591a\u8bed\u8a00\u90fd\u63d0\u4f9b\u4e86\u5bb9\u5668\u7c7b\uff0c\u6bd4\u5982 Java \u4e2d\u7684 ArrayList\u3001C++ STL \u4e2d\u7684 vector\u3002\u5728\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u4ec0\u4e48 \u65f6\u5019\u9002\u5408\u7528\u6570\u7ec4\uff0c\u4ec0\u4e48\u65f6\u5019\u9002\u5408\u7528\u5bb9\u5668\u5462\uff1f \u8fd9\u91cc\u6211\u62ff Java \u8bed\u8a00\u6765\u4e3e\u4f8b\u3002\u5982\u679c\u4f60\u662f Java \u5de5\u7a0b\u5e08\uff0c\u51e0\u4e4e\u5929\u5929\u90fd\u5728\u7528 ArrayList\uff0c\u5bf9\u5b83\u5e94\u8be5\u975e\u5e38\u719f\u6089\u3002\u90a3\u5b83\u4e0e\u6570\u7ec4 \u76f8\u6bd4\uff0c\u5230\u5e95\u6709\u54ea\u4e9b\u4f18\u52bf\u5462\uff1f \u6211\u4e2a\u4eba\u89c9\u5f97\uff0cArrayList \u6700\u5927\u7684\u4f18\u52bf\u5c31\u662f**\u53ef\u4ee5\u5c06\u5f88\u591a\u6570\u7ec4\u64cd\u4f5c\u7684\u7ec6\u8282\u5c01\u88c5\u8d77\u6765**\u3002\u6bd4\u5982\u524d\u9762\u63d0\u5230\u7684\u6570\u7ec4\u63d2\u5165\u3001\u5220\u9664\u6570 \u636e\u65f6\u9700\u8981\u642c\u79fb\u5176\u4ed6\u6570\u636e\u7b49\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a\u4f18\u52bf\uff0c\u5c31\u662f**\u652f\u6301\u52a8\u6001\u6269\u5bb9**\u3002 \u6570\u7ec4\u672c\u8eab\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u9700\u8981\u9884\u5148\u6307\u5b9a\u5927\u5c0f\uff0c\u56e0\u4e3a\u9700\u8981\u5206\u914d\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u5982\u679c\u6211\u4eec\u7533\u8bf7\u4e86\u5927\u5c0f\u4e3a 10 \u7684\u6570\u7ec4\uff0c\u5f53 \u7b2c 11 \u4e2a\u6570\u636e\u9700\u8981\u5b58\u50a8\u5230\u6570\u7ec4\u4e2d\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u91cd\u65b0\u5206\u914d\u4e00\u5757\u66f4\u5927\u7684\u7a7a\u95f4\uff0c\u5c06\u539f\u6765\u7684\u6570\u636e\u590d\u5236\u8fc7\u53bb\uff0c\u7136\u540e\u518d\u5c06\u65b0\u7684 \u6570\u636e\u63d2\u5165\u3002 \u5982\u679c\u4f7f\u7528 ArrayList\uff0c\u6211\u4eec\u5c31\u5b8c\u5168\u4e0d\u9700\u8981\u5173\u5fc3\u5e95\u5c42\u7684\u6269\u5bb9\u903b\u8f91\uff0cArrayList \u5df2\u7ecf\u5e2e\u6211\u4eec\u5b9e\u73b0\u597d\u4e86\u3002\u6bcf\u6b21\u5b58\u50a8\u7a7a\u95f4\u4e0d\u591f \u7684\u65f6\u5019\uff0c\u5b83\u90fd\u4f1a\u5c06\u7a7a\u95f4\u81ea\u52a8\u6269\u5bb9\u4e3a 1.5 \u500d\u5927\u5c0f\u3002 \u4e0d\u8fc7\uff0c\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u56e0\u4e3a\u6269\u5bb9\u64cd\u4f5c\u6d89\u53ca\u5185\u5b58\u7533\u8bf7\u548c\u6570\u636e\u642c\u79fb\uff0c\u662f\u6bd4\u8f83\u8017\u65f6\u7684\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4e8b\u5148\u80fd\u786e\u5b9a\u9700\u8981\u5b58 \u50a8\u7684\u6570\u636e\u5927\u5c0f\uff0c \u6700\u597d\u5728\u521b\u5efa ArrayList \u7684\u65f6\u5019\u4e8b\u5148\u6307\u5b9a\u6570\u636e\u5927\u5c0f \u3002 \u6bd4\u5982\u6211\u4eec\u8981\u4ece\u6570\u636e\u5e93\u4e2d\u53d6\u51fa 10000 \u6761\u6570\u636e\u653e\u5165 ArrayList\u3002\u6211\u4eec\u770b\u4e0b\u9762\u8fd9\u51e0\u884c\u4ee3\u7801\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4e8b\u5148\u6307 \u5b9a\u6570\u636e\u5927\u5c0f\u53ef\u4ee5\u7701\u6389\u5f88\u591a\u6b21\u5185\u5b58\u7533\u8bf7\u548c\u6570\u636e\u642c\u79fb\u64cd\u4f5c\u3002 ArrayList < User > users = new ArrayList ( 10000 ); for ( int i = 0 ; i < 10000 ; ++ i ) { users . add ( xxx ); } \u4f5c\u4e3a\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7a0b\u8005\uff0c\u662f\u4e0d\u662f\u6570\u7ec4\u5c31\u65e0\u7528\u6b66\u4e4b\u5730\u4e86\u5462\uff1f\u5f53\u7136\u4e0d\u662f\uff0c\u6709\u4e9b\u65f6\u5019\uff0c\u7528\u6570\u7ec4\u4f1a\u66f4\u5408\u9002\u4e9b\uff0c\u6211\u603b\u7ed3\u4e86\u51e0\u70b9\u81ea \u5df1\u7684\u7ecf\u9a8c\u3002 Java ArrayList \u65e0\u6cd5\u5b58\u50a8\u57fa\u672c\u7c7b\u578b\uff0c\u6bd4\u5982 int\u3001long\uff0c\u9700\u8981\u5c01\u88c5\u4e3a Integer\u3001Long \u7c7b\uff0c\u800c Autoboxing\u3001Unboxing \u5219\u6709\u4e00\u5b9a\u7684\u6027\u80fd\u6d88\u8017\uff0c\u6240\u4ee5\u5982\u679c\u7279\u522b\u5173\u6ce8\u6027\u80fd\uff0c\u6216\u8005\u5e0c\u671b\u4f7f\u7528\u57fa\u672c\u7c7b\u578b\uff0c\u5c31\u53ef\u4ee5\u9009\u7528\u6570\u7ec4\u3002 \u5982\u679c\u6570\u636e\u5927\u5c0f\u4e8b\u5148\u5df2\u77e5\uff0c\u5e76\u4e14\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u975e\u5e38\u7b80\u5355\uff0c\u7528\u4e0d\u5230 ArrayList \u63d0\u4f9b\u7684\u5927\u90e8\u5206\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6570\u7ec4\u3002 \u8fd8\u6709\u4e00\u4e2a\u662f\u6211\u4e2a\u4eba\u7684\u559c\u597d\uff0c\u5f53\u8981\u8868\u793a\u591a\u7ef4\u6570\u7ec4\u65f6\uff0c\u7528\u6570\u7ec4\u5f80\u5f80\u4f1a\u66f4\u52a0\u76f4\u89c2\u3002\u6bd4\u5982 Object[][] array\uff1b\u800c\u7528\u5bb9\u5668\u7684\u8bdd\u5219\u9700\u8981\u8fd9\u6837\u5b9a\u4e49\uff1aArrayList > array\u3002 \u6211\u603b\u7ed3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u5f00\u53d1\uff0c\u76f4\u63a5\u4f7f\u7528\u5bb9\u5668\u5c31\u8db3\u591f\u4e86\uff0c\u7701\u65f6\u7701\u529b\u3002\u6bd5\u7adf\u635f\u8017\u4e00\u4e22\u4e22\u6027\u80fd\uff0c\u5b8c\u5168\u4e0d\u4f1a\u5f71\u54cd\u5230\u7cfb\u7edf\u6574\u4f53 \u7684\u6027\u80fd\u3002\u4f46\u5982\u679c\u4f60\u662f\u505a\u4e00\u4e9b\u975e\u5e38\u5e95\u5c42\u7684\u5f00\u53d1\uff0c\u6bd4\u5982\u5f00\u53d1\u7f51\u7edc\u6846\u67b6\uff0c\u6027\u80fd\u7684\u4f18\u5316\u9700\u8981\u505a\u5230\u6781\u81f4\uff0c\u8fd9\u4e2a\u65f6\u5019\u6570\u7ec4\u5c31\u4f1a\u4f18 \u4e8e\u5bb9\u5668\uff0c\u6210\u4e3a\u9996\u9009\u3002","title":"\u5bb9\u5668\u80fd\u5426\u5b8c\u5168\u66ff\u4ee3\u6570\u7ec4\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#0","text":"\u73b0\u5728\u6211\u4eec\u6765\u601d\u8003\u5f00\u7bc7\u7684\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6570\u7ec4\u8981\u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u4ece 1 \u5f00\u59cb\u5462\uff1f \u4ece\u6570\u7ec4\u5b58\u50a8\u7684\u5185\u5b58\u6a21\u578b\u4e0a\u6765\u770b\uff0c\u201c\u4e0b\u6807\u201d\u6700\u786e\u5207\u7684\u5b9a\u4e49\u5e94\u8be5\u662f\u201c\u504f\u79fb\uff08offset\uff09\u201d\u3002\u524d\u9762\u4e5f\u8bb2\u5230\uff0c\u5982\u679c\u7528 a \u6765\u8868\u793a\u6570\u7ec4 \u7684\u9996\u5730\u5740\uff0ca[0] \u5c31\u662f\u504f\u79fb\u4e3a 0 \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u9996\u5730\u5740\uff0ca[k] \u5c31\u8868\u793a\u504f\u79fb k \u4e2a type_size \u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u8ba1\u7b97 a[k] \u7684 \u5185\u5b58\u5730\u5740\u53ea\u9700\u8981\u7528\u8fd9\u4e2a\u516c\u5f0f\uff1a a [ k ] _address = base_address + k * type_size \u4f46\u662f\uff0c\u5982\u679c\u6570\u7ec4\u4ece 1 \u5f00\u59cb\u8ba1\u6570\uff0c\u90a3\u6211\u4eec\u8ba1\u7b97\u6570\u7ec4\u5143\u7d20 a[k] \u7684\u5185\u5b58\u5730\u5740\u5c31\u4f1a\u53d8\u4e3a\uff1a a [ k ] _address = base_address + ( k -1 ) * type_size \u5bf9\u6bd4\u4e24\u4e2a\u516c\u5f0f\uff0c\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u4ece 1 \u5f00\u59cb\u7f16\u53f7\uff0c\u6bcf\u6b21\u968f\u673a\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u90fd\u591a\u4e86\u4e00\u6b21\u51cf\u6cd5\u8fd0\u7b97\uff0c\u5bf9\u4e8e CPU \u6765\u8bf4\uff0c\u5c31 \u662f\u591a\u4e86\u4e00\u6b21\u51cf\u6cd5\u6307\u4ee4\u3002 \u6570\u7ec4\u4f5c\u4e3a\u975e\u5e38\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\uff0c\u901a\u8fc7\u4e0b\u6807\u968f\u673a\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\u53c8\u662f\u5176\u975e\u5e38\u57fa\u7840\u7684\u7f16\u7a0b\u64cd\u4f5c\uff0c\u6548\u7387\u7684\u4f18\u5316\u5c31\u8981\u5c3d\u53ef\u80fd\u505a \u5230\u6781\u81f4\u3002\u6240\u4ee5\u4e3a\u4e86\u51cf\u5c11\u4e00\u6b21\u51cf\u6cd5\u64cd\u4f5c\uff0c\u6570\u7ec4\u9009\u62e9\u4e86\u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u800c\u4e0d\u662f\u4ece 1 \u5f00\u59cb\u3002 \u4e0d\u8fc7\u6211\u8ba4\u4e3a\uff0c\u4e0a\u9762\u89e3\u91ca\u5f97\u518d\u591a\u5176\u5b9e\u90fd\u7b97\u4e0d\u4e0a\u538b\u5012\u6027\u7684\u8bc1\u660e\uff0c\u8bf4\u6570\u7ec4\u8d77\u59cb\u7f16\u53f7\u975e 0 \u5f00\u59cb\u4e0d\u53ef\u3002\u6240\u4ee5\u6211\u89c9\u5f97\u6700\u4e3b\u8981\u7684 \u539f\u56e0\u53ef\u80fd\u662f\u5386\u53f2\u539f\u56e0\u3002 C \u8bed\u8a00\u8bbe\u8ba1\u8005\u7528 0 \u5f00\u59cb\u8ba1\u6570\u6570\u7ec4\u4e0b\u6807\uff0c\u4e4b\u540e\u7684 Java\u3001JavaScript \u7b49\u9ad8\u7ea7\u8bed\u8a00\u90fd\u6548\u4eff\u4e86 C \u8bed\u8a00\uff0c\u6216\u8005\u8bf4\uff0c\u4e3a\u4e86\u5728\u4e00 \u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c11 C \u8bed\u8a00\u7a0b\u5e8f\u5458\u5b66\u4e60 Java \u7684\u5b66\u4e60\u6210\u672c\uff0c\u56e0\u6b64\u7ee7\u7eed\u6cbf\u7528\u4e86\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7684\u4e60\u60ef\u3002\u5b9e\u9645\u4e0a\uff0c\u5f88\u591a\u8bed\u8a00\u4e2d\u6570 \u7ec4\u4e5f\u5e76\u4e0d\u662f\u4ece 0 \u5f00\u59cb\u8ba1\u6570\u7684\uff0c\u6bd4\u5982 Matlab\u3002\u751a\u81f3\u8fd8\u6709\u4e00\u4e9b\u8bed\u8a00\u652f\u6301\u8d1f\u6570\u4e0b\u6807\uff0c\u6bd4\u5982 Python\u3002","title":"\u4e3a\u4ec0\u4e48\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6570\u7ec4\u90fd\u4ece0\u5f00\u59cb\u7f16\u53f7\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/#_8","text":"\u6211\u4eec\u4eca\u5929\u5b66\u4e60\u4e86\u6570\u7ec4\u3002\u5b83\u53ef\u4ee5\u8bf4\u662f\u6700\u57fa\u7840\u3001\u6700\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u4e86\u3002\u6570\u7ec4\u7528\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6765\u5b58\u50a8\u76f8\u540c\u7c7b\u578b\u7684 \u4e00\u7ec4\u6570\u636e\uff0c\u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4f46\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u4e5f\u56e0\u6b64\u53d8\u5f97\u6bd4\u8f83\u4f4e\u6548\uff0c\u5e73\u5747\u60c5\u51b5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u5728\u5e73\u65f6\u7684\u4e1a\u52a1\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u7684\u5bb9\u5668\u7c7b\uff0c\u4f46\u662f\uff0c\u5982\u679c\u662f\u7279\u522b\u5e95\u5c42\u7684\u5f00\u53d1\uff0c\u76f4\u63a5\u4f7f\u7528 \u6570\u7ec4\u53ef\u80fd\u4f1a\u66f4\u5408\u9002\u3002","title":"\u5185\u5bb9\u5c0f\u7ed3"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/","text":"\u6808 \u00b6 \u6808 \u5982\u4f55\u7406\u89e3\u201c\u6808\u201d\uff1f \u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u201c\u6808\u201d\uff1f \u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u987a\u5e8f\u6808 \u6808\u7684\u5e94\u7528 \u6808\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u5e94\u7528 \u6808\u5728\u8868\u8fbe\u5f0f\u6c42\u503c\u4e2d\u7684\u5e94\u7528 \u6808\u5728\u62ec\u53f7\u5339\u914d\u4e2d\u7684\u5e94\u7528 \u5982\u4f55\u5b9e\u73b0\u6d4f\u89c8\u5668\u7684\u524d\u8fdb\u548c\u540e\u9000\u529f\u80fd\uff1f \u5185\u5bb9\u5c0f\u7ed3 \u5982\u4f55\u7406\u89e3\u201c\u6808\u201d\uff1f \u00b6 \u5173\u4e8e\u201c\u6808\u201d\uff0c\u6211\u6709\u4e00\u4e2a\u975e\u5e38\u8d34\u5207\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u4e00\u645e\u53e0\u5728\u4e00\u8d77\u7684\u76d8\u5b50\u3002\u6211\u4eec\u5e73\u65f6\u653e\u76d8\u5b50\u7684\u65f6\u5019\uff0c\u90fd\u662f\u4ece\u4e0b\u5f80\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u653e\uff1b\u53d6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e5f\u662f\u4ece\u4e0a\u5f80\u4e0b\u4e00\u4e2a\u4e00\u4e2a\u5730\u4f9d\u6b21\u53d6\uff0c\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4efb\u610f\u62bd\u51fa\u3002 \u540e\u8fdb\u8005\u5148\u51fa\uff0c\u5148\u8fdb\u8005\u540e\u51fa\uff0c\u8fd9\u5c31\u662f\u5178\u578b\u7684\u201c\u6808\u201d\u7ed3\u6784 \u3002 \u4ece\u6808\u7684\u64cd\u4f5c\u7279\u6027\u4e0a\u6765\u770b\uff0c \u6808\u662f\u4e00\u79cd\u201c\u64cd\u4f5c\u53d7\u9650\u201d\u7684\u7ebf\u6027\u8868 \uff0c\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u63d2\u5165\u548c\u5220\u9664\u6570\u636e\u3002 \u6211\u7b2c\u4e00\u6b21\u63a5\u89e6\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u5c31\u5bf9\u5b83\u5b58\u5728\u7684\u610f\u4e49\u4ea7\u751f\u4e86\u5f88\u5927\u7684\u7591\u60d1\u3002\u56e0\u4e3a\u6211\u89c9\u5f97\uff0c\u76f8\u6bd4\u6570\u7ec4\u548c\u94fe\u8868\uff0c\u6808\u5e26\u7ed9\u6211\u7684\u53ea\u6709\u9650\u5236\uff0c\u5e76\u6ca1\u6709\u4efb\u4f55\u4f18\u52bf\u3002\u90a3\u6211\u76f4\u63a5\u4f7f\u7528\u6570\u7ec4\u6216\u8005\u94fe\u8868\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528\u8fd9\u4e2a\u201c\u64cd\u4f5c\u53d7\u9650\u201d\u7684\u201c\u6808\u201d\u5462\uff1f \u4e8b\u5b9e\u4e0a\uff0c\u4ece\u529f\u80fd\u4e0a\u6765\u8bf4\uff0c\u6570\u7ec4\u6216\u94fe\u8868\u786e\u5b9e\u53ef\u4ee5\u66ff\u4ee3\u6808\uff0c\u4f46\u4f60\u8981\u77e5\u9053\uff0c\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u662f\u5bf9\u7279\u5b9a\u573a\u666f\u7684\u62bd\u8c61\uff0c\u800c\u4e14\uff0c\u6570\u7ec4\u6216\u94fe\u8868\u66b4\u9732\u4e86\u592a\u591a\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u64cd\u4f5c\u4e0a\u7684\u786e\u7075\u6d3b\u81ea\u7531\uff0c\u4f46\u4f7f\u7528\u65f6\u5c31\u6bd4\u8f83\u4e0d\u53ef\u63a7\uff0c\u81ea\u7136\u4e5f\u5c31\u66f4\u5bb9\u6613\u51fa\u9519\u3002 \u5f53\u67d0\u4e2a\u6570\u636e\u96c6\u5408\u53ea\u6d89\u53ca\u5728\u4e00\u7aef\u63d2\u5165\u548c\u5220\u9664\u6570\u636e\uff0c\u5e76\u4e14\u6ee1\u8db3\u540e\u8fdb\u5148\u51fa\u3001\u5148\u8fdb\u540e\u51fa\u7684\u7279\u6027\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u9996\u9009\u201c\u6808\u201d\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u201c\u6808\u201d\uff1f \u00b6 \u5b9e\u9645\u4e0a\uff0c\u6808\u65e2\u53ef\u4ee5\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u7528\u94fe\u8868\u6765\u5b9e\u73b0\u3002\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u6808\uff0c\u6211\u4eec\u53eb\u4f5c**\u987a\u5e8f\u6808**\uff0c\u7528\u94fe\u8868\u5b9e\u73b0\u7684\u6808\uff0c\u6211\u4eec\u53eb\u4f5c**\u94fe\u5f0f\u6808**\u3002 \u8bf7\u8865\u5145\u5b9e\u73b0\u4e24\u79cd\u6808\uff01\uff01\uff01\uff01\uff01\uff01 # \u6570\u7ec4\u5b9e\u73b0\u7684\u6808\uff0c\u4e0d\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7248\u672c class Array ( object ): def __init__ ( self , size ): self . size = size self . _items = [ None ] * size def __setitem__ ( self , key , value ): self . _items [ key ] = value def __getitem__ ( self , key ): return self . _items [ key ] def len ( self ): return self . size class ArrayStack ( Array ): def __init__ ( self , size ): self . size = size self . _items = Array ( size ) self . top = - 1 def __len__ ( self ): return self . size def is_empty ( self ): return True if self . top < 0 else False def push ( self , value ): if self . top >= len ( self ): raise Exception ( 'stack is full' ) self . top += 1 self . _items [ self . top ] = value def pop ( self ): if self . is_empty (): raise Exception ( 'stack is empty' ) v = self . _items [ self . top ] self . _items [ self . top ] = None self . top -= 1 return v \u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u987a\u5e8f\u6808 \u00b6 \u521a\u624d\u90a3\u4e2a\u57fa\u4e8e\u6570\u7ec4\u5b9e\u73b0\u7684\u6808\uff0c\u662f\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6808\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u521d\u59cb\u5316\u6808\u65f6\u9700\u8981\u4e8b\u5148\u6307\u5b9a\u6808\u7684\u5927\u5c0f\u3002\u5f53\u6808\u6ee1\u4e4b\u540e\uff0c\u5c31\u65e0\u6cd5\u518d\u5f80\u6808\u91cc\u6dfb\u52a0\u6570\u636e\u4e86\u3002\u5c3d\u7ba1\u94fe\u5f0f\u6808\u7684\u5927\u5c0f\u4e0d\u53d7\u9650\uff0c\u4f46\u8981\u5b58\u50a8 next \u6307\u9488\uff0c\u5185\u5b58\u6d88\u8017\u76f8\u5bf9\u8f83\u591a\u3002\u90a3\u6211\u4eec\u5982\u4f55\u57fa\u4e8e\u6570\u7ec4\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u6808\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u52a8\u6001\u6269\u5bb9\u7684\u6570\u7ec4\u6765\u5b9e\u73b0\uff0c\u5f53\u6570\u7ec4\u7a7a\u95f4\u4e0d\u591f\u65f6\uff0c\u6211\u4eec\u5c31\u91cd\u65b0\u7533\u8bf7\u4e00\u5757\u66f4\u5927\u7684\u5185\u5b58\uff0c\u5c06\u539f\u6765\u6570\u7ec4\u4e2d\u6570\u636e\u7edf\u7edf\u62f7\u8d1d\u8fc7\u53bb\u3002\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u6570\u7ec4\u3002 \u6808\u7684\u5e94\u7528 \u00b6 \u6808\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u5e94\u7528 \u00b6 \u6211\u4eec\u77e5\u9053\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7ed9\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e86\u4e00\u5757\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd9\u5757\u5185\u5b58\u88ab\u7ec4\u7ec7\u6210\u201c\u6808\u201d\u8fd9\u79cd\u7ed3\u6784, \u7528\u6765\u5b58\u50a8\u51fd\u6570\u8c03\u7528\u65f6\u7684\u4e34\u65f6\u53d8\u91cf\u3002\u6bcf\u8fdb\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5c31\u4f1a\u5c06\u4e34\u65f6\u53d8\u91cf\u4f5c\u4e3a\u4e00\u4e2a\u6808\u5e27\u5165\u6808\uff0c\u5f53\u88ab\u8c03\u7528\u51fd\u6570\u6267\u884c\u5b8c\u6210\uff0c\u8fd4\u56de\u4e4b\u540e\uff0c\u5c06\u8fd9\u4e2a\u51fd\u6570\u5bf9\u5e94\u7684\u6808\u5e27\u51fa\u6808\u3002\u4e3a\u4e86\u8ba9\u4f60\u66f4\u597d\u5730\u7406\u89e3\uff0c\u6211\u4eec\u4e00\u5757\u6765\u770b\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u3002 int main () { int a = 1 ; int ret = 0 ; int res = 0 ; ret = add ( 3 , 5 ); res = a + ret ; printf ( \"%d\" , res ); reuturn 0 ; } int add ( int x , int y ) { int sum = 0 ; sum = x + y ; return sum ; } \u4ece\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0cmain() \u51fd\u6570\u8c03\u7528\u4e86 add() \u51fd\u6570\uff0c\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u4e14\u4e0e\u4e34\u65f6\u53d8\u91cf a \u76f8\u52a0\uff0c\u6700\u540e\u6253\u5370 res \u7684\u503c\u3002\u4e3a\u4e86\u8ba9\u4f60\u6e05\u6670\u5730\u770b\u5230\u8fd9\u4e2a\u8fc7\u7a0b\u5bf9\u5e94\u7684\u51fd\u6570\u6808\u91cc\u51fa\u6808\u3001\u5165\u6808\u7684\u64cd\u4f5c\uff0c\u6211\u753b\u4e86\u4e00\u5f20\u56fe\u3002\u56fe\u4e2d\u663e\u793a\u7684\u662f\uff0c\u5728\u6267\u884c\u5230 add() \u51fd\u6570\u65f6\uff0c\u51fd\u6570\u8c03\u7528\u6808\u7684\u60c5\u51b5\u3002 \u6808\u5728\u8868\u8fbe\u5f0f\u6c42\u503c\u4e2d\u7684\u5e94\u7528 \u00b6 \u6211\u4eec\u518d\u6765\u770b\u6808\u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u5e94\u7528\u573a\u666f\uff0c\u7f16\u8bd1\u5668\u5982\u4f55\u5229\u7528\u6808\u6765\u5b9e\u73b0**\u8868\u8fbe\u5f0f\u6c42\u503c**\u3002 \u4e3a\u4e86\u65b9\u4fbf\u89e3\u91ca\uff0c\u6211\u5c06\u7b97\u672f\u8868\u8fbe\u5f0f\u7b80\u5316\u4e3a\u53ea\u5305\u542b\u52a0\u51cf\u4e58\u9664\u56db\u5219\u8fd0\u7b97\uff0c\u6bd4\u5982\uff1a34+13*9+44-12/3\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u56db\u5219\u8fd0\u7b97\uff0c\u6211\u4eec\u4eba\u8111\u53ef\u4ee5\u5f88\u5feb\u6c42\u89e3\u51fa\u7b54\u6848\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u7406\u89e3\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u672c\u8eab\u5c31\u662f\u4e2a\u633a\u96be\u7684\u4e8b\u513f\u3002\u5982\u679c\u6362\u4f5c\u4f60\uff0c\u8ba9\u4f60\u6765\u5b9e\u73b0\u8fd9\u6837\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u529f\u80fd\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\u5462\uff1f \u5b9e\u9645\u4e0a\uff0c\u7f16\u8bd1\u5668\u5c31\u662f\u901a\u8fc7\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u7684\u3002\u5176\u4e2d\u4e00\u4e2a\u4fdd\u5b58\u64cd\u4f5c\u6570\u7684\u6808\uff0c\u53e6\u4e00\u4e2a\u662f\u4fdd\u5b58\u8fd0\u7b97\u7b26\u7684\u6808\u3002\u6211\u4eec\u4ece\u5de6\u5411\u53f3\u904d\u5386\u8868\u8fbe\u5f0f\uff0c\u5f53\u9047\u5230\u6570\u5b57\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u538b\u5165\u64cd\u4f5c\u6570\u6808\uff1b\u5f53\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u5c31\u4e0e\u8fd0\u7b97\u7b26\u6808\u7684\u6808\u9876\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u6bd4\u8fd0\u7b97\u7b26\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u9ad8\uff0c\u5c31\u5c06\u5f53\u524d\u8fd0\u7b97\u7b26\u538b\u5165\u6808\uff1b\u5982\u679c\u6bd4\u8fd0\u7b97\u7b26\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4f4e\u6216\u8005\u76f8\u540c\uff0c\u4ece\u8fd0\u7b97\u7b26\u6808\u4e2d\u53d6\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u4ece\u64cd\u4f5c\u6570\u6808\u7684\u6808\u9876\u53d6 2 \u4e2a\u64cd\u4f5c\u6570\uff0c\u7136\u540e\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u628a\u8ba1\u7b97\u5b8c\u7684\u7ed3\u679c\u538b\u5165\u64cd\u4f5c\u6570\u6808\uff0c\u7ee7\u7eed\u6bd4\u8f83\u3002 \u6211\u5c06 3+5*8-6 \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u8fc7\u7a0b\u753b\u6210\u4e86\u4e00\u5f20\u56fe\uff0c\u4f60\u53ef\u4ee5\u7ed3\u5408\u56fe\u6765\u7406\u89e3\u6211\u521a\u8bb2\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002 \u8fd9\u6837\u7528\u4e24\u4e2a\u6808\u6765\u89e3\u51b3\u7684\u601d\u8def\u662f\u4e0d\u662f\u975e\u5e38\u5de7\u5999\uff1f\u4f60\u6709\u6ca1\u6709\u60f3\u5230\u5462\uff1f \u6808\u5728\u62ec\u53f7\u5339\u914d\u4e2d\u7684\u5e94\u7528 \u00b6 \u9664\u4e86\u7528\u6808\u6765\u5b9e\u73b0\u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9\u6808\u6765\u68c0\u67e5\u8868\u8fbe\u5f0f\u4e2d\u7684\u62ec\u53f7\u662f\u5426\u5339\u914d \u6211\u4eec\u540c\u6837\u7b80\u5316\u4e00\u4e0b\u80cc\u666f\u3002\u6211\u4eec\u5047\u8bbe\u8868\u8fbe\u5f0f\u4e2d\u53ea\u5305\u542b\u4e09\u79cd\u62ec\u53f7\uff0c\u5706\u62ec\u53f7 ()\u3001\u65b9\u62ec\u53f7 [] \u548c\u82b1\u62ec\u53f7{}\uff0c\u5e76\u4e14\u5b83\u4eec\u53ef\u4ee5\u4efb\u610f\u5d4c\u5957\u3002\u6bd4\u5982\uff0c{[{}]}\u6216 [{()}([])] \u7b49\u90fd\u4e3a\u5408\u6cd5\u683c\u5f0f\uff0c\u800c{[}()] \u6216 [({)] \u4e3a\u4e0d\u5408\u6cd5\u7684\u683c\u5f0f\u3002\u90a3\u6211\u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b\u4e09\u79cd\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5982\u4f55\u68c0\u67e5\u5b83\u662f\u5426\u5408\u6cd5\u5462\uff1f \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u6808\u6765\u89e3\u51b3\u3002\u6211\u4eec\u7528\u6808\u6765\u4fdd\u5b58\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\uff0c\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u626b\u63cf\u5b57\u7b26\u4e32\u3002\u5f53\u626b\u63cf\u5230\u5de6\u62ec\u53f7\u65f6\uff0c\u5219\u5c06\u5176\u538b\u5165\u6808\u4e2d\uff1b\u5f53\u626b\u63cf\u5230\u53f3\u62ec\u53f7\u65f6\uff0c\u4ece\u6808\u9876\u53d6\u51fa\u4e00\u4e2a\u5de6\u62ec\u53f7\u3002\u5982\u679c\u80fd\u591f\u5339\u914d\uff0c\u6bd4\u5982\u201c(\u201d\u8ddf\u201c)\u201d\u5339\u914d\uff0c\u201c[\u201d\u8ddf\u201c]\u201d\u5339\u914d\uff0c\u201c{\u201d\u8ddf\u201c}\u201d\u5339\u914d\uff0c\u5219\u7ee7\u7eed\u626b\u63cf\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u626b\u63cf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u4e0d\u80fd\u914d\u5bf9\u7684\u53f3\u62ec\u53f7\uff0c\u6216\u8005\u6808\u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u5219\u8bf4\u660e\u4e3a\u975e\u6cd5\u683c\u5f0f\u3002 \u5f53\u6240\u6709\u7684\u62ec\u53f7\u90fd\u626b\u63cf\u5b8c\u6210\u4e4b\u540e\uff0c\u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u5b57\u7b26\u4e32\u4e3a\u5408\u6cd5\u683c\u5f0f\uff1b\u5426\u5219\uff0c\u8bf4\u660e\u6709\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\uff0c\u4e3a\u975e\u6cd5\u683c\u5f0f\u3002 \u5982\u4f55\u5b9e\u73b0\u6d4f\u89c8\u5668\u7684\u524d\u8fdb\u548c\u540e\u9000\u529f\u80fd\uff1f \u00b6 \u5982\u4f55\u5b9e\u73b0\u6d4f\u89c8\u5668\u7684\u524d\u8fdb\u3001\u540e\u9000\u529f\u80fd\uff1f\u5176\u5b9e\uff0c\u7528\u4e24\u4e2a\u6808\u5c31\u53ef\u4ee5\u975e\u5e38\u5b8c\u7f8e\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u6808\uff0cX \u548c Y\uff0c\u6211\u4eec\u628a\u9996\u6b21\u6d4f\u89c8\u7684\u9875\u9762\u4f9d\u6b21\u538b\u5165\u6808 X\uff0c\u5f53\u70b9\u51fb\u540e\u9000\u6309\u94ae\u65f6\uff0c\u518d\u4f9d\u6b21\u4ece\u6808 X \u4e2d\u51fa\u6808\uff0c\u5e76\u5c06\u51fa\u6808\u7684\u6570\u636e\u4f9d\u6b21\u653e\u5165\u6808 Y\u3002\u5f53\u6211\u4eec\u70b9\u51fb\u524d\u8fdb\u6309\u94ae\u65f6\uff0c\u6211\u4eec\u4f9d\u6b21\u4ece\u6808 Y \u4e2d\u53d6\u51fa\u6570\u636e\uff0c\u653e\u5165\u6808 X \u4e2d\u3002\u5f53\u6808 X \u4e2d\u6ca1\u6709\u6570\u636e\u65f6\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709\u9875\u9762\u53ef\u4ee5\u7ee7\u7eed\u540e\u9000\u6d4f\u89c8\u4e86\u3002\u5f53\u6808 Y \u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709\u9875\u9762\u53ef\u4ee5\u70b9\u51fb\u524d\u8fdb\u6309\u94ae\u6d4f\u89c8\u4e86\u3002 \u6bd4\u5982\u4f60\u987a\u5e8f\u67e5\u770b\u4e86 a\uff0cb\uff0cc \u4e09\u4e2a\u9875\u9762\uff0c\u6211\u4eec\u5c31\u4f9d\u6b21\u628a a\uff0cb\uff0cc \u538b\u5165\u6808\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u4e24\u4e2a\u6808\u7684\u6570\u636e\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u5f53\u4f60\u901a\u8fc7\u6d4f\u89c8\u5668\u7684\u540e\u9000\u6309\u94ae\uff0c\u4ece\u9875\u9762 c \u540e\u9000\u5230\u9875\u9762 a \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u4f9d\u6b21\u628a c \u548c b \u4ece\u6808 X \u4e2d\u5f39\u51fa\uff0c\u5e76\u4e14\u4f9d\u6b21\u653e\u5165\u5230\u6808 Y\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u4e24\u4e2a\u6808\u7684\u6570\u636e\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u8fd9\u4e2a\u65f6\u5019\u4f60\u53c8\u60f3\u770b\u9875\u9762 b\uff0c\u4e8e\u662f\u4f60\u53c8\u70b9\u51fb\u524d\u8fdb\u6309\u94ae\u56de\u5230 b \u9875\u9762\uff0c\u6211\u4eec\u5c31\u628a b \u518d\u4ece\u6808 Y \u4e2d\u51fa\u6808\uff0c\u653e\u5165\u6808 X \u4e2d\u3002\u6b64\u65f6\u4e24\u4e2a\u6808\u7684\u6570\u636e\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u5185\u5bb9\u5c0f\u7ed3 \u00b6 \u6211\u4eec\u6765\u56de\u987e\u4e00\u4e0b\u4eca\u5929\u8bb2\u7684\u5185\u5bb9\u3002\u6808\u662f\u4e00\u79cd\u64cd\u4f5c\u53d7\u9650\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ea\u652f\u6301\u5165\u6808\u548c\u51fa\u6808\u64cd\u4f5c\u3002\u540e\u8fdb\u5148\u51fa\u662f\u5b83\u6700\u5927\u7684\u7279\u70b9\u3002\u6808\u65e2\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u94fe\u8868\u6765\u5b9e\u73b0\u3002\u4e0d\u7ba1\u57fa\u4e8e\u6570\u7ec4\u8fd8\u662f\u94fe\u8868\uff0c\u5165\u6808\u3001\u51fa\u6808\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(1)\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u8bb2\u4e86\u4e00\u79cd\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u987a\u5e8f\u6808\uff0c\u4f60\u9700\u8981\u91cd\u70b9\u638c\u63e1\u5b83\u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\u3002","title":"\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_1","text":"\u6808 \u5982\u4f55\u7406\u89e3\u201c\u6808\u201d\uff1f \u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u201c\u6808\u201d\uff1f \u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u987a\u5e8f\u6808 \u6808\u7684\u5e94\u7528 \u6808\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u5e94\u7528 \u6808\u5728\u8868\u8fbe\u5f0f\u6c42\u503c\u4e2d\u7684\u5e94\u7528 \u6808\u5728\u62ec\u53f7\u5339\u914d\u4e2d\u7684\u5e94\u7528 \u5982\u4f55\u5b9e\u73b0\u6d4f\u89c8\u5668\u7684\u524d\u8fdb\u548c\u540e\u9000\u529f\u80fd\uff1f \u5185\u5bb9\u5c0f\u7ed3","title":"\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_2","text":"\u5173\u4e8e\u201c\u6808\u201d\uff0c\u6211\u6709\u4e00\u4e2a\u975e\u5e38\u8d34\u5207\u7684\u4f8b\u5b50\uff0c\u5c31\u662f\u4e00\u645e\u53e0\u5728\u4e00\u8d77\u7684\u76d8\u5b50\u3002\u6211\u4eec\u5e73\u65f6\u653e\u76d8\u5b50\u7684\u65f6\u5019\uff0c\u90fd\u662f\u4ece\u4e0b\u5f80\u4e0a\u4e00\u4e2a\u4e00\u4e2a\u653e\uff1b\u53d6\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e5f\u662f\u4ece\u4e0a\u5f80\u4e0b\u4e00\u4e2a\u4e00\u4e2a\u5730\u4f9d\u6b21\u53d6\uff0c\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4efb\u610f\u62bd\u51fa\u3002 \u540e\u8fdb\u8005\u5148\u51fa\uff0c\u5148\u8fdb\u8005\u540e\u51fa\uff0c\u8fd9\u5c31\u662f\u5178\u578b\u7684\u201c\u6808\u201d\u7ed3\u6784 \u3002 \u4ece\u6808\u7684\u64cd\u4f5c\u7279\u6027\u4e0a\u6765\u770b\uff0c \u6808\u662f\u4e00\u79cd\u201c\u64cd\u4f5c\u53d7\u9650\u201d\u7684\u7ebf\u6027\u8868 \uff0c\u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u63d2\u5165\u548c\u5220\u9664\u6570\u636e\u3002 \u6211\u7b2c\u4e00\u6b21\u63a5\u89e6\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u5c31\u5bf9\u5b83\u5b58\u5728\u7684\u610f\u4e49\u4ea7\u751f\u4e86\u5f88\u5927\u7684\u7591\u60d1\u3002\u56e0\u4e3a\u6211\u89c9\u5f97\uff0c\u76f8\u6bd4\u6570\u7ec4\u548c\u94fe\u8868\uff0c\u6808\u5e26\u7ed9\u6211\u7684\u53ea\u6709\u9650\u5236\uff0c\u5e76\u6ca1\u6709\u4efb\u4f55\u4f18\u52bf\u3002\u90a3\u6211\u76f4\u63a5\u4f7f\u7528\u6570\u7ec4\u6216\u8005\u94fe\u8868\u4e0d\u5c31\u597d\u4e86\u5417\uff1f\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528\u8fd9\u4e2a\u201c\u64cd\u4f5c\u53d7\u9650\u201d\u7684\u201c\u6808\u201d\u5462\uff1f \u4e8b\u5b9e\u4e0a\uff0c\u4ece\u529f\u80fd\u4e0a\u6765\u8bf4\uff0c\u6570\u7ec4\u6216\u94fe\u8868\u786e\u5b9e\u53ef\u4ee5\u66ff\u4ee3\u6808\uff0c\u4f46\u4f60\u8981\u77e5\u9053\uff0c\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u662f\u5bf9\u7279\u5b9a\u573a\u666f\u7684\u62bd\u8c61\uff0c\u800c\u4e14\uff0c\u6570\u7ec4\u6216\u94fe\u8868\u66b4\u9732\u4e86\u592a\u591a\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u64cd\u4f5c\u4e0a\u7684\u786e\u7075\u6d3b\u81ea\u7531\uff0c\u4f46\u4f7f\u7528\u65f6\u5c31\u6bd4\u8f83\u4e0d\u53ef\u63a7\uff0c\u81ea\u7136\u4e5f\u5c31\u66f4\u5bb9\u6613\u51fa\u9519\u3002 \u5f53\u67d0\u4e2a\u6570\u636e\u96c6\u5408\u53ea\u6d89\u53ca\u5728\u4e00\u7aef\u63d2\u5165\u548c\u5220\u9664\u6570\u636e\uff0c\u5e76\u4e14\u6ee1\u8db3\u540e\u8fdb\u5148\u51fa\u3001\u5148\u8fdb\u540e\u51fa\u7684\u7279\u6027\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u9996\u9009\u201c\u6808\u201d\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u3002","title":"\u5982\u4f55\u7406\u89e3\u201c\u6808\u201d\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_3","text":"\u5b9e\u9645\u4e0a\uff0c\u6808\u65e2\u53ef\u4ee5\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u7528\u94fe\u8868\u6765\u5b9e\u73b0\u3002\u7528\u6570\u7ec4\u5b9e\u73b0\u7684\u6808\uff0c\u6211\u4eec\u53eb\u4f5c**\u987a\u5e8f\u6808**\uff0c\u7528\u94fe\u8868\u5b9e\u73b0\u7684\u6808\uff0c\u6211\u4eec\u53eb\u4f5c**\u94fe\u5f0f\u6808**\u3002 \u8bf7\u8865\u5145\u5b9e\u73b0\u4e24\u79cd\u6808\uff01\uff01\uff01\uff01\uff01\uff01 # \u6570\u7ec4\u5b9e\u73b0\u7684\u6808\uff0c\u4e0d\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7248\u672c class Array ( object ): def __init__ ( self , size ): self . size = size self . _items = [ None ] * size def __setitem__ ( self , key , value ): self . _items [ key ] = value def __getitem__ ( self , key ): return self . _items [ key ] def len ( self ): return self . size class ArrayStack ( Array ): def __init__ ( self , size ): self . size = size self . _items = Array ( size ) self . top = - 1 def __len__ ( self ): return self . size def is_empty ( self ): return True if self . top < 0 else False def push ( self , value ): if self . top >= len ( self ): raise Exception ( 'stack is full' ) self . top += 1 self . _items [ self . top ] = value def pop ( self ): if self . is_empty (): raise Exception ( 'stack is empty' ) v = self . _items [ self . top ] self . _items [ self . top ] = None self . top -= 1 return v","title":"\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u201c\u6808\u201d\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_4","text":"\u521a\u624d\u90a3\u4e2a\u57fa\u4e8e\u6570\u7ec4\u5b9e\u73b0\u7684\u6808\uff0c\u662f\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6808\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u521d\u59cb\u5316\u6808\u65f6\u9700\u8981\u4e8b\u5148\u6307\u5b9a\u6808\u7684\u5927\u5c0f\u3002\u5f53\u6808\u6ee1\u4e4b\u540e\uff0c\u5c31\u65e0\u6cd5\u518d\u5f80\u6808\u91cc\u6dfb\u52a0\u6570\u636e\u4e86\u3002\u5c3d\u7ba1\u94fe\u5f0f\u6808\u7684\u5927\u5c0f\u4e0d\u53d7\u9650\uff0c\u4f46\u8981\u5b58\u50a8 next \u6307\u9488\uff0c\u5185\u5b58\u6d88\u8017\u76f8\u5bf9\u8f83\u591a\u3002\u90a3\u6211\u4eec\u5982\u4f55\u57fa\u4e8e\u6570\u7ec4\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u6808\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u52a8\u6001\u6269\u5bb9\u7684\u6570\u7ec4\u6765\u5b9e\u73b0\uff0c\u5f53\u6570\u7ec4\u7a7a\u95f4\u4e0d\u591f\u65f6\uff0c\u6211\u4eec\u5c31\u91cd\u65b0\u7533\u8bf7\u4e00\u5757\u66f4\u5927\u7684\u5185\u5b58\uff0c\u5c06\u539f\u6765\u6570\u7ec4\u4e2d\u6570\u636e\u7edf\u7edf\u62f7\u8d1d\u8fc7\u53bb\u3002\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u6570\u7ec4\u3002","title":"\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u987a\u5e8f\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_5","text":"","title":"\u6808\u7684\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_6","text":"\u6211\u4eec\u77e5\u9053\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7ed9\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e86\u4e00\u5757\u72ec\u7acb\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd9\u5757\u5185\u5b58\u88ab\u7ec4\u7ec7\u6210\u201c\u6808\u201d\u8fd9\u79cd\u7ed3\u6784, \u7528\u6765\u5b58\u50a8\u51fd\u6570\u8c03\u7528\u65f6\u7684\u4e34\u65f6\u53d8\u91cf\u3002\u6bcf\u8fdb\u5165\u4e00\u4e2a\u51fd\u6570\uff0c\u5c31\u4f1a\u5c06\u4e34\u65f6\u53d8\u91cf\u4f5c\u4e3a\u4e00\u4e2a\u6808\u5e27\u5165\u6808\uff0c\u5f53\u88ab\u8c03\u7528\u51fd\u6570\u6267\u884c\u5b8c\u6210\uff0c\u8fd4\u56de\u4e4b\u540e\uff0c\u5c06\u8fd9\u4e2a\u51fd\u6570\u5bf9\u5e94\u7684\u6808\u5e27\u51fa\u6808\u3002\u4e3a\u4e86\u8ba9\u4f60\u66f4\u597d\u5730\u7406\u89e3\uff0c\u6211\u4eec\u4e00\u5757\u6765\u770b\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u8fc7\u7a0b\u3002 int main () { int a = 1 ; int ret = 0 ; int res = 0 ; ret = add ( 3 , 5 ); res = a + ret ; printf ( \"%d\" , res ); reuturn 0 ; } int add ( int x , int y ) { int sum = 0 ; sum = x + y ; return sum ; } \u4ece\u4ee3\u7801\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0cmain() \u51fd\u6570\u8c03\u7528\u4e86 add() \u51fd\u6570\uff0c\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u4e14\u4e0e\u4e34\u65f6\u53d8\u91cf a \u76f8\u52a0\uff0c\u6700\u540e\u6253\u5370 res \u7684\u503c\u3002\u4e3a\u4e86\u8ba9\u4f60\u6e05\u6670\u5730\u770b\u5230\u8fd9\u4e2a\u8fc7\u7a0b\u5bf9\u5e94\u7684\u51fd\u6570\u6808\u91cc\u51fa\u6808\u3001\u5165\u6808\u7684\u64cd\u4f5c\uff0c\u6211\u753b\u4e86\u4e00\u5f20\u56fe\u3002\u56fe\u4e2d\u663e\u793a\u7684\u662f\uff0c\u5728\u6267\u884c\u5230 add() \u51fd\u6570\u65f6\uff0c\u51fd\u6570\u8c03\u7528\u6808\u7684\u60c5\u51b5\u3002","title":"\u6808\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u7684\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_7","text":"\u6211\u4eec\u518d\u6765\u770b\u6808\u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u5e94\u7528\u573a\u666f\uff0c\u7f16\u8bd1\u5668\u5982\u4f55\u5229\u7528\u6808\u6765\u5b9e\u73b0**\u8868\u8fbe\u5f0f\u6c42\u503c**\u3002 \u4e3a\u4e86\u65b9\u4fbf\u89e3\u91ca\uff0c\u6211\u5c06\u7b97\u672f\u8868\u8fbe\u5f0f\u7b80\u5316\u4e3a\u53ea\u5305\u542b\u52a0\u51cf\u4e58\u9664\u56db\u5219\u8fd0\u7b97\uff0c\u6bd4\u5982\uff1a34+13*9+44-12/3\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u56db\u5219\u8fd0\u7b97\uff0c\u6211\u4eec\u4eba\u8111\u53ef\u4ee5\u5f88\u5feb\u6c42\u89e3\u51fa\u7b54\u6848\uff0c\u4f46\u662f\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u7406\u89e3\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u672c\u8eab\u5c31\u662f\u4e2a\u633a\u96be\u7684\u4e8b\u513f\u3002\u5982\u679c\u6362\u4f5c\u4f60\uff0c\u8ba9\u4f60\u6765\u5b9e\u73b0\u8fd9\u6837\u4e00\u4e2a\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u529f\u80fd\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\u5462\uff1f \u5b9e\u9645\u4e0a\uff0c\u7f16\u8bd1\u5668\u5c31\u662f\u901a\u8fc7\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u7684\u3002\u5176\u4e2d\u4e00\u4e2a\u4fdd\u5b58\u64cd\u4f5c\u6570\u7684\u6808\uff0c\u53e6\u4e00\u4e2a\u662f\u4fdd\u5b58\u8fd0\u7b97\u7b26\u7684\u6808\u3002\u6211\u4eec\u4ece\u5de6\u5411\u53f3\u904d\u5386\u8868\u8fbe\u5f0f\uff0c\u5f53\u9047\u5230\u6570\u5b57\uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u538b\u5165\u64cd\u4f5c\u6570\u6808\uff1b\u5f53\u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u5c31\u4e0e\u8fd0\u7b97\u7b26\u6808\u7684\u6808\u9876\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u6bd4\u8fd0\u7b97\u7b26\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u9ad8\uff0c\u5c31\u5c06\u5f53\u524d\u8fd0\u7b97\u7b26\u538b\u5165\u6808\uff1b\u5982\u679c\u6bd4\u8fd0\u7b97\u7b26\u6808\u9876\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u4f4e\u6216\u8005\u76f8\u540c\uff0c\u4ece\u8fd0\u7b97\u7b26\u6808\u4e2d\u53d6\u6808\u9876\u8fd0\u7b97\u7b26\uff0c\u4ece\u64cd\u4f5c\u6570\u6808\u7684\u6808\u9876\u53d6 2 \u4e2a\u64cd\u4f5c\u6570\uff0c\u7136\u540e\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u628a\u8ba1\u7b97\u5b8c\u7684\u7ed3\u679c\u538b\u5165\u64cd\u4f5c\u6570\u6808\uff0c\u7ee7\u7eed\u6bd4\u8f83\u3002 \u6211\u5c06 3+5*8-6 \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u8fc7\u7a0b\u753b\u6210\u4e86\u4e00\u5f20\u56fe\uff0c\u4f60\u53ef\u4ee5\u7ed3\u5408\u56fe\u6765\u7406\u89e3\u6211\u521a\u8bb2\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002 \u8fd9\u6837\u7528\u4e24\u4e2a\u6808\u6765\u89e3\u51b3\u7684\u601d\u8def\u662f\u4e0d\u662f\u975e\u5e38\u5de7\u5999\uff1f\u4f60\u6709\u6ca1\u6709\u60f3\u5230\u5462\uff1f","title":"\u6808\u5728\u8868\u8fbe\u5f0f\u6c42\u503c\u4e2d\u7684\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_8","text":"\u9664\u4e86\u7528\u6808\u6765\u5b9e\u73b0\u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9\u6808\u6765\u68c0\u67e5\u8868\u8fbe\u5f0f\u4e2d\u7684\u62ec\u53f7\u662f\u5426\u5339\u914d \u6211\u4eec\u540c\u6837\u7b80\u5316\u4e00\u4e0b\u80cc\u666f\u3002\u6211\u4eec\u5047\u8bbe\u8868\u8fbe\u5f0f\u4e2d\u53ea\u5305\u542b\u4e09\u79cd\u62ec\u53f7\uff0c\u5706\u62ec\u53f7 ()\u3001\u65b9\u62ec\u53f7 [] \u548c\u82b1\u62ec\u53f7{}\uff0c\u5e76\u4e14\u5b83\u4eec\u53ef\u4ee5\u4efb\u610f\u5d4c\u5957\u3002\u6bd4\u5982\uff0c{[{}]}\u6216 [{()}([])] \u7b49\u90fd\u4e3a\u5408\u6cd5\u683c\u5f0f\uff0c\u800c{[}()] \u6216 [({)] \u4e3a\u4e0d\u5408\u6cd5\u7684\u683c\u5f0f\u3002\u90a3\u6211\u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b\u4e09\u79cd\u62ec\u53f7\u7684\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5982\u4f55\u68c0\u67e5\u5b83\u662f\u5426\u5408\u6cd5\u5462\uff1f \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u6808\u6765\u89e3\u51b3\u3002\u6211\u4eec\u7528\u6808\u6765\u4fdd\u5b58\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\uff0c\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u626b\u63cf\u5b57\u7b26\u4e32\u3002\u5f53\u626b\u63cf\u5230\u5de6\u62ec\u53f7\u65f6\uff0c\u5219\u5c06\u5176\u538b\u5165\u6808\u4e2d\uff1b\u5f53\u626b\u63cf\u5230\u53f3\u62ec\u53f7\u65f6\uff0c\u4ece\u6808\u9876\u53d6\u51fa\u4e00\u4e2a\u5de6\u62ec\u53f7\u3002\u5982\u679c\u80fd\u591f\u5339\u914d\uff0c\u6bd4\u5982\u201c(\u201d\u8ddf\u201c)\u201d\u5339\u914d\uff0c\u201c[\u201d\u8ddf\u201c]\u201d\u5339\u914d\uff0c\u201c{\u201d\u8ddf\u201c}\u201d\u5339\u914d\uff0c\u5219\u7ee7\u7eed\u626b\u63cf\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u626b\u63cf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9047\u5230\u4e0d\u80fd\u914d\u5bf9\u7684\u53f3\u62ec\u53f7\uff0c\u6216\u8005\u6808\u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u5219\u8bf4\u660e\u4e3a\u975e\u6cd5\u683c\u5f0f\u3002 \u5f53\u6240\u6709\u7684\u62ec\u53f7\u90fd\u626b\u63cf\u5b8c\u6210\u4e4b\u540e\uff0c\u5982\u679c\u6808\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u5b57\u7b26\u4e32\u4e3a\u5408\u6cd5\u683c\u5f0f\uff1b\u5426\u5219\uff0c\u8bf4\u660e\u6709\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\uff0c\u4e3a\u975e\u6cd5\u683c\u5f0f\u3002","title":"\u6808\u5728\u62ec\u53f7\u5339\u914d\u4e2d\u7684\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_9","text":"\u5982\u4f55\u5b9e\u73b0\u6d4f\u89c8\u5668\u7684\u524d\u8fdb\u3001\u540e\u9000\u529f\u80fd\uff1f\u5176\u5b9e\uff0c\u7528\u4e24\u4e2a\u6808\u5c31\u53ef\u4ee5\u975e\u5e38\u5b8c\u7f8e\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u6808\uff0cX \u548c Y\uff0c\u6211\u4eec\u628a\u9996\u6b21\u6d4f\u89c8\u7684\u9875\u9762\u4f9d\u6b21\u538b\u5165\u6808 X\uff0c\u5f53\u70b9\u51fb\u540e\u9000\u6309\u94ae\u65f6\uff0c\u518d\u4f9d\u6b21\u4ece\u6808 X \u4e2d\u51fa\u6808\uff0c\u5e76\u5c06\u51fa\u6808\u7684\u6570\u636e\u4f9d\u6b21\u653e\u5165\u6808 Y\u3002\u5f53\u6211\u4eec\u70b9\u51fb\u524d\u8fdb\u6309\u94ae\u65f6\uff0c\u6211\u4eec\u4f9d\u6b21\u4ece\u6808 Y \u4e2d\u53d6\u51fa\u6570\u636e\uff0c\u653e\u5165\u6808 X \u4e2d\u3002\u5f53\u6808 X \u4e2d\u6ca1\u6709\u6570\u636e\u65f6\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709\u9875\u9762\u53ef\u4ee5\u7ee7\u7eed\u540e\u9000\u6d4f\u89c8\u4e86\u3002\u5f53\u6808 Y \u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u90a3\u5c31\u8bf4\u660e\u6ca1\u6709\u9875\u9762\u53ef\u4ee5\u70b9\u51fb\u524d\u8fdb\u6309\u94ae\u6d4f\u89c8\u4e86\u3002 \u6bd4\u5982\u4f60\u987a\u5e8f\u67e5\u770b\u4e86 a\uff0cb\uff0cc \u4e09\u4e2a\u9875\u9762\uff0c\u6211\u4eec\u5c31\u4f9d\u6b21\u628a a\uff0cb\uff0cc \u538b\u5165\u6808\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u4e24\u4e2a\u6808\u7684\u6570\u636e\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u5f53\u4f60\u901a\u8fc7\u6d4f\u89c8\u5668\u7684\u540e\u9000\u6309\u94ae\uff0c\u4ece\u9875\u9762 c \u540e\u9000\u5230\u9875\u9762 a \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u4f9d\u6b21\u628a c \u548c b \u4ece\u6808 X \u4e2d\u5f39\u51fa\uff0c\u5e76\u4e14\u4f9d\u6b21\u653e\u5165\u5230\u6808 Y\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u4e24\u4e2a\u6808\u7684\u6570\u636e\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a \u8fd9\u4e2a\u65f6\u5019\u4f60\u53c8\u60f3\u770b\u9875\u9762 b\uff0c\u4e8e\u662f\u4f60\u53c8\u70b9\u51fb\u524d\u8fdb\u6309\u94ae\u56de\u5230 b \u9875\u9762\uff0c\u6211\u4eec\u5c31\u628a b \u518d\u4ece\u6808 Y \u4e2d\u51fa\u6808\uff0c\u653e\u5165\u6808 X \u4e2d\u3002\u6b64\u65f6\u4e24\u4e2a\u6808\u7684\u6570\u636e\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a","title":"\u5982\u4f55\u5b9e\u73b0\u6d4f\u89c8\u5668\u7684\u524d\u8fdb\u548c\u540e\u9000\u529f\u80fd\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E6%A0%88/#_10","text":"\u6211\u4eec\u6765\u56de\u987e\u4e00\u4e0b\u4eca\u5929\u8bb2\u7684\u5185\u5bb9\u3002\u6808\u662f\u4e00\u79cd\u64cd\u4f5c\u53d7\u9650\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ea\u652f\u6301\u5165\u6808\u548c\u51fa\u6808\u64cd\u4f5c\u3002\u540e\u8fdb\u5148\u51fa\u662f\u5b83\u6700\u5927\u7684\u7279\u70b9\u3002\u6808\u65e2\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u94fe\u8868\u6765\u5b9e\u73b0\u3002\u4e0d\u7ba1\u57fa\u4e8e\u6570\u7ec4\u8fd8\u662f\u94fe\u8868\uff0c\u5165\u6808\u3001\u51fa\u6808\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a O(1)\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u8bb2\u4e86\u4e00\u79cd\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u987a\u5e8f\u6808\uff0c\u4f60\u9700\u8981\u91cd\u70b9\u638c\u63e1\u5b83\u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u65b9\u6cd5\u3002","title":"\u5185\u5bb9\u5c0f\u7ed3"},{"location":"%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%8E%9F%E7%90%86/","text":"\u6ed1\u52a8\u7a97\u53e3\u4ecb\u7ecd \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"bbbbb\" \u8f93\u51fa: 1 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002 \u793a\u4f8b 3 : \u8f93\u5165: \"pwwkew\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002 \u601d\u8def\u8bb2\u89e3-\u6ed1\u52a8\u7a97\u53e3 \u00b6 \u5047\u8bbe\u539f\u59cb\u5b57\u7b26\u4e32S\u5982\u4e0b \u4ece\u5de6\u4fa7\u5f00\u59cb\u904d\u5386S\uff0c\u4ee5i\u6807\u8bb0\u7a97\u53e3\u5de6\u4fa7\uff0cj\u6807\u8bb0\u7a97\u53e3\u53f3\u4fa7\uff0c\u521d\u59cb\u65f6\uff0ci=0\uff0cj=0\uff0c\u5373\u5f00\u5934a\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3a1 \u7136\u540e\uff0c\u5c06j\u53f3\u79fb\uff0c\u9010\u6b65\u6269\u5927\u7a97\u53e3\uff0c\u4f9d\u6b21\u7ecf\u8fc7b\u3001c\u3001d\uff0c\u6b64\u65f6\uff0c\u7a97\u53e3\u5185\u5747\u65e0\u91cd\u590d\u5b57\u7b26\uff0c\u7ee7\u7eed\u53f3\u79fbj \u5f53j\u79fb\u52a8\u5230d\u540e\u9762\u7684a\u6240\u5728\u4f4d\u7f6e\u65f6\uff0c\u5bf9\u5e94\u5b57\u7b26a\u5728\u7a97\u53e3\u4e2d\u5df2\u5b58\u5728\uff0c\u6b64\u65f6\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3a5\uff0c\u53bb\u9664\u5f53\u524d\u91cd\u590d\u7684\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3a4\u3002\u6b64\u65f6\u7a97\u53e3\u5185\u7684\u5b57\u7b26\u4e32abcd\u4e3a \u627e\u5230\u7a97\u53e3\u4e2d\u5df2\u5b58\u5728\u7684\u8be5\u5b57\u7b26\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u5c06i\u79fb\u52a8\u5230\u8be5\u4f4d\u7f6e\u4e0b\u4e00\u4f4d \u6b64\u65f6\u4e3a\u7b2c\u4e8c\u4e2a\u7a97\u53e3 \u7ee7\u7eed\u91cd\u590d\u4e4b\u524d\u7684\u64cd\u4f5c\uff0c\u76f4\u5230j\u79fb\u52a8\u5230\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4f4d\u505c\u6b62\u3002 \u7b97\u6cd5\u5e94\u7528 \u00b6 leetcode: \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32 \u9898\u5e93\u4e2dpython\u5b9e\u73b0","title":"\u6ed1\u52a8\u7a97\u53e3\u4ecb\u7ecd"},{"location":"%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%8E%9F%E7%90%86/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u793a\u4f8b 1: \u8f93\u5165: \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u793a\u4f8b 2: \u8f93\u5165: \"bbbbb\" \u8f93\u51fa: 1 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"b\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002 \u793a\u4f8b 3 : \u8f93\u5165: \"pwwkew\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"wke\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f \u5b50\u4e32 \u7684\u957f\u5ea6\uff0c\"pwke\" \u662f\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u4e0d\u662f\u5b50\u4e32\u3002","title":"\u6ed1\u52a8\u7a97\u53e3\u4ecb\u7ecd"},{"location":"%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%8E%9F%E7%90%86/#-","text":"\u5047\u8bbe\u539f\u59cb\u5b57\u7b26\u4e32S\u5982\u4e0b \u4ece\u5de6\u4fa7\u5f00\u59cb\u904d\u5386S\uff0c\u4ee5i\u6807\u8bb0\u7a97\u53e3\u5de6\u4fa7\uff0cj\u6807\u8bb0\u7a97\u53e3\u53f3\u4fa7\uff0c\u521d\u59cb\u65f6\uff0ci=0\uff0cj=0\uff0c\u5373\u5f00\u5934a\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3a1 \u7136\u540e\uff0c\u5c06j\u53f3\u79fb\uff0c\u9010\u6b65\u6269\u5927\u7a97\u53e3\uff0c\u4f9d\u6b21\u7ecf\u8fc7b\u3001c\u3001d\uff0c\u6b64\u65f6\uff0c\u7a97\u53e3\u5185\u5747\u65e0\u91cd\u590d\u5b57\u7b26\uff0c\u7ee7\u7eed\u53f3\u79fbj \u5f53j\u79fb\u52a8\u5230d\u540e\u9762\u7684a\u6240\u5728\u4f4d\u7f6e\u65f6\uff0c\u5bf9\u5e94\u5b57\u7b26a\u5728\u7a97\u53e3\u4e2d\u5df2\u5b58\u5728\uff0c\u6b64\u65f6\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3a5\uff0c\u53bb\u9664\u5f53\u524d\u91cd\u590d\u7684\u4e00\u4f4d\uff0c\u7a97\u53e3\u5927\u5c0f\u4e3a4\u3002\u6b64\u65f6\u7a97\u53e3\u5185\u7684\u5b57\u7b26\u4e32abcd\u4e3a \u627e\u5230\u7a97\u53e3\u4e2d\u5df2\u5b58\u5728\u7684\u8be5\u5b57\u7b26\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u5c06i\u79fb\u52a8\u5230\u8be5\u4f4d\u7f6e\u4e0b\u4e00\u4f4d \u6b64\u65f6\u4e3a\u7b2c\u4e8c\u4e2a\u7a97\u53e3 \u7ee7\u7eed\u91cd\u590d\u4e4b\u524d\u7684\u64cd\u4f5c\uff0c\u76f4\u5230j\u79fb\u52a8\u5230\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4f4d\u505c\u6b62\u3002","title":"\u601d\u8def\u8bb2\u89e3-\u6ed1\u52a8\u7a97\u53e3"},{"location":"%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%8E%9F%E7%90%86/#_2","text":"leetcode: \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32 \u9898\u5e93\u4e2dpython\u5b9e\u73b0","title":"\u7b97\u6cd5\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/","text":"\u51fd\u6570\u76f4\u63a5\u6216\u95f4\u63a5\u8c03\u7528\u81ea\u8eab \u9012\u5f52\u8bf4\u660e \u00b6 \u9012\u5f52\u4e00\u5b9a\u8981\u63a7\u5236\u9012\u5f52\u7684\u5c42\u6570\uff0c\u5f53\u7b26\u5408\u67d0\u4e00\u6761\u4ef6\u65f6\u8981\u7ec8\u6b62\u9012\u5f52\u8c03\u7528 \u51e0\u4e4e\u6240\u6709\u7684\u9012\u5f52\u90fd\u80fd\u7528while\u5faa\u73af\u6765\u4ee3\u66ff \u9012\u5f52\u7684\u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9: \u53ef\u4ee5\u628a\u95ee\u9898\u7b80\u5355\u5316\uff0c\u8ba9\u601d\u8def\u7406\u4f1a\u4e3a\u6e05\u6670\uff0c\u4ee3\u7801\u66f4\u7b80\u6d01 \u7f3a\u70b9: \u9012\u5f52\u56e0\u7cfb\u7edf\u73af\u5883\u5f71\u54cd\u5927\uff0c\u5f53\u9012\u5f52\u6df1\u5ea6\u592a\u5927\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u4e0d\u53ef\u9884\u77e5\u7684\u7ed3\u679c \u9012\u5f52\u8c03\u7528\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5 \u00b6 \u9012\u63a8\u9636\u6bb5: \u4ece\u539f\u95ee\u9898\u51fa\u53d1\uff0c\u6309\u9012\u5f52\u516c\u5f0f\u9012\u63a8\uff0c\u4ece\u672a\u77e5\u5230\u5df2\u77e5\uff0c\u6700\u7ec8\u8fbe\u5230\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 \u56de\u5f52\u9636\u6bb5: \u6309\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u6c42\u51fa\u7ed3\u679c\uff0c\u9006\u5411\u9010\u6b65\u4ee3\u5165\u9012\u5f52\u516c\u5f0f\uff0c\u56de\u5f52\u5230\u539f\u95ee\u9898\u6c42\u89e3 \u98981: \u6c42\u9636\u4e58 \u00b6 def factor ( n ): '''\u6c42n\u7684\u9636\u4e58''' if n == 1 : return 1 return n * factor ( n - 1 ) \u98982: \u6253\u5370i-j \u00b6 def print_i2j ( i , j ): if i >= j : return print ( i ) print_i2j ( i + 1 , j ) \u98983: \u6570\u7ec4\u6c42\u548c \u00b6 def sum ( nums , begin ): if begin == len ( nums ) - 1 : return nums [ begin ] return nums [ begin ] + sum ( nums , begin + 1 ) print ( sum ([ 1 , 2 , 3 , 4 , 5 ], 0 )) \u98984: \u5b57\u7b26\u4e32\u7ffb\u8f6c \u00b6 def reverse ( string ): if len ( string ) == 1 : return string return string [ - 1 ] + reverse ( string [: - 1 ]) print ( reverse ( 'abcdefgh' )) \u98985: \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u00b6 def febo ( n ): if n < 3 : return 1 return febo ( n - 1 ) + febo ( n - 2 ) print ( febo ( 7 )) \u6c49\u8bfa\u5854 \u00b6 1~N\u4eceA\u5230B\uff0cC\u4f5c\u4e3a\u8f85\u52a9 \u7b49\u4ef7\u4e8e 1. 1~N-1 \u4eceA\u79fb\u52a8\u5230C\uff0cB\u4f5c\u4e3a\u8f85\u52a9 2. \u628aN\u4eceA\u79fb\u52a8\u5230B 3. 1~N-1 \u4eceC\u79fb\u52a8\u5230B\uff0cA\u4f5c\u4e3a\u8f85\u52a9 \u4e8c\u5206\u67e5\u627e \u00b6 \u7b49\u4ef7\u4e8e\u4e09\u4e2a\u5b50\u95ee\u9898\uff1a \u5de6\u8fb9\u627e\uff08\u9012\u5f52\uff09 \u4e2d\u95f4\u6bd4\u8f83 \u53f3\u8fb9\u627e\uff08\u9012\u5f52\uff09 \u6ce8\u610f\uff1a\u5de6\u67e5\u627e\u548c\u53f3\u67e5\u627e\u53ea\u9009\u5176\u4e00 def bin_search ( nums , n , lower = 0 , upper = None ): upper = len ( nums ) if upper is None else upper if upper <= lower : return - 1 mid = ( lower + upper ) // 2 if nums [ mid ] > n : return bin_search ( nums , n , lower , mid ) elif nums [ mid ] < n : return bin_search ( nums , n , mid + 1 , upper ) else : return mid print ( bin_search ([ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ], 8 )) \u5c0f\u767d\u4e0a\u697c\u68af \u00b6 \u89e3\u9898\u601d\u8def\uff1a \u9006\u63a8\uff0c\u5728\u7b2cn\u9636\u53f0\u9636\u65f6\uff0c\u67093\u4e2d\u65b9\u6848\u53ef\u4ee5\u8fbe\u5230\u7b2cn\u4e2a\u53f0\u9636 \u5728\u7b2cn-1\u4e2a\u53f0\u9636\u4e0a\u4e00\u4e2a\u53f0\u9636 \u5728\u7b2cn-2\u4e2a\u53f0\u9636\u4e0a\u4e24\u6b21\u4e00\u4e2a\u53f0\u9636\u6216\u4e00\u6b21\u4e0a\u4e24\u4e2a\u53f0\u9636 \u5728\u7b2cn-3\u4e2a\u53f0\u9636\u4e0a\u4e09\u6b21\u4e00\u4e2a\u53f0\u9636\u6216\u4e00\u6b21\u4e0a\u4e09\u4e2a\u53f0\u9636 \u4e0a\u4e00\u4e2a\u53f0\u9636\u518d\u4e0a\u4e24\u4e2a\u53f0\u9636\u6216\u4e0a\u4e24\u4e2a\u53f0\u9636\u518d\u4e0a\u4e00\u4e2a\u53f0\u9636 def stairs ( n ): if n == 0 : return 1 if n == 1 : return 1 if n == 2 : return 2 return stairs ( n - 1 ) + stairs ( n - 2 ) + stairs ( n - 3 ) print ( stairs ( 3 ))","title":"\u9012\u5f52"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_1","text":"\u9012\u5f52\u4e00\u5b9a\u8981\u63a7\u5236\u9012\u5f52\u7684\u5c42\u6570\uff0c\u5f53\u7b26\u5408\u67d0\u4e00\u6761\u4ef6\u65f6\u8981\u7ec8\u6b62\u9012\u5f52\u8c03\u7528 \u51e0\u4e4e\u6240\u6709\u7684\u9012\u5f52\u90fd\u80fd\u7528while\u5faa\u73af\u6765\u4ee3\u66ff","title":"\u9012\u5f52\u8bf4\u660e"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_2","text":"\u4f18\u70b9: \u53ef\u4ee5\u628a\u95ee\u9898\u7b80\u5355\u5316\uff0c\u8ba9\u601d\u8def\u7406\u4f1a\u4e3a\u6e05\u6670\uff0c\u4ee3\u7801\u66f4\u7b80\u6d01 \u7f3a\u70b9: \u9012\u5f52\u56e0\u7cfb\u7edf\u73af\u5883\u5f71\u54cd\u5927\uff0c\u5f53\u9012\u5f52\u6df1\u5ea6\u592a\u5927\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f97\u5230\u4e0d\u53ef\u9884\u77e5\u7684\u7ed3\u679c","title":"\u9012\u5f52\u7684\u4f18\u7f3a\u70b9"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_3","text":"\u9012\u63a8\u9636\u6bb5: \u4ece\u539f\u95ee\u9898\u51fa\u53d1\uff0c\u6309\u9012\u5f52\u516c\u5f0f\u9012\u63a8\uff0c\u4ece\u672a\u77e5\u5230\u5df2\u77e5\uff0c\u6700\u7ec8\u8fbe\u5230\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 \u56de\u5f52\u9636\u6bb5: \u6309\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6\u6c42\u51fa\u7ed3\u679c\uff0c\u9006\u5411\u9010\u6b65\u4ee3\u5165\u9012\u5f52\u516c\u5f0f\uff0c\u56de\u5f52\u5230\u539f\u95ee\u9898\u6c42\u89e3","title":"\u9012\u5f52\u8c03\u7528\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#1","text":"def factor ( n ): '''\u6c42n\u7684\u9636\u4e58''' if n == 1 : return 1 return n * factor ( n - 1 )","title":"\u98981: \u6c42\u9636\u4e58"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#2-i-j","text":"def print_i2j ( i , j ): if i >= j : return print ( i ) print_i2j ( i + 1 , j )","title":"\u98982: \u6253\u5370i-j"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#3","text":"def sum ( nums , begin ): if begin == len ( nums ) - 1 : return nums [ begin ] return nums [ begin ] + sum ( nums , begin + 1 ) print ( sum ([ 1 , 2 , 3 , 4 , 5 ], 0 ))","title":"\u98983: \u6570\u7ec4\u6c42\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#4","text":"def reverse ( string ): if len ( string ) == 1 : return string return string [ - 1 ] + reverse ( string [: - 1 ]) print ( reverse ( 'abcdefgh' ))","title":"\u98984: \u5b57\u7b26\u4e32\u7ffb\u8f6c"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#5","text":"def febo ( n ): if n < 3 : return 1 return febo ( n - 1 ) + febo ( n - 2 ) print ( febo ( 7 ))","title":"\u98985: \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_4","text":"1~N\u4eceA\u5230B\uff0cC\u4f5c\u4e3a\u8f85\u52a9 \u7b49\u4ef7\u4e8e 1. 1~N-1 \u4eceA\u79fb\u52a8\u5230C\uff0cB\u4f5c\u4e3a\u8f85\u52a9 2. \u628aN\u4eceA\u79fb\u52a8\u5230B 3. 1~N-1 \u4eceC\u79fb\u52a8\u5230B\uff0cA\u4f5c\u4e3a\u8f85\u52a9","title":"\u6c49\u8bfa\u5854"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_5","text":"\u7b49\u4ef7\u4e8e\u4e09\u4e2a\u5b50\u95ee\u9898\uff1a \u5de6\u8fb9\u627e\uff08\u9012\u5f52\uff09 \u4e2d\u95f4\u6bd4\u8f83 \u53f3\u8fb9\u627e\uff08\u9012\u5f52\uff09 \u6ce8\u610f\uff1a\u5de6\u67e5\u627e\u548c\u53f3\u67e5\u627e\u53ea\u9009\u5176\u4e00 def bin_search ( nums , n , lower = 0 , upper = None ): upper = len ( nums ) if upper is None else upper if upper <= lower : return - 1 mid = ( lower + upper ) // 2 if nums [ mid ] > n : return bin_search ( nums , n , lower , mid ) elif nums [ mid ] < n : return bin_search ( nums , n , mid + 1 , upper ) else : return mid print ( bin_search ([ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ], 8 ))","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_6","text":"\u89e3\u9898\u601d\u8def\uff1a \u9006\u63a8\uff0c\u5728\u7b2cn\u9636\u53f0\u9636\u65f6\uff0c\u67093\u4e2d\u65b9\u6848\u53ef\u4ee5\u8fbe\u5230\u7b2cn\u4e2a\u53f0\u9636 \u5728\u7b2cn-1\u4e2a\u53f0\u9636\u4e0a\u4e00\u4e2a\u53f0\u9636 \u5728\u7b2cn-2\u4e2a\u53f0\u9636\u4e0a\u4e24\u6b21\u4e00\u4e2a\u53f0\u9636\u6216\u4e00\u6b21\u4e0a\u4e24\u4e2a\u53f0\u9636 \u5728\u7b2cn-3\u4e2a\u53f0\u9636\u4e0a\u4e09\u6b21\u4e00\u4e2a\u53f0\u9636\u6216\u4e00\u6b21\u4e0a\u4e09\u4e2a\u53f0\u9636 \u4e0a\u4e00\u4e2a\u53f0\u9636\u518d\u4e0a\u4e24\u4e2a\u53f0\u9636\u6216\u4e0a\u4e24\u4e2a\u53f0\u9636\u518d\u4e0a\u4e00\u4e2a\u53f0\u9636 def stairs ( n ): if n == 0 : return 1 if n == 1 : return 1 if n == 2 : return 2 return stairs ( n - 1 ) + stairs ( n - 2 ) + stairs ( n - 3 ) print ( stairs ( 3 ))","title":"\u5c0f\u767d\u4e0a\u697c\u68af"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/","text":"\u94fe\u8868\uff08\u4e0a\uff09\uff1a\u5982\u4f55\u5b9e\u73b0LRU\u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5? \u00b6 \u94fe\u8868\uff08\u4e0a\uff09\uff1a\u5982\u4f55\u5b9e\u73b0LRU\u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5? \u4e94\u82b1\u516b\u95e8\u7684\u94fe\u8868\u7ed3\u6784 \u5355\u94fe\u8868 \u5faa\u73af\u94fe\u8868 \u53cc\u5411\u94fe\u8868 \u5220\u9664\u64cd\u4f5c \u63d2\u5165\u64cd\u4f5c \u53cc\u5411\u5faa\u73af\u94fe\u8868 \u94fe\u8868 VS \u6570\u7ec4\u6027\u80fd\u5927\u6bd4\u62fc \u89e3\u7b54\u5f00\u7bc7 \u5185\u5bb9\u5c0f\u7ed3 \u8bfe\u540e\u601d\u8003 \u4eca\u5929\u6211\u4eec\u6765\u804a\u804a\u201c\u94fe\u8868\uff08Linked list\uff09\u201d\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u5b66\u4e60\u94fe\u8868\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5148\u6765\u8ba8\u8bba\u4e00 \u4e2a\u7ecf\u5178\u7684\u94fe\u8868\u5e94\u7528\u573a\u666f\uff0c\u90a3\u5c31\u662f LRU \u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5\u3002 \u7f13\u5b58\u662f\u4e00\u79cd\u63d0\u9ad8\u6570\u636e\u8bfb\u53d6\u6027\u80fd\u7684\u6280\u672f\uff0c\u5728\u786c\u4ef6\u8bbe\u8ba1\u3001\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u90fd\u6709\u7740\u975e\u5e38\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u5e38\u89c1\u7684 CPU \u7f13\u5b58\u3001 \u6570\u636e\u5e93\u7f13\u5b58\u3001\u6d4f\u89c8\u5668\u7f13\u5b58\u7b49\u7b49\u3002 \u7f13\u5b58\u7684\u5927\u5c0f\u6709\u9650\uff0c\u5f53\u7f13\u5b58\u88ab\u7528\u6ee1\u65f6\uff0c\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u6e05\u7406\u51fa\u53bb\uff0c\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u4fdd\u7559\uff1f\u8fd9\u5c31\u9700\u8981\u7f13\u5b58\u6dd8\u6c70\u7b56\u7565\u6765\u51b3 \u5b9a\u3002\u5e38\u89c1\u7684\u7b56\u7565\u6709\u4e09\u79cd\uff1a \u5148\u8fdb\u5148\u51fa\u7b56\u7565 FIFO\uff08First In\uff0cFirst Out\uff09\u3001 \u6700\u5c11\u4f7f\u7528\u7b56\u7565 LFU\uff08Least Frequently Used\uff09\u3001 \u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7b56\u7565 LRU\uff08Least Recently Used\uff09\u3002 \u5f00\u7bc7\u95ee\u9898\u5c31\u662f\uff1a\u5982\u4f55\u7528\u94fe\u8868\u6765\u5b9e\u73b0 LRU \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565\u5462\uff1f \u4e94\u82b1\u516b\u95e8\u7684\u94fe\u8868\u7ed3\u6784 \u00b6 \u76f8\u6bd4\u6570\u7ec4\uff0c\u94fe\u8868\u662f\u4e00\u79cd\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u6570\u636e\u7ed3\u6784\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u638c\u63e1\u8d77\u6765\u4e5f\u8981\u6bd4\u6570\u7ec4\u7a0d\u96be\u4e00\u4e9b\u3002\u8fd9\u4e24\u4e2a\u975e\u5e38\u57fa \u7840\u3001\u975e\u5e38\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u5e38\u5e38\u5c06\u4f1a\u653e\u5230\u4e00\u5757\u513f\u6765\u6bd4\u8f83\u3002\u6240\u4ee5\u6211\u4eec\u5148\u6765\u770b\uff0c\u8fd9\u4e24\u8005\u6709\u4ec0\u4e48\u533a\u522b\u3002 \u6211\u4eec\u5148\u4ece**\u5e95\u5c42\u7684\u5b58\u50a8\u7ed3\u6784**\u4e0a\u6765\u770b\u4e00\u770b\u3002 \u4e3a\u4e86\u76f4\u89c2\u5730\u5bf9\u6bd4\uff0c\u6211\u753b\u4e86\u4e00\u5f20\u56fe\u3002\u4ece\u56fe\u4e2d\u6211\u4eec\u770b\u5230\uff0c\u6570\u7ec4\u9700\u8981\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u6765\u5b58\u50a8\uff0c\u5bf9\u5185\u5b58\u7684\u8981\u6c42\u6bd4\u8f83\u9ad8\u3002 \u5982\u679c\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a 100MB \u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u5f53\u5185\u5b58\u4e2d\u6ca1\u6709\u8fde\u7eed\u7684\u3001\u8db3\u591f\u5927\u7684\u5b58\u50a8\u7a7a\u95f4\u65f6\uff0c\u5373\u4fbf\u5185\u5b58\u7684\u5269\u4f59\u603b\u53ef\u7528\u7a7a\u95f4 \u5927\u4e8e 100MB\uff0c\u4ecd\u7136\u4f1a\u7533\u8bf7\u5931\u8d25\u3002 \u800c\u94fe\u8868\u6070\u6070\u76f8\u53cd\uff0c\u5b83\u5e76\u4e0d\u9700\u8981\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5b83\u901a\u8fc7\u201c\u6307\u9488\u201d\u5c06\u4e00\u7ec4\u96f6\u6563\u7684\u5185\u5b58\u5757\u4e32\u8054\u8d77\u6765\u4f7f\u7528\uff0c\u6240\u4ee5\u5982\u679c\u6211 \u4eec\u7533\u8bf7\u7684\u662f 100MB \u5927\u5c0f\u7684\u94fe\u8868\uff0c\u6839\u672c\u4e0d\u4f1a\u6709\u95ee\u9898\u3002 \u94fe\u8868\u7ed3\u6784\u4e94\u82b1\u516b\u95e8\uff0c\u4eca\u5929\u6211\u91cd\u70b9\u7ed9\u4f60\u4ecb\u7ecd\u4e09\u79cd\u6700\u5e38\u89c1\u7684\u94fe\u8868\u7ed3\u6784\uff0c\u5b83\u4eec\u5206\u522b\u662f\uff1a\u5355\u94fe\u8868\u3001\u53cc\u5411\u94fe\u8868\u548c\u5faa\u73af\u94fe\u8868\u3002 \u5355\u94fe\u8868 \u00b6 \u6211\u4eec\u9996\u5148\u6765\u770b\u6700\u7b80\u5355\u3001\u6700\u5e38\u7528\u7684\u5355\u94fe\u8868\u3002 \u6211\u4eec\u521a\u521a\u8bb2\u5230\uff0c\u94fe\u8868\u901a\u8fc7\u6307\u9488\u5c06\u4e00\u7ec4\u96f6\u6563\u7684\u5185\u5b58\u5757\u4e32\u8054\u5728\u4e00\u8d77\u3002\u5176\u4e2d\uff0c\u6211\u4eec\u628a\u5185\u5b58\u5757\u79f0\u4e3a\u94fe\u8868\u7684\u201c \u7ed3\u70b9 \u201d\u3002\u4e3a\u4e86\u5c06\u6240 \u6709\u7684\u7ed3\u70b9\u4e32\u8d77\u6765\uff0c\u6bcf\u4e2a\u94fe\u8868\u7684\u7ed3\u70b9\u9664\u4e86\u5b58\u50a8\u6570\u636e\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u8bb0\u5f55\u94fe\u4e0a\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u5730\u5740\u3002\u5982\u56fe\u6240\u793a\uff0c\u6211\u4eec\u628a\u8fd9 \u4e2a\u8bb0\u5f55\u4e0b\u4e2a\u7ed3\u70b9\u5730\u5740\u7684\u6307\u9488\u53eb\u4f5c**\u540e\u7ee7\u6307\u9488 next**\u3002 \u4ece\u6211\u753b\u7684\u5355\u94fe\u8868\u56fe\u4e2d\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u4e2d\u6709\u4e24\u4e2a\u7ed3\u70b9\u662f\u6bd4\u8f83\u7279\u6b8a\u7684\uff0c\u5b83\u4eec\u5206\u522b\u662f\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u3002 \u6211\u4eec\u4e60\u60ef\u6027\u5730\u628a\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u53eb\u4f5c**\u5934\u7ed3\u70b9**\uff0c\u628a\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u53eb\u4f5c**\u5c3e\u7ed3\u70b9**\u3002\u5176\u4e2d\uff0c\u5934\u7ed3\u70b9\u7528\u6765\u8bb0\u5f55\u94fe\u8868\u7684\u57fa\u5730\u5740\u3002\u6709\u4e86 \u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u904d\u5386\u5f97\u5230\u6574\u6761\u94fe\u8868\u3002\u800c\u5c3e\u7ed3\u70b9\u7279\u6b8a\u7684\u5730\u65b9\u662f\uff1a\u6307\u9488\u4e0d\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u800c\u662f\u6307\u5411\u4e00\u4e2a**\u7a7a\u5730\u5740 ** NULL \uff0c\u8868\u793a\u8fd9\u662f\u94fe\u8868\u4e0a\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u3002 \u4e0e\u6570\u7ec4\u4e00\u6837\uff0c\u94fe\u8868\u4e5f\u652f\u6301\u6570\u636e\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u5728\u8fdb\u884c\u6570\u7ec4\u7684\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u6570\u636e\u7684\u8fde\u7eed\u6027\uff0c\u9700\u8981\u505a\u5927\u91cf\u7684\u6570\u636e\u642c\u79fb\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742 \u5ea6\u662f O(n)\u3002\u800c\u5728\u94fe\u8868\u4e2d\u63d2\u5165\u6216\u8005\u5220\u9664\u4e00\u4e2a\u6570\u636e\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7684\u8fde\u7eed\u6027\u800c\u642c\u79fb\u7ed3\u70b9\uff0c\u56e0\u4e3a\u94fe\u8868\u7684\u5b58 \u50a8\u7a7a\u95f4\u672c\u8eab\u5c31\u4e0d\u662f\u8fde\u7eed\u7684\u3002\u6240\u4ee5\uff0c\u5728\u94fe\u8868\u4e2d\u63d2\u5165\u548c\u5220\u9664\u4e00\u4e2a\u6570\u636e\u662f\u975e\u5e38\u5feb\u901f\u7684\u3002 \u4e3a\u4e86\u65b9\u4fbf\u4f60\u7406\u89e3\uff0c\u6211\u753b\u4e86\u4e00\u5f20\u56fe\uff0c\u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u9488\u5bf9\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u76f8\u90bb\u7ed3\u70b9\u7684 \u6307\u9488\u6539\u53d8\uff0c\u6240\u4ee5\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002 \u4f46\u662f\uff0c\u6709\u5229\u5c31\u6709\u5f0a\u3002\u94fe\u8868\u8981\u60f3\u968f\u673a\u8bbf\u95ee\u7b2c k \u4e2a\u5143\u7d20\uff0c\u5c31\u6ca1\u6709\u6570\u7ec4\u90a3\u4e48\u9ad8\u6548\u4e86\u3002\u56e0\u4e3a\u94fe\u8868\u4e2d\u7684\u6570\u636e\u5e76\u975e\u8fde\u7eed\u5b58\u50a8 \u7684\uff0c\u6240\u4ee5\u65e0\u6cd5\u50cf\u6570\u7ec4\u90a3\u6837\uff0c\u6839\u636e\u9996\u5730\u5740\u548c\u4e0b\u6807\uff0c\u901a\u8fc7\u5bfb\u5740\u516c\u5f0f\u5c31\u80fd\u76f4\u63a5\u8ba1\u7b97\u51fa\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u662f\u9700\u8981\u6839\u636e\u6307\u9488 \u4e00\u4e2a\u7ed3\u70b9\u4e00\u4e2a\u7ed3\u70b9\u5730\u4f9d\u6b21\u904d\u5386\uff0c\u76f4\u5230\u627e\u5230\u76f8\u5e94\u7684\u7ed3\u70b9\u3002 \u4f60\u53ef\u4ee5\u628a\u94fe\u8868\u60f3\u8c61\u6210\u4e00\u4e2a\u961f\u4f0d\uff0c\u961f\u4f0d\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u53ea\u77e5\u9053\u81ea\u5df1\u540e\u9762\u7684\u4eba\u662f\u8c01\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u6392\u5728\u7b2c k \u4f4d\u7684 \u4eba\u662f\u8c01\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4ece\u7b2c\u4e00\u4e2a\u4eba\u5f00\u59cb\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u5f80\u4e0b\u6570\u3002\u6240\u4ee5\uff0c\u94fe\u8868\u968f\u673a\u8bbf\u95ee\u7684\u6027\u80fd\u6ca1\u6709\u6570\u7ec4\u597d\uff0c\u9700\u8981 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u5faa\u73af\u94fe\u8868 \u00b6 \u5faa\u73af\u94fe\u8868\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5355\u94fe\u8868 \u3002\u5b9e\u9645\u4e0a\uff0c\u5faa\u73af\u94fe\u8868\u4e5f\u5f88\u7b80\u5355\u3002\u5b83\u8ddf\u5355\u94fe\u8868\u552f\u4e00\u7684\u533a\u522b\u5c31\u5728\u5c3e\u7ed3\u70b9\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5355\u94fe \u8868\u7684\u5c3e\u7ed3\u70b9\u6307\u9488\u6307\u5411\u7a7a\u5730\u5740\uff0c\u8868\u793a\u8fd9\u5c31\u662f\u6700\u540e\u7684\u7ed3\u70b9\u4e86\u3002\u800c\u5faa\u73af\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9\u6307\u9488\u662f\u6307\u5411\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002\u4ece\u6211\u753b\u7684 \u5faa\u73af\u94fe\u8868\u56fe\u4e2d\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5b83\u50cf\u4e00\u4e2a\u73af\u4e00\u6837\u9996\u5c3e\u76f8\u8fde\uff0c\u6240\u4ee5\u53eb\u4f5c\u201c\u5faa\u73af\u201d\u94fe\u8868\u3002 \u548c\u5355\u94fe\u8868\u76f8\u6bd4\uff0c\u5faa\u73af\u94fe\u8868\u7684\u4f18\u70b9\u662f\u4ece\u94fe\u5c3e\u5230\u94fe\u5934\u6bd4\u8f83\u65b9\u4fbf\u3002\u5f53\u8981\u5904\u7406\u7684\u6570\u636e\u5177\u6709\u73af\u578b\u7ed3\u6784\u7279\u70b9\u65f6\uff0c\u5c31\u7279\u522b\u9002\u5408\u91c7\u7528 \u5faa\u73af\u94fe\u8868\u3002\u6bd4\u5982\u8457\u540d\u7684**\u7ea6\u745f\u592b\u95ee\u9898**\u3002\u5c3d\u7ba1\u7528\u5355\u94fe\u8868\u4e5f\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4f46\u662f\u7528\u5faa\u73af\u94fe\u8868\u5b9e\u73b0\u7684\u8bdd\uff0c\u4ee3\u7801\u5c31\u4f1a\u7b80\u6d01\u5f88\u591a\u3002 \u53cc\u5411\u94fe\u8868 \u00b6 \u5355\u94fe\u8868\u548c\u5faa\u73af\u94fe\u8868\u662f\u4e0d\u662f\u90fd\u4e0d\u96be\uff1f\u63a5\u4e0b\u6765\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u7684\uff0c\u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u4e5f\u66f4\u52a0\u5e38\u7528\u7684\u94fe\u8868\u7ed3 \u6784\uff1a\u53cc\u5411\u94fe\u8868\u3002 \u5355\u5411\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u65b9\u5411\uff0c\u7ed3\u70b9\u53ea\u6709\u4e00\u4e2a\u540e\u7ee7\u6307\u9488 next \u6307\u5411\u540e\u9762\u7684\u7ed3\u70b9\u3002\u800c\u53cc\u5411\u94fe\u8868\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u652f\u6301\u4e24\u4e2a\u65b9 \u5411\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e0d\u6b62\u6709\u4e00\u4e2a\u540e\u7ee7\u6307\u9488 next \u6307\u5411\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u8fd8\u6709\u4e00\u4e2a\u524d\u9a71\u6307\u9488 prev \u6307\u5411\u524d\u9762\u7684\u7ed3\u70b9\u3002 \u4ece\u6211\u753b\u7684\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u53cc\u5411\u94fe\u8868\u9700\u8981\u989d\u5916\u7684\u4e24\u4e2a\u7a7a\u95f4\u6765\u5b58\u50a8\u540e\u7ee7\u7ed3\u70b9\u548c\u524d\u9a71\u7ed3\u70b9\u7684\u5730\u5740\u3002\u6240\u4ee5\uff0c\u5982\u679c\u5b58\u50a8\u540c\u6837 \u591a\u7684\u6570\u636e\uff0c\u53cc\u5411\u94fe\u8868\u8981\u6bd4\u5355\u94fe\u8868\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u867d\u7136\u4e24\u4e2a\u6307\u9488\u6bd4\u8f83\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f46\u53ef\u4ee5\u652f\u6301\u53cc\u5411\u904d\u5386\uff0c\u8fd9 \u6837\u4e5f\u5e26\u6765\u4e86\u53cc\u5411\u94fe\u8868\u64cd\u4f5c\u7684\u7075\u6d3b\u6027\u3002\u90a3\u76f8\u6bd4\u5355\u94fe\u8868\uff0c\u53cc\u5411\u94fe\u8868\u9002\u5408\u89e3\u51b3\u54ea\u79cd\u95ee\u9898\u5462\uff1f \u4ece\u7ed3\u6784\u4e0a\u6765\u770b\uff0c\u53cc\u5411\u94fe\u8868\u53ef\u4ee5\u652f\u6301 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u60c5\u51b5\u4e0b\u627e\u5230\u524d\u9a71\u7ed3\u70b9\uff0c\u6b63\u662f\u8fd9\u6837\u7684\u7279\u70b9\uff0c\u4e5f\u4f7f\u53cc\u5411\u94fe\u8868\u5728\u67d0 \u4e9b\u60c5\u51b5\u4e0b\u7684\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\u90fd\u8981\u6bd4\u5355\u94fe\u8868\u7b80\u5355\u3001\u9ad8\u6548\u3002 \u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u6211\u521a\u8bb2\u5230\u5355\u94fe\u8868\u7684\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5df2\u7ecf\u662f O(1) \u4e86\uff0c\u53cc\u5411\u94fe\u8868\u8fd8\u80fd\u518d\u600e\u4e48\u9ad8\u6548\u5462\uff1f\u522b\u7740 \u6025\uff0c\u521a\u521a\u7684\u5206\u6790\u6bd4\u8f83\u504f\u7406\u8bba\uff0c\u5f88\u591a\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e66\u7c4d\u4e2d\u90fd\u4f1a\u8fd9\u4e48\u8bb2\uff0c\u4f46\u662f\u8fd9\u79cd\u8bf4\u6cd5\u5b9e\u9645\u4e0a\u662f\u4e0d\u51c6\u786e\u7684\uff0c\u6216\u8005\u8bf4\u662f \u6709\u5148\u51b3\u6761\u4ef6\u7684\u3002\u6211\u518d\u6765\u5e26\u4f60\u5206\u6790\u4e00\u4e0b\u94fe\u8868\u7684\u4e24\u4e2a\u64cd\u4f5c\u3002 \u5220\u9664\u64cd\u4f5c \u00b6 \u6211\u4eec\u5148\u6765\u770b\u5220\u9664\u64cd\u4f5c\u3002 \u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u6570\u636e\u65e0\u5916\u4e4e\u8fd9\u4e24\u79cd\u60c5\u51b5\uff1a \u5220\u9664\u7ed3\u70b9\u4e2d\u201c\u503c\u7b49\u4e8e\u67d0\u4e2a\u7ed9\u5b9a\u503c\u201d\u7684\u7ed3\u70b9\uff1b \u5220\u9664\u7ed9\u5b9a\u6307\u9488\u6307\u5411\u7684\u7ed3\u70b9\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e0d\u7ba1\u662f\u5355\u94fe\u8868\u8fd8\u662f\u53cc\u5411\u94fe\u8868\uff0c\u4e3a\u4e86\u67e5\u627e\u5230\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u7ed3\u70b9\uff0c\u90fd\u9700\u8981\u4ece\u5934\u7ed3\u70b9\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u4f9d \u6b21\u904d\u5386\u5bf9\u6bd4\uff0c\u76f4\u5230\u627e\u5230\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u518d\u901a\u8fc7\u6211\u524d\u9762\u8bb2\u7684\u6307\u9488\u64cd\u4f5c\u5c06\u5176\u5220\u9664\u3002 \u5c3d\u7ba1\u5355\u7eaf\u7684\u5220\u9664\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u4f46\u904d\u5386\u67e5\u627e\u7684\u65f6\u95f4\u662f\u4e3b\u8981\u7684\u8017\u65f6\u70b9\uff0c\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u6839\u636e\u65f6 \u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e2d\u7684\u52a0\u6cd5\u6cd5\u5219\uff0c\u5220\u9664\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u7ed3\u70b9\u5bf9\u5e94\u7684\u94fe\u8868\u64cd\u4f5c\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u8981\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u4f46\u662f\u5220\u9664\u67d0\u4e2a\u7ed3\u70b9 q \u9700\u8981\u77e5\u9053\u5176\u524d\u9a71\u7ed3\u70b9\uff0c\u800c\u5355\u94fe\u8868\u5e76\u4e0d\u652f\u6301 \u76f4\u63a5\u83b7\u53d6\u524d\u9a71\u7ed3\u70b9\uff0c\u6240\u4ee5\uff0c\u4e3a\u4e86\u627e\u5230\u524d\u9a71\u7ed3\u70b9\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u4ece\u5934\u7ed3\u70b9\u5f00\u59cb\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230 p->next=q\uff0c\u8bf4\u660e p \u662f q \u7684\u524d\u9a71\u7ed3\u70b9\u3002 \u4f46\u662f\u5bf9\u4e8e\u53cc\u5411\u94fe\u8868\u6765\u8bf4\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c31\u6bd4\u8f83\u6709\u4f18\u52bf\u4e86\u3002\u56e0\u4e3a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9\u5df2\u7ecf\u4fdd\u5b58\u4e86\u524d\u9a71\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u4e0d\u9700\u8981\u50cf \u5355\u94fe\u8868\u90a3\u6837\u904d\u5386\u3002\u6240\u4ee5\uff0c\u9488\u5bf9\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5355\u94fe\u8868\u5220\u9664\u64cd\u4f5c\u9700\u8981 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u800c\u53cc\u5411\u94fe\u8868\u53ea\u9700\u8981\u5728 O(1) \u7684 \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5c31\u641e\u5b9a\u4e86\uff01 \u63d2\u5165\u64cd\u4f5c \u00b6 \u540c\u7406\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5728\u94fe\u8868\u7684\u67d0\u4e2a\u6307\u5b9a\u7ed3\u70b9\u524d\u9762\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9\uff0c\u53cc\u5411\u94fe\u8868\u6bd4\u5355\u94fe\u8868\u6709\u5f88\u5927\u7684\u4f18\u52bf\u3002\u53cc\u5411\u94fe\u8868\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u641e\u5b9a\uff0c\u800c\u5355\u5411\u94fe\u8868\u9700\u8981 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u53ef\u4ee5\u53c2\u7167\u6211\u521a\u521a\u8bb2\u8fc7\u7684\u5220\u9664\u64cd\u4f5c\u81ea\u5df1\u5206\u6790\u4e00\u4e0b\u3002 \u9664\u4e86\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u6709\u4f18\u52bf\u4e4b\u5916\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\uff0c\u53cc\u5411\u94fe\u8868\u7684\u6309\u503c\u67e5\u8be2\u7684\u6548\u7387\u4e5f\u8981\u6bd4\u5355\u94fe\u8868\u9ad8\u4e00\u4e9b\u3002\u56e0\u4e3a\uff0c\u6211 \u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0a\u6b21\u67e5\u627e\u7684\u4f4d\u7f6e p\uff0c\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u6839\u636e\u8981\u67e5\u627e\u7684\u503c\u4e0e p \u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u51b3\u5b9a\u662f\u5f80\u524d\u8fd8\u662f\u5f80\u540e\u67e5\u627e\uff0c\u6240\u4ee5 \u5e73\u5747\u53ea\u9700\u8981\u67e5\u627e\u4e00\u534a\u7684\u6570\u636e\u3002 \u73b0\u5728\uff0c\u4f60\u6709\u6ca1\u6709\u89c9\u5f97\u53cc\u5411\u94fe\u8868\u8981\u6bd4\u5355\u94fe\u8868\u66f4\u52a0\u9ad8\u6548\u5462\uff1f\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u53cc\u5411\u94fe\u8868\u5c3d\u7ba1\u6bd4\u8f83\u8d39\u5185 \u5b58\uff0c\u4f46\u8fd8\u662f\u6bd4\u5355\u94fe\u8868\u7684\u5e94\u7528\u66f4\u52a0\u5e7f\u6cdb\u7684\u539f\u56e0\u3002\u5982\u679c\u4f60\u719f\u6089 Java \u8bed\u8a00\uff0c\u4f60\u80af\u5b9a\u7528\u8fc7 LinkedHashMap \u8fd9\u4e2a\u5bb9\u5668\u3002\u5982 \u679c\u4f60\u6df1\u5165\u7814\u7a76 LinkedHashMap \u7684\u5b9e\u73b0\u539f\u7406\uff0c\u5c31\u4f1a\u53d1\u73b0\u5176\u4e2d\u5c31\u7528\u5230\u4e86\u53cc\u5411\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u66f4\u52a0\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\u9700\u8981\u4f60\u638c\u63e1\uff0c\u90a3\u5c31\u662f\u7528**\u7a7a\u95f4\u6362\u65f6\u95f4**\u7684\u8bbe\u8ba1\u601d\u60f3\u3002\u5f53\u5185\u5b58\u7a7a\u95f4\u5145\u8db3\u7684\u65f6\u5019\uff0c \u5982\u679c\u6211\u4eec\u66f4\u52a0\u8ffd\u6c42\u4ee3\u7801\u7684\u6267\u884c\u901f\u5ea6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9009\u62e9\u7a7a\u95f4\u590d\u6742\u5ea6\u76f8\u5bf9\u8f83\u9ad8\u3001\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u5bf9\u5f88\u4f4e\u7684\u7b97\u6cd5\u6216\u8005\u6570\u636e \u7ed3\u6784\u3002\u76f8\u53cd\uff0c\u5982\u679c\u5185\u5b58\u6bd4\u8f83\u7d27\u7f3a\uff0c\u6bd4\u5982\u4ee3\u7801\u8dd1\u5728\u624b\u673a\u6216\u8005\u5355\u7247\u673a\u4e0a\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u5c31\u8981\u53cd\u8fc7\u6765\u7528\u65f6\u95f4\u6362\u7a7a\u95f4\u7684\u8bbe\u8ba1\u601d \u8def\u3002 \u8fd8\u662f\u5f00\u7bc7\u7f13\u5b58\u7684\u4f8b\u5b50\u3002\u7f13\u5b58\u5b9e\u9645\u4e0a\u5c31\u662f\u5229\u7528\u4e86\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u8bbe\u8ba1\u601d\u60f3\u3002\u5982\u679c\u6211\u4eec\u628a\u6570\u636e\u5b58\u50a8\u5728\u786c\u76d8\u4e0a\uff0c\u4f1a\u6bd4\u8f83\u8282\u7701 \u5185\u5b58\uff0c\u4f46\u6bcf\u6b21\u67e5\u627e\u6570\u636e\u90fd\u8981\u8be2\u95ee\u4e00\u6b21\u786c\u76d8\uff0c\u4f1a\u6bd4\u8f83\u6162\u3002\u4f46\u5982\u679c\u6211\u4eec\u901a\u8fc7\u7f13\u5b58\u6280\u672f\uff0c\u4e8b\u5148\u5c06\u6570\u636e\u52a0\u8f7d\u5728\u5185\u5b58\u4e2d\uff0c\u867d\u7136 \u4f1a\u6bd4\u8f83\u8017\u8d39\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u662f\u6bcf\u6b21\u6570\u636e\u67e5\u8be2\u7684\u901f\u5ea6\u5c31\u5927\u5927\u63d0\u9ad8\u4e86\u3002 \u6240\u4ee5\u6211\u603b\u7ed3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u6267\u884c\u8f83\u6162\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\uff08\u7a7a\u95f4\u6362\u65f6\u95f4\uff09\u6765\u8fdb\u884c\u4f18\u5316\uff1b\u800c\u6d88\u8017\u8fc7\u591a\u5185\u5b58\u7684 \u7a0b\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d88\u8017\u66f4\u591a\u7684\u65f6\u95f4\uff08\u65f6\u95f4\u6362\u7a7a\u95f4\uff09\u6765\u964d\u4f4e\u5185\u5b58\u7684\u6d88\u8017\u3002\u4f60\u8fd8\u80fd\u60f3\u5230\u5176\u4ed6\u65f6\u95f4\u6362\u7a7a\u95f4\u6216\u8005\u7a7a\u95f4\u6362\u65f6\u95f4\u7684 \u4f8b\u5b50\u5417\uff1f \u53cc\u5411\u5faa\u73af\u94fe\u8868 \u00b6 \u4e86\u89e3\u4e86\u5faa\u73af\u94fe\u8868\u548c\u53cc\u5411\u94fe\u8868\uff0c\u5982\u679c\u628a\u8fd9\u4e24\u79cd\u94fe\u8868\u6574\u5408\u5728\u4e00\u8d77\u5c31\u662f\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff1a\u53cc\u5411\u5faa\u73af\u94fe\u8868\u3002\u6211\u60f3\u4e0d\u7528\u6211\u591a\u8bb2\uff0c \u4f60\u5e94\u8be5\u77e5\u9053\u53cc\u5411\u5faa\u73af\u94fe\u8868\u957f\u4ec0\u4e48\u6837\u5b50\u4e86\u5427\uff1f\u4f60\u53ef\u4ee5\u81ea\u5df1\u8bd5\u7740\u5728\u7eb8\u4e0a\u753b\u4e00\u753b\u3002 \u94fe\u8868 VS \u6570\u7ec4\u6027\u80fd\u5927\u6bd4\u62fc \u00b6 \u901a\u8fc7\u524d\u9762\u5185\u5bb9\u7684\u5b66\u4e60\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u77e5\u9053\uff0c\u6570\u7ec4\u548c\u94fe\u8868\u662f\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u5185\u5b58\u7ec4\u7ec7\u65b9\u5f0f\u3002\u6b63\u662f\u56e0\u4e3a\u5185\u5b58\u5b58\u50a8\u7684\u533a\u522b\uff0c \u5b83\u4eec\u63d2\u5165\u3001\u5220\u9664\u3001\u968f\u673a\u8bbf\u95ee\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u597d\u76f8\u53cd\u3002 \u4e0d\u8fc7\uff0c\u6570\u7ec4\u548c\u94fe\u8868\u7684\u5bf9\u6bd4\uff0c\u5e76\u4e0d\u80fd\u5c40\u9650\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u800c\u4e14\uff0c\u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u4e0d\u80fd\u4ec5\u4ec5\u5229\u7528\u590d\u6742\u5ea6\u5206\u6790\u5c31\u51b3 \u5b9a\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\u6570\u636e\u3002 \u6570\u7ec4\u7b80\u5355\u6613\u7528\uff0c\u5728\u5b9e\u73b0\u4e0a\u4f7f\u7528\u7684\u662f\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u53ef\u4ee5\u501f\u52a9 CPU \u7684\u7f13\u5b58\u673a\u5236\uff0c\u9884\u8bfb\u6570\u7ec4\u4e2d\u7684\u6570\u636e\uff0c\u6240\u4ee5\u8bbf\u95ee\u6548 \u7387\u66f4\u9ad8\u3002\u800c\u94fe\u8868\u5728\u5185\u5b58\u4e2d\u5e76\u4e0d\u662f\u8fde\u7eed\u5b58\u50a8\uff0c\u6240\u4ee5\u5bf9 CPU \u7f13\u5b58\u4e0d\u53cb\u597d\uff0c\u6ca1\u529e\u6cd5\u6709\u6548\u9884\u8bfb\u3002 \u6570\u7ec4\u7684\u7f3a\u70b9\u662f\u5927\u5c0f\u56fa\u5b9a\uff0c\u4e00\u7ecf\u58f0\u660e\u5c31\u8981\u5360\u7528\u6574\u5757\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u3002\u5982\u679c\u58f0\u660e\u7684\u6570\u7ec4\u8fc7\u5927\uff0c\u7cfb\u7edf\u53ef\u80fd\u6ca1\u6709\u8db3\u591f\u7684\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u5206\u914d\u7ed9\u5b83\uff0c\u5bfc\u81f4\u201c\u5185\u5b58\u4e0d\u8db3\uff08out of memory\uff09\u201d\u3002\u5982\u679c\u58f0\u660e\u7684\u6570\u7ec4\u8fc7\u5c0f\uff0c\u5219\u53ef\u80fd\u51fa\u73b0\u4e0d\u591f\u7528\u7684\u60c5\u51b5\u3002\u8fd9\u65f6\u53ea\u80fd\u518d\u7533\u8bf7\u4e00\u4e2a\u66f4\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u628a\u539f\u6570\u7ec4\u62f7\u8d1d\u8fdb\u53bb\uff0c\u975e\u5e38\u8d39\u65f6\u3002\u94fe\u8868\u672c\u8eab\u6ca1\u6709\u5927\u5c0f\u7684\u9650\u5236\uff0c\u5929\u7136\u5730\u652f\u6301\u52a8\u6001\u6269\u5bb9\uff0c\u6211\u89c9\u5f97\u8fd9\u4e5f\u662f\u5b83\u4e0e\u6570\u7ec4\u6700\u5927\u7684\u533a\u522b\u3002 \u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u6211\u4eec Java \u4e2d\u7684 ArrayList \u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u652f\u6301\u52a8\u6001\u6269\u5bb9\u554a\uff1f\u6211\u4eec\u4e0a\u4e00\u8282\u8bfe\u8bb2\u8fc7\uff0c\u5f53\u6211\u4eec\u5f80\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u6570\u7ec4\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\u636e\u65f6\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u6ca1\u6709\u7a7a\u95f2\u7a7a\u95f4\u4e86\uff0c\u5c31\u4f1a\u7533\u8bf7\u4e00\u4e2a\u66f4\u5927\u7684\u7a7a\u95f4\uff0c\u5c06\u6570\u636e\u62f7\u8d1d\u8fc7\u53bb\uff0c\u800c\u6570\u636e\u62f7\u8d1d\u7684\u64cd\u4f5c\u662f\u975e\u5e38\u8017\u65f6\u7684\u3002 \u6211\u4e3e\u4e00\u4e2a\u7a0d\u5fae\u6781\u7aef\u7684\u4f8b\u5b50\u3002\u5982\u679c\u6211\u4eec\u7528 ArrayList \u5b58\u50a8\u4e86\u4e86 1GB \u5927\u5c0f\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u6ca1\u6709\u7a7a\u95f2\u7a7a\u95f4\u4e86\uff0c\u5f53\u6211\u4eec\u518d\u63d2\u5165\u6570\u636e\u7684\u65f6\u5019\uff0cArrayList \u4f1a\u7533\u8bf7\u4e00\u4e2a 1.5GB \u5927\u5c0f\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u4e14\u628a\u539f\u6765\u90a3 1GB \u7684\u6570\u636e\u62f7\u8d1d\u5230\u65b0\u7533\u8bf7\u7684\u7a7a\u95f4\u4e0a\u3002\u542c\u8d77\u6765\u662f\u4e0d\u662f\u5c31\u5f88\u8017\u65f6\uff1f \u9664\u6b64\u4e4b\u5916\uff0c\u5982\u679c\u4f60\u7684\u4ee3\u7801\u5bf9\u5185\u5b58\u7684\u4f7f\u7528\u975e\u5e38\u82db\u523b\uff0c\u90a3\u6570\u7ec4\u5c31\u66f4\u9002\u5408\u4f60\u3002\u56e0\u4e3a\u94fe\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u9700\u8981\u6d88\u8017\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u53bb\u5b58\u50a8\u4e00\u4efd\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u6240\u4ee5\u5185\u5b58\u6d88\u8017\u4f1a\u7ffb\u500d\u3002\u800c\u4e14\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u9891\u7e41\u7684\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\uff0c\u8fd8\u4f1a\u5bfc\u81f4\u9891\u7e41\u7684\u5185\u5b58\u7533\u8bf7\u548c\u91ca\u653e\uff0c\u5bb9\u6613\u9020\u6210\u5185\u5b58\u788e\u7247\uff0c\u5982\u679c\u662f Java \u8bed\u8a00\uff0c\u5c31\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9891\u7e41\u7684 GC\uff08Garbage Collection\uff0c\u5783\u573e\u56de\u6536\uff09\u3002 \u6240\u4ee5\uff0c\u5728\u6211\u4eec\u5b9e\u9645\u7684\u5f00\u53d1\u4e2d\uff0c\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u9879\u76ee\uff0c\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c\u6743\u8861\u7a76\u7adf\u662f\u9009\u62e9\u6570\u7ec4\u8fd8\u662f\u94fe\u8868\u3002 \u89e3\u7b54\u5f00\u7bc7 \u00b6 \u597d\u4e86\uff0c\u5173\u4e8e\u94fe\u8868\u7684\u77e5\u8bc6\u6211\u4eec\u5c31\u8bb2\u5b8c\u4e86\u3002\u6211\u4eec\u73b0\u5728\u56de\u8fc7\u5934\u6765\u770b\u4e0b\u5f00\u7bc7\u7559\u7ed9\u4f60\u7684\u601d\u8003\u9898\u3002\u5982\u4f55\u57fa\u4e8e\u94fe\u8868\u5b9e\u73b0 LRU \u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5\uff1f \u6211\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u5355\u94fe\u8868\uff0c\u8d8a\u9760\u8fd1\u94fe\u8868\u5c3e\u90e8\u7684\u7ed3\u70b9\u662f\u8d8a\u65e9\u4e4b\u524d\u8bbf\u95ee\u7684\u3002\u5f53\u6709\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u88ab\u8bbf\u95ee\u65f6\uff0c\u6211\u4eec\u4ece\u94fe\u8868\u5934\u5f00\u59cb\u987a\u5e8f\u904d\u5386\u94fe\u8868\u3002 \u5982\u679c\u6b64\u6570\u636e\u4e4b\u524d\u5df2\u7ecf\u88ab\u7f13\u5b58\u5728\u94fe\u8868\u4e2d\u4e86\uff0c\u6211\u4eec\u904d\u5386\u5f97\u5230\u8fd9\u4e2a\u6570\u636e\u5bf9\u5e94\u7684\u7ed3\u70b9\uff0c\u5e76\u5c06\u5176\u4ece\u539f\u6765\u7684\u4f4d\u7f6e\u5220\u9664\uff0c\u7136\u540e\u518d\u63d2\u5165\u5230\u94fe\u8868\u7684\u5934\u90e8\u3002 \u5982\u679c\u6b64\u6570\u636e\u6ca1\u6709\u5728\u7f13\u5b58\u94fe\u8868\u4e2d\uff0c\u53c8\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a \u5982\u679c\u6b64\u65f6\u7f13\u5b58\u672a\u6ee1\uff0c\u5219\u5c06\u6b64\u7ed3\u70b9\u76f4\u63a5\u63d2\u5165\u5230\u94fe\u8868\u7684\u5934\u90e8\uff1b \u5982\u679c\u6b64\u65f6\u7f13\u5b58\u5df2\u6ee1\uff0c\u5219\u94fe\u8868\u5c3e\u7ed3\u70b9\u5220\u9664\uff0c\u5c06\u65b0\u7684\u6570\u636e\u7ed3\u70b9\u63d2\u5165\u94fe\u8868\u7684\u5934\u90e8\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u7528\u94fe\u8868\u5b9e\u73b0\u4e86\u4e00\u4e2a LRU \u7f13\u5b58\uff0c\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f \u73b0\u5728\u6211\u4eec\u6765\u770b\u4e0b m \u7f13\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u3002\u56e0\u4e3a\u4e0d\u7ba1\u7f13\u5b58\u6709\u6ca1\u6709\u6ee1\uff0c\u6211\u4eec\u90fd\u9700\u8981\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u6240\u4ee5\u8fd9\u79cd\u57fa\u4e8e\u94fe\u8868\u7684\u5b9e\u73b0\u601d\u8def\uff0c\u7f13\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u8fd9\u4e2a\u5b9e\u73b0\u601d\u8def\uff0c\u6bd4\u5982\u5f15\u5165\u6563\u5217\u8868\uff08Hash table\uff09\u6765\u8bb0\u5f55\u6bcf\u4e2a\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u5c06\u7f13\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230 O(1)\u3002\u56e0\u4e3a\u8981\u6d89\u53ca\u6211\u4eec\u8fd8\u6ca1\u6709\u8bb2\u5230\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4f18\u5316\u65b9\u6848\uff0c\u6211\u73b0\u5728\u5c31\u4e0d\u8be6\u7ec6\u8bf4\u4e86\uff0c\u7b49\u8bb2\u5230\u6563\u5217\u8868\u7684\u65f6\u5019\uff0c\u6211\u4f1a\u518d\u62ff\u51fa\u6765\u8bb2\u3002 \u5185\u5bb9\u5c0f\u7ed3 \u00b6 \u4eca\u5929\u6211\u4eec\u8bb2\u4e86\u4e00\u79cd\u8ddf\u6570\u7ec4\u201c\u76f8\u53cd\u201d\u7684\u6570\u636e\u7ed3\u6784\uff0c\u94fe\u8868\u3002\u5b83\u8ddf\u6570\u7ec4\u4e00\u6837\uff0c\u4e5f\u662f\u975e\u5e38\u57fa\u7840\u3001\u975e\u5e38\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002\u4e0d\u8fc7\u94fe\u8868\u8981\u6bd4\u6570\u7ec4\u7a0d\u5fae\u590d\u6742\uff0c\u4ece\u666e\u901a\u7684\u5355\u94fe\u8868\u884d\u751f\u51fa\u6765\u597d\u51e0\u79cd\u94fe\u8868\u7ed3\u6784\uff0c\u6bd4\u5982\u53cc\u5411\u94fe\u8868\u3001\u5faa\u73af\u94fe\u8868\u3001\u53cc\u5411\u5faa\u73af\u94fe\u8868\u3002 \u548c\u6570\u7ec4\u76f8\u6bd4\uff0c\u94fe\u8868\u66f4\u9002\u5408\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u9891\u7e41\u7684\u573a\u666f\uff0c\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u3002\u4e0d\u8fc7\uff0c\u5728\u5177\u4f53\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u8981\u5bf9\u6570\u7ec4\u548c\u94fe\u8868\u7684\u5404\u79cd\u6027\u80fd\u8fdb\u884c\u5bf9\u6bd4\uff0c\u7efc\u5408\u6765\u9009\u62e9\u4f7f\u7528\u4e24\u8005\u4e2d\u7684\u54ea\u4e00\u4e2a\u3002 \u8bfe\u540e\u601d\u8003 \u00b6 \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u662f\u56de\u6587\u5b57\u7b26\u4e32\u7684\u95ee\u9898\uff0c\u6211\u60f3\u4f60\u5e94\u8be5\u542c\u8fc7\uff0c\u6211\u4eec\u4eca\u5929\u7684\u9898\u76ee\u5c31\u662f\u57fa\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u6539\u9020\u7248\u672c\u3002\u5982\u679c\u5b57\u7b26\u4e32\u662f\u901a\u8fc7\u5355\u94fe\u8868\u6765\u5b58\u50a8\u7684\uff0c\u90a3\u8be5\u5982\u4f55\u6765\u5224\u65ad\u662f\u4e00\u4e2a\u56de\u6587\u4e32\u5462\uff1f\u4f60\u6709\u4ec0\u4e48\u597d\u7684\u89e3\u51b3\u601d\u8def\u5462\uff1f\u76f8\u5e94\u7684\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u53c8\u662f\u591a\u5c11\u5462\uff1f","title":"\u94fe\u8868\uff08\u4e0a\uff09\uff1a\u5982\u4f55\u5b9e\u73b0LRU\u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5?"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#lru","text":"\u94fe\u8868\uff08\u4e0a\uff09\uff1a\u5982\u4f55\u5b9e\u73b0LRU\u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5? \u4e94\u82b1\u516b\u95e8\u7684\u94fe\u8868\u7ed3\u6784 \u5355\u94fe\u8868 \u5faa\u73af\u94fe\u8868 \u53cc\u5411\u94fe\u8868 \u5220\u9664\u64cd\u4f5c \u63d2\u5165\u64cd\u4f5c \u53cc\u5411\u5faa\u73af\u94fe\u8868 \u94fe\u8868 VS \u6570\u7ec4\u6027\u80fd\u5927\u6bd4\u62fc \u89e3\u7b54\u5f00\u7bc7 \u5185\u5bb9\u5c0f\u7ed3 \u8bfe\u540e\u601d\u8003 \u4eca\u5929\u6211\u4eec\u6765\u804a\u804a\u201c\u94fe\u8868\uff08Linked list\uff09\u201d\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u5b66\u4e60\u94fe\u8868\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5148\u6765\u8ba8\u8bba\u4e00 \u4e2a\u7ecf\u5178\u7684\u94fe\u8868\u5e94\u7528\u573a\u666f\uff0c\u90a3\u5c31\u662f LRU \u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5\u3002 \u7f13\u5b58\u662f\u4e00\u79cd\u63d0\u9ad8\u6570\u636e\u8bfb\u53d6\u6027\u80fd\u7684\u6280\u672f\uff0c\u5728\u786c\u4ef6\u8bbe\u8ba1\u3001\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u90fd\u6709\u7740\u975e\u5e38\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u5e38\u89c1\u7684 CPU \u7f13\u5b58\u3001 \u6570\u636e\u5e93\u7f13\u5b58\u3001\u6d4f\u89c8\u5668\u7f13\u5b58\u7b49\u7b49\u3002 \u7f13\u5b58\u7684\u5927\u5c0f\u6709\u9650\uff0c\u5f53\u7f13\u5b58\u88ab\u7528\u6ee1\u65f6\uff0c\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u6e05\u7406\u51fa\u53bb\uff0c\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u4fdd\u7559\uff1f\u8fd9\u5c31\u9700\u8981\u7f13\u5b58\u6dd8\u6c70\u7b56\u7565\u6765\u51b3 \u5b9a\u3002\u5e38\u89c1\u7684\u7b56\u7565\u6709\u4e09\u79cd\uff1a \u5148\u8fdb\u5148\u51fa\u7b56\u7565 FIFO\uff08First In\uff0cFirst Out\uff09\u3001 \u6700\u5c11\u4f7f\u7528\u7b56\u7565 LFU\uff08Least Frequently Used\uff09\u3001 \u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7b56\u7565 LRU\uff08Least Recently Used\uff09\u3002 \u5f00\u7bc7\u95ee\u9898\u5c31\u662f\uff1a\u5982\u4f55\u7528\u94fe\u8868\u6765\u5b9e\u73b0 LRU \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565\u5462\uff1f","title":"\u94fe\u8868\uff08\u4e0a\uff09\uff1a\u5982\u4f55\u5b9e\u73b0LRU\u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5?"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_1","text":"\u76f8\u6bd4\u6570\u7ec4\uff0c\u94fe\u8868\u662f\u4e00\u79cd\u7a0d\u5fae\u590d\u6742\u4e00\u70b9\u7684\u6570\u636e\u7ed3\u6784\u3002\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u638c\u63e1\u8d77\u6765\u4e5f\u8981\u6bd4\u6570\u7ec4\u7a0d\u96be\u4e00\u4e9b\u3002\u8fd9\u4e24\u4e2a\u975e\u5e38\u57fa \u7840\u3001\u975e\u5e38\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4eec\u5e38\u5e38\u5c06\u4f1a\u653e\u5230\u4e00\u5757\u513f\u6765\u6bd4\u8f83\u3002\u6240\u4ee5\u6211\u4eec\u5148\u6765\u770b\uff0c\u8fd9\u4e24\u8005\u6709\u4ec0\u4e48\u533a\u522b\u3002 \u6211\u4eec\u5148\u4ece**\u5e95\u5c42\u7684\u5b58\u50a8\u7ed3\u6784**\u4e0a\u6765\u770b\u4e00\u770b\u3002 \u4e3a\u4e86\u76f4\u89c2\u5730\u5bf9\u6bd4\uff0c\u6211\u753b\u4e86\u4e00\u5f20\u56fe\u3002\u4ece\u56fe\u4e2d\u6211\u4eec\u770b\u5230\uff0c\u6570\u7ec4\u9700\u8981\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u6765\u5b58\u50a8\uff0c\u5bf9\u5185\u5b58\u7684\u8981\u6c42\u6bd4\u8f83\u9ad8\u3002 \u5982\u679c\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a 100MB \u5927\u5c0f\u7684\u6570\u7ec4\uff0c\u5f53\u5185\u5b58\u4e2d\u6ca1\u6709\u8fde\u7eed\u7684\u3001\u8db3\u591f\u5927\u7684\u5b58\u50a8\u7a7a\u95f4\u65f6\uff0c\u5373\u4fbf\u5185\u5b58\u7684\u5269\u4f59\u603b\u53ef\u7528\u7a7a\u95f4 \u5927\u4e8e 100MB\uff0c\u4ecd\u7136\u4f1a\u7533\u8bf7\u5931\u8d25\u3002 \u800c\u94fe\u8868\u6070\u6070\u76f8\u53cd\uff0c\u5b83\u5e76\u4e0d\u9700\u8981\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5b83\u901a\u8fc7\u201c\u6307\u9488\u201d\u5c06\u4e00\u7ec4\u96f6\u6563\u7684\u5185\u5b58\u5757\u4e32\u8054\u8d77\u6765\u4f7f\u7528\uff0c\u6240\u4ee5\u5982\u679c\u6211 \u4eec\u7533\u8bf7\u7684\u662f 100MB \u5927\u5c0f\u7684\u94fe\u8868\uff0c\u6839\u672c\u4e0d\u4f1a\u6709\u95ee\u9898\u3002 \u94fe\u8868\u7ed3\u6784\u4e94\u82b1\u516b\u95e8\uff0c\u4eca\u5929\u6211\u91cd\u70b9\u7ed9\u4f60\u4ecb\u7ecd\u4e09\u79cd\u6700\u5e38\u89c1\u7684\u94fe\u8868\u7ed3\u6784\uff0c\u5b83\u4eec\u5206\u522b\u662f\uff1a\u5355\u94fe\u8868\u3001\u53cc\u5411\u94fe\u8868\u548c\u5faa\u73af\u94fe\u8868\u3002","title":"\u4e94\u82b1\u516b\u95e8\u7684\u94fe\u8868\u7ed3\u6784"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_2","text":"\u6211\u4eec\u9996\u5148\u6765\u770b\u6700\u7b80\u5355\u3001\u6700\u5e38\u7528\u7684\u5355\u94fe\u8868\u3002 \u6211\u4eec\u521a\u521a\u8bb2\u5230\uff0c\u94fe\u8868\u901a\u8fc7\u6307\u9488\u5c06\u4e00\u7ec4\u96f6\u6563\u7684\u5185\u5b58\u5757\u4e32\u8054\u5728\u4e00\u8d77\u3002\u5176\u4e2d\uff0c\u6211\u4eec\u628a\u5185\u5b58\u5757\u79f0\u4e3a\u94fe\u8868\u7684\u201c \u7ed3\u70b9 \u201d\u3002\u4e3a\u4e86\u5c06\u6240 \u6709\u7684\u7ed3\u70b9\u4e32\u8d77\u6765\uff0c\u6bcf\u4e2a\u94fe\u8868\u7684\u7ed3\u70b9\u9664\u4e86\u5b58\u50a8\u6570\u636e\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u8bb0\u5f55\u94fe\u4e0a\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u5730\u5740\u3002\u5982\u56fe\u6240\u793a\uff0c\u6211\u4eec\u628a\u8fd9 \u4e2a\u8bb0\u5f55\u4e0b\u4e2a\u7ed3\u70b9\u5730\u5740\u7684\u6307\u9488\u53eb\u4f5c**\u540e\u7ee7\u6307\u9488 next**\u3002 \u4ece\u6211\u753b\u7684\u5355\u94fe\u8868\u56fe\u4e2d\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u4e2d\u6709\u4e24\u4e2a\u7ed3\u70b9\u662f\u6bd4\u8f83\u7279\u6b8a\u7684\uff0c\u5b83\u4eec\u5206\u522b\u662f\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u3002 \u6211\u4eec\u4e60\u60ef\u6027\u5730\u628a\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u53eb\u4f5c**\u5934\u7ed3\u70b9**\uff0c\u628a\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u53eb\u4f5c**\u5c3e\u7ed3\u70b9**\u3002\u5176\u4e2d\uff0c\u5934\u7ed3\u70b9\u7528\u6765\u8bb0\u5f55\u94fe\u8868\u7684\u57fa\u5730\u5740\u3002\u6709\u4e86 \u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u904d\u5386\u5f97\u5230\u6574\u6761\u94fe\u8868\u3002\u800c\u5c3e\u7ed3\u70b9\u7279\u6b8a\u7684\u5730\u65b9\u662f\uff1a\u6307\u9488\u4e0d\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u800c\u662f\u6307\u5411\u4e00\u4e2a**\u7a7a\u5730\u5740 ** NULL \uff0c\u8868\u793a\u8fd9\u662f\u94fe\u8868\u4e0a\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u3002 \u4e0e\u6570\u7ec4\u4e00\u6837\uff0c\u94fe\u8868\u4e5f\u652f\u6301\u6570\u636e\u7684\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002 \u6211\u4eec\u77e5\u9053\uff0c\u5728\u8fdb\u884c\u6570\u7ec4\u7684\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u6570\u636e\u7684\u8fde\u7eed\u6027\uff0c\u9700\u8981\u505a\u5927\u91cf\u7684\u6570\u636e\u642c\u79fb\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742 \u5ea6\u662f O(n)\u3002\u800c\u5728\u94fe\u8868\u4e2d\u63d2\u5165\u6216\u8005\u5220\u9664\u4e00\u4e2a\u6570\u636e\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7684\u8fde\u7eed\u6027\u800c\u642c\u79fb\u7ed3\u70b9\uff0c\u56e0\u4e3a\u94fe\u8868\u7684\u5b58 \u50a8\u7a7a\u95f4\u672c\u8eab\u5c31\u4e0d\u662f\u8fde\u7eed\u7684\u3002\u6240\u4ee5\uff0c\u5728\u94fe\u8868\u4e2d\u63d2\u5165\u548c\u5220\u9664\u4e00\u4e2a\u6570\u636e\u662f\u975e\u5e38\u5feb\u901f\u7684\u3002 \u4e3a\u4e86\u65b9\u4fbf\u4f60\u7406\u89e3\uff0c\u6211\u753b\u4e86\u4e00\u5f20\u56fe\uff0c\u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u9488\u5bf9\u94fe\u8868\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u76f8\u90bb\u7ed3\u70b9\u7684 \u6307\u9488\u6539\u53d8\uff0c\u6240\u4ee5\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002 \u4f46\u662f\uff0c\u6709\u5229\u5c31\u6709\u5f0a\u3002\u94fe\u8868\u8981\u60f3\u968f\u673a\u8bbf\u95ee\u7b2c k \u4e2a\u5143\u7d20\uff0c\u5c31\u6ca1\u6709\u6570\u7ec4\u90a3\u4e48\u9ad8\u6548\u4e86\u3002\u56e0\u4e3a\u94fe\u8868\u4e2d\u7684\u6570\u636e\u5e76\u975e\u8fde\u7eed\u5b58\u50a8 \u7684\uff0c\u6240\u4ee5\u65e0\u6cd5\u50cf\u6570\u7ec4\u90a3\u6837\uff0c\u6839\u636e\u9996\u5730\u5740\u548c\u4e0b\u6807\uff0c\u901a\u8fc7\u5bfb\u5740\u516c\u5f0f\u5c31\u80fd\u76f4\u63a5\u8ba1\u7b97\u51fa\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u662f\u9700\u8981\u6839\u636e\u6307\u9488 \u4e00\u4e2a\u7ed3\u70b9\u4e00\u4e2a\u7ed3\u70b9\u5730\u4f9d\u6b21\u904d\u5386\uff0c\u76f4\u5230\u627e\u5230\u76f8\u5e94\u7684\u7ed3\u70b9\u3002 \u4f60\u53ef\u4ee5\u628a\u94fe\u8868\u60f3\u8c61\u6210\u4e00\u4e2a\u961f\u4f0d\uff0c\u961f\u4f0d\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u53ea\u77e5\u9053\u81ea\u5df1\u540e\u9762\u7684\u4eba\u662f\u8c01\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u6392\u5728\u7b2c k \u4f4d\u7684 \u4eba\u662f\u8c01\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4ece\u7b2c\u4e00\u4e2a\u4eba\u5f00\u59cb\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5730\u5f80\u4e0b\u6570\u3002\u6240\u4ee5\uff0c\u94fe\u8868\u968f\u673a\u8bbf\u95ee\u7684\u6027\u80fd\u6ca1\u6709\u6570\u7ec4\u597d\uff0c\u9700\u8981 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002","title":"\u5355\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_3","text":"\u5faa\u73af\u94fe\u8868\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5355\u94fe\u8868 \u3002\u5b9e\u9645\u4e0a\uff0c\u5faa\u73af\u94fe\u8868\u4e5f\u5f88\u7b80\u5355\u3002\u5b83\u8ddf\u5355\u94fe\u8868\u552f\u4e00\u7684\u533a\u522b\u5c31\u5728\u5c3e\u7ed3\u70b9\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5355\u94fe \u8868\u7684\u5c3e\u7ed3\u70b9\u6307\u9488\u6307\u5411\u7a7a\u5730\u5740\uff0c\u8868\u793a\u8fd9\u5c31\u662f\u6700\u540e\u7684\u7ed3\u70b9\u4e86\u3002\u800c\u5faa\u73af\u94fe\u8868\u7684\u5c3e\u7ed3\u70b9\u6307\u9488\u662f\u6307\u5411\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002\u4ece\u6211\u753b\u7684 \u5faa\u73af\u94fe\u8868\u56fe\u4e2d\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5b83\u50cf\u4e00\u4e2a\u73af\u4e00\u6837\u9996\u5c3e\u76f8\u8fde\uff0c\u6240\u4ee5\u53eb\u4f5c\u201c\u5faa\u73af\u201d\u94fe\u8868\u3002 \u548c\u5355\u94fe\u8868\u76f8\u6bd4\uff0c\u5faa\u73af\u94fe\u8868\u7684\u4f18\u70b9\u662f\u4ece\u94fe\u5c3e\u5230\u94fe\u5934\u6bd4\u8f83\u65b9\u4fbf\u3002\u5f53\u8981\u5904\u7406\u7684\u6570\u636e\u5177\u6709\u73af\u578b\u7ed3\u6784\u7279\u70b9\u65f6\uff0c\u5c31\u7279\u522b\u9002\u5408\u91c7\u7528 \u5faa\u73af\u94fe\u8868\u3002\u6bd4\u5982\u8457\u540d\u7684**\u7ea6\u745f\u592b\u95ee\u9898**\u3002\u5c3d\u7ba1\u7528\u5355\u94fe\u8868\u4e5f\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4f46\u662f\u7528\u5faa\u73af\u94fe\u8868\u5b9e\u73b0\u7684\u8bdd\uff0c\u4ee3\u7801\u5c31\u4f1a\u7b80\u6d01\u5f88\u591a\u3002","title":"\u5faa\u73af\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_4","text":"\u5355\u94fe\u8868\u548c\u5faa\u73af\u94fe\u8868\u662f\u4e0d\u662f\u90fd\u4e0d\u96be\uff1f\u63a5\u4e0b\u6765\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u7684\uff0c\u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u4e5f\u66f4\u52a0\u5e38\u7528\u7684\u94fe\u8868\u7ed3 \u6784\uff1a\u53cc\u5411\u94fe\u8868\u3002 \u5355\u5411\u94fe\u8868\u53ea\u6709\u4e00\u4e2a\u65b9\u5411\uff0c\u7ed3\u70b9\u53ea\u6709\u4e00\u4e2a\u540e\u7ee7\u6307\u9488 next \u6307\u5411\u540e\u9762\u7684\u7ed3\u70b9\u3002\u800c\u53cc\u5411\u94fe\u8868\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5b83\u652f\u6301\u4e24\u4e2a\u65b9 \u5411\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e0d\u6b62\u6709\u4e00\u4e2a\u540e\u7ee7\u6307\u9488 next \u6307\u5411\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u8fd8\u6709\u4e00\u4e2a\u524d\u9a71\u6307\u9488 prev \u6307\u5411\u524d\u9762\u7684\u7ed3\u70b9\u3002 \u4ece\u6211\u753b\u7684\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u53cc\u5411\u94fe\u8868\u9700\u8981\u989d\u5916\u7684\u4e24\u4e2a\u7a7a\u95f4\u6765\u5b58\u50a8\u540e\u7ee7\u7ed3\u70b9\u548c\u524d\u9a71\u7ed3\u70b9\u7684\u5730\u5740\u3002\u6240\u4ee5\uff0c\u5982\u679c\u5b58\u50a8\u540c\u6837 \u591a\u7684\u6570\u636e\uff0c\u53cc\u5411\u94fe\u8868\u8981\u6bd4\u5355\u94fe\u8868\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u867d\u7136\u4e24\u4e2a\u6307\u9488\u6bd4\u8f83\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c\u4f46\u53ef\u4ee5\u652f\u6301\u53cc\u5411\u904d\u5386\uff0c\u8fd9 \u6837\u4e5f\u5e26\u6765\u4e86\u53cc\u5411\u94fe\u8868\u64cd\u4f5c\u7684\u7075\u6d3b\u6027\u3002\u90a3\u76f8\u6bd4\u5355\u94fe\u8868\uff0c\u53cc\u5411\u94fe\u8868\u9002\u5408\u89e3\u51b3\u54ea\u79cd\u95ee\u9898\u5462\uff1f \u4ece\u7ed3\u6784\u4e0a\u6765\u770b\uff0c\u53cc\u5411\u94fe\u8868\u53ef\u4ee5\u652f\u6301 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u60c5\u51b5\u4e0b\u627e\u5230\u524d\u9a71\u7ed3\u70b9\uff0c\u6b63\u662f\u8fd9\u6837\u7684\u7279\u70b9\uff0c\u4e5f\u4f7f\u53cc\u5411\u94fe\u8868\u5728\u67d0 \u4e9b\u60c5\u51b5\u4e0b\u7684\u63d2\u5165\u3001\u5220\u9664\u7b49\u64cd\u4f5c\u90fd\u8981\u6bd4\u5355\u94fe\u8868\u7b80\u5355\u3001\u9ad8\u6548\u3002 \u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u6211\u521a\u8bb2\u5230\u5355\u94fe\u8868\u7684\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5df2\u7ecf\u662f O(1) \u4e86\uff0c\u53cc\u5411\u94fe\u8868\u8fd8\u80fd\u518d\u600e\u4e48\u9ad8\u6548\u5462\uff1f\u522b\u7740 \u6025\uff0c\u521a\u521a\u7684\u5206\u6790\u6bd4\u8f83\u504f\u7406\u8bba\uff0c\u5f88\u591a\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e66\u7c4d\u4e2d\u90fd\u4f1a\u8fd9\u4e48\u8bb2\uff0c\u4f46\u662f\u8fd9\u79cd\u8bf4\u6cd5\u5b9e\u9645\u4e0a\u662f\u4e0d\u51c6\u786e\u7684\uff0c\u6216\u8005\u8bf4\u662f \u6709\u5148\u51b3\u6761\u4ef6\u7684\u3002\u6211\u518d\u6765\u5e26\u4f60\u5206\u6790\u4e00\u4e0b\u94fe\u8868\u7684\u4e24\u4e2a\u64cd\u4f5c\u3002","title":"\u53cc\u5411\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_5","text":"\u6211\u4eec\u5148\u6765\u770b\u5220\u9664\u64cd\u4f5c\u3002 \u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u4ece\u94fe\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u6570\u636e\u65e0\u5916\u4e4e\u8fd9\u4e24\u79cd\u60c5\u51b5\uff1a \u5220\u9664\u7ed3\u70b9\u4e2d\u201c\u503c\u7b49\u4e8e\u67d0\u4e2a\u7ed9\u5b9a\u503c\u201d\u7684\u7ed3\u70b9\uff1b \u5220\u9664\u7ed9\u5b9a\u6307\u9488\u6307\u5411\u7684\u7ed3\u70b9\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u4e0d\u7ba1\u662f\u5355\u94fe\u8868\u8fd8\u662f\u53cc\u5411\u94fe\u8868\uff0c\u4e3a\u4e86\u67e5\u627e\u5230\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u7ed3\u70b9\uff0c\u90fd\u9700\u8981\u4ece\u5934\u7ed3\u70b9\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u4f9d \u6b21\u904d\u5386\u5bf9\u6bd4\uff0c\u76f4\u5230\u627e\u5230\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u518d\u901a\u8fc7\u6211\u524d\u9762\u8bb2\u7684\u6307\u9488\u64cd\u4f5c\u5c06\u5176\u5220\u9664\u3002 \u5c3d\u7ba1\u5355\u7eaf\u7684\u5220\u9664\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\uff0c\u4f46\u904d\u5386\u67e5\u627e\u7684\u65f6\u95f4\u662f\u4e3b\u8981\u7684\u8017\u65f6\u70b9\uff0c\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002\u6839\u636e\u65f6 \u95f4\u590d\u6742\u5ea6\u5206\u6790\u4e2d\u7684\u52a0\u6cd5\u6cd5\u5219\uff0c\u5220\u9664\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u7ed3\u70b9\u5bf9\u5e94\u7684\u94fe\u8868\u64cd\u4f5c\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u8981\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u4f46\u662f\u5220\u9664\u67d0\u4e2a\u7ed3\u70b9 q \u9700\u8981\u77e5\u9053\u5176\u524d\u9a71\u7ed3\u70b9\uff0c\u800c\u5355\u94fe\u8868\u5e76\u4e0d\u652f\u6301 \u76f4\u63a5\u83b7\u53d6\u524d\u9a71\u7ed3\u70b9\uff0c\u6240\u4ee5\uff0c\u4e3a\u4e86\u627e\u5230\u524d\u9a71\u7ed3\u70b9\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u4ece\u5934\u7ed3\u70b9\u5f00\u59cb\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230 p->next=q\uff0c\u8bf4\u660e p \u662f q \u7684\u524d\u9a71\u7ed3\u70b9\u3002 \u4f46\u662f\u5bf9\u4e8e\u53cc\u5411\u94fe\u8868\u6765\u8bf4\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c31\u6bd4\u8f83\u6709\u4f18\u52bf\u4e86\u3002\u56e0\u4e3a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9\u5df2\u7ecf\u4fdd\u5b58\u4e86\u524d\u9a71\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u4e0d\u9700\u8981\u50cf \u5355\u94fe\u8868\u90a3\u6837\u904d\u5386\u3002\u6240\u4ee5\uff0c\u9488\u5bf9\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5355\u94fe\u8868\u5220\u9664\u64cd\u4f5c\u9700\u8981 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u800c\u53cc\u5411\u94fe\u8868\u53ea\u9700\u8981\u5728 O(1) \u7684 \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5c31\u641e\u5b9a\u4e86\uff01","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_6","text":"\u540c\u7406\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5728\u94fe\u8868\u7684\u67d0\u4e2a\u6307\u5b9a\u7ed3\u70b9\u524d\u9762\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9\uff0c\u53cc\u5411\u94fe\u8868\u6bd4\u5355\u94fe\u8868\u6709\u5f88\u5927\u7684\u4f18\u52bf\u3002\u53cc\u5411\u94fe\u8868\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u641e\u5b9a\uff0c\u800c\u5355\u5411\u94fe\u8868\u9700\u8981 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u53ef\u4ee5\u53c2\u7167\u6211\u521a\u521a\u8bb2\u8fc7\u7684\u5220\u9664\u64cd\u4f5c\u81ea\u5df1\u5206\u6790\u4e00\u4e0b\u3002 \u9664\u4e86\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u6709\u4f18\u52bf\u4e4b\u5916\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5e8f\u94fe\u8868\uff0c\u53cc\u5411\u94fe\u8868\u7684\u6309\u503c\u67e5\u8be2\u7684\u6548\u7387\u4e5f\u8981\u6bd4\u5355\u94fe\u8868\u9ad8\u4e00\u4e9b\u3002\u56e0\u4e3a\uff0c\u6211 \u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0a\u6b21\u67e5\u627e\u7684\u4f4d\u7f6e p\uff0c\u6bcf\u6b21\u67e5\u8be2\u65f6\uff0c\u6839\u636e\u8981\u67e5\u627e\u7684\u503c\u4e0e p \u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u51b3\u5b9a\u662f\u5f80\u524d\u8fd8\u662f\u5f80\u540e\u67e5\u627e\uff0c\u6240\u4ee5 \u5e73\u5747\u53ea\u9700\u8981\u67e5\u627e\u4e00\u534a\u7684\u6570\u636e\u3002 \u73b0\u5728\uff0c\u4f60\u6709\u6ca1\u6709\u89c9\u5f97\u53cc\u5411\u94fe\u8868\u8981\u6bd4\u5355\u94fe\u8868\u66f4\u52a0\u9ad8\u6548\u5462\uff1f\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u53cc\u5411\u94fe\u8868\u5c3d\u7ba1\u6bd4\u8f83\u8d39\u5185 \u5b58\uff0c\u4f46\u8fd8\u662f\u6bd4\u5355\u94fe\u8868\u7684\u5e94\u7528\u66f4\u52a0\u5e7f\u6cdb\u7684\u539f\u56e0\u3002\u5982\u679c\u4f60\u719f\u6089 Java \u8bed\u8a00\uff0c\u4f60\u80af\u5b9a\u7528\u8fc7 LinkedHashMap \u8fd9\u4e2a\u5bb9\u5668\u3002\u5982 \u679c\u4f60\u6df1\u5165\u7814\u7a76 LinkedHashMap \u7684\u5b9e\u73b0\u539f\u7406\uff0c\u5c31\u4f1a\u53d1\u73b0\u5176\u4e2d\u5c31\u7528\u5230\u4e86\u53cc\u5411\u94fe\u8868\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u66f4\u52a0\u91cd\u8981\u7684\u77e5\u8bc6\u70b9\u9700\u8981\u4f60\u638c\u63e1\uff0c\u90a3\u5c31\u662f\u7528**\u7a7a\u95f4\u6362\u65f6\u95f4**\u7684\u8bbe\u8ba1\u601d\u60f3\u3002\u5f53\u5185\u5b58\u7a7a\u95f4\u5145\u8db3\u7684\u65f6\u5019\uff0c \u5982\u679c\u6211\u4eec\u66f4\u52a0\u8ffd\u6c42\u4ee3\u7801\u7684\u6267\u884c\u901f\u5ea6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9009\u62e9\u7a7a\u95f4\u590d\u6742\u5ea6\u76f8\u5bf9\u8f83\u9ad8\u3001\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u5bf9\u5f88\u4f4e\u7684\u7b97\u6cd5\u6216\u8005\u6570\u636e \u7ed3\u6784\u3002\u76f8\u53cd\uff0c\u5982\u679c\u5185\u5b58\u6bd4\u8f83\u7d27\u7f3a\uff0c\u6bd4\u5982\u4ee3\u7801\u8dd1\u5728\u624b\u673a\u6216\u8005\u5355\u7247\u673a\u4e0a\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u5c31\u8981\u53cd\u8fc7\u6765\u7528\u65f6\u95f4\u6362\u7a7a\u95f4\u7684\u8bbe\u8ba1\u601d \u8def\u3002 \u8fd8\u662f\u5f00\u7bc7\u7f13\u5b58\u7684\u4f8b\u5b50\u3002\u7f13\u5b58\u5b9e\u9645\u4e0a\u5c31\u662f\u5229\u7528\u4e86\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u8bbe\u8ba1\u601d\u60f3\u3002\u5982\u679c\u6211\u4eec\u628a\u6570\u636e\u5b58\u50a8\u5728\u786c\u76d8\u4e0a\uff0c\u4f1a\u6bd4\u8f83\u8282\u7701 \u5185\u5b58\uff0c\u4f46\u6bcf\u6b21\u67e5\u627e\u6570\u636e\u90fd\u8981\u8be2\u95ee\u4e00\u6b21\u786c\u76d8\uff0c\u4f1a\u6bd4\u8f83\u6162\u3002\u4f46\u5982\u679c\u6211\u4eec\u901a\u8fc7\u7f13\u5b58\u6280\u672f\uff0c\u4e8b\u5148\u5c06\u6570\u636e\u52a0\u8f7d\u5728\u5185\u5b58\u4e2d\uff0c\u867d\u7136 \u4f1a\u6bd4\u8f83\u8017\u8d39\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u662f\u6bcf\u6b21\u6570\u636e\u67e5\u8be2\u7684\u901f\u5ea6\u5c31\u5927\u5927\u63d0\u9ad8\u4e86\u3002 \u6240\u4ee5\u6211\u603b\u7ed3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u6267\u884c\u8f83\u6162\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\uff08\u7a7a\u95f4\u6362\u65f6\u95f4\uff09\u6765\u8fdb\u884c\u4f18\u5316\uff1b\u800c\u6d88\u8017\u8fc7\u591a\u5185\u5b58\u7684 \u7a0b\u5e8f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6d88\u8017\u66f4\u591a\u7684\u65f6\u95f4\uff08\u65f6\u95f4\u6362\u7a7a\u95f4\uff09\u6765\u964d\u4f4e\u5185\u5b58\u7684\u6d88\u8017\u3002\u4f60\u8fd8\u80fd\u60f3\u5230\u5176\u4ed6\u65f6\u95f4\u6362\u7a7a\u95f4\u6216\u8005\u7a7a\u95f4\u6362\u65f6\u95f4\u7684 \u4f8b\u5b50\u5417\uff1f","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_7","text":"\u4e86\u89e3\u4e86\u5faa\u73af\u94fe\u8868\u548c\u53cc\u5411\u94fe\u8868\uff0c\u5982\u679c\u628a\u8fd9\u4e24\u79cd\u94fe\u8868\u6574\u5408\u5728\u4e00\u8d77\u5c31\u662f\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff1a\u53cc\u5411\u5faa\u73af\u94fe\u8868\u3002\u6211\u60f3\u4e0d\u7528\u6211\u591a\u8bb2\uff0c \u4f60\u5e94\u8be5\u77e5\u9053\u53cc\u5411\u5faa\u73af\u94fe\u8868\u957f\u4ec0\u4e48\u6837\u5b50\u4e86\u5427\uff1f\u4f60\u53ef\u4ee5\u81ea\u5df1\u8bd5\u7740\u5728\u7eb8\u4e0a\u753b\u4e00\u753b\u3002","title":"\u53cc\u5411\u5faa\u73af\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#vs","text":"\u901a\u8fc7\u524d\u9762\u5185\u5bb9\u7684\u5b66\u4e60\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u77e5\u9053\uff0c\u6570\u7ec4\u548c\u94fe\u8868\u662f\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u5185\u5b58\u7ec4\u7ec7\u65b9\u5f0f\u3002\u6b63\u662f\u56e0\u4e3a\u5185\u5b58\u5b58\u50a8\u7684\u533a\u522b\uff0c \u5b83\u4eec\u63d2\u5165\u3001\u5220\u9664\u3001\u968f\u673a\u8bbf\u95ee\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6b63\u597d\u76f8\u53cd\u3002 \u4e0d\u8fc7\uff0c\u6570\u7ec4\u548c\u94fe\u8868\u7684\u5bf9\u6bd4\uff0c\u5e76\u4e0d\u80fd\u5c40\u9650\u4e8e\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u800c\u4e14\uff0c\u5728\u5b9e\u9645\u7684\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u4e0d\u80fd\u4ec5\u4ec5\u5229\u7528\u590d\u6742\u5ea6\u5206\u6790\u5c31\u51b3 \u5b9a\u4f7f\u7528\u54ea\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b58\u50a8\u6570\u636e\u3002 \u6570\u7ec4\u7b80\u5355\u6613\u7528\uff0c\u5728\u5b9e\u73b0\u4e0a\u4f7f\u7528\u7684\u662f\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u53ef\u4ee5\u501f\u52a9 CPU \u7684\u7f13\u5b58\u673a\u5236\uff0c\u9884\u8bfb\u6570\u7ec4\u4e2d\u7684\u6570\u636e\uff0c\u6240\u4ee5\u8bbf\u95ee\u6548 \u7387\u66f4\u9ad8\u3002\u800c\u94fe\u8868\u5728\u5185\u5b58\u4e2d\u5e76\u4e0d\u662f\u8fde\u7eed\u5b58\u50a8\uff0c\u6240\u4ee5\u5bf9 CPU \u7f13\u5b58\u4e0d\u53cb\u597d\uff0c\u6ca1\u529e\u6cd5\u6709\u6548\u9884\u8bfb\u3002 \u6570\u7ec4\u7684\u7f3a\u70b9\u662f\u5927\u5c0f\u56fa\u5b9a\uff0c\u4e00\u7ecf\u58f0\u660e\u5c31\u8981\u5360\u7528\u6574\u5757\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u3002\u5982\u679c\u58f0\u660e\u7684\u6570\u7ec4\u8fc7\u5927\uff0c\u7cfb\u7edf\u53ef\u80fd\u6ca1\u6709\u8db3\u591f\u7684\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u5206\u914d\u7ed9\u5b83\uff0c\u5bfc\u81f4\u201c\u5185\u5b58\u4e0d\u8db3\uff08out of memory\uff09\u201d\u3002\u5982\u679c\u58f0\u660e\u7684\u6570\u7ec4\u8fc7\u5c0f\uff0c\u5219\u53ef\u80fd\u51fa\u73b0\u4e0d\u591f\u7528\u7684\u60c5\u51b5\u3002\u8fd9\u65f6\u53ea\u80fd\u518d\u7533\u8bf7\u4e00\u4e2a\u66f4\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u628a\u539f\u6570\u7ec4\u62f7\u8d1d\u8fdb\u53bb\uff0c\u975e\u5e38\u8d39\u65f6\u3002\u94fe\u8868\u672c\u8eab\u6ca1\u6709\u5927\u5c0f\u7684\u9650\u5236\uff0c\u5929\u7136\u5730\u652f\u6301\u52a8\u6001\u6269\u5bb9\uff0c\u6211\u89c9\u5f97\u8fd9\u4e5f\u662f\u5b83\u4e0e\u6570\u7ec4\u6700\u5927\u7684\u533a\u522b\u3002 \u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u6211\u4eec Java \u4e2d\u7684 ArrayList \u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u652f\u6301\u52a8\u6001\u6269\u5bb9\u554a\uff1f\u6211\u4eec\u4e0a\u4e00\u8282\u8bfe\u8bb2\u8fc7\uff0c\u5f53\u6211\u4eec\u5f80\u652f\u6301\u52a8\u6001\u6269\u5bb9\u7684\u6570\u7ec4\u4e2d\u63d2\u5165\u4e00\u4e2a\u6570\u636e\u65f6\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u6ca1\u6709\u7a7a\u95f2\u7a7a\u95f4\u4e86\uff0c\u5c31\u4f1a\u7533\u8bf7\u4e00\u4e2a\u66f4\u5927\u7684\u7a7a\u95f4\uff0c\u5c06\u6570\u636e\u62f7\u8d1d\u8fc7\u53bb\uff0c\u800c\u6570\u636e\u62f7\u8d1d\u7684\u64cd\u4f5c\u662f\u975e\u5e38\u8017\u65f6\u7684\u3002 \u6211\u4e3e\u4e00\u4e2a\u7a0d\u5fae\u6781\u7aef\u7684\u4f8b\u5b50\u3002\u5982\u679c\u6211\u4eec\u7528 ArrayList \u5b58\u50a8\u4e86\u4e86 1GB \u5927\u5c0f\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u5df2\u7ecf\u6ca1\u6709\u7a7a\u95f2\u7a7a\u95f4\u4e86\uff0c\u5f53\u6211\u4eec\u518d\u63d2\u5165\u6570\u636e\u7684\u65f6\u5019\uff0cArrayList \u4f1a\u7533\u8bf7\u4e00\u4e2a 1.5GB \u5927\u5c0f\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u4e14\u628a\u539f\u6765\u90a3 1GB \u7684\u6570\u636e\u62f7\u8d1d\u5230\u65b0\u7533\u8bf7\u7684\u7a7a\u95f4\u4e0a\u3002\u542c\u8d77\u6765\u662f\u4e0d\u662f\u5c31\u5f88\u8017\u65f6\uff1f \u9664\u6b64\u4e4b\u5916\uff0c\u5982\u679c\u4f60\u7684\u4ee3\u7801\u5bf9\u5185\u5b58\u7684\u4f7f\u7528\u975e\u5e38\u82db\u523b\uff0c\u90a3\u6570\u7ec4\u5c31\u66f4\u9002\u5408\u4f60\u3002\u56e0\u4e3a\u94fe\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u9700\u8981\u6d88\u8017\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u53bb\u5b58\u50a8\u4e00\u4efd\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u7684\u6307\u9488\uff0c\u6240\u4ee5\u5185\u5b58\u6d88\u8017\u4f1a\u7ffb\u500d\u3002\u800c\u4e14\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u9891\u7e41\u7684\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\uff0c\u8fd8\u4f1a\u5bfc\u81f4\u9891\u7e41\u7684\u5185\u5b58\u7533\u8bf7\u548c\u91ca\u653e\uff0c\u5bb9\u6613\u9020\u6210\u5185\u5b58\u788e\u7247\uff0c\u5982\u679c\u662f Java \u8bed\u8a00\uff0c\u5c31\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9891\u7e41\u7684 GC\uff08Garbage Collection\uff0c\u5783\u573e\u56de\u6536\uff09\u3002 \u6240\u4ee5\uff0c\u5728\u6211\u4eec\u5b9e\u9645\u7684\u5f00\u53d1\u4e2d\uff0c\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u9879\u76ee\uff0c\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c\u6743\u8861\u7a76\u7adf\u662f\u9009\u62e9\u6570\u7ec4\u8fd8\u662f\u94fe\u8868\u3002","title":"\u94fe\u8868 VS \u6570\u7ec4\u6027\u80fd\u5927\u6bd4\u62fc"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_8","text":"\u597d\u4e86\uff0c\u5173\u4e8e\u94fe\u8868\u7684\u77e5\u8bc6\u6211\u4eec\u5c31\u8bb2\u5b8c\u4e86\u3002\u6211\u4eec\u73b0\u5728\u56de\u8fc7\u5934\u6765\u770b\u4e0b\u5f00\u7bc7\u7559\u7ed9\u4f60\u7684\u601d\u8003\u9898\u3002\u5982\u4f55\u57fa\u4e8e\u94fe\u8868\u5b9e\u73b0 LRU \u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5\uff1f \u6211\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u5355\u94fe\u8868\uff0c\u8d8a\u9760\u8fd1\u94fe\u8868\u5c3e\u90e8\u7684\u7ed3\u70b9\u662f\u8d8a\u65e9\u4e4b\u524d\u8bbf\u95ee\u7684\u3002\u5f53\u6709\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u88ab\u8bbf\u95ee\u65f6\uff0c\u6211\u4eec\u4ece\u94fe\u8868\u5934\u5f00\u59cb\u987a\u5e8f\u904d\u5386\u94fe\u8868\u3002 \u5982\u679c\u6b64\u6570\u636e\u4e4b\u524d\u5df2\u7ecf\u88ab\u7f13\u5b58\u5728\u94fe\u8868\u4e2d\u4e86\uff0c\u6211\u4eec\u904d\u5386\u5f97\u5230\u8fd9\u4e2a\u6570\u636e\u5bf9\u5e94\u7684\u7ed3\u70b9\uff0c\u5e76\u5c06\u5176\u4ece\u539f\u6765\u7684\u4f4d\u7f6e\u5220\u9664\uff0c\u7136\u540e\u518d\u63d2\u5165\u5230\u94fe\u8868\u7684\u5934\u90e8\u3002 \u5982\u679c\u6b64\u6570\u636e\u6ca1\u6709\u5728\u7f13\u5b58\u94fe\u8868\u4e2d\uff0c\u53c8\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a \u5982\u679c\u6b64\u65f6\u7f13\u5b58\u672a\u6ee1\uff0c\u5219\u5c06\u6b64\u7ed3\u70b9\u76f4\u63a5\u63d2\u5165\u5230\u94fe\u8868\u7684\u5934\u90e8\uff1b \u5982\u679c\u6b64\u65f6\u7f13\u5b58\u5df2\u6ee1\uff0c\u5219\u94fe\u8868\u5c3e\u7ed3\u70b9\u5220\u9664\uff0c\u5c06\u65b0\u7684\u6570\u636e\u7ed3\u70b9\u63d2\u5165\u94fe\u8868\u7684\u5934\u90e8\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u7528\u94fe\u8868\u5b9e\u73b0\u4e86\u4e00\u4e2a LRU \u7f13\u5b58\uff0c\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1f \u73b0\u5728\u6211\u4eec\u6765\u770b\u4e0b m \u7f13\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\u3002\u56e0\u4e3a\u4e0d\u7ba1\u7f13\u5b58\u6709\u6ca1\u6709\u6ee1\uff0c\u6211\u4eec\u90fd\u9700\u8981\u904d\u5386\u4e00\u904d\u94fe\u8868\uff0c\u6240\u4ee5\u8fd9\u79cd\u57fa\u4e8e\u94fe\u8868\u7684\u5b9e\u73b0\u601d\u8def\uff0c\u7f13\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u8fd9\u4e2a\u5b9e\u73b0\u601d\u8def\uff0c\u6bd4\u5982\u5f15\u5165\u6563\u5217\u8868\uff08Hash table\uff09\u6765\u8bb0\u5f55\u6bcf\u4e2a\u6570\u636e\u7684\u4f4d\u7f6e\uff0c\u5c06\u7f13\u5b58\u8bbf\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230 O(1)\u3002\u56e0\u4e3a\u8981\u6d89\u53ca\u6211\u4eec\u8fd8\u6ca1\u6709\u8bb2\u5230\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4f18\u5316\u65b9\u6848\uff0c\u6211\u73b0\u5728\u5c31\u4e0d\u8be6\u7ec6\u8bf4\u4e86\uff0c\u7b49\u8bb2\u5230\u6563\u5217\u8868\u7684\u65f6\u5019\uff0c\u6211\u4f1a\u518d\u62ff\u51fa\u6765\u8bb2\u3002","title":"\u89e3\u7b54\u5f00\u7bc7"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_9","text":"\u4eca\u5929\u6211\u4eec\u8bb2\u4e86\u4e00\u79cd\u8ddf\u6570\u7ec4\u201c\u76f8\u53cd\u201d\u7684\u6570\u636e\u7ed3\u6784\uff0c\u94fe\u8868\u3002\u5b83\u8ddf\u6570\u7ec4\u4e00\u6837\uff0c\u4e5f\u662f\u975e\u5e38\u57fa\u7840\u3001\u975e\u5e38\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002\u4e0d\u8fc7\u94fe\u8868\u8981\u6bd4\u6570\u7ec4\u7a0d\u5fae\u590d\u6742\uff0c\u4ece\u666e\u901a\u7684\u5355\u94fe\u8868\u884d\u751f\u51fa\u6765\u597d\u51e0\u79cd\u94fe\u8868\u7ed3\u6784\uff0c\u6bd4\u5982\u53cc\u5411\u94fe\u8868\u3001\u5faa\u73af\u94fe\u8868\u3001\u53cc\u5411\u5faa\u73af\u94fe\u8868\u3002 \u548c\u6570\u7ec4\u76f8\u6bd4\uff0c\u94fe\u8868\u66f4\u9002\u5408\u63d2\u5165\u3001\u5220\u9664\u64cd\u4f5c\u9891\u7e41\u7684\u573a\u666f\uff0c\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\u3002\u4e0d\u8fc7\uff0c\u5728\u5177\u4f53\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u8981\u5bf9\u6570\u7ec4\u548c\u94fe\u8868\u7684\u5404\u79cd\u6027\u80fd\u8fdb\u884c\u5bf9\u6bd4\uff0c\u7efc\u5408\u6765\u9009\u62e9\u4f7f\u7528\u4e24\u8005\u4e2d\u7684\u54ea\u4e00\u4e2a\u3002","title":"\u5185\u5bb9\u5c0f\u7ed3"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8A/#_10","text":"\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u662f\u56de\u6587\u5b57\u7b26\u4e32\u7684\u95ee\u9898\uff0c\u6211\u60f3\u4f60\u5e94\u8be5\u542c\u8fc7\uff0c\u6211\u4eec\u4eca\u5929\u7684\u9898\u76ee\u5c31\u662f\u57fa\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u6539\u9020\u7248\u672c\u3002\u5982\u679c\u5b57\u7b26\u4e32\u662f\u901a\u8fc7\u5355\u94fe\u8868\u6765\u5b58\u50a8\u7684\uff0c\u90a3\u8be5\u5982\u4f55\u6765\u5224\u65ad\u662f\u4e00\u4e2a\u56de\u6587\u4e32\u5462\uff1f\u4f60\u6709\u4ec0\u4e48\u597d\u7684\u89e3\u51b3\u601d\u8def\u5462\uff1f\u76f8\u5e94\u7684\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\u5ea6\u53c8\u662f\u591a\u5c11\u5462\uff1f","title":"\u8bfe\u540e\u601d\u8003"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8B/","text":"\u94fe\u8868\uff08\u4e0b\uff09\uff1a\u5982\u4f55\u8f7b\u677e\u5199\u51fa\u6b63\u786e\u7684\u94fe\u8868\u4ee3\u7801\uff1f \u00b6 \u91cd\u70b9\u7559\u610f\u8fb9\u754c\u6761\u4ef6\u5904\u7406 \u00b6 \u6211\u7ecf\u5e38\u7528\u6765\u68c0\u67e5\u94fe\u8868\u4ee3\u7801\u662f\u5426\u6b63\u786e\u7684\u8fb9\u754c\u6761\u4ef6\u6709\u8fd9\u6837\u51e0\u4e2a\uff1a \u5982\u679c\u94fe\u8868\u4e3a\u7a7a\u65f6\uff0c\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1f \u5982\u679c\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7ed3\u70b9\u65f6\uff0c\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1f \u5982\u679c\u94fe\u8868\u53ea\u5305\u542b\u4e24\u4e2a\u7ed3\u70b9\u65f6\uff0c\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1f \u4ee3\u7801\u903b\u8f91\u5728\u5904\u7406\u5934\u7ed3\u70b9\u548c\u5c3e\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1f \u5f53\u4f60\u5199\u5b8c\u94fe\u8868\u4ee3\u7801\u4e4b\u540e\uff0c\u9664\u4e86\u770b\u4e0b\u4f60\u5199\u7684\u4ee3\u7801\u5728\u6b63\u5e38\u7684\u60c5\u51b5\u4e0b\u80fd\u5426\u5de5\u4f5c\uff0c\u8fd8\u8981\u770b\u4e0b\u5728\u4e0a\u9762\u6211\u5217\u4e3e\u7684\u51e0\u4e2a\u8fb9\u754c\u6761\u4ef6\u4e0b\uff0c\u4ee3\u7801\u4ecd\u7136\u80fd\u5426\u6b63\u786e\u5de5\u4f5c\u3002\u5982\u679c\u8fd9\u4e9b\u8fb9\u754c\u6761\u4ef6\u4e0b\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u90a3\u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba4\u4e3a\u6ca1\u6709\u95ee\u9898\u4e86\u3002 \u591a\u5199\u591a\u7ec3\uff0c\u6ca1\u6709\u6377\u5f84 \u00b6 5 \u4e2a\u5e38\u89c1\u7684\u94fe\u8868\u64cd\u4f5c\u3002\u4f60\u53ea\u8981\u628a\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u90fd\u80fd\u5199\u719f\u7ec3\uff0c\u4e0d\u719f\u5c31\u591a\u5199\u51e0\u904d\uff0c\u6211\u4fdd\u8bc1\u4f60\u4e4b\u540e\u518d\u4e5f\u4e0d\u4f1a\u5bb3\u6015\u5199\u94fe\u8868\u4ee3\u7801\u3002 \u5355\u94fe\u8868\u53cd\u8f6c \u94fe\u8868\u4e2d\u73af\u7684\u68c0\u6d4b \u4e24\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5408\u5e76 \u5220\u9664\u94fe\u8868\u5012\u6570\u7b2c n \u4e2a\u7ed3\u70b9 \u6c42\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9","title":"\u94fe\u8868\uff08\u4e0b\uff09\uff1a\u5982\u4f55\u8f7b\u677e\u5199\u51fa\u6b63\u786e\u7684\u94fe\u8868\u4ee3\u7801\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8B/#_1","text":"","title":"\u94fe\u8868\uff08\u4e0b\uff09\uff1a\u5982\u4f55\u8f7b\u677e\u5199\u51fa\u6b63\u786e\u7684\u94fe\u8868\u4ee3\u7801\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8B/#_2","text":"\u6211\u7ecf\u5e38\u7528\u6765\u68c0\u67e5\u94fe\u8868\u4ee3\u7801\u662f\u5426\u6b63\u786e\u7684\u8fb9\u754c\u6761\u4ef6\u6709\u8fd9\u6837\u51e0\u4e2a\uff1a \u5982\u679c\u94fe\u8868\u4e3a\u7a7a\u65f6\uff0c\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1f \u5982\u679c\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7ed3\u70b9\u65f6\uff0c\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1f \u5982\u679c\u94fe\u8868\u53ea\u5305\u542b\u4e24\u4e2a\u7ed3\u70b9\u65f6\uff0c\u4ee3\u7801\u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1f \u4ee3\u7801\u903b\u8f91\u5728\u5904\u7406\u5934\u7ed3\u70b9\u548c\u5c3e\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u662f\u5426\u80fd\u6b63\u5e38\u5de5\u4f5c\uff1f \u5f53\u4f60\u5199\u5b8c\u94fe\u8868\u4ee3\u7801\u4e4b\u540e\uff0c\u9664\u4e86\u770b\u4e0b\u4f60\u5199\u7684\u4ee3\u7801\u5728\u6b63\u5e38\u7684\u60c5\u51b5\u4e0b\u80fd\u5426\u5de5\u4f5c\uff0c\u8fd8\u8981\u770b\u4e0b\u5728\u4e0a\u9762\u6211\u5217\u4e3e\u7684\u51e0\u4e2a\u8fb9\u754c\u6761\u4ef6\u4e0b\uff0c\u4ee3\u7801\u4ecd\u7136\u80fd\u5426\u6b63\u786e\u5de5\u4f5c\u3002\u5982\u679c\u8fd9\u4e9b\u8fb9\u754c\u6761\u4ef6\u4e0b\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u90a3\u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba4\u4e3a\u6ca1\u6709\u95ee\u9898\u4e86\u3002","title":"\u91cd\u70b9\u7559\u610f\u8fb9\u754c\u6761\u4ef6\u5904\u7406"},{"location":"%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8-%E4%B8%8B/#_3","text":"5 \u4e2a\u5e38\u89c1\u7684\u94fe\u8868\u64cd\u4f5c\u3002\u4f60\u53ea\u8981\u628a\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u90fd\u80fd\u5199\u719f\u7ec3\uff0c\u4e0d\u719f\u5c31\u591a\u5199\u51e0\u904d\uff0c\u6211\u4fdd\u8bc1\u4f60\u4e4b\u540e\u518d\u4e5f\u4e0d\u4f1a\u5bb3\u6015\u5199\u94fe\u8868\u4ee3\u7801\u3002 \u5355\u94fe\u8868\u53cd\u8f6c \u94fe\u8868\u4e2d\u73af\u7684\u68c0\u6d4b \u4e24\u4e2a\u6709\u5e8f\u7684\u94fe\u8868\u5408\u5e76 \u5220\u9664\u94fe\u8868\u5012\u6570\u7b2c n \u4e2a\u7ed3\u70b9 \u6c42\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9","title":"\u591a\u5199\u591a\u7ec3\uff0c\u6ca1\u6709\u6377\u5f84"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/linux_%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","text":"linux_\u7f16\u7a0b\u73af\u5883\u642d\u5efa \u00b6 \u5b89\u88c5\u7f16\u8bd1\u5668 \u00b6 apt-get install gcc \u7f16\u8f91\u4ee3\u7801 \u00b6 \u7f16\u8f91test.c\u6587\u4ef6 #include <stdio.h> int main ( int args , char * argv []) { printf ( \"Hello world \\n \" ); return 0 ; } \u7f16\u8bd1 \u00b6 gcc -o test test.c \u8fd9\u4e2a\u547d\u4ee4\u7684\u610f\u601d\u662f\uff0c\u8fd0\u884cgcc\u547d\u4ee4\uff0c\u7f16\u8bd1test.c\u6587\u4ef6\uff1b-o\u8868\u793a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u4fdd\u5b58\u4e3atest\u3002\u4e0d\u51fa\u610f\u5916\uff0c\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u540d\u4e3atest\u7684\u53ef\u6267\u884c\u6587\u4ef6 \u8fd0\u884c \u00b6 \u76f4\u63a5\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u8f93\u51fa\u7684Hello world\u4e86\uff1a $ ./test Hello world","title":"Linux \u7f16\u7a0b\u73af\u5883\u642d\u5efa"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/linux_%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#linux_","text":"","title":"linux_\u7f16\u7a0b\u73af\u5883\u642d\u5efa"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/linux_%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_1","text":"apt-get install gcc","title":"\u5b89\u88c5\u7f16\u8bd1\u5668"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/linux_%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_2","text":"\u7f16\u8f91test.c\u6587\u4ef6 #include <stdio.h> int main ( int args , char * argv []) { printf ( \"Hello world \\n \" ); return 0 ; }","title":"\u7f16\u8f91\u4ee3\u7801"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/linux_%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_3","text":"gcc -o test test.c \u8fd9\u4e2a\u547d\u4ee4\u7684\u610f\u601d\u662f\uff0c\u8fd0\u884cgcc\u547d\u4ee4\uff0c\u7f16\u8bd1test.c\u6587\u4ef6\uff1b-o\u8868\u793a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u4fdd\u5b58\u4e3atest\u3002\u4e0d\u51fa\u610f\u5916\uff0c\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u540d\u4e3atest\u7684\u53ef\u6267\u884c\u6587\u4ef6","title":"\u7f16\u8bd1"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/linux_%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_4","text":"\u76f4\u63a5\u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u8f93\u51fa\u7684Hello world\u4e86\uff1a $ ./test Hello world","title":"\u8fd0\u884c"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/%E7%BB%AA%E8%AE%BA/","text":"\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784 \u00b6 \u5b9a\u4e49 \u00b6 \u6570\u636e\uff1a \u5bf9\u5ba2\u89c2\u4e8b\u7269\u7684\u7b26\u53f7\u8868\u793a\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u662f\u6307\u6240\u6709\u80fd\u8f93\u5165\u5230\u8ba1\u7b97\u673a\u4e2d\u5e76\u88ab\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5904\u7406\u7684\u7b26\u53f7\u7684\u603b\u79f0\u3002 \u6570\u636e\u5143\u7d20\uff1a \u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5728\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u901a\u5e38\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u8003\u8651\u548c\u5904\u7406\u3002 \u4e00\u4e2a\u6570\u636e\u5143\u7d20\u7531\u591a\u4e2a\u6570\u636e\u9879\u7ec4\u6210\u3002 \u6570\u636e\u5bf9\u8c61\uff1a\u6027\u8d28\u76f8\u540c\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\u3002 \u662f\u6570\u636e\u7684\u4e00\u4e2a\u5b50\u96c6\u3002 \u5982\uff1a\u6574\u6570\u6570\u636e\u5bf9\u8c61\u662f\u96c6\u5408N={0, 1, 2, 3, -1, -2, ...} \u6570\u636e\u7ed3\u6784\uff1a \u7814\u7a76\u975e\u6570\u503c\u8ba1\u7b97\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u95ee\u9898\u4e2d\u8ba1\u7b97\u673a\u7684\u64cd\u4f5c\u5bf9\u8c61\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u5173\u7cfb\u548c\u64cd\u4f5c\u7b49\u7684\u5b66\u79d1 \u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u6216\u591a\u79cd\u7279\u5b9a\u5173\u7cfb\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\u3002 \u7b97\u6cd5\u7684\u8bbe\u8ba1\u53d6\u51b3\u4e8e\u9009\u5b9a\u7684\u6570\u636e(\u903b\u8f91)\u7ed3\u6784\uff0c\u800c\u7b97\u6cd5\u7684\u5b9e\u73b0\u4f9d\u8d56\u4e8e\u91c7\u7528\u7684\u5b58\u50a8\u7ed3\u6784\u3002 \u6570\u636e\u7c7b\u578b\uff1a \u6570\u636e\u7c7b\u578b\u662f\u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u8fd9\u4e2a\u503c\u96c6\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0\u3002 \u539f\u5b50\u7c7b\u578b\uff0c\u539f\u5b50\u7c7b\u578b\u7684\u503c\u662f\u4e0d\u53ef\u5206\u89e3\u7684\uff0c\u4f8b\u5982\u6574\u884c\uff0c\u5b57\u7b26\u578b\uff0c\u679a\u4e3e\u7c7b\u578b \u7ed3\u6784\u7c7b\u578b\uff0c\u7531\u82e5\u5e72\u6210\u5206\u6309\u67d0\u79cd\u7ed3\u6784\u7ec4\u6210\u7684\uff0c\u56e0\u6b64\u662f\u53ef\u4ee5\u5206\u89e3\u7684 \u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff1a Abstract Data Type, \u7b80\u79f0ADT, \u662f\u6307\u4e00\u4e2a\u6570\u5b66\u6a21\u578b\u4ee5\u53ca\u5b9a\u4e49\u5728\u8be5\u6a21\u578b\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u3002","title":"\u7eea\u8bba"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/%E7%BB%AA%E8%AE%BA/#_1","text":"","title":"\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AE%97%E6%B3%95/c_data_struct/%E7%BB%AA%E8%AE%BA/#_2","text":"\u6570\u636e\uff1a \u5bf9\u5ba2\u89c2\u4e8b\u7269\u7684\u7b26\u53f7\u8868\u793a\uff0c\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u662f\u6307\u6240\u6709\u80fd\u8f93\u5165\u5230\u8ba1\u7b97\u673a\u4e2d\u5e76\u88ab\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5904\u7406\u7684\u7b26\u53f7\u7684\u603b\u79f0\u3002 \u6570\u636e\u5143\u7d20\uff1a \u6570\u636e\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5728\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u901a\u5e38\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u8003\u8651\u548c\u5904\u7406\u3002 \u4e00\u4e2a\u6570\u636e\u5143\u7d20\u7531\u591a\u4e2a\u6570\u636e\u9879\u7ec4\u6210\u3002 \u6570\u636e\u5bf9\u8c61\uff1a\u6027\u8d28\u76f8\u540c\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\u3002 \u662f\u6570\u636e\u7684\u4e00\u4e2a\u5b50\u96c6\u3002 \u5982\uff1a\u6574\u6570\u6570\u636e\u5bf9\u8c61\u662f\u96c6\u5408N={0, 1, 2, 3, -1, -2, ...} \u6570\u636e\u7ed3\u6784\uff1a \u7814\u7a76\u975e\u6570\u503c\u8ba1\u7b97\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u95ee\u9898\u4e2d\u8ba1\u7b97\u673a\u7684\u64cd\u4f5c\u5bf9\u8c61\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u5173\u7cfb\u548c\u64cd\u4f5c\u7b49\u7684\u5b66\u79d1 \u76f8\u4e92\u4e4b\u95f4\u5b58\u5728\u4e00\u79cd\u6216\u591a\u79cd\u7279\u5b9a\u5173\u7cfb\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\u3002 \u7b97\u6cd5\u7684\u8bbe\u8ba1\u53d6\u51b3\u4e8e\u9009\u5b9a\u7684\u6570\u636e(\u903b\u8f91)\u7ed3\u6784\uff0c\u800c\u7b97\u6cd5\u7684\u5b9e\u73b0\u4f9d\u8d56\u4e8e\u91c7\u7528\u7684\u5b58\u50a8\u7ed3\u6784\u3002 \u6570\u636e\u7c7b\u578b\uff1a \u6570\u636e\u7c7b\u578b\u662f\u4e00\u4e2a\u503c\u7684\u96c6\u5408\u548c\u5b9a\u4e49\u5728\u8fd9\u4e2a\u503c\u96c6\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u7684\u603b\u79f0\u3002 \u539f\u5b50\u7c7b\u578b\uff0c\u539f\u5b50\u7c7b\u578b\u7684\u503c\u662f\u4e0d\u53ef\u5206\u89e3\u7684\uff0c\u4f8b\u5982\u6574\u884c\uff0c\u5b57\u7b26\u578b\uff0c\u679a\u4e3e\u7c7b\u578b \u7ed3\u6784\u7c7b\u578b\uff0c\u7531\u82e5\u5e72\u6210\u5206\u6309\u67d0\u79cd\u7ed3\u6784\u7ec4\u6210\u7684\uff0c\u56e0\u6b64\u662f\u53ef\u4ee5\u5206\u89e3\u7684 \u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff1a Abstract Data Type, \u7b80\u79f0ADT, \u662f\u6307\u4e00\u4e2a\u6570\u5b66\u6a21\u578b\u4ee5\u53ca\u5b9a\u4e49\u5728\u8be5\u6a21\u578b\u4e0a\u7684\u4e00\u7ec4\u64cd\u4f5c\u3002","title":"\u5b9a\u4e49"},{"location":"%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","text":"\u7b97\u6cd5\u4ecb\u7ecd \u00b6 \u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u63d2\u5165\u6392\u5e8f\uff0c \u5bf9\u4e8e\u5c11\u91cf\u5143\u7d20\u7684\u6392\u5e8f\uff0e \u5b83\u662f\u4e00\u4e2a\u6253\u6548\u7684\u7b95\u6cd5\uff0e \u63d2\u5165\u6392\u5e8f\u7684\u5de5\u4f5c\u65b9\u5f0f \u50cf\u8bb8\u591a\u4eba\u6392\u5e8f \u4e00 \u624b\u6251\u514b\u724c\uff0e \u5f00\u59cb\u65f6\uff0e\u6211\u4eec\u7684\u5de6\u624b\u4e3a\u7a7a\u5e76\u4e14\u684c\u5b50\u4e0a\u7684\u724c\u9762\u5411\u4e0b\uff0e \u7136\u540e\uff0e\u6211\u4eec\u6bcf\u6b21\u4ece \u684c\u5b50\u4e0a\u62ff\u8d70 \u4e00 \u5f20\u724c\u4e95\u5c06\u5b83\u63d2\u5165\u5de6\u624b\u4e2d\u6b63\u786e\u7684\u4f4d\u7f6e\uff0e \u4e3a\u4e86\u627e\u5230 \u4e00 \u5f20\u724c\u7684\u6b63\u786e\u4f4d\u7f6e\uff0c\u6211\u4eec\u4ece\u53f3\u5230\u5de6\u5c06\u5b83\u4e0e \u5df2\u5728\u624b\u4e2d\u7684\u6bcf\u5f20\u724c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0e \u62ff\u5728 \u5de6\u624b\u4e0a\u7684\u724c\u603b\u662f\u6392\u5e8f\u597d\u7684\uff0e\u539f\u6765\u8fd9\u4e9b\u724c\u662f\u684c\u5b50\u4e0a\u724c \u5806\u4e2d\u9876\u90e8\u7684\u724c\uff0e def insert_sort ( seq ): for j in range ( len ( seq )): key = seq [ j ] i = j - 1 while i >= 0 and seq [ i ] > key : seq [ i + 1 ] = seq [ i ] i -= 1 seq [ i + 1 ] = key def test_insert_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) insert_sort ( seq ) assert ( seq == sorted ( seq )) \u5faa\u73af\u4e0d\u53d8\u5f0f\u4e0e\u63d2\u5165\u6392\u5e8f\u7684\u6b63\u786e\u6027 \u00b6 \u5faa\u73af\u4e0d\u53d8\u5f0f\u4e3b\u800d\u7528\u6765\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0e \u5173\u4e8e\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0c\u6211\u4eec\u5fc5\u987b\u8bc1\u660e\u4e09\u6761\u6027\u8d28 \u521d\u59cb\u5316: \u5faa\u73af\u7684\u7b2c\u4e00\u6b21\u8fbe\u4ee3\u4e4b\u524d,\u5b83\u4e3a\u771f\uff0e \u4fdd\u6301: \u5982\u679c\u5faa\u73af\u7684\u67d0\u6b21\u8fed\u4ee3\u4e4b\u524d\u5b83\u4e3a\u771f\uff0e \u90a3\u4e48\u4e0b\u6b21\u8fed\u4ee3\u4e4b\u524d\u5b83\u4ecd\u4e3a\u771f\uff0e \u7ec8\u6b62: \u5728\u5faa\u73af\u7ec8\u6b62\u65f6\uff0c\u4e0d\u53d8\u5f0f\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u6709\u7528\u7684\u6027\u8d28\uff0c\u8be5\u6027\u8d28\u6709\u52a9\u4e8e\u8bc1\u660e\u7b97\u6cd5\u662f\u6b63\u786e\u7684\uff0e \u5f53\u524d\u4e24\u6761\u6027\u8d28\u6210\u7acb\u65f6\uff0e\u5728\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u4e4b\u524d\u5faa\u73af\u4e0d\u53d8\u5f0f\u4e3a\u771f\uff0e\uff08\u5f53\u7136\uff0c\u4e3a\u4e86\u8bc1\u660e\u5faa\u73af\u4e0d\u53d8\u5f0f\u5728\u6bcf\u6b21\u8fbe\u4ee3\u4e4b\u524d\u4fdd\u6301\u4e3a\u771f\uff0e\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u4e8e\u5faa\u73af\u4e0d\u53d8\u5f0f\u672c\u8eab\u7684\u5176\u4ed6\u5df2\u8bc1\u5b9e\u7684\u4e8b\u5b9e\uff0e\uff09\u6ce8\u610f\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c \u5176\u4e2d\u4e3a\u4e86\u7814\u660e\u67d0\u6761\u6027\u8d28\u6210\u7acb\uff0c\u9700\u800d\u8bc1\u660e\u4e00\u4e2a\u57fa\u672c\u60c5\u51b5\u548c\u4e00\u4e2a\u5f52\u7eb3\u6b65\uff0e\u8fd9\u91cc\uff0e\u8bc1\u660e\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e4b\u524d\u4e0d\u53d8\u5f0f\u6210\u7acb\u5bf9\u5e94\u4e8e\u57fa\u672c\u60c5\u51b5\uff0e\u8bc1\u660e\u4ece\u4e00\u6b21\u8fed\u4ee3\u5230\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4e0d\u53d8\u5f0f\u6210\u7acb\u5bf9\u5e94\u4e8e\u5f52\u7eb3\u6b65\uff0e \u7b2c\u4e09\u6761\u6027\u8d28\u4e5f\u8bb8\u662f\u6700\u91cd\u8981\u7684\uff0e \u56e0\u4e3a\u6211\u4eec\u5c06\u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\u6765\u8bc1\u660e\u6b63\u786e\u6027\uff0e \u901a\u5e38\uff0c\u6211\u4eec\u548c\u5bfc\u81f4\u5faa\u73af\u7ec8\u6b62\u7684\u6761\u4ef6\u4e00\u8d77\u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0e\u7ec8\u6b62\u6027\u4e0d\u540c\u4e8e\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u505a\u6cd5\uff0c \u5728\u5f52\u7eb3\u6cd5\u4e2d\uff0c \u5f52\u7eb3\u6b65\u662f\u65e0\u9650\u5730\u4f7f\u7528\uff0c \u5728\u8fd9\u91cc\u5f53\u5faa\u73af\u7ec8\u6b62\u65f6\uff0c\u505c\u6b62\u201c\u5f52\u7eb3\u201d. \u8ba9\u6211\u4eec\u884c\u884c\u5bf9\u4e8e\u63d2\u4eba\u6392\u5e8f\uff0c \u5982\u4f55\u8bc1\u660e\u8fd9\u4e9b\u6027\u8d28\u6210\u7acb\uff0e \u00b6 \u521d\u59cb\u5316 : \u9996\u5148\u8bc1\u660e\u5728\u7b2c\u4e00\u6b21\u5faa\u73af\u8fed\u4ee3\u4e4b\u524d\uff08\u5f53j=2\u65f6\uff09\uff0c \u5faa\u73af\u4e0d\u53d8\u5f0f\u6210\u7acb\uff0e\u6240\u4ee5\u5b50\u6570\u7ec4 A[1..j-1]\u4ec5\u7531\u5355\u4e2a\u5143\u7d20A[1]\u7ec4\u6210\uff0c\u5b9e\u9645\u4e0a\u5c31\u662fA[1]\u4e2d\u539f\u6765\u7684\u5143\u7d20\uff0e \u800c\u4e14\u8be5\u5b50\u6570\u7ec4\u662f\u6392\u5e8f\u597d\u7684 \u8fd9\u8868\u660e\u7b2c\u4e00\u6b21\u5faa\u73af\u8fed\u4ee3\u4e4b\u524d\u5faa\u73af\u4e0d\u53d8\u5f0f\u6210\u7acb\uff0e \u4fdd\u6301 : \u5176\u6b21\u5904\u7406\u7b2c\u4e8c\u6761\u6027\u8d28\u8bc1\u660e\u6bcf\u6b21\u8fed\u4ee3\u4fdd\u6301\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0e\u5c06A[j-1].A[j-2]\u3001 A[j-3]\u7b49\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u76f4\u5230\u627e\u5230A[j]\u7684\u9002\u5f53\u4f4d\u7f6e\uff0c\u5c06A[j]\u7684\u503c\u63d2\u4eba\u8be5\u4f4d\u7f6e\u3002 \u8fd9\u65f6\u5b50\u6570\u7ec4A[1..n]\u7531\u539f\u6765\u5728A[1..n]\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\uff0e\u4f46\u5df2\u6309\u5e8f\u6392\u5217\uff0e \u90a3\u4e48\u5bf9for\u5faa\u73af\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u589e\u52a0j\u5c06\u4fdd\u6301\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0e \u7ec8\u6b62 \uff1a\u6700\u540e\u7814\u7a76\u5728\u5faa\u73af\u7ec8\u6b62\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48\uff0e \u5bfc\u81f4for\u5faa\u73af\u7ec8\u6b62\u7684\u6761\u4ef6\u662fj>A.length=n\u3002 \u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3j\u589e\u52a01, \u90a3\u4e48\u5fc5\u6709j=n+1. \u5728\u5faa\u73af\u4e0d\u53d8\u5f0f\u7684\u8868\u8ff0\u4e2d\u5c06j\u7528n+1\u4ee3\u66ff\uff0e\u6211\u4eec\u6709\u5b50\u6570\u7ec4A[l..n]\u7531\u539f\u6765\u5728A[1..n]\u4e2d\u7684\u5143\u7d22\u7ec4\u6210\uff0e \u4f46\u5df2\u6309\u5e8f\u6392\u5217\uff0e \u6ce8\u610f\u5230\uff0e \u5b50\u6570\u7ec4A[1..n]\u5c31\u662f\u6574\u4e2a\u6570\u7ec4\uff0e\u6211\u4eec\u63a8\u65ad\u51fa\u6574\u4e2a\u6570\u7ec4\u5df2\u6392\u5e8f\uff0e\u56e0\u6b64\u7b97\u6cd5\u6b63\u786e\uff0e \u8003\u8651\u4ee5\u4e0b\u67e5\u627e\u95ee\u9898 \u00b6 \u8f93\u5165: n\u4e2a\u6570\u7684 \u4e00 \u4e2a\u5e8f\u5217A=(a,.a., ... , a,)\u548c \u4e00 \u4e2a\u503cv. \u8f93\u51fa: \u4e0b\u6807\uff0c\u4f7f\u5f97v~A[,]\u6216\u8005\u5f53v\u4e0d\u5728A\u4e2d\u51fa\u73b0\u65f6\u2022 V\u4e3a\u7279\u6b8a\u503cNIL. \u5199\u51fa\u7ebf\u6027\u67e5\u627e\u7684\u4f2a\u4ee3\u7801\uff0c\u5b83\u626b\u63cf\u6574\u4e2a\u5e8f\u5217\u6765\u67e5\u627ev. \u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u4e0d\u53d8\u5f0f\u6765\u8bc1\u660e\u4f60\u7684\u7b97\u6cd5 \u662f\u6b63\u786e\u7684\uff0e \u786e\u4fdd\u4f60\u7684\u5faa\u73af\u4e0d\u53d8\u5f0f\u6ee1\u8db3\u4e09\u6761\u5fc5\u8981\u7684\u6027\u8d28\uff0e for i=1 to A.length if A[i] == v return i return NULL \u5faa\u73af\u4e0d\u53d8\u5f0f\uff1a\u5bf9\u4e8e\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\uff0c\u5b50\u6570\u7ec4\uff08\u5df2\u904d\u5386\u7684\u5143\u7d20\uff09\u4e2d\u6ca1\u6709\u4e0ev\u76f8\u7b49\u7684\u503c\u3002 \u521d\u59cb\u5316\uff1a\u7b2c\u4e00\u6b21\u5faa\u73af\u4e4b\u524d\uff0ci = 1\uff0c\u5b50\u6570\u7ec4\u6ca1\u6709\u5143\u7d20\uff0c\u5176\u4e2d\u80af\u5b9a\u6ca1\u6709\u4e0ev\u76f8\u7b49\u7684\u503c\uff0c\u5faa\u73af\u4e0d\u53d8\u5f0f\u6210\u7acb\u3002 \u4fdd\u6301\uff1a\u6bcf\u6b21\u8fed\u4ee3\u90fd\u5c06\u6bd4\u8f83A[i]\u4e0ev\u7684\u503c\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5faa\u73af\u7ec8\u6b62\uff1b\u5982\u679c\u4e0d\u7b49\uff0cA[1\u2026i]\u4e2d\u6ca1\u6709\u4e0ev\u76f8\u7b49\u7684\u503c\uff0c\u5faa\u73af\u4e0d\u53d8\u5f0f\u4fdd\u6301\u3002 \u7ec8\u6b62\uff1a\u5f53i > A.length \u65f6\u6216\u8005A[i] == v \u65f6\u5faa\u73af\u7ec8\u6b62\u3002\u663e\u7136\u5bf9\u4e8e\u5b50\u6570\u7ec4\u5373\u4e0b\u6807\u5c0f\u4e8ei\u7684\u6240\u6709\u5143\u7d20\u5747\u6ca1\u6709\u4e0ev\u76f8\u7b49\u7684\u503c\uff0c\u7b97\u6cd5\u6b63\u786e\u3002 \u8003\u8651\u628a\u4e24\u4e2an\u4f4d\u4e8c\u8fdb\u5236\u6574\u6570\u52a0\u8d77\u6765\u7684\u95ee\u9898\uff0e\u8fd9\u4e24\u4e2a\u6574\u6570\u5206\u522b\u5b58\u50a8\u5728\u4e24\u4e2an\u5143\u6570\u7ec4A\u548cB\u4e2d\uff0e \u8fd9\u4e24\u4e2a\u6574\u6570\u7684\u548c\u5e94\u6309\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5b58\u50a8\u5728\u4e00\u4e2a(n+1)\u5143\u6570\u7ec4C\u4e2d\uff0e \u8bf7\u7ed9\u51fa\u8be5\u95ee\u9898\u7684\u5f62\u5f0f\u5316\u63cf\u8ff0\uff0c \u4e95\u5199\u51fa\u4f2a\u4ee3\u7801\uff0e carry = 0 for i=1 to n C[i] = (A[i] + B[i]) // 2 + carry carry = (A[i] + B[i]) % 2 C[i+1] = carry C[i] = (A[i] + B[i]) // 2 + (A[i-1] + B[i-1]) % 2 C[i+1] = (A[i+1] + B[i+1]) // 2 + (A[i] + B[i]) % 2","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_1","text":"\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u63d2\u5165\u6392\u5e8f\uff0c \u5bf9\u4e8e\u5c11\u91cf\u5143\u7d20\u7684\u6392\u5e8f\uff0e \u5b83\u662f\u4e00\u4e2a\u6253\u6548\u7684\u7b95\u6cd5\uff0e \u63d2\u5165\u6392\u5e8f\u7684\u5de5\u4f5c\u65b9\u5f0f \u50cf\u8bb8\u591a\u4eba\u6392\u5e8f \u4e00 \u624b\u6251\u514b\u724c\uff0e \u5f00\u59cb\u65f6\uff0e\u6211\u4eec\u7684\u5de6\u624b\u4e3a\u7a7a\u5e76\u4e14\u684c\u5b50\u4e0a\u7684\u724c\u9762\u5411\u4e0b\uff0e \u7136\u540e\uff0e\u6211\u4eec\u6bcf\u6b21\u4ece \u684c\u5b50\u4e0a\u62ff\u8d70 \u4e00 \u5f20\u724c\u4e95\u5c06\u5b83\u63d2\u5165\u5de6\u624b\u4e2d\u6b63\u786e\u7684\u4f4d\u7f6e\uff0e \u4e3a\u4e86\u627e\u5230 \u4e00 \u5f20\u724c\u7684\u6b63\u786e\u4f4d\u7f6e\uff0c\u6211\u4eec\u4ece\u53f3\u5230\u5de6\u5c06\u5b83\u4e0e \u5df2\u5728\u624b\u4e2d\u7684\u6bcf\u5f20\u724c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0e \u62ff\u5728 \u5de6\u624b\u4e0a\u7684\u724c\u603b\u662f\u6392\u5e8f\u597d\u7684\uff0e\u539f\u6765\u8fd9\u4e9b\u724c\u662f\u684c\u5b50\u4e0a\u724c \u5806\u4e2d\u9876\u90e8\u7684\u724c\uff0e def insert_sort ( seq ): for j in range ( len ( seq )): key = seq [ j ] i = j - 1 while i >= 0 and seq [ i ] > key : seq [ i + 1 ] = seq [ i ] i -= 1 seq [ i + 1 ] = key def test_insert_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) insert_sort ( seq ) assert ( seq == sorted ( seq ))","title":"\u7b97\u6cd5\u4ecb\u7ecd"},{"location":"%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_2","text":"\u5faa\u73af\u4e0d\u53d8\u5f0f\u4e3b\u800d\u7528\u6765\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0e \u5173\u4e8e\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0c\u6211\u4eec\u5fc5\u987b\u8bc1\u660e\u4e09\u6761\u6027\u8d28 \u521d\u59cb\u5316: \u5faa\u73af\u7684\u7b2c\u4e00\u6b21\u8fbe\u4ee3\u4e4b\u524d,\u5b83\u4e3a\u771f\uff0e \u4fdd\u6301: \u5982\u679c\u5faa\u73af\u7684\u67d0\u6b21\u8fed\u4ee3\u4e4b\u524d\u5b83\u4e3a\u771f\uff0e \u90a3\u4e48\u4e0b\u6b21\u8fed\u4ee3\u4e4b\u524d\u5b83\u4ecd\u4e3a\u771f\uff0e \u7ec8\u6b62: \u5728\u5faa\u73af\u7ec8\u6b62\u65f6\uff0c\u4e0d\u53d8\u5f0f\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u6709\u7528\u7684\u6027\u8d28\uff0c\u8be5\u6027\u8d28\u6709\u52a9\u4e8e\u8bc1\u660e\u7b97\u6cd5\u662f\u6b63\u786e\u7684\uff0e \u5f53\u524d\u4e24\u6761\u6027\u8d28\u6210\u7acb\u65f6\uff0e\u5728\u5faa\u73af\u7684\u6bcf\u6b21\u8fed\u4ee3\u4e4b\u524d\u5faa\u73af\u4e0d\u53d8\u5f0f\u4e3a\u771f\uff0e\uff08\u5f53\u7136\uff0c\u4e3a\u4e86\u8bc1\u660e\u5faa\u73af\u4e0d\u53d8\u5f0f\u5728\u6bcf\u6b21\u8fbe\u4ee3\u4e4b\u524d\u4fdd\u6301\u4e3a\u771f\uff0e\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u4e8e\u5faa\u73af\u4e0d\u53d8\u5f0f\u672c\u8eab\u7684\u5176\u4ed6\u5df2\u8bc1\u5b9e\u7684\u4e8b\u5b9e\uff0e\uff09\u6ce8\u610f\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c \u5176\u4e2d\u4e3a\u4e86\u7814\u660e\u67d0\u6761\u6027\u8d28\u6210\u7acb\uff0c\u9700\u800d\u8bc1\u660e\u4e00\u4e2a\u57fa\u672c\u60c5\u51b5\u548c\u4e00\u4e2a\u5f52\u7eb3\u6b65\uff0e\u8fd9\u91cc\uff0e\u8bc1\u660e\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e4b\u524d\u4e0d\u53d8\u5f0f\u6210\u7acb\u5bf9\u5e94\u4e8e\u57fa\u672c\u60c5\u51b5\uff0e\u8bc1\u660e\u4ece\u4e00\u6b21\u8fed\u4ee3\u5230\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4e0d\u53d8\u5f0f\u6210\u7acb\u5bf9\u5e94\u4e8e\u5f52\u7eb3\u6b65\uff0e \u7b2c\u4e09\u6761\u6027\u8d28\u4e5f\u8bb8\u662f\u6700\u91cd\u8981\u7684\uff0e \u56e0\u4e3a\u6211\u4eec\u5c06\u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\u6765\u8bc1\u660e\u6b63\u786e\u6027\uff0e \u901a\u5e38\uff0c\u6211\u4eec\u548c\u5bfc\u81f4\u5faa\u73af\u7ec8\u6b62\u7684\u6761\u4ef6\u4e00\u8d77\u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0e\u7ec8\u6b62\u6027\u4e0d\u540c\u4e8e\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u7684\u505a\u6cd5\uff0c \u5728\u5f52\u7eb3\u6cd5\u4e2d\uff0c \u5f52\u7eb3\u6b65\u662f\u65e0\u9650\u5730\u4f7f\u7528\uff0c \u5728\u8fd9\u91cc\u5f53\u5faa\u73af\u7ec8\u6b62\u65f6\uff0c\u505c\u6b62\u201c\u5f52\u7eb3\u201d.","title":"\u5faa\u73af\u4e0d\u53d8\u5f0f\u4e0e\u63d2\u5165\u6392\u5e8f\u7684\u6b63\u786e\u6027"},{"location":"%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_3","text":"\u521d\u59cb\u5316 : \u9996\u5148\u8bc1\u660e\u5728\u7b2c\u4e00\u6b21\u5faa\u73af\u8fed\u4ee3\u4e4b\u524d\uff08\u5f53j=2\u65f6\uff09\uff0c \u5faa\u73af\u4e0d\u53d8\u5f0f\u6210\u7acb\uff0e\u6240\u4ee5\u5b50\u6570\u7ec4 A[1..j-1]\u4ec5\u7531\u5355\u4e2a\u5143\u7d20A[1]\u7ec4\u6210\uff0c\u5b9e\u9645\u4e0a\u5c31\u662fA[1]\u4e2d\u539f\u6765\u7684\u5143\u7d20\uff0e \u800c\u4e14\u8be5\u5b50\u6570\u7ec4\u662f\u6392\u5e8f\u597d\u7684 \u8fd9\u8868\u660e\u7b2c\u4e00\u6b21\u5faa\u73af\u8fed\u4ee3\u4e4b\u524d\u5faa\u73af\u4e0d\u53d8\u5f0f\u6210\u7acb\uff0e \u4fdd\u6301 : \u5176\u6b21\u5904\u7406\u7b2c\u4e8c\u6761\u6027\u8d28\u8bc1\u660e\u6bcf\u6b21\u8fed\u4ee3\u4fdd\u6301\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0e\u5c06A[j-1].A[j-2]\u3001 A[j-3]\u7b49\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u76f4\u5230\u627e\u5230A[j]\u7684\u9002\u5f53\u4f4d\u7f6e\uff0c\u5c06A[j]\u7684\u503c\u63d2\u4eba\u8be5\u4f4d\u7f6e\u3002 \u8fd9\u65f6\u5b50\u6570\u7ec4A[1..n]\u7531\u539f\u6765\u5728A[1..n]\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\uff0e\u4f46\u5df2\u6309\u5e8f\u6392\u5217\uff0e \u90a3\u4e48\u5bf9for\u5faa\u73af\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3\u589e\u52a0j\u5c06\u4fdd\u6301\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0e \u7ec8\u6b62 \uff1a\u6700\u540e\u7814\u7a76\u5728\u5faa\u73af\u7ec8\u6b62\u65f6\u53d1\u751f\u4e86\u4ec0\u4e48\uff0e \u5bfc\u81f4for\u5faa\u73af\u7ec8\u6b62\u7684\u6761\u4ef6\u662fj>A.length=n\u3002 \u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3j\u589e\u52a01, \u90a3\u4e48\u5fc5\u6709j=n+1. \u5728\u5faa\u73af\u4e0d\u53d8\u5f0f\u7684\u8868\u8ff0\u4e2d\u5c06j\u7528n+1\u4ee3\u66ff\uff0e\u6211\u4eec\u6709\u5b50\u6570\u7ec4A[l..n]\u7531\u539f\u6765\u5728A[1..n]\u4e2d\u7684\u5143\u7d22\u7ec4\u6210\uff0e \u4f46\u5df2\u6309\u5e8f\u6392\u5217\uff0e \u6ce8\u610f\u5230\uff0e \u5b50\u6570\u7ec4A[1..n]\u5c31\u662f\u6574\u4e2a\u6570\u7ec4\uff0e\u6211\u4eec\u63a8\u65ad\u51fa\u6574\u4e2a\u6570\u7ec4\u5df2\u6392\u5e8f\uff0e\u56e0\u6b64\u7b97\u6cd5\u6b63\u786e\uff0e","title":"\u8ba9\u6211\u4eec\u884c\u884c\u5bf9\u4e8e\u63d2\u4eba\u6392\u5e8f\uff0c \u5982\u4f55\u8bc1\u660e\u8fd9\u4e9b\u6027\u8d28\u6210\u7acb\uff0e"},{"location":"%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_4","text":"\u8f93\u5165: n\u4e2a\u6570\u7684 \u4e00 \u4e2a\u5e8f\u5217A=(a,.a., ... , a,)\u548c \u4e00 \u4e2a\u503cv. \u8f93\u51fa: \u4e0b\u6807\uff0c\u4f7f\u5f97v~A[,]\u6216\u8005\u5f53v\u4e0d\u5728A\u4e2d\u51fa\u73b0\u65f6\u2022 V\u4e3a\u7279\u6b8a\u503cNIL. \u5199\u51fa\u7ebf\u6027\u67e5\u627e\u7684\u4f2a\u4ee3\u7801\uff0c\u5b83\u626b\u63cf\u6574\u4e2a\u5e8f\u5217\u6765\u67e5\u627ev. \u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u4e0d\u53d8\u5f0f\u6765\u8bc1\u660e\u4f60\u7684\u7b97\u6cd5 \u662f\u6b63\u786e\u7684\uff0e \u786e\u4fdd\u4f60\u7684\u5faa\u73af\u4e0d\u53d8\u5f0f\u6ee1\u8db3\u4e09\u6761\u5fc5\u8981\u7684\u6027\u8d28\uff0e for i=1 to A.length if A[i] == v return i return NULL \u5faa\u73af\u4e0d\u53d8\u5f0f\uff1a\u5bf9\u4e8e\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\uff0c\u5b50\u6570\u7ec4\uff08\u5df2\u904d\u5386\u7684\u5143\u7d20\uff09\u4e2d\u6ca1\u6709\u4e0ev\u76f8\u7b49\u7684\u503c\u3002 \u521d\u59cb\u5316\uff1a\u7b2c\u4e00\u6b21\u5faa\u73af\u4e4b\u524d\uff0ci = 1\uff0c\u5b50\u6570\u7ec4\u6ca1\u6709\u5143\u7d20\uff0c\u5176\u4e2d\u80af\u5b9a\u6ca1\u6709\u4e0ev\u76f8\u7b49\u7684\u503c\uff0c\u5faa\u73af\u4e0d\u53d8\u5f0f\u6210\u7acb\u3002 \u4fdd\u6301\uff1a\u6bcf\u6b21\u8fed\u4ee3\u90fd\u5c06\u6bd4\u8f83A[i]\u4e0ev\u7684\u503c\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5faa\u73af\u7ec8\u6b62\uff1b\u5982\u679c\u4e0d\u7b49\uff0cA[1\u2026i]\u4e2d\u6ca1\u6709\u4e0ev\u76f8\u7b49\u7684\u503c\uff0c\u5faa\u73af\u4e0d\u53d8\u5f0f\u4fdd\u6301\u3002 \u7ec8\u6b62\uff1a\u5f53i > A.length \u65f6\u6216\u8005A[i] == v \u65f6\u5faa\u73af\u7ec8\u6b62\u3002\u663e\u7136\u5bf9\u4e8e\u5b50\u6570\u7ec4\u5373\u4e0b\u6807\u5c0f\u4e8ei\u7684\u6240\u6709\u5143\u7d20\u5747\u6ca1\u6709\u4e0ev\u76f8\u7b49\u7684\u503c\uff0c\u7b97\u6cd5\u6b63\u786e\u3002 \u8003\u8651\u628a\u4e24\u4e2an\u4f4d\u4e8c\u8fdb\u5236\u6574\u6570\u52a0\u8d77\u6765\u7684\u95ee\u9898\uff0e\u8fd9\u4e24\u4e2a\u6574\u6570\u5206\u522b\u5b58\u50a8\u5728\u4e24\u4e2an\u5143\u6570\u7ec4A\u548cB\u4e2d\uff0e \u8fd9\u4e24\u4e2a\u6574\u6570\u7684\u548c\u5e94\u6309\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5b58\u50a8\u5728\u4e00\u4e2a(n+1)\u5143\u6570\u7ec4C\u4e2d\uff0e \u8bf7\u7ed9\u51fa\u8be5\u95ee\u9898\u7684\u5f62\u5f0f\u5316\u63cf\u8ff0\uff0c \u4e95\u5199\u51fa\u4f2a\u4ee3\u7801\uff0e carry = 0 for i=1 to n C[i] = (A[i] + B[i]) // 2 + carry carry = (A[i] + B[i]) % 2 C[i+1] = carry C[i] = (A[i] + B[i]) // 2 + (A[i-1] + B[i-1]) % 2 C[i+1] = (A[i+1] + B[i+1]) // 2 + (A[i] + B[i]) % 2","title":"\u8003\u8651\u4ee5\u4e0b\u67e5\u627e\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E9%A2%98/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/","text":"\u7b97\u6cd5\u601d\u60f3 \u00b6","title":"\u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c"},{"location":"%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0%E9%A2%98/%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/#_1","text":"","title":"\u7b97\u6cd5\u601d\u60f3"},{"location":"%E9%80%86%E5%90%91/1_1_%E8%BF%9B%E5%88%B6%E7%9A%84%E6%9C%AC%E8%B4%A8/","text":"","title":"1_1_\u8fdb\u5236\u7684\u672c\u8d28"},{"location":"%E9%80%86%E5%90%91/1_%E8%BF%9B%E5%88%B6_%E5%AF%84%E5%AD%98%E5%99%A8_%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/","text":"\u8fdb\u5236\u7684\u5b9a\u4e49 \u00b6 \u4e8c\u8fdb\u5236: \u7531\u4e8c\u4e2a\u7b26\u53f7\u7ec4\u6210\uff0c\u5206\u522b\u662f0\uff0c 1 \u90222\u8fdb\u4e00 \u5341\u8fdb\u5236: \u7531\u5341\u4e2a\u7b26\u53f7\u7ec4\u6210\uff0c\u5206\u522b\u662f0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0c8\uff0c9 \u902210\u8fdb\u4e00 \u5982\u679c\u5c06\u8fdb\u5236\u5b9a\u4e49\u6210\u8fd9\u6837\uff0c\u4f60\u6709\u4f55\u60f3\u6cd5\uff1f \u5341\u8fdb\u5236\u5b9a\u4e49: \u7531\u5341\u4e2a\u7b26\u53f7\u7ec4\u6210\uff0c\u5206\u522b\u662f9 1 5 2 4 7 6 3 8 0 \u9022\u5341\u8fdb\u4e00 \u5982\u679c\u6539\u6210\u8fd9\u6837\u5462\uff1f \u4e86\u89e3\u4e8b\u7269\u7684\u672c\u8d28\uff0c\u91cd\u65b0\u5b9a\u4e49\u5341\u8fdb\u5236\uff0c\u7531\u5341\u4e2a\u7b26\u53f7\u7ec4\u6210\uff0c\u8fd9\u5341\u4e2a\u7b26\u53f7\u53ef\u4ee5\u662f\u4efb\u610f\u503c\uff0c\u9022\u5341\u8fdb\u4e00\u3002 \u5982\u679c\u5c06\u4e0a\u8ff0\u7684\u7b26\u53f7\u7528\u4e8e\u52a0\u5bc6\uff0c\u90a3\u4f1a\u7ed9\u89e3\u5bc6\u8005\u5e26\u6765\u6781\u5927\u7684\u9ebb\u70e6\uff01 \u5341\u8fdb\u5236 \u4e8c\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 0 0000 0 1 0001 1 2 0010 2 3 0011 3 4 0100 4 5 0101 5 6 0110 6 7 0111 7 8 1000 8 9 1001 9 10 1010 A 11 1011 B 12 1100 C 13 1101 D 14 1110 E 15 1111 F \u51e0\u4e2a\u91cd\u8981\u7684\u8ba1\u91cf\u5355\u4f4d \u00b6 BYTE \u5b57\u8282 8bit WORD \u5b57 16bit DWORD \u53cc 32bit \u903b\u8f91\u8fd0\u7b97 \u00b6 \u903b\u8f91\u8fd0\u7b97 C\u8bed\u8a00 \u6c47\u7f16 \u4e0e & and \u6216 | or \u975e ! not \u5f02\u6216 ^ xor cpu\u662f\u6574\u4e48\u8ba1\u7b971+1\u7684\uff1f cpu \u5148\u628a\u4e00\u4e2a 1 \u5b58\u5165\u5bc4\u5b58\u5668\uff0cX=0001, \u518d\u628a\u4e00\u4e2a1\u5b58\u5165\u5bc4\u5b58\u5668\uff0cY=0001 \u5148\u505a\u4e00\u4e2a\u5f02\u6216\u8fd0\u7b97 X xor Y = 0000, \u628a\u8fd0\u7b97\u7ed3\u679c\u5b58\u5165\u5bc4\u5b58\u5668 R = 0000 \u518d\u505a\u4e00\u4e2a\u4e0e\u8fd0\u7b97 X and Y = 0001, 0001 << 1 = 0010, 0010 != 0, \u628aR\u8d4b\u503c\u7ed9X\uff0c\u628a0010\uff08\u5de6\u79fb\u4e4b\u540e\u7684\u6570\uff09\u8d4b\u503c\u7ed9Y\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u76f4\u81f3 (X and Y) << 1 == 0, return R \u5224\u65ad\u67d0\u4e00\u4f4d\u662f0 \u8fd8\u662f1 \u5224\u65ad\u7b2cn\u4f4d\u662f0\u8fd8\u662f1\uff0c\u53ea\u9700\u8981\u5c06 1 << n and value X 1000 1111 Y 0000 1000 X and Y 0000 1000 \u5224\u65ad\u7b2c4\u4f4d\u662f\u5426\u4e3a0 \u5bc4\u5b58\u5668 \u00b6 \u5bc4\u5b58\u5668 \u4e3b\u8981\u7528\u9014 \u7f16\u53f7 \u5b58\u50a8\u6570\u636e\u7684\u8303\u56f4 EAX \u7d2f\u52a0\u5668 0 0-0xFFFFFFFF ECX \u8ba1\u6570 1 0-0xFFFFFFFF EDX I/O\u6307\u9488 2 0-0xFFFFFFFF EBX DS\u6bb5\u7684\u6570\u636e\u6307\u9488 3 0-0xFFFFFFFF ESP \u5806\u6808\u6307\u9488 4 0-0xFFFFFFFF EBP SS\u6bb5\u7684\u6570\u636e\u6307\u9488 5 0-0xFFFFFFFF ESI \u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u6e90\u6307\u9488\uff1bSS\u6bb5\u7684\u6570\u636e\u6307\u9488 6 0-0xFFFFFFFF EDI \u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u76ee\u6807\u6307\u9488\uff1bES\u6bb5\u7684\u6570\u636e\u6307\u9488 7 0-0xFFFFFFFF","title":"1_\u8fdb\u5236_\u5bc4\u5b58\u5668_\u6c47\u7f16\u6307\u4ee4"},{"location":"%E9%80%86%E5%90%91/1_%E8%BF%9B%E5%88%B6_%E5%AF%84%E5%AD%98%E5%99%A8_%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/#_1","text":"\u4e8c\u8fdb\u5236: \u7531\u4e8c\u4e2a\u7b26\u53f7\u7ec4\u6210\uff0c\u5206\u522b\u662f0\uff0c 1 \u90222\u8fdb\u4e00 \u5341\u8fdb\u5236: \u7531\u5341\u4e2a\u7b26\u53f7\u7ec4\u6210\uff0c\u5206\u522b\u662f0\uff0c1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0c8\uff0c9 \u902210\u8fdb\u4e00 \u5982\u679c\u5c06\u8fdb\u5236\u5b9a\u4e49\u6210\u8fd9\u6837\uff0c\u4f60\u6709\u4f55\u60f3\u6cd5\uff1f \u5341\u8fdb\u5236\u5b9a\u4e49: \u7531\u5341\u4e2a\u7b26\u53f7\u7ec4\u6210\uff0c\u5206\u522b\u662f9 1 5 2 4 7 6 3 8 0 \u9022\u5341\u8fdb\u4e00 \u5982\u679c\u6539\u6210\u8fd9\u6837\u5462\uff1f \u4e86\u89e3\u4e8b\u7269\u7684\u672c\u8d28\uff0c\u91cd\u65b0\u5b9a\u4e49\u5341\u8fdb\u5236\uff0c\u7531\u5341\u4e2a\u7b26\u53f7\u7ec4\u6210\uff0c\u8fd9\u5341\u4e2a\u7b26\u53f7\u53ef\u4ee5\u662f\u4efb\u610f\u503c\uff0c\u9022\u5341\u8fdb\u4e00\u3002 \u5982\u679c\u5c06\u4e0a\u8ff0\u7684\u7b26\u53f7\u7528\u4e8e\u52a0\u5bc6\uff0c\u90a3\u4f1a\u7ed9\u89e3\u5bc6\u8005\u5e26\u6765\u6781\u5927\u7684\u9ebb\u70e6\uff01 \u5341\u8fdb\u5236 \u4e8c\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 0 0000 0 1 0001 1 2 0010 2 3 0011 3 4 0100 4 5 0101 5 6 0110 6 7 0111 7 8 1000 8 9 1001 9 10 1010 A 11 1011 B 12 1100 C 13 1101 D 14 1110 E 15 1111 F","title":"\u8fdb\u5236\u7684\u5b9a\u4e49"},{"location":"%E9%80%86%E5%90%91/1_%E8%BF%9B%E5%88%B6_%E5%AF%84%E5%AD%98%E5%99%A8_%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/#_2","text":"BYTE \u5b57\u8282 8bit WORD \u5b57 16bit DWORD \u53cc 32bit","title":"\u51e0\u4e2a\u91cd\u8981\u7684\u8ba1\u91cf\u5355\u4f4d"},{"location":"%E9%80%86%E5%90%91/1_%E8%BF%9B%E5%88%B6_%E5%AF%84%E5%AD%98%E5%99%A8_%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/#_3","text":"\u903b\u8f91\u8fd0\u7b97 C\u8bed\u8a00 \u6c47\u7f16 \u4e0e & and \u6216 | or \u975e ! not \u5f02\u6216 ^ xor cpu\u662f\u6574\u4e48\u8ba1\u7b971+1\u7684\uff1f cpu \u5148\u628a\u4e00\u4e2a 1 \u5b58\u5165\u5bc4\u5b58\u5668\uff0cX=0001, \u518d\u628a\u4e00\u4e2a1\u5b58\u5165\u5bc4\u5b58\u5668\uff0cY=0001 \u5148\u505a\u4e00\u4e2a\u5f02\u6216\u8fd0\u7b97 X xor Y = 0000, \u628a\u8fd0\u7b97\u7ed3\u679c\u5b58\u5165\u5bc4\u5b58\u5668 R = 0000 \u518d\u505a\u4e00\u4e2a\u4e0e\u8fd0\u7b97 X and Y = 0001, 0001 << 1 = 0010, 0010 != 0, \u628aR\u8d4b\u503c\u7ed9X\uff0c\u628a0010\uff08\u5de6\u79fb\u4e4b\u540e\u7684\u6570\uff09\u8d4b\u503c\u7ed9Y\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u76f4\u81f3 (X and Y) << 1 == 0, return R \u5224\u65ad\u67d0\u4e00\u4f4d\u662f0 \u8fd8\u662f1 \u5224\u65ad\u7b2cn\u4f4d\u662f0\u8fd8\u662f1\uff0c\u53ea\u9700\u8981\u5c06 1 << n and value X 1000 1111 Y 0000 1000 X and Y 0000 1000 \u5224\u65ad\u7b2c4\u4f4d\u662f\u5426\u4e3a0","title":"\u903b\u8f91\u8fd0\u7b97"},{"location":"%E9%80%86%E5%90%91/1_%E8%BF%9B%E5%88%B6_%E5%AF%84%E5%AD%98%E5%99%A8_%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/#_4","text":"\u5bc4\u5b58\u5668 \u4e3b\u8981\u7528\u9014 \u7f16\u53f7 \u5b58\u50a8\u6570\u636e\u7684\u8303\u56f4 EAX \u7d2f\u52a0\u5668 0 0-0xFFFFFFFF ECX \u8ba1\u6570 1 0-0xFFFFFFFF EDX I/O\u6307\u9488 2 0-0xFFFFFFFF EBX DS\u6bb5\u7684\u6570\u636e\u6307\u9488 3 0-0xFFFFFFFF ESP \u5806\u6808\u6307\u9488 4 0-0xFFFFFFFF EBP SS\u6bb5\u7684\u6570\u636e\u6307\u9488 5 0-0xFFFFFFFF ESI \u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u6e90\u6307\u9488\uff1bSS\u6bb5\u7684\u6570\u636e\u6307\u9488 6 0-0xFFFFFFFF EDI \u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u76ee\u6807\u6307\u9488\uff1bES\u6bb5\u7684\u6570\u636e\u6307\u9488 7 0-0xFFFFFFFF","title":"\u5bc4\u5b58\u5668"}]}